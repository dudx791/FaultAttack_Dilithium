
PQCgenKAT_sign-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a928  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  0800aae8  0800aae8  0001aae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b414  0800b414  000209b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b414  0800b414  0001b414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b41c  0800b41c  000209b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b41c  0800b41c  0001b41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b0  20000000  0800b428  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200009b0  0800bdd8  000209b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200010bc  0800bdd8  000210bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c34e  00000000  00000000  000209da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee7  00000000  00000000  0002cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a128  00000000  00000000  0002ec0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  00038d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000960  00000000  00000000  00039457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008764  00000000  00000000  00039db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002893  00000000  00000000  0004251b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00044dae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  00044dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000204  00000000  00000000  00047aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000204  00000000  00000000  00047cac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009b0 	.word	0x200009b0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800aad0 	.word	0x0800aad0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009b4 	.word	0x200009b4
 80001fc:	0800aad0 	.word	0x0800aad0

08000200 <memcpy>:
 8000200:	4684      	mov	ip, r0
 8000202:	ea41 0300 	orr.w	r3, r1, r0
 8000206:	f013 0303 	ands.w	r3, r3, #3
 800020a:	d16d      	bne.n	80002e8 <memcpy+0xe8>
 800020c:	3a40      	subs	r2, #64	; 0x40
 800020e:	d341      	bcc.n	8000294 <memcpy+0x94>
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	3a40      	subs	r2, #64	; 0x40
 8000292:	d2bd      	bcs.n	8000210 <memcpy+0x10>
 8000294:	3230      	adds	r2, #48	; 0x30
 8000296:	d311      	bcc.n	80002bc <memcpy+0xbc>
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	3a10      	subs	r2, #16
 80002ba:	d2ed      	bcs.n	8000298 <memcpy+0x98>
 80002bc:	320c      	adds	r2, #12
 80002be:	d305      	bcc.n	80002cc <memcpy+0xcc>
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	3a04      	subs	r2, #4
 80002ca:	d2f9      	bcs.n	80002c0 <memcpy+0xc0>
 80002cc:	3204      	adds	r2, #4
 80002ce:	d008      	beq.n	80002e2 <memcpy+0xe2>
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	bf1c      	itt	ne
 80002d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002d8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002dc:	d301      	bcc.n	80002e2 <memcpy+0xe2>
 80002de:	880b      	ldrh	r3, [r1, #0]
 80002e0:	8003      	strh	r3, [r0, #0]
 80002e2:	4660      	mov	r0, ip
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	2a08      	cmp	r2, #8
 80002ea:	d313      	bcc.n	8000314 <memcpy+0x114>
 80002ec:	078b      	lsls	r3, r1, #30
 80002ee:	d08d      	beq.n	800020c <memcpy+0xc>
 80002f0:	f010 0303 	ands.w	r3, r0, #3
 80002f4:	d08a      	beq.n	800020c <memcpy+0xc>
 80002f6:	f1c3 0304 	rsb	r3, r3, #4
 80002fa:	1ad2      	subs	r2, r2, r3
 80002fc:	07db      	lsls	r3, r3, #31
 80002fe:	bf1c      	itt	ne
 8000300:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000304:	f800 3b01 	strbne.w	r3, [r0], #1
 8000308:	d380      	bcc.n	800020c <memcpy+0xc>
 800030a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800030e:	f820 3b02 	strh.w	r3, [r0], #2
 8000312:	e77b      	b.n	800020c <memcpy+0xc>
 8000314:	3a04      	subs	r2, #4
 8000316:	d3d9      	bcc.n	80002cc <memcpy+0xcc>
 8000318:	3a01      	subs	r2, #1
 800031a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800031e:	f800 3b01 	strb.w	r3, [r0], #1
 8000322:	d2f9      	bcs.n	8000318 <memcpy+0x118>
 8000324:	780b      	ldrb	r3, [r1, #0]
 8000326:	7003      	strb	r3, [r0, #0]
 8000328:	784b      	ldrb	r3, [r1, #1]
 800032a:	7043      	strb	r3, [r0, #1]
 800032c:	788b      	ldrb	r3, [r1, #2]
 800032e:	7083      	strb	r3, [r0, #2]
 8000330:	4660      	mov	r0, ip
 8000332:	4770      	bx	lr
 8000334:	0000      	movs	r0, r0
 8000336:	0000      	movs	r0, r0
 8000338:	0000      	movs	r0, r0
 800033a:	0000      	movs	r0, r0
 800033c:	0000      	movs	r0, r0
 800033e:	0000      	movs	r0, r0

08000340 <strlen>:
 8000340:	f890 f000 	pld	[r0]
 8000344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000348:	f020 0107 	bic.w	r1, r0, #7
 800034c:	f06f 0c00 	mvn.w	ip, #0
 8000350:	f010 0407 	ands.w	r4, r0, #7
 8000354:	f891 f020 	pld	[r1, #32]
 8000358:	f040 8049 	bne.w	80003ee <strlen+0xae>
 800035c:	f04f 0400 	mov.w	r4, #0
 8000360:	f06f 0007 	mvn.w	r0, #7
 8000364:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000368:	f891 f040 	pld	[r1, #64]	; 0x40
 800036c:	f100 0008 	add.w	r0, r0, #8
 8000370:	fa82 f24c 	uadd8	r2, r2, ip
 8000374:	faa4 f28c 	sel	r2, r4, ip
 8000378:	fa83 f34c 	uadd8	r3, r3, ip
 800037c:	faa2 f38c 	sel	r3, r2, ip
 8000380:	bb4b      	cbnz	r3, 80003d6 <strlen+0x96>
 8000382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000386:	fa82 f24c 	uadd8	r2, r2, ip
 800038a:	f100 0008 	add.w	r0, r0, #8
 800038e:	faa4 f28c 	sel	r2, r4, ip
 8000392:	fa83 f34c 	uadd8	r3, r3, ip
 8000396:	faa2 f38c 	sel	r3, r2, ip
 800039a:	b9e3      	cbnz	r3, 80003d6 <strlen+0x96>
 800039c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80003a0:	fa82 f24c 	uadd8	r2, r2, ip
 80003a4:	f100 0008 	add.w	r0, r0, #8
 80003a8:	faa4 f28c 	sel	r2, r4, ip
 80003ac:	fa83 f34c 	uadd8	r3, r3, ip
 80003b0:	faa2 f38c 	sel	r3, r2, ip
 80003b4:	b97b      	cbnz	r3, 80003d6 <strlen+0x96>
 80003b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80003ba:	f101 0120 	add.w	r1, r1, #32
 80003be:	fa82 f24c 	uadd8	r2, r2, ip
 80003c2:	f100 0008 	add.w	r0, r0, #8
 80003c6:	faa4 f28c 	sel	r2, r4, ip
 80003ca:	fa83 f34c 	uadd8	r3, r3, ip
 80003ce:	faa2 f38c 	sel	r3, r2, ip
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0c6      	beq.n	8000364 <strlen+0x24>
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	bf04      	itt	eq
 80003da:	3004      	addeq	r0, #4
 80003dc:	461a      	moveq	r2, r3
 80003de:	ba12      	rev	r2, r2
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80003e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80003ec:	4770      	bx	lr
 80003ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80003f2:	f004 0503 	and.w	r5, r4, #3
 80003f6:	f1c4 0000 	rsb	r0, r4, #0
 80003fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80003fe:	f014 0f04 	tst.w	r4, #4
 8000402:	f891 f040 	pld	[r1, #64]	; 0x40
 8000406:	fa0c f505 	lsl.w	r5, ip, r5
 800040a:	ea62 0205 	orn	r2, r2, r5
 800040e:	bf1c      	itt	ne
 8000410:	ea63 0305 	ornne	r3, r3, r5
 8000414:	4662      	movne	r2, ip
 8000416:	f04f 0400 	mov.w	r4, #0
 800041a:	e7a9      	b.n	8000370 <strlen+0x30>
 800041c:	0000      	movs	r0, r0
 800041e:	0000      	movs	r0, r0

08000420 <memchr>:
 8000420:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000424:	2a10      	cmp	r2, #16
 8000426:	db2b      	blt.n	8000480 <memchr+0x60>
 8000428:	f010 0f07 	tst.w	r0, #7
 800042c:	d008      	beq.n	8000440 <memchr+0x20>
 800042e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000432:	3a01      	subs	r2, #1
 8000434:	428b      	cmp	r3, r1
 8000436:	d02d      	beq.n	8000494 <memchr+0x74>
 8000438:	f010 0f07 	tst.w	r0, #7
 800043c:	b342      	cbz	r2, 8000490 <memchr+0x70>
 800043e:	d1f6      	bne.n	800042e <memchr+0xe>
 8000440:	b4f0      	push	{r4, r5, r6, r7}
 8000442:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000446:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800044a:	f022 0407 	bic.w	r4, r2, #7
 800044e:	f07f 0700 	mvns.w	r7, #0
 8000452:	2300      	movs	r3, #0
 8000454:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000458:	3c08      	subs	r4, #8
 800045a:	ea85 0501 	eor.w	r5, r5, r1
 800045e:	ea86 0601 	eor.w	r6, r6, r1
 8000462:	fa85 f547 	uadd8	r5, r5, r7
 8000466:	faa3 f587 	sel	r5, r3, r7
 800046a:	fa86 f647 	uadd8	r6, r6, r7
 800046e:	faa5 f687 	sel	r6, r5, r7
 8000472:	b98e      	cbnz	r6, 8000498 <memchr+0x78>
 8000474:	d1ee      	bne.n	8000454 <memchr+0x34>
 8000476:	bcf0      	pop	{r4, r5, r6, r7}
 8000478:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800047c:	f002 0207 	and.w	r2, r2, #7
 8000480:	b132      	cbz	r2, 8000490 <memchr+0x70>
 8000482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000486:	3a01      	subs	r2, #1
 8000488:	ea83 0301 	eor.w	r3, r3, r1
 800048c:	b113      	cbz	r3, 8000494 <memchr+0x74>
 800048e:	d1f8      	bne.n	8000482 <memchr+0x62>
 8000490:	2000      	movs	r0, #0
 8000492:	4770      	bx	lr
 8000494:	3801      	subs	r0, #1
 8000496:	4770      	bx	lr
 8000498:	2d00      	cmp	r5, #0
 800049a:	bf06      	itte	eq
 800049c:	4635      	moveq	r5, r6
 800049e:	3803      	subeq	r0, #3
 80004a0:	3807      	subne	r0, #7
 80004a2:	f015 0f01 	tst.w	r5, #1
 80004a6:	d107      	bne.n	80004b8 <memchr+0x98>
 80004a8:	3001      	adds	r0, #1
 80004aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ae:	bf02      	ittt	eq
 80004b0:	3001      	addeq	r0, #1
 80004b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004b6:	3001      	addeq	r0, #1
 80004b8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ba:	3801      	subs	r0, #1
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__aeabi_drsub>:
 80004c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c4:	e002      	b.n	80004cc <__adddf3>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dsub>:
 80004c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004cc <__adddf3>:
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	bf1f      	itttt	ne
 80004e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f2:	f000 80e2 	beq.w	80006ba <__adddf3+0x1ee>
 80004f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004fe:	bfb8      	it	lt
 8000500:	426d      	neglt	r5, r5
 8000502:	dd0c      	ble.n	800051e <__adddf3+0x52>
 8000504:	442c      	add	r4, r5
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	ea82 0000 	eor.w	r0, r2, r0
 8000512:	ea83 0101 	eor.w	r1, r3, r1
 8000516:	ea80 0202 	eor.w	r2, r0, r2
 800051a:	ea81 0303 	eor.w	r3, r1, r3
 800051e:	2d36      	cmp	r5, #54	; 0x36
 8000520:	bf88      	it	hi
 8000522:	bd30      	pophi	{r4, r5, pc}
 8000524:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000528:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800052c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000530:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000534:	d002      	beq.n	800053c <__adddf3+0x70>
 8000536:	4240      	negs	r0, r0
 8000538:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000540:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000544:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x84>
 800054a:	4252      	negs	r2, r2
 800054c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000550:	ea94 0f05 	teq	r4, r5
 8000554:	f000 80a7 	beq.w	80006a6 <__adddf3+0x1da>
 8000558:	f1a4 0401 	sub.w	r4, r4, #1
 800055c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000560:	db0d      	blt.n	800057e <__adddf3+0xb2>
 8000562:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000566:	fa22 f205 	lsr.w	r2, r2, r5
 800056a:	1880      	adds	r0, r0, r2
 800056c:	f141 0100 	adc.w	r1, r1, #0
 8000570:	fa03 f20e 	lsl.w	r2, r3, lr
 8000574:	1880      	adds	r0, r0, r2
 8000576:	fa43 f305 	asr.w	r3, r3, r5
 800057a:	4159      	adcs	r1, r3
 800057c:	e00e      	b.n	800059c <__adddf3+0xd0>
 800057e:	f1a5 0520 	sub.w	r5, r5, #32
 8000582:	f10e 0e20 	add.w	lr, lr, #32
 8000586:	2a01      	cmp	r2, #1
 8000588:	fa03 fc0e 	lsl.w	ip, r3, lr
 800058c:	bf28      	it	cs
 800058e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000592:	fa43 f305 	asr.w	r3, r3, r5
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	d507      	bpl.n	80005b2 <__adddf3+0xe6>
 80005a2:	f04f 0e00 	mov.w	lr, #0
 80005a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005b6:	d31b      	bcc.n	80005f0 <__adddf3+0x124>
 80005b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005bc:	d30c      	bcc.n	80005d8 <__adddf3+0x10c>
 80005be:	0849      	lsrs	r1, r1, #1
 80005c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005c8:	f104 0401 	add.w	r4, r4, #1
 80005cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d4:	f080 809a 	bcs.w	800070c <__adddf3+0x240>
 80005d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	ea41 0105 	orr.w	r1, r1, r5
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f4:	4140      	adcs	r0, r0
 80005f6:	eb41 0101 	adc.w	r1, r1, r1
 80005fa:	3c01      	subs	r4, #1
 80005fc:	bf28      	it	cs
 80005fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000602:	d2e9      	bcs.n	80005d8 <__adddf3+0x10c>
 8000604:	f091 0f00 	teq	r1, #0
 8000608:	bf04      	itt	eq
 800060a:	4601      	moveq	r1, r0
 800060c:	2000      	moveq	r0, #0
 800060e:	fab1 f381 	clz	r3, r1
 8000612:	bf08      	it	eq
 8000614:	3320      	addeq	r3, #32
 8000616:	f1a3 030b 	sub.w	r3, r3, #11
 800061a:	f1b3 0220 	subs.w	r2, r3, #32
 800061e:	da0c      	bge.n	800063a <__adddf3+0x16e>
 8000620:	320c      	adds	r2, #12
 8000622:	dd08      	ble.n	8000636 <__adddf3+0x16a>
 8000624:	f102 0c14 	add.w	ip, r2, #20
 8000628:	f1c2 020c 	rsb	r2, r2, #12
 800062c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000630:	fa21 f102 	lsr.w	r1, r1, r2
 8000634:	e00c      	b.n	8000650 <__adddf3+0x184>
 8000636:	f102 0214 	add.w	r2, r2, #20
 800063a:	bfd8      	it	le
 800063c:	f1c2 0c20 	rsble	ip, r2, #32
 8000640:	fa01 f102 	lsl.w	r1, r1, r2
 8000644:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000648:	bfdc      	itt	le
 800064a:	ea41 010c 	orrle.w	r1, r1, ip
 800064e:	4090      	lslle	r0, r2
 8000650:	1ae4      	subs	r4, r4, r3
 8000652:	bfa2      	ittt	ge
 8000654:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000658:	4329      	orrge	r1, r5
 800065a:	bd30      	popge	{r4, r5, pc}
 800065c:	ea6f 0404 	mvn.w	r4, r4
 8000660:	3c1f      	subs	r4, #31
 8000662:	da1c      	bge.n	800069e <__adddf3+0x1d2>
 8000664:	340c      	adds	r4, #12
 8000666:	dc0e      	bgt.n	8000686 <__adddf3+0x1ba>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0220 	rsb	r2, r4, #32
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f302 	lsl.w	r3, r1, r2
 8000678:	ea40 0003 	orr.w	r0, r0, r3
 800067c:	fa21 f304 	lsr.w	r3, r1, r4
 8000680:	ea45 0103 	orr.w	r1, r5, r3
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	f1c4 040c 	rsb	r4, r4, #12
 800068a:	f1c4 0220 	rsb	r2, r4, #32
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	fa01 f304 	lsl.w	r3, r1, r4
 8000696:	ea40 0003 	orr.w	r0, r0, r3
 800069a:	4629      	mov	r1, r5
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	fa21 f004 	lsr.w	r0, r1, r4
 80006a2:	4629      	mov	r1, r5
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	f094 0f00 	teq	r4, #0
 80006aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ae:	bf06      	itte	eq
 80006b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b4:	3401      	addeq	r4, #1
 80006b6:	3d01      	subne	r5, #1
 80006b8:	e74e      	b.n	8000558 <__adddf3+0x8c>
 80006ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006be:	bf18      	it	ne
 80006c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c4:	d029      	beq.n	800071a <__adddf3+0x24e>
 80006c6:	ea94 0f05 	teq	r4, r5
 80006ca:	bf08      	it	eq
 80006cc:	ea90 0f02 	teqeq	r0, r2
 80006d0:	d005      	beq.n	80006de <__adddf3+0x212>
 80006d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006d6:	bf04      	itt	eq
 80006d8:	4619      	moveq	r1, r3
 80006da:	4610      	moveq	r0, r2
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea91 0f03 	teq	r1, r3
 80006e2:	bf1e      	ittt	ne
 80006e4:	2100      	movne	r1, #0
 80006e6:	2000      	movne	r0, #0
 80006e8:	bd30      	popne	{r4, r5, pc}
 80006ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ee:	d105      	bne.n	80006fc <__adddf3+0x230>
 80006f0:	0040      	lsls	r0, r0, #1
 80006f2:	4149      	adcs	r1, r1
 80006f4:	bf28      	it	cs
 80006f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000700:	bf3c      	itt	cc
 8000702:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000706:	bd30      	popcc	{r4, r5, pc}
 8000708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800070c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071e:	bf1a      	itte	ne
 8000720:	4619      	movne	r1, r3
 8000722:	4610      	movne	r0, r2
 8000724:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000728:	bf1c      	itt	ne
 800072a:	460b      	movne	r3, r1
 800072c:	4602      	movne	r2, r0
 800072e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000732:	bf06      	itte	eq
 8000734:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000738:	ea91 0f03 	teqeq	r1, r3
 800073c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	bf00      	nop

08000744 <__aeabi_ui2d>:
 8000744:	f090 0f00 	teq	r0, #0
 8000748:	bf04      	itt	eq
 800074a:	2100      	moveq	r1, #0
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000754:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000758:	f04f 0500 	mov.w	r5, #0
 800075c:	f04f 0100 	mov.w	r1, #0
 8000760:	e750      	b.n	8000604 <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_i2d>:
 8000764:	f090 0f00 	teq	r0, #0
 8000768:	bf04      	itt	eq
 800076a:	2100      	moveq	r1, #0
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000778:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800077c:	bf48      	it	mi
 800077e:	4240      	negmi	r0, r0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e73e      	b.n	8000604 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_f2d>:
 8000788:	0042      	lsls	r2, r0, #1
 800078a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800078e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000792:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000796:	bf1f      	itttt	ne
 8000798:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800079c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a4:	4770      	bxne	lr
 80007a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007aa:	bf08      	it	eq
 80007ac:	4770      	bxeq	lr
 80007ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b2:	bf04      	itt	eq
 80007b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	e71c      	b.n	8000604 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_ul2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f04f 0500 	mov.w	r5, #0
 80007da:	e00a      	b.n	80007f2 <__aeabi_l2d+0x16>

080007dc <__aeabi_l2d>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	b530      	push	{r4, r5, lr}
 80007e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ea:	d502      	bpl.n	80007f2 <__aeabi_l2d+0x16>
 80007ec:	4240      	negs	r0, r0
 80007ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007fe:	f43f aed8 	beq.w	80005b2 <__adddf3+0xe6>
 8000802:	f04f 0203 	mov.w	r2, #3
 8000806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080a:	bf18      	it	ne
 800080c:	3203      	addne	r2, #3
 800080e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000812:	bf18      	it	ne
 8000814:	3203      	addne	r2, #3
 8000816:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081a:	f1c2 0320 	rsb	r3, r2, #32
 800081e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	fa01 fe03 	lsl.w	lr, r1, r3
 800082a:	ea40 000e 	orr.w	r0, r0, lr
 800082e:	fa21 f102 	lsr.w	r1, r1, r2
 8000832:	4414      	add	r4, r2
 8000834:	e6bd      	b.n	80005b2 <__adddf3+0xe6>
 8000836:	bf00      	nop

08000838 <__aeabi_dmul>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000842:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000846:	bf1d      	ittte	ne
 8000848:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800084c:	ea94 0f0c 	teqne	r4, ip
 8000850:	ea95 0f0c 	teqne	r5, ip
 8000854:	f000 f8de 	bleq	8000a14 <__aeabi_dmul+0x1dc>
 8000858:	442c      	add	r4, r5
 800085a:	ea81 0603 	eor.w	r6, r1, r3
 800085e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000862:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000866:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800086a:	bf18      	it	ne
 800086c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000878:	d038      	beq.n	80008ec <__aeabi_dmul+0xb4>
 800087a:	fba0 ce02 	umull	ip, lr, r0, r2
 800087e:	f04f 0500 	mov.w	r5, #0
 8000882:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000886:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800088a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800088e:	f04f 0600 	mov.w	r6, #0
 8000892:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000896:	f09c 0f00 	teq	ip, #0
 800089a:	bf18      	it	ne
 800089c:	f04e 0e01 	orrne.w	lr, lr, #1
 80008a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008ac:	d204      	bcs.n	80008b8 <__aeabi_dmul+0x80>
 80008ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008b2:	416d      	adcs	r5, r5
 80008b4:	eb46 0606 	adc.w	r6, r6, r6
 80008b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d0:	bf88      	it	hi
 80008d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d6:	d81e      	bhi.n	8000916 <__aeabi_dmul+0xde>
 80008d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008dc:	bf08      	it	eq
 80008de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008f0:	ea46 0101 	orr.w	r1, r6, r1
 80008f4:	ea40 0002 	orr.w	r0, r0, r2
 80008f8:	ea81 0103 	eor.w	r1, r1, r3
 80008fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	f300 80ab 	bgt.w	8000a70 <__aeabi_dmul+0x238>
 800091a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800091e:	bfde      	ittt	le
 8000920:	2000      	movle	r0, #0
 8000922:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000926:	bd70      	pople	{r4, r5, r6, pc}
 8000928:	f1c4 0400 	rsb	r4, r4, #0
 800092c:	3c20      	subs	r4, #32
 800092e:	da35      	bge.n	800099c <__aeabi_dmul+0x164>
 8000930:	340c      	adds	r4, #12
 8000932:	dc1b      	bgt.n	800096c <__aeabi_dmul+0x134>
 8000934:	f104 0414 	add.w	r4, r4, #20
 8000938:	f1c4 0520 	rsb	r5, r4, #32
 800093c:	fa00 f305 	lsl.w	r3, r0, r5
 8000940:	fa20 f004 	lsr.w	r0, r0, r4
 8000944:	fa01 f205 	lsl.w	r2, r1, r5
 8000948:	ea40 0002 	orr.w	r0, r0, r2
 800094c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000950:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000954:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000958:	fa21 f604 	lsr.w	r6, r1, r4
 800095c:	eb42 0106 	adc.w	r1, r2, r6
 8000960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000964:	bf08      	it	eq
 8000966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f1c4 040c 	rsb	r4, r4, #12
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f304 	lsl.w	r3, r0, r4
 8000978:	fa20 f005 	lsr.w	r0, r0, r5
 800097c:	fa01 f204 	lsl.w	r2, r1, r4
 8000980:	ea40 0002 	orr.w	r0, r0, r2
 8000984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000988:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800098c:	f141 0100 	adc.w	r1, r1, #0
 8000990:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000994:	bf08      	it	eq
 8000996:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f1c4 0520 	rsb	r5, r4, #32
 80009a0:	fa00 f205 	lsl.w	r2, r0, r5
 80009a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009a8:	fa20 f304 	lsr.w	r3, r0, r4
 80009ac:	fa01 f205 	lsl.w	r2, r1, r5
 80009b0:	ea43 0302 	orr.w	r3, r3, r2
 80009b4:	fa21 f004 	lsr.w	r0, r1, r4
 80009b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009bc:	fa21 f204 	lsr.w	r2, r1, r4
 80009c0:	ea20 0002 	bic.w	r0, r0, r2
 80009c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009cc:	bf08      	it	eq
 80009ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f094 0f00 	teq	r4, #0
 80009d8:	d10f      	bne.n	80009fa <__aeabi_dmul+0x1c2>
 80009da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009de:	0040      	lsls	r0, r0, #1
 80009e0:	eb41 0101 	adc.w	r1, r1, r1
 80009e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e8:	bf08      	it	eq
 80009ea:	3c01      	subeq	r4, #1
 80009ec:	d0f7      	beq.n	80009de <__aeabi_dmul+0x1a6>
 80009ee:	ea41 0106 	orr.w	r1, r1, r6
 80009f2:	f095 0f00 	teq	r5, #0
 80009f6:	bf18      	it	ne
 80009f8:	4770      	bxne	lr
 80009fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	eb43 0303 	adc.w	r3, r3, r3
 8000a04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a08:	bf08      	it	eq
 8000a0a:	3d01      	subeq	r5, #1
 8000a0c:	d0f7      	beq.n	80009fe <__aeabi_dmul+0x1c6>
 8000a0e:	ea43 0306 	orr.w	r3, r3, r6
 8000a12:	4770      	bx	lr
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1c:	bf18      	it	ne
 8000a1e:	ea95 0f0c 	teqne	r5, ip
 8000a22:	d00c      	beq.n	8000a3e <__aeabi_dmul+0x206>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	d1d1      	bne.n	80009d4 <__aeabi_dmul+0x19c>
 8000a30:	ea81 0103 	eor.w	r1, r1, r3
 8000a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	bd70      	pop	{r4, r5, r6, pc}
 8000a3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a42:	bf06      	itte	eq
 8000a44:	4610      	moveq	r0, r2
 8000a46:	4619      	moveq	r1, r3
 8000a48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4c:	d019      	beq.n	8000a82 <__aeabi_dmul+0x24a>
 8000a4e:	ea94 0f0c 	teq	r4, ip
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dmul+0x222>
 8000a54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a58:	d113      	bne.n	8000a82 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_dmul+0x234>
 8000a60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a64:	bf1c      	itt	ne
 8000a66:	4610      	movne	r0, r2
 8000a68:	4619      	movne	r1, r3
 8000a6a:	d10a      	bne.n	8000a82 <__aeabi_dmul+0x24a>
 8000a6c:	ea81 0103 	eor.w	r1, r1, r3
 8000a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}

08000a8c <__aeabi_ddiv>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a9a:	bf1d      	ittte	ne
 8000a9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000aa0:	ea94 0f0c 	teqne	r4, ip
 8000aa4:	ea95 0f0c 	teqne	r5, ip
 8000aa8:	f000 f8a7 	bleq	8000bfa <__aeabi_ddiv+0x16e>
 8000aac:	eba4 0405 	sub.w	r4, r4, r5
 8000ab0:	ea81 0e03 	eor.w	lr, r1, r3
 8000ab4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000abc:	f000 8088 	beq.w	8000bd0 <__aeabi_ddiv+0x144>
 8000ac0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ac4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ac8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000acc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ad0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ad4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ad8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000adc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ae0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ae4:	429d      	cmp	r5, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	4296      	cmpeq	r6, r2
 8000aea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000aee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000af2:	d202      	bcs.n	8000afa <__aeabi_ddiv+0x6e>
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000afa:	1ab6      	subs	r6, r6, r2
 8000afc:	eb65 0503 	sbc.w	r5, r5, r3
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b16:	bf22      	ittt	cs
 8000b18:	1ab6      	subcs	r6, r6, r2
 8000b1a:	4675      	movcs	r5, lr
 8000b1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b2e:	bf22      	ittt	cs
 8000b30:	1ab6      	subcs	r6, r6, r2
 8000b32:	4675      	movcs	r5, lr
 8000b34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b46:	bf22      	ittt	cs
 8000b48:	1ab6      	subcs	r6, r6, r2
 8000b4a:	4675      	movcs	r5, lr
 8000b4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b56:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5e:	bf22      	ittt	cs
 8000b60:	1ab6      	subcs	r6, r6, r2
 8000b62:	4675      	movcs	r5, lr
 8000b64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b68:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b6c:	d018      	beq.n	8000ba0 <__aeabi_ddiv+0x114>
 8000b6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b76:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b8a:	d1c0      	bne.n	8000b0e <__aeabi_ddiv+0x82>
 8000b8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b90:	d10b      	bne.n	8000baa <__aeabi_ddiv+0x11e>
 8000b92:	ea41 0100 	orr.w	r1, r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b9e:	e7b6      	b.n	8000b0e <__aeabi_ddiv+0x82>
 8000ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ba4:	bf04      	itt	eq
 8000ba6:	4301      	orreq	r1, r0
 8000ba8:	2000      	moveq	r0, #0
 8000baa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bae:	bf88      	it	hi
 8000bb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bb4:	f63f aeaf 	bhi.w	8000916 <__aeabi_dmul+0xde>
 8000bb8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bbc:	bf04      	itt	eq
 8000bbe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bc6:	f150 0000 	adcs.w	r0, r0, #0
 8000bca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bdc:	bfc2      	ittt	gt
 8000bde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000be2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000be6:	bd70      	popgt	{r4, r5, r6, pc}
 8000be8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bec:	f04f 0e00 	mov.w	lr, #0
 8000bf0:	3c01      	subs	r4, #1
 8000bf2:	e690      	b.n	8000916 <__aeabi_dmul+0xde>
 8000bf4:	ea45 0e06 	orr.w	lr, r5, r6
 8000bf8:	e68d      	b.n	8000916 <__aeabi_dmul+0xde>
 8000bfa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bfe:	ea94 0f0c 	teq	r4, ip
 8000c02:	bf08      	it	eq
 8000c04:	ea95 0f0c 	teqeq	r5, ip
 8000c08:	f43f af3b 	beq.w	8000a82 <__aeabi_dmul+0x24a>
 8000c0c:	ea94 0f0c 	teq	r4, ip
 8000c10:	d10a      	bne.n	8000c28 <__aeabi_ddiv+0x19c>
 8000c12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c16:	f47f af34 	bne.w	8000a82 <__aeabi_dmul+0x24a>
 8000c1a:	ea95 0f0c 	teq	r5, ip
 8000c1e:	f47f af25 	bne.w	8000a6c <__aeabi_dmul+0x234>
 8000c22:	4610      	mov	r0, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	e72c      	b.n	8000a82 <__aeabi_dmul+0x24a>
 8000c28:	ea95 0f0c 	teq	r5, ip
 8000c2c:	d106      	bne.n	8000c3c <__aeabi_ddiv+0x1b0>
 8000c2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c32:	f43f aefd 	beq.w	8000a30 <__aeabi_dmul+0x1f8>
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	e722      	b.n	8000a82 <__aeabi_dmul+0x24a>
 8000c3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c40:	bf18      	it	ne
 8000c42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c46:	f47f aec5 	bne.w	80009d4 <__aeabi_dmul+0x19c>
 8000c4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c4e:	f47f af0d 	bne.w	8000a6c <__aeabi_dmul+0x234>
 8000c52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c56:	f47f aeeb 	bne.w	8000a30 <__aeabi_dmul+0x1f8>
 8000c5a:	e712      	b.n	8000a82 <__aeabi_dmul+0x24a>

08000c5c <__gedf2>:
 8000c5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000c60:	e006      	b.n	8000c70 <__cmpdf2+0x4>
 8000c62:	bf00      	nop

08000c64 <__ledf2>:
 8000c64:	f04f 0c01 	mov.w	ip, #1
 8000c68:	e002      	b.n	8000c70 <__cmpdf2+0x4>
 8000c6a:	bf00      	nop

08000c6c <__cmpdf2>:
 8000c6c:	f04f 0c01 	mov.w	ip, #1
 8000c70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c80:	bf18      	it	ne
 8000c82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c86:	d01b      	beq.n	8000cc0 <__cmpdf2+0x54>
 8000c88:	b001      	add	sp, #4
 8000c8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c8e:	bf0c      	ite	eq
 8000c90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000c94:	ea91 0f03 	teqne	r1, r3
 8000c98:	bf02      	ittt	eq
 8000c9a:	ea90 0f02 	teqeq	r0, r2
 8000c9e:	2000      	moveq	r0, #0
 8000ca0:	4770      	bxeq	lr
 8000ca2:	f110 0f00 	cmn.w	r0, #0
 8000ca6:	ea91 0f03 	teq	r1, r3
 8000caa:	bf58      	it	pl
 8000cac:	4299      	cmppl	r1, r3
 8000cae:	bf08      	it	eq
 8000cb0:	4290      	cmpeq	r0, r2
 8000cb2:	bf2c      	ite	cs
 8000cb4:	17d8      	asrcs	r0, r3, #31
 8000cb6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cba:	f040 0001 	orr.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc8:	d102      	bne.n	8000cd0 <__cmpdf2+0x64>
 8000cca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cce:	d107      	bne.n	8000ce0 <__cmpdf2+0x74>
 8000cd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cd8:	d1d6      	bne.n	8000c88 <__cmpdf2+0x1c>
 8000cda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cde:	d0d3      	beq.n	8000c88 <__cmpdf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cdrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4610      	mov	r0, r2
 8000cec:	4662      	mov	r2, ip
 8000cee:	468c      	mov	ip, r1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	e000      	b.n	8000cf8 <__aeabi_cdcmpeq>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_cdcmpeq>:
 8000cf8:	b501      	push	{r0, lr}
 8000cfa:	f7ff ffb7 	bl	8000c6c <__cmpdf2>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	bf48      	it	mi
 8000d02:	f110 0f00 	cmnmi.w	r0, #0
 8000d06:	bd01      	pop	{r0, pc}

08000d08 <__aeabi_dcmpeq>:
 8000d08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d0c:	f7ff fff4 	bl	8000cf8 <__aeabi_cdcmpeq>
 8000d10:	bf0c      	ite	eq
 8000d12:	2001      	moveq	r0, #1
 8000d14:	2000      	movne	r0, #0
 8000d16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1a:	bf00      	nop

08000d1c <__aeabi_dcmplt>:
 8000d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d20:	f7ff ffea 	bl	8000cf8 <__aeabi_cdcmpeq>
 8000d24:	bf34      	ite	cc
 8000d26:	2001      	movcc	r0, #1
 8000d28:	2000      	movcs	r0, #0
 8000d2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2e:	bf00      	nop

08000d30 <__aeabi_dcmple>:
 8000d30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d34:	f7ff ffe0 	bl	8000cf8 <__aeabi_cdcmpeq>
 8000d38:	bf94      	ite	ls
 8000d3a:	2001      	movls	r0, #1
 8000d3c:	2000      	movhi	r0, #0
 8000d3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d42:	bf00      	nop

08000d44 <__aeabi_dcmpge>:
 8000d44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d48:	f7ff ffce 	bl	8000ce8 <__aeabi_cdrcmple>
 8000d4c:	bf94      	ite	ls
 8000d4e:	2001      	movls	r0, #1
 8000d50:	2000      	movhi	r0, #0
 8000d52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d56:	bf00      	nop

08000d58 <__aeabi_dcmpgt>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff ffc4 	bl	8000ce8 <__aeabi_cdrcmple>
 8000d60:	bf34      	ite	cc
 8000d62:	2001      	movcc	r0, #1
 8000d64:	2000      	movcs	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmpun>:
 8000d6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d74:	d102      	bne.n	8000d7c <__aeabi_dcmpun+0x10>
 8000d76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d7a:	d10a      	bne.n	8000d92 <__aeabi_dcmpun+0x26>
 8000d7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d84:	d102      	bne.n	8000d8c <__aeabi_dcmpun+0x20>
 8000d86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d8a:	d102      	bne.n	8000d92 <__aeabi_dcmpun+0x26>
 8000d8c:	f04f 0000 	mov.w	r0, #0
 8000d90:	4770      	bx	lr
 8000d92:	f04f 0001 	mov.w	r0, #1
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2iz>:
 8000d98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000da0:	d215      	bcs.n	8000dce <__aeabi_d2iz+0x36>
 8000da2:	d511      	bpl.n	8000dc8 <__aeabi_d2iz+0x30>
 8000da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dac:	d912      	bls.n	8000dd4 <__aeabi_d2iz+0x3c>
 8000dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc2:	bf18      	it	ne
 8000dc4:	4240      	negne	r0, r0
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dd2:	d105      	bne.n	8000de0 <__aeabi_d2iz+0x48>
 8000dd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dd8:	bf08      	it	eq
 8000dda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dde:	4770      	bx	lr
 8000de0:	f04f 0000 	mov.w	r0, #0
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <__aeabi_uldivmod>:
 8000de8:	b953      	cbnz	r3, 8000e00 <__aeabi_uldivmod+0x18>
 8000dea:	b94a      	cbnz	r2, 8000e00 <__aeabi_uldivmod+0x18>
 8000dec:	2900      	cmp	r1, #0
 8000dee:	bf08      	it	eq
 8000df0:	2800      	cmpeq	r0, #0
 8000df2:	bf1c      	itt	ne
 8000df4:	f04f 31ff 	movne.w	r1, #4294967295
 8000df8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dfc:	f000 b974 	b.w	80010e8 <__aeabi_idiv0>
 8000e00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e08:	f000 f806 	bl	8000e18 <__udivmoddi4>
 8000e0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e14:	b004      	add	sp, #16
 8000e16:	4770      	bx	lr

08000e18 <__udivmoddi4>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	9e08      	ldr	r6, [sp, #32]
 8000e1e:	460d      	mov	r5, r1
 8000e20:	4604      	mov	r4, r0
 8000e22:	4688      	mov	r8, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14d      	bne.n	8000ec4 <__udivmoddi4+0xac>
 8000e28:	428a      	cmp	r2, r1
 8000e2a:	4694      	mov	ip, r2
 8000e2c:	d968      	bls.n	8000f00 <__udivmoddi4+0xe8>
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	b152      	cbz	r2, 8000e4a <__udivmoddi4+0x32>
 8000e34:	fa01 f302 	lsl.w	r3, r1, r2
 8000e38:	f1c2 0120 	rsb	r1, r2, #32
 8000e3c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	ea41 0803 	orr.w	r8, r1, r3
 8000e48:	4094      	lsls	r4, r2
 8000e4a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e4e:	0c21      	lsrs	r1, r4, #16
 8000e50:	fbb8 fef5 	udiv	lr, r8, r5
 8000e54:	fa1f f78c 	uxth.w	r7, ip
 8000e58:	fb05 831e 	mls	r3, r5, lr, r8
 8000e5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e60:	fb0e f107 	mul.w	r1, lr, r7
 8000e64:	4299      	cmp	r1, r3
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x68>
 8000e68:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e70:	f080 811e 	bcs.w	80010b0 <__udivmoddi4+0x298>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f240 811b 	bls.w	80010b0 <__udivmoddi4+0x298>
 8000e7a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e88:	fb05 3310 	mls	r3, r5, r0, r3
 8000e8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e90:	fb00 f707 	mul.w	r7, r0, r7
 8000e94:	42a7      	cmp	r7, r4
 8000e96:	d90a      	bls.n	8000eae <__udivmoddi4+0x96>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea0:	f080 8108 	bcs.w	80010b4 <__udivmoddi4+0x29c>
 8000ea4:	42a7      	cmp	r7, r4
 8000ea6:	f240 8105 	bls.w	80010b4 <__udivmoddi4+0x29c>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	1be4      	subs	r4, r4, r7
 8000eb0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	b11e      	cbz	r6, 8000ec0 <__udivmoddi4+0xa8>
 8000eb8:	40d4      	lsrs	r4, r2
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0xc2>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	f000 80ee 	beq.w	80010aa <__udivmoddi4+0x292>
 8000ece:	2100      	movs	r1, #0
 8000ed0:	e9c6 0500 	strd	r0, r5, [r6]
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	fab3 f183 	clz	r1, r3
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d14a      	bne.n	8000f78 <__udivmoddi4+0x160>
 8000ee2:	42ab      	cmp	r3, r5
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xd4>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 80f9 	bhi.w	80010de <__udivmoddi4+0x2c6>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb65 0303 	sbc.w	r3, r5, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	4698      	mov	r8, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d0e2      	beq.n	8000ec0 <__udivmoddi4+0xa8>
 8000efa:	e9c6 4800 	strd	r4, r8, [r6]
 8000efe:	e7df      	b.n	8000ec0 <__udivmoddi4+0xa8>
 8000f00:	b902      	cbnz	r2, 8000f04 <__udivmoddi4+0xec>
 8000f02:	deff      	udf	#255	; 0xff
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	f040 8091 	bne.w	8001030 <__udivmoddi4+0x218>
 8000f0e:	eba1 050c 	sub.w	r5, r1, ip
 8000f12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f16:	fa1f fe8c 	uxth.w	lr, ip
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000f20:	fb07 5013 	mls	r0, r7, r3, r5
 8000f24:	0c25      	lsrs	r5, r4, #16
 8000f26:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f2a:	fb0e f003 	mul.w	r0, lr, r3
 8000f2e:	42a8      	cmp	r0, r5
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x12c>
 8000f32:	eb1c 0505 	adds.w	r5, ip, r5
 8000f36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3a:	d202      	bcs.n	8000f42 <__udivmoddi4+0x12a>
 8000f3c:	42a8      	cmp	r0, r5
 8000f3e:	f200 80cb 	bhi.w	80010d8 <__udivmoddi4+0x2c0>
 8000f42:	4643      	mov	r3, r8
 8000f44:	1a2d      	subs	r5, r5, r0
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f4c:	fb07 5510 	mls	r5, r7, r0, r5
 8000f50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f54:	fb0e fe00 	mul.w	lr, lr, r0
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x156>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f64:	d202      	bcs.n	8000f6c <__udivmoddi4+0x154>
 8000f66:	45a6      	cmp	lr, r4
 8000f68:	f200 80bb 	bhi.w	80010e2 <__udivmoddi4+0x2ca>
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	eba4 040e 	sub.w	r4, r4, lr
 8000f72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f76:	e79e      	b.n	8000eb6 <__udivmoddi4+0x9e>
 8000f78:	f1c1 0720 	rsb	r7, r1, #32
 8000f7c:	408b      	lsls	r3, r1
 8000f7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f86:	fa20 f407 	lsr.w	r4, r0, r7
 8000f8a:	fa05 f301 	lsl.w	r3, r5, r1
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	40fd      	lsrs	r5, r7
 8000f92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f96:	fa00 f301 	lsl.w	r3, r0, r1
 8000f9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f9e:	0c20      	lsrs	r0, r4, #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fb09 5518 	mls	r5, r9, r8, r5
 8000fa8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000fac:	fb08 f00e 	mul.w	r0, r8, lr
 8000fb0:	42a8      	cmp	r0, r5
 8000fb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb6:	d90b      	bls.n	8000fd0 <__udivmoddi4+0x1b8>
 8000fb8:	eb1c 0505 	adds.w	r5, ip, r5
 8000fbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc0:	f080 8088 	bcs.w	80010d4 <__udivmoddi4+0x2bc>
 8000fc4:	42a8      	cmp	r0, r5
 8000fc6:	f240 8085 	bls.w	80010d4 <__udivmoddi4+0x2bc>
 8000fca:	f1a8 0802 	sub.w	r8, r8, #2
 8000fce:	4465      	add	r5, ip
 8000fd0:	1a2d      	subs	r5, r5, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb5 f0f9 	udiv	r0, r5, r9
 8000fd8:	fb09 5510 	mls	r5, r9, r0, r5
 8000fdc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000fe0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe4:	45ae      	cmp	lr, r5
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x1e2>
 8000fe8:	eb1c 0505 	adds.w	r5, ip, r5
 8000fec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ff0:	d26c      	bcs.n	80010cc <__udivmoddi4+0x2b4>
 8000ff2:	45ae      	cmp	lr, r5
 8000ff4:	d96a      	bls.n	80010cc <__udivmoddi4+0x2b4>
 8000ff6:	3802      	subs	r0, #2
 8000ff8:	4465      	add	r5, ip
 8000ffa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ffe:	fba0 9402 	umull	r9, r4, r0, r2
 8001002:	eba5 050e 	sub.w	r5, r5, lr
 8001006:	42a5      	cmp	r5, r4
 8001008:	46c8      	mov	r8, r9
 800100a:	46a6      	mov	lr, r4
 800100c:	d356      	bcc.n	80010bc <__udivmoddi4+0x2a4>
 800100e:	d053      	beq.n	80010b8 <__udivmoddi4+0x2a0>
 8001010:	b15e      	cbz	r6, 800102a <__udivmoddi4+0x212>
 8001012:	ebb3 0208 	subs.w	r2, r3, r8
 8001016:	eb65 050e 	sbc.w	r5, r5, lr
 800101a:	fa05 f707 	lsl.w	r7, r5, r7
 800101e:	fa22 f301 	lsr.w	r3, r2, r1
 8001022:	40cd      	lsrs	r5, r1
 8001024:	431f      	orrs	r7, r3
 8001026:	e9c6 7500 	strd	r7, r5, [r6]
 800102a:	2100      	movs	r1, #0
 800102c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001030:	f1c2 0320 	rsb	r3, r2, #32
 8001034:	fa20 f103 	lsr.w	r1, r0, r3
 8001038:	fa0c fc02 	lsl.w	ip, ip, r2
 800103c:	fa25 f303 	lsr.w	r3, r5, r3
 8001040:	4095      	lsls	r5, r2
 8001042:	430d      	orrs	r5, r1
 8001044:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001048:	fa1f fe8c 	uxth.w	lr, ip
 800104c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001050:	fb07 3011 	mls	r0, r7, r1, r3
 8001054:	0c2b      	lsrs	r3, r5, #16
 8001056:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800105a:	fb01 f00e 	mul.w	r0, r1, lr
 800105e:	4298      	cmp	r0, r3
 8001060:	fa04 f402 	lsl.w	r4, r4, r2
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0x260>
 8001066:	eb1c 0303 	adds.w	r3, ip, r3
 800106a:	f101 38ff 	add.w	r8, r1, #4294967295
 800106e:	d22f      	bcs.n	80010d0 <__udivmoddi4+0x2b8>
 8001070:	4298      	cmp	r0, r3
 8001072:	d92d      	bls.n	80010d0 <__udivmoddi4+0x2b8>
 8001074:	3902      	subs	r1, #2
 8001076:	4463      	add	r3, ip
 8001078:	1a1b      	subs	r3, r3, r0
 800107a:	b2ad      	uxth	r5, r5
 800107c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001080:	fb07 3310 	mls	r3, r7, r0, r3
 8001084:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001088:	fb00 f30e 	mul.w	r3, r0, lr
 800108c:	42ab      	cmp	r3, r5
 800108e:	d908      	bls.n	80010a2 <__udivmoddi4+0x28a>
 8001090:	eb1c 0505 	adds.w	r5, ip, r5
 8001094:	f100 38ff 	add.w	r8, r0, #4294967295
 8001098:	d216      	bcs.n	80010c8 <__udivmoddi4+0x2b0>
 800109a:	42ab      	cmp	r3, r5
 800109c:	d914      	bls.n	80010c8 <__udivmoddi4+0x2b0>
 800109e:	3802      	subs	r0, #2
 80010a0:	4465      	add	r5, ip
 80010a2:	1aed      	subs	r5, r5, r3
 80010a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010a8:	e738      	b.n	8000f1c <__udivmoddi4+0x104>
 80010aa:	4631      	mov	r1, r6
 80010ac:	4630      	mov	r0, r6
 80010ae:	e707      	b.n	8000ec0 <__udivmoddi4+0xa8>
 80010b0:	4686      	mov	lr, r0
 80010b2:	e6e5      	b.n	8000e80 <__udivmoddi4+0x68>
 80010b4:	4618      	mov	r0, r3
 80010b6:	e6fa      	b.n	8000eae <__udivmoddi4+0x96>
 80010b8:	454b      	cmp	r3, r9
 80010ba:	d2a9      	bcs.n	8001010 <__udivmoddi4+0x1f8>
 80010bc:	ebb9 0802 	subs.w	r8, r9, r2
 80010c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010c4:	3801      	subs	r0, #1
 80010c6:	e7a3      	b.n	8001010 <__udivmoddi4+0x1f8>
 80010c8:	4640      	mov	r0, r8
 80010ca:	e7ea      	b.n	80010a2 <__udivmoddi4+0x28a>
 80010cc:	4620      	mov	r0, r4
 80010ce:	e794      	b.n	8000ffa <__udivmoddi4+0x1e2>
 80010d0:	4641      	mov	r1, r8
 80010d2:	e7d1      	b.n	8001078 <__udivmoddi4+0x260>
 80010d4:	46d0      	mov	r8, sl
 80010d6:	e77b      	b.n	8000fd0 <__udivmoddi4+0x1b8>
 80010d8:	3b02      	subs	r3, #2
 80010da:	4465      	add	r5, ip
 80010dc:	e732      	b.n	8000f44 <__udivmoddi4+0x12c>
 80010de:	4608      	mov	r0, r1
 80010e0:	e709      	b.n	8000ef6 <__udivmoddi4+0xde>
 80010e2:	4464      	add	r4, ip
 80010e4:	3802      	subs	r0, #2
 80010e6:	e742      	b.n	8000f6e <__udivmoddi4+0x156>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <enc_password>:

	return 1;
}


uint8_t enc_password(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p){
 80010ec:	b510      	push	{r4, lr}
 80010ee:	461c      	mov	r4, r3
    //     k = i+3;
    //   p[i] +=k;
    // }
    uint8_t *result;
    uint8_t flag=1;
    trigger_high();
 80010f0:	f002 ff76 	bl	8003fe0 <trigger_high>
    if(flag){
        p[0] += 1;
 80010f4:	7823      	ldrb	r3, [r4, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	7023      	strb	r3, [r4, #0]
        p[1] += 2;
 80010fa:	7863      	ldrb	r3, [r4, #1]
 80010fc:	3302      	adds	r3, #2
 80010fe:	7063      	strb	r3, [r4, #1]
        p[2] += 3;
 8001100:	78a3      	ldrb	r3, [r4, #2]
 8001102:	3303      	adds	r3, #3
 8001104:	70a3      	strb	r3, [r4, #2]
        p[3] += 4;
 8001106:	78e3      	ldrb	r3, [r4, #3]
 8001108:	3304      	adds	r3, #4
 800110a:	70e3      	strb	r3, [r4, #3]
        p[4] += 5;
 800110c:	7923      	ldrb	r3, [r4, #4]
 800110e:	3305      	adds	r3, #5
 8001110:	7123      	strb	r3, [r4, #4]
    }
    trigger_low();
 8001112:	f002 ff6d 	bl	8003ff0 <trigger_low>
    simpleserial_put('r', 16, p);
 8001116:	4622      	mov	r2, r4
 8001118:	2110      	movs	r1, #16
 800111a:	2072      	movs	r0, #114	; 0x72
 800111c:	f002 fe22 	bl	8003d64 <simpleserial_put>
    //trigger_low();
    

    return 0x00;
    
}
 8001120:	2000      	movs	r0, #0
 8001122:	bd10      	pop	{r4, pc}

08001124 <dilithium1>:


uint8_t dilithium1(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p)
{
 8001124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001128:	f6ad 7da8 	subw	sp, sp, #4008	; 0xfa8
 800112c:	461c      	mov	r4, r3
 800112e:	a904      	add	r1, sp, #16
    mlen = 33*(0+1);

    char c[16];
   	unsigned int i=0;
	unsigned int j=0,k=0;
    for	(i=0;i<16;i++){
 8001130:	2300      	movs	r3, #0
	if (i<10)
 8001132:	2b09      	cmp	r3, #9
        c[i] = '0' +i;
 8001134:	bf94      	ite	ls
 8001136:	f103 0230 	addls.w	r2, r3, #48	; 0x30
	else
        c[i] = 'A' + i-10;
 800113a:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
    for	(i=0;i<16;i++){
 800113e:	3301      	adds	r3, #1
        c[i] = 'A' + i-10;
 8001140:	b2d2      	uxtb	r2, r2
    for	(i=0;i<16;i++){
 8001142:	2b10      	cmp	r3, #16
 8001144:	f801 2b01 	strb.w	r2, [r1], #1
 8001148:	d1f3      	bne.n	8001132 <dilithium1+0xe>
	}
    //给消息赋值
    //改動1開始，原來只有底下被注釋的一行
    char mstr[66] = "35DFB0A4D19D9A123C95D2C3F0201F92D62BAD8254FC32CE3750C64212B6044FDF";
    for(int i=0; i < 66;i++){
        mstr[i] = p[i];
 800114a:	2242      	movs	r2, #66	; 0x42
 800114c:	4621      	mov	r1, r4
 800114e:	a811      	add	r0, sp, #68	; 0x44
 8001150:	f7ff f856 	bl	8000200 <memcpy>
    }
    //改動1結束

   for(int i=0; i < 66;i++){
         p[i]=0;
 8001154:	2242      	movs	r2, #66	; 0x42
 8001156:	2100      	movs	r1, #0
 8001158:	4620      	mov	r0, r4
 800115a:	f004 f8a7 	bl	80052ac <memset>
    }

   for(int i=0; i < 66;i++){
       p[60+i] = mstr[i];
 800115e:	a911      	add	r1, sp, #68	; 0x44
 8001160:	2242      	movs	r2, #66	; 0x42
 8001162:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8001166:	f7ff f84b 	bl	8000200 <memcpy>
 800116a:	ab08      	add	r3, sp, #32
 800116c:	a911      	add	r1, sp, #68	; 0x44
   }

    //改動2，注釋了以下
    for(i=0,j=0;i<66;i++,j++){
 800116e:	f04f 0800 	mov.w	r8, #0
 8001172:	461e      	mov	r6, r3
	msg[j] = 0;
	for(k=0; c[k] != mstr[i] ;k++);
 8001174:	780d      	ldrb	r5, [r1, #0]
 8001176:	a804      	add	r0, sp, #16
 8001178:	2200      	movs	r2, #0
 800117a:	e000      	b.n	800117e <dilithium1+0x5a>
 800117c:	3201      	adds	r2, #1
 800117e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8001182:	42af      	cmp	r7, r5
 8001184:	d1fa      	bne.n	800117c <dilithium1+0x58>
	msg[j] += k*16;
 8001186:	0112      	lsls	r2, r2, #4
	i+=1;
	for(k=0; c[k] != mstr[i] ;k++);
 8001188:	784f      	ldrb	r7, [r1, #1]
	msg[j] += k*16;
 800118a:	b2d2      	uxtb	r2, r2
	for(k=0; c[k] != mstr[i] ;k++);
 800118c:	ad04      	add	r5, sp, #16
 800118e:	2000      	movs	r0, #0
 8001190:	f815 cb01 	ldrb.w	ip, [r5], #1
 8001194:	45bc      	cmp	ip, r7
 8001196:	d157      	bne.n	8001248 <dilithium1+0x124>
    for(i=0,j=0;i<66;i++,j++){
 8001198:	f108 0801 	add.w	r8, r8, #1
	msg[j] += k;
 800119c:	4402      	add	r2, r0
    for(i=0,j=0;i<66;i++,j++){
 800119e:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
	msg[j] += k;
 80011a2:	f803 2b01 	strb.w	r2, [r3], #1
    for(i=0,j=0;i<66;i++,j++){
 80011a6:	f101 0102 	add.w	r1, r1, #2
 80011aa:	d1e3      	bne.n	8001174 <dilithium1+0x50>

    // p[87] = 33;
    // p[86] = 33;
    
    // p[13] = ETA;
    m1 = (unsigned char *)calloc(mlen+PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sizeof(unsigned char));
 80011ac:	2101      	movs	r1, #1
 80011ae:	f640 1095 	movw	r0, #2453	; 0x995
 80011b2:	f003 fbd1 	bl	8004958 <calloc>
    sm = (unsigned char *)calloc(mlen+PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sizeof(unsigned char));
 80011b6:	2101      	movs	r1, #1
    m1 = (unsigned char *)calloc(mlen+PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sizeof(unsigned char));
 80011b8:	4605      	mov	r5, r0
    sm = (unsigned char *)calloc(mlen+PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sizeof(unsigned char));
 80011ba:	f640 1095 	movw	r0, #2453	; 0x995
 80011be:	f003 fbcb 	bl	8004958 <calloc>
        
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair(pk,sk);
 80011c2:	f50d 6ab5 	add.w	sl, sp, #1448	; 0x5a8
 80011c6:	f10d 0988 	add.w	r9, sp, #136	; 0x88
    sm = (unsigned char *)calloc(mlen+PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sizeof(unsigned char));
 80011ca:	4607      	mov	r7, r0
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair(pk,sk);
 80011cc:	4651      	mov	r1, sl
 80011ce:	4648      	mov	r0, r9
 80011d0:	f000 f89a 	bl	8001308 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair>
	


	//crypto_sign是簽名函數,生成的簽名消息為sm
    
    if ( (ret_val = PQCLEAN_DILITHIUM2_CLEAN_crypto_sign(sm, &smlen, msg, mlen, sk, p)) != 0) {
 80011d4:	e9cd a400 	strd	sl, r4, [sp]
 80011d8:	4643      	mov	r3, r8
 80011da:	4632      	mov	r2, r6
 80011dc:	a902      	add	r1, sp, #8
 80011de:	4638      	mov	r0, r7
 80011e0:	f000 fa58 	bl	8001694 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign>
 80011e4:	b2c0      	uxtb	r0, r0
 80011e6:	bb88      	cbnz	r0, 800124c <dilithium1+0x128>

        
	//函數crypto_sign_open用於驗證簽名，如果簽名成功返回0，簽名驗證失敗返回-1
        // ret_val = crypto_sign_open(msg, &mlen1, sm, smlen, pk);
        // simpleserial_put('r', 1, ret_val);
    if ((ret_val =  PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open(m1, &mlen1, sm, smlen, pk,p)) != 0) {
 80011e8:	e9cd 9400 	strd	r9, r4, [sp]
 80011ec:	9b02      	ldr	r3, [sp, #8]
 80011ee:	463a      	mov	r2, r7
 80011f0:	a903      	add	r1, sp, #12
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 fb3c 	bl	8001870 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open>
 80011f8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80011fc:	d12f      	bne.n	800125e <dilithium1+0x13a>
        }
        p[31] = ret_val;
    }

   
    if ( mlen != mlen1 ) {
 80011fe:	9903      	ldr	r1, [sp, #12]
 8001200:	2921      	cmp	r1, #33	; 0x21
 8001202:	d137      	bne.n	8001274 <dilithium1+0x150>
        for(int x=0; x <10;x++){
           p[x] +=3;
        }
    }
        
    if ( memcmp(msg, m1, mlen) ) {
 8001204:	2221      	movs	r2, #33	; 0x21
 8001206:	4629      	mov	r1, r5
 8001208:	4630      	mov	r0, r6
 800120a:	f003 ff9f 	bl	800514c <memcmp>
 800120e:	b158      	cbz	r0, 8001228 <dilithium1+0x104>
        printf("crypto_sign_open returned bad 'm' value\n");
 8001210:	481f      	ldr	r0, [pc, #124]	; (8001290 <dilithium1+0x16c>)
 8001212:	f004 f90b 	bl	800542c <puts>
        for(int x=0; x <10;x++){
 8001216:	1e63      	subs	r3, r4, #1
 8001218:	f104 0109 	add.w	r1, r4, #9
            p[x] +=5;
 800121c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001220:	3205      	adds	r2, #5
        for(int x=0; x <10;x++){
 8001222:	4299      	cmp	r1, r3
            p[x] +=5;
 8001224:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <10;x++){
 8001226:	d1f9      	bne.n	800121c <dilithium1+0xf8>
    // for(int x=0; x <16;x++){
    //         p[x] +=1;
    //     }
        // p[25] = DILITHIUM_MODE;
    
        free(m1);
 8001228:	4628      	mov	r0, r5
 800122a:	f003 fcd7 	bl	8004bdc <free>
        // free(sm);
        free(m);
 800122e:	2000      	movs	r0, #0
 8001230:	f003 fcd4 	bl	8004bdc <free>
    simpleserial_put('r', 180, p);
 8001234:	4622      	mov	r2, r4
 8001236:	21b4      	movs	r1, #180	; 0xb4
 8001238:	2072      	movs	r0, #114	; 0x72
 800123a:	f002 fd93 	bl	8003d64 <simpleserial_put>
   return 0x00;
}
 800123e:	2000      	movs	r0, #0
 8001240:	f60d 7da8 	addw	sp, sp, #4008	; 0xfa8
 8001244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(k=0; c[k] != mstr[i] ;k++);
 8001248:	3001      	adds	r0, #1
 800124a:	e7a1      	b.n	8001190 <dilithium1+0x6c>
 800124c:	1e63      	subs	r3, r4, #1
 800124e:	1da1      	adds	r1, r4, #6
            p[x] +=20;
 8001250:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001254:	3214      	adds	r2, #20
        for(int x=0; x <7;x++){
 8001256:	4299      	cmp	r1, r3
            p[x] +=20;
 8001258:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <7;x++){
 800125a:	d1f9      	bne.n	8001250 <dilithium1+0x12c>
 800125c:	e7c4      	b.n	80011e8 <dilithium1+0xc4>
 800125e:	1e63      	subs	r3, r4, #1
 8001260:	f104 0109 	add.w	r1, r4, #9
            p[x] +=2;
 8001264:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001268:	3202      	adds	r2, #2
        for(int x=0; x <10;x++){
 800126a:	4299      	cmp	r1, r3
            p[x] +=2;
 800126c:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <10;x++){
 800126e:	d1f9      	bne.n	8001264 <dilithium1+0x140>
        p[31] = ret_val;
 8001270:	77e0      	strb	r0, [r4, #31]
 8001272:	e7c4      	b.n	80011fe <dilithium1+0xda>
        printf("crypto_sign_open returned bad 'mlen': Got <%llu>, expected <%llu>\n", mlen1, mlen);
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <dilithium1+0x170>)
 8001276:	2221      	movs	r2, #33	; 0x21
 8001278:	f004 f876 	bl	8005368 <printf>
        for(int x=0; x <10;x++){
 800127c:	1e63      	subs	r3, r4, #1
 800127e:	f104 0109 	add.w	r1, r4, #9
           p[x] +=3;
 8001282:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001286:	3203      	adds	r2, #3
        for(int x=0; x <10;x++){
 8001288:	4299      	cmp	r1, r3
           p[x] +=3;
 800128a:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <10;x++){
 800128c:	d1f9      	bne.n	8001282 <dilithium1+0x15e>
 800128e:	e7b9      	b.n	8001204 <dilithium1+0xe0>
 8001290:	0800afeb 	.word	0x0800afeb
 8001294:	0800afa8 	.word	0x0800afa8

08001298 <main>:
// {
//      simpleserial_put('r',20, array);
//      return 0x00;
// }
注釋2結束*/
int main(void){
 8001298:	b508      	push	{r3, lr}

    platform_init();
 800129a:	f002 fe03 	bl	8003ea4 <platform_init>
    init_uart();
 800129e:	f002 fe41 	bl	8003f24 <init_uart>

    trigger_setup();
 80012a2:	f002 fe7d 	bl	8003fa0 <trigger_setup>
    
    /* Device reset detected */
    putch('r');
 80012a6:	2072      	movs	r0, #114	; 0x72
 80012a8:	f002 febc 	bl	8004024 <putch>
    putch('R');
 80012ac:	2052      	movs	r0, #82	; 0x52
 80012ae:	f002 feb9 	bl	8004024 <putch>
    putch('E');
 80012b2:	2045      	movs	r0, #69	; 0x45
 80012b4:	f002 feb6 	bl	8004024 <putch>
    putch('S');
 80012b8:	2053      	movs	r0, #83	; 0x53
 80012ba:	f002 feb3 	bl	8004024 <putch>
    putch('E');
 80012be:	2045      	movs	r0, #69	; 0x45
 80012c0:	f002 feb0 	bl	8004024 <putch>
    putch('T');
 80012c4:	2054      	movs	r0, #84	; 0x54
 80012c6:	f002 fead 	bl	8004024 <putch>
    putch(' ');
 80012ca:	2020      	movs	r0, #32
 80012cc:	f002 feaa 	bl	8004024 <putch>
    putch(' ');
 80012d0:	2020      	movs	r0, #32
 80012d2:	f002 fea7 	bl	8004024 <putch>
    putch(' ');
 80012d6:	2020      	movs	r0, #32
 80012d8:	f002 fea4 	bl	8004024 <putch>
    putch('\n');
 80012dc:	200a      	movs	r0, #10
 80012de:	f002 fea1 	bl	8004024 <putch>
    
    simpleserial_init();
 80012e2:	f002 fd22 	bl	8003d2a <simpleserial_init>
    simpleserial_addcmd('A', 16, enc_password);
 80012e6:	4a06      	ldr	r2, [pc, #24]	; (8001300 <main+0x68>)
 80012e8:	2110      	movs	r1, #16
 80012ea:	2041      	movs	r0, #65	; 0x41
 80012ec:	f002 fd1e 	bl	8003d2c <simpleserial_addcmd>
    
    simpleserial_addcmd('3', 180, dilithium1);
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <main+0x6c>)
 80012f2:	21b4      	movs	r1, #180	; 0xb4
 80012f4:	2033      	movs	r0, #51	; 0x33
 80012f6:	f002 fd19 	bl	8003d2c <simpleserial_addcmd>
    simpleserial_addcmd('N',0,smbuf_chunk_14);

   注釋3結束*/
    
    while(1)
        simpleserial_get();
 80012fa:	f002 fd61 	bl	8003dc0 <simpleserial_get>
    while(1)
 80012fe:	e7fc      	b.n	80012fa <main+0x62>
 8001300:	080010ed 	.word	0x080010ed
 8001304:	08001125 	.word	0x08001125

08001308 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130c:	f5ad 4d10 	sub.w	sp, sp, #36864	; 0x9000
 8001310:	b0b4      	sub	sp, #208	; 0xd0
    polyvecl s1, s1hat;
    polyveck s2, t1, t0;

    /* Get randomness for rho, rhoprime and key */
    // randombytes(seedbuf, SEEDBYTES);
    shake256(seedbuf, 2 * SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 8001312:	aa14      	add	r2, sp, #80	; 0x50
 8001314:	2320      	movs	r3, #32
int PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8001316:	4605      	mov	r5, r0
 8001318:	460e      	mov	r6, r1
    shake256(seedbuf, 2 * SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 800131a:	4610      	mov	r0, r2
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	f002 fbfc 	bl	8003b1a <shake256>
    rho = seedbuf;
    rhoprime = rho + SEEDBYTES;
    key = rhoprime + CRHBYTES;

    /* Expand matrix */
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand(mat, rho);
 8001322:	f50d 40a1 	add.w	r0, sp, #20608	; 0x5080
    shake256(seedbuf, 2 * SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 8001326:	ac34      	add	r4, sp, #208	; 0xd0

    /* Sample short vectors s1 and s2 */
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_eta(&s1, rhoprime, 0);
 8001328:	f10d 0870 	add.w	r8, sp, #112	; 0x70
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand(mat, rho);
 800132c:	a914      	add	r1, sp, #80	; 0x50
 800132e:	3050      	adds	r0, #80	; 0x50
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta(&s2, rhoprime, L);
 8001330:	f50d 5703 	add.w	r7, sp, #8384	; 0x20c0
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand(mat, rho);
 8001334:	f001 f845 	bl	80023c2 <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta(&s2, rhoprime, L);
 8001338:	3710      	adds	r7, #16
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_eta(&s1, rhoprime, 0);
 800133a:	4641      	mov	r1, r8
 800133c:	4620      	mov	r0, r4
 800133e:	2200      	movs	r2, #0
 8001340:	f001 f858 	bl	80023f4 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_eta>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta(&s2, rhoprime, L);
 8001344:	4641      	mov	r1, r8
 8001346:	4638      	mov	r0, r7
 8001348:	2204      	movs	r2, #4
 800134a:	f001 f909 	bl	8002560 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta>

    /* Matrix-vector multiplication */
    s1hat = s1;
 800134e:	f50d 5086 	add.w	r0, sp, #4288	; 0x10c0
 8001352:	4621      	mov	r1, r4
 8001354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001358:	3010      	adds	r0, #16
 800135a:	f7fe ff51 	bl	8000200 <memcpy>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt(&s1hat);
 800135e:	f50d 5086 	add.w	r0, sp, #4288	; 0x10c0
 8001362:	3010      	adds	r0, #16
 8001364:	f001 f889 	bl	800247a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 8001368:	f50d 5286 	add.w	r2, sp, #4288	; 0x10c0
 800136c:	f50d 41a1 	add.w	r1, sp, #20608	; 0x5080
 8001370:	f50d 5043 	add.w	r0, sp, #12480	; 0x30c0
 8001374:	3210      	adds	r2, #16
 8001376:	3150      	adds	r1, #80	; 0x50
 8001378:	3010      	adds	r0, #16
 800137a:	f001 f8ce 	bl	800251a <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(&t1);
 800137e:	f50d 5043 	add.w	r0, sp, #12480	; 0x30c0
 8001382:	3010      	adds	r0, #16
 8001384:	f001 f8fc 	bl	8002580 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(&t1);
 8001388:	f50d 5043 	add.w	r0, sp, #12480	; 0x30c0
 800138c:	3010      	adds	r0, #16
 800138e:	f001 f95f 	bl	8002650 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont>

    /* Add error vector s2 */
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_add(&t1, &t1, &s2);
 8001392:	f50d 5143 	add.w	r1, sp, #12480	; 0x30c0
 8001396:	3110      	adds	r1, #16
 8001398:	463a      	mov	r2, r7
 800139a:	4608      	mov	r0, r1
 800139c:	f001 f914 	bl	80025c8 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_add>

    /* Extract t1 and write public key */
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq(&t1);
 80013a0:	f50d 5043 	add.w	r0, sp, #12480	; 0x30c0
 80013a4:	3010      	adds	r0, #16
 80013a6:	f001 f8fd 	bl	80025a4 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round(&t1, &t0, &t1);
 80013aa:	f50d 4881 	add.w	r8, sp, #16512	; 0x4080
 80013ae:	f50d 5243 	add.w	r2, sp, #12480	; 0x30c0
 80013b2:	f108 0850 	add.w	r8, r8, #80	; 0x50
 80013b6:	3210      	adds	r2, #16
 80013b8:	4641      	mov	r1, r8
 80013ba:	4610      	mov	r0, r2
 80013bc:	f001 f97b 	bl	80026b6 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round>
    PQCLEAN_DILITHIUM2_CLEAN_pack_pk(pk, rho, &t1);
 80013c0:	f50d 5243 	add.w	r2, sp, #12480	; 0x30c0
 80013c4:	a914      	add	r1, sp, #80	; 0x50
 80013c6:	4628      	mov	r0, r5
 80013c8:	3210      	adds	r2, #16
 80013ca:	f000 fa80 	bl	80018ce <PQCLEAN_DILITHIUM2_CLEAN_pack_pk>

    /* Compute H(rho, t1) and write secret key */
    shake256(tr, TRBYTES, pk, PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_PUBLICKEYBYTES);
 80013ce:	462a      	mov	r2, r5
 80013d0:	a804      	add	r0, sp, #16
 80013d2:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80013d6:	2140      	movs	r1, #64	; 0x40
 80013d8:	f002 fb9f 	bl	8003b1a <shake256>
    PQCLEAN_DILITHIUM2_CLEAN_pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 80013dc:	4630      	mov	r0, r6
 80013de:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80013e2:	f8cd 8000 	str.w	r8, [sp]
 80013e6:	ab2c      	add	r3, sp, #176	; 0xb0
 80013e8:	aa04      	add	r2, sp, #16
 80013ea:	a914      	add	r1, sp, #80	; 0x50
 80013ec:	f000 faa5 	bl	800193a <PQCLEAN_DILITHIUM2_CLEAN_pack_sk>

    return 0;
}
 80013f0:	2000      	movs	r0, #0
 80013f2:	f50d 4d10 	add.w	sp, sp, #36864	; 0x9000
 80013f6:	b034      	add	sp, #208	; 0xd0
 80013f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013fc <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature>:
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature(uint8_t *sig,
        size_t *siglen,
        const uint8_t *m,
        size_t mlen,
        const uint8_t *sk,uint8_t *p) {
 80013fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001400:	f5ad 4d45 	sub.w	sp, sp, #50432	; 0xc500
 8001404:	b08f      	sub	sp, #60	; 0x3c
 8001406:	461f      	mov	r7, r3
    tr = rho + SEEDBYTES;
    key = tr + TRBYTES;
    rnd = key + SEEDBYTES;
    mu = rnd + RNDBYTES;
    rhoprime = mu + CRHBYTES;
    PQCLEAN_DILITHIUM2_CLEAN_unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 8001408:	f50d 4345 	add.w	r3, sp, #50432	; 0xc500
 800140c:	3360      	adds	r3, #96	; 0x60
 800140e:	f50d 488a 	add.w	r8, sp, #17664	; 0x4500
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800141a:	f50d 6aa7 	add.w	sl, sp, #1336	; 0x538
 800141e:	f108 0838 	add.w	r8, r8, #56	; 0x38
 8001422:	f50d 5354 	add.w	r3, sp, #13568	; 0x3500
 8001426:	3338      	adds	r3, #56	; 0x38
        const uint8_t *sk,uint8_t *p) {
 8001428:	4615      	mov	r5, r2
    PQCLEAN_DILITHIUM2_CLEAN_unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 800142a:	f8cd a000 	str.w	sl, [sp]
 800142e:	465a      	mov	r2, fp
        const uint8_t *sk,uint8_t *p) {
 8001430:	4604      	mov	r4, r0
 8001432:	460e      	mov	r6, r1
    PQCLEAN_DILITHIUM2_CLEAN_unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 8001434:	a806      	add	r0, sp, #24
 8001436:	a90e      	add	r1, sp, #56	; 0x38
 8001438:	f8cd 8004 	str.w	r8, [sp, #4]
 800143c:	f000 fac4 	bl	80019c8 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk>

    /* Compute mu = CRH(tr, msg) */
    shake256_inc_init(&state);
 8001440:	a805      	add	r0, sp, #20
 8001442:	f002 fb2e 	bl	8003aa2 <shake256_inc_init>
    shake256_inc_absorb(&state, tr, TRBYTES);
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	a90e      	add	r1, sp, #56	; 0x38
 800144a:	a805      	add	r0, sp, #20
 800144c:	f002 fb37 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_absorb(&state, m, mlen);
 8001450:	463a      	mov	r2, r7
 8001452:	4629      	mov	r1, r5
 8001454:	a805      	add	r0, sp, #20
 8001456:	f002 fb32 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 800145a:	a805      	add	r0, sp, #20
 800145c:	f002 fb35 	bl	8003aca <shake256_inc_finalize>
    shake256_inc_squeeze(mu, CRHBYTES, &state);
 8001460:	aa05      	add	r2, sp, #20
 8001462:	2140      	movs	r1, #64	; 0x40
 8001464:	a82e      	add	r0, sp, #184	; 0xb8
 8001466:	f002 fb35 	bl	8003ad4 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 800146a:	a805      	add	r0, sp, #20
 800146c:	f002 fb36 	bl	8003adc <shake256_inc_ctx_release>

    for (n = 0; n < RNDBYTES; n++) {
        rnd[n] = 0;
    }
    shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 8001470:	f10d 09f8 	add.w	r9, sp, #248	; 0xf8
        rnd[n] = 0;
 8001474:	2220      	movs	r2, #32
 8001476:	2100      	movs	r1, #0
 8001478:	a826      	add	r0, sp, #152	; 0x98
 800147a:	f003 ff17 	bl	80052ac <memset>
    shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 800147e:	465a      	mov	r2, fp
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	4648      	mov	r0, r9
 8001486:	f002 fb48 	bl	8003b1a <shake256>

    /* Expand matrix and transform vectors */
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand(mat, rho);
 800148a:	f50d 4005 	add.w	r0, sp, #34048	; 0x8500
 800148e:	a906      	add	r1, sp, #24
 8001490:	3038      	adds	r0, #56	; 0x38
 8001492:	f000 ff96 	bl	80023c2 <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt(&s1);
 8001496:	4650      	mov	r0, sl
 8001498:	f000 ffef 	bl	800247a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt(&s2);
 800149c:	4640      	mov	r0, r8
 800149e:	f001 f8c5 	bl	800262c <PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt(&t0);
 80014a2:	f50d 5054 	add.w	r0, sp, #13568	; 0x3500
 80014a6:	3038      	adds	r0, #56	; 0x38
 80014a8:	f001 f8c0 	bl	800262c <PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt>
    /* Compute z, reject if it reveals secret */
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_invntt_tomont(&z);
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add(&z, &z, &y);
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_reduce(&z);
    if (PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm(&z, GAMMA1 - BETA)) {
 80014ac:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800168c <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0x290>
     * do not reveal secret information */
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(&h);
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub(&w0, &w0, &h);
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(&w0);
    if (PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm(&w0, GAMMA2 - BETA)) {
 80014b0:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8001690 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0x294>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt(&t0);
 80014b4:	2700      	movs	r7, #0
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
 80014b6:	f50d 50a9 	add.w	r0, sp, #5408	; 0x1520
 80014ba:	b2ba      	uxth	r2, r7
 80014bc:	4649      	mov	r1, r9
 80014be:	3018      	adds	r0, #24
 80014c0:	f000 ffa8 	bl	8002414 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_gamma1>
    z = y;
 80014c4:	f50d 51a9 	add.w	r1, sp, #5408	; 0x1520
 80014c8:	f50d 5014 	add.w	r0, sp, #9472	; 0x2500
 80014cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d0:	3118      	adds	r1, #24
 80014d2:	3038      	adds	r0, #56	; 0x38
 80014d4:	f7fe fe94 	bl	8000200 <memcpy>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt(&z);
 80014d8:	f50d 5014 	add.w	r0, sp, #9472	; 0x2500
 80014dc:	3038      	adds	r0, #56	; 0x38
 80014de:	f000 ffcc 	bl	800247a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 80014e2:	f50d 5214 	add.w	r2, sp, #9472	; 0x2500
 80014e6:	f50d 4105 	add.w	r1, sp, #34048	; 0x8500
 80014ea:	f50d 40aa 	add.w	r0, sp, #21760	; 0x5500
 80014ee:	3238      	adds	r2, #56	; 0x38
 80014f0:	3138      	adds	r1, #56	; 0x38
 80014f2:	3038      	adds	r0, #56	; 0x38
 80014f4:	f001 f811 	bl	800251a <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(&w1);
 80014f8:	f50d 40aa 	add.w	r0, sp, #21760	; 0x5500
 80014fc:	3038      	adds	r0, #56	; 0x38
 80014fe:	f001 f83f 	bl	8002580 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(&w1);
 8001502:	f50d 40aa 	add.w	r0, sp, #21760	; 0x5500
 8001506:	3038      	adds	r0, #56	; 0x38
 8001508:	f001 f8a2 	bl	8002650 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq(&w1);
 800150c:	f50d 40aa 	add.w	r0, sp, #21760	; 0x5500
 8001510:	3038      	adds	r0, #56	; 0x38
 8001512:	f001 f847 	bl	80025a4 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose(&w1, &w0, &w1);
 8001516:	f50d 42aa 	add.w	r2, sp, #21760	; 0x5500
 800151a:	3238      	adds	r2, #56	; 0x38
 800151c:	f50d 41ca 	add.w	r1, sp, #25856	; 0x6500
 8001520:	4610      	mov	r0, r2
 8001522:	3138      	adds	r1, #56	; 0x38
 8001524:	f001 f8d7 	bl	80026d6 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1(sig, &w1);
 8001528:	f50d 41aa 	add.w	r1, sp, #21760	; 0x5500
 800152c:	3138      	adds	r1, #56	; 0x38
 800152e:	4620      	mov	r0, r4
 8001530:	f001 f907 	bl	8002742 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1>
    shake256_inc_init(&state);
 8001534:	a805      	add	r0, sp, #20
 8001536:	f002 fab4 	bl	8003aa2 <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	a92e      	add	r1, sp, #184	; 0xb8
 800153e:	a805      	add	r0, sp, #20
 8001540:	f002 fabd 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_absorb(&state, sig, K * POLYW1_PACKEDBYTES);
 8001544:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001548:	4621      	mov	r1, r4
 800154a:	a805      	add	r0, sp, #20
 800154c:	f002 fab7 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8001550:	a805      	add	r0, sp, #20
 8001552:	f002 faba 	bl	8003aca <shake256_inc_finalize>
    shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 8001556:	aa05      	add	r2, sp, #20
 8001558:	2120      	movs	r1, #32
 800155a:	4620      	mov	r0, r4
 800155c:	f002 faba 	bl	8003ad4 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8001560:	a805      	add	r0, sp, #20
 8001562:	f002 fabb 	bl	8003adc <shake256_inc_ctx_release>
    PQCLEAN_DILITHIUM2_CLEAN_poly_challenge(&cp, sig); /* uses only the first SEEDBYTES bytes of sig */
 8001566:	4621      	mov	r1, r4
 8001568:	a84e      	add	r0, sp, #312	; 0x138
 800156a:	f000 fc82 	bl	8001e72 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge>
    PQCLEAN_DILITHIUM2_CLEAN_poly_ntt(&cp);
 800156e:	a84e      	add	r0, sp, #312	; 0x138
 8001570:	f000 fb9f 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 8001574:	f50d 5014 	add.w	r0, sp, #9472	; 0x2500
 8001578:	f50d 62a7 	add.w	r2, sp, #1336	; 0x538
 800157c:	a94e      	add	r1, sp, #312	; 0x138
 800157e:	3038      	adds	r0, #56	; 0x38
 8001580:	f000 ff9f 	bl	80024c2 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_poly_montgomery>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_invntt_tomont(&z);
 8001584:	f50d 5014 	add.w	r0, sp, #9472	; 0x2500
 8001588:	3038      	adds	r0, #56	; 0x38
 800158a:	f000 ff88 	bl	800249e <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_invntt_tomont>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add(&z, &z, &y);
 800158e:	f50d 5114 	add.w	r1, sp, #9472	; 0x2500
 8001592:	3138      	adds	r1, #56	; 0x38
 8001594:	f50d 52a9 	add.w	r2, sp, #5408	; 0x1520
 8001598:	4608      	mov	r0, r1
 800159a:	3218      	adds	r2, #24
 800159c:	f000 ff5d 	bl	800245a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add>
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_reduce(&z);
 80015a0:	f50d 5014 	add.w	r0, sp, #9472	; 0x2500
 80015a4:	3038      	adds	r0, #56	; 0x38
 80015a6:	f000 ff46 	bl	8002436 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_reduce>
    if (PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm(&z, GAMMA1 - BETA)) {
 80015aa:	f50d 5014 	add.w	r0, sp, #9472	; 0x2500
 80015ae:	4651      	mov	r1, sl
 80015b0:	3038      	adds	r0, #56	; 0x38
 80015b2:	f000 ffc4 	bl	800253e <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d166      	bne.n	8001688 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0x28c>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 80015ba:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 80015be:	4642      	mov	r2, r8
 80015c0:	a94e      	add	r1, sp, #312	; 0x138
 80015c2:	3038      	adds	r0, #56	; 0x38
 80015c4:	f001 f856 	bl	8002674 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(&h);
 80015c8:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 80015cc:	3038      	adds	r0, #56	; 0x38
 80015ce:	f001 f83f 	bl	8002650 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub(&w0, &w0, &h);
 80015d2:	f50d 41ca 	add.w	r1, sp, #25856	; 0x6500
 80015d6:	3138      	adds	r1, #56	; 0x38
 80015d8:	f50d 42ea 	add.w	r2, sp, #29952	; 0x7500
 80015dc:	4608      	mov	r0, r1
 80015de:	3238      	adds	r2, #56	; 0x38
 80015e0:	f001 f802 	bl	80025e8 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(&w0);
 80015e4:	f50d 40ca 	add.w	r0, sp, #25856	; 0x6500
 80015e8:	3038      	adds	r0, #56	; 0x38
 80015ea:	f000 ffc9 	bl	8002580 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce>
    if (PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm(&w0, GAMMA2 - BETA)) {
 80015ee:	f50d 40ca 	add.w	r0, sp, #25856	; 0x6500
 80015f2:	4659      	mov	r1, fp
 80015f4:	3038      	adds	r0, #56	; 0x38
 80015f6:	f001 f84d 	bl	8002694 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm>
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d144      	bne.n	8001688 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0x28c>
        goto rej;
    }

    /* Compute hints for w1 */
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 80015fe:	f50d 5254 	add.w	r2, sp, #13568	; 0x3500
 8001602:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 8001606:	3238      	adds	r2, #56	; 0x38
 8001608:	a94e      	add	r1, sp, #312	; 0x138
 800160a:	3038      	adds	r0, #56	; 0x38
 800160c:	f001 f832 	bl	8002674 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(&h);
 8001610:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 8001614:	3038      	adds	r0, #56	; 0x38
 8001616:	f001 f81b 	bl	8002650 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(&h);
 800161a:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 800161e:	3038      	adds	r0, #56	; 0x38
 8001620:	f000 ffae 	bl	8002580 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce>
    if (PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm(&h, GAMMA2)) {
 8001624:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 8001628:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 800162c:	3038      	adds	r0, #56	; 0x38
 800162e:	f001 f831 	bl	8002694 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm>
 8001632:	4605      	mov	r5, r0
 8001634:	bb40      	cbnz	r0, 8001688 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0x28c>
        goto rej;
    }

    PQCLEAN_DILITHIUM2_CLEAN_polyveck_add(&w0, &w0, &h);
 8001636:	f50d 41ca 	add.w	r1, sp, #25856	; 0x6500
 800163a:	3138      	adds	r1, #56	; 0x38
 800163c:	f50d 42ea 	add.w	r2, sp, #29952	; 0x7500
 8001640:	4608      	mov	r0, r1
 8001642:	3238      	adds	r2, #56	; 0x38
 8001644:	f000 ffc0 	bl	80025c8 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_add>
    n = PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint(&h, &w0, &w1);
 8001648:	f50d 42aa 	add.w	r2, sp, #21760	; 0x5500
 800164c:	f50d 41ca 	add.w	r1, sp, #25856	; 0x6500
 8001650:	f50d 40ea 	add.w	r0, sp, #29952	; 0x7500
 8001654:	3238      	adds	r2, #56	; 0x38
 8001656:	3138      	adds	r1, #56	; 0x38
 8001658:	3038      	adds	r0, #56	; 0x38
 800165a:	f001 f84c 	bl	80026f6 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint>
    if (n > OMEGA) {
 800165e:	2850      	cmp	r0, #80	; 0x50
 8001660:	d812      	bhi.n	8001688 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0x28c>
        goto rej;
    }

    /* Write signature */
    PQCLEAN_DILITHIUM2_CLEAN_pack_sig(sig, sig, &z, &h);
 8001662:	f50d 43ea 	add.w	r3, sp, #29952	; 0x7500
 8001666:	f50d 5214 	add.w	r2, sp, #9472	; 0x2500
 800166a:	4620      	mov	r0, r4
 800166c:	3338      	adds	r3, #56	; 0x38
 800166e:	3238      	adds	r2, #56	; 0x38
 8001670:	4621      	mov	r1, r4
 8001672:	f000 f9f1 	bl	8001a58 <PQCLEAN_DILITHIUM2_CLEAN_pack_sig>
    *siglen = PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES;
 8001676:	f640 1374 	movw	r3, #2420	; 0x974
    return 0;
}
 800167a:	4628      	mov	r0, r5
    *siglen = PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES;
 800167c:	6033      	str	r3, [r6, #0]
}
 800167e:	f50d 4d45 	add.w	sp, sp, #50432	; 0xc500
 8001682:	b00f      	add	sp, #60	; 0x3c
 8001684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001688:	3701      	adds	r7, #1
 800168a:	e714      	b.n	80014b6 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature+0xba>
 800168c:	0001ffb2 	.word	0x0001ffb2
 8001690:	000173b2 	.word	0x000173b2

08001694 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign>:
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_crypto_sign(uint8_t *sm,
        size_t *smlen,
        const uint8_t *m,
        size_t mlen,
        const uint8_t *sk,uint8_t *p) {
 8001694:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001696:	460d      	mov	r5, r1
 8001698:	461c      	mov	r4, r3
 800169a:	18d1      	adds	r1, r2, r3
 800169c:	f603 1374 	addw	r3, r3, #2420	; 0x974
 80016a0:	4403      	add	r3, r0
    size_t i;

    for (i = 0; i < mlen; ++i) {
 80016a2:	4291      	cmp	r1, r2
 80016a4:	d10f      	bne.n	80016c6 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign+0x32>
        sm[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
    }
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature(sm, smlen, sm + PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, mlen, sk,p);
 80016a6:	9b07      	ldr	r3, [sp, #28]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	9b06      	ldr	r3, [sp, #24]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f600 1274 	addw	r2, r0, #2420	; 0x974
 80016b2:	4623      	mov	r3, r4
 80016b4:	4629      	mov	r1, r5
 80016b6:	f7ff fea1 	bl	80013fc <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature>
    *smlen += mlen;
 80016ba:	682b      	ldr	r3, [r5, #0]
    return 0;
}
 80016bc:	2000      	movs	r0, #0
    *smlen += mlen;
 80016be:	4423      	add	r3, r4
 80016c0:	602b      	str	r3, [r5, #0]
}
 80016c2:	b002      	add	sp, #8
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
        sm[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 80016c6:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
 80016ca:	f803 6d01 	strb.w	r6, [r3, #-1]!
    for (i = 0; i < mlen; ++i) {
 80016ce:	e7e8      	b.n	80016a2 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign+0xe>

080016d0 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify>:
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify(const uint8_t *sig,
        size_t siglen,
        const uint8_t *m,
        size_t mlen,
        const uint8_t *pk,uint8_t *p) {
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	f5ad 4d07 	sub.w	sp, sp, #34560	; 0x8700
 80016d6:	b0ad      	sub	sp, #180	; 0xb4
 80016d8:	461e      	mov	r6, r3
 80016da:	f50d 4307 	add.w	r3, sp, #34560	; 0x8700
 80016de:	33c8      	adds	r3, #200	; 0xc8
 80016e0:	681f      	ldr	r7, [r3, #0]
    poly cp;
    polyvecl mat[K], z;
    polyveck t1, w1, h;
    shake256incctx state;

    if (siglen != PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES) {
 80016e2:	f640 1374 	movw	r3, #2420	; 0x974
 80016e6:	4299      	cmp	r1, r3
        const uint8_t *pk,uint8_t *p) {
 80016e8:	4604      	mov	r4, r0
 80016ea:	4615      	mov	r5, r2
    if (siglen != PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES) {
 80016ec:	f040 80ba 	bne.w	8001864 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x194>
        return -1;
    }

    PQCLEAN_DILITHIUM2_CLEAN_unpack_pk(rho, &t1, pk);
 80016f0:	f50d 51bd 	add.w	r1, sp, #6048	; 0x17a0
 80016f4:	463a      	mov	r2, r7
 80016f6:	3110      	adds	r1, #16
 80016f8:	a804      	add	r0, sp, #16
 80016fa:	f000 f903 	bl	8001904 <PQCLEAN_DILITHIUM2_CLEAN_unpack_pk>
    if (PQCLEAN_DILITHIUM2_CLEAN_unpack_sig(c, &z, &h, sig)) {
 80016fe:	f50d 525e 	add.w	r2, sp, #14208	; 0x3780
 8001702:	4623      	mov	r3, r4
 8001704:	3230      	adds	r2, #48	; 0x30
 8001706:	f50d 61f6 	add.w	r1, sp, #1968	; 0x7b0
 800170a:	a80c      	add	r0, sp, #48	; 0x30
 800170c:	f000 f9df 	bl	8001ace <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig>
 8001710:	2800      	cmp	r0, #0
 8001712:	f040 80a7 	bne.w	8001864 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x194>
        return -1;
    }
    if (PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm(&z, GAMMA1 - BETA)) {
 8001716:	4955      	ldr	r1, [pc, #340]	; (800186c <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x19c>)
 8001718:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 800171c:	f000 ff0f 	bl	800253e <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm>
 8001720:	4604      	mov	r4, r0
 8001722:	2800      	cmp	r0, #0
 8001724:	f040 809e 	bne.w	8001864 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x194>
        return -1;
    }

    /* Compute CRH(H(rho, t1), msg) */
    shake256(mu, CRHBYTES, pk, PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_PUBLICKEYBYTES);
 8001728:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800172c:	463a      	mov	r2, r7
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	a81c      	add	r0, sp, #112	; 0x70
 8001732:	f002 f9f2 	bl	8003b1a <shake256>
    shake256_inc_init(&state);
 8001736:	a803      	add	r0, sp, #12
 8001738:	f002 f9b3 	bl	8003aa2 <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	a91c      	add	r1, sp, #112	; 0x70
 8001740:	a803      	add	r0, sp, #12
 8001742:	f002 f9bc 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_absorb(&state, m, mlen);
 8001746:	4632      	mov	r2, r6
 8001748:	4629      	mov	r1, r5
 800174a:	a803      	add	r0, sp, #12
 800174c:	f002 f9b7 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8001750:	a803      	add	r0, sp, #12
 8001752:	f002 f9ba 	bl	8003aca <shake256_inc_finalize>
    shake256_inc_squeeze(mu, CRHBYTES, &state);
 8001756:	aa03      	add	r2, sp, #12
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	a81c      	add	r0, sp, #112	; 0x70
 800175c:	f002 f9ba 	bl	8003ad4 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8001760:	a803      	add	r0, sp, #12
 8001762:	f002 f9bb 	bl	8003adc <shake256_inc_ctx_release>

    /* Matrix-vector multiplication; compute Az - c2^dt1 */
    PQCLEAN_DILITHIUM2_CLEAN_poly_challenge(&cp, c); /* uses only the first SEEDBYTES bytes of c */
 8001766:	a90c      	add	r1, sp, #48	; 0x30
 8001768:	a8ec      	add	r0, sp, #944	; 0x3b0
 800176a:	f000 fb82 	bl	8001e72 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge>
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand(mat, rho);
 800176e:	f50d 408f 	add.w	r0, sp, #18304	; 0x4780
 8001772:	a904      	add	r1, sp, #16
 8001774:	3030      	adds	r0, #48	; 0x30
 8001776:	f000 fe24 	bl	80023c2 <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand>

    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt(&z);
 800177a:	f50d 60f6 	add.w	r0, sp, #1968	; 0x7b0
 800177e:	f000 fe7c 	bl	800247a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8001782:	f50d 418f 	add.w	r1, sp, #18304	; 0x4780
 8001786:	f50d 501e 	add.w	r0, sp, #10112	; 0x2780
 800178a:	f50d 62f6 	add.w	r2, sp, #1968	; 0x7b0
 800178e:	3130      	adds	r1, #48	; 0x30
 8001790:	3030      	adds	r0, #48	; 0x30
 8001792:	f000 fec2 	bl	800251a <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery>

    PQCLEAN_DILITHIUM2_CLEAN_poly_ntt(&cp);
 8001796:	a8ec      	add	r0, sp, #944	; 0x3b0
 8001798:	f000 fa8b 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl(&t1);
 800179c:	f50d 50bd 	add.w	r0, sp, #6048	; 0x17a0
 80017a0:	3010      	adds	r0, #16
 80017a2:	f000 ff31 	bl	8002608 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt(&t1);
 80017a6:	f50d 50bd 	add.w	r0, sp, #6048	; 0x17a0
 80017aa:	3010      	adds	r0, #16
 80017ac:	f000 ff3e 	bl	800262c <PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 80017b0:	f50d 52bd 	add.w	r2, sp, #6048	; 0x17a0
 80017b4:	3210      	adds	r2, #16
 80017b6:	4610      	mov	r0, r2
 80017b8:	a9ec      	add	r1, sp, #944	; 0x3b0
 80017ba:	f000 ff5b 	bl	8002674 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery>

    PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub(&w1, &w1, &t1);
 80017be:	f50d 511e 	add.w	r1, sp, #10112	; 0x2780
 80017c2:	3130      	adds	r1, #48	; 0x30
 80017c4:	f50d 52bd 	add.w	r2, sp, #6048	; 0x17a0
 80017c8:	4608      	mov	r0, r1
 80017ca:	3210      	adds	r2, #16
 80017cc:	f000 ff0c 	bl	80025e8 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(&w1);
 80017d0:	f50d 501e 	add.w	r0, sp, #10112	; 0x2780
 80017d4:	3030      	adds	r0, #48	; 0x30
 80017d6:	f000 fed3 	bl	8002580 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(&w1);
 80017da:	f50d 501e 	add.w	r0, sp, #10112	; 0x2780
 80017de:	3030      	adds	r0, #48	; 0x30
 80017e0:	f000 ff36 	bl	8002650 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont>

    /* Reconstruct w1 */
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq(&w1);
 80017e4:	f50d 501e 	add.w	r0, sp, #10112	; 0x2780
 80017e8:	3030      	adds	r0, #48	; 0x30
 80017ea:	f000 fedb 	bl	80025a4 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint(&w1, &w1, &h);
 80017ee:	f50d 511e 	add.w	r1, sp, #10112	; 0x2780
 80017f2:	3130      	adds	r1, #48	; 0x30
 80017f4:	f50d 525e 	add.w	r2, sp, #14208	; 0x3780
 80017f8:	3230      	adds	r2, #48	; 0x30
 80017fa:	4608      	mov	r0, r1
 80017fc:	f000 ff91 	bl	8002722 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint>
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1(buf, &w1);
 8001800:	f50d 511e 	add.w	r1, sp, #10112	; 0x2780
 8001804:	3130      	adds	r1, #48	; 0x30
 8001806:	a82c      	add	r0, sp, #176	; 0xb0
 8001808:	f000 ff9b 	bl	8002742 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1>

    /* Call random oracle and verify PQCLEAN_DILITHIUM2_CLEAN_challenge */
    shake256_inc_init(&state);
 800180c:	a803      	add	r0, sp, #12
 800180e:	f002 f948 	bl	8003aa2 <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	a91c      	add	r1, sp, #112	; 0x70
 8001816:	a803      	add	r0, sp, #12
 8001818:	f002 f951 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_absorb(&state, buf, K * POLYW1_PACKEDBYTES);
 800181c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001820:	a92c      	add	r1, sp, #176	; 0xb0
 8001822:	a803      	add	r0, sp, #12
 8001824:	f002 f94b 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8001828:	a803      	add	r0, sp, #12
 800182a:	f002 f94e 	bl	8003aca <shake256_inc_finalize>
    shake256_inc_squeeze(c2, CTILDEBYTES, &state);
 800182e:	ab14      	add	r3, sp, #80	; 0x50
 8001830:	4618      	mov	r0, r3
 8001832:	aa03      	add	r2, sp, #12
 8001834:	2120      	movs	r1, #32
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	f002 f94c 	bl	8003ad4 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 800183c:	a803      	add	r0, sp, #12
 800183e:	f002 f94d 	bl	8003adc <shake256_inc_ctx_release>
    for (i = 0; i < CTILDEBYTES; ++i) {
 8001842:	9a01      	ldr	r2, [sp, #4]
 8001844:	ab0c      	add	r3, sp, #48	; 0x30
 8001846:	4621      	mov	r1, r4
        if (c[i] != c2[i]) {
 8001848:	f813 5b01 	ldrb.w	r5, [r3], #1
 800184c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001850:	4285      	cmp	r5, r0
 8001852:	d107      	bne.n	8001864 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x194>
    for (i = 0; i < CTILDEBYTES; ++i) {
 8001854:	3101      	adds	r1, #1
 8001856:	2920      	cmp	r1, #32
 8001858:	d1f6      	bne.n	8001848 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x178>
            return -1;
        }
    }
    return 0;
}
 800185a:	4620      	mov	r0, r4
 800185c:	f50d 4d07 	add.w	sp, sp, #34560	; 0x8700
 8001860:	b02d      	add	sp, #180	; 0xb4
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 8001864:	f04f 34ff 	mov.w	r4, #4294967295
 8001868:	e7f7      	b.n	800185a <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify+0x18a>
 800186a:	bf00      	nop
 800186c:	0001ffb2 	.word	0x0001ffb2

08001870 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open>:
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open(uint8_t *m,
        size_t *mlen,
        const uint8_t *sm,
        size_t smlen,
        const uint8_t *pk,uint8_t *p) {
 8001870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001872:	461d      	mov	r5, r3
    size_t i;

    if (smlen < PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES) {
 8001874:	f640 1373 	movw	r3, #2419	; 0x973
 8001878:	429d      	cmp	r5, r3
        const uint8_t *pk,uint8_t *p) {
 800187a:	4607      	mov	r7, r0
 800187c:	460e      	mov	r6, r1
 800187e:	4614      	mov	r4, r2
    if (smlen < PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES) {
 8001880:	d91b      	bls.n	80018ba <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open+0x4a>
        goto badsig;
    }

    *mlen = smlen - PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES;
    if (PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify(sm, PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sm + PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, *mlen, pk,p)) {
 8001882:	9a09      	ldr	r2, [sp, #36]	; 0x24
    *mlen = smlen - PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES;
 8001884:	f6a5 1374 	subw	r3, r5, #2420	; 0x974
 8001888:	600b      	str	r3, [r1, #0]
    if (PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify(sm, PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, sm + PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES, *mlen, pk,p)) {
 800188a:	9201      	str	r2, [sp, #4]
 800188c:	9a08      	ldr	r2, [sp, #32]
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	f640 1174 	movw	r1, #2420	; 0x974
 8001894:	f604 1274 	addw	r2, r4, #2420	; 0x974
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff ff19 	bl	80016d0 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify>
 800189e:	b960      	cbnz	r0, 80018ba <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open+0x4a>
 80018a0:	f604 1473 	addw	r4, r4, #2419	; 0x973
        goto badsig;
    } else {
        /* All good, copy msg, return 0 */
        for (i = 0; i < *mlen; ++i) {
 80018a4:	4603      	mov	r3, r0
 80018a6:	6832      	ldr	r2, [r6, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d801      	bhi.n	80018b0 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open+0x40>
    for (i = 0; i < smlen; ++i) {
        m[i] = 0;
    }

    return -1;
}
 80018ac:	b003      	add	sp, #12
 80018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m[i] = sm[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES + i];
 80018b0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80018b4:	54fa      	strb	r2, [r7, r3]
        for (i = 0; i < *mlen; ++i) {
 80018b6:	3301      	adds	r3, #1
 80018b8:	e7f5      	b.n	80018a6 <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open+0x36>
    *mlen = (size_t) -1;
 80018ba:	f04f 34ff 	mov.w	r4, #4294967295
 80018be:	6034      	str	r4, [r6, #0]
        m[i] = 0;
 80018c0:	462a      	mov	r2, r5
 80018c2:	2100      	movs	r1, #0
 80018c4:	4638      	mov	r0, r7
 80018c6:	f003 fcf1 	bl	80052ac <memset>
    return -1;
 80018ca:	4620      	mov	r0, r4
 80018cc:	e7ee      	b.n	80018ac <PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open+0x3c>

080018ce <PQCLEAN_DILITHIUM2_CLEAN_pack_pk>:
*              - const uint8_t rho[]: byte array containing rho
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_pack_pk(uint8_t pk[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_PUBLICKEYBYTES],
                                      const uint8_t rho[SEEDBYTES],
                                      const polyveck *t1) {
 80018ce:	b570      	push	{r4, r5, r6, lr}
 80018d0:	4603      	mov	r3, r0
 80018d2:	4615      	mov	r5, r2
 80018d4:	3801      	subs	r0, #1
 80018d6:	1e4a      	subs	r2, r1, #1
 80018d8:	311f      	adds	r1, #31
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
        pk[i] = rho[i];
 80018da:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80018de:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 80018e2:	428a      	cmp	r2, r1
 80018e4:	d1f9      	bne.n	80018da <PQCLEAN_DILITHIUM2_CLEAN_pack_pk+0xc>
 80018e6:	f103 0620 	add.w	r6, r3, #32
 80018ea:	f503 64a4 	add.w	r4, r3, #1312	; 0x520
    }
    pk += SEEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack(pk + i * POLYT1_PACKEDBYTES, &t1->vec[i]);
 80018ee:	4629      	mov	r1, r5
 80018f0:	4630      	mov	r0, r6
    for (i = 0; i < K; ++i) {
 80018f2:	f506 76a0 	add.w	r6, r6, #320	; 0x140
        PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack(pk + i * POLYT1_PACKEDBYTES, &t1->vec[i]);
 80018f6:	f000 fbaa 	bl	800204e <PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack>
    for (i = 0; i < K; ++i) {
 80018fa:	42a6      	cmp	r6, r4
 80018fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001900:	d1f5      	bne.n	80018ee <PQCLEAN_DILITHIUM2_CLEAN_pack_pk+0x20>
    }
}
 8001902:	bd70      	pop	{r4, r5, r6, pc}

08001904 <PQCLEAN_DILITHIUM2_CLEAN_unpack_pk>:
*              - const polyveck *t1: pointer to output vector t1
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_unpack_pk(uint8_t rho[SEEDBYTES],
                                        polyveck *t1,
                                        const uint8_t pk[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_PUBLICKEYBYTES]) {
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	1e53      	subs	r3, r2, #1
 8001908:	460d      	mov	r5, r1
 800190a:	3801      	subs	r0, #1
 800190c:	f102 011f 	add.w	r1, r2, #31
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
        rho[i] = pk[i];
 8001910:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8001914:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 8001918:	428b      	cmp	r3, r1
 800191a:	d1f9      	bne.n	8001910 <PQCLEAN_DILITHIUM2_CLEAN_unpack_pk+0xc>
 800191c:	f102 0620 	add.w	r6, r2, #32
 8001920:	f502 64a4 	add.w	r4, r2, #1312	; 0x520
    }
    pk += SEEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack(&t1->vec[i], pk + i * POLYT1_PACKEDBYTES);
 8001924:	4631      	mov	r1, r6
 8001926:	4628      	mov	r0, r5
    for (i = 0; i < K; ++i) {
 8001928:	f506 76a0 	add.w	r6, r6, #320	; 0x140
        PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack(&t1->vec[i], pk + i * POLYT1_PACKEDBYTES);
 800192c:	f000 fbaf 	bl	800208e <PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack>
    for (i = 0; i < K; ++i) {
 8001930:	42a6      	cmp	r6, r4
 8001932:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001936:	d1f5      	bne.n	8001924 <PQCLEAN_DILITHIUM2_CLEAN_unpack_pk+0x20>
    }
}
 8001938:	bd70      	pop	{r4, r5, r6, pc}

0800193a <PQCLEAN_DILITHIUM2_CLEAN_pack_sk>:
                                      const uint8_t rho[SEEDBYTES],
                                      const uint8_t tr[TRBYTES],
                                      const uint8_t key[SEEDBYTES],
                                      const polyveck *t0,
                                      const polyvecl *s1,
                                      const polyveck *s2) {
 800193a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193c:	4605      	mov	r5, r0
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
 800193e:	1e6c      	subs	r4, r5, #1
 8001940:	1e48      	subs	r0, r1, #1
 8001942:	311f      	adds	r1, #31
        sk[i] = rho[i];
 8001944:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8001948:	f804 6f01 	strb.w	r6, [r4, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 800194c:	4288      	cmp	r0, r1
 800194e:	d1f9      	bne.n	8001944 <PQCLEAN_DILITHIUM2_CLEAN_pack_sk+0xa>
 8001950:	1e59      	subs	r1, r3, #1
 8001952:	f105 001f 	add.w	r0, r5, #31
 8001956:	331f      	adds	r3, #31
    }
    sk += SEEDBYTES;

    for (i = 0; i < SEEDBYTES; ++i) {
        sk[i] = key[i];
 8001958:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800195c:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 8001960:	4299      	cmp	r1, r3
 8001962:	d1f9      	bne.n	8001958 <PQCLEAN_DILITHIUM2_CLEAN_pack_sk+0x1e>
    }
    sk += SEEDBYTES;

    for (i = 0; i < TRBYTES; ++i) {
 8001964:	1e53      	subs	r3, r2, #1
 8001966:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 800196a:	323f      	adds	r2, #63	; 0x3f
        sk[i] = tr[i];
 800196c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001970:	f801 0f01 	strb.w	r0, [r1, #1]!
    for (i = 0; i < TRBYTES; ++i) {
 8001974:	4293      	cmp	r3, r2
 8001976:	d1f9      	bne.n	800196c <PQCLEAN_DILITHIUM2_CLEAN_pack_sk+0x32>
    }
    sk += TRBYTES;

    for (i = 0; i < L; ++i) {
 8001978:	9e07      	ldr	r6, [sp, #28]
 800197a:	f105 0480 	add.w	r4, r5, #128	; 0x80
 800197e:	f505 7700 	add.w	r7, r5, #512	; 0x200
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s1->vec[i]);
 8001982:	4631      	mov	r1, r6
 8001984:	4620      	mov	r0, r4
    for (i = 0; i < L; ++i) {
 8001986:	3460      	adds	r4, #96	; 0x60
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s1->vec[i]);
 8001988:	f000 fad0 	bl	8001f2c <PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack>
    for (i = 0; i < L; ++i) {
 800198c:	42bc      	cmp	r4, r7
 800198e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001992:	d1f6      	bne.n	8001982 <PQCLEAN_DILITHIUM2_CLEAN_pack_sk+0x48>
    }
    sk += L * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
 8001994:	9e08      	ldr	r6, [sp, #32]
 8001996:	f505 7760 	add.w	r7, r5, #896	; 0x380
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s2->vec[i]);
 800199a:	4631      	mov	r1, r6
 800199c:	4620      	mov	r0, r4
    for (i = 0; i < K; ++i) {
 800199e:	3460      	adds	r4, #96	; 0x60
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s2->vec[i]);
 80019a0:	f000 fac4 	bl	8001f2c <PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack>
    for (i = 0; i < K; ++i) {
 80019a4:	42bc      	cmp	r4, r7
 80019a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80019aa:	d1f6      	bne.n	800199a <PQCLEAN_DILITHIUM2_CLEAN_pack_sk+0x60>
    }
    sk += K * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
 80019ac:	9e06      	ldr	r6, [sp, #24]
 80019ae:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
        PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack(sk + i * POLYT0_PACKEDBYTES, &t0->vec[i]);
 80019b2:	4631      	mov	r1, r6
 80019b4:	4620      	mov	r0, r4
    for (i = 0; i < K; ++i) {
 80019b6:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
        PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack(sk + i * POLYT0_PACKEDBYTES, &t0->vec[i]);
 80019ba:	f000 fb8e 	bl	80020da <PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack>
    for (i = 0; i < K; ++i) {
 80019be:	42ac      	cmp	r4, r5
 80019c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80019c4:	d1f5      	bne.n	80019b2 <PQCLEAN_DILITHIUM2_CLEAN_pack_sk+0x78>
    }
}
 80019c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019c8 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk>:
                                        uint8_t tr[TRBYTES],
                                        uint8_t key[SEEDBYTES],
                                        polyveck *t0,
                                        polyvecl *s1,
                                        polyveck *s2,
                                        const uint8_t sk[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_SECRETKEYBYTES]) {
 80019c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019cc:	9d08      	ldr	r5, [sp, #32]
 80019ce:	461e      	mov	r6, r3
 80019d0:	1e6c      	subs	r4, r5, #1
 80019d2:	3801      	subs	r0, #1
 80019d4:	f105 031f 	add.w	r3, r5, #31
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
        rho[i] = sk[i];
 80019d8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80019dc:	f800 7f01 	strb.w	r7, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 80019e0:	429c      	cmp	r4, r3
 80019e2:	d1f9      	bne.n	80019d8 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk+0x10>
 80019e4:	3a01      	subs	r2, #1
 80019e6:	f105 033f 	add.w	r3, r5, #63	; 0x3f
    }
    sk += SEEDBYTES;

    for (i = 0; i < SEEDBYTES; ++i) {
        key[i] = sk[i];
 80019ea:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80019ee:	f802 0f01 	strb.w	r0, [r2, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 80019f2:	429c      	cmp	r4, r3
 80019f4:	d1f9      	bne.n	80019ea <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk+0x22>
    }
    sk += SEEDBYTES;

    for (i = 0; i < TRBYTES; ++i) {
 80019f6:	3901      	subs	r1, #1
 80019f8:	f105 037f 	add.w	r3, r5, #127	; 0x7f
        tr[i] = sk[i];
 80019fc:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8001a00:	f801 2f01 	strb.w	r2, [r1, #1]!
    for (i = 0; i < TRBYTES; ++i) {
 8001a04:	429c      	cmp	r4, r3
 8001a06:	d1f9      	bne.n	80019fc <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk+0x34>
    }
    sk += TRBYTES;

    for (i = 0; i < L; ++i) {
 8001a08:	9f06      	ldr	r7, [sp, #24]
 8001a0a:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8001a0e:	f505 7800 	add.w	r8, r5, #512	; 0x200
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack(&s1->vec[i], sk + i * POLYETA_PACKEDBYTES);
 8001a12:	4621      	mov	r1, r4
 8001a14:	4638      	mov	r0, r7
    for (i = 0; i < L; ++i) {
 8001a16:	3460      	adds	r4, #96	; 0x60
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack(&s1->vec[i], sk + i * POLYETA_PACKEDBYTES);
 8001a18:	f000 faca 	bl	8001fb0 <PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack>
    for (i = 0; i < L; ++i) {
 8001a1c:	4544      	cmp	r4, r8
 8001a1e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a22:	d1f6      	bne.n	8001a12 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk+0x4a>
    }
    sk += L * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
 8001a24:	9f07      	ldr	r7, [sp, #28]
 8001a26:	f505 7860 	add.w	r8, r5, #896	; 0x380
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack(&s2->vec[i], sk + i * POLYETA_PACKEDBYTES);
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	4638      	mov	r0, r7
    for (i = 0; i < K; ++i) {
 8001a2e:	3460      	adds	r4, #96	; 0x60
        PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack(&s2->vec[i], sk + i * POLYETA_PACKEDBYTES);
 8001a30:	f000 fabe 	bl	8001fb0 <PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack>
    for (i = 0; i < K; ++i) {
 8001a34:	4544      	cmp	r4, r8
 8001a36:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001a3a:	d1f6      	bne.n	8001a2a <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk+0x62>
    }
    sk += K * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
 8001a3c:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
        PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack(&t0->vec[i], sk + i * POLYT0_PACKEDBYTES);
 8001a40:	4621      	mov	r1, r4
 8001a42:	4630      	mov	r0, r6
    for (i = 0; i < K; ++i) {
 8001a44:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
        PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack(&t0->vec[i], sk + i * POLYT0_PACKEDBYTES);
 8001a48:	f000 fb95 	bl	8002176 <PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack>
    for (i = 0; i < K; ++i) {
 8001a4c:	42ac      	cmp	r4, r5
 8001a4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a52:	d1f5      	bne.n	8001a40 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sk+0x78>
    }
}
 8001a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a58 <PQCLEAN_DILITHIUM2_CLEAN_pack_sig>:
*              - const polyveck *h: pointer to hint vector h
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_pack_sig(uint8_t sig[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES],
                                       const uint8_t c[CTILDEBYTES],
                                       const polyvecl *z,
                                       const polyveck *h) {
 8001a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5c:	4615      	mov	r5, r2
 8001a5e:	461e      	mov	r6, r3
 8001a60:	4604      	mov	r4, r0
    unsigned int i, j, k;

    for (i = 0; i < CTILDEBYTES; ++i) {
 8001a62:	1e4b      	subs	r3, r1, #1
 8001a64:	1e42      	subs	r2, r0, #1
 8001a66:	311f      	adds	r1, #31
        sig[i] = c[i];
 8001a68:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001a6c:	f802 0f01 	strb.w	r0, [r2, #1]!
    for (i = 0; i < CTILDEBYTES; ++i) {
 8001a70:	428b      	cmp	r3, r1
 8001a72:	d1f9      	bne.n	8001a68 <PQCLEAN_DILITHIUM2_CLEAN_pack_sig+0x10>
 8001a74:	f104 0720 	add.w	r7, r4, #32
 8001a78:	f504 6812 	add.w	r8, r4, #2336	; 0x920
    }
    sig += CTILDEBYTES;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_polyz_pack(sig + i * POLYZ_PACKEDBYTES, &z->vec[i]);
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	4638      	mov	r0, r7
    for (i = 0; i < L; ++i) {
 8001a80:	f507 7710 	add.w	r7, r7, #576	; 0x240
        PQCLEAN_DILITHIUM2_CLEAN_polyz_pack(sig + i * POLYZ_PACKEDBYTES, &z->vec[i]);
 8001a84:	f000 fbf6 	bl	8002274 <PQCLEAN_DILITHIUM2_CLEAN_polyz_pack>
    for (i = 0; i < L; ++i) {
 8001a88:	4547      	cmp	r7, r8
 8001a8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a8e:	d1f5      	bne.n	8001a7c <PQCLEAN_DILITHIUM2_CLEAN_pack_sig+0x24>
    }
    sig += L * POLYZ_PACKEDBYTES;

    /* Encode h */
    for (i = 0; i < OMEGA + K; ++i) {
        sig[i] = 0;
 8001a90:	2100      	movs	r1, #0
 8001a92:	2254      	movs	r2, #84	; 0x54
 8001a94:	4640      	mov	r0, r8
 8001a96:	f003 fc09 	bl	80052ac <memset>
 8001a9a:	f604 106f 	addw	r0, r4, #2415	; 0x96f
 8001a9e:	4633      	mov	r3, r6
 8001aa0:	f604 1473 	addw	r4, r4, #2419	; 0x973
    }

    k = 0;
 8001aa4:	2100      	movs	r1, #0
                                       const polyveck *h) {
 8001aa6:	461d      	mov	r5, r3
    for (i = 0; i < K; ++i) {
        for (j = 0; j < N; ++j) {
 8001aa8:	2200      	movs	r2, #0
            if (h->vec[i].coeffs[j] != 0) {
 8001aaa:	f855 6b04 	ldr.w	r6, [r5], #4
 8001aae:	b116      	cbz	r6, 8001ab6 <PQCLEAN_DILITHIUM2_CLEAN_pack_sig+0x5e>
                sig[k++] = (uint8_t) j;
 8001ab0:	f808 2001 	strb.w	r2, [r8, r1]
 8001ab4:	3101      	adds	r1, #1
        for (j = 0; j < N; ++j) {
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001abc:	d1f5      	bne.n	8001aaa <PQCLEAN_DILITHIUM2_CLEAN_pack_sig+0x52>
            }
        }

        sig[OMEGA + i] = (uint8_t) k;
 8001abe:	f800 1f01 	strb.w	r1, [r0, #1]!
    for (i = 0; i < K; ++i) {
 8001ac2:	42a0      	cmp	r0, r4
 8001ac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ac8:	d1ed      	bne.n	8001aa6 <PQCLEAN_DILITHIUM2_CLEAN_pack_sig+0x4e>
    }
}
 8001aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ace <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig>:
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_unpack_sig(uint8_t c[CTILDEBYTES],
                                        polyvecl *z,
                                        polyveck *h,
                                        const uint8_t sig[PQCLEAN_DILITHIUM2_CLEAN_CRYPTO_BYTES]) {
 8001ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ad2:	461c      	mov	r4, r3
 8001ad4:	4617      	mov	r7, r2
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	3801      	subs	r0, #1
 8001adc:	f104 021f 	add.w	r2, r4, #31
    unsigned int i, j, k;

    for (i = 0; i < CTILDEBYTES; ++i) {
        c[i] = sig[i];
 8001ae0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001ae4:	f800 1f01 	strb.w	r1, [r0, #1]!
    for (i = 0; i < CTILDEBYTES; ++i) {
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d1f9      	bne.n	8001ae0 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x12>
 8001aec:	f104 0620 	add.w	r6, r4, #32
 8001af0:	f504 6812 	add.w	r8, r4, #2336	; 0x920
    }
    sig += CTILDEBYTES;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack(&z->vec[i], sig + i * POLYZ_PACKEDBYTES);
 8001af4:	4631      	mov	r1, r6
 8001af6:	4628      	mov	r0, r5
    for (i = 0; i < L; ++i) {
 8001af8:	f506 7610 	add.w	r6, r6, #576	; 0x240
        PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack(&z->vec[i], sig + i * POLYZ_PACKEDBYTES);
 8001afc:	f000 fbe6 	bl	80022cc <PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack>
    for (i = 0; i < L; ++i) {
 8001b00:	4546      	cmp	r6, r8
 8001b02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b06:	d1f5      	bne.n	8001af4 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x26>
    }
    sig += L * POLYZ_PACKEDBYTES;

    /* Decode h */
    k = 0;
 8001b08:	2500      	movs	r5, #0
 8001b0a:	f604 196f 	addw	r9, r4, #2415	; 0x96f
    for (i = 0; i < K; ++i) {
 8001b0e:	462e      	mov	r6, r5
        for (j = k; j < sig[OMEGA + i]; ++j) {
            /* Coefficients are ordered for strong unforgeability */
            if (j > k && sig[j] <= sig[j - 1]) {
                return 1;
            }
            h->vec[i].coeffs[sig[j]] = 1;
 8001b10:	f04f 0a01 	mov.w	sl, #1
            h->vec[i].coeffs[j] = 0;
 8001b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b18:	2100      	movs	r1, #0
 8001b1a:	eb07 2086 	add.w	r0, r7, r6, lsl #10
 8001b1e:	f003 fbc5 	bl	80052ac <memset>
        if (sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA) {
 8001b22:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8001b26:	42ab      	cmp	r3, r5
 8001b28:	d202      	bcs.n	8001b30 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x62>
            return 1;
 8001b2a:	2001      	movs	r0, #1
            return 1;
        }
    }

    return 0;
}
 8001b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA) {
 8001b30:	2b50      	cmp	r3, #80	; 0x50
 8001b32:	d8fa      	bhi.n	8001b2a <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x5c>
 8001b34:	f605 111f 	addw	r1, r5, #2335	; 0x91f
 8001b38:	4421      	add	r1, r4
 8001b3a:	462a      	mov	r2, r5
            h->vec[i].coeffs[sig[j]] = 1;
 8001b3c:	0230      	lsls	r0, r6, #8
        for (j = k; j < sig[OMEGA + i]; ++j) {
 8001b3e:	f899 3000 	ldrb.w	r3, [r9]
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d804      	bhi.n	8001b50 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x82>
    for (i = 0; i < K; ++i) {
 8001b46:	3601      	adds	r6, #1
 8001b48:	2e04      	cmp	r6, #4
 8001b4a:	d014      	beq.n	8001b76 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0xa8>
        for (j = k; j < sig[OMEGA + i]; ++j) {
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	e7e1      	b.n	8001b14 <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x46>
            if (j > k && sig[j] <= sig[j - 1]) {
 8001b50:	42aa      	cmp	r2, r5
 8001b52:	d904      	bls.n	8001b5e <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x90>
 8001b54:	f891 c000 	ldrb.w	ip, [r1]
 8001b58:	784b      	ldrb	r3, [r1, #1]
 8001b5a:	459c      	cmp	ip, r3
 8001b5c:	d2e5      	bcs.n	8001b2a <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x5c>
            h->vec[i].coeffs[sig[j]] = 1;
 8001b5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001b62:	4403      	add	r3, r0
        for (j = k; j < sig[OMEGA + i]; ++j) {
 8001b64:	3201      	adds	r2, #1
            h->vec[i].coeffs[sig[j]] = 1;
 8001b66:	f847 a023 	str.w	sl, [r7, r3, lsl #2]
        for (j = k; j < sig[OMEGA + i]; ++j) {
 8001b6a:	e7e8      	b.n	8001b3e <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x70>
        if (sig[j]) {
 8001b6c:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001b70:	2a00      	cmp	r2, #0
 8001b72:	d1da      	bne.n	8001b2a <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x5c>
    for (j = k; j < OMEGA; ++j) {
 8001b74:	3301      	adds	r3, #1
 8001b76:	2b4f      	cmp	r3, #79	; 0x4f
 8001b78:	d9f8      	bls.n	8001b6c <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x9e>
    return 0;
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	e7d6      	b.n	8001b2c <PQCLEAN_DILITHIUM2_CLEAN_unpack_sig+0x5e>
 8001b7e:	0000      	movs	r0, r0

08001b80 <rej_uniform>:
* random bytes were given.
**************************************************/
static unsigned int rej_uniform(int32_t *a,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen) {
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
        t  = buf[pos++];
        t |= (uint32_t)buf[pos++] << 8;
        t |= (uint32_t)buf[pos++] << 16;
        t &= 0x7FFFFF;

        if (t < Q) {
 8001b82:	4f0f      	ldr	r7, [pc, #60]	; (8001bc0 <rej_uniform+0x40>)
                                unsigned int buflen) {
 8001b84:	4605      	mov	r5, r0
    while (ctr < len && pos + 3 <= buflen) {
 8001b86:	f1c2 0603 	rsb	r6, r2, #3
    ctr = pos = 0;
 8001b8a:	2000      	movs	r0, #0
    while (ctr < len && pos + 3 <= buflen) {
 8001b8c:	18b4      	adds	r4, r6, r2
 8001b8e:	42a3      	cmp	r3, r4
 8001b90:	d314      	bcc.n	8001bbc <rej_uniform+0x3c>
        t |= (uint32_t)buf[pos++] << 16;
 8001b92:	7894      	ldrb	r4, [r2, #2]
        t |= (uint32_t)buf[pos++] << 8;
 8001b94:	f892 e001 	ldrb.w	lr, [r2, #1]
        t  = buf[pos++];
 8001b98:	f892 c000 	ldrb.w	ip, [r2]
        t |= (uint32_t)buf[pos++] << 16;
 8001b9c:	0424      	lsls	r4, r4, #16
 8001b9e:	ea44 240e 	orr.w	r4, r4, lr, lsl #8
 8001ba2:	ea44 040c 	orr.w	r4, r4, ip
        t &= 0x7FFFFF;
 8001ba6:	f3c4 0416 	ubfx	r4, r4, #0, #23
        if (t < Q) {
 8001baa:	42bc      	cmp	r4, r7
            a[ctr++] = t;
 8001bac:	bf9c      	itt	ls
 8001bae:	f845 4020 	strls.w	r4, [r5, r0, lsl #2]
 8001bb2:	3001      	addls	r0, #1
    while (ctr < len && pos + 3 <= buflen) {
 8001bb4:	4281      	cmp	r1, r0
 8001bb6:	f102 0203 	add.w	r2, r2, #3
 8001bba:	d8e7      	bhi.n	8001b8c <rej_uniform+0xc>
        }
    }

    DBENCH_STOP(*tsample);
    return ctr;
}
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	007fe000 	.word	0x007fe000

08001bc4 <rej_eta.constprop.0>:
*              - unsigned int buflen: length of array of random bytes
*
* Returns number of sampled coefficients. Can be smaller than len if not enough
* random bytes were given.
**************************************************/
static unsigned int rej_eta(int32_t *a,
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (t0 < 15) {
            t0 = t0 - (205 * t0 >> 10) * 5;
            a[ctr++] = 2 - t0;
        }
        if (t1 < 15 && ctr < len) {
            t1 = t1 - (205 * t1 >> 10) * 5;
 8001bc6:	f04f 0ccd 	mov.w	ip, #205	; 0xcd
static unsigned int rej_eta(int32_t *a,
 8001bca:	4606      	mov	r6, r0
    while (ctr < len && pos < buflen) {
 8001bcc:	1e57      	subs	r7, r2, #1
 8001bce:	f102 0487 	add.w	r4, r2, #135	; 0x87
    ctr = pos = 0;
 8001bd2:	2000      	movs	r0, #0
        t0 = buf[pos] & 0x0F;
 8001bd4:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8001bd8:	f003 0e0f 	and.w	lr, r3, #15
        if (t0 < 15) {
 8001bdc:	f1be 0f0f 	cmp.w	lr, #15
        t1 = buf[pos++] >> 4;
 8001be0:	ea4f 1313 	mov.w	r3, r3, lsr #4
        if (t0 < 15) {
 8001be4:	d023      	beq.n	8001c2e <rej_eta.constprop.0+0x6a>
            t0 = t0 - (205 * t0 >> 10) * 5;
 8001be6:	fb1e f20c 	smulbb	r2, lr, ip
 8001bea:	0a92      	lsrs	r2, r2, #10
 8001bec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
            a[ctr++] = 2 - t0;
 8001bf0:	f1ce 0e02 	rsb	lr, lr, #2
 8001bf4:	4472      	add	r2, lr
        if (t1 < 15 && ctr < len) {
 8001bf6:	2b0f      	cmp	r3, #15
            a[ctr++] = 2 - t0;
 8001bf8:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8001bfc:	f100 0501 	add.w	r5, r0, #1
        if (t1 < 15 && ctr < len) {
 8001c00:	d011      	beq.n	8001c26 <rej_eta.constprop.0+0x62>
 8001c02:	428d      	cmp	r5, r1
 8001c04:	d211      	bcs.n	8001c2a <rej_eta.constprop.0+0x66>
            t1 = t1 - (205 * t1 >> 10) * 5;
 8001c06:	fb13 f20c 	smulbb	r2, r3, ip
 8001c0a:	0a92      	lsrs	r2, r2, #10
 8001c0c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
            a[ctr++] = 2 - t1;
 8001c10:	f1c3 0302 	rsb	r3, r3, #2
 8001c14:	441a      	add	r2, r3
 8001c16:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
 8001c1a:	1c68      	adds	r0, r5, #1
    while (ctr < len && pos < buflen) {
 8001c1c:	4281      	cmp	r1, r0
 8001c1e:	d901      	bls.n	8001c24 <rej_eta.constprop.0+0x60>
 8001c20:	42a7      	cmp	r7, r4
 8001c22:	d1d7      	bne.n	8001bd4 <rej_eta.constprop.0+0x10>
        }
    }

    DBENCH_STOP(*tsample);
    return ctr;
}
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
            a[ctr++] = 2 - t0;
 8001c26:	4628      	mov	r0, r5
 8001c28:	e7f8      	b.n	8001c1c <rej_eta.constprop.0+0x58>
 8001c2a:	4628      	mov	r0, r5
    return ctr;
 8001c2c:	e7fa      	b.n	8001c24 <rej_eta.constprop.0+0x60>
        if (t1 < 15 && ctr < len) {
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	d0f4      	beq.n	8001c1c <rej_eta.constprop.0+0x58>
 8001c32:	4605      	mov	r5, r0
 8001c34:	e7e7      	b.n	8001c06 <rej_eta.constprop.0+0x42>

08001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_reduce(poly *a) {
 8001c36:	b538      	push	{r3, r4, r5, lr}
 8001c38:	1f05      	subs	r5, r0, #4
 8001c3a:	f500 747f 	add.w	r4, r0, #1020	; 0x3fc
        a->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_reduce32(a->coeffs[i]);
 8001c3e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8001c42:	f001 ff9b 	bl	8003b7c <PQCLEAN_DILITHIUM2_CLEAN_reduce32>
    for (i = 0; i < N; ++i) {
 8001c46:	42a5      	cmp	r5, r4
        a->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_reduce32(a->coeffs[i]);
 8001c48:	6028      	str	r0, [r5, #0]
    for (i = 0; i < N; ++i) {
 8001c4a:	d1f8      	bne.n	8001c3e <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce+0x8>
}
 8001c4c:	bd38      	pop	{r3, r4, r5, pc}

08001c4e <PQCLEAN_DILITHIUM2_CLEAN_poly_caddq>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_caddq(poly *a) {
 8001c4e:	b538      	push	{r3, r4, r5, lr}
 8001c50:	1f05      	subs	r5, r0, #4
 8001c52:	f500 747f 	add.w	r4, r0, #1020	; 0x3fc
        a->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_caddq(a->coeffs[i]);
 8001c56:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8001c5a:	f001 ff99 	bl	8003b90 <PQCLEAN_DILITHIUM2_CLEAN_caddq>
    for (i = 0; i < N; ++i) {
 8001c5e:	42a5      	cmp	r5, r4
        a->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_caddq(a->coeffs[i]);
 8001c60:	6028      	str	r0, [r5, #0]
    for (i = 0; i < N; ++i) {
 8001c62:	d1f8      	bne.n	8001c56 <PQCLEAN_DILITHIUM2_CLEAN_poly_caddq+0x8>
}
 8001c64:	bd38      	pop	{r3, r4, r5, pc}

08001c66 <PQCLEAN_DILITHIUM2_CLEAN_poly_add>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_add(poly *c, const poly *a, const poly *b)  {
 8001c66:	b530      	push	{r4, r5, lr}
    for (i = 0; i < N; ++i) {
 8001c68:	2300      	movs	r3, #0
        c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8001c6a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001c6e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001c72:	442c      	add	r4, r5
 8001c74:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i = 0; i < N; ++i) {
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7e:	d1f4      	bne.n	8001c6a <PQCLEAN_DILITHIUM2_CLEAN_poly_add+0x4>
}
 8001c80:	bd30      	pop	{r4, r5, pc}

08001c82 <PQCLEAN_DILITHIUM2_CLEAN_poly_sub>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_sub(poly *c, const poly *a, const poly *b) {
 8001c82:	b530      	push	{r4, r5, lr}
    for (i = 0; i < N; ++i) {
 8001c84:	2300      	movs	r3, #0
        c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8001c86:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001c8a:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8001c8e:	1b64      	subs	r4, r4, r5
 8001c90:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i = 0; i < N; ++i) {
 8001c94:	3301      	adds	r3, #1
 8001c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c9a:	d1f4      	bne.n	8001c86 <PQCLEAN_DILITHIUM2_CLEAN_poly_sub+0x4>
}
 8001c9c:	bd30      	pop	{r4, r5, pc}

08001c9e <PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl>:
    for (i = 0; i < N; ++i) {
 8001c9e:	1f03      	subs	r3, r0, #4
 8001ca0:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
        a->coeffs[i] <<= D;
 8001ca4:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8001ca8:	0352      	lsls	r2, r2, #13
    for (i = 0; i < N; ++i) {
 8001caa:	4283      	cmp	r3, r0
        a->coeffs[i] <<= D;
 8001cac:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N; ++i) {
 8001cae:	d1f9      	bne.n	8001ca4 <PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl+0x6>
}
 8001cb0:	4770      	bx	lr

08001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>:
    PQCLEAN_DILITHIUM2_CLEAN_ntt(a->coeffs);
 8001cb2:	f001 bf75 	b.w	8003ba0 <PQCLEAN_DILITHIUM2_CLEAN_ntt>

08001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>:
    PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont(a->coeffs);
 8001cb6:	f001 bfad 	b.w	8003c14 <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont>

08001cba <PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 8001cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbc:	4605      	mov	r5, r0
 8001cbe:	460f      	mov	r7, r1
 8001cc0:	4616      	mov	r6, r2
    for (i = 0; i < N; ++i) {
 8001cc2:	2400      	movs	r4, #0
        c->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 8001cc4:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001cc8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ccc:	fb81 0100 	smull	r0, r1, r1, r0
 8001cd0:	f001 ff46 	bl	8003b60 <PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce>
 8001cd4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < N; ++i) {
 8001cd8:	3401      	adds	r4, #1
 8001cda:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001cde:	d1f1      	bne.n	8001cc4 <PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery+0xa>
}
 8001ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ce2 <PQCLEAN_DILITHIUM2_CLEAN_poly_power2round>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_power2round(poly *a1, poly *a0, const poly *a) {
 8001ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	460e      	mov	r6, r1
 8001ce8:	4617      	mov	r7, r2
 8001cea:	2400      	movs	r4, #0
        a1->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_power2round(&a0->coeffs[i], a->coeffs[i]);
 8001cec:	5939      	ldr	r1, [r7, r4]
 8001cee:	1930      	adds	r0, r6, r4
 8001cf0:	f000 fd36 	bl	8002760 <PQCLEAN_DILITHIUM2_CLEAN_power2round>
 8001cf4:	5128      	str	r0, [r5, r4]
    for (i = 0; i < N; ++i) {
 8001cf6:	3404      	adds	r4, #4
 8001cf8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001cfc:	d1f6      	bne.n	8001cec <PQCLEAN_DILITHIUM2_CLEAN_poly_power2round+0xa>
}
 8001cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d00 <PQCLEAN_DILITHIUM2_CLEAN_poly_decompose>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_decompose(poly *a1, poly *a0, const poly *a) {
 8001d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d02:	4605      	mov	r5, r0
 8001d04:	460e      	mov	r6, r1
 8001d06:	4617      	mov	r7, r2
 8001d08:	2400      	movs	r4, #0
        a1->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_decompose(&a0->coeffs[i], a->coeffs[i]);
 8001d0a:	5939      	ldr	r1, [r7, r4]
 8001d0c:	1930      	adds	r0, r6, r4
 8001d0e:	f000 fd31 	bl	8002774 <PQCLEAN_DILITHIUM2_CLEAN_decompose>
 8001d12:	5128      	str	r0, [r5, r4]
    for (i = 0; i < N; ++i) {
 8001d14:	3404      	adds	r4, #4
 8001d16:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001d1a:	d1f6      	bne.n	8001d0a <PQCLEAN_DILITHIUM2_CLEAN_poly_decompose+0xa>
}
 8001d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d1e <PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint>:
unsigned int PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8001d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned int i, s = 0;
 8001d22:	2500      	movs	r5, #0
unsigned int PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8001d24:	4606      	mov	r6, r0
 8001d26:	460f      	mov	r7, r1
 8001d28:	4690      	mov	r8, r2
    for (i = 0; i < N; ++i) {
 8001d2a:	462c      	mov	r4, r5
        h->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_make_hint(a0->coeffs[i], a1->coeffs[i]);
 8001d2c:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8001d30:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8001d34:	f000 fd40 	bl	80027b8 <PQCLEAN_DILITHIUM2_CLEAN_make_hint>
 8001d38:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    for (i = 0; i < N; ++i) {
 8001d3c:	3401      	adds	r4, #1
 8001d3e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
        s += h->coeffs[i];
 8001d42:	4405      	add	r5, r0
    for (i = 0; i < N; ++i) {
 8001d44:	d1f2      	bne.n	8001d2c <PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint+0xe>
}
 8001d46:	4628      	mov	r0, r5
 8001d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d4c <PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint>:
void PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint(poly *b, const poly *a, const poly *h) {
 8001d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4e:	4605      	mov	r5, r0
 8001d50:	460e      	mov	r6, r1
 8001d52:	4617      	mov	r7, r2
    for (i = 0; i < N; ++i) {
 8001d54:	2400      	movs	r4, #0
        b->coeffs[i] = PQCLEAN_DILITHIUM2_CLEAN_use_hint(a->coeffs[i], h->coeffs[i]);
 8001d56:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8001d5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001d5e:	f000 fd3b 	bl	80027d8 <PQCLEAN_DILITHIUM2_CLEAN_use_hint>
 8001d62:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < N; ++i) {
 8001d66:	3401      	adds	r4, #1
 8001d68:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001d6c:	d1f3      	bne.n	8001d56 <PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint+0xa>
}
 8001d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d70 <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm>:
    if (B > (Q - 1) / 8) {
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm+0x2c>)
 8001d72:	4299      	cmp	r1, r3
int PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm(const poly *a, int32_t B) {
 8001d74:	b510      	push	{r4, lr}
    if (B > (Q - 1) / 8) {
 8001d76:	dc0e      	bgt.n	8001d96 <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm+0x26>
 8001d78:	1f02      	subs	r2, r0, #4
 8001d7a:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
        t = a->coeffs[i] >> 31;
 8001d7e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8001d82:	17dc      	asrs	r4, r3, #31
        t = a->coeffs[i] - (t & 2 * a->coeffs[i]);
 8001d84:	ea04 0443 	and.w	r4, r4, r3, lsl #1
 8001d88:	1b1b      	subs	r3, r3, r4
        if (t >= B) {
 8001d8a:	4299      	cmp	r1, r3
 8001d8c:	dd03      	ble.n	8001d96 <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm+0x26>
    for (i = 0; i < N; ++i) {
 8001d8e:	4282      	cmp	r2, r0
 8001d90:	d1f5      	bne.n	8001d7e <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm+0xe>
    return 0;
 8001d92:	2000      	movs	r0, #0
}
 8001d94:	bd10      	pop	{r4, pc}
        return 1;
 8001d96:	2001      	movs	r0, #1
 8001d98:	e7fc      	b.n	8001d94 <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm+0x24>
 8001d9a:	bf00      	nop
 8001d9c:	000ffc00 	.word	0x000ffc00

08001da0 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform>:
        uint16_t nonce) {
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
 8001da6:	4606      	mov	r6, r0
    stream128_init(&state, seed, nonce);
 8001da8:	4668      	mov	r0, sp
 8001daa:	f000 fd2b 	bl	8002804 <PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake128_stream_init>
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8001dae:	466a      	mov	r2, sp
 8001db0:	f44f 7152 	mov.w	r1, #840	; 0x348
 8001db4:	a801      	add	r0, sp, #4
 8001db6:	f001 fe6d 	bl	8003a94 <shake128_inc_squeeze>
    ctr = rej_uniform(a->coeffs, N, buf, buflen);
 8001dba:	f44f 7352 	mov.w	r3, #840	; 0x348
 8001dbe:	aa01      	add	r2, sp, #4
 8001dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f7ff fedb 	bl	8001b80 <rej_uniform>
        off = buflen % 3;
 8001dca:	2703      	movs	r7, #3
    ctr = rej_uniform(a->coeffs, N, buf, buflen);
 8001dcc:	4604      	mov	r4, r0
    while (ctr < N) {
 8001dce:	2cff      	cmp	r4, #255	; 0xff
 8001dd0:	d905      	bls.n	8001dde <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform+0x3e>
    stream128_release(&state);
 8001dd2:	4668      	mov	r0, sp
 8001dd4:	f001 fe62 	bl	8003a9c <shake128_inc_ctx_release>
}
 8001dd8:	f50d 7d55 	add.w	sp, sp, #852	; 0x354
 8001ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        off = buflen % 3;
 8001dde:	fbb3 f2f7 	udiv	r2, r3, r7
 8001de2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001de6:	1a98      	subs	r0, r3, r2
        for (i = 0; i < off; ++i) {
 8001de8:	a901      	add	r1, sp, #4
 8001dea:	2500      	movs	r5, #0
            buf[i] = buf[buflen - off + i];
 8001dec:	1ad2      	subs	r2, r2, r3
        for (i = 0; i < off; ++i) {
 8001dee:	4285      	cmp	r5, r0
 8001df0:	d110      	bne.n	8001e14 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform+0x74>
        stream128_squeezeblocks(buf + off, 1, &state);
 8001df2:	ab01      	add	r3, sp, #4
 8001df4:	1958      	adds	r0, r3, r5
 8001df6:	466a      	mov	r2, sp
 8001df8:	21a8      	movs	r1, #168	; 0xa8
 8001dfa:	f001 fe4b 	bl	8003a94 <shake128_inc_squeeze>
        ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 8001dfe:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 8001e02:	eb06 0084 	add.w	r0, r6, r4, lsl #2
        buflen = STREAM128_BLOCKBYTES + off;
 8001e06:	f105 03a8 	add.w	r3, r5, #168	; 0xa8
        ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 8001e0a:	aa01      	add	r2, sp, #4
 8001e0c:	f7ff feb8 	bl	8001b80 <rej_uniform>
 8001e10:	4404      	add	r4, r0
 8001e12:	e7dc      	b.n	8001dce <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform+0x2e>
            buf[i] = buf[buflen - off + i];
 8001e14:	eb03 0c01 	add.w	ip, r3, r1
        for (i = 0; i < off; ++i) {
 8001e18:	3501      	adds	r5, #1
            buf[i] = buf[buflen - off + i];
 8001e1a:	f81c c002 	ldrb.w	ip, [ip, r2]
 8001e1e:	f801 cb01 	strb.w	ip, [r1], #1
        for (i = 0; i < off; ++i) {
 8001e22:	e7e4      	b.n	8001dee <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform+0x4e>

08001e24 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta>:
*              - uint16_t nonce: 2-byte nonce
**************************************************/
#define POLY_UNIFORM_ETA_NBLOCKS ((136 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
void PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta(poly *a,
        const uint8_t seed[CRHBYTES],
        uint16_t nonce) {
 8001e24:	b530      	push	{r4, r5, lr}
 8001e26:	b0a5      	sub	sp, #148	; 0x94
 8001e28:	4605      	mov	r5, r0
    unsigned int ctr;
    unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
    uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
    stream256_state state;

    stream256_init(&state, seed, nonce);
 8001e2a:	a801      	add	r0, sp, #4
 8001e2c:	f000 fd03 	bl	8002836 <PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake256_stream_init>
    stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8001e30:	aa01      	add	r2, sp, #4
 8001e32:	2188      	movs	r1, #136	; 0x88
 8001e34:	a802      	add	r0, sp, #8
 8001e36:	f001 fe4d 	bl	8003ad4 <shake256_inc_squeeze>

    ctr = rej_eta(a->coeffs, N, buf, buflen);
 8001e3a:	aa02      	add	r2, sp, #8
 8001e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e40:	4628      	mov	r0, r5
 8001e42:	f7ff febf 	bl	8001bc4 <rej_eta.constprop.0>
 8001e46:	4604      	mov	r4, r0

    while (ctr < N) {
 8001e48:	2cff      	cmp	r4, #255	; 0xff
 8001e4a:	d904      	bls.n	8001e56 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta+0x32>
        stream256_squeezeblocks(buf, 1, &state);
        ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    }
    stream256_release(&state);
 8001e4c:	a801      	add	r0, sp, #4
 8001e4e:	f001 fe45 	bl	8003adc <shake256_inc_ctx_release>
}
 8001e52:	b025      	add	sp, #148	; 0x94
 8001e54:	bd30      	pop	{r4, r5, pc}
        stream256_squeezeblocks(buf, 1, &state);
 8001e56:	aa01      	add	r2, sp, #4
 8001e58:	2188      	movs	r1, #136	; 0x88
 8001e5a:	a802      	add	r0, sp, #8
 8001e5c:	f001 fe3a 	bl	8003ad4 <shake256_inc_squeeze>
        ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 8001e60:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 8001e64:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8001e68:	aa02      	add	r2, sp, #8
 8001e6a:	f7ff feab 	bl	8001bc4 <rej_eta.constprop.0>
 8001e6e:	4404      	add	r4, r0
 8001e70:	e7ea      	b.n	8001e48 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta+0x24>

08001e72 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8001e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e74:	b0a5      	sub	sp, #148	; 0x94
 8001e76:	460c      	mov	r4, r1
 8001e78:	4605      	mov	r5, r0
    unsigned int i, b, pos;
    uint64_t signs;
    uint8_t buf[SHAKE256_RATE];
    shake256incctx state;

    shake256_inc_init(&state);
 8001e7a:	a801      	add	r0, sp, #4
 8001e7c:	f001 fe11 	bl	8003aa2 <shake256_inc_init>
    shake256_inc_absorb(&state, seed, SEEDBYTES);
 8001e80:	4621      	mov	r1, r4
 8001e82:	2220      	movs	r2, #32
 8001e84:	a801      	add	r0, sp, #4
 8001e86:	f001 fe1a 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8001e8a:	a801      	add	r0, sp, #4
 8001e8c:	f001 fe1d 	bl	8003aca <shake256_inc_finalize>
    shake256_inc_squeeze(buf, sizeof buf, &state);
 8001e90:	aa01      	add	r2, sp, #4
 8001e92:	2188      	movs	r1, #136	; 0x88
 8001e94:	a802      	add	r0, sp, #8
 8001e96:	f001 fe1d 	bl	8003ad4 <shake256_inc_squeeze>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	ae02      	add	r6, sp, #8

    signs = 0;
 8001e9e:	461c      	mov	r4, r3
 8001ea0:	461f      	mov	r7, r3
    for (i = 0; i < 8; ++i) {
        signs |= (uint64_t)buf[i] << 8 * i;
 8001ea2:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001ea6:	f1a3 0220 	sub.w	r2, r3, #32
 8001eaa:	f1c3 0020 	rsb	r0, r3, #32
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	fa21 f000 	lsr.w	r0, r1, r0
 8001eb6:	4099      	lsls	r1, r3
    for (i = 0; i < 8; ++i) {
 8001eb8:	3308      	adds	r3, #8
        signs |= (uint64_t)buf[i] << 8 * i;
 8001eba:	4302      	orrs	r2, r0
    for (i = 0; i < 8; ++i) {
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
        signs |= (uint64_t)buf[i] << 8 * i;
 8001ebe:	ea44 0401 	orr.w	r4, r4, r1
 8001ec2:	ea47 0702 	orr.w	r7, r7, r2
    for (i = 0; i < 8; ++i) {
 8001ec6:	d1ec      	bne.n	8001ea2 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge+0x30>
    }
    pos = 8;

    for (i = 0; i < N; ++i) {
        c->coeffs[i] = 0;
 8001ec8:	2100      	movs	r1, #0
 8001eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f003 f9ec 	bl	80052ac <memset>
    }
    for (i = N - TAU; i < N; ++i) {
 8001ed4:	26d9      	movs	r6, #217	; 0xd9
    pos = 8;
 8001ed6:	2108      	movs	r1, #8
        do {
            if (pos >= SHAKE256_RATE) {
 8001ed8:	2987      	cmp	r1, #135	; 0x87
 8001eda:	d925      	bls.n	8001f28 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge+0xb6>
                shake256_inc_squeeze(buf, sizeof buf, &state);
 8001edc:	aa01      	add	r2, sp, #4
 8001ede:	2188      	movs	r1, #136	; 0x88
 8001ee0:	a802      	add	r0, sp, #8
 8001ee2:	f001 fdf7 	bl	8003ad4 <shake256_inc_squeeze>
                pos = 0;
 8001ee6:	2300      	movs	r3, #0
            }

            b = buf[pos++];
 8001ee8:	aa24      	add	r2, sp, #144	; 0x90
 8001eea:	1c59      	adds	r1, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	f813 2c88 	ldrb.w	r2, [r3, #-136]
        } while (b > i);
 8001ef2:	42b2      	cmp	r2, r6
 8001ef4:	d8f0      	bhi.n	8001ed8 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge+0x66>

        c->coeffs[i] = c->coeffs[b];
 8001ef6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8001efa:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
        c->coeffs[b] = 1 - 2 * (signs & 1);
 8001efe:	f004 0301 	and.w	r3, r4, #1
 8001f02:	005b      	lsls	r3, r3, #1
    for (i = N - TAU; i < N; ++i) {
 8001f04:	3601      	adds	r6, #1
        c->coeffs[b] = 1 - 2 * (signs & 1);
 8001f06:	f1c3 0301 	rsb	r3, r3, #1
        signs >>= 1;
 8001f0a:	0864      	lsrs	r4, r4, #1
    for (i = N - TAU; i < N; ++i) {
 8001f0c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
        signs >>= 1;
 8001f10:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
        c->coeffs[b] = 1 - 2 * (signs & 1);
 8001f14:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
        signs >>= 1;
 8001f18:	ea4f 0757 	mov.w	r7, r7, lsr #1
    for (i = N - TAU; i < N; ++i) {
 8001f1c:	d1dc      	bne.n	8001ed8 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge+0x66>
    }
    shake256_inc_ctx_release(&state);
 8001f1e:	a801      	add	r0, sp, #4
 8001f20:	f001 fddc 	bl	8003adc <shake256_inc_ctx_release>
}
 8001f24:	b025      	add	sp, #148	; 0x94
 8001f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e7dd      	b.n	8001ee8 <PQCLEAN_DILITHIUM2_CLEAN_poly_challenge+0x76>

08001f2c <PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack(uint8_t *r, const poly *a) {
 8001f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f30:	f501 6580 	add.w	r5, r1, #1024	; 0x400
    DBENCH_START();

    for (i = 0; i < N / 8; ++i) {
        t[0] = (uint8_t) (ETA - a->coeffs[8 * i + 0]);
        t[1] = (uint8_t) (ETA - a->coeffs[8 * i + 1]);
        t[2] = (uint8_t) (ETA - a->coeffs[8 * i + 2]);
 8001f34:	688b      	ldr	r3, [r1, #8]
        t[3] = (uint8_t) (ETA - a->coeffs[8 * i + 3]);
        t[4] = (uint8_t) (ETA - a->coeffs[8 * i + 4]);
        t[5] = (uint8_t) (ETA - a->coeffs[8 * i + 5]);
 8001f36:	694c      	ldr	r4, [r1, #20]
        t[1] = (uint8_t) (ETA - a->coeffs[8 * i + 1]);
 8001f38:	684f      	ldr	r7, [r1, #4]
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
        t[7] = (uint8_t) (ETA - a->coeffs[8 * i + 7]);
 8001f3a:	69ca      	ldr	r2, [r1, #28]
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
 8001f3c:	698e      	ldr	r6, [r1, #24]
        t[2] = (uint8_t) (ETA - a->coeffs[8 * i + 2]);
 8001f3e:	f1c3 0302 	rsb	r3, r3, #2
 8001f42:	fa5f fc83 	uxtb.w	ip, r3
        t[3] = (uint8_t) (ETA - a->coeffs[8 * i + 3]);
 8001f46:	68cb      	ldr	r3, [r1, #12]
 8001f48:	f1c3 0302 	rsb	r3, r3, #2
 8001f4c:	fa5f fe83 	uxtb.w	lr, r3
        t[4] = (uint8_t) (ETA - a->coeffs[8 * i + 4]);
 8001f50:	690b      	ldr	r3, [r1, #16]
 8001f52:	f1c3 0302 	rsb	r3, r3, #2
 8001f56:	b2db      	uxtb	r3, r3

        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8001f58:	011b      	lsls	r3, r3, #4
        t[1] = (uint8_t) (ETA - a->coeffs[8 * i + 1]);
 8001f5a:	f1c7 0702 	rsb	r7, r7, #2
        t[5] = (uint8_t) (ETA - a->coeffs[8 * i + 5]);
 8001f5e:	f1c4 0402 	rsb	r4, r4, #2
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8001f62:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001f66:	fa5f f887 	uxtb.w	r8, r7
        t[5] = (uint8_t) (ETA - a->coeffs[8 * i + 5]);
 8001f6a:	b2e4      	uxtb	r4, r4
        t[7] = (uint8_t) (ETA - a->coeffs[8 * i + 7]);
 8001f6c:	f1c2 0202 	rsb	r2, r2, #2
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001f70:	ea4f 178c 	mov.w	r7, ip, lsl #6
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8001f74:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001f78:	ea47 07c8 	orr.w	r7, r7, r8, lsl #3
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8001f7c:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
        t[0] = (uint8_t) (ETA - a->coeffs[8 * i + 0]);
 8001f80:	f851 8b20 	ldr.w	r8, [r1], #32
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8001f84:	7043      	strb	r3, [r0, #1]
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
 8001f86:	f1c6 0602 	rsb	r6, r6, #2
        t[7] = (uint8_t) (ETA - a->coeffs[8 * i + 7]);
 8001f8a:	b2d2      	uxtb	r2, r2
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
 8001f8c:	b2f6      	uxtb	r6, r6
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8001f8e:	0153      	lsls	r3, r2, #5
        t[0] = (uint8_t) (ETA - a->coeffs[8 * i + 0]);
 8001f90:	f1c8 0802 	rsb	r8, r8, #2
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8001f94:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001f98:	ea47 0708 	orr.w	r7, r7, r8
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8001f9c:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (i = 0; i < N / 8; ++i) {
 8001fa0:	428d      	cmp	r5, r1
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001fa2:	7007      	strb	r7, [r0, #0]
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8001fa4:	7083      	strb	r3, [r0, #2]
    for (i = 0; i < N / 8; ++i) {
 8001fa6:	f100 0003 	add.w	r0, r0, #3
 8001faa:	d1c3      	bne.n	8001f34 <PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8001fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fb0 <PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack>:
* Description: Unpack polynomial with coefficients in [-ETA,ETA].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack(poly *r, const uint8_t *a) {
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb4:	f500 6580 	add.w	r5, r0, #1024	; 0x400
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 8; ++i) {
        r->coeffs[8 * i + 0] =  (a[3 * i + 0] >> 0) & 7;
 8001fb8:	780f      	ldrb	r7, [r1, #0]
 8001fba:	f007 0707 	and.w	r7, r7, #7
 8001fbe:	6007      	str	r7, [r0, #0]
        r->coeffs[8 * i + 1] =  (a[3 * i + 0] >> 3) & 7;
 8001fc0:	780e      	ldrb	r6, [r1, #0]
 8001fc2:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 8001fc6:	6046      	str	r6, [r0, #4]
        r->coeffs[8 * i + 2] = ((a[3 * i + 0] >> 6) | (a[3 * i + 1] << 2)) & 7;
 8001fc8:	784b      	ldrb	r3, [r1, #1]
 8001fca:	780a      	ldrb	r2, [r1, #0]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 8001fd2:	f003 0207 	and.w	r2, r3, #7
 8001fd6:	6082      	str	r2, [r0, #8]
        r->coeffs[8 * i + 3] =  (a[3 * i + 1] >> 1) & 7;
 8001fd8:	f891 e001 	ldrb.w	lr, [r1, #1]
 8001fdc:	f3ce 0e42 	ubfx	lr, lr, #1, #3
 8001fe0:	f8c0 e00c 	str.w	lr, [r0, #12]
        r->coeffs[8 * i + 4] =  (a[3 * i + 1] >> 4) & 7;
 8001fe4:	f891 c001 	ldrb.w	ip, [r1, #1]
 8001fe8:	f3cc 1c02 	ubfx	ip, ip, #4, #3
 8001fec:	f8c0 c010 	str.w	ip, [r0, #16]
        r->coeffs[8 * i + 5] = ((a[3 * i + 1] >> 7) | (a[3 * i + 2] << 1)) & 7;
 8001ff0:	788b      	ldrb	r3, [r1, #2]
 8001ff2:	784c      	ldrb	r4, [r1, #1]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	ea43 13d4 	orr.w	r3, r3, r4, lsr #7
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	6143      	str	r3, [r0, #20]
        r->coeffs[8 * i + 6] =  (a[3 * i + 2] >> 2) & 7;
 8002000:	788c      	ldrb	r4, [r1, #2]
 8002002:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8002006:	6184      	str	r4, [r0, #24]
        r->coeffs[8 * i + 7] =  (a[3 * i + 2] >> 5) & 7;
 8002008:	f891 8002 	ldrb.w	r8, [r1, #2]

        r->coeffs[8 * i + 0] = ETA - r->coeffs[8 * i + 0];
        r->coeffs[8 * i + 1] = ETA - r->coeffs[8 * i + 1];
        r->coeffs[8 * i + 2] = ETA - r->coeffs[8 * i + 2];
 800200c:	f1c2 0202 	rsb	r2, r2, #2
 8002010:	6082      	str	r2, [r0, #8]
        r->coeffs[8 * i + 3] = ETA - r->coeffs[8 * i + 3];
        r->coeffs[8 * i + 4] = ETA - r->coeffs[8 * i + 4];
        r->coeffs[8 * i + 5] = ETA - r->coeffs[8 * i + 5];
 8002012:	f1c3 0302 	rsb	r3, r3, #2
        r->coeffs[8 * i + 3] = ETA - r->coeffs[8 * i + 3];
 8002016:	f1ce 0202 	rsb	r2, lr, #2
        r->coeffs[8 * i + 7] =  (a[3 * i + 2] >> 5) & 7;
 800201a:	ea4f 1858 	mov.w	r8, r8, lsr #5
        r->coeffs[8 * i + 3] = ETA - r->coeffs[8 * i + 3];
 800201e:	60c2      	str	r2, [r0, #12]
        r->coeffs[8 * i + 5] = ETA - r->coeffs[8 * i + 5];
 8002020:	6143      	str	r3, [r0, #20]
        r->coeffs[8 * i + 0] = ETA - r->coeffs[8 * i + 0];
 8002022:	f1c7 0702 	rsb	r7, r7, #2
        r->coeffs[8 * i + 1] = ETA - r->coeffs[8 * i + 1];
 8002026:	f1c6 0602 	rsb	r6, r6, #2
        r->coeffs[8 * i + 4] = ETA - r->coeffs[8 * i + 4];
 800202a:	f1cc 0202 	rsb	r2, ip, #2
        r->coeffs[8 * i + 6] = ETA - r->coeffs[8 * i + 6];
 800202e:	f1c4 0402 	rsb	r4, r4, #2
        r->coeffs[8 * i + 7] = ETA - r->coeffs[8 * i + 7];
 8002032:	f1c8 0302 	rsb	r3, r8, #2
        r->coeffs[8 * i + 0] = ETA - r->coeffs[8 * i + 0];
 8002036:	6007      	str	r7, [r0, #0]
        r->coeffs[8 * i + 1] = ETA - r->coeffs[8 * i + 1];
 8002038:	6046      	str	r6, [r0, #4]
        r->coeffs[8 * i + 4] = ETA - r->coeffs[8 * i + 4];
 800203a:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 6] = ETA - r->coeffs[8 * i + 6];
 800203c:	6184      	str	r4, [r0, #24]
        r->coeffs[8 * i + 7] = ETA - r->coeffs[8 * i + 7];
 800203e:	61c3      	str	r3, [r0, #28]
    for (i = 0; i < N / 8; ++i) {
 8002040:	3020      	adds	r0, #32
 8002042:	42a8      	cmp	r0, r5
 8002044:	f101 0103 	add.w	r1, r1, #3
 8002048:	d1b6      	bne.n	8001fb8 <PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 800204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800204e <PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack(uint8_t *r, const poly *a) {
 800204e:	b510      	push	{r4, lr}
 8002050:	f501 6280 	add.w	r2, r1, #1024	; 0x400
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        r[5 * i + 0] = (uint8_t) (a->coeffs[4 * i + 0] >> 0);
 8002054:	680b      	ldr	r3, [r1, #0]
 8002056:	7003      	strb	r3, [r0, #0]
        r[5 * i + 1] = (uint8_t) ((a->coeffs[4 * i + 0] >> 8) | (a->coeffs[4 * i + 1] << 2));
 8002058:	e9d1 4300 	ldrd	r4, r3, [r1]
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8002062:	7043      	strb	r3, [r0, #1]
        r[5 * i + 2] = (uint8_t) ((a->coeffs[4 * i + 1] >> 6) | (a->coeffs[4 * i + 2] << 4));
 8002064:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 800206e:	7083      	strb	r3, [r0, #2]
        r[5 * i + 3] = (uint8_t) ((a->coeffs[4 * i + 2] >> 4) | (a->coeffs[4 * i + 3] << 6));
 8002070:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 800207a:	70c3      	strb	r3, [r0, #3]
        r[5 * i + 4] = (uint8_t) (a->coeffs[4 * i + 3] >> 2);
 800207c:	68cb      	ldr	r3, [r1, #12]
    for (i = 0; i < N / 4; ++i) {
 800207e:	3110      	adds	r1, #16
        r[5 * i + 4] = (uint8_t) (a->coeffs[4 * i + 3] >> 2);
 8002080:	109b      	asrs	r3, r3, #2
    for (i = 0; i < N / 4; ++i) {
 8002082:	4291      	cmp	r1, r2
        r[5 * i + 4] = (uint8_t) (a->coeffs[4 * i + 3] >> 2);
 8002084:	7103      	strb	r3, [r0, #4]
    for (i = 0; i < N / 4; ++i) {
 8002086:	f100 0005 	add.w	r0, r0, #5
 800208a:	d1e3      	bne.n	8002054 <PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack+0x6>
    }

    DBENCH_STOP(*tpack);
}
 800208c:	bd10      	pop	{r4, pc}

0800208e <PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack(poly *r, const uint8_t *a) {
 800208e:	b510      	push	{r4, lr}
 8002090:	f501 72a0 	add.w	r2, r1, #320	; 0x140
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        r->coeffs[4 * i + 0] = ((a[5 * i + 0] >> 0) | ((uint32_t)a[5 * i + 1] << 8)) & 0x3FF;
 8002094:	784c      	ldrb	r4, [r1, #1]
 8002096:	780b      	ldrb	r3, [r1, #0]
 8002098:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800209c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a0:	6003      	str	r3, [r0, #0]
        r->coeffs[4 * i + 1] = ((a[5 * i + 1] >> 2) | ((uint32_t)a[5 * i + 2] << 6)) & 0x3FF;
 80020a2:	788b      	ldrb	r3, [r1, #2]
 80020a4:	784c      	ldrb	r4, [r1, #1]
 80020a6:	019b      	lsls	r3, r3, #6
 80020a8:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
 80020ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b0:	6043      	str	r3, [r0, #4]
        r->coeffs[4 * i + 2] = ((a[5 * i + 2] >> 4) | ((uint32_t)a[5 * i + 3] << 4)) & 0x3FF;
 80020b2:	78cb      	ldrb	r3, [r1, #3]
 80020b4:	788c      	ldrb	r4, [r1, #2]
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	ea43 1314 	orr.w	r3, r3, r4, lsr #4
 80020bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c0:	6083      	str	r3, [r0, #8]
        r->coeffs[4 * i + 3] = ((a[5 * i + 3] >> 6) | ((uint32_t)a[5 * i + 4] << 2)) & 0x3FF;
 80020c2:	790b      	ldrb	r3, [r1, #4]
 80020c4:	78cc      	ldrb	r4, [r1, #3]
 80020c6:	009b      	lsls	r3, r3, #2
    for (i = 0; i < N / 4; ++i) {
 80020c8:	3105      	adds	r1, #5
        r->coeffs[4 * i + 3] = ((a[5 * i + 3] >> 6) | ((uint32_t)a[5 * i + 4] << 2)) & 0x3FF;
 80020ca:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
    for (i = 0; i < N / 4; ++i) {
 80020ce:	428a      	cmp	r2, r1
        r->coeffs[4 * i + 3] = ((a[5 * i + 3] >> 6) | ((uint32_t)a[5 * i + 4] << 2)) & 0x3FF;
 80020d0:	60c3      	str	r3, [r0, #12]
    for (i = 0; i < N / 4; ++i) {
 80020d2:	f100 0010 	add.w	r0, r0, #16
 80020d6:	d1dd      	bne.n	8002094 <PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack+0x6>
    }

    DBENCH_STOP(*tpack);
}
 80020d8:	bd10      	pop	{r4, pc}

080020da <PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack(uint8_t *r, const poly *a) {
 80020da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020de:	f500 7cd0 	add.w	ip, r0, #416	; 0x1a0
        t[0] = (1 << (D - 1)) - a->coeffs[8 * i + 0];
        t[1] = (1 << (D - 1)) - a->coeffs[8 * i + 1];
        t[2] = (1 << (D - 1)) - a->coeffs[8 * i + 2];
        t[3] = (1 << (D - 1)) - a->coeffs[8 * i + 3];
        t[4] = (1 << (D - 1)) - a->coeffs[8 * i + 4];
        t[5] = (1 << (D - 1)) - a->coeffs[8 * i + 5];
 80020e2:	694d      	ldr	r5, [r1, #20]
        t[1] = (1 << (D - 1)) - a->coeffs[8 * i + 1];
 80020e4:	684c      	ldr	r4, [r1, #4]
        t[0] = (1 << (D - 1)) - a->coeffs[8 * i + 0];
 80020e6:	680f      	ldr	r7, [r1, #0]
        t[2] = (1 << (D - 1)) - a->coeffs[8 * i + 2];
 80020e8:	688e      	ldr	r6, [r1, #8]
        t[3] = (1 << (D - 1)) - a->coeffs[8 * i + 3];
 80020ea:	68ca      	ldr	r2, [r1, #12]
        t[4] = (1 << (D - 1)) - a->coeffs[8 * i + 4];
 80020ec:	690b      	ldr	r3, [r1, #16]
        t[1] = (1 << (D - 1)) - a->coeffs[8 * i + 1];
 80020ee:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
        t[5] = (1 << (D - 1)) - a->coeffs[8 * i + 5];
 80020f2:	f5c5 5880 	rsb	r8, r5, #4096	; 0x1000
        t[6] = (1 << (D - 1)) - a->coeffs[8 * i + 6];
 80020f6:	698d      	ldr	r5, [r1, #24]
        t[0] = (1 << (D - 1)) - a->coeffs[8 * i + 0];
 80020f8:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
        t[7] = (1 << (D - 1)) - a->coeffs[8 * i + 7];

        r[13 * i + 0]  =  (uint8_t) t[0];
        r[13 * i + 1]  =  (uint8_t) (t[0] >>  8);
        r[13 * i + 1] |=  (uint8_t) (t[1] <<  5);
 80020fc:	ea4f 1944 	mov.w	r9, r4, lsl #5
        t[6] = (1 << (D - 1)) - a->coeffs[8 * i + 6];
 8002100:	f5c5 5e80 	rsb	lr, r5, #4096	; 0x1000
        t[7] = (1 << (D - 1)) - a->coeffs[8 * i + 7];
 8002104:	69cd      	ldr	r5, [r1, #28]
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002106:	7007      	strb	r7, [r0, #0]
        r[13 * i + 1] |=  (uint8_t) (t[1] <<  5);
 8002108:	ea49 2717 	orr.w	r7, r9, r7, lsr #8
 800210c:	7047      	strb	r7, [r0, #1]
        t[2] = (1 << (D - 1)) - a->coeffs[8 * i + 2];
 800210e:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
        r[13 * i + 2]  =  (uint8_t) (t[1] >>  3);
 8002112:	08e7      	lsrs	r7, r4, #3
 8002114:	7087      	strb	r7, [r0, #2]
        r[13 * i + 3]  =  (uint8_t) (t[1] >> 11);
        r[13 * i + 3] |=  (uint8_t) (t[2] <<  2);
 8002116:	00b7      	lsls	r7, r6, #2
        t[3] = (1 << (D - 1)) - a->coeffs[8 * i + 3];
 8002118:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
        r[13 * i + 3] |=  (uint8_t) (t[2] <<  2);
 800211c:	ea47 24d4 	orr.w	r4, r7, r4, lsr #11
 8002120:	70c4      	strb	r4, [r0, #3]
        r[13 * i + 4]  =  (uint8_t) (t[2] >>  6);
        r[13 * i + 4] |=  (uint8_t) (t[3] <<  7);
 8002122:	01d4      	lsls	r4, r2, #7
        t[4] = (1 << (D - 1)) - a->coeffs[8 * i + 4];
 8002124:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
        r[13 * i + 4] |=  (uint8_t) (t[3] <<  7);
 8002128:	ea44 1696 	orr.w	r6, r4, r6, lsr #6
        r[13 * i + 5]  =  (uint8_t) (t[3] >>  1);
 800212c:	0854      	lsrs	r4, r2, #1
 800212e:	7144      	strb	r4, [r0, #5]
        r[13 * i + 6]  =  (uint8_t) (t[3] >>  9);
        r[13 * i + 6] |=  (uint8_t) (t[4] <<  4);
 8002130:	011c      	lsls	r4, r3, #4
 8002132:	ea44 2252 	orr.w	r2, r4, r2, lsr #9
 8002136:	7182      	strb	r2, [r0, #6]
        r[13 * i + 7]  =  (uint8_t) (t[4] >>  4);
 8002138:	091a      	lsrs	r2, r3, #4
 800213a:	71c2      	strb	r2, [r0, #7]
        r[13 * i + 8]  =  (uint8_t) (t[4] >> 12);
        r[13 * i + 8] |=  (uint8_t) (t[5] <<  1);
 800213c:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8002140:	ea42 3313 	orr.w	r3, r2, r3, lsr #12
 8002144:	7203      	strb	r3, [r0, #8]
        r[13 * i + 9]  =  (uint8_t) (t[5] >>  7);
        r[13 * i + 9] |=  (uint8_t) (t[6] <<  6);
 8002146:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800214a:	ea43 13d8 	orr.w	r3, r3, r8, lsr #7
 800214e:	7243      	strb	r3, [r0, #9]
        t[7] = (1 << (D - 1)) - a->coeffs[8 * i + 7];
 8002150:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
        r[13 * i + 10]  =  (uint8_t) (t[6] >>  2);
 8002154:	ea4f 039e 	mov.w	r3, lr, lsr #2
 8002158:	7283      	strb	r3, [r0, #10]
        r[13 * i + 11]  =  (uint8_t) (t[6] >> 10);
        r[13 * i + 11] |=  (uint8_t) (t[7] <<  3);
 800215a:	00eb      	lsls	r3, r5, #3
 800215c:	ea43 239e 	orr.w	r3, r3, lr, lsr #10
        r[13 * i + 12]  =  (uint8_t) (t[7] >>  5);
 8002160:	096d      	lsrs	r5, r5, #5
        r[13 * i + 4] |=  (uint8_t) (t[3] <<  7);
 8002162:	7106      	strb	r6, [r0, #4]
        r[13 * i + 11] |=  (uint8_t) (t[7] <<  3);
 8002164:	72c3      	strb	r3, [r0, #11]
        r[13 * i + 12]  =  (uint8_t) (t[7] >>  5);
 8002166:	7305      	strb	r5, [r0, #12]
    for (i = 0; i < N / 8; ++i) {
 8002168:	300d      	adds	r0, #13
 800216a:	4584      	cmp	ip, r0
 800216c:	f101 0120 	add.w	r1, r1, #32
 8002170:	d1b7      	bne.n	80020e2 <PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8002172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002176 <PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack(poly *r, const uint8_t *a) {
 8002176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800217a:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 8; ++i) {
        r->coeffs[8 * i + 0]  = a[13 * i + 0];
 800217e:	780f      	ldrb	r7, [r1, #0]
 8002180:	6007      	str	r7, [r0, #0]
        r->coeffs[8 * i + 0] |= (uint32_t)a[13 * i + 1] << 8;
 8002182:	784b      	ldrb	r3, [r1, #1]
 8002184:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
        r->coeffs[8 * i + 0] &= 0x1FFF;
 8002188:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800218c:	6007      	str	r7, [r0, #0]

        r->coeffs[8 * i + 1]  = a[13 * i + 1] >> 5;
 800218e:	784d      	ldrb	r5, [r1, #1]
 8002190:	096d      	lsrs	r5, r5, #5
 8002192:	6045      	str	r5, [r0, #4]
        r->coeffs[8 * i + 1] |= (uint32_t)a[13 * i + 2] << 3;
 8002194:	788b      	ldrb	r3, [r1, #2]
 8002196:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 800219a:	6045      	str	r5, [r0, #4]
        r->coeffs[8 * i + 1] |= (uint32_t)a[13 * i + 3] << 11;
 800219c:	78cb      	ldrb	r3, [r1, #3]
 800219e:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
        r->coeffs[8 * i + 1] &= 0x1FFF;
 80021a2:	f3c5 050c 	ubfx	r5, r5, #0, #13
 80021a6:	6045      	str	r5, [r0, #4]

        r->coeffs[8 * i + 2]  = a[13 * i + 3] >> 2;
 80021a8:	78ce      	ldrb	r6, [r1, #3]
 80021aa:	08b6      	lsrs	r6, r6, #2
 80021ac:	6086      	str	r6, [r0, #8]
        r->coeffs[8 * i + 2] |= (uint32_t)a[13 * i + 4] << 6;
 80021ae:	790b      	ldrb	r3, [r1, #4]
 80021b0:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
        r->coeffs[8 * i + 2] &= 0x1FFF;
 80021b4:	f3c6 060c 	ubfx	r6, r6, #0, #13
 80021b8:	6086      	str	r6, [r0, #8]

        r->coeffs[8 * i + 3]  = a[13 * i + 4] >> 7;
 80021ba:	790c      	ldrb	r4, [r1, #4]
 80021bc:	09e4      	lsrs	r4, r4, #7
 80021be:	60c4      	str	r4, [r0, #12]
        r->coeffs[8 * i + 3] |= (uint32_t)a[13 * i + 5] << 1;
 80021c0:	794b      	ldrb	r3, [r1, #5]
 80021c2:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 80021c6:	60c4      	str	r4, [r0, #12]
        r->coeffs[8 * i + 3] |= (uint32_t)a[13 * i + 6] << 9;
 80021c8:	798b      	ldrb	r3, [r1, #6]
 80021ca:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
        r->coeffs[8 * i + 3] &= 0x1FFF;
 80021ce:	f3c4 040c 	ubfx	r4, r4, #0, #13
 80021d2:	60c4      	str	r4, [r0, #12]

        r->coeffs[8 * i + 4]  = a[13 * i + 6] >> 4;
 80021d4:	798a      	ldrb	r2, [r1, #6]
 80021d6:	0912      	lsrs	r2, r2, #4
 80021d8:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 4] |= (uint32_t)a[13 * i + 7] << 4;
 80021da:	79cb      	ldrb	r3, [r1, #7]
 80021dc:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80021e0:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 4] |= (uint32_t)a[13 * i + 8] << 12;
 80021e2:	7a0b      	ldrb	r3, [r1, #8]
 80021e4:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
        r->coeffs[8 * i + 4] &= 0x1FFF;
 80021e8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80021ec:	6102      	str	r2, [r0, #16]

        r->coeffs[8 * i + 5]  = a[13 * i + 8] >> 1;
 80021ee:	7a0b      	ldrb	r3, [r1, #8]
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	6143      	str	r3, [r0, #20]
        r->coeffs[8 * i + 5] |= (uint32_t)a[13 * i + 9] << 7;
 80021f4:	f891 e009 	ldrb.w	lr, [r1, #9]
 80021f8:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
        r->coeffs[8 * i + 5] &= 0x1FFF;
 80021fc:	f3c3 0e0c 	ubfx	lr, r3, #0, #13
 8002200:	f8c0 e014 	str.w	lr, [r0, #20]

        r->coeffs[8 * i + 6]  = a[13 * i + 9] >> 6;
 8002204:	7a4b      	ldrb	r3, [r1, #9]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	6183      	str	r3, [r0, #24]
        r->coeffs[8 * i + 6] |= (uint32_t)a[13 * i + 10] << 2;
 800220a:	f891 800a 	ldrb.w	r8, [r1, #10]
 800220e:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
 8002212:	6183      	str	r3, [r0, #24]
        r->coeffs[8 * i + 6] |= (uint32_t)a[13 * i + 11] << 10;
 8002214:	f891 800b 	ldrb.w	r8, [r1, #11]
 8002218:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
        r->coeffs[8 * i + 6] &= 0x1FFF;
 800221c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002220:	6183      	str	r3, [r0, #24]

        r->coeffs[8 * i + 7]  = a[13 * i + 11] >> 3;
 8002222:	f891 800b 	ldrb.w	r8, [r1, #11]
 8002226:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800222a:	f8c0 801c 	str.w	r8, [r0, #28]
        r->coeffs[8 * i + 7] |= (uint32_t)a[13 * i + 12] << 5;
 800222e:	f891 900c 	ldrb.w	r9, [r1, #12]

        r->coeffs[8 * i + 0] = (1 << (D - 1)) - r->coeffs[8 * i + 0];
        r->coeffs[8 * i + 1] = (1 << (D - 1)) - r->coeffs[8 * i + 1];
        r->coeffs[8 * i + 2] = (1 << (D - 1)) - r->coeffs[8 * i + 2];
        r->coeffs[8 * i + 3] = (1 << (D - 1)) - r->coeffs[8 * i + 3];
        r->coeffs[8 * i + 4] = (1 << (D - 1)) - r->coeffs[8 * i + 4];
 8002232:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
        r->coeffs[8 * i + 5] = (1 << (D - 1)) - r->coeffs[8 * i + 5];
        r->coeffs[8 * i + 6] = (1 << (D - 1)) - r->coeffs[8 * i + 6];
 8002236:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
        r->coeffs[8 * i + 7] |= (uint32_t)a[13 * i + 12] << 5;
 800223a:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
        r->coeffs[8 * i + 4] = (1 << (D - 1)) - r->coeffs[8 * i + 4];
 800223e:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 6] = (1 << (D - 1)) - r->coeffs[8 * i + 6];
 8002240:	6183      	str	r3, [r0, #24]
        r->coeffs[8 * i + 0] = (1 << (D - 1)) - r->coeffs[8 * i + 0];
 8002242:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
        r->coeffs[8 * i + 1] = (1 << (D - 1)) - r->coeffs[8 * i + 1];
 8002246:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
        r->coeffs[8 * i + 2] = (1 << (D - 1)) - r->coeffs[8 * i + 2];
 800224a:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
        r->coeffs[8 * i + 3] = (1 << (D - 1)) - r->coeffs[8 * i + 3];
 800224e:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
        r->coeffs[8 * i + 5] = (1 << (D - 1)) - r->coeffs[8 * i + 5];
 8002252:	f5ce 5280 	rsb	r2, lr, #4096	; 0x1000
        r->coeffs[8 * i + 7] = (1 << (D - 1)) - r->coeffs[8 * i + 7];
 8002256:	f5c8 5380 	rsb	r3, r8, #4096	; 0x1000
        r->coeffs[8 * i + 0] = (1 << (D - 1)) - r->coeffs[8 * i + 0];
 800225a:	6007      	str	r7, [r0, #0]
        r->coeffs[8 * i + 1] = (1 << (D - 1)) - r->coeffs[8 * i + 1];
 800225c:	6045      	str	r5, [r0, #4]
        r->coeffs[8 * i + 2] = (1 << (D - 1)) - r->coeffs[8 * i + 2];
 800225e:	6086      	str	r6, [r0, #8]
        r->coeffs[8 * i + 3] = (1 << (D - 1)) - r->coeffs[8 * i + 3];
 8002260:	60c4      	str	r4, [r0, #12]
        r->coeffs[8 * i + 5] = (1 << (D - 1)) - r->coeffs[8 * i + 5];
 8002262:	6142      	str	r2, [r0, #20]
        r->coeffs[8 * i + 7] = (1 << (D - 1)) - r->coeffs[8 * i + 7];
 8002264:	61c3      	str	r3, [r0, #28]
    for (i = 0; i < N / 8; ++i) {
 8002266:	3020      	adds	r0, #32
 8002268:	4560      	cmp	r0, ip
 800226a:	f101 010d 	add.w	r1, r1, #13
 800226e:	d186      	bne.n	800217e <PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8002270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002274 <PQCLEAN_DILITHIUM2_CLEAN_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyz_pack(uint8_t *r, const poly *a) {
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	f500 7610 	add.w	r6, r0, #576	; 0x240
    unsigned int i;
    uint32_t t[4];
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        t[0] = GAMMA1 - a->coeffs[4 * i + 0];
 800227a:	680d      	ldr	r5, [r1, #0]
        t[1] = GAMMA1 - a->coeffs[4 * i + 1];
 800227c:	684c      	ldr	r4, [r1, #4]
        t[2] = GAMMA1 - a->coeffs[4 * i + 2];
 800227e:	688a      	ldr	r2, [r1, #8]
        t[3] = GAMMA1 - a->coeffs[4 * i + 3];
 8002280:	68cb      	ldr	r3, [r1, #12]
        t[0] = GAMMA1 - a->coeffs[4 * i + 0];
 8002282:	f5c5 3500 	rsb	r5, r5, #131072	; 0x20000
        t[1] = GAMMA1 - a->coeffs[4 * i + 1];
 8002286:	f5c4 3400 	rsb	r4, r4, #131072	; 0x20000

        r[9 * i + 0]  = (uint8_t) t[0];
        r[9 * i + 1]  = (uint8_t) (t[0] >> 8);
 800228a:	0a2f      	lsrs	r7, r5, #8
 800228c:	7047      	strb	r7, [r0, #1]
        r[9 * i + 2]  = (uint8_t) (t[0] >> 16);
        r[9 * i + 2] |= (uint8_t) (t[1] << 2);
 800228e:	00a7      	lsls	r7, r4, #2
        r[9 * i + 0]  = (uint8_t) t[0];
 8002290:	7005      	strb	r5, [r0, #0]
        r[9 * i + 2] |= (uint8_t) (t[1] << 2);
 8002292:	ea47 4515 	orr.w	r5, r7, r5, lsr #16
        t[2] = GAMMA1 - a->coeffs[4 * i + 2];
 8002296:	f5c2 3200 	rsb	r2, r2, #131072	; 0x20000
        r[9 * i + 2] |= (uint8_t) (t[1] << 2);
 800229a:	7085      	strb	r5, [r0, #2]
        r[9 * i + 3]  = (uint8_t) (t[1] >> 6);
 800229c:	09a5      	lsrs	r5, r4, #6
 800229e:	70c5      	strb	r5, [r0, #3]
        r[9 * i + 4]  = (uint8_t) (t[1] >> 14);
        r[9 * i + 4] |= (uint8_t) (t[2] << 4);
 80022a0:	0115      	lsls	r5, r2, #4
 80022a2:	ea45 3494 	orr.w	r4, r5, r4, lsr #14
        t[3] = GAMMA1 - a->coeffs[4 * i + 3];
 80022a6:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
        r[9 * i + 4] |= (uint8_t) (t[2] << 4);
 80022aa:	7104      	strb	r4, [r0, #4]
        r[9 * i + 5]  = (uint8_t) (t[2] >> 4);
 80022ac:	0914      	lsrs	r4, r2, #4
 80022ae:	7144      	strb	r4, [r0, #5]
        r[9 * i + 6]  = (uint8_t) (t[2] >> 12);
        r[9 * i + 6] |= (uint8_t) (t[3] << 6);
 80022b0:	019c      	lsls	r4, r3, #6
 80022b2:	ea44 3212 	orr.w	r2, r4, r2, lsr #12
 80022b6:	7182      	strb	r2, [r0, #6]
        r[9 * i + 7]  = (uint8_t) (t[3] >> 2);
 80022b8:	089a      	lsrs	r2, r3, #2
        r[9 * i + 8]  = (uint8_t) (t[3] >> 10);
 80022ba:	0a9b      	lsrs	r3, r3, #10
        r[9 * i + 7]  = (uint8_t) (t[3] >> 2);
 80022bc:	71c2      	strb	r2, [r0, #7]
        r[9 * i + 8]  = (uint8_t) (t[3] >> 10);
 80022be:	7203      	strb	r3, [r0, #8]
    for (i = 0; i < N / 4; ++i) {
 80022c0:	3009      	adds	r0, #9
 80022c2:	4286      	cmp	r6, r0
 80022c4:	f101 0110 	add.w	r1, r1, #16
 80022c8:	d1d7      	bne.n	800227a <PQCLEAN_DILITHIUM2_CLEAN_polyz_pack+0x6>
    }

    DBENCH_STOP(*tpack);
}
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022cc <PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack(poly *r, const uint8_t *a) {
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	f500 6680 	add.w	r6, r0, #1024	; 0x400
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        r->coeffs[4 * i + 0]  = a[9 * i + 0];
 80022d2:	780c      	ldrb	r4, [r1, #0]
 80022d4:	6004      	str	r4, [r0, #0]
        r->coeffs[4 * i + 0] |= (uint32_t)a[9 * i + 1] << 8;
 80022d6:	784b      	ldrb	r3, [r1, #1]
 80022d8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80022dc:	6004      	str	r4, [r0, #0]
        r->coeffs[4 * i + 0] |= (uint32_t)a[9 * i + 2] << 16;
 80022de:	788b      	ldrb	r3, [r1, #2]
 80022e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
        r->coeffs[4 * i + 0] &= 0x3FFFF;
 80022e4:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80022e8:	6004      	str	r4, [r0, #0]

        r->coeffs[4 * i + 1]  = a[9 * i + 2] >> 2;
 80022ea:	788a      	ldrb	r2, [r1, #2]
 80022ec:	0892      	lsrs	r2, r2, #2
 80022ee:	6042      	str	r2, [r0, #4]
        r->coeffs[4 * i + 1] |= (uint32_t)a[9 * i + 3] << 6;
 80022f0:	78cb      	ldrb	r3, [r1, #3]
 80022f2:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 80022f6:	6042      	str	r2, [r0, #4]
        r->coeffs[4 * i + 1] |= (uint32_t)a[9 * i + 4] << 14;
 80022f8:	790b      	ldrb	r3, [r1, #4]
 80022fa:	ea42 3283 	orr.w	r2, r2, r3, lsl #14
        r->coeffs[4 * i + 1] &= 0x3FFFF;
 80022fe:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8002302:	6042      	str	r2, [r0, #4]

        r->coeffs[4 * i + 2]  = a[9 * i + 4] >> 4;
 8002304:	790b      	ldrb	r3, [r1, #4]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	6083      	str	r3, [r0, #8]
        r->coeffs[4 * i + 2] |= (uint32_t)a[9 * i + 5] << 4;
 800230a:	794d      	ldrb	r5, [r1, #5]
 800230c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002310:	6083      	str	r3, [r0, #8]
        r->coeffs[4 * i + 2] |= (uint32_t)a[9 * i + 6] << 12;
 8002312:	798d      	ldrb	r5, [r1, #6]
 8002314:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
        r->coeffs[4 * i + 2] &= 0x3FFFF;
 8002318:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800231c:	6083      	str	r3, [r0, #8]

        r->coeffs[4 * i + 3]  = a[9 * i + 6] >> 6;
 800231e:	798d      	ldrb	r5, [r1, #6]
 8002320:	09ad      	lsrs	r5, r5, #6
 8002322:	60c5      	str	r5, [r0, #12]
        r->coeffs[4 * i + 3] |= (uint32_t)a[9 * i + 7] << 2;
 8002324:	79cf      	ldrb	r7, [r1, #7]
 8002326:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 800232a:	60c5      	str	r5, [r0, #12]
        r->coeffs[4 * i + 3] |= (uint32_t)a[9 * i + 8] << 10;
 800232c:	7a0f      	ldrb	r7, [r1, #8]
 800232e:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
        r->coeffs[4 * i + 3] &= 0x3FFFF;

        r->coeffs[4 * i + 0] = GAMMA1 - r->coeffs[4 * i + 0];
 8002332:	f5c4 3400 	rsb	r4, r4, #131072	; 0x20000
        r->coeffs[4 * i + 1] = GAMMA1 - r->coeffs[4 * i + 1];
 8002336:	f5c2 3200 	rsb	r2, r2, #131072	; 0x20000
        r->coeffs[4 * i + 2] = GAMMA1 - r->coeffs[4 * i + 2];
 800233a:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
        r->coeffs[4 * i + 3] = GAMMA1 - r->coeffs[4 * i + 3];
 800233e:	f5c5 3500 	rsb	r5, r5, #131072	; 0x20000
        r->coeffs[4 * i + 0] = GAMMA1 - r->coeffs[4 * i + 0];
 8002342:	6004      	str	r4, [r0, #0]
        r->coeffs[4 * i + 1] = GAMMA1 - r->coeffs[4 * i + 1];
 8002344:	6042      	str	r2, [r0, #4]
        r->coeffs[4 * i + 2] = GAMMA1 - r->coeffs[4 * i + 2];
 8002346:	6083      	str	r3, [r0, #8]
        r->coeffs[4 * i + 3] = GAMMA1 - r->coeffs[4 * i + 3];
 8002348:	60c5      	str	r5, [r0, #12]
    for (i = 0; i < N / 4; ++i) {
 800234a:	3010      	adds	r0, #16
 800234c:	42b0      	cmp	r0, r6
 800234e:	f101 0109 	add.w	r1, r1, #9
 8002352:	d1be      	bne.n	80022d2 <PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack+0x6>
    }

    DBENCH_STOP(*tpack);
}
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002356 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1>:
        uint16_t nonce) {
 8002356:	b510      	push	{r4, lr}
 8002358:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 800235c:	4604      	mov	r4, r0
    stream256_init(&state, seed, nonce);
 800235e:	a801      	add	r0, sp, #4
 8002360:	f000 fa69 	bl	8002836 <PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake256_stream_init>
    stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8002364:	aa01      	add	r2, sp, #4
 8002366:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800236a:	a802      	add	r0, sp, #8
 800236c:	f001 fbb2 	bl	8003ad4 <shake256_inc_squeeze>
    stream256_release(&state);
 8002370:	a801      	add	r0, sp, #4
 8002372:	f001 fbb3 	bl	8003adc <shake256_inc_ctx_release>
    PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack(a, buf);
 8002376:	a902      	add	r1, sp, #8
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff ffa7 	bl	80022cc <PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack>
}
 800237e:	f50d 7d2c 	add.w	sp, sp, #688	; 0x2b0
 8002382:	bd10      	pop	{r4, pc}

08002384 <PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack(uint8_t *r, const poly *a) {
 8002384:	b510      	push	{r4, lr}
 8002386:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        r[3 * i + 0]  = (uint8_t) a->coeffs[4 * i + 0];
 800238a:	780b      	ldrb	r3, [r1, #0]
 800238c:	7003      	strb	r3, [r0, #0]
        r[3 * i + 0] |= (uint8_t) (a->coeffs[4 * i + 1] << 6);
 800238e:	684c      	ldr	r4, [r1, #4]
 8002390:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8002394:	7003      	strb	r3, [r0, #0]
        r[3 * i + 1]  = (uint8_t) (a->coeffs[4 * i + 1] >> 2);
 8002396:	684b      	ldr	r3, [r1, #4]
 8002398:	f3c3 0387 	ubfx	r3, r3, #2, #8
 800239c:	7043      	strb	r3, [r0, #1]
        r[3 * i + 1] |= (uint8_t) (a->coeffs[4 * i + 2] << 4);
 800239e:	688c      	ldr	r4, [r1, #8]
 80023a0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80023a4:	7043      	strb	r3, [r0, #1]
        r[3 * i + 2]  = (uint8_t) (a->coeffs[4 * i + 2] >> 4);
 80023a6:	688b      	ldr	r3, [r1, #8]
 80023a8:	f3c3 1307 	ubfx	r3, r3, #4, #8
 80023ac:	7083      	strb	r3, [r0, #2]
        r[3 * i + 2] |= (uint8_t) (a->coeffs[4 * i + 3] << 2);
 80023ae:	68cc      	ldr	r4, [r1, #12]
 80023b0:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80023b4:	7083      	strb	r3, [r0, #2]
    for (i = 0; i < N / 4; ++i) {
 80023b6:	3003      	adds	r0, #3
 80023b8:	4290      	cmp	r0, r2
 80023ba:	f101 0110 	add.w	r1, r1, #16
 80023be:	d1e4      	bne.n	800238a <PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack+0x6>
    }

    DBENCH_STOP(*tpack);
}
 80023c0:	bd10      	pop	{r4, pc}

080023c2 <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand>:
*              sampling on the output stream of SHAKE128(rho|j|i)
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 80023c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023c6:	4606      	mov	r6, r0
 80023c8:	4688      	mov	r8, r1
    unsigned int i, j;

    for (i = 0; i < K; ++i) {
 80023ca:	2500      	movs	r5, #0
        for (j = 0; j < L; ++j) {
 80023cc:	022f      	lsls	r7, r5, #8
 80023ce:	b2bf      	uxth	r7, r7
 80023d0:	eb06 3905 	add.w	r9, r6, r5, lsl #12
 80023d4:	2400      	movs	r4, #0
            PQCLEAN_DILITHIUM2_CLEAN_poly_uniform(&mat[i].vec[j], rho, (uint16_t) ((i << 8) + j));
 80023d6:	193a      	adds	r2, r7, r4
 80023d8:	eb09 2084 	add.w	r0, r9, r4, lsl #10
 80023dc:	b292      	uxth	r2, r2
 80023de:	4641      	mov	r1, r8
        for (j = 0; j < L; ++j) {
 80023e0:	3401      	adds	r4, #1
            PQCLEAN_DILITHIUM2_CLEAN_poly_uniform(&mat[i].vec[j], rho, (uint16_t) ((i << 8) + j));
 80023e2:	f7ff fcdd 	bl	8001da0 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform>
        for (j = 0; j < L; ++j) {
 80023e6:	2c04      	cmp	r4, #4
 80023e8:	d1f5      	bne.n	80023d6 <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand+0x14>
    for (i = 0; i < K; ++i) {
 80023ea:	3501      	adds	r5, #1
 80023ec:	2d04      	cmp	r5, #4
 80023ee:	d1ed      	bne.n	80023cc <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_expand+0xa>
        }
    }
}
 80023f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080023f4 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	4605      	mov	r5, r0
 80023f8:	460e      	mov	r6, r1
 80023fa:	4617      	mov	r7, r2
    unsigned int i;

    for (i = 0; i < L; ++i) {
 80023fc:	2400      	movs	r4, #0
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta(&v->vec[i], seed, nonce++);
 80023fe:	193a      	adds	r2, r7, r4
 8002400:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 8002404:	b292      	uxth	r2, r2
 8002406:	4631      	mov	r1, r6
    for (i = 0; i < L; ++i) {
 8002408:	3401      	adds	r4, #1
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta(&v->vec[i], seed, nonce++);
 800240a:	f7ff fd0b 	bl	8001e24 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta>
    for (i = 0; i < L; ++i) {
 800240e:	2c04      	cmp	r4, #4
 8002410:	d1f5      	bne.n	80023fe <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_eta+0xa>
    }
}
 8002412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002414 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_gamma1>:

void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i));
 8002416:	0095      	lsls	r5, r2, #2
void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002418:	4606      	mov	r6, r0
 800241a:	460f      	mov	r7, r1
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i));
 800241c:	b2ad      	uxth	r5, r5
    for (i = 0; i < L; ++i) {
 800241e:	2400      	movs	r4, #0
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i));
 8002420:	192a      	adds	r2, r5, r4
 8002422:	eb06 2084 	add.w	r0, r6, r4, lsl #10
 8002426:	b292      	uxth	r2, r2
 8002428:	4639      	mov	r1, r7
    for (i = 0; i < L; ++i) {
 800242a:	3401      	adds	r4, #1
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i));
 800242c:	f7ff ff93 	bl	8002356 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1>
    for (i = 0; i < L; ++i) {
 8002430:	2c04      	cmp	r4, #4
 8002432:	d1f5      	bne.n	8002420 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_uniform_gamma1+0xc>
    }
}
 8002434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002436 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_reduce>:

void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_reduce(polyvecl *v) {
 8002436:	b510      	push	{r4, lr}
 8002438:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_reduce(&v->vec[i]);
 800243a:	f7ff fbfc 	bl	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>
 800243e:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002442:	f7ff fbf8 	bl	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>
 8002446:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800244a:	f7ff fbf4 	bl	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>
 800244e:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 8002452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_reduce(&v->vec[i]);
 8002456:	f7ff bbee 	b.w	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>

0800245a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add>:
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
 800245a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245c:	4605      	mov	r5, r0
 800245e:	460e      	mov	r6, r1
 8002460:	4617      	mov	r7, r2
 8002462:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8002464:	193a      	adds	r2, r7, r4
 8002466:	1931      	adds	r1, r6, r4
 8002468:	1928      	adds	r0, r5, r4
    for (i = 0; i < L; ++i) {
 800246a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 800246e:	f7ff fbfa 	bl	8001c66 <PQCLEAN_DILITHIUM2_CLEAN_poly_add>
    for (i = 0; i < L; ++i) {
 8002472:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002476:	d1f5      	bne.n	8002464 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add+0xa>
    }
}
 8002478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800247a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt(polyvecl *v) {
 800247a:	b510      	push	{r4, lr}
 800247c:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_ntt(&v->vec[i]);
 800247e:	f7ff fc18 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
 8002482:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002486:	f7ff fc14 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
 800248a:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800248e:	f7ff fc10 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
 8002492:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 8002496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_ntt(&v->vec[i]);
 800249a:	f7ff bc0a 	b.w	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>

0800249e <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_invntt_tomont>:

void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_invntt_tomont(polyvecl *v) {
 800249e:	b510      	push	{r4, lr}
 80024a0:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont(&v->vec[i]);
 80024a2:	f7ff fc08 	bl	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>
 80024a6:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80024aa:	f7ff fc04 	bl	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>
 80024ae:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80024b2:	f7ff fc00 	bl	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>
 80024b6:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 80024ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont(&v->vec[i]);
 80024be:	f7ff bbfa 	b.w	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>

080024c2 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_poly_montgomery>:

void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
 80024c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c4:	4605      	mov	r5, r0
 80024c6:	460e      	mov	r6, r1
 80024c8:	4617      	mov	r7, r2
 80024ca:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 80024cc:	193a      	adds	r2, r7, r4
 80024ce:	1928      	adds	r0, r5, r4
 80024d0:	4631      	mov	r1, r6
    for (i = 0; i < L; ++i) {
 80024d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 80024d6:	f7ff fbf0 	bl	8001cba <PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery>
    for (i = 0; i < L; ++i) {
 80024da:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80024de:	d1f5      	bne.n	80024cc <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_poly_montgomery+0xa>
    }
}
 80024e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024e2 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *u: pointer to first input vector
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_montgomery(poly *w,
        const polyvecl *u,
        const polyvecl *v) {
 80024e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e4:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80024e8:	4605      	mov	r5, r0
 80024ea:	460e      	mov	r6, r1
 80024ec:	4617      	mov	r7, r2
    unsigned int i;
    poly t;

    PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 80024ee:	f7ff fbe4 	bl	8001cba <PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery>
 80024f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    for (i = 1; i < L; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
 80024f6:	193a      	adds	r2, r7, r4
 80024f8:	1931      	adds	r1, r6, r4
 80024fa:	4668      	mov	r0, sp
 80024fc:	f7ff fbdd 	bl	8001cba <PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery>
    for (i = 1; i < L; ++i) {
 8002500:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_add(w, w, &t);
 8002504:	466a      	mov	r2, sp
 8002506:	4629      	mov	r1, r5
 8002508:	4628      	mov	r0, r5
 800250a:	f7ff fbac 	bl	8001c66 <PQCLEAN_DILITHIUM2_CLEAN_poly_add>
    for (i = 1; i < L; ++i) {
 800250e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002512:	d1f0      	bne.n	80024f6 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_montgomery+0x14>
    }
}
 8002514:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800251a <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery>:
void PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 800251a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251c:	4616      	mov	r6, r2
 800251e:	4604      	mov	r4, r0
 8002520:	460d      	mov	r5, r1
 8002522:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
        PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 8002526:	4629      	mov	r1, r5
 8002528:	4620      	mov	r0, r4
 800252a:	4632      	mov	r2, r6
    for (i = 0; i < K; ++i) {
 800252c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 8002530:	f7ff ffd7 	bl	80024e2 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_montgomery>
    for (i = 0; i < K; ++i) {
 8002534:	42bc      	cmp	r4, r7
 8002536:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800253a:	d1f4      	bne.n	8002526 <PQCLEAN_DILITHIUM2_CLEAN_polyvec_matrix_pointwise_montgomery+0xc>
}
 800253c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800253e <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 800253e:	b570      	push	{r4, r5, r6, lr}
 8002540:	460d      	mov	r5, r1
 8002542:	4604      	mov	r4, r0
 8002544:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
    unsigned int i;

    for (i = 0; i < L; ++i) {
        if (PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm(&v->vec[i], bound)) {
 8002548:	4629      	mov	r1, r5
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff fc10 	bl	8001d70 <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm>
 8002550:	b920      	cbnz	r0, 800255c <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm+0x1e>
    for (i = 0; i < L; ++i) {
 8002552:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002556:	42b4      	cmp	r4, r6
 8002558:	d1f6      	bne.n	8002548 <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm+0xa>
            return 1;
        }
    }

    return 0;
}
 800255a:	bd70      	pop	{r4, r5, r6, pc}
            return 1;
 800255c:	2001      	movs	r0, #1
 800255e:	e7fc      	b.n	800255a <PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm+0x1c>

08002560 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002562:	4605      	mov	r5, r0
 8002564:	460e      	mov	r6, r1
 8002566:	4617      	mov	r7, r2
    unsigned int i;

    for (i = 0; i < K; ++i) {
 8002568:	2400      	movs	r4, #0
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta(&v->vec[i], seed, nonce++);
 800256a:	193a      	adds	r2, r7, r4
 800256c:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 8002570:	b292      	uxth	r2, r2
 8002572:	4631      	mov	r1, r6
    for (i = 0; i < K; ++i) {
 8002574:	3401      	adds	r4, #1
        PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta(&v->vec[i], seed, nonce++);
 8002576:	f7ff fc55 	bl	8001e24 <PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta>
    for (i = 0; i < K; ++i) {
 800257a:	2c04      	cmp	r4, #4
 800257c:	d1f5      	bne.n	800256a <PQCLEAN_DILITHIUM2_CLEAN_polyveck_uniform_eta+0xa>
    }
}
 800257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002580 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce(polyveck *v) {
 8002580:	b510      	push	{r4, lr}
 8002582:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_reduce(&v->vec[i]);
 8002584:	f7ff fb57 	bl	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>
 8002588:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800258c:	f7ff fb53 	bl	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>
 8002590:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002594:	f7ff fb4f 	bl	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>
 8002598:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 800259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_reduce(&v->vec[i]);
 80025a0:	f7ff bb49 	b.w	8001c36 <PQCLEAN_DILITHIUM2_CLEAN_poly_reduce>

080025a4 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_caddq(polyveck *v) {
 80025a4:	b510      	push	{r4, lr}
 80025a6:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_caddq(&v->vec[i]);
 80025a8:	f7ff fb51 	bl	8001c4e <PQCLEAN_DILITHIUM2_CLEAN_poly_caddq>
 80025ac:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80025b0:	f7ff fb4d 	bl	8001c4e <PQCLEAN_DILITHIUM2_CLEAN_poly_caddq>
 80025b4:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80025b8:	f7ff fb49 	bl	8001c4e <PQCLEAN_DILITHIUM2_CLEAN_poly_caddq>
 80025bc:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 80025c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_caddq(&v->vec[i]);
 80025c4:	f7ff bb43 	b.w	8001c4e <PQCLEAN_DILITHIUM2_CLEAN_poly_caddq>

080025c8 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	4605      	mov	r5, r0
 80025cc:	460e      	mov	r6, r1
 80025ce:	4617      	mov	r7, r2
 80025d0:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 80025d2:	193a      	adds	r2, r7, r4
 80025d4:	1931      	adds	r1, r6, r4
 80025d6:	1928      	adds	r0, r5, r4
    for (i = 0; i < K; ++i) {
 80025d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 80025dc:	f7ff fb43 	bl	8001c66 <PQCLEAN_DILITHIUM2_CLEAN_poly_add>
    for (i = 0; i < K; ++i) {
 80025e0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80025e4:	d1f5      	bne.n	80025d2 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_add+0xa>
    }
}
 80025e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025e8 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	4605      	mov	r5, r0
 80025ec:	460e      	mov	r6, r1
 80025ee:	4617      	mov	r7, r2
 80025f0:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 80025f2:	193a      	adds	r2, r7, r4
 80025f4:	1931      	adds	r1, r6, r4
 80025f6:	1928      	adds	r0, r5, r4
    for (i = 0; i < K; ++i) {
 80025f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 80025fc:	f7ff fb41 	bl	8001c82 <PQCLEAN_DILITHIUM2_CLEAN_poly_sub>
    for (i = 0; i < K; ++i) {
 8002600:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002604:	d1f5      	bne.n	80025f2 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub+0xa>
    }
}
 8002606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002608 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl(polyveck *v) {
 8002608:	b510      	push	{r4, lr}
 800260a:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl(&v->vec[i]);
 800260c:	f7ff fb47 	bl	8001c9e <PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl>
 8002610:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002614:	f7ff fb43 	bl	8001c9e <PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl>
 8002618:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800261c:	f7ff fb3f 	bl	8001c9e <PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl>
 8002620:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 8002624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl(&v->vec[i]);
 8002628:	f7ff bb39 	b.w	8001c9e <PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl>

0800262c <PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt(polyveck *v) {
 800262c:	b510      	push	{r4, lr}
 800262e:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_ntt(&v->vec[i]);
 8002630:	f7ff fb3f 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
 8002634:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002638:	f7ff fb3b 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
 800263c:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002640:	f7ff fb37 	bl	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>
 8002644:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 8002648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_ntt(&v->vec[i]);
 800264c:	f7ff bb31 	b.w	8001cb2 <PQCLEAN_DILITHIUM2_CLEAN_poly_ntt>

08002650 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_tomont(polyveck *v) {
 8002650:	b510      	push	{r4, lr}
 8002652:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont(&v->vec[i]);
 8002654:	f7ff fb2f 	bl	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>
 8002658:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800265c:	f7ff fb2b 	bl	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>
 8002660:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002664:	f7ff fb27 	bl	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>
 8002668:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
    }
}
 800266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont(&v->vec[i]);
 8002670:	f7ff bb21 	b.w	8001cb6 <PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_tomont>

08002674 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery>:

void PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	4605      	mov	r5, r0
 8002678:	460e      	mov	r6, r1
 800267a:	4617      	mov	r7, r2
 800267c:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 800267e:	193a      	adds	r2, r7, r4
 8002680:	1928      	adds	r0, r5, r4
 8002682:	4631      	mov	r1, r6
    for (i = 0; i < K; ++i) {
 8002684:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8002688:	f7ff fb17 	bl	8001cba <PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_montgomery>
    for (i = 0; i < K; ++i) {
 800268c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002690:	d1f5      	bne.n	800267e <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pointwise_poly_montgomery+0xa>
    }
}
 8002692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002694 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm(const polyveck *v, int32_t bound) {
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	460d      	mov	r5, r1
 8002698:	4604      	mov	r4, r0
 800269a:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
    unsigned int i;

    for (i = 0; i < K; ++i) {
        if (PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm(&v->vec[i], bound)) {
 800269e:	4629      	mov	r1, r5
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff fb65 	bl	8001d70 <PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm>
 80026a6:	b920      	cbnz	r0, 80026b2 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm+0x1e>
    for (i = 0; i < K; ++i) {
 80026a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80026ac:	42b4      	cmp	r4, r6
 80026ae:	d1f6      	bne.n	800269e <PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm+0xa>
            return 1;
        }
    }

    return 0;
}
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
            return 1;
 80026b2:	2001      	movs	r0, #1
 80026b4:	e7fc      	b.n	80026b0 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm+0x1c>

080026b6 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 80026b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b8:	4605      	mov	r5, r0
 80026ba:	460e      	mov	r6, r1
 80026bc:	4617      	mov	r7, r2
 80026be:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 80026c0:	193a      	adds	r2, r7, r4
 80026c2:	1931      	adds	r1, r6, r4
 80026c4:	1928      	adds	r0, r5, r4
    for (i = 0; i < K; ++i) {
 80026c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 80026ca:	f7ff fb0a 	bl	8001ce2 <PQCLEAN_DILITHIUM2_CLEAN_poly_power2round>
    for (i = 0; i < K; ++i) {
 80026ce:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80026d2:	d1f5      	bne.n	80026c0 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round+0xa>
    }
}
 80026d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026d6 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 80026d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d8:	4605      	mov	r5, r0
 80026da:	460e      	mov	r6, r1
 80026dc:	4617      	mov	r7, r2
 80026de:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 80026e0:	193a      	adds	r2, r7, r4
 80026e2:	1931      	adds	r1, r6, r4
 80026e4:	1928      	adds	r0, r5, r4
    for (i = 0; i < K; ++i) {
 80026e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 80026ea:	f7ff fb09 	bl	8001d00 <PQCLEAN_DILITHIUM2_CLEAN_poly_decompose>
    for (i = 0; i < K; ++i) {
 80026ee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80026f2:	d1f5      	bne.n	80026e0 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose+0xa>
    }
}
 80026f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026f6 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint>:
*
* Returns number of 1 bits.
**************************************************/
unsigned int PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint(polyveck *h,
        const polyveck *v0,
        const polyveck *v1) {
 80026f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fa:	2400      	movs	r4, #0
 80026fc:	4606      	mov	r6, r0
 80026fe:	460f      	mov	r7, r1
 8002700:	4690      	mov	r8, r2
    unsigned int i, s = 0;
 8002702:	4625      	mov	r5, r4

    for (i = 0; i < K; ++i) {
        s += PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8002704:	eb08 0204 	add.w	r2, r8, r4
 8002708:	1939      	adds	r1, r7, r4
 800270a:	1930      	adds	r0, r6, r4
 800270c:	f7ff fb07 	bl	8001d1e <PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint>
    for (i = 0; i < K; ++i) {
 8002710:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002714:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
        s += PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8002718:	4405      	add	r5, r0
    for (i = 0; i < K; ++i) {
 800271a:	d1f3      	bne.n	8002704 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint+0xe>
    }

    return s;
}
 800271c:	4628      	mov	r0, r5
 800271e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002722 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
 8002722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002724:	4605      	mov	r5, r0
 8002726:	460e      	mov	r6, r1
 8002728:	4617      	mov	r7, r2
 800272a:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 800272c:	193a      	adds	r2, r7, r4
 800272e:	1931      	adds	r1, r6, r4
 8002730:	1928      	adds	r0, r5, r4
    for (i = 0; i < K; ++i) {
 8002732:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 8002736:	f7ff fb09 	bl	8001d4c <PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint>
    for (i = 0; i < K; ++i) {
 800273a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800273e:	d1f5      	bne.n	800272c <PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint+0xa>
    }
}
 8002740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002742 <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1>:

void PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1(uint8_t r[K * POLYW1_PACKEDBYTES], const polyveck *w1) {
 8002742:	b570      	push	{r4, r5, r6, lr}
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
 8002748:	f500 7640 	add.w	r6, r0, #768	; 0x300
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack(&r[i * POLYW1_PACKEDBYTES], &w1->vec[i]);
 800274c:	4629      	mov	r1, r5
 800274e:	4620      	mov	r0, r4
    for (i = 0; i < K; ++i) {
 8002750:	34c0      	adds	r4, #192	; 0xc0
        PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack(&r[i * POLYW1_PACKEDBYTES], &w1->vec[i]);
 8002752:	f7ff fe17 	bl	8002384 <PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack>
    for (i = 0; i < K; ++i) {
 8002756:	42b4      	cmp	r4, r6
 8002758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800275c:	d1f6      	bne.n	800274c <PQCLEAN_DILITHIUM2_CLEAN_polyveck_pack_w1+0xa>
    }
}
 800275e:	bd70      	pop	{r4, r5, r6, pc}

08002760 <PQCLEAN_DILITHIUM2_CLEAN_power2round>:
* Returns a1.
**************************************************/
int32_t PQCLEAN_DILITHIUM2_CLEAN_power2round(int32_t *a0, int32_t a)  {
    int32_t a1;

    a1 = (a + (1 << (D - 1)) - 1) >> D;
 8002760:	f601 72ff 	addw	r2, r1, #4095	; 0xfff
    *a0 = a - (a1 << D);
 8002764:	f422 53ff 	bic.w	r3, r2, #8160	; 0x1fe0
 8002768:	f023 031f 	bic.w	r3, r3, #31
 800276c:	1ac9      	subs	r1, r1, r3
 800276e:	6001      	str	r1, [r0, #0]
    return a1;
}
 8002770:	1350      	asrs	r0, r2, #13
 8002772:	4770      	bx	lr

08002774 <PQCLEAN_DILITHIUM2_CLEAN_decompose>:
* Returns a1.
**************************************************/
int32_t PQCLEAN_DILITHIUM2_CLEAN_decompose(int32_t *a0, int32_t a) {
    int32_t a1;

    a1  = (a + 127) >> 7;
 8002774:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    a1  = (a1 * 11275 + (1 << 23)) >> 24;
 8002778:	f642 420b 	movw	r2, #11275	; 0x2c0b
    a1  = (a + 127) >> 7;
 800277c:	11db      	asrs	r3, r3, #7
    a1  = (a1 * 11275 + (1 << 23)) >> 24;
 800277e:	4353      	muls	r3, r2
 8002780:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 8002784:	161b      	asrs	r3, r3, #24
    a1 ^= ((43 - a1) >> 31) & a1;
 8002786:	f1c3 022b 	rsb	r2, r3, #43	; 0x2b
 800278a:	17d2      	asrs	r2, r2, #31
 800278c:	ea23 0302 	bic.w	r3, r3, r2

    *a0  = a - a1 * 2 * GAMMA2;
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <PQCLEAN_DILITHIUM2_CLEAN_decompose+0x3c>)
int32_t PQCLEAN_DILITHIUM2_CLEAN_decompose(int32_t *a0, int32_t a) {
 8002792:	b510      	push	{r4, lr}
    *a0  = a - a1 * 2 * GAMMA2;
 8002794:	fb02 1103 	mla	r1, r2, r3, r1
    *a0 -= (((Q - 1) / 2 - *a0) >> 31) & Q;
 8002798:	f5c1 147f 	rsb	r4, r1, #4177920	; 0x3fc000
 800279c:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <PQCLEAN_DILITHIUM2_CLEAN_decompose+0x40>)
 800279e:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 80027a2:	ea02 72e4 	and.w	r2, r2, r4, asr #31
 80027a6:	1a89      	subs	r1, r1, r2
 80027a8:	6001      	str	r1, [r0, #0]
    return a1;
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd10      	pop	{r4, pc}
 80027ae:	bf00      	nop
 80027b0:	fffd1800 	.word	0xfffd1800
 80027b4:	007fe001 	.word	0x007fe001

080027b8 <PQCLEAN_DILITHIUM2_CLEAN_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int PQCLEAN_DILITHIUM2_CLEAN_make_hint(int32_t a0, int32_t a1) {
    if (a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0)) {
 80027b8:	f500 33ba 	add.w	r3, r0, #95232	; 0x17400
 80027bc:	f5b3 3f3a 	cmp.w	r3, #190464	; 0x2e800
 80027c0:	d806      	bhi.n	80027d0 <PQCLEAN_DILITHIUM2_CLEAN_make_hint+0x18>
 80027c2:	f510 3fba 	cmn.w	r0, #95232	; 0x17400
 80027c6:	d105      	bne.n	80027d4 <PQCLEAN_DILITHIUM2_CLEAN_make_hint+0x1c>
 80027c8:	1e08      	subs	r0, r1, #0
 80027ca:	bf18      	it	ne
 80027cc:	2001      	movne	r0, #1
 80027ce:	4770      	bx	lr
        return 1;
 80027d0:	2001      	movs	r0, #1
 80027d2:	4770      	bx	lr
    }

    return 0;
 80027d4:	2000      	movs	r0, #0
}
 80027d6:	4770      	bx	lr

080027d8 <PQCLEAN_DILITHIUM2_CLEAN_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t PQCLEAN_DILITHIUM2_CLEAN_use_hint(int32_t a, unsigned int hint) {
 80027d8:	b513      	push	{r0, r1, r4, lr}
 80027da:	460c      	mov	r4, r1
    int32_t a0, a1;

    a1 = PQCLEAN_DILITHIUM2_CLEAN_decompose(&a0, a);
 80027dc:	4601      	mov	r1, r0
 80027de:	a801      	add	r0, sp, #4
 80027e0:	f7ff ffc8 	bl	8002774 <PQCLEAN_DILITHIUM2_CLEAN_decompose>
    if (hint == 0) {
 80027e4:	b12c      	cbz	r4, 80027f2 <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x1a>
        return a1;
    }

    if (a0 > 0) {
 80027e6:	9b01      	ldr	r3, [sp, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd04      	ble.n	80027f6 <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x1e>
        if (a1 == 43) {
 80027ec:	282b      	cmp	r0, #43	; 0x2b
 80027ee:	d005      	beq.n	80027fc <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x24>
            return 0;
        }
        return a1 + 1;
 80027f0:	3001      	adds	r0, #1
    }
    if (a1 == 0) {
        return 43;
    }
    return a1 - 1;
}
 80027f2:	b002      	add	sp, #8
 80027f4:	bd10      	pop	{r4, pc}
    if (a1 == 0) {
 80027f6:	b118      	cbz	r0, 8002800 <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x28>
    return a1 - 1;
 80027f8:	3801      	subs	r0, #1
 80027fa:	e7fa      	b.n	80027f2 <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x1a>
            return 0;
 80027fc:	2000      	movs	r0, #0
 80027fe:	e7f8      	b.n	80027f2 <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x1a>
        return 43;
 8002800:	202b      	movs	r0, #43	; 0x2b
 8002802:	e7f6      	b.n	80027f2 <PQCLEAN_DILITHIUM2_CLEAN_use_hint+0x1a>

08002804 <PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake128_stream_init>:
#include "fips202.h"
#include "params.h"
#include "symmetric.h"
#include <stdint.h>

void PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce) {
 8002804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002806:	4604      	mov	r4, r0
 8002808:	460d      	mov	r5, r1
    uint8_t t[2];
    t[0] = (uint8_t) nonce;
 800280a:	f88d 2004 	strb.w	r2, [sp, #4]
    t[1] = (uint8_t) (nonce >> 8);
 800280e:	0a12      	lsrs	r2, r2, #8
 8002810:	f88d 2005 	strb.w	r2, [sp, #5]

    shake128_inc_init(state);
 8002814:	f001 f925 	bl	8003a62 <shake128_inc_init>
    shake128_inc_absorb(state, seed, SEEDBYTES);
 8002818:	4629      	mov	r1, r5
 800281a:	4620      	mov	r0, r4
 800281c:	2220      	movs	r2, #32
 800281e:	f001 f92e 	bl	8003a7e <shake128_inc_absorb>
    shake128_inc_absorb(state, t, 2);
 8002822:	2202      	movs	r2, #2
 8002824:	a901      	add	r1, sp, #4
 8002826:	4620      	mov	r0, r4
 8002828:	f001 f929 	bl	8003a7e <shake128_inc_absorb>
    shake128_inc_finalize(state);
 800282c:	4620      	mov	r0, r4
 800282e:	f001 f92c 	bl	8003a8a <shake128_inc_finalize>
}
 8002832:	b003      	add	sp, #12
 8002834:	bd30      	pop	{r4, r5, pc}

08002836 <PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake256_stream_init>:

void PQCLEAN_DILITHIUM2_CLEAN_dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002836:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002838:	4604      	mov	r4, r0
 800283a:	460d      	mov	r5, r1
    uint8_t t[2];
    t[0] = (uint8_t) nonce;
 800283c:	f88d 2004 	strb.w	r2, [sp, #4]
    t[1] = (uint8_t) (nonce >> 8);
 8002840:	0a12      	lsrs	r2, r2, #8
 8002842:	f88d 2005 	strb.w	r2, [sp, #5]

    shake256_inc_init(state);
 8002846:	f001 f92c 	bl	8003aa2 <shake256_inc_init>
    shake256_inc_absorb(state, seed, CRHBYTES);
 800284a:	4629      	mov	r1, r5
 800284c:	4620      	mov	r0, r4
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	f001 f935 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_absorb(state, t, 2);
 8002854:	2202      	movs	r2, #2
 8002856:	a901      	add	r1, sp, #4
 8002858:	4620      	mov	r0, r4
 800285a:	f001 f930 	bl	8003abe <shake256_inc_absorb>
    shake256_inc_finalize(state);
 800285e:	4620      	mov	r0, r4
 8002860:	f001 f933 	bl	8003aca <shake256_inc_finalize>
}
 8002864:	b003      	add	sp, #12
 8002866:	bd30      	pop	{r4, r5, pc}

08002868 <KeccakF1600_StatePermute>:
 *
 * Description: The Keccak F1600 Permutation
 *
 * Arguments:   - uint64_t *state: pointer to input/output Keccak state
 **************************************************/
static void KeccakF1600_StatePermute(uint64_t *state) {
 8002868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800286c:	b0bf      	sub	sp, #252	; 0xfc
    uint64_t Eka, Eke, Eki, Eko, Eku;
    uint64_t Ema, Eme, Emi, Emo, Emu;
    uint64_t Esa, Ese, Esi, Eso, Esu;

    // copyFromState(A, state)
    Aba = state[0];
 800286e:	6803      	ldr	r3, [r0, #0]
 8002870:	930c      	str	r3, [sp, #48]	; 0x30
 8002872:	6843      	ldr	r3, [r0, #4]
 8002874:	930d      	str	r3, [sp, #52]	; 0x34
    Abe = state[1];
 8002876:	6883      	ldr	r3, [r0, #8]
 8002878:	930e      	str	r3, [sp, #56]	; 0x38
 800287a:	68c3      	ldr	r3, [r0, #12]
 800287c:	930f      	str	r3, [sp, #60]	; 0x3c
    Abi = state[2];
 800287e:	6903      	ldr	r3, [r0, #16]
 8002880:	9310      	str	r3, [sp, #64]	; 0x40
 8002882:	6943      	ldr	r3, [r0, #20]
 8002884:	9311      	str	r3, [sp, #68]	; 0x44
    Abo = state[3];
 8002886:	6983      	ldr	r3, [r0, #24]
 8002888:	9312      	str	r3, [sp, #72]	; 0x48
 800288a:	69c3      	ldr	r3, [r0, #28]
 800288c:	9313      	str	r3, [sp, #76]	; 0x4c
    Abu = state[4];
 800288e:	6a03      	ldr	r3, [r0, #32]
 8002890:	9314      	str	r3, [sp, #80]	; 0x50
 8002892:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002894:	9315      	str	r3, [sp, #84]	; 0x54
    Aga = state[5];
 8002896:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002898:	9316      	str	r3, [sp, #88]	; 0x58
 800289a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800289c:	9317      	str	r3, [sp, #92]	; 0x5c
    Age = state[6];
 800289e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80028a0:	9318      	str	r3, [sp, #96]	; 0x60
 80028a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80028a4:	9319      	str	r3, [sp, #100]	; 0x64
    Agi = state[7];
 80028a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028a8:	931a      	str	r3, [sp, #104]	; 0x68
 80028aa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80028ac:	931b      	str	r3, [sp, #108]	; 0x6c
    Ago = state[8];
 80028ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028b0:	931c      	str	r3, [sp, #112]	; 0x70
 80028b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028b4:	931d      	str	r3, [sp, #116]	; 0x74
    Agu = state[9];
 80028b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80028b8:	931e      	str	r3, [sp, #120]	; 0x78
 80028ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80028bc:	931f      	str	r3, [sp, #124]	; 0x7c
    Aka = state[10];
 80028be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028c0:	9320      	str	r3, [sp, #128]	; 0x80
 80028c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028c4:	9321      	str	r3, [sp, #132]	; 0x84
    Ake = state[11];
 80028c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80028c8:	9322      	str	r3, [sp, #136]	; 0x88
 80028ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80028cc:	9323      	str	r3, [sp, #140]	; 0x8c
    Aki = state[12];
 80028ce:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028d0:	9324      	str	r3, [sp, #144]	; 0x90
 80028d2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80028d4:	9325      	str	r3, [sp, #148]	; 0x94
    Ako = state[13];
 80028d6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80028d8:	9326      	str	r3, [sp, #152]	; 0x98
 80028da:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80028dc:	9327      	str	r3, [sp, #156]	; 0x9c
    Aku = state[14];
 80028de:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80028e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80028e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80028e4:	9329      	str	r3, [sp, #164]	; 0xa4
    Ama = state[15];
 80028e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80028e8:	932a      	str	r3, [sp, #168]	; 0xa8
 80028ea:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80028ec:	932b      	str	r3, [sp, #172]	; 0xac
    Ame = state[16];
 80028ee:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80028f2:	932c      	str	r3, [sp, #176]	; 0xb0
 80028f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80028f8:	932d      	str	r3, [sp, #180]	; 0xb4
    Ami = state[17];
 80028fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80028fe:	932e      	str	r3, [sp, #184]	; 0xb8
 8002900:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8002904:	932f      	str	r3, [sp, #188]	; 0xbc
    Amo = state[18];
 8002906:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800290a:	9330      	str	r3, [sp, #192]	; 0xc0
 800290c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8002910:	9331      	str	r3, [sp, #196]	; 0xc4
    Amu = state[19];
 8002912:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8002916:	9332      	str	r3, [sp, #200]	; 0xc8
 8002918:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800291c:	9333      	str	r3, [sp, #204]	; 0xcc
    Asa = state[20];
 800291e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8002922:	930b      	str	r3, [sp, #44]	; 0x2c
 8002924:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002928:	9334      	str	r3, [sp, #208]	; 0xd0
    Ase = state[21];
 800292a:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800292e:	9335      	str	r3, [sp, #212]	; 0xd4
 8002930:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8002934:	9336      	str	r3, [sp, #216]	; 0xd8
    Asi = state[22];
 8002936:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800293a:	9337      	str	r3, [sp, #220]	; 0xdc
 800293c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8002940:	9338      	str	r3, [sp, #224]	; 0xe0
    Aso = state[23];
 8002942:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8002946:	9339      	str	r3, [sp, #228]	; 0xe4
 8002948:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 800294c:	933a      	str	r3, [sp, #232]	; 0xe8
    Asu = state[24];
 800294e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8002952:	933b      	str	r3, [sp, #236]	; 0xec
 8002954:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4

    for (round = 0; round < NROUNDS; round += 2) {
 8002958:	4b01      	ldr	r3, [pc, #4]	; (8002960 <KeccakF1600_StatePermute+0xf8>)
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	e002      	b.n	8002964 <KeccakF1600_StatePermute+0xfc>
 800295e:	bf00      	nop
 8002960:	0800aae8 	.word	0x0800aae8
        //    prepareTheta
        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
 8002964:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002968:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800296a:	4053      	eors	r3, r2
 800296c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800296e:	ea82 0501 	eor.w	r5, r2, r1
 8002972:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002974:	4053      	eors	r3, r2
 8002976:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002978:	4055      	eors	r5, r2
 800297a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800297c:	4053      	eors	r3, r2
 800297e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8002980:	4055      	eors	r5, r2
 8002982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002984:	4053      	eors	r3, r2
 8002986:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8002988:	9309      	str	r3, [sp, #36]	; 0x24
 800298a:	4055      	eors	r5, r2
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 800298c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800298e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002990:	ea83 0902 	eor.w	r9, r3, r2
 8002994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002996:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002998:	ea83 0802 	eor.w	r8, r3, r2
 800299c:	9b22      	ldr	r3, [sp, #136]	; 0x88
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 800299e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 80029a0:	ea89 0903 	eor.w	r9, r9, r3
 80029a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80029a6:	ea88 0803 	eor.w	r8, r8, r3
 80029aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80029ac:	ea89 0903 	eor.w	r9, r9, r3
 80029b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80029b2:	ea88 0803 	eor.w	r8, r8, r3
 80029b6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80029b8:	ea89 0903 	eor.w	r9, r9, r3
 80029bc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80029be:	ea88 0803 	eor.w	r8, r8, r3
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 80029c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80029c4:	ea83 0c02 	eor.w	ip, r3, r2
 80029c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80029cc:	ea83 0702 	eor.w	r7, r3, r2
 80029d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80029d2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80029d4:	ea8c 0c03 	eor.w	ip, ip, r3
 80029d8:	4057      	eors	r7, r2
 80029da:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80029dc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80029de:	ea8c 0c03 	eor.w	ip, ip, r3
 80029e2:	4057      	eors	r7, r2
 80029e4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80029e6:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80029e8:	ea8c 0c03 	eor.w	ip, ip, r3
 80029ec:	4057      	eors	r7, r2
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 80029ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80029f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 80029f2:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 80029f6:	ea83 0402 	eor.w	r4, r3, r2
 80029fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80029fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80029fe:	ea83 0102 	eor.w	r1, r3, r2
 8002a02:	9a26      	ldr	r2, [sp, #152]	; 0x98
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 8002a04:	9b14      	ldr	r3, [sp, #80]	; 0x50
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 8002a06:	4054      	eors	r4, r2
 8002a08:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002a0a:	4051      	eors	r1, r2
 8002a0c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8002a0e:	4054      	eors	r4, r2
 8002a10:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8002a12:	4051      	eors	r1, r2
 8002a14:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8002a16:	4054      	eors	r4, r2
 8002a18:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8002a1a:	4051      	eors	r1, r2
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 8002a1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002a1e:	405a      	eors	r2, r3
 8002a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002a22:	ea83 0e0e 	eor.w	lr, r3, lr
 8002a26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002a28:	405a      	eors	r2, r3
 8002a2a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002a2c:	ea8e 0e03 	eor.w	lr, lr, r3
 8002a30:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002a32:	405a      	eors	r2, r3
 8002a34:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8002a36:	ea8e 0e03 	eor.w	lr, lr, r3
 8002a3a:	9b3b      	ldr	r3, [sp, #236]	; 0xec

        // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
        Da = BCu ^ ROL(BCe, 1);
 8002a3c:	ea4f 0b49 	mov.w	fp, r9, lsl #1
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 8002a40:	405a      	eors	r2, r3
        Da = BCu ^ ROL(BCe, 1);
 8002a42:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8002a46:	ea4f 0a48 	mov.w	sl, r8, lsl #1
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 8002a4a:	ea8e 0e06 	eor.w	lr, lr, r6
        Da = BCu ^ ROL(BCe, 1);
 8002a4e:	ea8b 0302 	eor.w	r3, fp, r2
 8002a52:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	ea8a 030e 	eor.w	r3, sl, lr
 8002a5c:	9303      	str	r3, [sp, #12]
        De = BCa ^ ROL(BCi, 1);
 8002a5e:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 8002a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a64:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
 8002a68:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8002a6c:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8002a70:	ea8b 0303 	eor.w	r3, fp, r3
 8002a74:	9304      	str	r3, [sp, #16]
 8002a76:	ea8a 0305 	eor.w	r3, sl, r5
        Di = BCe ^ ROL(BCo, 1);
 8002a7a:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 8002a7e:	ea4a 7ad4 	orr.w	sl, sl, r4, lsr #31
        De = BCa ^ ROL(BCi, 1);
 8002a82:	9305      	str	r3, [sp, #20]
        Di = BCe ^ ROL(BCo, 1);
 8002a84:	ea8a 0308 	eor.w	r3, sl, r8
        Do = BCi ^ ROL(BCu, 1);
 8002a88:	ea4f 084e 	mov.w	r8, lr, lsl #1
 8002a8c:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 8002a90:	0052      	lsls	r2, r2, #1
 8002a92:	ea42 72de 	orr.w	r2, r2, lr, lsr #31
        Di = BCe ^ ROL(BCo, 1);
 8002a96:	9306      	str	r3, [sp, #24]
        Do = BCi ^ ROL(BCu, 1);
 8002a98:	ea82 030c 	eor.w	r3, r2, ip
 8002a9c:	9307      	str	r3, [sp, #28]
 8002a9e:	ea88 0307 	eor.w	r3, r8, r7
 8002aa2:	9308      	str	r3, [sp, #32]
        Du = BCo ^ ROL(BCa, 1);
 8002aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa6:	006a      	lsls	r2, r5, #1
 8002aa8:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
 8002ab2:	4063      	eors	r3, r4
 8002ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab6:	ea82 0301 	eor.w	r3, r2, r1
        Di = BCe ^ ROL(BCo, 1);
 8002aba:	ea4f 0b44 	mov.w	fp, r4, lsl #1

        Aba ^= Da;
 8002abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        Du = BCo ^ ROL(BCa, 1);
 8002ac0:	930a      	str	r3, [sp, #40]	; 0x28
        Aba ^= Da;
 8002ac2:	9b02      	ldr	r3, [sp, #8]
        Di = BCe ^ ROL(BCo, 1);
 8002ac4:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 8002ac8:	ea8b 0b09 	eor.w	fp, fp, r9
        Aba ^= Da;
 8002acc:	ea83 0902 	eor.w	r9, r3, r2
 8002ad0:	9b03      	ldr	r3, [sp, #12]
 8002ad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        BCa = Aba;
        Age ^= De;
        BCe = ROL(Age, 44);
        Aki ^= Di;
 8002ad4:	9906      	ldr	r1, [sp, #24]
 8002ad6:	9c25      	ldr	r4, [sp, #148]	; 0x94
        BCi = ROL(Aki, 43);
        Amo ^= Do;
 8002ad8:	9f31      	ldr	r7, [sp, #196]	; 0xc4
        Aba ^= Da;
 8002ada:	ea83 0a02 	eor.w	sl, r3, r2
        Age ^= De;
 8002ade:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002ae0:	9b04      	ldr	r3, [sp, #16]
 8002ae2:	ea83 0e02 	eor.w	lr, r3, r2
 8002ae6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002ae8:	9b05      	ldr	r3, [sp, #20]
 8002aea:	ea83 0c02 	eor.w	ip, r3, r2
        Aki ^= Di;
 8002aee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002af0:	ea8b 0202 	eor.w	r2, fp, r2
 8002af4:	404c      	eors	r4, r1
        BCi = ROL(Aki, 43);
 8002af6:	ea4f 5852 	mov.w	r8, r2, lsr #21
 8002afa:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 8002afe:	0d64      	lsrs	r4, r4, #21
 8002b00:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
        Amo ^= Do;
 8002b04:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8002b06:	9a07      	ldr	r2, [sp, #28]
 8002b08:	4051      	eors	r1, r2
 8002b0a:	9a08      	ldr	r2, [sp, #32]
        BCe = ROL(Age, 44);
 8002b0c:	ea4f 551e 	mov.w	r5, lr, lsr #20
 8002b10:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
        Amo ^= Do;
 8002b14:	407a      	eors	r2, r7
        BCe = ROL(Age, 44);
 8002b16:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 8002b1a:	ea4c 330e 	orr.w	r3, ip, lr, lsl #12
        BCo = ROL(Amo, 21);
 8002b1e:	ea4f 5e42 	mov.w	lr, r2, lsl #21
 8002b22:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 8002b26:	0549      	lsls	r1, r1, #21
 8002b28:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
        Asu ^= Du;
 8002b2c:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 8002b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b30:	4057      	eors	r7, r2
 8002b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b34:	4056      	eors	r6, r2
        BCu = ROL(Asu, 14);
 8002b36:	03ba      	lsls	r2, r7, #14
 8002b38:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8002b3c:	ea4f 3c86 	mov.w	ip, r6, lsl #14
        Eba = BCa ^ ((~BCe) & BCi);
        Eba ^= KeccakF_RoundConstants[round];
 8002b40:	9e01      	ldr	r6, [sp, #4]
        BCu = ROL(Asu, 14);
 8002b42:	ea4c 4c97 	orr.w	ip, ip, r7, lsr #18
        Eba ^= KeccakF_RoundConstants[round];
 8002b46:	e9d6 7600 	ldrd	r7, r6, [r6]
 8002b4a:	ea8a 0606 	eor.w	r6, sl, r6
 8002b4e:	960d      	str	r6, [sp, #52]	; 0x34
 8002b50:	ea89 0707 	eor.w	r7, r9, r7
 8002b54:	ea28 0605 	bic.w	r6, r8, r5
 8002b58:	407e      	eors	r6, r7
 8002b5a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002b5c:	960c      	str	r6, [sp, #48]	; 0x30
 8002b5e:	ea24 0603 	bic.w	r6, r4, r3
 8002b62:	4077      	eors	r7, r6
        Ebe = BCe ^ ((~BCi) & BCo);
 8002b64:	ea2e 0604 	bic.w	r6, lr, r4
 8002b68:	405e      	eors	r6, r3
        Eba ^= KeccakF_RoundConstants[round];
 8002b6a:	970d      	str	r7, [sp, #52]	; 0x34
        Ebe = BCe ^ ((~BCi) & BCo);
 8002b6c:	ea21 0708 	bic.w	r7, r1, r8
 8002b70:	406f      	eors	r7, r5
 8002b72:	9625      	str	r6, [sp, #148]	; 0x94
        Ebi = BCi ^ ((~BCo) & BCu);
        Ebo = BCo ^ ((~BCu) & BCa);
        Ebu = BCu ^ ((~BCa) & BCe);
 8002b74:	ea25 0509 	bic.w	r5, r5, r9
        Ebi = BCi ^ ((~BCo) & BCu);
 8002b78:	ea2c 060e 	bic.w	r6, ip, lr
        Ebu = BCu ^ ((~BCa) & BCe);
 8002b7c:	ea23 030a 	bic.w	r3, r3, sl
        Ebi = BCi ^ ((~BCo) & BCu);
 8002b80:	4074      	eors	r4, r6
        Ebu = BCu ^ ((~BCa) & BCe);
 8002b82:	ea83 030c 	eor.w	r3, r3, ip
        Ebo = BCo ^ ((~BCu) & BCa);
 8002b86:	ea29 0602 	bic.w	r6, r9, r2
        Ebe = BCe ^ ((~BCi) & BCo);
 8002b8a:	9724      	str	r7, [sp, #144]	; 0x90
        Ebi = BCi ^ ((~BCo) & BCu);
 8002b8c:	ea22 0701 	bic.w	r7, r2, r1
        Ebu = BCu ^ ((~BCa) & BCe);
 8002b90:	406a      	eors	r2, r5
        Ebo = BCo ^ ((~BCu) & BCa);
 8002b92:	4071      	eors	r1, r6
        Ebi = BCi ^ ((~BCo) & BCu);
 8002b94:	943c      	str	r4, [sp, #240]	; 0xf0
        Ebu = BCu ^ ((~BCa) & BCe);
 8002b96:	9230      	str	r2, [sp, #192]	; 0xc0
        Ebo = BCo ^ ((~BCu) & BCa);
 8002b98:	ea2a 040c 	bic.w	r4, sl, ip

        Abo ^= Do;
 8002b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
        Ebu = BCu ^ ((~BCa) & BCe);
 8002b9e:	9331      	str	r3, [sp, #196]	; 0xc4
        Abo ^= Do;
 8002ba0:	9b07      	ldr	r3, [sp, #28]
        Ebo = BCo ^ ((~BCu) & BCa);
 8002ba2:	9118      	str	r1, [sp, #96]	; 0x60
        Ebi = BCi ^ ((~BCo) & BCu);
 8002ba4:	ea87 0708 	eor.w	r7, r7, r8
        Ebo = BCo ^ ((~BCu) & BCa);
 8002ba8:	ea84 010e 	eor.w	r1, r4, lr
        Abo ^= Do;
 8002bac:	405a      	eors	r2, r3
        Ebi = BCi ^ ((~BCo) & BCu);
 8002bae:	973b      	str	r7, [sp, #236]	; 0xec
        Ebo = BCo ^ ((~BCu) & BCa);
 8002bb0:	9119      	str	r1, [sp, #100]	; 0x64
        Abo ^= Do;
 8002bb2:	9b08      	ldr	r3, [sp, #32]
 8002bb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
        BCa = ROL(Abo, 28);
        Agu ^= Du;
        BCe = ROL(Agu, 20);
        Aka ^= Da;
 8002bb6:	9c21      	ldr	r4, [sp, #132]	; 0x84
        BCi = ROL(Aka, 3);
        Ame ^= De;
        BCo = ROL(Ame, 45);
        Asi ^= Di;
 8002bb8:	9f38      	ldr	r7, [sp, #224]	; 0xe0
        Abo ^= Do;
 8002bba:	4059      	eors	r1, r3
        BCa = ROL(Abo, 28);
 8002bbc:	ea4f 7c01 	mov.w	ip, r1, lsl #28
 8002bc0:	ea4c 1c12 	orr.w	ip, ip, r2, lsr #4
 8002bc4:	0712      	lsls	r2, r2, #28
 8002bc6:	ea42 1e11 	orr.w	lr, r2, r1, lsr #4
        Agu ^= Du;
 8002bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bcc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
        Aka ^= Da;
 8002bce:	9920      	ldr	r1, [sp, #128]	; 0x80
        Agu ^= Du;
 8002bd0:	ea83 0802 	eor.w	r8, r3, r2
 8002bd4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bd8:	ea83 0602 	eor.w	r6, r3, r2
        Aka ^= Da;
 8002bdc:	9a02      	ldr	r2, [sp, #8]
 8002bde:	404a      	eors	r2, r1
 8002be0:	9903      	ldr	r1, [sp, #12]
 8002be2:	404c      	eors	r4, r1
        BCi = ROL(Aka, 3);
 8002be4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002be8:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8002bec:	00d2      	lsls	r2, r2, #3
 8002bee:	ea42 7454 	orr.w	r4, r2, r4, lsr #29
        Ame ^= De;
 8002bf2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8002bf4:	9a04      	ldr	r2, [sp, #16]
        BCe = ROL(Agu, 20);
 8002bf6:	0535      	lsls	r5, r6, #20
 8002bf8:	ea45 3518 	orr.w	r5, r5, r8, lsr #12
 8002bfc:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8002c00:	ea48 3316 	orr.w	r3, r8, r6, lsr #12
        Ame ^= De;
 8002c04:	4051      	eors	r1, r2
 8002c06:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8002c08:	9a05      	ldr	r2, [sp, #20]
        BCo = ROL(Ame, 45);
 8002c0a:	ea4f 48d1 	mov.w	r8, r1, lsr #19
        Ame ^= De;
 8002c0e:	4072      	eors	r2, r6
        BCo = ROL(Ame, 45);
 8002c10:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8002c14:	0cd2      	lsrs	r2, r2, #19
 8002c16:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
        Asi ^= Di;
 8002c1a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8002c1c:	ea8b 0601 	eor.w	r6, fp, r1
 8002c20:	9906      	ldr	r1, [sp, #24]
 8002c22:	4079      	eors	r1, r7
        BCu = ROL(Asi, 61);
 8002c24:	08f7      	lsrs	r7, r6, #3
 8002c26:	ea47 7741 	orr.w	r7, r7, r1, lsl #29
        Ega = BCa ^ ((~BCe) & BCi);
 8002c2a:	ea24 0a03 	bic.w	sl, r4, r3
        BCu = ROL(Asi, 61);
 8002c2e:	08c9      	lsrs	r1, r1, #3
 8002c30:	ea41 7146 	orr.w	r1, r1, r6, lsl #29
        Ega = BCa ^ ((~BCe) & BCi);
 8002c34:	ea8a 0a0e 	eor.w	sl, sl, lr
 8002c38:	ea29 0605 	bic.w	r6, r9, r5
 8002c3c:	ea86 060c 	eor.w	r6, r6, ip
 8002c40:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
        Ege = BCe ^ ((~BCi) & BCo);
 8002c44:	ea28 0a04 	bic.w	sl, r8, r4
 8002c48:	ea8a 0a03 	eor.w	sl, sl, r3
        Ega = BCa ^ ((~BCe) & BCi);
 8002c4c:	962d      	str	r6, [sp, #180]	; 0xb4
        Ege = BCe ^ ((~BCi) & BCo);
 8002c4e:	ea22 0609 	bic.w	r6, r2, r9
 8002c52:	406e      	eors	r6, r5
 8002c54:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
        Egi = BCi ^ ((~BCo) & BCu);
 8002c58:	ea27 0a08 	bic.w	sl, r7, r8
 8002c5c:	ea8a 0404 	eor.w	r4, sl, r4
        Ege = BCe ^ ((~BCi) & BCo);
 8002c60:	9613      	str	r6, [sp, #76]	; 0x4c
        Egi = BCi ^ ((~BCo) & BCu);
 8002c62:	ea21 0602 	bic.w	r6, r1, r2
 8002c66:	9420      	str	r4, [sp, #128]	; 0x80
 8002c68:	ea86 0409 	eor.w	r4, r6, r9
        Ego = BCo ^ ((~BCu) & BCa);
 8002c6c:	ea2e 0607 	bic.w	r6, lr, r7
        Egu = BCu ^ ((~BCa) & BCe);
 8002c70:	ea23 0e0e 	bic.w	lr, r3, lr
 8002c74:	ea8e 0307 	eor.w	r3, lr, r7
 8002c78:	ea25 050c 	bic.w	r5, r5, ip
        Egi = BCi ^ ((~BCo) & BCu);
 8002c7c:	9421      	str	r4, [sp, #132]	; 0x84
        Ego = BCo ^ ((~BCu) & BCa);
 8002c7e:	ea2c 0401 	bic.w	r4, ip, r1
 8002c82:	4062      	eors	r2, r4
        Egu = BCu ^ ((~BCa) & BCe);
 8002c84:	931e      	str	r3, [sp, #120]	; 0x78
 8002c86:	ea85 0301 	eor.w	r3, r5, r1
        Ego = BCo ^ ((~BCu) & BCa);
 8002c8a:	9238      	str	r2, [sp, #224]	; 0xe0
        Egu = BCu ^ ((~BCa) & BCe);
 8002c8c:	931f      	str	r3, [sp, #124]	; 0x7c

        Abe ^= De;
 8002c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c90:	9b04      	ldr	r3, [sp, #16]
 8002c92:	ea83 0902 	eor.w	r9, r3, r2
 8002c96:	9b05      	ldr	r3, [sp, #20]
 8002c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002c9a:	ea83 0502 	eor.w	r5, r3, r2
        BCa = ROL(Abe, 1);
        Agi ^= Di;
 8002c9e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
        Ego = BCo ^ ((~BCu) & BCa);
 8002ca0:	ea86 0608 	eor.w	r6, r6, r8
        Agi ^= Di;
 8002ca4:	ea8b 0203 	eor.w	r2, fp, r3
        Ego = BCo ^ ((~BCu) & BCa);
 8002ca8:	9637      	str	r6, [sp, #220]	; 0xdc
        Agi ^= Di;
 8002caa:	9b06      	ldr	r3, [sp, #24]
 8002cac:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002cae:	ea83 0701 	eor.w	r7, r3, r1
        BCe = ROL(Agi, 6);
 8002cb2:	01be      	lsls	r6, r7, #6
 8002cb4:	ea46 6692 	orr.w	r6, r6, r2, lsr #26
 8002cb8:	0192      	lsls	r2, r2, #6
 8002cba:	ea42 6397 	orr.w	r3, r2, r7, lsr #26
        Ako ^= Do;
 8002cbe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002cc0:	9a07      	ldr	r2, [sp, #28]
 8002cc2:	ea82 0701 	eor.w	r7, r2, r1
 8002cc6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8002cc8:	9a08      	ldr	r2, [sp, #32]
        BCa = ROL(Abe, 1);
 8002cca:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8002cce:	ea4c 7cd9 	orr.w	ip, ip, r9, lsr #31
        Ako ^= Do;
 8002cd2:	404a      	eors	r2, r1
        BCa = ROL(Abe, 1);
 8002cd4:	ea4f 0949 	mov.w	r9, r9, lsl #1
        BCi = ROL(Ako, 25);
 8002cd8:	0679      	lsls	r1, r7, #25
        BCa = ROL(Abe, 1);
 8002cda:	ea49 74d5 	orr.w	r4, r9, r5, lsr #31
        BCi = ROL(Ako, 25);
 8002cde:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
        Amu ^= Du;
 8002ce2:	9d32      	ldr	r5, [sp, #200]	; 0xc8
        BCo = ROL(Amu, 8);
        Asa ^= Da;
 8002ce4:	f8dd 90d0 	ldr.w	r9, [sp, #208]	; 0xd0
        BCi = ROL(Ako, 25);
 8002ce8:	ea4f 6842 	mov.w	r8, r2, lsl #25
        Amu ^= Du;
 8002cec:	9a09      	ldr	r2, [sp, #36]	; 0x24
        BCi = ROL(Ako, 25);
 8002cee:	ea48 18d7 	orr.w	r8, r8, r7, lsr #7
        Amu ^= Du;
 8002cf2:	4055      	eors	r5, r2
 8002cf4:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 8002cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cf8:	407a      	eors	r2, r7
        BCo = ROL(Amu, 8);
 8002cfa:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 8002cfe:	ea4e 6e15 	orr.w	lr, lr, r5, lsr #24
 8002d02:	022d      	lsls	r5, r5, #8
 8002d04:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
        Asa ^= Da;
 8002d08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8002d0a:	9a02      	ldr	r2, [sp, #8]
 8002d0c:	407a      	eors	r2, r7
 8002d0e:	9f03      	ldr	r7, [sp, #12]
 8002d10:	ea87 0909 	eor.w	r9, r7, r9
        BCu = ROL(Asa, 18);
 8002d14:	ea4f 4789 	mov.w	r7, r9, lsl #18
 8002d18:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
        Eka = BCa ^ ((~BCe) & BCi);
 8002d1c:	ea21 0a03 	bic.w	sl, r1, r3
        BCu = ROL(Asa, 18);
 8002d20:	0492      	lsls	r2, r2, #18
 8002d22:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
        Eka = BCa ^ ((~BCe) & BCi);
 8002d26:	ea8a 0a04 	eor.w	sl, sl, r4
 8002d2a:	ea28 0906 	bic.w	r9, r8, r6
 8002d2e:	ea89 090c 	eor.w	r9, r9, ip
 8002d32:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
        Eke = BCe ^ ((~BCi) & BCo);
 8002d36:	ea25 0a01 	bic.w	sl, r5, r1
 8002d3a:	ea8a 0a03 	eor.w	sl, sl, r3
        Eka = BCa ^ ((~BCe) & BCi);
 8002d3e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
        Eki = BCi ^ ((~BCo) & BCu);
        Eko = BCo ^ ((~BCu) & BCa);
        Eku = BCu ^ ((~BCa) & BCe);
 8002d42:	ea23 0304 	bic.w	r3, r3, r4
        Eke = BCe ^ ((~BCi) & BCo);
 8002d46:	ea2e 0908 	bic.w	r9, lr, r8
 8002d4a:	ea89 0906 	eor.w	r9, r9, r6
        Eku = BCu ^ ((~BCa) & BCe);
 8002d4e:	4053      	eors	r3, r2
 8002d50:	ea26 060c 	bic.w	r6, r6, ip
        Eke = BCe ^ ((~BCi) & BCo);
 8002d54:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
        Eki = BCi ^ ((~BCo) & BCu);
 8002d58:	ea22 0a05 	bic.w	sl, r2, r5
 8002d5c:	ea8a 0101 	eor.w	r1, sl, r1
        Eke = BCe ^ ((~BCi) & BCo);
 8002d60:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
        Eku = BCu ^ ((~BCa) & BCe);
 8002d64:	9334      	str	r3, [sp, #208]	; 0xd0
        Eki = BCi ^ ((~BCo) & BCu);
 8002d66:	ea27 090e 	bic.w	r9, r7, lr
        Eku = BCu ^ ((~BCa) & BCe);
 8002d6a:	ea86 0307 	eor.w	r3, r6, r7
        Eki = BCi ^ ((~BCo) & BCu);
 8002d6e:	910e      	str	r1, [sp, #56]	; 0x38
        Eku = BCu ^ ((~BCa) & BCe);
 8002d70:	933d      	str	r3, [sp, #244]	; 0xf4
        Eki = BCi ^ ((~BCo) & BCu);
 8002d72:	ea89 0108 	eor.w	r1, r9, r8

        Abu ^= Du;
 8002d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
        Eki = BCi ^ ((~BCo) & BCu);
 8002d78:	910f      	str	r1, [sp, #60]	; 0x3c
        Eko = BCo ^ ((~BCu) & BCa);
 8002d7a:	ea24 0802 	bic.w	r8, r4, r2
        Abu ^= Du;
 8002d7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
        Eko = BCo ^ ((~BCu) & BCa);
 8002d80:	ea2c 0107 	bic.w	r1, ip, r7
        Abu ^= Du;
 8002d84:	ea83 0702 	eor.w	r7, r3, r2
 8002d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002d8c:	ea83 0602 	eor.w	r6, r3, r2
        BCa = ROL(Abu, 27);
        Aga ^= Da;
 8002d90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002d92:	9b02      	ldr	r3, [sp, #8]
        Eko = BCo ^ ((~BCu) & BCa);
 8002d94:	ea81 010e 	eor.w	r1, r1, lr
        Aga ^= Da;
 8002d98:	4053      	eors	r3, r2
        Eko = BCo ^ ((~BCu) & BCa);
 8002d9a:	9127      	str	r1, [sp, #156]	; 0x9c
        Aga ^= Da;
 8002d9c:	9a03      	ldr	r2, [sp, #12]
 8002d9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
        BCa = ROL(Abu, 27);
 8002da0:	ea4f 6ec6 	mov.w	lr, r6, lsl #27
 8002da4:	ea4e 1e57 	orr.w	lr, lr, r7, lsr #5
 8002da8:	06ff      	lsls	r7, r7, #27
 8002daa:	ea47 1c56 	orr.w	ip, r7, r6, lsr #5
        Aga ^= Da;
 8002dae:	4051      	eors	r1, r2
        BCe = ROL(Aga, 36);
 8002db0:	0f1e      	lsrs	r6, r3, #28
 8002db2:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
        Eko = BCo ^ ((~BCu) & BCa);
 8002db6:	ea88 0505 	eor.w	r5, r8, r5
        BCe = ROL(Aga, 36);
 8002dba:	0f09      	lsrs	r1, r1, #28
 8002dbc:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
        Eko = BCo ^ ((~BCu) & BCa);
 8002dc0:	9526      	str	r5, [sp, #152]	; 0x98
        Ake ^= De;
 8002dc2:	9b04      	ldr	r3, [sp, #16]
 8002dc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
        BCi = ROL(Ake, 10);
        Ami ^= Di;
        BCo = ROL(Ami, 15);
        Aso ^= Do;
 8002dc6:	9f39      	ldr	r7, [sp, #228]	; 0xe4
        Ake ^= De;
 8002dc8:	ea83 0402 	eor.w	r4, r3, r2
 8002dcc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002dce:	9b05      	ldr	r3, [sp, #20]
 8002dd0:	ea83 0502 	eor.w	r5, r3, r2
        BCi = ROL(Ake, 10);
 8002dd4:	ea4f 2885 	mov.w	r8, r5, lsl #10
 8002dd8:	ea48 5894 	orr.w	r8, r8, r4, lsr #22
 8002ddc:	02a4      	lsls	r4, r4, #10
 8002dde:	ea44 5595 	orr.w	r5, r4, r5, lsr #22
        Ami ^= Di;
 8002de2:	9a06      	ldr	r2, [sp, #24]
 8002de4:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8002de6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8002de8:	4054      	eors	r4, r2
 8002dea:	ea8b 0303 	eor.w	r3, fp, r3
        BCo = ROL(Ami, 15);
 8002dee:	03e2      	lsls	r2, r4, #15
 8002df0:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8002df4:	03db      	lsls	r3, r3, #15
 8002df6:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
        Aso ^= Do;
 8002dfa:	9c07      	ldr	r4, [sp, #28]
 8002dfc:	ea84 0907 	eor.w	r9, r4, r7
 8002e00:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 8002e02:	9c08      	ldr	r4, [sp, #32]
 8002e04:	407c      	eors	r4, r7
        BCu = ROL(Aso, 56);
 8002e06:	ea4f 2719 	mov.w	r7, r9, lsr #8
 8002e0a:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
        Ema = BCa ^ ((~BCe) & BCi);
 8002e0e:	ea25 0a06 	bic.w	sl, r5, r6
        BCu = ROL(Aso, 56);
 8002e12:	0a24      	lsrs	r4, r4, #8
 8002e14:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
        Ema = BCa ^ ((~BCe) & BCi);
 8002e18:	ea8a 0a0c 	eor.w	sl, sl, ip
 8002e1c:	ea28 0901 	bic.w	r9, r8, r1
 8002e20:	ea89 090e 	eor.w	r9, r9, lr
 8002e24:	f8cd a0e4 	str.w	sl, [sp, #228]	; 0xe4
        Eme = BCe ^ ((~BCi) & BCo);
 8002e28:	ea23 0a05 	bic.w	sl, r3, r5
 8002e2c:	ea8a 0a06 	eor.w	sl, sl, r6
        Ema = BCa ^ ((~BCe) & BCi);
 8002e30:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
        Eme = BCe ^ ((~BCi) & BCo);
 8002e34:	ea22 0908 	bic.w	r9, r2, r8
 8002e38:	ea89 0901 	eor.w	r9, r9, r1
 8002e3c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
        Emi = BCi ^ ((~BCo) & BCu);
 8002e40:	ea27 0a03 	bic.w	sl, r7, r3
 8002e44:	ea8a 0505 	eor.w	r5, sl, r5
        Eme = BCe ^ ((~BCi) & BCo);
 8002e48:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
        Emi = BCi ^ ((~BCo) & BCu);
 8002e4c:	ea24 0902 	bic.w	r9, r4, r2
 8002e50:	952e      	str	r5, [sp, #184]	; 0xb8
 8002e52:	ea89 0508 	eor.w	r5, r9, r8
        Emo = BCo ^ ((~BCu) & BCa);
 8002e56:	ea2c 0807 	bic.w	r8, ip, r7
 8002e5a:	ea88 0303 	eor.w	r3, r8, r3
        Emi = BCi ^ ((~BCo) & BCu);
 8002e5e:	952f      	str	r5, [sp, #188]	; 0xbc
        Emo = BCo ^ ((~BCu) & BCa);
 8002e60:	ea2e 0504 	bic.w	r5, lr, r4
        Emu = BCu ^ ((~BCa) & BCe);
 8002e64:	ea26 0c0c 	bic.w	ip, r6, ip
        Emo = BCo ^ ((~BCu) & BCa);
 8002e68:	9314      	str	r3, [sp, #80]	; 0x50
 8002e6a:	ea85 0302 	eor.w	r3, r5, r2
        Emu = BCu ^ ((~BCa) & BCe);
 8002e6e:	ea21 010e 	bic.w	r1, r1, lr
        Emo = BCo ^ ((~BCu) & BCa);
 8002e72:	9315      	str	r3, [sp, #84]	; 0x54
        Emu = BCu ^ ((~BCa) & BCe);
 8002e74:	ea8c 0307 	eor.w	r3, ip, r7
 8002e78:	9322      	str	r3, [sp, #136]	; 0x88
 8002e7a:	ea81 0304 	eor.w	r3, r1, r4
 8002e7e:	9323      	str	r3, [sp, #140]	; 0x8c

        Abi ^= Di;
 8002e80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002e84:	ea8b 0903 	eor.w	r9, fp, r3
 8002e88:	9b06      	ldr	r3, [sp, #24]
 8002e8a:	ea83 0a02 	eor.w	sl, r3, r2
        BCa = ROL(Abi, 62);
        Ago ^= Do;
 8002e8e:	9b07      	ldr	r3, [sp, #28]
 8002e90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002e92:	ea83 0c02 	eor.w	ip, r3, r2
 8002e96:	9b08      	ldr	r3, [sp, #32]
 8002e98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002e9a:	ea83 0702 	eor.w	r7, r3, r2
        BCe = ROL(Ago, 55);
        Aku ^= Du;
 8002e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002ea2:	ea83 0402 	eor.w	r4, r3, r2
 8002ea6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eaa:	ea83 0102 	eor.w	r1, r3, r2
        BCi = ROL(Aku, 39);
        Ama ^= Da;
 8002eae:	9b02      	ldr	r3, [sp, #8]
 8002eb0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
        BCa = ROL(Abi, 62);
 8002eb2:	ea4f 0699 	mov.w	r6, r9, lsr #2
        Ama ^= Da;
 8002eb6:	ea83 0b02 	eor.w	fp, r3, r2
        BCe = ROL(Ago, 55);
 8002eba:	ea4f 2e5c 	mov.w	lr, ip, lsr #9
        Ama ^= Da;
 8002ebe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8002ec0:	9b03      	ldr	r3, [sp, #12]
        BCa = ROL(Abi, 62);
 8002ec2:	ea46 768a 	orr.w	r6, r6, sl, lsl #30
        BCe = ROL(Ago, 55);
 8002ec6:	ea4e 5ec7 	orr.w	lr, lr, r7, lsl #23
        BCa = ROL(Abi, 62);
 8002eca:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
        BCe = ROL(Ago, 55);
 8002ece:	0a7f      	lsrs	r7, r7, #9
 8002ed0:	ea47 55cc 	orr.w	r5, r7, ip, lsl #23
        BCa = ROL(Abi, 62);
 8002ed4:	ea4a 7989 	orr.w	r9, sl, r9, lsl #30
        BCi = ROL(Aku, 39);
 8002ed8:	ea4f 6c54 	mov.w	ip, r4, lsr #25
        Ama ^= Da;
 8002edc:	ea83 0a02 	eor.w	sl, r3, r2
        BCo = ROL(Ama, 41);
        Ase ^= De;
 8002ee0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8002ee2:	9b04      	ldr	r3, [sp, #16]
        BCi = ROL(Aku, 39);
 8002ee4:	ea4c 1cc1 	orr.w	ip, ip, r1, lsl #7
        BCo = ROL(Ama, 41);
 8002ee8:	ea4f 57da 	mov.w	r7, sl, lsr #23
        BCi = ROL(Aku, 39);
 8002eec:	0e49      	lsrs	r1, r1, #25
 8002eee:	ea41 18c4 	orr.w	r8, r1, r4, lsl #7
        BCo = ROL(Ama, 41);
 8002ef2:	ea47 274b 	orr.w	r7, r7, fp, lsl #9
 8002ef6:	ea4f 51db 	mov.w	r1, fp, lsr #23
        Ase ^= De;
 8002efa:	ea83 0b02 	eor.w	fp, r3, r2
 8002efe:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8002f00:	9b05      	ldr	r3, [sp, #20]
        BCo = ROL(Ama, 41);
 8002f02:	ea41 214a 	orr.w	r1, r1, sl, lsl #9
        Ase ^= De;
 8002f06:	ea83 0a02 	eor.w	sl, r3, r2
        BCu = ROL(Ase, 2);
 8002f0a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8002f0e:	ea43 729a 	orr.w	r2, r3, sl, lsr #30
        Esa = BCa ^ ((~BCe) & BCi);
 8002f12:	ea28 0305 	bic.w	r3, r8, r5
 8002f16:	ea83 0309 	eor.w	r3, r3, r9
        BCu = ROL(Ase, 2);
 8002f1a:	ea4f 048a 	mov.w	r4, sl, lsl #2
        Esa = BCa ^ ((~BCe) & BCi);
 8002f1e:	ea2c 0a0e 	bic.w	sl, ip, lr
 8002f22:	ea8a 0a06 	eor.w	sl, sl, r6
 8002f26:	9329      	str	r3, [sp, #164]	; 0xa4
        Ese = BCe ^ ((~BCi) & BCo);
 8002f28:	ea21 030c 	bic.w	r3, r1, ip
        Esa = BCa ^ ((~BCe) & BCi);
 8002f2c:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
        Ese = BCe ^ ((~BCi) & BCo);
 8002f30:	ea83 030e 	eor.w	r3, r3, lr
 8002f34:	ea27 0a08 	bic.w	sl, r7, r8
        BCu = ROL(Ase, 2);
 8002f38:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
        Ese = BCe ^ ((~BCi) & BCo);
 8002f3c:	9335      	str	r3, [sp, #212]	; 0xd4
 8002f3e:	ea8a 0305 	eor.w	r3, sl, r5
 8002f42:	9336      	str	r3, [sp, #216]	; 0xd8
        Esi = BCi ^ ((~BCo) & BCu);
 8002f44:	ea24 0307 	bic.w	r3, r4, r7
 8002f48:	ea83 0308 	eor.w	r3, r3, r8
 8002f4c:	931d      	str	r3, [sp, #116]	; 0x74
        Eso = BCo ^ ((~BCu) & BCa);
 8002f4e:	ea29 0304 	bic.w	r3, r9, r4
 8002f52:	407b      	eors	r3, r7
 8002f54:	932b      	str	r3, [sp, #172]	; 0xac
        Esu = BCu ^ ((~BCa) & BCe);
 8002f56:	ea2e 0306 	bic.w	r3, lr, r6
        Esi = BCi ^ ((~BCo) & BCu);
 8002f5a:	ea22 0a01 	bic.w	sl, r2, r1
        Esu = BCu ^ ((~BCa) & BCe);
 8002f5e:	ea25 0909 	bic.w	r9, r5, r9
 8002f62:	4053      	eors	r3, r2
        Esi = BCi ^ ((~BCo) & BCu);
 8002f64:	ea8a 0c0c 	eor.w	ip, sl, ip
        Esu = BCu ^ ((~BCa) & BCe);
 8002f68:	9310      	str	r3, [sp, #64]	; 0x40
 8002f6a:	ea89 0304 	eor.w	r3, r9, r4
        Esi = BCi ^ ((~BCo) & BCu);
 8002f6e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
        Esu = BCu ^ ((~BCa) & BCe);
 8002f72:	9311      	str	r3, [sp, #68]	; 0x44
        Eso = BCo ^ ((~BCu) & BCa);
 8002f74:	ea26 0c02 	bic.w	ip, r6, r2

        //    prepareTheta
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 8002f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f7a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
        Eso = BCo ^ ((~BCu) & BCa);
 8002f7c:	ea8c 0101 	eor.w	r1, ip, r1
 8002f80:	912a      	str	r1, [sp, #168]	; 0xa8
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 8002f82:	405a      	eors	r2, r3
 8002f84:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8002f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f88:	ea83 0601 	eor.w	r6, r3, r1
 8002f8c:	991a      	ldr	r1, [sp, #104]	; 0x68
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 8002f8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 8002f90:	404a      	eors	r2, r1
 8002f92:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002f94:	404e      	eors	r6, r1
 8002f96:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8002f98:	404a      	eors	r2, r1
 8002f9a:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8002f9c:	404e      	eors	r6, r1
 8002f9e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8002fa0:	404a      	eors	r2, r1
 8002fa2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002fa4:	404e      	eors	r6, r1
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 8002fa6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002fa8:	ea83 0901 	eor.w	r9, r3, r1
 8002fac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002fae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002fb0:	ea83 0801 	eor.w	r8, r3, r1
 8002fb4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 8002fb6:	9920      	ldr	r1, [sp, #128]	; 0x80
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8002fb8:	f8dd e0f4 	ldr.w	lr, [sp, #244]	; 0xf4
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 8002fbc:	ea89 0903 	eor.w	r9, r9, r3
 8002fc0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8002fc2:	ea88 0803 	eor.w	r8, r8, r3
 8002fc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002fc8:	ea89 0903 	eor.w	r9, r9, r3
 8002fcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002fce:	ea88 0803 	eor.w	r8, r8, r3
 8002fd2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002fd4:	ea89 0903 	eor.w	r9, r9, r3
 8002fd8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8002fda:	ea88 0803 	eor.w	r8, r8, r3
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 8002fde:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8002fe0:	ea83 0c01 	eor.w	ip, r3, r1
 8002fe4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8002fe6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8002fe8:	ea83 0701 	eor.w	r7, r3, r1
 8002fec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002ff0:	ea8c 0c03 	eor.w	ip, ip, r3
 8002ff4:	404f      	eors	r7, r1
 8002ff6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8002ff8:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8002ffa:	ea8c 0c03 	eor.w	ip, ip, r3
 8002ffe:	404f      	eors	r7, r1
 8003000:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003002:	991d      	ldr	r1, [sp, #116]	; 0x74
 8003004:	ea8c 0c03 	eor.w	ip, ip, r3
 8003008:	404f      	eors	r7, r1
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 800300a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800300c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800300e:	ea83 0501 	eor.w	r5, r3, r1
 8003012:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003014:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8003016:	ea83 0401 	eor.w	r4, r3, r1
 800301a:	9926      	ldr	r1, [sp, #152]	; 0x98
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 800301c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 800301e:	404d      	eors	r5, r1
 8003020:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8003022:	404c      	eors	r4, r1
 8003024:	9914      	ldr	r1, [sp, #80]	; 0x50
 8003026:	404d      	eors	r5, r1
 8003028:	9915      	ldr	r1, [sp, #84]	; 0x54
 800302a:	404c      	eors	r4, r1
 800302c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800302e:	404d      	eors	r5, r1
 8003030:	992b      	ldr	r1, [sp, #172]	; 0xac
 8003032:	404c      	eors	r4, r1
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8003034:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8003036:	4059      	eors	r1, r3
 8003038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800303a:	ea83 0e0e 	eor.w	lr, r3, lr
 800303e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003040:	4059      	eors	r1, r3
 8003042:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8003044:	ea8e 0e03 	eor.w	lr, lr, r3
 8003048:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800304a:	4059      	eors	r1, r3
 800304c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800304e:	ea8e 0e03 	eor.w	lr, lr, r3
 8003052:	9b10      	ldr	r3, [sp, #64]	; 0x40

        // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
        Da = BCu ^ ROL(BCe, 1);
 8003054:	ea4f 0b49 	mov.w	fp, r9, lsl #1
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8003058:	4059      	eors	r1, r3
 800305a:	9b11      	ldr	r3, [sp, #68]	; 0x44
        Da = BCu ^ ROL(BCe, 1);
 800305c:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8003060:	ea4f 0a48 	mov.w	sl, r8, lsl #1
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8003064:	ea8e 0e03 	eor.w	lr, lr, r3
        Da = BCu ^ ROL(BCe, 1);
 8003068:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 800306c:	ea8b 0301 	eor.w	r3, fp, r1
        De = BCa ^ ROL(BCi, 1);
 8003070:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
        Da = BCu ^ ROL(BCe, 1);
 8003074:	9302      	str	r3, [sp, #8]
        De = BCa ^ ROL(BCi, 1);
 8003076:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
        Da = BCu ^ ROL(BCe, 1);
 800307a:	ea8a 030e 	eor.w	r3, sl, lr
        De = BCa ^ ROL(BCi, 1);
 800307e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
        Da = BCu ^ ROL(BCe, 1);
 8003082:	9303      	str	r3, [sp, #12]
        De = BCa ^ ROL(BCi, 1);
 8003084:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8003088:	ea8b 0302 	eor.w	r3, fp, r2
        Di = BCe ^ ROL(BCo, 1);
 800308c:	ea4f 0b45 	mov.w	fp, r5, lsl #1
        De = BCa ^ ROL(BCi, 1);
 8003090:	9304      	str	r3, [sp, #16]
        Di = BCe ^ ROL(BCo, 1);
 8003092:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
        De = BCa ^ ROL(BCi, 1);
 8003096:	ea8a 0306 	eor.w	r3, sl, r6
        Di = BCe ^ ROL(BCo, 1);
 800309a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
        De = BCa ^ ROL(BCi, 1);
 800309e:	9305      	str	r3, [sp, #20]
        Di = BCe ^ ROL(BCo, 1);
 80030a0:	ea4a 7ad5 	orr.w	sl, sl, r5, lsr #31
 80030a4:	ea8b 0309 	eor.w	r3, fp, r9
 80030a8:	9306      	str	r3, [sp, #24]
 80030aa:	ea8a 0308 	eor.w	r3, sl, r8
        Do = BCi ^ ROL(BCu, 1);
 80030ae:	ea4f 084e 	mov.w	r8, lr, lsl #1
 80030b2:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 80030b6:	0049      	lsls	r1, r1, #1
 80030b8:	ea41 71de 	orr.w	r1, r1, lr, lsr #31
        Di = BCe ^ ROL(BCo, 1);
 80030bc:	9307      	str	r3, [sp, #28]
        Do = BCi ^ ROL(BCu, 1);
 80030be:	ea81 030c 	eor.w	r3, r1, ip
 80030c2:	9308      	str	r3, [sp, #32]
 80030c4:	ea88 0307 	eor.w	r3, r8, r7
        Du = BCo ^ ROL(BCa, 1);
 80030c8:	0077      	lsls	r7, r6, #1
 80030ca:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 80030ce:	0052      	lsls	r2, r2, #1
 80030d0:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
        Do = BCi ^ ROL(BCu, 1);
 80030d4:	9309      	str	r3, [sp, #36]	; 0x24
        Du = BCo ^ ROL(BCa, 1);
 80030d6:	ea82 0305 	eor.w	r3, r2, r5
 80030da:	930a      	str	r3, [sp, #40]	; 0x28
 80030dc:	ea87 0304 	eor.w	r3, r7, r4

        Eba ^= Da;
 80030e0:	9a02      	ldr	r2, [sp, #8]
        Du = BCo ^ ROL(BCa, 1);
 80030e2:	930b      	str	r3, [sp, #44]	; 0x2c
        Eba ^= Da;
 80030e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030e6:	ea83 0702 	eor.w	r7, r3, r2
 80030ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ec:	9a03      	ldr	r2, [sp, #12]
 80030ee:	ea83 0b02 	eor.w	fp, r3, r2
        BCa = Eba;
        Ege ^= De;
 80030f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80030f4:	9a04      	ldr	r2, [sp, #16]
 80030f6:	ea83 0a02 	eor.w	sl, r3, r2
 80030fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030fc:	9a05      	ldr	r2, [sp, #20]
        BCe = ROL(Ege, 44);
 80030fe:	ea4f 541a 	mov.w	r4, sl, lsr #20
        Ege ^= De;
 8003102:	ea83 0602 	eor.w	r6, r3, r2
        Eki ^= Di;
 8003106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003108:	9a06      	ldr	r2, [sp, #24]
        BCe = ROL(Ege, 44);
 800310a:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
 800310e:	0d36      	lsrs	r6, r6, #20
 8003110:	ea46 360a 	orr.w	r6, r6, sl, lsl #12
        Eki ^= Di;
 8003114:	ea83 0a02 	eor.w	sl, r3, r2
 8003118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800311a:	9a07      	ldr	r2, [sp, #28]
 800311c:	ea83 0902 	eor.w	r9, r3, r2
        BCi = ROL(Eki, 43);
        Emo ^= Do;
 8003120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003122:	9a08      	ldr	r2, [sp, #32]
 8003124:	ea83 0c02 	eor.w	ip, r3, r2
 8003128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800312a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800312c:	ea83 0502 	eor.w	r5, r3, r2
        BCo = ROL(Emo, 21);
 8003130:	ea4f 524c 	mov.w	r2, ip, lsl #21
 8003134:	ea42 22d5 	orr.w	r2, r2, r5, lsr #11
        Esu ^= Du;
 8003138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        BCo = ROL(Emo, 21);
 800313a:	ea4f 5e45 	mov.w	lr, r5, lsl #21
        Esu ^= Du;
 800313e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003140:	405d      	eors	r5, r3
        BCo = ROL(Emo, 21);
 8003142:	ea4e 2edc 	orr.w	lr, lr, ip, lsr #11
        Esu ^= Du;
 8003146:	462b      	mov	r3, r5
 8003148:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800314a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800314e:	ea85 050c 	eor.w	r5, r5, ip
        BCu = ROL(Esu, 14);
 8003152:	ea4f 3c85 	mov.w	ip, r5, lsl #14
 8003156:	ea4c 4c93 	orr.w	ip, ip, r3, lsr #18
 800315a:	039b      	lsls	r3, r3, #14
 800315c:	ea43 4395 	orr.w	r3, r3, r5, lsr #18
        Aba = BCa ^ ((~BCe) & BCi);
        Aba ^= KeccakF_RoundConstants[round + 1];
 8003160:	9d01      	ldr	r5, [sp, #4]
 8003162:	68ad      	ldr	r5, [r5, #8]
 8003164:	950c      	str	r5, [sp, #48]	; 0x30
 8003166:	9d01      	ldr	r5, [sp, #4]
        BCi = ROL(Eki, 43);
 8003168:	ea4f 585a 	mov.w	r8, sl, lsr #21
 800316c:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
        Aba ^= KeccakF_RoundConstants[round + 1];
 8003170:	68ed      	ldr	r5, [r5, #12]
        BCi = ROL(Eki, 43);
 8003172:	ea4f 5959 	mov.w	r9, r9, lsr #21
 8003176:	ea49 21ca 	orr.w	r1, r9, sl, lsl #11
        Aba ^= KeccakF_RoundConstants[round + 1];
 800317a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        Aba = BCa ^ ((~BCe) & BCi);
 800317e:	ea28 0a04 	bic.w	sl, r8, r4
        Aba ^= KeccakF_RoundConstants[round + 1];
 8003182:	ea8b 0505 	eor.w	r5, fp, r5
 8003186:	950d      	str	r5, [sp, #52]	; 0x34
 8003188:	ea87 0909 	eor.w	r9, r7, r9
        Aba = BCa ^ ((~BCe) & BCi);
 800318c:	4655      	mov	r5, sl
        Aba ^= KeccakF_RoundConstants[round + 1];
 800318e:	ea89 0905 	eor.w	r9, r9, r5
 8003192:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003194:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        Aba = BCa ^ ((~BCe) & BCi);
 8003198:	ea21 0a06 	bic.w	sl, r1, r6
        Aba ^= KeccakF_RoundConstants[round + 1];
 800319c:	ea85 050a 	eor.w	r5, r5, sl
 80031a0:	950d      	str	r5, [sp, #52]	; 0x34
        Abe = BCe ^ ((~BCi) & BCo);
 80031a2:	ea2e 0501 	bic.w	r5, lr, r1
 80031a6:	4075      	eors	r5, r6
 80031a8:	ea22 0908 	bic.w	r9, r2, r8
 80031ac:	950f      	str	r5, [sp, #60]	; 0x3c
        Abi = BCi ^ ((~BCo) & BCu);
 80031ae:	ea2c 050e 	bic.w	r5, ip, lr
        Abe = BCe ^ ((~BCi) & BCo);
 80031b2:	ea89 0904 	eor.w	r9, r9, r4
        Abi = BCi ^ ((~BCo) & BCu);
 80031b6:	4069      	eors	r1, r5
        Abo = BCo ^ ((~BCu) & BCa);
 80031b8:	ea27 0503 	bic.w	r5, r7, r3
        Abu = BCu ^ ((~BCa) & BCe);
 80031bc:	ea24 0707 	bic.w	r7, r4, r7
 80031c0:	ea26 060b 	bic.w	r6, r6, fp
        Abe = BCe ^ ((~BCi) & BCo);
 80031c4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
        Abi = BCi ^ ((~BCo) & BCu);
 80031c8:	9111      	str	r1, [sp, #68]	; 0x44
 80031ca:	ea23 0902 	bic.w	r9, r3, r2
        Abo = BCo ^ ((~BCu) & BCa);
 80031ce:	ea2b 010c 	bic.w	r1, fp, ip
 80031d2:	406a      	eors	r2, r5
        Abu = BCu ^ ((~BCa) & BCe);
 80031d4:	407b      	eors	r3, r7
        Abo = BCo ^ ((~BCu) & BCa);
 80031d6:	9212      	str	r2, [sp, #72]	; 0x48
        Abu = BCu ^ ((~BCa) & BCe);
 80031d8:	9314      	str	r3, [sp, #80]	; 0x50
        Abo = BCo ^ ((~BCu) & BCa);
 80031da:	ea81 020e 	eor.w	r2, r1, lr
        Abu = BCu ^ ((~BCa) & BCe);
 80031de:	ea86 030c 	eor.w	r3, r6, ip
        Abo = BCo ^ ((~BCu) & BCa);
 80031e2:	9213      	str	r2, [sp, #76]	; 0x4c
        Abu = BCu ^ ((~BCa) & BCe);
 80031e4:	9315      	str	r3, [sp, #84]	; 0x54

        Ebo ^= Do;
 80031e6:	9a08      	ldr	r2, [sp, #32]
 80031e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80031ea:	ea83 0102 	eor.w	r1, r3, r2
 80031ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031f2:	ea83 0e02 	eor.w	lr, r3, r2
        BCa = ROL(Ebo, 28);
 80031f6:	ea4f 7b0e 	mov.w	fp, lr, lsl #28
        Egu ^= Du;
 80031fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80031fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        BCa = ROL(Ebo, 28);
 80031fe:	ea4b 1b11 	orr.w	fp, fp, r1, lsr #4
 8003202:	0709      	lsls	r1, r1, #28
 8003204:	ea41 141e 	orr.w	r4, r1, lr, lsr #4
        Egu ^= Du;
 8003208:	ea83 0e02 	eor.w	lr, r3, r2
 800320c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800320e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003210:	ea83 0502 	eor.w	r5, r3, r2
        BCe = ROL(Egu, 20);
        Eka ^= Da;
 8003214:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003216:	9a02      	ldr	r2, [sp, #8]
        BCe = ROL(Egu, 20);
 8003218:	052e      	lsls	r6, r5, #20
        Eka ^= Da;
 800321a:	ea83 0a02 	eor.w	sl, r3, r2
 800321e:	9a03      	ldr	r2, [sp, #12]
 8003220:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        BCe = ROL(Egu, 20);
 8003222:	ea46 361e 	orr.w	r6, r6, lr, lsr #12
        Abi = BCi ^ ((~BCo) & BCu);
 8003226:	ea89 0808 	eor.w	r8, r9, r8
        BCe = ROL(Egu, 20);
 800322a:	ea4f 5e0e 	mov.w	lr, lr, lsl #20
 800322e:	ea4e 3115 	orr.w	r1, lr, r5, lsr #12
        Eka ^= Da;
 8003232:	ea83 0902 	eor.w	r9, r3, r2
        Abi = BCi ^ ((~BCo) & BCu);
 8003236:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        BCi = ROL(Eka, 3);
        Eme ^= De;
 800323a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800323c:	9d04      	ldr	r5, [sp, #16]
 800323e:	f8dd c014 	ldr.w	ip, [sp, #20]
        BCo = ROL(Eme, 45);
        Esi ^= Di;
 8003242:	f8dd e01c 	ldr.w	lr, [sp, #28]
        Eme ^= De;
 8003246:	406b      	eors	r3, r5
        BCi = ROL(Eka, 3);
 8003248:	ea4f 07c9 	mov.w	r7, r9, lsl #3
        Eme ^= De;
 800324c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
        BCi = ROL(Eka, 3);
 800324e:	ea47 775a 	orr.w	r7, r7, sl, lsr #29
 8003252:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003256:	ea4a 7259 	orr.w	r2, sl, r9, lsr #29
        Eme ^= De;
 800325a:	ea85 090c 	eor.w	r9, r5, ip
        BCo = ROL(Eme, 45);
 800325e:	0cdd      	lsrs	r5, r3, #19
 8003260:	ea45 3549 	orr.w	r5, r5, r9, lsl #13
 8003264:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8003268:	ea49 3a43 	orr.w	sl, r9, r3, lsl #13
        Esi ^= Di;
 800326c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003270:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003272:	ea83 0c0c 	eor.w	ip, r3, ip
 8003276:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        BCu = ROL(Esi, 61);
 8003278:	ea4f 08dc 	mov.w	r8, ip, lsr #3
        Esi ^= Di;
 800327c:	ea83 030e 	eor.w	r3, r3, lr
        BCu = ROL(Esi, 61);
 8003280:	ea48 7843 	orr.w	r8, r8, r3, lsl #29
        Aga = BCa ^ ((~BCe) & BCi);
 8003284:	ea22 0e01 	bic.w	lr, r2, r1
        BCu = ROL(Esi, 61);
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	ea43 734c 	orr.w	r3, r3, ip, lsl #29
        Aga = BCa ^ ((~BCe) & BCi);
 800328e:	ea8e 0e04 	eor.w	lr, lr, r4
 8003292:	ea27 0c06 	bic.w	ip, r7, r6
 8003296:	ea8c 0c0b 	eor.w	ip, ip, fp
 800329a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
        Age = BCe ^ ((~BCi) & BCo);
 800329e:	ea25 0e02 	bic.w	lr, r5, r2
 80032a2:	ea8e 0e01 	eor.w	lr, lr, r1
        Aga = BCa ^ ((~BCe) & BCi);
 80032a6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
        Age = BCe ^ ((~BCi) & BCo);
 80032aa:	ea2a 0c07 	bic.w	ip, sl, r7
 80032ae:	ea8c 0c06 	eor.w	ip, ip, r6
 80032b2:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
        Agi = BCi ^ ((~BCo) & BCu);
 80032b6:	ea28 0e05 	bic.w	lr, r8, r5
 80032ba:	ea8e 0202 	eor.w	r2, lr, r2
        Age = BCe ^ ((~BCi) & BCo);
 80032be:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
        Agi = BCi ^ ((~BCo) & BCu);
 80032c2:	ea23 0c0a 	bic.w	ip, r3, sl
 80032c6:	921a      	str	r2, [sp, #104]	; 0x68
 80032c8:	ea8c 0207 	eor.w	r2, ip, r7
 80032cc:	921b      	str	r2, [sp, #108]	; 0x6c
        Ago = BCo ^ ((~BCu) & BCa);
 80032ce:	ea2b 0203 	bic.w	r2, fp, r3
 80032d2:	ea82 020a 	eor.w	r2, r2, sl
        Agu = BCu ^ ((~BCa) & BCe);
 80032d6:	ea21 0104 	bic.w	r1, r1, r4
 80032da:	ea26 060b 	bic.w	r6, r6, fp
 80032de:	4073      	eors	r3, r6
        Ago = BCo ^ ((~BCu) & BCa);
 80032e0:	921d      	str	r2, [sp, #116]	; 0x74
        Agu = BCu ^ ((~BCa) & BCe);
 80032e2:	ea81 0208 	eor.w	r2, r1, r8
 80032e6:	921e      	str	r2, [sp, #120]	; 0x78
 80032e8:	931f      	str	r3, [sp, #124]	; 0x7c

        Ebe ^= De;
 80032ea:	9a04      	ldr	r2, [sp, #16]
 80032ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
        Ago = BCo ^ ((~BCu) & BCa);
 80032ee:	ea24 0708 	bic.w	r7, r4, r8
 80032f2:	407d      	eors	r5, r7
        Ebe ^= De;
 80032f4:	ea83 0702 	eor.w	r7, r3, r2
 80032f8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80032fa:	9a05      	ldr	r2, [sp, #20]
        Ago = BCo ^ ((~BCu) & BCa);
 80032fc:	951c      	str	r5, [sp, #112]	; 0x70
        Ebe ^= De;
 80032fe:	ea83 0602 	eor.w	r6, r3, r2
        BCa = ROL(Ebe, 1);
        Egi ^= Di;
 8003302:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003304:	9a06      	ldr	r2, [sp, #24]
        BCa = ROL(Ebe, 1);
 8003306:	ea4f 0846 	mov.w	r8, r6, lsl #1
        Egi ^= Di;
 800330a:	ea83 0402 	eor.w	r4, r3, r2
 800330e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003310:	9a07      	ldr	r2, [sp, #28]
        BCa = ROL(Ebe, 1);
 8003312:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 8003316:	007f      	lsls	r7, r7, #1
 8003318:	ea47 7bd6 	orr.w	fp, r7, r6, lsr #31
        Egi ^= Di;
 800331c:	ea83 0602 	eor.w	r6, r3, r2
        BCe = ROL(Egi, 6);
        Eko ^= Do;
 8003320:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003322:	9a08      	ldr	r2, [sp, #32]
 8003324:	ea83 0502 	eor.w	r5, r3, r2
 8003328:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800332a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800332c:	ea83 0102 	eor.w	r1, r3, r2
        BCi = ROL(Eko, 25);
 8003330:	066a      	lsls	r2, r5, #25
 8003332:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
        Emu ^= Du;
 8003336:	9b22      	ldr	r3, [sp, #136]	; 0x88
        BCi = ROL(Eko, 25);
 8003338:	ea4f 6a41 	mov.w	sl, r1, lsl #25
        Emu ^= Du;
 800333c:	990a      	ldr	r1, [sp, #40]	; 0x28
        BCe = ROL(Egi, 6);
 800333e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
        Emu ^= Du;
 8003342:	ea83 0701 	eor.w	r7, r3, r1
 8003346:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003348:	990b      	ldr	r1, [sp, #44]	; 0x2c
        BCe = ROL(Egi, 6);
 800334a:	ea4c 6c94 	orr.w	ip, ip, r4, lsr #26
 800334e:	01a4      	lsls	r4, r4, #6
 8003350:	ea44 6996 	orr.w	r9, r4, r6, lsr #26
        Emu ^= Du;
 8003354:	ea83 0401 	eor.w	r4, r3, r1
        BCo = ROL(Emu, 8);
 8003358:	0221      	lsls	r1, r4, #8
 800335a:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
 800335e:	023f      	lsls	r7, r7, #8
 8003360:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
        Esa ^= Da;
 8003364:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003366:	9c02      	ldr	r4, [sp, #8]
        BCi = ROL(Eko, 25);
 8003368:	ea4a 1ad5 	orr.w	sl, sl, r5, lsr #7
        Esa ^= Da;
 800336c:	4063      	eors	r3, r4
 800336e:	9d03      	ldr	r5, [sp, #12]
 8003370:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003372:	406c      	eors	r4, r5
        BCu = ROL(Esa, 18);
 8003374:	ea4f 4e84 	mov.w	lr, r4, lsl #18
 8003378:	ea4e 3e93 	orr.w	lr, lr, r3, lsr #14
 800337c:	049b      	lsls	r3, r3, #18
 800337e:	ea43 3394 	orr.w	r3, r3, r4, lsr #14
        Aka = BCa ^ ((~BCe) & BCi);
 8003382:	ea2a 040c 	bic.w	r4, sl, ip
 8003386:	ea22 0509 	bic.w	r5, r2, r9
 800338a:	ea84 0408 	eor.w	r4, r4, r8
 800338e:	ea85 050b 	eor.w	r5, r5, fp
 8003392:	9421      	str	r4, [sp, #132]	; 0x84
        Ake = BCe ^ ((~BCi) & BCo);
 8003394:	ea27 0402 	bic.w	r4, r7, r2
 8003398:	ea84 0409 	eor.w	r4, r4, r9
        Aka = BCa ^ ((~BCe) & BCi);
 800339c:	9520      	str	r5, [sp, #128]	; 0x80
        Ake = BCe ^ ((~BCi) & BCo);
 800339e:	ea21 050a 	bic.w	r5, r1, sl
 80033a2:	9422      	str	r4, [sp, #136]	; 0x88
 80033a4:	ea85 040c 	eor.w	r4, r5, ip
        Aki = BCi ^ ((~BCo) & BCu);
 80033a8:	ea23 0507 	bic.w	r5, r3, r7
 80033ac:	406a      	eors	r2, r5
        Ake = BCe ^ ((~BCi) & BCo);
 80033ae:	9423      	str	r4, [sp, #140]	; 0x8c
        Aki = BCi ^ ((~BCo) & BCu);
 80033b0:	ea2e 0401 	bic.w	r4, lr, r1
        Ako = BCo ^ ((~BCu) & BCa);
        Aku = BCu ^ ((~BCa) & BCe);
 80033b4:	ea29 090b 	bic.w	r9, r9, fp
        Aki = BCi ^ ((~BCo) & BCu);
 80033b8:	9224      	str	r2, [sp, #144]	; 0x90
 80033ba:	ea84 020a 	eor.w	r2, r4, sl
        Aku = BCu ^ ((~BCa) & BCe);
 80033be:	ea2c 0c08 	bic.w	ip, ip, r8
        Ako = BCo ^ ((~BCu) & BCa);
 80033c2:	ea2b 0403 	bic.w	r4, fp, r3
        Aki = BCi ^ ((~BCo) & BCu);
 80033c6:	9225      	str	r2, [sp, #148]	; 0x94
        Aku = BCu ^ ((~BCa) & BCe);
 80033c8:	ea89 0303 	eor.w	r3, r9, r3
        Ako = BCo ^ ((~BCu) & BCa);
 80033cc:	ea28 020e 	bic.w	r2, r8, lr
 80033d0:	404a      	eors	r2, r1
        Aku = BCu ^ ((~BCa) & BCe);
 80033d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80033d4:	ea8c 030e 	eor.w	r3, ip, lr
        Ako = BCo ^ ((~BCu) & BCa);
 80033d8:	9227      	str	r2, [sp, #156]	; 0x9c
        Aku = BCu ^ ((~BCa) & BCe);
 80033da:	9329      	str	r3, [sp, #164]	; 0xa4

        Ebu ^= Du;
 80033dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033de:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        BCa = ROL(Ebu, 27);
        Ega ^= Da;
        BCe = ROL(Ega, 36);
        Eke ^= De;
 80033e0:	9905      	ldr	r1, [sp, #20]
        Ebu ^= Du;
 80033e2:	ea83 0502 	eor.w	r5, r3, r2
 80033e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033e8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80033ea:	4053      	eors	r3, r2
        BCa = ROL(Ebu, 27);
 80033ec:	ea4f 6bc3 	mov.w	fp, r3, lsl #27
 80033f0:	ea4b 1b55 	orr.w	fp, fp, r5, lsr #5
 80033f4:	06ed      	lsls	r5, r5, #27
 80033f6:	ea45 1c53 	orr.w	ip, r5, r3, lsr #5
        Ega ^= Da;
 80033fa:	9a02      	ldr	r2, [sp, #8]
 80033fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80033fe:	ea83 0a02 	eor.w	sl, r3, r2
 8003402:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003404:	9a03      	ldr	r2, [sp, #12]
 8003406:	ea83 0602 	eor.w	r6, r3, r2
        Eke ^= De;
 800340a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800340c:	9a04      	ldr	r2, [sp, #16]
 800340e:	405a      	eors	r2, r3
 8003410:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        BCe = ROL(Ega, 36);
 8003412:	ea4f 7e1a 	mov.w	lr, sl, lsr #28
 8003416:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
        Eke ^= De;
 800341a:	ea83 0901 	eor.w	r9, r3, r1
        BCe = ROL(Ega, 36);
 800341e:	0f36      	lsrs	r6, r6, #28
 8003420:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
        BCi = ROL(Eke, 10);
 8003424:	ea4f 2a89 	mov.w	sl, r9, lsl #10
 8003428:	ea4a 5a92 	orr.w	sl, sl, r2, lsr #22
        Emi ^= Di;
 800342c:	9906      	ldr	r1, [sp, #24]
        BCi = ROL(Eke, 10);
 800342e:	0293      	lsls	r3, r2, #10
        Emi ^= Di;
 8003430:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8003432:	ea82 0501 	eor.w	r5, r2, r1
 8003436:	9907      	ldr	r1, [sp, #28]
 8003438:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
        BCi = ROL(Eke, 10);
 800343a:	ea43 5399 	orr.w	r3, r3, r9, lsr #22
        Ako = BCo ^ ((~BCu) & BCa);
 800343e:	407c      	eors	r4, r7
        Emi ^= Di;
 8003440:	ea82 0901 	eor.w	r9, r2, r1
        Ako = BCo ^ ((~BCu) & BCa);
 8003444:	9426      	str	r4, [sp, #152]	; 0x98
        BCo = ROL(Emi, 15);
        Eso ^= Do;
 8003446:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8003448:	9908      	ldr	r1, [sp, #32]
        BCo = ROL(Emi, 15);
 800344a:	ea4f 34c9 	mov.w	r4, r9, lsl #15
 800344e:	ea44 4455 	orr.w	r4, r4, r5, lsr #17
 8003452:	03ed      	lsls	r5, r5, #15
 8003454:	ea45 4859 	orr.w	r8, r5, r9, lsr #17
        Eso ^= Do;
 8003458:	4051      	eors	r1, r2
 800345a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800345c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
        BCu = ROL(Eso, 56);
 800345e:	ea4f 2911 	mov.w	r9, r1, lsr #8
        Eso ^= Do;
 8003462:	ea82 0705 	eor.w	r7, r2, r5
        BCu = ROL(Eso, 56);
 8003466:	ea49 6907 	orr.w	r9, r9, r7, lsl #24
 800346a:	0a3f      	lsrs	r7, r7, #8
 800346c:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
        Ama = BCa ^ ((~BCe) & BCi);
 8003470:	ea23 010e 	bic.w	r1, r3, lr
 8003474:	ea2a 0206 	bic.w	r2, sl, r6
 8003478:	ea81 010c 	eor.w	r1, r1, ip
 800347c:	ea82 020b 	eor.w	r2, r2, fp
 8003480:	912a      	str	r1, [sp, #168]	; 0xa8
        Ame = BCe ^ ((~BCi) & BCo);
 8003482:	ea28 0103 	bic.w	r1, r8, r3
 8003486:	ea81 010e 	eor.w	r1, r1, lr
        Ama = BCa ^ ((~BCe) & BCi);
 800348a:	922b      	str	r2, [sp, #172]	; 0xac
        Ame = BCe ^ ((~BCi) & BCo);
 800348c:	ea24 020a 	bic.w	r2, r4, sl
 8003490:	4072      	eors	r2, r6
 8003492:	912c      	str	r1, [sp, #176]	; 0xb0
        Ami = BCi ^ ((~BCo) & BCu);
 8003494:	ea29 0108 	bic.w	r1, r9, r8
 8003498:	404b      	eors	r3, r1
        Ame = BCe ^ ((~BCi) & BCo);
 800349a:	922d      	str	r2, [sp, #180]	; 0xb4
        Ami = BCi ^ ((~BCo) & BCu);
 800349c:	ea27 0204 	bic.w	r2, r7, r4
        Amo = BCo ^ ((~BCu) & BCa);
 80034a0:	ea2c 0109 	bic.w	r1, ip, r9
        Ami = BCi ^ ((~BCo) & BCu);
 80034a4:	932e      	str	r3, [sp, #184]	; 0xb8
 80034a6:	ea82 030a 	eor.w	r3, r2, sl
 80034aa:	932f      	str	r3, [sp, #188]	; 0xbc
        Amo = BCo ^ ((~BCu) & BCa);
 80034ac:	ea2b 0207 	bic.w	r2, fp, r7
 80034b0:	ea81 0308 	eor.w	r3, r1, r8
        Amu = BCu ^ ((~BCa) & BCe);
 80034b4:	ea2e 0c0c 	bic.w	ip, lr, ip
        Amo = BCo ^ ((~BCu) & BCa);
 80034b8:	9330      	str	r3, [sp, #192]	; 0xc0
 80034ba:	ea82 0304 	eor.w	r3, r2, r4
        Amu = BCu ^ ((~BCa) & BCe);
 80034be:	ea26 060b 	bic.w	r6, r6, fp
        Amo = BCo ^ ((~BCu) & BCa);
 80034c2:	9331      	str	r3, [sp, #196]	; 0xc4
        Amu = BCu ^ ((~BCa) & BCe);
 80034c4:	ea8c 0309 	eor.w	r3, ip, r9
 80034c8:	9332      	str	r3, [sp, #200]	; 0xc8
 80034ca:	ea86 0307 	eor.w	r3, r6, r7

        Ebi ^= Di;
 80034ce:	9a06      	ldr	r2, [sp, #24]
        Amu = BCu ^ ((~BCa) & BCe);
 80034d0:	9333      	str	r3, [sp, #204]	; 0xcc
        Ebi ^= Di;
 80034d2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        BCa = ROL(Ebi, 62);
        Ego ^= Do;
 80034d4:	9908      	ldr	r1, [sp, #32]
        Ebi ^= Di;
 80034d6:	ea83 0902 	eor.w	r9, r3, r2
 80034da:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80034dc:	9a07      	ldr	r2, [sp, #28]
 80034de:	ea83 0802 	eor.w	r8, r3, r2
        Ego ^= Do;
 80034e2:	9a37      	ldr	r2, [sp, #220]	; 0xdc
        BCa = ROL(Ebi, 62);
 80034e4:	ea4f 0c99 	mov.w	ip, r9, lsr #2
        Ego ^= Do;
 80034e8:	ea82 0601 	eor.w	r6, r2, r1
 80034ec:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        BCe = ROL(Ego, 55);
        Eku ^= Du;
 80034ee:	990a      	ldr	r1, [sp, #40]	; 0x28
        BCa = ROL(Ebi, 62);
 80034f0:	ea4c 7c88 	orr.w	ip, ip, r8, lsl #30
 80034f4:	ea4f 0898 	mov.w	r8, r8, lsr #2
 80034f8:	ea48 7389 	orr.w	r3, r8, r9, lsl #30
        Ego ^= Do;
 80034fc:	ea82 0805 	eor.w	r8, r2, r5
        Eku ^= Du;
 8003500:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8003502:	ea82 0501 	eor.w	r5, r2, r1
 8003506:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8003508:	990b      	ldr	r1, [sp, #44]	; 0x2c
        BCi = ROL(Eku, 39);
 800350a:	ea4f 6b55 	mov.w	fp, r5, lsr #25
        Eku ^= Du;
 800350e:	ea82 0401 	eor.w	r4, r2, r1
        BCi = ROL(Eku, 39);
 8003512:	ea4b 1bc4 	orr.w	fp, fp, r4, lsl #7
        Ema ^= Da;
 8003516:	9a39      	ldr	r2, [sp, #228]	; 0xe4
        BCi = ROL(Eku, 39);
 8003518:	0e61      	lsrs	r1, r4, #25
        Ema ^= Da;
 800351a:	9c02      	ldr	r4, [sp, #8]
        BCi = ROL(Eku, 39);
 800351c:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
        Ema ^= Da;
 8003520:	4062      	eors	r2, r4
 8003522:	9d03      	ldr	r5, [sp, #12]
 8003524:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003526:	ea84 0a05 	eor.w	sl, r4, r5
        BCo = ROL(Ema, 41);
 800352a:	ea4f 54da 	mov.w	r4, sl, lsr #23
 800352e:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
        Ese ^= De;
 8003532:	9d04      	ldr	r5, [sp, #16]
        BCo = ROL(Ema, 41);
 8003534:	0dd7      	lsrs	r7, r2, #23
        Ese ^= De;
 8003536:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8003538:	ea82 0905 	eor.w	r9, r2, r5
 800353c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800353e:	9d05      	ldr	r5, [sp, #20]
        BCe = ROL(Ego, 55);
 8003540:	ea4f 2e56 	mov.w	lr, r6, lsr #9
 8003544:	ea4e 5ec8 	orr.w	lr, lr, r8, lsl #23
        BCo = ROL(Ema, 41);
 8003548:	ea47 274a 	orr.w	r7, r7, sl, lsl #9
        BCe = ROL(Ego, 55);
 800354c:	ea4f 2858 	mov.w	r8, r8, lsr #9
        Ese ^= De;
 8003550:	ea82 0a05 	eor.w	sl, r2, r5
        BCe = ROL(Ego, 55);
 8003554:	ea48 58c6 	orr.w	r8, r8, r6, lsl #23
        BCu = ROL(Ese, 2);
 8003558:	ea4f 068a 	mov.w	r6, sl, lsl #2
 800355c:	ea46 7599 	orr.w	r5, r6, r9, lsr #30
        Asa = BCa ^ ((~BCe) & BCi);
 8003560:	ea2b 020e 	bic.w	r2, fp, lr
        BCu = ROL(Ese, 2);
 8003564:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003568:	ea49 7a9a 	orr.w	sl, r9, sl, lsr #30
        Asa = BCa ^ ((~BCe) & BCi);
 800356c:	ea82 020c 	eor.w	r2, r2, ip
 8003570:	ea21 0908 	bic.w	r9, r1, r8
 8003574:	920b      	str	r2, [sp, #44]	; 0x2c
 8003576:	ea89 0203 	eor.w	r2, r9, r3
 800357a:	9234      	str	r2, [sp, #208]	; 0xd0
        Ase = BCe ^ ((~BCi) & BCo);
 800357c:	ea27 060b 	bic.w	r6, r7, fp
 8003580:	ea24 0201 	bic.w	r2, r4, r1
 8003584:	ea86 060e 	eor.w	r6, r6, lr
 8003588:	ea82 0208 	eor.w	r2, r2, r8
 800358c:	9635      	str	r6, [sp, #212]	; 0xd4
 800358e:	9236      	str	r2, [sp, #216]	; 0xd8
        Asi = BCi ^ ((~BCo) & BCu);
 8003590:	ea2a 0607 	bic.w	r6, sl, r7
 8003594:	ea25 0204 	bic.w	r2, r5, r4
 8003598:	404a      	eors	r2, r1
 800359a:	ea86 060b 	eor.w	r6, r6, fp
        Aso = BCo ^ ((~BCu) & BCa);
        Asu = BCu ^ ((~BCa) & BCe);
 800359e:	ea2e 0e0c 	bic.w	lr, lr, ip
        Asi = BCi ^ ((~BCo) & BCu);
 80035a2:	9637      	str	r6, [sp, #220]	; 0xdc
 80035a4:	9238      	str	r2, [sp, #224]	; 0xe0
        Asu = BCu ^ ((~BCa) & BCe);
 80035a6:	ea28 0603 	bic.w	r6, r8, r3
        Aso = BCo ^ ((~BCu) & BCa);
 80035aa:	ea23 0205 	bic.w	r2, r3, r5
        Asu = BCu ^ ((~BCa) & BCe);
 80035ae:	ea8e 030a 	eor.w	r3, lr, sl
 80035b2:	933b      	str	r3, [sp, #236]	; 0xec
    for (round = 0; round < NROUNDS; round += 2) {
 80035b4:	9b01      	ldr	r3, [sp, #4]
 80035b6:	3310      	adds	r3, #16
        Aso = BCo ^ ((~BCu) & BCa);
 80035b8:	4062      	eors	r2, r4
    for (round = 0; round < NROUNDS; round += 2) {
 80035ba:	9301      	str	r3, [sp, #4]
        Aso = BCo ^ ((~BCu) & BCa);
 80035bc:	923a      	str	r2, [sp, #232]	; 0xe8
    for (round = 0; round < NROUNDS; round += 2) {
 80035be:	4b40      	ldr	r3, [pc, #256]	; (80036c0 <KeccakF1600_StatePermute+0xe58>)
 80035c0:	9a01      	ldr	r2, [sp, #4]
        Aso = BCo ^ ((~BCu) & BCa);
 80035c2:	ea2c 090a 	bic.w	r9, ip, sl
 80035c6:	ea89 0107 	eor.w	r1, r9, r7
    for (round = 0; round < NROUNDS; round += 2) {
 80035ca:	4293      	cmp	r3, r2
        Aso = BCo ^ ((~BCu) & BCa);
 80035cc:	9139      	str	r1, [sp, #228]	; 0xe4
        Asu = BCu ^ ((~BCa) & BCe);
 80035ce:	ea86 0605 	eor.w	r6, r6, r5
    for (round = 0; round < NROUNDS; round += 2) {
 80035d2:	f47f a9c7 	bne.w	8002964 <KeccakF1600_StatePermute+0xfc>
    }

    // copyToState(state, A)
    state[0] = Aba;
 80035d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035d8:	6003      	str	r3, [r0, #0]
 80035da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035dc:	6043      	str	r3, [r0, #4]
    state[1] = Abe;
 80035de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035e0:	6083      	str	r3, [r0, #8]
 80035e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035e4:	60c3      	str	r3, [r0, #12]
    state[2] = Abi;
 80035e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035e8:	6103      	str	r3, [r0, #16]
 80035ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035ec:	6143      	str	r3, [r0, #20]
    state[3] = Abo;
 80035ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035f0:	6183      	str	r3, [r0, #24]
 80035f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80035f4:	61c3      	str	r3, [r0, #28]
    state[4] = Abu;
 80035f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035f8:	6203      	str	r3, [r0, #32]
 80035fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035fc:	6243      	str	r3, [r0, #36]	; 0x24
    state[5] = Aga;
 80035fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003600:	6283      	str	r3, [r0, #40]	; 0x28
 8003602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003604:	62c3      	str	r3, [r0, #44]	; 0x2c
    state[6] = Age;
 8003606:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003608:	6303      	str	r3, [r0, #48]	; 0x30
 800360a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800360c:	6343      	str	r3, [r0, #52]	; 0x34
    state[7] = Agi;
 800360e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003610:	6383      	str	r3, [r0, #56]	; 0x38
 8003612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003614:	63c3      	str	r3, [r0, #60]	; 0x3c
    state[8] = Ago;
 8003616:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003618:	6403      	str	r3, [r0, #64]	; 0x40
 800361a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800361c:	6443      	str	r3, [r0, #68]	; 0x44
    state[9] = Agu;
 800361e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003620:	6483      	str	r3, [r0, #72]	; 0x48
 8003622:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003624:	64c3      	str	r3, [r0, #76]	; 0x4c
    state[10] = Aka;
 8003626:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003628:	6503      	str	r3, [r0, #80]	; 0x50
 800362a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800362c:	6543      	str	r3, [r0, #84]	; 0x54
    state[11] = Ake;
 800362e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003630:	6583      	str	r3, [r0, #88]	; 0x58
 8003632:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003634:	65c3      	str	r3, [r0, #92]	; 0x5c
    state[12] = Aki;
 8003636:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003638:	6603      	str	r3, [r0, #96]	; 0x60
 800363a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800363c:	6643      	str	r3, [r0, #100]	; 0x64
    state[13] = Ako;
 800363e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003640:	6683      	str	r3, [r0, #104]	; 0x68
 8003642:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003644:	66c3      	str	r3, [r0, #108]	; 0x6c
    state[14] = Aku;
 8003646:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003648:	6703      	str	r3, [r0, #112]	; 0x70
 800364a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800364c:	6743      	str	r3, [r0, #116]	; 0x74
    state[15] = Ama;
 800364e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003650:	6783      	str	r3, [r0, #120]	; 0x78
 8003652:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8003654:	67c3      	str	r3, [r0, #124]	; 0x7c
    state[16] = Ame;
 8003656:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8003658:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800365c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800365e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    state[17] = Ami;
 8003662:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8003664:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8003668:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800366a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    state[18] = Amo;
 800366e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003670:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8003674:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8003676:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    state[19] = Amu;
 800367a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800367c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8003680:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8003682:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    state[20] = Asa;
 8003686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003688:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 800368c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800368e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    state[21] = Ase;
 8003692:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8003694:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8003698:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800369a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    state[22] = Asi;
 800369e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80036a0:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 80036a4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80036a6:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    state[23] = Aso;
 80036aa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80036ac:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    state[24] = Asu;
 80036b0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    state[23] = Aso;
 80036b2:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
    state[24] = Asu;
 80036b6:	e9c0 3630 	strd	r3, r6, [r0, #192]	; 0xc0
}
 80036ba:	b03f      	add	sp, #252	; 0xfc
 80036bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c0:	0800aba8 	.word	0x0800aba8

080036c4 <keccak_squeezeblocks>:
 *                                                squeezed (written to h)
 *              - uint64_t *s: pointer to input/output Keccak state
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_squeezeblocks(uint8_t *h, size_t nblocks,
                                 uint64_t *s, uint32_t r) {
 80036c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	4606      	mov	r6, r0
 80036ca:	460d      	mov	r5, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	461f      	mov	r7, r3
    while (nblocks > 0) {
        KeccakF1600_StatePermute(s);
        for (size_t i = 0; i < (r >> 3); i++) {
 80036d0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
    while (nblocks > 0) {
 80036d4:	b90d      	cbnz	r5, 80036da <keccak_squeezeblocks+0x16>
            store64(h + 8 * i, s[i]);
        }
        h += r;
        nblocks--;
    }
}
 80036d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        KeccakF1600_StatePermute(s);
 80036da:	f7ff f8c5 	bl	8002868 <KeccakF1600_StatePermute>
        for (size_t i = 0; i < (r >> 3); i++) {
 80036de:	f1a0 0208 	sub.w	r2, r0, #8
 80036e2:	2300      	movs	r3, #0
            store64(h + 8 * i, s[i]);
 80036e4:	f852 bf08 	ldr.w	fp, [r2, #8]!
 80036e8:	f8d2 a004 	ldr.w	sl, [r2, #4]
    for (size_t i = 0; i < 8; ++i) {
 80036ec:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            store64(h + 8 * i, s[i]);
 80036f0:	2400      	movs	r4, #0
        x[i] = (uint8_t) (u >> 8 * i);
 80036f2:	f1c4 0e20 	rsb	lr, r4, #32
 80036f6:	f1a4 0c20 	sub.w	ip, r4, #32
 80036fa:	fa2b f104 	lsr.w	r1, fp, r4
 80036fe:	fa0a fe0e 	lsl.w	lr, sl, lr
 8003702:	ea41 010e 	orr.w	r1, r1, lr
 8003706:	fa2a fc0c 	lsr.w	ip, sl, ip
    for (size_t i = 0; i < 8; ++i) {
 800370a:	3408      	adds	r4, #8
        x[i] = (uint8_t) (u >> 8 * i);
 800370c:	ea41 010c 	orr.w	r1, r1, ip
    for (size_t i = 0; i < 8; ++i) {
 8003710:	2c40      	cmp	r4, #64	; 0x40
        x[i] = (uint8_t) (u >> 8 * i);
 8003712:	f809 1b01 	strb.w	r1, [r9], #1
    for (size_t i = 0; i < 8; ++i) {
 8003716:	d1ec      	bne.n	80036f2 <keccak_squeezeblocks+0x2e>
        for (size_t i = 0; i < (r >> 3); i++) {
 8003718:	3301      	adds	r3, #1
 800371a:	4598      	cmp	r8, r3
 800371c:	d8e2      	bhi.n	80036e4 <keccak_squeezeblocks+0x20>
        h += r;
 800371e:	443e      	add	r6, r7
        nblocks--;
 8003720:	3d01      	subs	r5, #1
 8003722:	e7d7      	b.n	80036d4 <keccak_squeezeblocks+0x10>

08003724 <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 8003724:	b510      	push	{r4, lr}
    size_t i;

    for (i = 0; i < 25; ++i) {
        s_inc[i] = 0;
 8003726:	22c8      	movs	r2, #200	; 0xc8
 8003728:	2100      	movs	r1, #0
static void keccak_inc_init(uint64_t *s_inc) {
 800372a:	4604      	mov	r4, r0
        s_inc[i] = 0;
 800372c:	f001 fdbe 	bl	80052ac <memset>
    }
    s_inc[25] = 0;
 8003730:	2200      	movs	r2, #0
 8003732:	2300      	movs	r3, #0
 8003734:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 8003738:	bd10      	pop	{r4, pc}

0800373a <keccak_inc_absorb>:
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - const uint8_t *m: pointer to input to be absorbed into s
 *              - size_t mlen: length of input in bytes
 **************************************************/
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
                              size_t mlen) {
 800373a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800373e:	460d      	mov	r5, r1
 8003740:	4690      	mov	r8, r2
 8003742:	4699      	mov	r9, r3
               xor with the s_inc[25] + i'th byte of the state; little-endian */
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
        }
        mlen -= (size_t)(r - s_inc[25]);
        m += r - s_inc[25];
        s_inc[25] = 0;
 8003744:	2600      	movs	r6, #0
 8003746:	2700      	movs	r7, #0
    while (mlen + s_inc[25] >= r) {
 8003748:	e9d0 3232 	ldrd	r3, r2, [r0, #200]	; 0xc8
 800374c:	eb19 0303 	adds.w	r3, r9, r3
 8003750:	f142 0200 	adc.w	r2, r2, #0
 8003754:	42ab      	cmp	r3, r5
 8003756:	f172 0300 	sbcs.w	r3, r2, #0
 800375a:	d240      	bcs.n	80037de <keccak_inc_absorb+0xa4>
 800375c:	2200      	movs	r2, #0
 800375e:	4615      	mov	r5, r2

        KeccakF1600_StatePermute(s_inc);
    }

    for (i = 0; i < mlen; i++) {
 8003760:	4591      	cmp	r9, r2
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 8003762:	e9d0 3132 	ldrd	r3, r1, [r0, #200]	; 0xc8
    for (i = 0; i < mlen; i++) {
 8003766:	d83c      	bhi.n	80037e2 <keccak_inc_absorb+0xa8>
    }
    s_inc[25] += mlen;
 8003768:	eb19 0303 	adds.w	r3, r9, r3
 800376c:	f141 0100 	adc.w	r1, r1, #0
 8003770:	e9c0 3132 	strd	r3, r1, [r0, #200]	; 0xc8
}
 8003774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 8003778:	190c      	adds	r4, r1, r4
 800377a:	f143 0300 	adc.w	r3, r3, #0
 800377e:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8003782:	f004 0407 	and.w	r4, r4, #7
 8003786:	ea4c 7c43 	orr.w	ip, ip, r3, lsl #29
 800378a:	00e4      	lsls	r4, r4, #3
 800378c:	f818 3001 	ldrb.w	r3, [r8, r1]
 8003790:	eb00 0ecc 	add.w	lr, r0, ip, lsl #3
 8003794:	f1a4 0a20 	sub.w	sl, r4, #32
 8003798:	f1c4 0220 	rsb	r2, r4, #32
 800379c:	fa23 f202 	lsr.w	r2, r3, r2
 80037a0:	fa03 fa0a 	lsl.w	sl, r3, sl
 80037a4:	ea4a 0a02 	orr.w	sl, sl, r2
 80037a8:	fa03 f404 	lsl.w	r4, r3, r4
 80037ac:	f850 203c 	ldr.w	r2, [r0, ip, lsl #3]
 80037b0:	f8de 3004 	ldr.w	r3, [lr, #4]
 80037b4:	4054      	eors	r4, r2
 80037b6:	ea83 030a 	eor.w	r3, r3, sl
 80037ba:	f840 403c 	str.w	r4, [r0, ip, lsl #3]
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80037be:	3101      	adds	r1, #1
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 80037c0:	f8ce 3004 	str.w	r3, [lr, #4]
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80037c4:	e9d0 4332 	ldrd	r4, r3, [r0, #200]	; 0xc8
 80037c8:	1b2a      	subs	r2, r5, r4
 80037ca:	428a      	cmp	r2, r1
 80037cc:	d8d4      	bhi.n	8003778 <keccak_inc_absorb+0x3e>
        mlen -= (size_t)(r - s_inc[25]);
 80037ce:	1b64      	subs	r4, r4, r5
        s_inc[25] = 0;
 80037d0:	e9c0 6732 	strd	r6, r7, [r0, #200]	; 0xc8
        mlen -= (size_t)(r - s_inc[25]);
 80037d4:	44a1      	add	r9, r4
        m += r - s_inc[25];
 80037d6:	4490      	add	r8, r2
        KeccakF1600_StatePermute(s_inc);
 80037d8:	f7ff f846 	bl	8002868 <KeccakF1600_StatePermute>
 80037dc:	e7b4      	b.n	8003748 <keccak_inc_absorb+0xe>
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 80037de:	2100      	movs	r1, #0
 80037e0:	e7f0      	b.n	80037c4 <keccak_inc_absorb+0x8a>
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 80037e2:	18d3      	adds	r3, r2, r3
 80037e4:	eb45 0101 	adc.w	r1, r5, r1
 80037e8:	08dc      	lsrs	r4, r3, #3
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	f818 6002 	ldrb.w	r6, [r8, r2]
 80037f2:	ea44 7441 	orr.w	r4, r4, r1, lsl #29
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80037fc:	f1a3 0120 	sub.w	r1, r3, #32
 8003800:	f1c3 0720 	rsb	r7, r3, #32
 8003804:	fa26 f707 	lsr.w	r7, r6, r7
 8003808:	fa06 f101 	lsl.w	r1, r6, r1
 800380c:	4339      	orrs	r1, r7
 800380e:	fa06 f303 	lsl.w	r3, r6, r3
 8003812:	f850 7034 	ldr.w	r7, [r0, r4, lsl #3]
 8003816:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800381a:	407b      	eors	r3, r7
 800381c:	4071      	eors	r1, r6
 800381e:	3201      	adds	r2, #1
 8003820:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
 8003824:	f145 0500 	adc.w	r5, r5, #0
 8003828:	f8cc 1004 	str.w	r1, [ip, #4]
    for (i = 0; i < mlen; i++) {
 800382c:	e798      	b.n	8003760 <keccak_inc_absorb+0x26>

0800382e <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 800382e:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 8003830:	e9d0 3532 	ldrd	r3, r5, [r0, #200]	; 0xc8
 8003834:	08dc      	lsrs	r4, r3, #3
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8003844:	f1a3 0520 	sub.w	r5, r3, #32
 8003848:	f1c3 0620 	rsb	r6, r3, #32
 800384c:	fa22 f606 	lsr.w	r6, r2, r6
 8003850:	fa02 f505 	lsl.w	r5, r2, r5
 8003854:	409a      	lsls	r2, r3
 8003856:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 800385a:	4335      	orrs	r5, r6
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 800385c:	3901      	subs	r1, #1
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 800385e:	687e      	ldr	r6, [r7, #4]
 8003860:	405a      	eors	r2, r3
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 8003862:	f021 0107 	bic.w	r1, r1, #7
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 8003866:	f840 2034 	str.w	r2, [r0, r4, lsl #3]
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 800386a:	4401      	add	r1, r0
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 800386c:	4075      	eors	r5, r6
 800386e:	607d      	str	r5, [r7, #4]
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 8003870:	684b      	ldr	r3, [r1, #4]
 8003872:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003876:	604b      	str	r3, [r1, #4]
    s_inc[25] = 0;
 8003878:	2200      	movs	r2, #0
 800387a:	2300      	movs	r3, #0
 800387c:	e9c0 2332 	strd	r2, r3, [r0, #200]	; 0xc8
}
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003882 <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 8003882:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    size_t i;

    /* First consume any bytes we still have sitting around */
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8003886:	2500      	movs	r5, #0
                               uint64_t *s_inc, uint32_t r) {
 8003888:	4616      	mov	r6, r2
 800388a:	461f      	mov	r7, r3
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 800388c:	462a      	mov	r2, r5
 800388e:	42a9      	cmp	r1, r5
 8003890:	e9d6 4332 	ldrd	r4, r3, [r6, #200]	; 0xc8
        /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
           available byte. We consume from there, i.e., up to r. */
        h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
 8003894:	4681      	mov	r9, r0
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8003896:	d903      	bls.n	80038a0 <keccak_inc_squeeze+0x1e>
 8003898:	42a5      	cmp	r5, r4
 800389a:	eb72 0c03 	sbcs.w	ip, r2, r3
 800389e:	d30c      	bcc.n	80038ba <keccak_inc_squeeze+0x38>
    }
    h += i;
    outlen -= i;
    s_inc[25] -= i;
 80038a0:	1b64      	subs	r4, r4, r5
 80038a2:	eb63 0302 	sbc.w	r3, r3, r2
 80038a6:	e9c6 4332 	strd	r4, r3, [r6, #200]	; 0xc8
    outlen -= i;
 80038aa:	eba1 0805 	sub.w	r8, r1, r5
        for (i = 0; i < outlen && i < r; i++) {
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
        }
        h += i;
        outlen -= i;
        s_inc[25] = r - i;
 80038ae:	2400      	movs	r4, #0
    while (outlen > 0) {
 80038b0:	f1b8 0f00 	cmp.w	r8, #0
 80038b4:	d129      	bne.n	800390a <keccak_inc_squeeze+0x88>
    }
}
 80038b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
 80038ba:	1b3c      	subs	r4, r7, r4
 80038bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80038c0:	1964      	adds	r4, r4, r5
 80038c2:	eb42 0303 	adc.w	r3, r2, r3
 80038c6:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 80038ca:	ea4c 7c43 	orr.w	ip, ip, r3, lsl #29
 80038ce:	eb06 0ecc 	add.w	lr, r6, ip, lsl #3
 80038d2:	f004 0407 	and.w	r4, r4, #7
 80038d6:	f8de 8004 	ldr.w	r8, [lr, #4]
 80038da:	f856 303c 	ldr.w	r3, [r6, ip, lsl #3]
 80038de:	00e4      	lsls	r4, r4, #3
 80038e0:	f1c4 0e20 	rsb	lr, r4, #32
 80038e4:	f1a4 0c20 	sub.w	ip, r4, #32
 80038e8:	fa08 fe0e 	lsl.w	lr, r8, lr
 80038ec:	fa23 f404 	lsr.w	r4, r3, r4
 80038f0:	ea44 040e 	orr.w	r4, r4, lr
 80038f4:	fa28 fc0c 	lsr.w	ip, r8, ip
 80038f8:	ea44 040c 	orr.w	r4, r4, ip
 80038fc:	f800 4b01 	strb.w	r4, [r0], #1
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8003900:	1c6c      	adds	r4, r5, #1
 8003902:	4625      	mov	r5, r4
 8003904:	f142 0200 	adc.w	r2, r2, #0
 8003908:	e7c1      	b.n	800388e <keccak_inc_squeeze+0xc>
        KeccakF1600_StatePermute(s_inc);
 800390a:	4630      	mov	r0, r6
 800390c:	f7fe ffac 	bl	8002868 <KeccakF1600_StatePermute>
        for (i = 0; i < outlen && i < r; i++) {
 8003910:	2200      	movs	r2, #0
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 8003912:	f022 0007 	bic.w	r0, r2, #7
 8003916:	08d5      	lsrs	r5, r2, #3
 8003918:	4430      	add	r0, r6
 800391a:	f002 0307 	and.w	r3, r2, #7
 800391e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8003922:	00d9      	lsls	r1, r3, #3
 8003924:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
 8003928:	f1c1 0520 	rsb	r5, r1, #32
 800392c:	f1a1 0020 	sub.w	r0, r1, #32
 8003930:	40cb      	lsrs	r3, r1
 8003932:	fa0c f505 	lsl.w	r5, ip, r5
 8003936:	432b      	orrs	r3, r5
 8003938:	fa2c f000 	lsr.w	r0, ip, r0
 800393c:	4303      	orrs	r3, r0
 800393e:	f809 3002 	strb.w	r3, [r9, r2]
        for (i = 0; i < outlen && i < r; i++) {
 8003942:	3201      	adds	r2, #1
 8003944:	4590      	cmp	r8, r2
 8003946:	d001      	beq.n	800394c <keccak_inc_squeeze+0xca>
 8003948:	4297      	cmp	r7, r2
 800394a:	d1e2      	bne.n	8003912 <keccak_inc_squeeze+0x90>
        h += i;
 800394c:	4491      	add	r9, r2
        outlen -= i;
 800394e:	eba8 0802 	sub.w	r8, r8, r2
        s_inc[25] = r - i;
 8003952:	1aba      	subs	r2, r7, r2
 8003954:	e9c6 2432 	strd	r2, r4, [r6, #200]	; 0xc8
 8003958:	e7aa      	b.n	80038b0 <keccak_inc_squeeze+0x2e>

0800395a <keccak_absorb>:
                          size_t mlen, uint8_t p) {
 800395a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395e:	460c      	mov	r4, r1
 8003960:	b0b5      	sub	sp, #212	; 0xd4
 8003962:	4617      	mov	r7, r2
        s[i] = 0;
 8003964:	2100      	movs	r1, #0
 8003966:	22c8      	movs	r2, #200	; 0xc8
                          size_t mlen, uint8_t p) {
 8003968:	4680      	mov	r8, r0
 800396a:	461d      	mov	r5, r3
        s[i] = 0;
 800396c:	f001 fc9e 	bl	80052ac <memset>
        for (i = 0; i < r / 8; ++i) {
 8003970:	08e3      	lsrs	r3, r4, #3
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	f1a8 0608 	sub.w	r6, r8, #8
    while (mlen >= r) {
 8003978:	42a5      	cmp	r5, r4
 800397a:	d242      	bcs.n	8003a02 <keccak_absorb+0xa8>
        t[i] = 0;
 800397c:	4622      	mov	r2, r4
 800397e:	2100      	movs	r1, #0
 8003980:	a802      	add	r0, sp, #8
 8003982:	f001 fc93 	bl	80052ac <memset>
        t[i] = m[i];
 8003986:	462a      	mov	r2, r5
 8003988:	4639      	mov	r1, r7
 800398a:	a802      	add	r0, sp, #8
 800398c:	f7fc fc38 	bl	8000200 <memcpy>
    t[i] = p;
 8003990:	ab34      	add	r3, sp, #208	; 0xd0
 8003992:	441d      	add	r5, r3
 8003994:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8003998:	f805 3cc8 	strb.w	r3, [r5, #-200]
    t[r - 1] |= 128;
 800399c:	3c01      	subs	r4, #1
 800399e:	ab34      	add	r3, sp, #208	; 0xd0
 80039a0:	441c      	add	r4, r3
 80039a2:	aa02      	add	r2, sp, #8
 80039a4:	f814 3cc8 	ldrb.w	r3, [r4, #-200]
 80039a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ac:	f804 3cc8 	strb.w	r3, [r4, #-200]
    for (i = 0; i < r / 8; ++i) {
 80039b0:	2400      	movs	r4, #0
 80039b2:	2300      	movs	r3, #0
 80039b4:	4696      	mov	lr, r2
    uint64_t r = 0;
 80039b6:	461f      	mov	r7, r3
 80039b8:	461d      	mov	r5, r3
        r |= (uint64_t)x[i] << 8 * i;
 80039ba:	f81e 0b01 	ldrb.w	r0, [lr], #1
 80039be:	f1a3 0120 	sub.w	r1, r3, #32
 80039c2:	f1c3 0c20 	rsb	ip, r3, #32
 80039c6:	fa00 f101 	lsl.w	r1, r0, r1
 80039ca:	fa20 fc0c 	lsr.w	ip, r0, ip
 80039ce:	4098      	lsls	r0, r3
    for (size_t i = 0; i < 8; ++i) {
 80039d0:	3308      	adds	r3, #8
        r |= (uint64_t)x[i] << 8 * i;
 80039d2:	ea41 010c 	orr.w	r1, r1, ip
    for (size_t i = 0; i < 8; ++i) {
 80039d6:	2b40      	cmp	r3, #64	; 0x40
        r |= (uint64_t)x[i] << 8 * i;
 80039d8:	ea47 0700 	orr.w	r7, r7, r0
 80039dc:	ea45 0501 	orr.w	r5, r5, r1
    for (size_t i = 0; i < 8; ++i) {
 80039e0:	d1eb      	bne.n	80039ba <keccak_absorb+0x60>
        s[i] ^= load64(t + 8 * i);
 80039e2:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80039e6:	6873      	ldr	r3, [r6, #4]
 80039e8:	4079      	eors	r1, r7
 80039ea:	406b      	eors	r3, r5
 80039ec:	e9c6 1300 	strd	r1, r3, [r6]
    for (i = 0; i < r / 8; ++i) {
 80039f0:	9b01      	ldr	r3, [sp, #4]
 80039f2:	3401      	adds	r4, #1
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	f102 0208 	add.w	r2, r2, #8
 80039fa:	d8da      	bhi.n	80039b2 <keccak_absorb+0x58>
}
 80039fc:	b035      	add	sp, #212	; 0xd4
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	4632      	mov	r2, r6
        for (i = 0; i < r / 8; ++i) {
 8003a04:	f04f 0c00 	mov.w	ip, #0
 8003a08:	2300      	movs	r3, #0
 8003a0a:	eb07 0bcc 	add.w	fp, r7, ip, lsl #3
    uint64_t r = 0;
 8003a0e:	4699      	mov	r9, r3
 8003a10:	469e      	mov	lr, r3
        r |= (uint64_t)x[i] << 8 * i;
 8003a12:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8003a16:	f1a3 0a20 	sub.w	sl, r3, #32
 8003a1a:	f1c3 0120 	rsb	r1, r3, #32
 8003a1e:	fa00 fa0a 	lsl.w	sl, r0, sl
 8003a22:	fa20 f101 	lsr.w	r1, r0, r1
 8003a26:	4098      	lsls	r0, r3
    for (size_t i = 0; i < 8; ++i) {
 8003a28:	3308      	adds	r3, #8
        r |= (uint64_t)x[i] << 8 * i;
 8003a2a:	ea4a 0101 	orr.w	r1, sl, r1
    for (size_t i = 0; i < 8; ++i) {
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
        r |= (uint64_t)x[i] << 8 * i;
 8003a30:	ea40 0909 	orr.w	r9, r0, r9
 8003a34:	ea41 0e0e 	orr.w	lr, r1, lr
    for (size_t i = 0; i < 8; ++i) {
 8003a38:	d1eb      	bne.n	8003a12 <keccak_absorb+0xb8>
            s[i] ^= load64(m + 8 * i);
 8003a3a:	f852 1f08 	ldr.w	r1, [r2, #8]!
 8003a3e:	6853      	ldr	r3, [r2, #4]
 8003a40:	ea81 0109 	eor.w	r1, r1, r9
 8003a44:	ea83 030e 	eor.w	r3, r3, lr
 8003a48:	e9c2 1300 	strd	r1, r3, [r2]
        for (i = 0; i < r / 8; ++i) {
 8003a4c:	9b01      	ldr	r3, [sp, #4]
 8003a4e:	f10c 0c01 	add.w	ip, ip, #1
 8003a52:	4563      	cmp	r3, ip
 8003a54:	d8d8      	bhi.n	8003a08 <keccak_absorb+0xae>
        KeccakF1600_StatePermute(s);
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7fe ff06 	bl	8002868 <KeccakF1600_StatePermute>
        mlen -= r;
 8003a5c:	1b2d      	subs	r5, r5, r4
        m += r;
 8003a5e:	4427      	add	r7, r4
 8003a60:	e78a      	b.n	8003978 <keccak_absorb+0x1e>

08003a62 <shake128_inc_init>:

void shake128_inc_init(shake128incctx *state) {
 8003a62:	b510      	push	{r4, lr}
 8003a64:	4604      	mov	r4, r0
    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 8003a66:	20d0      	movs	r0, #208	; 0xd0
 8003a68:	f001 f8b0 	bl	8004bcc <malloc>
 8003a6c:	6020      	str	r0, [r4, #0]
    if (state->ctx == NULL) {
 8003a6e:	b910      	cbnz	r0, 8003a76 <shake128_inc_init+0x14>
        exit(111);
 8003a70:	206f      	movs	r0, #111	; 0x6f
 8003a72:	f000 ffb3 	bl	80049dc <exit>
    }
    keccak_inc_init(state->ctx);
}
 8003a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    keccak_inc_init(state->ctx);
 8003a7a:	f7ff be53 	b.w	8003724 <keccak_inc_init>

08003a7e <shake128_inc_absorb>:

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 8003a7e:	4613      	mov	r3, r2
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 8003a80:	6800      	ldr	r0, [r0, #0]
 8003a82:	460a      	mov	r2, r1
 8003a84:	21a8      	movs	r1, #168	; 0xa8
 8003a86:	f7ff be58 	b.w	800373a <keccak_inc_absorb>

08003a8a <shake128_inc_finalize>:
}

void shake128_inc_finalize(shake128incctx *state) {
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 8003a8a:	6800      	ldr	r0, [r0, #0]
 8003a8c:	221f      	movs	r2, #31
 8003a8e:	21a8      	movs	r1, #168	; 0xa8
 8003a90:	f7ff becd 	b.w	800382e <keccak_inc_finalize>

08003a94 <shake128_inc_squeeze>:
}

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	23a8      	movs	r3, #168	; 0xa8
 8003a98:	f7ff bef3 	b.w	8003882 <keccak_inc_squeeze>

08003a9c <shake128_inc_ctx_release>:
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
}

void shake128_inc_ctx_release(shake128incctx *state) {
    free(state->ctx);
 8003a9c:	6800      	ldr	r0, [r0, #0]
 8003a9e:	f001 b89d 	b.w	8004bdc <free>

08003aa2 <shake256_inc_init>:
}

void shake256_inc_init(shake256incctx *state) {
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	4604      	mov	r4, r0
    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 8003aa6:	20d0      	movs	r0, #208	; 0xd0
 8003aa8:	f001 f890 	bl	8004bcc <malloc>
 8003aac:	6020      	str	r0, [r4, #0]
    if (state->ctx == NULL) {
 8003aae:	b910      	cbnz	r0, 8003ab6 <shake256_inc_init+0x14>
        exit(111);
 8003ab0:	206f      	movs	r0, #111	; 0x6f
 8003ab2:	f000 ff93 	bl	80049dc <exit>
    }
    keccak_inc_init(state->ctx);
}
 8003ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    keccak_inc_init(state->ctx);
 8003aba:	f7ff be33 	b.w	8003724 <keccak_inc_init>

08003abe <shake256_inc_absorb>:

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8003abe:	4613      	mov	r3, r2
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 8003ac0:	6800      	ldr	r0, [r0, #0]
 8003ac2:	460a      	mov	r2, r1
 8003ac4:	2188      	movs	r1, #136	; 0x88
 8003ac6:	f7ff be38 	b.w	800373a <keccak_inc_absorb>

08003aca <shake256_inc_finalize>:
}

void shake256_inc_finalize(shake256incctx *state) {
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	221f      	movs	r2, #31
 8003ace:	2188      	movs	r1, #136	; 0x88
 8003ad0:	f7ff bead 	b.w	800382e <keccak_inc_finalize>

08003ad4 <shake256_inc_squeeze>:
}

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	2388      	movs	r3, #136	; 0x88
 8003ad8:	f7ff bed3 	b.w	8003882 <keccak_inc_squeeze>

08003adc <shake256_inc_ctx_release>:
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
}

void shake256_inc_ctx_release(shake256incctx *state) {
    free(state->ctx);
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f001 b87d 	b.w	8004bdc <free>

08003ae2 <shake256_absorb>:
 * Arguments:   - shake256ctx *state: pointer to (uninitialized) output Keccak state
 *              - const uint8_t *input: pointer to input to be absorbed
 *                                            into s
 *              - size_t inlen: length of input in bytes
 **************************************************/
void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen) {
 8003ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ae4:	4607      	mov	r7, r0
    state->ctx = malloc(PQC_SHAKECTX_BYTES);
 8003ae6:	20c8      	movs	r0, #200	; 0xc8
void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen) {
 8003ae8:	460d      	mov	r5, r1
 8003aea:	4616      	mov	r6, r2
    state->ctx = malloc(PQC_SHAKECTX_BYTES);
 8003aec:	f001 f86e 	bl	8004bcc <malloc>
 8003af0:	6038      	str	r0, [r7, #0]
    if (state->ctx == NULL) {
 8003af2:	b910      	cbnz	r0, 8003afa <shake256_absorb+0x18>
        exit(111);
 8003af4:	206f      	movs	r0, #111	; 0x6f
 8003af6:	f000 ff71 	bl	80049dc <exit>
    }
    keccak_absorb(state->ctx, SHAKE256_RATE, input, inlen, 0x1F);
 8003afa:	231f      	movs	r3, #31
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	462a      	mov	r2, r5
 8003b00:	4633      	mov	r3, r6
 8003b02:	2188      	movs	r1, #136	; 0x88
 8003b04:	f7ff ff29 	bl	800395a <keccak_absorb>
}
 8003b08:	b003      	add	sp, #12
 8003b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b0c <shake256_squeezeblocks>:
 *              - size_t nblocks: number of blocks to be squeezed
 *                                (written to output)
 *              - shake256ctx *state: pointer to input/output Keccak state
 **************************************************/
void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state) {
    keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	2388      	movs	r3, #136	; 0x88
 8003b10:	f7ff bdd8 	b.w	80036c4 <keccak_squeezeblocks>

08003b14 <shake256_ctx_release>:
    memcpy(dest->ctx, src->ctx, PQC_SHAKECTX_BYTES);
}

/** Release the allocated state. Call only once. */
void shake256_ctx_release(shake256ctx *state) {
    free(state->ctx);
 8003b14:	6800      	ldr	r0, [r0, #0]
 8003b16:	f001 b861 	b.w	8004bdc <free>

08003b1a <shake256>:
 *              - size_t outlen: requested output length in bytes
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen: length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
              const uint8_t *input, size_t inlen) {
 8003b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1c:	b0a5      	sub	sp, #148	; 0x94
 8003b1e:	460c      	mov	r4, r1
 8003b20:	4606      	mov	r6, r0
 8003b22:	4611      	mov	r1, r2
    size_t nblocks = outlen / SHAKE256_RATE;
 8003b24:	2788      	movs	r7, #136	; 0x88
    uint8_t t[SHAKE256_RATE];
    shake256ctx s;

    shake256_absorb(&s, input, inlen);
 8003b26:	461a      	mov	r2, r3
 8003b28:	a801      	add	r0, sp, #4
 8003b2a:	f7ff ffda 	bl	8003ae2 <shake256_absorb>
    size_t nblocks = outlen / SHAKE256_RATE;
 8003b2e:	fbb4 f5f7 	udiv	r5, r4, r7
    shake256_squeezeblocks(output, nblocks, &s);
 8003b32:	aa01      	add	r2, sp, #4
 8003b34:	4629      	mov	r1, r5
 8003b36:	4630      	mov	r0, r6
 8003b38:	437d      	muls	r5, r7
 8003b3a:	f7ff ffe7 	bl	8003b0c <shake256_squeezeblocks>

    output += nblocks * SHAKE256_RATE;
    outlen -= nblocks * SHAKE256_RATE;

    if (outlen) {
 8003b3e:	1b64      	subs	r4, r4, r5
 8003b40:	d009      	beq.n	8003b56 <shake256+0x3c>
        shake256_squeezeblocks(t, 1, &s);
 8003b42:	aa01      	add	r2, sp, #4
 8003b44:	2101      	movs	r1, #1
 8003b46:	a802      	add	r0, sp, #8
 8003b48:	f7ff ffe0 	bl	8003b0c <shake256_squeezeblocks>
        for (size_t i = 0; i < outlen; ++i) {
            output[i] = t[i];
 8003b4c:	4622      	mov	r2, r4
 8003b4e:	a902      	add	r1, sp, #8
 8003b50:	1970      	adds	r0, r6, r5
 8003b52:	f7fc fb55 	bl	8000200 <memcpy>
        }
    }
    shake256_ctx_release(&s);
 8003b56:	a801      	add	r0, sp, #4
 8003b58:	f7ff ffdc 	bl	8003b14 <shake256_ctx_release>
}
 8003b5c:	b025      	add	sp, #148	; 0x94
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b60 <PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce>:
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/
int32_t PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce(int64_t a) {
 8003b60:	4603      	mov	r3, r0
    int32_t t;

    t = (int32_t)((uint64_t)a * (uint64_t)QINV);
 8003b62:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
int32_t PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce(int64_t a) {
 8003b66:	4608      	mov	r0, r1
    t = (int32_t)((uint64_t)a * (uint64_t)QINV);
 8003b68:	eb03 2282 	add.w	r2, r3, r2, lsl #10
    t = (a - (int64_t)t * Q) >> 32;
 8003b6c:	4902      	ldr	r1, [pc, #8]	; (8003b78 <PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce+0x18>)
    t = (int32_t)((uint64_t)a * (uint64_t)QINV);
 8003b6e:	eb03 3242 	add.w	r2, r3, r2, lsl #13
    return t;
}
 8003b72:	fbc2 3001 	smlal	r3, r0, r2, r1
 8003b76:	4770      	bx	lr
 8003b78:	ff801fff 	.word	0xff801fff

08003b7c <PQCLEAN_DILITHIUM2_CLEAN_reduce32>:
    int32_t t;

    t = (a + (1 << 22)) >> 23;
    t = a - t * Q;
    return t;
}
 8003b7c:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <PQCLEAN_DILITHIUM2_CLEAN_reduce32+0x10>)
    t = (a + (1 << 22)) >> 23;
 8003b7e:	f500 0380 	add.w	r3, r0, #4194304	; 0x400000
 8003b82:	15db      	asrs	r3, r3, #23
}
 8003b84:	fb02 0003 	mla	r0, r2, r3, r0
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	ff801fff 	.word	0xff801fff

08003b90 <PQCLEAN_DILITHIUM2_CLEAN_caddq>:
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t PQCLEAN_DILITHIUM2_CLEAN_caddq(int32_t a) {
    a += (a >> 31) & Q;
 8003b90:	4b02      	ldr	r3, [pc, #8]	; (8003b9c <PQCLEAN_DILITHIUM2_CLEAN_caddq+0xc>)
 8003b92:	ea03 73e0 	and.w	r3, r3, r0, asr #31
    return a;
}
 8003b96:	4418      	add	r0, r3
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	007fe001 	.word	0x007fe001

08003ba0 <PQCLEAN_DILITHIUM2_CLEAN_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_ntt(int32_t a[N]) {
 8003ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	4606      	mov	r6, r0

    k = 0;
    for (len = 128; len > 0; len >>= 1) {
        for (start = 0; start < N; start = j + len) {
            zeta = zetas[++k];
            for (j = start; j < start + len; ++j) {
 8003ba6:	f04f 0808 	mov.w	r8, #8
    k = 0;
 8003baa:	f04f 0900 	mov.w	r9, #0
    for (len = 128; len > 0; len >>= 1) {
 8003bae:	2580      	movs	r5, #128	; 0x80
        for (start = 0; start < N; start = j + len) {
 8003bb0:	2400      	movs	r4, #0
            zeta = zetas[++k];
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <PQCLEAN_DILITHIUM2_CLEAN_ntt+0x70>)
 8003bb4:	f109 0901 	add.w	r9, r9, #1
 8003bb8:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 8003bbc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
            for (j = start; j < start + len; ++j) {
 8003bc0:	192b      	adds	r3, r5, r4
 8003bc2:	eb06 0b83 	add.w	fp, r6, r3, lsl #2
 8003bc6:	46a2      	mov	sl, r4
 8003bc8:	459a      	cmp	sl, r3
 8003bca:	d30b      	bcc.n	8003be4 <PQCLEAN_DILITHIUM2_CLEAN_ntt+0x44>
                t = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 8003bcc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
        for (start = 0; start < N; start = j + len) {
 8003bd0:	2cff      	cmp	r4, #255	; 0xff
 8003bd2:	d9ee      	bls.n	8003bb2 <PQCLEAN_DILITHIUM2_CLEAN_ntt+0x12>
    for (len = 128; len > 0; len >>= 1) {
 8003bd4:	f1b8 0801 	subs.w	r8, r8, #1
 8003bd8:	ea4f 0555 	mov.w	r5, r5, lsr #1
 8003bdc:	d1e8      	bne.n	8003bb0 <PQCLEAN_DILITHIUM2_CLEAN_ntt+0x10>
                a[j + len] = a[j] - t;
                a[j] = a[j] + t;
            }
        }
    }
}
 8003bde:	b003      	add	sp, #12
 8003be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                t = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 8003be4:	f8db 1000 	ldr.w	r1, [fp]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	fb82 0101 	smull	r0, r1, r2, r1
 8003bee:	9200      	str	r2, [sp, #0]
 8003bf0:	f7ff ffb6 	bl	8003b60 <PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce>
                a[j + len] = a[j] - t;
 8003bf4:	6839      	ldr	r1, [r7, #0]
 8003bf6:	1a09      	subs	r1, r1, r0
 8003bf8:	f84b 1b04 	str.w	r1, [fp], #4
                a[j] = a[j] + t;
 8003bfc:	f857 1b04 	ldr.w	r1, [r7], #4
 8003c00:	4408      	add	r0, r1
            for (j = start; j < start + len; ++j) {
 8003c02:	e9dd 2300 	ldrd	r2, r3, [sp]
                a[j] = a[j] + t;
 8003c06:	f847 0c04 	str.w	r0, [r7, #-4]
            for (j = start; j < start + len; ++j) {
 8003c0a:	f10a 0a01 	add.w	sl, sl, #1
 8003c0e:	e7db      	b.n	8003bc8 <PQCLEAN_DILITHIUM2_CLEAN_ntt+0x28>
 8003c10:	0800aba8 	.word	0x0800aba8

08003c14 <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont(int32_t a[N]) {
 8003c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int32_t f = 41978; // mont^2/256

    k = 256;
    for (len = 1; len < N; len <<= 1) {
        for (start = 0; start < N; start = j + len) {
            zeta = -zetas[--k];
 8003c18:	4a28      	ldr	r2, [pc, #160]	; (8003cbc <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0xa8>)
void PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont(int32_t a[N]) {
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	4604      	mov	r4, r0
            for (j = start; j < start + len; ++j) {
 8003c1e:	f04f 0808 	mov.w	r8, #8
    k = 256;
 8003c22:	f44f 7980 	mov.w	r9, #256	; 0x100
    for (len = 1; len < N; len <<= 1) {
 8003c26:	2601      	movs	r6, #1
        for (start = 0; start < N; start = j + len) {
 8003c28:	2500      	movs	r5, #0
            zeta = -zetas[--k];
 8003c2a:	f109 39ff 	add.w	r9, r9, #4294967295
 8003c2e:	eb04 0b85 	add.w	fp, r4, r5, lsl #2
 8003c32:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
 8003c36:	425b      	negs	r3, r3
 8003c38:	9302      	str	r3, [sp, #8]
            for (j = start; j < start + len; ++j) {
 8003c3a:	19ab      	adds	r3, r5, r6
 8003c3c:	bf2c      	ite	cs
 8003c3e:	2101      	movcs	r1, #1
 8003c40:	2100      	movcc	r1, #0
 8003c42:	9101      	str	r1, [sp, #4]
 8003c44:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8003c48:	46aa      	mov	sl, r5
 8003c4a:	459a      	cmp	sl, r3
 8003c4c:	d31e      	bcc.n	8003c8c <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0x78>
                t = a[j];
                a[j] = t + a[j + len];
 8003c4e:	9b01      	ldr	r3, [sp, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	4633      	moveq	r3, r6
 8003c56:	2300      	movne	r3, #0
 8003c58:	4433      	add	r3, r6
 8003c5a:	441d      	add	r5, r3
        for (start = 0; start < N; start = j + len) {
 8003c5c:	2dff      	cmp	r5, #255	; 0xff
 8003c5e:	d9e4      	bls.n	8003c2a <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0x16>
    for (len = 1; len < N; len <<= 1) {
 8003c60:	f1b8 0801 	subs.w	r8, r8, #1
 8003c64:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8003c68:	d1de      	bne.n	8003c28 <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0x14>
 8003c6a:	1f25      	subs	r5, r4, #4
            }
        }
    }

    for (j = 0; j < N; ++j) {
        a[j] = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)f * a[j]);
 8003c6c:	f24a 36fa 	movw	r6, #41978	; 0xa3fa
 8003c70:	f504 747f 	add.w	r4, r4, #1020	; 0x3fc
 8003c74:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8003c78:	fb81 0106 	smull	r0, r1, r1, r6
 8003c7c:	f7ff ff70 	bl	8003b60 <PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce>
    for (j = 0; j < N; ++j) {
 8003c80:	42ac      	cmp	r4, r5
        a[j] = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)f * a[j]);
 8003c82:	6028      	str	r0, [r5, #0]
    for (j = 0; j < N; ++j) {
 8003c84:	d1f6      	bne.n	8003c74 <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0x60>
    }
}
 8003c86:	b005      	add	sp, #20
 8003c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                t = a[j];
 8003c8c:	f8db 1000 	ldr.w	r1, [fp]
                a[j] = t + a[j + len];
 8003c90:	6838      	ldr	r0, [r7, #0]
 8003c92:	9303      	str	r3, [sp, #12]
 8003c94:	4408      	add	r0, r1
 8003c96:	f84b 0b04 	str.w	r0, [fp], #4
                a[j + len] = t - a[j + len];
 8003c9a:	f857 0b04 	ldr.w	r0, [r7], #4
                a[j + len] = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 8003c9e:	9b02      	ldr	r3, [sp, #8]
                a[j + len] = t - a[j + len];
 8003ca0:	1a09      	subs	r1, r1, r0
 8003ca2:	f847 1c04 	str.w	r1, [r7, #-4]
                a[j + len] = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 8003ca6:	fb83 0101 	smull	r0, r1, r3, r1
 8003caa:	f7ff ff59 	bl	8003b60 <PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce>
            for (j = start; j < start + len; ++j) {
 8003cae:	f10a 0a01 	add.w	sl, sl, #1
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	4a01      	ldr	r2, [pc, #4]	; (8003cbc <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0xa8>)
                a[j + len] = PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 8003cb6:	f847 0c04 	str.w	r0, [r7, #-4]
            for (j = start; j < start + len; ++j) {
 8003cba:	e7c6      	b.n	8003c4a <PQCLEAN_DILITHIUM2_CLEAN_invntt_tomont+0x36>
 8003cbc:	0800aba8 	.word	0x0800aba8

08003cc0 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8003cc0:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8003cc2:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8003cc4:	2000      	movs	r0, #0
	while (len--) {
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d100      	bne.n	8003ccc <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8003cca:	4770      	bx	lr
		crc ^= *buf++;
 8003ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd0:	4050      	eors	r0, r2
 8003cd2:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003cd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003cd8:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8003cdc:	bf18      	it	ne
 8003cde:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8003ce2:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003ce4:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8003ce6:	d1f5      	bne.n	8003cd4 <ss_crc+0x14>
 8003ce8:	e7ed      	b.n	8003cc6 <ss_crc+0x6>

08003cea <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8003cea:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8003cec:	2200      	movs	r2, #0
 8003cee:	4604      	mov	r4, r0
	uint8_t i = 1;
 8003cf0:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8003cf2:	428b      	cmp	r3, r1
 8003cf4:	d301      	bcc.n	8003cfa <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8003cfa:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8003cfe:	b915      	cbnz	r5, 8003d06 <stuff_data+0x1c>
			buf[last] = i - last;
 8003d00:	1a9d      	subs	r5, r3, r2
 8003d02:	5485      	strb	r5, [r0, r2]
 8003d04:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8003d06:	3301      	adds	r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e7f2      	b.n	8003cf2 <stuff_data+0x8>

08003d0c <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8003d0c:	b510      	push	{r4, lr}
	uint8_t next = buf[0]; // 取距离
 8003d0e:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00; // 恢复
 8003d10:	2400      	movs	r4, #0
{
 8003d12:	4603      	mov	r3, r0
	buf[0] = 0x00; // 恢复
 8003d14:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0]; // 取距离
 8003d16:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8003d18:	4288      	cmp	r0, r1
 8003d1a:	d200      	bcs.n	8003d1e <unstuff_data+0x12>
 8003d1c:	b902      	cbnz	r2, 8003d20 <unstuff_data+0x14>
		tmp = buf[next]; // 取距离
		buf[next] = FRAME_BYTE; // 恢复
		next += tmp; // 记录当前位置
	}
	return next;
}
 8003d1e:	bd10      	pop	{r4, pc}
		tmp = buf[next]; // 取距离
 8003d20:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE; // 恢复
 8003d22:	541c      	strb	r4, [r3, r0]
		next += tmp; // 记录当前位置
 8003d24:	4410      	add	r0, r2
 8003d26:	b2c0      	uxtb	r0, r0
 8003d28:	e7f6      	b.n	8003d18 <unstuff_data+0xc>

08003d2a <simpleserial_init>:
// This just adds the "v" command for now...
void simpleserial_init()
{
	// simpleserial_addcmd('v', 0, check_version);
 //    simpleserial_addcmd('w', 0, ss_get_commands);
}
 8003d2a:	4770      	bx	lr

08003d2c <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8003d2c:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8003d2e:	4d0c      	ldr	r5, [pc, #48]	; (8003d60 <simpleserial_addcmd+0x34>)
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	2b7f      	cmp	r3, #127	; 0x7f
 8003d34:	dd04      	ble.n	8003d40 <simpleserial_addcmd+0x14>
		putch('a');
 8003d36:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8003d38:	f000 f974 	bl	8004024 <putch>
		return 1;
 8003d3c:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8003d40:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003d44:	d301      	bcc.n	8003d4a <simpleserial_addcmd+0x1e>
		putch('b');
 8003d46:	2062      	movs	r0, #98	; 0x62
 8003d48:	e7f6      	b.n	8003d38 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8003d4a:	240c      	movs	r4, #12
 8003d4c:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8003d50:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8003d52:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8003d54:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8003d58:	602b      	str	r3, [r5, #0]
	return 0;
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	e7ef      	b.n	8003d3e <simpleserial_addcmd+0x12>
 8003d5e:	bf00      	nop
 8003d60:	200009cc 	.word	0x200009cc

08003d64 <simpleserial_put>:
	simpleserial_put('e', 0x05, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003d6a:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8003d6c:	2500      	movs	r5, #0
{
 8003d6e:	4611      	mov	r1, r2
	data_buf[1] = c;
 8003d70:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8003d74:	4622      	mov	r2, r4
 8003d76:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8003d7a:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8003d7e:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8003d82:	f7fc fa3d 	bl	8000200 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003d86:	1ca1      	adds	r1, r4, #2
 8003d88:	b2c9      	uxtb	r1, r1
 8003d8a:	f10d 0001 	add.w	r0, sp, #1
 8003d8e:	f7ff ff97 	bl	8003cc0 <ss_crc>
 8003d92:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8003d96:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8003d98:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003d9a:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8003d9c:	b2c9      	uxtb	r1, r1
 8003d9e:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8003da0:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8003da4:	f7ff ffa1 	bl	8003cea <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8003da8:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8003daa:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8003dae:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8003db0:	f000 f938 	bl	8004024 <putch>
	for (int i = 0; i < size + 5; i++) {
 8003db4:	42ae      	cmp	r6, r5
 8003db6:	daf8      	bge.n	8003daa <simpleserial_put+0x46>
	}
}
 8003db8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8003dbc:	bd70      	pop	{r4, r5, r6, pc}
 8003dbe:	0000      	movs	r0, r0

08003dc0 <simpleserial_get>:
{
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	uint8_t err = 0;
 8003dc8:	2500      	movs	r5, #0
 8003dca:	ae02      	add	r6, sp, #8
 8003dcc:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8003dd0:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8003dd2:	f000 f915 	bl	8004000 <getch>
 8003dd6:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {  //如果data_buf[i] == 0x00
 8003dda:	b960      	cbnz	r0, 8003df6 <simpleserial_get+0x36>
			err = SS_ERR_FRAME_BYTE;
 8003ddc:	2305      	movs	r3, #5
        err = 7;
 8003dde:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x05, &err);
 8003de2:	f10d 0207 	add.w	r2, sp, #7
 8003de6:	2105      	movs	r1, #5
 8003de8:	2065      	movs	r0, #101	; 0x65
 8003dea:	f7ff ffbb 	bl	8003d64 <simpleserial_put>
}
 8003dee:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8003df6:	3501      	adds	r5, #1
 8003df8:	2d04      	cmp	r5, #4
 8003dfa:	d1ea      	bne.n	8003dd2 <simpleserial_get+0x12>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f7ff ff84 	bl	8003d0c <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8003e04:	4f26      	ldr	r7, [pc, #152]	; (8003ea0 <simpleserial_get+0xe0>)
		if(commands[c].c == data_buf[1])
 8003e06:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8003e08:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8003e0a:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8003e0c:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8003e0e:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8003e10:	fa5f f983 	uxtb.w	r9, r3
 8003e14:	4591      	cmp	r9, r2
 8003e16:	db02      	blt.n	8003e1e <simpleserial_get+0x5e>
	if (c == num_commands) {
 8003e18:	d107      	bne.n	8003e2a <simpleserial_get+0x6a>
        err = 7;
 8003e1a:	2307      	movs	r3, #7
 8003e1c:	e7df      	b.n	8003dde <simpleserial_get+0x1e>
		if(commands[c].c == data_buf[1])
 8003e1e:	fb00 7609 	mla	r6, r0, r9, r7
 8003e22:	3301      	adds	r3, #1
 8003e24:	7936      	ldrb	r6, [r6, #4]
 8003e26:	428e      	cmp	r6, r1
 8003e28:	d1f2      	bne.n	8003e10 <simpleserial_get+0x50>
	if ((data_buf[3] + 5) < next_frame) {
 8003e2a:	78e3      	ldrb	r3, [r4, #3]
 8003e2c:	3305      	adds	r3, #5
 8003e2e:	4543      	cmp	r3, r8
 8003e30:	da02      	bge.n	8003e38 <simpleserial_get+0x78>
        err = 11;
 8003e32:	230b      	movs	r3, #11
 8003e34:	e7d3      	b.n	8003dde <simpleserial_get+0x1e>
 8003e36:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8003e38:	f000 f8e2 	bl	8004000 <getch>
 8003e3c:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8003e3e:	b908      	cbnz	r0, 8003e44 <simpleserial_get+0x84>
            err = 12;
 8003e40:	230c      	movs	r3, #12
 8003e42:	e7cc      	b.n	8003dde <simpleserial_get+0x1e>
	for (; i < data_buf[3] + 5; i++) {
 8003e44:	78e3      	ldrb	r3, [r4, #3]
 8003e46:	1c6e      	adds	r6, r5, #1
 8003e48:	3304      	adds	r3, #4
 8003e4a:	42b3      	cmp	r3, r6
 8003e4c:	daf3      	bge.n	8003e36 <simpleserial_get+0x76>
	data_buf[i] = getch();
 8003e4e:	f000 f8d7 	bl	8004000 <getch>
 8003e52:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8003e54:	b108      	cbz	r0, 8003e5a <simpleserial_get+0x9a>
        err = 13;
 8003e56:	230d      	movs	r3, #13
 8003e58:	e7c1      	b.n	8003dde <simpleserial_get+0x1e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8003e5a:	f1c8 0101 	rsb	r1, r8, #1
 8003e5e:	fa51 f186 	uxtab	r1, r1, r6
 8003e62:	b2c9      	uxtb	r1, r1
 8003e64:	fa5f fa86 	uxtb.w	sl, r6
 8003e68:	eb04 0008 	add.w	r0, r4, r8
 8003e6c:	f7ff ff4e 	bl	8003d0c <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8003e70:	f1aa 0102 	sub.w	r1, sl, #2
 8003e74:	b2c9      	uxtb	r1, r1
 8003e76:	f10d 0009 	add.w	r0, sp, #9
 8003e7a:	f7ff ff21 	bl	8003cc0 <ss_crc>
	if (crc != data_buf[i-1]) {
 8003e7e:	5d63      	ldrb	r3, [r4, r5]
 8003e80:	4283      	cmp	r3, r0
 8003e82:	d001      	beq.n	8003e88 <simpleserial_get+0xc8>
        err = 14;
 8003e84:	230e      	movs	r3, #14
 8003e86:	e7aa      	b.n	8003dde <simpleserial_get+0x1e>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8003e88:	230c      	movs	r3, #12
 8003e8a:	fb03 7709 	mla	r7, r3, r9, r7
 8003e8e:	78e2      	ldrb	r2, [r4, #3]
 8003e90:	68fd      	ldr	r5, [r7, #12]
 8003e92:	78a1      	ldrb	r1, [r4, #2]
 8003e94:	7860      	ldrb	r0, [r4, #1]
 8003e96:	446b      	add	r3, sp
 8003e98:	47a8      	blx	r5
 8003e9a:	f88d 0007 	strb.w	r0, [sp, #7]
 8003e9e:	e7a0      	b.n	8003de2 <simpleserial_get+0x22>
 8003ea0:	200009cc 	.word	0x200009cc

08003ea4 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 8003ea4:	b530      	push	{r4, r5, lr}
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003ea6:	2203      	movs	r2, #3
{
 8003ea8:	b093      	sub	sp, #76	; 0x4c
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003eaa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003eae:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003eb8:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 8003ebc:	200c      	movs	r0, #12
 8003ebe:	23c4      	movs	r3, #196	; 0xc4
 8003ec0:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8003ec4:	2404      	movs	r4, #4
 8003ec6:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8003ec8:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003eca:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8003ecc:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8003ed0:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003ed2:	f000 f8bf 	bl	8004054 <HAL_RCC_OscConfig>
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	b100      	cbz	r0, 8003edc <platform_init+0x38>
        for(;;);
 8003eda:	e7fe      	b.n	8003eda <platform_init+0x36>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8003edc:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ede:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003ee2:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ee4:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8003ee6:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003ee8:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8003eec:	f000 fa52 	bl	8004394 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <platform_init+0x74>)
 8003ef2:	9400      	str	r4, [sp, #0]
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 8003ef6:	4809      	ldr	r0, [pc, #36]	; (8003f1c <platform_init+0x78>)
	__HAL_RCC_RNG_CLK_ENABLE();
 8003ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <platform_init+0x7c>)
 8003f0a:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 8003f0c:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 8003f0e:	f000 fce0 	bl	80048d2 <HAL_RNG_Init>

}
 8003f12:	b013      	add	sp, #76	; 0x4c
 8003f14:	bd30      	pop	{r4, r5, pc}
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	20000fd0 	.word	0x20000fd0
 8003f20:	50060800 	.word	0x50060800

08003f24 <init_uart>:

void init_uart(void)
{
 8003f24:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
{
 8003f28:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003f2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003f2e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 8003f32:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 8003f38:	4c15      	ldr	r4, [pc, #84]	; (8003f90 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003f3a:	4816      	ldr	r0, [pc, #88]	; (8003f94 <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 8003f3c:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 8003f3e:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 8003f40:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8003f42:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8003f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f46:	4313      	orrs	r3, r2
 8003f48:	6323      	str	r3, [r4, #48]	; 0x30
 8003f4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003f50:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 8003f52:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003f54:	f000 fab6 	bl	80044c4 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8003f58:	480f      	ldr	r0, [pc, #60]	; (8003f98 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8003f5a:	4910      	ldr	r1, [pc, #64]	; (8003f9c <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 8003f5c:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 230400;
 8003f5e:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8003f62:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8003f66:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003f6a:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003f6c:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003f6e:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003f70:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 8003f72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f74:	f043 0310 	orr.w	r3, r3, #16
 8003f78:	6463      	str	r3, [r4, #68]	; 0x44
 8003f7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8003f82:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 8003f84:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8003f86:	f000 fb89 	bl	800469c <HAL_UART_Init>
}
 8003f8a:	b009      	add	sp, #36	; 0x24
 8003f8c:	bd30      	pop	{r4, r5, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40020000 	.word	0x40020000
 8003f98:	20000fd0 	.word	0x20000fd0
 8003f9c:	40011000 	.word	0x40011000

08003fa0 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 8003fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 8003fa2:	4b0d      	ldr	r3, [pc, #52]	; (8003fd8 <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003fa4:	480d      	ldr	r0, [pc, #52]	; (8003fdc <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	9100      	str	r1, [sp, #0]
 8003faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 8003fb4:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003fc8:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003fce:	f000 fa79 	bl	80044c4 <HAL_GPIO_Init>
#endif
}
 8003fd2:	b007      	add	sp, #28
 8003fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020000 	.word	0x40020000

08003fe0 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8003fe0:	4802      	ldr	r0, [pc, #8]	; (8003fec <trigger_high+0xc>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003fe8:	f000 bb52 	b.w	8004690 <HAL_GPIO_WritePin>
 8003fec:	40020000 	.word	0x40020000

08003ff0 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003ff0:	4802      	ldr	r0, [pc, #8]	; (8003ffc <trigger_low+0xc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff8:	f000 bb4a 	b.w	8004690 <HAL_GPIO_WritePin>
 8003ffc:	40020000 	.word	0x40020000

08004000 <getch>:
#endif
}
char getch(void)
{
 8004000:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8004002:	4c07      	ldr	r4, [pc, #28]	; (8004020 <getch+0x20>)
 8004004:	f241 3388 	movw	r3, #5000	; 0x1388
 8004008:	2201      	movs	r2, #1
 800400a:	f10d 0107 	add.w	r1, sp, #7
 800400e:	4620      	mov	r0, r4
 8004010:	f000 fbf7 	bl	8004802 <HAL_UART_Receive>
 8004014:	2800      	cmp	r0, #0
 8004016:	d1f5      	bne.n	8004004 <getch+0x4>
	return d;
}
 8004018:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800401c:	b002      	add	sp, #8
 800401e:	bd10      	pop	{r4, pc}
 8004020:	20000fdc 	.word	0x20000fdc

08004024 <putch>:

void putch(char c)
{
 8004024:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004026:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 800402a:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800402e:	2201      	movs	r2, #1
 8004030:	f10d 0107 	add.w	r1, sp, #7
 8004034:	4802      	ldr	r0, [pc, #8]	; (8004040 <putch+0x1c>)
 8004036:	f000 fb9f 	bl	8004778 <HAL_UART_Transmit>
}
 800403a:	b003      	add	sp, #12
 800403c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004040:	20000fdc 	.word	0x20000fdc

08004044 <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <HAL_GetTick+0xc>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	1c42      	adds	r2, r0, #1
 800404a:	601a      	str	r2, [r3, #0]
}
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	2000106c 	.word	0x2000106c

08004054 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004054:	6803      	ldr	r3, [r0, #0]
{
 8004056:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004058:	07de      	lsls	r6, r3, #31
{
 800405a:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405c:	d43b      	bmi.n	80040d6 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	680b      	ldr	r3, [r1, #0]
 8004060:	079d      	lsls	r5, r3, #30
 8004062:	f100 808b 	bmi.w	800417c <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	680b      	ldr	r3, [r1, #0]
 8004068:	0718      	lsls	r0, r3, #28
 800406a:	f100 80d6 	bmi.w	800421a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406e:	680b      	ldr	r3, [r1, #0]
 8004070:	075a      	lsls	r2, r3, #29
 8004072:	d52a      	bpl.n	80040ca <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	4b91      	ldr	r3, [pc, #580]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800407a:	4c92      	ldr	r4, [pc, #584]	; (80042c4 <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800407c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004096:	f7ff ffd5 	bl	8004044 <HAL_GetTick>
 800409a:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	05d8      	lsls	r0, r3, #23
 80040a0:	f140 80df 	bpl.w	8004262 <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a4:	688b      	ldr	r3, [r1, #8]
 80040a6:	4c86      	ldr	r4, [pc, #536]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	f040 80e1 	bne.w	8004270 <HAL_RCC_OscConfig+0x21c>
 80040ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b6:	f7ff ffc5 	bl	8004044 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ba:	4d81      	ldr	r5, [pc, #516]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80040bc:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040be:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80040c4:	079a      	lsls	r2, r3, #30
 80040c6:	f140 80f4 	bpl.w	80042b2 <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ca:	698a      	ldr	r2, [r1, #24]
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	f040 80ff 	bne.w	80042d0 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80040d2:	2000      	movs	r0, #0
 80040d4:	e015      	b.n	8004102 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d6:	4b7a      	ldr	r3, [pc, #488]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	f002 020c 	and.w	r2, r2, #12
 80040de:	2a04      	cmp	r2, #4
 80040e0:	d007      	beq.n	80040f2 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e8:	2a08      	cmp	r2, #8
 80040ea:	d10c      	bne.n	8004106 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	0254      	lsls	r4, r2, #9
 80040f0:	d509      	bpl.n	8004106 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f2:	4b73      	ldr	r3, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0398      	lsls	r0, r3, #14
 80040f8:	d5b1      	bpl.n	800405e <HAL_RCC_OscConfig+0xa>
 80040fa:	684b      	ldr	r3, [r1, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ae      	bne.n	800405e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8004100:	2001      	movs	r0, #1
}
 8004102:	b002      	add	sp, #8
 8004104:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004106:	684a      	ldr	r2, [r1, #4]
 8004108:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800410c:	d112      	bne.n	8004134 <HAL_RCC_OscConfig+0xe0>
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004114:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004116:	f7ff ff95 	bl	8004044 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4d69      	ldr	r5, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	4e6a      	ldr	r6, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800411e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004120:	682b      	ldr	r3, [r5, #0]
 8004122:	039a      	lsls	r2, r3, #14
 8004124:	d49b      	bmi.n	800405e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004126:	f7ff ff8d 	bl	8004044 <HAL_GetTick>
 800412a:	1b00      	subs	r0, r0, r4
 800412c:	42b0      	cmp	r0, r6
 800412e:	d9f7      	bls.n	8004120 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004130:	2003      	movs	r0, #3
 8004132:	e7e6      	b.n	8004102 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004134:	4c62      	ldr	r4, [pc, #392]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
 8004136:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	d107      	bne.n	800414e <HAL_RCC_OscConfig+0xfa>
 800413e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800414c:	e7e3      	b.n	8004116 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004152:	6023      	str	r3, [r4, #0]
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800415c:	2a00      	cmp	r2, #0
 800415e:	d1da      	bne.n	8004116 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004160:	f7ff ff70 	bl	8004044 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	4e58      	ldr	r6, [pc, #352]	; (80042c8 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8004166:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	039b      	lsls	r3, r3, #14
 800416c:	f57f af77 	bpl.w	800405e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7ff ff68 	bl	8004044 <HAL_GetTick>
 8004174:	1b40      	subs	r0, r0, r5
 8004176:	42b0      	cmp	r0, r6
 8004178:	d9f6      	bls.n	8004168 <HAL_RCC_OscConfig+0x114>
 800417a:	e7d9      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800417c:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	f012 0f0c 	tst.w	r2, #12
 8004184:	d007      	beq.n	8004196 <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800418c:	2a08      	cmp	r2, #8
 800418e:	d116      	bne.n	80041be <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	0258      	lsls	r0, r3, #9
 8004194:	d413      	bmi.n	80041be <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	484a      	ldr	r0, [pc, #296]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
 8004198:	6803      	ldr	r3, [r0, #0]
 800419a:	079a      	lsls	r2, r3, #30
 800419c:	d502      	bpl.n	80041a4 <HAL_RCC_OscConfig+0x150>
 800419e:	68cb      	ldr	r3, [r1, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d1ad      	bne.n	8004100 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	23f8      	movs	r3, #248	; 0xf8
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	fab3 f283 	clz	r2, r3
 80041b0:	690b      	ldr	r3, [r1, #16]
 80041b2:	4093      	lsls	r3, r2
 80041b4:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 80041b8:	4313      	orrs	r3, r2
 80041ba:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041bc:	e753      	b.n	8004066 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041be:	68ca      	ldr	r2, [r1, #12]
 80041c0:	4b42      	ldr	r3, [pc, #264]	; (80042cc <HAL_RCC_OscConfig+0x278>)
 80041c2:	b1da      	cbz	r2, 80041fc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80041c8:	f7ff ff3c 	bl	8004044 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	4c3c      	ldr	r4, [pc, #240]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80041ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	079b      	lsls	r3, r3, #30
 80041d4:	d50c      	bpl.n	80041f0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	23f8      	movs	r3, #248	; 0xf8
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	fab3 f283 	clz	r2, r3
 80041e2:	690b      	ldr	r3, [r1, #16]
 80041e4:	4093      	lsls	r3, r2
 80041e6:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80041ea:	4313      	orrs	r3, r2
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	e73a      	b.n	8004066 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041f0:	f7ff ff28 	bl	8004044 <HAL_GetTick>
 80041f4:	1b40      	subs	r0, r0, r5
 80041f6:	2802      	cmp	r0, #2
 80041f8:	d9ea      	bls.n	80041d0 <HAL_RCC_OscConfig+0x17c>
 80041fa:	e799      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80041fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80041fe:	f7ff ff21 	bl	8004044 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	4d2f      	ldr	r5, [pc, #188]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8004204:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	079e      	lsls	r6, r3, #30
 800420a:	f57f af2c 	bpl.w	8004066 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420e:	f7ff ff19 	bl	8004044 <HAL_GetTick>
 8004212:	1b00      	subs	r0, r0, r4
 8004214:	2802      	cmp	r0, #2
 8004216:	d9f6      	bls.n	8004206 <HAL_RCC_OscConfig+0x1b2>
 8004218:	e78a      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800421a:	694a      	ldr	r2, [r1, #20]
 800421c:	4b2b      	ldr	r3, [pc, #172]	; (80042cc <HAL_RCC_OscConfig+0x278>)
 800421e:	b182      	cbz	r2, 8004242 <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 8004220:	2201      	movs	r2, #1
 8004222:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004226:	f7ff ff0d 	bl	8004044 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422a:	4d25      	ldr	r5, [pc, #148]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 800422c:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004230:	079b      	lsls	r3, r3, #30
 8004232:	f53f af1c 	bmi.w	800406e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004236:	f7ff ff05 	bl	8004044 <HAL_GetTick>
 800423a:	1b00      	subs	r0, r0, r4
 800423c:	2802      	cmp	r0, #2
 800423e:	d9f6      	bls.n	800422e <HAL_RCC_OscConfig+0x1da>
 8004240:	e776      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8004242:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004246:	f7ff fefd 	bl	8004044 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424a:	4d1d      	ldr	r5, [pc, #116]	; (80042c0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 800424c:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004250:	079e      	lsls	r6, r3, #30
 8004252:	f57f af0c 	bpl.w	800406e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004256:	f7ff fef5 	bl	8004044 <HAL_GetTick>
 800425a:	1b00      	subs	r0, r0, r4
 800425c:	2802      	cmp	r0, #2
 800425e:	d9f6      	bls.n	800424e <HAL_RCC_OscConfig+0x1fa>
 8004260:	e766      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7ff feef 	bl	8004044 <HAL_GetTick>
 8004266:	1b40      	subs	r0, r0, r5
 8004268:	2802      	cmp	r0, #2
 800426a:	f67f af17 	bls.w	800409c <HAL_RCC_OscConfig+0x48>
 800426e:	e75f      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	2b05      	cmp	r3, #5
 8004272:	d104      	bne.n	800427e <HAL_RCC_OscConfig+0x22a>
 8004274:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6723      	str	r3, [r4, #112]	; 0x70
 800427c:	e717      	b.n	80040ae <HAL_RCC_OscConfig+0x5a>
 800427e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	6722      	str	r2, [r4, #112]	; 0x70
 8004286:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004288:	f022 0204 	bic.w	r2, r2, #4
 800428c:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428e:	2b00      	cmp	r3, #0
 8004290:	f47f af11 	bne.w	80040b6 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8004294:	f7ff fed6 	bl	8004044 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800429c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80042a0:	079b      	lsls	r3, r3, #30
 80042a2:	f57f af12 	bpl.w	80040ca <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7ff fecd 	bl	8004044 <HAL_GetTick>
 80042aa:	1b40      	subs	r0, r0, r5
 80042ac:	42b0      	cmp	r0, r6
 80042ae:	d9f6      	bls.n	800429e <HAL_RCC_OscConfig+0x24a>
 80042b0:	e73e      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7ff fec7 	bl	8004044 <HAL_GetTick>
 80042b6:	1b00      	subs	r0, r0, r4
 80042b8:	42b0      	cmp	r0, r6
 80042ba:	f67f af02 	bls.w	80040c2 <HAL_RCC_OscConfig+0x6e>
 80042be:	e737      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	05f5e100 	.word	0x05f5e100
 80042cc:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d0:	4c2d      	ldr	r4, [pc, #180]	; (8004388 <HAL_RCC_OscConfig+0x334>)
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f43f af11 	beq.w	8004100 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042de:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_RCC_OscConfig+0x338>)
 80042e0:	2a02      	cmp	r2, #2
 80042e2:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80042e6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e8:	d140      	bne.n	800436c <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 80042ea:	f7ff feab 	bl	8004044 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ee:	4e28      	ldr	r6, [pc, #160]	; (8004390 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 80042f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	0198      	lsls	r0, r3, #6
 80042f6:	d433      	bmi.n	8004360 <HAL_RCC_OscConfig+0x30c>
 80042f8:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80042fc:	fa96 f6a6 	rbit	r6, r6
 8004300:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004304:	fab6 f686 	clz	r6, r6
 8004308:	fa92 f2a2 	rbit	r2, r2
 800430c:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8004310:	fab2 f582 	clz	r5, r2
 8004314:	fa90 f0a0 	rbit	r0, r0
 8004318:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 800431c:	4313      	orrs	r3, r2
 800431e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004320:	40b2      	lsls	r2, r6
 8004322:	4313      	orrs	r3, r2
 8004324:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004326:	0852      	lsrs	r2, r2, #1
 8004328:	3a01      	subs	r2, #1
 800432a:	40aa      	lsls	r2, r5
 800432c:	4313      	orrs	r3, r2
 800432e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	4d17      	ldr	r5, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004332:	fab0 f080 	clz	r0, r0
 8004336:	fa02 f000 	lsl.w	r0, r2, r0
 800433a:	4303      	orrs	r3, r0
 800433c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004340:	4c11      	ldr	r4, [pc, #68]	; (8004388 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 8004342:	2201      	movs	r2, #1
 8004344:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004346:	f7ff fe7d 	bl	8004044 <HAL_GetTick>
 800434a:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	019a      	lsls	r2, r3, #6
 8004350:	f53f aebf 	bmi.w	80040d2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004354:	f7ff fe76 	bl	8004044 <HAL_GetTick>
 8004358:	1a40      	subs	r0, r0, r1
 800435a:	42a8      	cmp	r0, r5
 800435c:	d9f6      	bls.n	800434c <HAL_RCC_OscConfig+0x2f8>
 800435e:	e6e7      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004360:	f7ff fe70 	bl	8004044 <HAL_GetTick>
 8004364:	1b40      	subs	r0, r0, r5
 8004366:	42b0      	cmp	r0, r6
 8004368:	d9c3      	bls.n	80042f2 <HAL_RCC_OscConfig+0x29e>
 800436a:	e6e1      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 800436c:	f7ff fe6a 	bl	8004044 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	4d07      	ldr	r5, [pc, #28]	; (8004390 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8004372:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	019b      	lsls	r3, r3, #6
 8004378:	f57f aeab 	bpl.w	80040d2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437c:	f7ff fe62 	bl	8004044 <HAL_GetTick>
 8004380:	1a40      	subs	r0, r0, r1
 8004382:	42a8      	cmp	r0, r5
 8004384:	d9f6      	bls.n	8004374 <HAL_RCC_OscConfig+0x320>
 8004386:	e6d3      	b.n	8004130 <HAL_RCC_OscConfig+0xdc>
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	001e8480 	.word	0x001e8480

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004396:	4b49      	ldr	r3, [pc, #292]	; (80044bc <HAL_RCC_ClockConfig+0x128>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	f002 020f 	and.w	r2, r2, #15
 800439e:	428a      	cmp	r2, r1
{
 80043a0:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80043a2:	d31a      	bcc.n	80043da <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	0790      	lsls	r0, r2, #30
 80043a8:	d420      	bmi.n	80043ec <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043aa:	07d2      	lsls	r2, r2, #31
 80043ac:	d426      	bmi.n	80043fc <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80043ae:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_ClockConfig+0x128>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	f002 020f 	and.w	r2, r2, #15
 80043b6:	428a      	cmp	r2, r1
 80043b8:	d870      	bhi.n	800449c <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	0743      	lsls	r3, r0, #29
 80043be:	d475      	bmi.n	80044ac <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	f010 0008 	ands.w	r0, r0, #8
 80043c4:	d011      	beq.n	80043ea <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c6:	4a3e      	ldr	r2, [pc, #248]	; (80044c0 <HAL_RCC_ClockConfig+0x12c>)
 80043c8:	6921      	ldr	r1, [r4, #16]
 80043ca:	6893      	ldr	r3, [r2, #8]
 80043cc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80043d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80043d4:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 80043d6:	2000      	movs	r0, #0
 80043d8:	e007      	b.n	80043ea <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	b2ca      	uxtb	r2, r1
 80043dc:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	428b      	cmp	r3, r1
 80043e6:	d0dd      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80043e8:	2001      	movs	r0, #1
}
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4834      	ldr	r0, [pc, #208]	; (80044c0 <HAL_RCC_ClockConfig+0x12c>)
 80043ee:	68a5      	ldr	r5, [r4, #8]
 80043f0:	6883      	ldr	r3, [r0, #8]
 80043f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f6:	432b      	orrs	r3, r5
 80043f8:	6083      	str	r3, [r0, #8]
 80043fa:	e7d6      	b.n	80043aa <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fc:	6862      	ldr	r2, [r4, #4]
 80043fe:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCC_ClockConfig+0x12c>)
 8004400:	2a01      	cmp	r2, #1
 8004402:	d11d      	bne.n	8004440 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	d0ed      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440c:	4d2c      	ldr	r5, [pc, #176]	; (80044c0 <HAL_RCC_ClockConfig+0x12c>)
 800440e:	68ab      	ldr	r3, [r5, #8]
 8004410:	f023 0303 	bic.w	r3, r3, #3
 8004414:	4313      	orrs	r3, r2
 8004416:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004418:	f7ff fe14 	bl	8004044 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8004420:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004422:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	d115      	bne.n	8004454 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	68ab      	ldr	r3, [r5, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b04      	cmp	r3, #4
 8004430:	d0bd      	beq.n	80043ae <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004432:	f7ff fe07 	bl	8004044 <HAL_GetTick>
 8004436:	1b80      	subs	r0, r0, r6
 8004438:	42b8      	cmp	r0, r7
 800443a:	d9f5      	bls.n	8004428 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800443c:	2003      	movs	r0, #3
 800443e:	e7d4      	b.n	80043ea <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004440:	1e90      	subs	r0, r2, #2
 8004442:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004444:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004446:	d802      	bhi.n	800444e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800444c:	e7dd      	b.n	800440a <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444e:	f013 0f02 	tst.w	r3, #2
 8004452:	e7da      	b.n	800440a <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004454:	2b02      	cmp	r3, #2
 8004456:	d10a      	bne.n	800446e <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004458:	68ab      	ldr	r3, [r5, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b08      	cmp	r3, #8
 8004460:	d0a5      	beq.n	80043ae <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004462:	f7ff fdef 	bl	8004044 <HAL_GetTick>
 8004466:	1b80      	subs	r0, r0, r6
 8004468:	42b8      	cmp	r0, r7
 800446a:	d9f5      	bls.n	8004458 <HAL_RCC_ClockConfig+0xc4>
 800446c:	e7e6      	b.n	800443c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800446e:	2b03      	cmp	r3, #3
 8004470:	d10f      	bne.n	8004492 <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004472:	68ab      	ldr	r3, [r5, #8]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d098      	beq.n	80043ae <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7ff fde2 	bl	8004044 <HAL_GetTick>
 8004480:	1b80      	subs	r0, r0, r6
 8004482:	42b8      	cmp	r0, r7
 8004484:	d9f5      	bls.n	8004472 <HAL_RCC_ClockConfig+0xde>
 8004486:	e7d9      	b.n	800443c <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7ff fddc 	bl	8004044 <HAL_GetTick>
 800448c:	1b80      	subs	r0, r0, r6
 800448e:	42b8      	cmp	r0, r7
 8004490:	d8d4      	bhi.n	800443c <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	68ab      	ldr	r3, [r5, #8]
 8004494:	f013 0f0c 	tst.w	r3, #12
 8004498:	d1f6      	bne.n	8004488 <HAL_RCC_ClockConfig+0xf4>
 800449a:	e788      	b.n	80043ae <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449c:	b2ca      	uxtb	r2, r1
 800449e:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	428b      	cmp	r3, r1
 80044a8:	d19e      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x54>
 80044aa:	e786      	b.n	80043ba <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ac:	4904      	ldr	r1, [pc, #16]	; (80044c0 <HAL_RCC_ClockConfig+0x12c>)
 80044ae:	68e3      	ldr	r3, [r4, #12]
 80044b0:	688a      	ldr	r2, [r1, #8]
 80044b2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80044b6:	431a      	orrs	r2, r3
 80044b8:	608a      	str	r2, [r1, #8]
 80044ba:	e781      	b.n	80043c0 <HAL_RCC_ClockConfig+0x2c>
 80044bc:	40023c00 	.word	0x40023c00
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c8:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8004680 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044cc:	4a6d      	ldr	r2, [pc, #436]	; (8004684 <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ce:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004688 <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044d2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044d4:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 80044d6:	2701      	movs	r7, #1
 80044d8:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044da:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 80044de:	ea37 0404 	bics.w	r4, r7, r4
 80044e2:	f040 80b9 	bne.w	8004658 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e6:	684c      	ldr	r4, [r1, #4]
 80044e8:	f024 0a10 	bic.w	sl, r4, #16
 80044ec:	f1ba 0f02 	cmp.w	sl, #2
 80044f0:	d116      	bne.n	8004520 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80044f2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80044f6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fa:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80044fe:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004502:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004506:	f04f 0c0f 	mov.w	ip, #15
 800450a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800450e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004512:	690e      	ldr	r6, [r1, #16]
 8004514:	fa06 f60b 	lsl.w	r6, r6, fp
 8004518:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 800451c:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8004520:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004524:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004528:	f04f 0c03 	mov.w	ip, #3
 800452c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004530:	ea2b 0b0c 	bic.w	fp, fp, ip
 8004534:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004538:	f004 0c03 	and.w	ip, r4, #3
 800453c:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004540:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004544:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004548:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800454c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004550:	d816      	bhi.n	8004580 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8004552:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004556:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800455a:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455e:	fa0a fa0e 	lsl.w	sl, sl, lr
 8004562:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8004566:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 800456a:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800456e:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004572:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8004576:	fa0c fc03 	lsl.w	ip, ip, r3
 800457a:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 800457e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004580:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004582:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004584:	688e      	ldr	r6, [r1, #8]
 8004586:	fa06 f60e 	lsl.w	r6, r6, lr
 800458a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 800458c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800458e:	00e6      	lsls	r6, r4, #3
 8004590:	d562      	bpl.n	8004658 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004592:	2600      	movs	r6, #0
 8004594:	9601      	str	r6, [sp, #4]
 8004596:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800459a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800459e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80045a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80045a6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80045aa:	9701      	str	r7, [sp, #4]
 80045ac:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80045ae:	f023 0703 	bic.w	r7, r3, #3
 80045b2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80045b6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045ba:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80045be:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80045c6:	f04f 0c0f 	mov.w	ip, #15
 80045ca:	fa0c fc0e 	lsl.w	ip, ip, lr
 80045ce:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045d2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800468c <HAL_GPIO_Init+0x1c8>
 80045d6:	4550      	cmp	r0, sl
 80045d8:	d01d      	beq.n	8004616 <HAL_GPIO_Init+0x152>
 80045da:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80045de:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 80045e2:	42b0      	cmp	r0, r6
 80045e4:	d03f      	beq.n	8004666 <HAL_GPIO_Init+0x1a2>
 80045e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80045ea:	42b0      	cmp	r0, r6
 80045ec:	d03d      	beq.n	800466a <HAL_GPIO_Init+0x1a6>
 80045ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80045f2:	42b0      	cmp	r0, r6
 80045f4:	d03b      	beq.n	800466e <HAL_GPIO_Init+0x1aa>
 80045f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80045fa:	42b0      	cmp	r0, r6
 80045fc:	d039      	beq.n	8004672 <HAL_GPIO_Init+0x1ae>
 80045fe:	4548      	cmp	r0, r9
 8004600:	d039      	beq.n	8004676 <HAL_GPIO_Init+0x1b2>
 8004602:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004606:	42b0      	cmp	r0, r6
 8004608:	d037      	beq.n	800467a <HAL_GPIO_Init+0x1b6>
 800460a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800460e:	42b0      	cmp	r0, r6
 8004610:	bf0c      	ite	eq
 8004612:	2607      	moveq	r6, #7
 8004614:	2608      	movne	r6, #8
 8004616:	fa06 f60e 	lsl.w	r6, r6, lr
 800461a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 800461e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8004620:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004622:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004624:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8004628:	bf0c      	ite	eq
 800462a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800462c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800462e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8004630:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004632:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004636:	bf0c      	ite	eq
 8004638:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800463a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800463c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004640:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004644:	bf0c      	ite	eq
 8004646:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8004648:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800464a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800464c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800464e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8004650:	bf54      	ite	pl
 8004652:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8004654:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8004656:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004658:	3301      	adds	r3, #1
 800465a:	2b10      	cmp	r3, #16
 800465c:	f47f af3a 	bne.w	80044d4 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8004660:	b003      	add	sp, #12
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004666:	2601      	movs	r6, #1
 8004668:	e7d5      	b.n	8004616 <HAL_GPIO_Init+0x152>
 800466a:	2602      	movs	r6, #2
 800466c:	e7d3      	b.n	8004616 <HAL_GPIO_Init+0x152>
 800466e:	2603      	movs	r6, #3
 8004670:	e7d1      	b.n	8004616 <HAL_GPIO_Init+0x152>
 8004672:	2604      	movs	r6, #4
 8004674:	e7cf      	b.n	8004616 <HAL_GPIO_Init+0x152>
 8004676:	2605      	movs	r6, #5
 8004678:	e7cd      	b.n	8004616 <HAL_GPIO_Init+0x152>
 800467a:	2606      	movs	r6, #6
 800467c:	e7cb      	b.n	8004616 <HAL_GPIO_Init+0x152>
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	40013c00 	.word	0x40013c00
 8004688:	40021400 	.word	0x40021400
 800468c:	40020000 	.word	0x40020000

08004690 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004690:	b10a      	cbz	r2, 8004696 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004692:	6181      	str	r1, [r0, #24]
  }
}
 8004694:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004696:	0409      	lsls	r1, r1, #16
 8004698:	e7fb      	b.n	8004692 <HAL_GPIO_WritePin+0x2>
 800469a:	0000      	movs	r0, r0

0800469c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469c:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800469e:	2800      	cmp	r0, #0
 80046a0:	d066      	beq.n	8004770 <HAL_UART_Init+0xd4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 80046a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80046a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046aa:	b90b      	cbnz	r3, 80046b0 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b0:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80046b2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046b4:	6905      	ldr	r5, [r0, #16]
 80046b6:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 80046b8:	2324      	movs	r3, #36	; 0x24
 80046ba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80046be:	68cb      	ldr	r3, [r1, #12]
 80046c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c4:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 80046c6:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80046c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80046cc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80046ce:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046d0:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 80046d2:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046d4:	432b      	orrs	r3, r5
 80046d6:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80046d8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046dc:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80046de:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046e2:	4323      	orrs	r3, r4
 80046e4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80046e6:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 80046e8:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 80046ea:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80046f0:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80046f6:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046f8:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_UART_Init+0xd8>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80046fa:	6843      	ldr	r3, [r0, #4]
 80046fc:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004700:	d128      	bne.n	8004754 <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fbb2 f2f3 	udiv	r2, r2, r3
 8004708:	fbb2 f6f5 	udiv	r6, r2, r5
 800470c:	fb05 2216 	mls	r2, r5, r6, r2
 8004710:	00d3      	lsls	r3, r2, #3
 8004712:	3332      	adds	r3, #50	; 0x32
 8004714:	fbb3 f3f5 	udiv	r3, r3, r5
 8004718:	f003 0207 	and.w	r2, r3, #7
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 8004722:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004726:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004728:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800472a:	690b      	ldr	r3, [r1, #16]
 800472c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004730:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004732:	694b      	ldr	r3, [r1, #20]
 8004734:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004738:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800473a:	68cb      	ldr	r3, [r1, #12]
 800473c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004740:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 8004742:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	2300      	movs	r3, #0
 8004746:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004748:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800474c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8004750:	4618      	mov	r0, r3
}
 8004752:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	fbb2 f2f3 	udiv	r2, r2, r3
 800475a:	fbb2 f6f5 	udiv	r6, r2, r5
 800475e:	fb05 2316 	mls	r3, r5, r6, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	3332      	adds	r3, #50	; 0x32
 8004766:	fbb3 f3f5 	udiv	r3, r3, r5
 800476a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800476e:	e7db      	b.n	8004728 <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
 8004772:	e7ee      	b.n	8004752 <HAL_UART_Init+0xb6>
 8004774:	0afb6e90 	.word	0x0afb6e90

08004778 <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004778:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800477c:	2b20      	cmp	r3, #32
 800477e:	d13e      	bne.n	80047fe <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8004780:	2900      	cmp	r1, #0
 8004782:	d03a      	beq.n	80047fa <HAL_UART_Transmit+0x82>
 8004784:	2a00      	cmp	r2, #0
 8004786:	d038      	beq.n	80047fa <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004788:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800478c:	2b01      	cmp	r3, #1
 800478e:	d036      	beq.n	80047fe <HAL_UART_Transmit+0x86>
 8004790:	2301      	movs	r3, #1
 8004792:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004796:	2300      	movs	r3, #0
 8004798:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479a:	2321      	movs	r3, #33	; 0x21
 800479c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80047a0:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 80047a2:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80047a4:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80047a6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80047a8:	b292      	uxth	r2, r2
 80047aa:	b952      	cbnz	r2, 80047c2 <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	0652      	lsls	r2, r2, #25
 80047b0:	d5fc      	bpl.n	80047ac <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80047b2:	2320      	movs	r3, #32
 80047b4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b8:	2300      	movs	r3, #0
 80047ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 80047be:	4618      	mov	r0, r3
 80047c0:	4770      	bx	lr
      huart->TxXferCount--;
 80047c2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80047c4:	3a01      	subs	r2, #1
 80047c6:	b292      	uxth	r2, r2
 80047c8:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047ca:	6882      	ldr	r2, [r0, #8]
 80047cc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80047d0:	d10c      	bne.n	80047ec <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	0612      	lsls	r2, r2, #24
 80047d6:	d5fc      	bpl.n	80047d2 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80047d8:	880a      	ldrh	r2, [r1, #0]
 80047da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047de:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80047e0:	6902      	ldr	r2, [r0, #16]
 80047e2:	b90a      	cbnz	r2, 80047e8 <HAL_UART_Transmit+0x70>
          pData +=2U;
 80047e4:	3102      	adds	r1, #2
 80047e6:	e7de      	b.n	80047a6 <HAL_UART_Transmit+0x2e>
          pData +=1U;
 80047e8:	3101      	adds	r1, #1
 80047ea:	e7dc      	b.n	80047a6 <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	0612      	lsls	r2, r2, #24
 80047f0:	d5fc      	bpl.n	80047ec <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80047f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	e7d5      	b.n	80047a6 <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 80047fa:	2001      	movs	r0, #1
 80047fc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80047fe:	2002      	movs	r0, #2
  }
}
 8004800:	4770      	bx	lr

08004802 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004802:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004804:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004808:	2b20      	cmp	r3, #32
 800480a:	d144      	bne.n	8004896 <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 800480c:	2900      	cmp	r1, #0
 800480e:	d040      	beq.n	8004892 <HAL_UART_Receive+0x90>
 8004810:	2a00      	cmp	r2, #0
 8004812:	d03e      	beq.n	8004892 <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004814:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004818:	2b01      	cmp	r3, #1
 800481a:	d03c      	beq.n	8004896 <HAL_UART_Receive+0x94>
 800481c:	2301      	movs	r3, #1
 800481e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	2300      	movs	r3, #0
 8004824:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004826:	2322      	movs	r3, #34	; 0x22
 8004828:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 800482c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800482e:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8004830:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	b933      	cbnz	r3, 8004844 <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004836:	2220      	movs	r2, #32
 8004838:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800483c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8004840:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004842:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 8004844:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8004846:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 8004848:	3b01      	subs	r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800484e:	6883      	ldr	r3, [r0, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004854:	d111      	bne.n	800487a <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	069c      	lsls	r4, r3, #26
 800485a:	d5fc      	bpl.n	8004856 <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 800485c:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800485e:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004860:	b933      	cbnz	r3, 8004870 <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004862:	460b      	mov	r3, r1
 8004864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004868:	f823 2b02 	strh.w	r2, [r3], #2
{
 800486c:	4619      	mov	r1, r3
 800486e:	e7df      	b.n	8004830 <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004870:	460b      	mov	r3, r1
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 8004878:	e7f8      	b.n	800486c <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	069b      	lsls	r3, r3, #26
 800487e:	d5fc      	bpl.n	800487a <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004880:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004882:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 8004884:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004886:	b90c      	cbnz	r4, 800488c <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004888:	700a      	strb	r2, [r1, #0]
 800488a:	e7ef      	b.n	800486c <HAL_UART_Receive+0x6a>
 800488c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004890:	e7fa      	b.n	8004888 <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 8004892:	2001      	movs	r0, #1
 8004894:	e7d5      	b.n	8004842 <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 8004896:	2002      	movs	r0, #2
 8004898:	e7d3      	b.n	8004842 <HAL_UART_Receive+0x40>
 800489a:	0000      	movs	r0, r0

0800489c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <_sbrk+0x2c>)
 800489e:	6811      	ldr	r1, [r2, #0]
{
 80048a0:	b508      	push	{r3, lr}
 80048a2:	4603      	mov	r3, r0
	if (heap_end == 0)
 80048a4:	b909      	cbnz	r1, 80048aa <_sbrk+0xe>
		heap_end = &end;
 80048a6:	4909      	ldr	r1, [pc, #36]	; (80048cc <_sbrk+0x30>)
 80048a8:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80048aa:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80048ac:	4669      	mov	r1, sp
 80048ae:	4403      	add	r3, r0
 80048b0:	428b      	cmp	r3, r1
 80048b2:	d906      	bls.n	80048c2 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80048b4:	f000 f88c 	bl	80049d0 <__errno>
 80048b8:	230c      	movs	r3, #12
 80048ba:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80048c0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80048c2:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80048c4:	e7fc      	b.n	80048c0 <_sbrk+0x24>
 80048c6:	bf00      	nop
 80048c8:	20001070 	.word	0x20001070
 80048cc:	200010c0 	.word	0x200010c0

080048d0 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 80048d0:	4770      	bx	lr

080048d2 <HAL_RNG_Init>:
{ 
 80048d2:	b510      	push	{r4, lr}
  if(hrng == NULL)
 80048d4:	4604      	mov	r4, r0
 80048d6:	b1a8      	cbz	r0, 8004904 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 80048d8:	7903      	ldrb	r3, [r0, #4]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d014      	beq.n	8004908 <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 80048de:	7943      	ldrb	r3, [r0, #5]
 80048e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048e4:	b913      	cbnz	r3, 80048ec <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 80048e6:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80048e8:	f7ff fff2 	bl	80048d0 <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 80048ec:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 80048fa:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80048fc:	2301      	movs	r3, #1
 80048fe:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 8004900:	7120      	strb	r0, [r4, #4]
}
 8004902:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004904:	2001      	movs	r0, #1
 8004906:	e7fc      	b.n	8004902 <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 8004908:	2002      	movs	r0, #2
 800490a:	e7fa      	b.n	8004902 <HAL_RNG_Init+0x30>

0800490c <Reset_Handler>:
 800490c:	2100      	movs	r1, #0
 800490e:	e003      	b.n	8004918 <LoopCopyDataInit>

08004910 <CopyDataInit>:
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <LoopForever+0x2>)
 8004912:	585b      	ldr	r3, [r3, r1]
 8004914:	5043      	str	r3, [r0, r1]
 8004916:	3104      	adds	r1, #4

08004918 <LoopCopyDataInit>:
 8004918:	480a      	ldr	r0, [pc, #40]	; (8004944 <LoopForever+0x6>)
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <LoopForever+0xa>)
 800491c:	1842      	adds	r2, r0, r1
 800491e:	429a      	cmp	r2, r3
 8004920:	d3f6      	bcc.n	8004910 <CopyDataInit>
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <LoopForever+0xe>)
 8004924:	e002      	b.n	800492c <LoopFillZerobss>

08004926 <FillZerobss>:
 8004926:	2300      	movs	r3, #0
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	3204      	adds	r2, #4

0800492c <LoopFillZerobss>:
 800492c:	4b08      	ldr	r3, [pc, #32]	; (8004950 <LoopForever+0x12>)
 800492e:	429a      	cmp	r2, r3
 8004930:	d3f9      	bcc.n	8004926 <FillZerobss>
 8004932:	f3af 8000 	nop.w
 8004936:	f000 f91d 	bl	8004b74 <__libc_init_array>
 800493a:	f7fc fcad 	bl	8001298 <main>

0800493e <LoopForever>:
 800493e:	e7fe      	b.n	800493e <LoopForever>
 8004940:	0800b428 	.word	0x0800b428
 8004944:	20000000 	.word	0x20000000
 8004948:	200009b0 	.word	0x200009b0
 800494c:	200009b0 	.word	0x200009b0
 8004950:	200010bc 	.word	0x200010bc

08004954 <BusFault_Handler>:
 8004954:	e7fe      	b.n	8004954 <BusFault_Handler>
 8004956:	0000      	movs	r0, r0

08004958 <calloc>:
 8004958:	b410      	push	{r4}
 800495a:	4c04      	ldr	r4, [pc, #16]	; (800496c <calloc+0x14>)
 800495c:	4603      	mov	r3, r0
 800495e:	460a      	mov	r2, r1
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	bc10      	pop	{r4}
 8004964:	4619      	mov	r1, r3
 8004966:	f000 b803 	b.w	8004970 <_calloc_r>
 800496a:	bf00      	nop
 800496c:	20000000 	.word	0x20000000

08004970 <_calloc_r>:
 8004970:	b510      	push	{r4, lr}
 8004972:	fb02 f101 	mul.w	r1, r2, r1
 8004976:	f000 f939 	bl	8004bec <_malloc_r>
 800497a:	4604      	mov	r4, r0
 800497c:	b168      	cbz	r0, 800499a <_calloc_r+0x2a>
 800497e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004982:	f022 0203 	bic.w	r2, r2, #3
 8004986:	3a04      	subs	r2, #4
 8004988:	2a24      	cmp	r2, #36	; 0x24
 800498a:	d818      	bhi.n	80049be <_calloc_r+0x4e>
 800498c:	2a13      	cmp	r2, #19
 800498e:	d806      	bhi.n	800499e <_calloc_r+0x2e>
 8004990:	4602      	mov	r2, r0
 8004992:	2300      	movs	r3, #0
 8004994:	e9c2 3300 	strd	r3, r3, [r2]
 8004998:	6093      	str	r3, [r2, #8]
 800499a:	4620      	mov	r0, r4
 800499c:	bd10      	pop	{r4, pc}
 800499e:	2300      	movs	r3, #0
 80049a0:	2a1b      	cmp	r2, #27
 80049a2:	e9c0 3300 	strd	r3, r3, [r0]
 80049a6:	d90f      	bls.n	80049c8 <_calloc_r+0x58>
 80049a8:	2a24      	cmp	r2, #36	; 0x24
 80049aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80049ae:	bf11      	iteee	ne
 80049b0:	f100 0210 	addne.w	r2, r0, #16
 80049b4:	6103      	streq	r3, [r0, #16]
 80049b6:	f100 0218 	addeq.w	r2, r0, #24
 80049ba:	6143      	streq	r3, [r0, #20]
 80049bc:	e7e9      	b.n	8004992 <_calloc_r+0x22>
 80049be:	2100      	movs	r1, #0
 80049c0:	f000 fc74 	bl	80052ac <memset>
 80049c4:	4620      	mov	r0, r4
 80049c6:	bd10      	pop	{r4, pc}
 80049c8:	f100 0208 	add.w	r2, r0, #8
 80049cc:	e7e1      	b.n	8004992 <_calloc_r+0x22>
 80049ce:	bf00      	nop

080049d0 <__errno>:
 80049d0:	4b01      	ldr	r3, [pc, #4]	; (80049d8 <__errno+0x8>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000000 	.word	0x20000000

080049dc <exit>:
 80049dc:	b508      	push	{r3, lr}
 80049de:	2100      	movs	r1, #0
 80049e0:	4604      	mov	r4, r0
 80049e2:	f002 fbb7 	bl	8007154 <__call_exitprocs>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <exit+0x1c>)
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80049ec:	b103      	cbz	r3, 80049f0 <exit+0x14>
 80049ee:	4798      	blx	r3
 80049f0:	4620      	mov	r0, r4
 80049f2:	f006 f86b 	bl	800aacc <_exit>
 80049f6:	bf00      	nop
 80049f8:	0800b118 	.word	0x0800b118

080049fc <_cleanup_r>:
 80049fc:	4901      	ldr	r1, [pc, #4]	; (8004a04 <_cleanup_r+0x8>)
 80049fe:	f000 b895 	b.w	8004b2c <_fwalk_reent>
 8004a02:	bf00      	nop
 8004a04:	08008235 	.word	0x08008235

08004a08 <__sinit>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4682      	mov	sl, r0
 8004a0e:	4839      	ldr	r0, [pc, #228]	; (8004af4 <__sinit+0xec>)
 8004a10:	f000 f8d8 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 8004a14:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8004a18:	2c00      	cmp	r4, #0
 8004a1a:	d166      	bne.n	8004aea <__sinit+0xe2>
 8004a1c:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004a20:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <__sinit+0xf0>)
 8004a22:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 8004a26:	2303      	movs	r3, #3
 8004a28:	e9ca 43b8 	strd	r4, r3, [sl, #736]	; 0x2e0
 8004a2c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8004afc <__sinit+0xf4>
 8004a30:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8004b00 <__sinit+0xf8>
 8004a34:	4f33      	ldr	r7, [pc, #204]	; (8004b04 <__sinit+0xfc>)
 8004a36:	4e34      	ldr	r6, [pc, #208]	; (8004b08 <__sinit+0x100>)
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
 8004a3e:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
 8004a42:	4621      	mov	r1, r4
 8004a44:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8004a48:	e9c5 4400 	strd	r4, r4, [r5]
 8004a4c:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8004a50:	666c      	str	r4, [r5, #100]	; 0x64
 8004a52:	2208      	movs	r2, #8
 8004a54:	61ac      	str	r4, [r5, #24]
 8004a56:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004a5a:	f000 fc27 	bl	80052ac <memset>
 8004a5e:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8004a62:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8004a66:	62ee      	str	r6, [r5, #44]	; 0x2c
 8004a68:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8004a6c:	f000 f8a6 	bl	8004bbc <__retarget_lock_init_recursive>
 8004a70:	f8da 5008 	ldr.w	r5, [sl, #8]
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <__sinit+0x104>)
 8004a76:	60eb      	str	r3, [r5, #12]
 8004a78:	4621      	mov	r1, r4
 8004a7a:	e9c5 4400 	strd	r4, r4, [r5]
 8004a7e:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8004a82:	666c      	str	r4, [r5, #100]	; 0x64
 8004a84:	60ac      	str	r4, [r5, #8]
 8004a86:	61ac      	str	r4, [r5, #24]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004a8e:	f000 fc0d 	bl	80052ac <memset>
 8004a92:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8004a96:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8004a9a:	62ee      	str	r6, [r5, #44]	; 0x2c
 8004a9c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8004aa0:	f000 f88c 	bl	8004bbc <__retarget_lock_init_recursive>
 8004aa4:	f8da 500c 	ldr.w	r5, [sl, #12]
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <__sinit+0x108>)
 8004aaa:	60eb      	str	r3, [r5, #12]
 8004aac:	4621      	mov	r1, r4
 8004aae:	e9c5 4400 	strd	r4, r4, [r5]
 8004ab2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8004ab6:	666c      	str	r4, [r5, #100]	; 0x64
 8004ab8:	60ac      	str	r4, [r5, #8]
 8004aba:	61ac      	str	r4, [r5, #24]
 8004abc:	2208      	movs	r2, #8
 8004abe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004ac2:	f000 fbf3 	bl	80052ac <memset>
 8004ac6:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8004aca:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8004ace:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8004ad2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 8004ad6:	f000 f871 	bl	8004bbc <__retarget_lock_init_recursive>
 8004ada:	2301      	movs	r3, #1
 8004adc:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8004ae0:	4804      	ldr	r0, [pc, #16]	; (8004af4 <__sinit+0xec>)
 8004ae2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae6:	f000 b86f 	b.w	8004bc8 <__retarget_lock_release_recursive>
 8004aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aee:	4801      	ldr	r0, [pc, #4]	; (8004af4 <__sinit+0xec>)
 8004af0:	f000 b86a 	b.w	8004bc8 <__retarget_lock_release_recursive>
 8004af4:	20001080 	.word	0x20001080
 8004af8:	080049fd 	.word	0x080049fd
 8004afc:	08005461 	.word	0x08005461
 8004b00:	08005485 	.word	0x08005485
 8004b04:	080054c5 	.word	0x080054c5
 8004b08:	080054e5 	.word	0x080054e5
 8004b0c:	00010009 	.word	0x00010009
 8004b10:	00020012 	.word	0x00020012

08004b14 <__sfp_lock_acquire>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__sfp_lock_acquire+0x8>)
 8004b16:	f000 b855 	b.w	8004bc4 <__retarget_lock_acquire_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	2000107c 	.word	0x2000107c

08004b20 <__sfp_lock_release>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__sfp_lock_release+0x8>)
 8004b22:	f000 b851 	b.w	8004bc8 <__retarget_lock_release_recursive>
 8004b26:	bf00      	nop
 8004b28:	2000107c 	.word	0x2000107c

08004b2c <_fwalk_reent>:
 8004b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b30:	4607      	mov	r7, r0
 8004b32:	4688      	mov	r8, r1
 8004b34:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8004b38:	f04f 0900 	mov.w	r9, #0
 8004b3c:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8004b40:	3d01      	subs	r5, #1
 8004b42:	d411      	bmi.n	8004b68 <_fwalk_reent+0x3c>
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	f105 35ff 	add.w	r5, r5, #4294967295
 8004b4c:	d908      	bls.n	8004b60 <_fwalk_reent+0x34>
 8004b4e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4621      	mov	r1, r4
 8004b56:	d003      	beq.n	8004b60 <_fwalk_reent+0x34>
 8004b58:	4638      	mov	r0, r7
 8004b5a:	47c0      	blx	r8
 8004b5c:	ea49 0900 	orr.w	r9, r9, r0
 8004b60:	1c6b      	adds	r3, r5, #1
 8004b62:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004b66:	d1ed      	bne.n	8004b44 <_fwalk_reent+0x18>
 8004b68:	6836      	ldr	r6, [r6, #0]
 8004b6a:	2e00      	cmp	r6, #0
 8004b6c:	d1e6      	bne.n	8004b3c <_fwalk_reent+0x10>
 8004b6e:	4648      	mov	r0, r9
 8004b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004b74 <__libc_init_array>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	4e0d      	ldr	r6, [pc, #52]	; (8004bac <__libc_init_array+0x38>)
 8004b78:	4d0d      	ldr	r5, [pc, #52]	; (8004bb0 <__libc_init_array+0x3c>)
 8004b7a:	1b76      	subs	r6, r6, r5
 8004b7c:	10b6      	asrs	r6, r6, #2
 8004b7e:	d006      	beq.n	8004b8e <__libc_init_array+0x1a>
 8004b80:	2400      	movs	r4, #0
 8004b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b86:	3401      	adds	r4, #1
 8004b88:	4798      	blx	r3
 8004b8a:	42a6      	cmp	r6, r4
 8004b8c:	d1f9      	bne.n	8004b82 <__libc_init_array+0xe>
 8004b8e:	4e09      	ldr	r6, [pc, #36]	; (8004bb4 <__libc_init_array+0x40>)
 8004b90:	4d09      	ldr	r5, [pc, #36]	; (8004bb8 <__libc_init_array+0x44>)
 8004b92:	1b76      	subs	r6, r6, r5
 8004b94:	f005 ff9c 	bl	800aad0 <_init>
 8004b98:	10b6      	asrs	r6, r6, #2
 8004b9a:	d006      	beq.n	8004baa <__libc_init_array+0x36>
 8004b9c:	2400      	movs	r4, #0
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	3401      	adds	r4, #1
 8004ba4:	4798      	blx	r3
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d1f9      	bne.n	8004b9e <__libc_init_array+0x2a>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	0800b41c 	.word	0x0800b41c
 8004bb0:	0800b41c 	.word	0x0800b41c
 8004bb4:	0800b424 	.word	0x0800b424
 8004bb8:	0800b41c 	.word	0x0800b41c

08004bbc <__retarget_lock_init_recursive>:
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop

08004bc0 <__retarget_lock_close_recursive>:
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <__retarget_lock_acquire_recursive>:
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop

08004bc8 <__retarget_lock_release_recursive>:
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop

08004bcc <malloc>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <malloc+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f000 b80b 	b.w	8004bec <_malloc_r>
 8004bd6:	bf00      	nop
 8004bd8:	20000000 	.word	0x20000000

08004bdc <free>:
 8004bdc:	4b02      	ldr	r3, [pc, #8]	; (8004be8 <free+0xc>)
 8004bde:	4601      	mov	r1, r0
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	f003 bcb1 	b.w	8008548 <_free_r>
 8004be6:	bf00      	nop
 8004be8:	20000000 	.word	0x20000000

08004bec <_malloc_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	f101 060b 	add.w	r6, r1, #11
 8004bf4:	2e16      	cmp	r6, #22
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	d824      	bhi.n	8004c46 <_malloc_r+0x5a>
 8004bfc:	2910      	cmp	r1, #16
 8004bfe:	f200 80ba 	bhi.w	8004d76 <_malloc_r+0x18a>
 8004c02:	f000 fba5 	bl	8005350 <__malloc_lock>
 8004c06:	2610      	movs	r6, #16
 8004c08:	2218      	movs	r2, #24
 8004c0a:	2002      	movs	r0, #2
 8004c0c:	4fb5      	ldr	r7, [pc, #724]	; (8004ee4 <_malloc_r+0x2f8>)
 8004c0e:	443a      	add	r2, r7
 8004c10:	f1a2 0108 	sub.w	r1, r2, #8
 8004c14:	6853      	ldr	r3, [r2, #4]
 8004c16:	428b      	cmp	r3, r1
 8004c18:	f000 80ba 	beq.w	8004d90 <_malloc_r+0x1a4>
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68d9      	ldr	r1, [r3, #12]
 8004c20:	f022 0203 	bic.w	r2, r2, #3
 8004c24:	441a      	add	r2, r3
 8004c26:	689d      	ldr	r5, [r3, #8]
 8004c28:	60e9      	str	r1, [r5, #12]
 8004c2a:	608d      	str	r5, [r1, #8]
 8004c2c:	6851      	ldr	r1, [r2, #4]
 8004c2e:	f041 0101 	orr.w	r1, r1, #1
 8004c32:	4620      	mov	r0, r4
 8004c34:	6051      	str	r1, [r2, #4]
 8004c36:	f103 0508 	add.w	r5, r3, #8
 8004c3a:	f000 fb8f 	bl	800535c <__malloc_unlock>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	b003      	add	sp, #12
 8004c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c46:	f036 0607 	bics.w	r6, r6, #7
 8004c4a:	f100 8094 	bmi.w	8004d76 <_malloc_r+0x18a>
 8004c4e:	42b1      	cmp	r1, r6
 8004c50:	f200 8091 	bhi.w	8004d76 <_malloc_r+0x18a>
 8004c54:	f000 fb7c 	bl	8005350 <__malloc_lock>
 8004c58:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8004c5c:	f0c0 819a 	bcc.w	8004f94 <_malloc_r+0x3a8>
 8004c60:	0a73      	lsrs	r3, r6, #9
 8004c62:	f000 808f 	beq.w	8004d84 <_malloc_r+0x198>
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	f200 816f 	bhi.w	8004f4a <_malloc_r+0x35e>
 8004c6c:	09b3      	lsrs	r3, r6, #6
 8004c6e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8004c72:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8004c76:	00c3      	lsls	r3, r0, #3
 8004c78:	4f9a      	ldr	r7, [pc, #616]	; (8004ee4 <_malloc_r+0x2f8>)
 8004c7a:	443b      	add	r3, r7
 8004c7c:	f1a3 0508 	sub.w	r5, r3, #8
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	429d      	cmp	r5, r3
 8004c84:	d106      	bne.n	8004c94 <_malloc_r+0xa8>
 8004c86:	e00c      	b.n	8004ca2 <_malloc_r+0xb6>
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	f280 8127 	bge.w	8004edc <_malloc_r+0x2f0>
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	429d      	cmp	r5, r3
 8004c92:	d006      	beq.n	8004ca2 <_malloc_r+0xb6>
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	f022 0203 	bic.w	r2, r2, #3
 8004c9a:	1b91      	subs	r1, r2, r6
 8004c9c:	290f      	cmp	r1, #15
 8004c9e:	ddf3      	ble.n	8004c88 <_malloc_r+0x9c>
 8004ca0:	4660      	mov	r0, ip
 8004ca2:	693d      	ldr	r5, [r7, #16]
 8004ca4:	f8df c240 	ldr.w	ip, [pc, #576]	; 8004ee8 <_malloc_r+0x2fc>
 8004ca8:	4565      	cmp	r5, ip
 8004caa:	d07c      	beq.n	8004da6 <_malloc_r+0x1ba>
 8004cac:	686a      	ldr	r2, [r5, #4]
 8004cae:	f022 0203 	bic.w	r2, r2, #3
 8004cb2:	1b93      	subs	r3, r2, r6
 8004cb4:	2b0f      	cmp	r3, #15
 8004cb6:	f300 817b 	bgt.w	8004fb0 <_malloc_r+0x3c4>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8004cc0:	f280 816c 	bge.w	8004f9c <_malloc_r+0x3b0>
 8004cc4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004cc8:	f080 811a 	bcs.w	8004f00 <_malloc_r+0x314>
 8004ccc:	08d3      	lsrs	r3, r2, #3
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	fa02 f20e 	lsl.w	r2, r2, lr
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8004ce2:	f8c5 e008 	str.w	lr, [r5, #8]
 8004ce6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8004cea:	3908      	subs	r1, #8
 8004cec:	60e9      	str	r1, [r5, #12]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8004cf4:	f8ce 500c 	str.w	r5, [lr, #12]
 8004cf8:	1083      	asrs	r3, r0, #2
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4099      	lsls	r1, r3
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	d857      	bhi.n	8004db2 <_malloc_r+0x1c6>
 8004d02:	4211      	tst	r1, r2
 8004d04:	d106      	bne.n	8004d14 <_malloc_r+0x128>
 8004d06:	f020 0003 	bic.w	r0, r0, #3
 8004d0a:	0049      	lsls	r1, r1, #1
 8004d0c:	4211      	tst	r1, r2
 8004d0e:	f100 0004 	add.w	r0, r0, #4
 8004d12:	d0fa      	beq.n	8004d0a <_malloc_r+0x11e>
 8004d14:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8004d18:	464d      	mov	r5, r9
 8004d1a:	4686      	mov	lr, r0
 8004d1c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8004d20:	4545      	cmp	r5, r8
 8004d22:	d108      	bne.n	8004d36 <_malloc_r+0x14a>
 8004d24:	e11d      	b.n	8004f62 <_malloc_r+0x376>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f280 8124 	bge.w	8004f74 <_malloc_r+0x388>
 8004d2c:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8004d30:	4545      	cmp	r5, r8
 8004d32:	f000 8116 	beq.w	8004f62 <_malloc_r+0x376>
 8004d36:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004d3a:	f022 0203 	bic.w	r2, r2, #3
 8004d3e:	1b93      	subs	r3, r2, r6
 8004d40:	2b0f      	cmp	r3, #15
 8004d42:	ddf0      	ble.n	8004d26 <_malloc_r+0x13a>
 8004d44:	4620      	mov	r0, r4
 8004d46:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 8004d4a:	eb08 0106 	add.w	r1, r8, r6
 8004d4e:	f046 0601 	orr.w	r6, r6, #1
 8004d52:	f8c8 6004 	str.w	r6, [r8, #4]
 8004d56:	60ec      	str	r4, [r5, #12]
 8004d58:	60a5      	str	r5, [r4, #8]
 8004d5a:	f043 0401 	orr.w	r4, r3, #1
 8004d5e:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8004d62:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8004d66:	604c      	str	r4, [r1, #4]
 8004d68:	f848 3002 	str.w	r3, [r8, r2]
 8004d6c:	f000 faf6 	bl	800535c <__malloc_unlock>
 8004d70:	f108 0508 	add.w	r5, r8, #8
 8004d74:	e002      	b.n	8004d7c <_malloc_r+0x190>
 8004d76:	230c      	movs	r3, #12
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	b003      	add	sp, #12
 8004d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d88:	2040      	movs	r0, #64	; 0x40
 8004d8a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8004d8e:	e773      	b.n	8004c78 <_malloc_r+0x8c>
 8004d90:	68d3      	ldr	r3, [r2, #12]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf08      	it	eq
 8004d96:	3002      	addeq	r0, #2
 8004d98:	f47f af40 	bne.w	8004c1c <_malloc_r+0x30>
 8004d9c:	693d      	ldr	r5, [r7, #16]
 8004d9e:	f8df c148 	ldr.w	ip, [pc, #328]	; 8004ee8 <_malloc_r+0x2fc>
 8004da2:	4565      	cmp	r5, ip
 8004da4:	d182      	bne.n	8004cac <_malloc_r+0xc0>
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	1083      	asrs	r3, r0, #2
 8004daa:	2101      	movs	r1, #1
 8004dac:	4099      	lsls	r1, r3
 8004dae:	4291      	cmp	r1, r2
 8004db0:	d9a7      	bls.n	8004d02 <_malloc_r+0x116>
 8004db2:	68bd      	ldr	r5, [r7, #8]
 8004db4:	686b      	ldr	r3, [r5, #4]
 8004db6:	f023 0903 	bic.w	r9, r3, #3
 8004dba:	454e      	cmp	r6, r9
 8004dbc:	d803      	bhi.n	8004dc6 <_malloc_r+0x1da>
 8004dbe:	eba9 0306 	sub.w	r3, r9, r6
 8004dc2:	2b0f      	cmp	r3, #15
 8004dc4:	dc7a      	bgt.n	8004ebc <_malloc_r+0x2d0>
 8004dc6:	f8df b124 	ldr.w	fp, [pc, #292]	; 8004eec <_malloc_r+0x300>
 8004dca:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <_malloc_r+0x304>)
 8004dcc:	f8db 2000 	ldr.w	r2, [fp]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3201      	adds	r2, #1
 8004dd4:	4433      	add	r3, r6
 8004dd6:	eb05 0a09 	add.w	sl, r5, r9
 8004dda:	f000 8133 	beq.w	8005044 <_malloc_r+0x458>
 8004dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de2:	330f      	adds	r3, #15
 8004de4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 8004de8:	f028 080f 	bic.w	r8, r8, #15
 8004dec:	4641      	mov	r1, r8
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 fb24 	bl	800543c <_sbrk_r>
 8004df4:	1c41      	adds	r1, r0, #1
 8004df6:	4602      	mov	r2, r0
 8004df8:	f000 80f3 	beq.w	8004fe2 <_malloc_r+0x3f6>
 8004dfc:	4582      	cmp	sl, r0
 8004dfe:	f200 80ee 	bhi.w	8004fde <_malloc_r+0x3f2>
 8004e02:	4b3c      	ldr	r3, [pc, #240]	; (8004ef4 <_malloc_r+0x308>)
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	4441      	add	r1, r8
 8004e08:	6019      	str	r1, [r3, #0]
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	f000 814e 	beq.w	80050ac <_malloc_r+0x4c0>
 8004e10:	f8db 1000 	ldr.w	r1, [fp]
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	3101      	adds	r1, #1
 8004e18:	bf1b      	ittet	ne
 8004e1a:	eba2 0a0a 	subne.w	sl, r2, sl
 8004e1e:	4450      	addne	r0, sl
 8004e20:	f8cb 2000 	streq.w	r2, [fp]
 8004e24:	6018      	strne	r0, [r3, #0]
 8004e26:	f012 0b07 	ands.w	fp, r2, #7
 8004e2a:	f000 8117 	beq.w	800505c <_malloc_r+0x470>
 8004e2e:	f1cb 0108 	rsb	r1, fp, #8
 8004e32:	440a      	add	r2, r1
 8004e34:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 8004e38:	4490      	add	r8, r2
 8004e3a:	3108      	adds	r1, #8
 8004e3c:	eba1 0108 	sub.w	r1, r1, r8
 8004e40:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8004e44:	4651      	mov	r1, sl
 8004e46:	4620      	mov	r0, r4
 8004e48:	9200      	str	r2, [sp, #0]
 8004e4a:	f000 faf7 	bl	800543c <_sbrk_r>
 8004e4e:	1c42      	adds	r2, r0, #1
 8004e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e54:	f000 814f 	beq.w	80050f6 <_malloc_r+0x50a>
 8004e58:	1a80      	subs	r0, r0, r2
 8004e5a:	eb00 080a 	add.w	r8, r0, sl
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	60ba      	str	r2, [r7, #8]
 8004e62:	f048 0001 	orr.w	r0, r8, #1
 8004e66:	4451      	add	r1, sl
 8004e68:	42bd      	cmp	r5, r7
 8004e6a:	6050      	str	r0, [r2, #4]
 8004e6c:	6019      	str	r1, [r3, #0]
 8004e6e:	f000 8129 	beq.w	80050c4 <_malloc_r+0x4d8>
 8004e72:	f1b9 0f0f 	cmp.w	r9, #15
 8004e76:	f240 8127 	bls.w	80050c8 <_malloc_r+0x4dc>
 8004e7a:	6868      	ldr	r0, [r5, #4]
 8004e7c:	f1a9 0c0c 	sub.w	ip, r9, #12
 8004e80:	f02c 0c07 	bic.w	ip, ip, #7
 8004e84:	f000 0001 	and.w	r0, r0, #1
 8004e88:	ea40 000c 	orr.w	r0, r0, ip
 8004e8c:	6068      	str	r0, [r5, #4]
 8004e8e:	f04f 0e05 	mov.w	lr, #5
 8004e92:	eb05 000c 	add.w	r0, r5, ip
 8004e96:	f1bc 0f0f 	cmp.w	ip, #15
 8004e9a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8004e9e:	f200 8132 	bhi.w	8005106 <_malloc_r+0x51a>
 8004ea2:	6850      	ldr	r0, [r2, #4]
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <_malloc_r+0x30c>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	428a      	cmp	r2, r1
 8004eac:	bf38      	it	cc
 8004eae:	6019      	strcc	r1, [r3, #0]
 8004eb0:	4b12      	ldr	r3, [pc, #72]	; (8004efc <_malloc_r+0x310>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	428a      	cmp	r2, r1
 8004eb6:	bf38      	it	cc
 8004eb8:	6019      	strcc	r1, [r3, #0]
 8004eba:	e094      	b.n	8004fe6 <_malloc_r+0x3fa>
 8004ebc:	19aa      	adds	r2, r5, r6
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	f046 0601 	orr.w	r6, r6, #1
 8004ec6:	606e      	str	r6, [r5, #4]
 8004ec8:	4620      	mov	r0, r4
 8004eca:	60ba      	str	r2, [r7, #8]
 8004ecc:	6053      	str	r3, [r2, #4]
 8004ece:	f000 fa45 	bl	800535c <__malloc_unlock>
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	b003      	add	sp, #12
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	68d9      	ldr	r1, [r3, #12]
 8004ede:	441a      	add	r2, r3
 8004ee0:	e6a1      	b.n	8004c26 <_malloc_r+0x3a>
 8004ee2:	bf00      	nop
 8004ee4:	20000430 	.word	0x20000430
 8004ee8:	20000438 	.word	0x20000438
 8004eec:	20000838 	.word	0x20000838
 8004ef0:	200010b4 	.word	0x200010b4
 8004ef4:	20001084 	.word	0x20001084
 8004ef8:	200010ac 	.word	0x200010ac
 8004efc:	200010b0 	.word	0x200010b0
 8004f00:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8004f04:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8004f08:	d363      	bcc.n	8004fd2 <_malloc_r+0x3e6>
 8004f0a:	2b14      	cmp	r3, #20
 8004f0c:	f200 80b7 	bhi.w	800507e <_malloc_r+0x492>
 8004f10:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8004f14:	00c9      	lsls	r1, r1, #3
 8004f16:	335b      	adds	r3, #91	; 0x5b
 8004f18:	eb07 0e01 	add.w	lr, r7, r1
 8004f1c:	5879      	ldr	r1, [r7, r1]
 8004f1e:	f1ae 0e08 	sub.w	lr, lr, #8
 8004f22:	458e      	cmp	lr, r1
 8004f24:	f000 8091 	beq.w	800504a <_malloc_r+0x45e>
 8004f28:	684b      	ldr	r3, [r1, #4]
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d902      	bls.n	8004f38 <_malloc_r+0x34c>
 8004f32:	6889      	ldr	r1, [r1, #8]
 8004f34:	458e      	cmp	lr, r1
 8004f36:	d1f7      	bne.n	8004f28 <_malloc_r+0x33c>
 8004f38:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 8004f42:	f8ce 5008 	str.w	r5, [lr, #8]
 8004f46:	60cd      	str	r5, [r1, #12]
 8004f48:	e6d6      	b.n	8004cf8 <_malloc_r+0x10c>
 8004f4a:	2b14      	cmp	r3, #20
 8004f4c:	d959      	bls.n	8005002 <_malloc_r+0x416>
 8004f4e:	2b54      	cmp	r3, #84	; 0x54
 8004f50:	f200 809d 	bhi.w	800508e <_malloc_r+0x4a2>
 8004f54:	0b33      	lsrs	r3, r6, #12
 8004f56:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004f5a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8004f5e:	00c3      	lsls	r3, r0, #3
 8004f60:	e68a      	b.n	8004c78 <_malloc_r+0x8c>
 8004f62:	f10e 0e01 	add.w	lr, lr, #1
 8004f66:	f01e 0f03 	tst.w	lr, #3
 8004f6a:	f105 0508 	add.w	r5, r5, #8
 8004f6e:	f47f aed5 	bne.w	8004d1c <_malloc_r+0x130>
 8004f72:	e051      	b.n	8005018 <_malloc_r+0x42c>
 8004f74:	4442      	add	r2, r8
 8004f76:	4645      	mov	r5, r8
 8004f78:	6853      	ldr	r3, [r2, #4]
 8004f7a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6053      	str	r3, [r2, #4]
 8004f84:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8004f88:	4620      	mov	r0, r4
 8004f8a:	60d9      	str	r1, [r3, #12]
 8004f8c:	608b      	str	r3, [r1, #8]
 8004f8e:	f000 f9e5 	bl	800535c <__malloc_unlock>
 8004f92:	e6f3      	b.n	8004d7c <_malloc_r+0x190>
 8004f94:	08f0      	lsrs	r0, r6, #3
 8004f96:	f106 0208 	add.w	r2, r6, #8
 8004f9a:	e637      	b.n	8004c0c <_malloc_r+0x20>
 8004f9c:	442a      	add	r2, r5
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	6853      	ldr	r3, [r2, #4]
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	6053      	str	r3, [r2, #4]
 8004fa8:	3508      	adds	r5, #8
 8004faa:	f000 f9d7 	bl	800535c <__malloc_unlock>
 8004fae:	e6e5      	b.n	8004d7c <_malloc_r+0x190>
 8004fb0:	19a9      	adds	r1, r5, r6
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f046 0601 	orr.w	r6, r6, #1
 8004fb8:	f043 0401 	orr.w	r4, r3, #1
 8004fbc:	606e      	str	r6, [r5, #4]
 8004fbe:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8004fc2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8004fc6:	604c      	str	r4, [r1, #4]
 8004fc8:	50ab      	str	r3, [r5, r2]
 8004fca:	f000 f9c7 	bl	800535c <__malloc_unlock>
 8004fce:	3508      	adds	r5, #8
 8004fd0:	e6d4      	b.n	8004d7c <_malloc_r+0x190>
 8004fd2:	0993      	lsrs	r3, r2, #6
 8004fd4:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8004fd8:	00c9      	lsls	r1, r1, #3
 8004fda:	3338      	adds	r3, #56	; 0x38
 8004fdc:	e79c      	b.n	8004f18 <_malloc_r+0x32c>
 8004fde:	42bd      	cmp	r5, r7
 8004fe0:	d05f      	beq.n	80050a2 <_malloc_r+0x4b6>
 8004fe2:	68bd      	ldr	r5, [r7, #8]
 8004fe4:	6868      	ldr	r0, [r5, #4]
 8004fe6:	f020 0803 	bic.w	r8, r0, #3
 8004fea:	4546      	cmp	r6, r8
 8004fec:	eba8 0306 	sub.w	r3, r8, r6
 8004ff0:	d802      	bhi.n	8004ff8 <_malloc_r+0x40c>
 8004ff2:	2b0f      	cmp	r3, #15
 8004ff4:	f73f af62 	bgt.w	8004ebc <_malloc_r+0x2d0>
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 f9af 	bl	800535c <__malloc_unlock>
 8004ffe:	2500      	movs	r5, #0
 8005000:	e6bc      	b.n	8004d7c <_malloc_r+0x190>
 8005002:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8005006:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800500a:	00c3      	lsls	r3, r0, #3
 800500c:	e634      	b.n	8004c78 <_malloc_r+0x8c>
 800500e:	f859 3908 	ldr.w	r3, [r9], #-8
 8005012:	454b      	cmp	r3, r9
 8005014:	f040 8096 	bne.w	8005144 <_malloc_r+0x558>
 8005018:	f010 0f03 	tst.w	r0, #3
 800501c:	f100 30ff 	add.w	r0, r0, #4294967295
 8005020:	d1f5      	bne.n	800500e <_malloc_r+0x422>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	ea23 0301 	bic.w	r3, r3, r1
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	0049      	lsls	r1, r1, #1
 800502c:	4299      	cmp	r1, r3
 800502e:	f63f aec0 	bhi.w	8004db2 <_malloc_r+0x1c6>
 8005032:	b919      	cbnz	r1, 800503c <_malloc_r+0x450>
 8005034:	e6bd      	b.n	8004db2 <_malloc_r+0x1c6>
 8005036:	0049      	lsls	r1, r1, #1
 8005038:	f10e 0e04 	add.w	lr, lr, #4
 800503c:	4219      	tst	r1, r3
 800503e:	d0fa      	beq.n	8005036 <_malloc_r+0x44a>
 8005040:	4670      	mov	r0, lr
 8005042:	e667      	b.n	8004d14 <_malloc_r+0x128>
 8005044:	f103 0810 	add.w	r8, r3, #16
 8005048:	e6d0      	b.n	8004dec <_malloc_r+0x200>
 800504a:	109a      	asrs	r2, r3, #2
 800504c:	f04f 0801 	mov.w	r8, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	fa08 f202 	lsl.w	r2, r8, r2
 8005056:	431a      	orrs	r2, r3
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	e770      	b.n	8004f3e <_malloc_r+0x352>
 800505c:	eb02 0108 	add.w	r1, r2, r8
 8005060:	4249      	negs	r1, r1
 8005062:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8005066:	4651      	mov	r1, sl
 8005068:	4620      	mov	r0, r4
 800506a:	9200      	str	r2, [sp, #0]
 800506c:	f000 f9e6 	bl	800543c <_sbrk_r>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005076:	f47f aeef 	bne.w	8004e58 <_malloc_r+0x26c>
 800507a:	46da      	mov	sl, fp
 800507c:	e6ef      	b.n	8004e5e <_malloc_r+0x272>
 800507e:	2b54      	cmp	r3, #84	; 0x54
 8005080:	d825      	bhi.n	80050ce <_malloc_r+0x4e2>
 8005082:	0b13      	lsrs	r3, r2, #12
 8005084:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8005088:	00c9      	lsls	r1, r1, #3
 800508a:	336e      	adds	r3, #110	; 0x6e
 800508c:	e744      	b.n	8004f18 <_malloc_r+0x32c>
 800508e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005092:	d825      	bhi.n	80050e0 <_malloc_r+0x4f4>
 8005094:	0bf3      	lsrs	r3, r6, #15
 8005096:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800509a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800509e:	00c3      	lsls	r3, r0, #3
 80050a0:	e5ea      	b.n	8004c78 <_malloc_r+0x8c>
 80050a2:	4b29      	ldr	r3, [pc, #164]	; (8005148 <_malloc_r+0x55c>)
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	4440      	add	r0, r8
 80050a8:	6018      	str	r0, [r3, #0]
 80050aa:	e6b1      	b.n	8004e10 <_malloc_r+0x224>
 80050ac:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 80050b0:	f1bc 0f00 	cmp.w	ip, #0
 80050b4:	f47f aeac 	bne.w	8004e10 <_malloc_r+0x224>
 80050b8:	68bd      	ldr	r5, [r7, #8]
 80050ba:	44c8      	add	r8, r9
 80050bc:	f048 0001 	orr.w	r0, r8, #1
 80050c0:	6068      	str	r0, [r5, #4]
 80050c2:	e6f0      	b.n	8004ea6 <_malloc_r+0x2ba>
 80050c4:	4615      	mov	r5, r2
 80050c6:	e6ee      	b.n	8004ea6 <_malloc_r+0x2ba>
 80050c8:	2301      	movs	r3, #1
 80050ca:	6053      	str	r3, [r2, #4]
 80050cc:	e794      	b.n	8004ff8 <_malloc_r+0x40c>
 80050ce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80050d2:	d823      	bhi.n	800511c <_malloc_r+0x530>
 80050d4:	0bd3      	lsrs	r3, r2, #15
 80050d6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80050da:	00c9      	lsls	r1, r1, #3
 80050dc:	3377      	adds	r3, #119	; 0x77
 80050de:	e71b      	b.n	8004f18 <_malloc_r+0x32c>
 80050e0:	f240 5254 	movw	r2, #1364	; 0x554
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d823      	bhi.n	8005130 <_malloc_r+0x544>
 80050e8:	0cb3      	lsrs	r3, r6, #18
 80050ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80050ee:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80050f2:	00c3      	lsls	r3, r0, #3
 80050f4:	e5c0      	b.n	8004c78 <_malloc_r+0x8c>
 80050f6:	f1ab 0b08 	sub.w	fp, fp, #8
 80050fa:	44d8      	add	r8, fp
 80050fc:	eba8 0802 	sub.w	r8, r8, r2
 8005100:	f04f 0a00 	mov.w	sl, #0
 8005104:	e6ab      	b.n	8004e5e <_malloc_r+0x272>
 8005106:	f105 0108 	add.w	r1, r5, #8
 800510a:	4620      	mov	r0, r4
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	f003 fa1b 	bl	8008548 <_free_r>
 8005112:	68bd      	ldr	r5, [r7, #8]
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	6868      	ldr	r0, [r5, #4]
 8005118:	6819      	ldr	r1, [r3, #0]
 800511a:	e6c4      	b.n	8004ea6 <_malloc_r+0x2ba>
 800511c:	f240 5154 	movw	r1, #1364	; 0x554
 8005120:	428b      	cmp	r3, r1
 8005122:	d80b      	bhi.n	800513c <_malloc_r+0x550>
 8005124:	0c93      	lsrs	r3, r2, #18
 8005126:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 800512a:	00c9      	lsls	r1, r1, #3
 800512c:	337c      	adds	r3, #124	; 0x7c
 800512e:	e6f3      	b.n	8004f18 <_malloc_r+0x32c>
 8005130:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8005134:	207f      	movs	r0, #127	; 0x7f
 8005136:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800513a:	e59d      	b.n	8004c78 <_malloc_r+0x8c>
 800513c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8005140:	237e      	movs	r3, #126	; 0x7e
 8005142:	e6e9      	b.n	8004f18 <_malloc_r+0x32c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	e770      	b.n	800502a <_malloc_r+0x43e>
 8005148:	20001084 	.word	0x20001084

0800514c <memcmp>:
 800514c:	2a03      	cmp	r2, #3
 800514e:	b510      	push	{r4, lr}
 8005150:	d917      	bls.n	8005182 <memcmp+0x36>
 8005152:	ea40 0c01 	orr.w	ip, r0, r1
 8005156:	f01c 0f03 	tst.w	ip, #3
 800515a:	4604      	mov	r4, r0
 800515c:	460b      	mov	r3, r1
 800515e:	d123      	bne.n	80051a8 <memcmp+0x5c>
 8005160:	4619      	mov	r1, r3
 8005162:	4620      	mov	r0, r4
 8005164:	f8d1 e000 	ldr.w	lr, [r1]
 8005168:	f8d0 c000 	ldr.w	ip, [r0]
 800516c:	45f4      	cmp	ip, lr
 800516e:	f104 0404 	add.w	r4, r4, #4
 8005172:	f103 0304 	add.w	r3, r3, #4
 8005176:	d117      	bne.n	80051a8 <memcmp+0x5c>
 8005178:	3a04      	subs	r2, #4
 800517a:	2a03      	cmp	r2, #3
 800517c:	4620      	mov	r0, r4
 800517e:	4619      	mov	r1, r3
 8005180:	d8ee      	bhi.n	8005160 <memcmp+0x14>
 8005182:	1e54      	subs	r4, r2, #1
 8005184:	b1a2      	cbz	r2, 80051b0 <memcmp+0x64>
 8005186:	f100 3cff 	add.w	ip, r0, #4294967295
 800518a:	3901      	subs	r1, #1
 800518c:	e001      	b.n	8005192 <memcmp+0x46>
 800518e:	18c3      	adds	r3, r0, r3
 8005190:	d00c      	beq.n	80051ac <memcmp+0x60>
 8005192:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8005196:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800519a:	4596      	cmp	lr, r2
 800519c:	eba4 030c 	sub.w	r3, r4, ip
 80051a0:	d0f5      	beq.n	800518e <memcmp+0x42>
 80051a2:	ebae 0002 	sub.w	r0, lr, r2
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	1e54      	subs	r4, r2, #1
 80051aa:	e7ec      	b.n	8005186 <memcmp+0x3a>
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd10      	pop	{r4, pc}
 80051b0:	4610      	mov	r0, r2
 80051b2:	bd10      	pop	{r4, pc}

080051b4 <memmove>:
 80051b4:	4288      	cmp	r0, r1
 80051b6:	d90d      	bls.n	80051d4 <memmove+0x20>
 80051b8:	188b      	adds	r3, r1, r2
 80051ba:	4283      	cmp	r3, r0
 80051bc:	d90a      	bls.n	80051d4 <memmove+0x20>
 80051be:	eb00 0c02 	add.w	ip, r0, r2
 80051c2:	b1ba      	cbz	r2, 80051f4 <memmove+0x40>
 80051c4:	4662      	mov	r2, ip
 80051c6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80051ca:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80051ce:	4299      	cmp	r1, r3
 80051d0:	d1f9      	bne.n	80051c6 <memmove+0x12>
 80051d2:	4770      	bx	lr
 80051d4:	2a0f      	cmp	r2, #15
 80051d6:	d80e      	bhi.n	80051f6 <memmove+0x42>
 80051d8:	4603      	mov	r3, r0
 80051da:	f102 3cff 	add.w	ip, r2, #4294967295
 80051de:	b14a      	cbz	r2, 80051f4 <memmove+0x40>
 80051e0:	f10c 0c01 	add.w	ip, ip, #1
 80051e4:	3b01      	subs	r3, #1
 80051e6:	448c      	add	ip, r1
 80051e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051f0:	4561      	cmp	r1, ip
 80051f2:	d1f9      	bne.n	80051e8 <memmove+0x34>
 80051f4:	4770      	bx	lr
 80051f6:	ea40 0301 	orr.w	r3, r0, r1
 80051fa:	079b      	lsls	r3, r3, #30
 80051fc:	d150      	bne.n	80052a0 <memmove+0xec>
 80051fe:	f1a2 0310 	sub.w	r3, r2, #16
 8005202:	b570      	push	{r4, r5, r6, lr}
 8005204:	f101 0c20 	add.w	ip, r1, #32
 8005208:	f023 050f 	bic.w	r5, r3, #15
 800520c:	f101 0e10 	add.w	lr, r1, #16
 8005210:	f100 0410 	add.w	r4, r0, #16
 8005214:	44ac      	add	ip, r5
 8005216:	091b      	lsrs	r3, r3, #4
 8005218:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800521c:	f844 5c10 	str.w	r5, [r4, #-16]
 8005220:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8005224:	f844 5c0c 	str.w	r5, [r4, #-12]
 8005228:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800522c:	f844 5c08 	str.w	r5, [r4, #-8]
 8005230:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8005234:	f844 5c04 	str.w	r5, [r4, #-4]
 8005238:	f10e 0e10 	add.w	lr, lr, #16
 800523c:	45e6      	cmp	lr, ip
 800523e:	f104 0410 	add.w	r4, r4, #16
 8005242:	d1e9      	bne.n	8005218 <memmove+0x64>
 8005244:	3301      	adds	r3, #1
 8005246:	f012 0f0c 	tst.w	r2, #12
 800524a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800524e:	f002 040f 	and.w	r4, r2, #15
 8005252:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8005256:	d027      	beq.n	80052a8 <memmove+0xf4>
 8005258:	3c04      	subs	r4, #4
 800525a:	f024 0603 	bic.w	r6, r4, #3
 800525e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8005262:	441e      	add	r6, r3
 8005264:	1f1c      	subs	r4, r3, #4
 8005266:	468e      	mov	lr, r1
 8005268:	f85e 5b04 	ldr.w	r5, [lr], #4
 800526c:	f844 5f04 	str.w	r5, [r4, #4]!
 8005270:	42b4      	cmp	r4, r6
 8005272:	d1f9      	bne.n	8005268 <memmove+0xb4>
 8005274:	f10c 0401 	add.w	r4, ip, #1
 8005278:	f002 0203 	and.w	r2, r2, #3
 800527c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005284:	f102 3cff 	add.w	ip, r2, #4294967295
 8005288:	b14a      	cbz	r2, 800529e <memmove+0xea>
 800528a:	f10c 0c01 	add.w	ip, ip, #1
 800528e:	3b01      	subs	r3, #1
 8005290:	448c      	add	ip, r1
 8005292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800529a:	4561      	cmp	r1, ip
 800529c:	d1f9      	bne.n	8005292 <memmove+0xde>
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	f102 3cff 	add.w	ip, r2, #4294967295
 80052a4:	4603      	mov	r3, r0
 80052a6:	e79b      	b.n	80051e0 <memmove+0x2c>
 80052a8:	4622      	mov	r2, r4
 80052aa:	e7eb      	b.n	8005284 <memmove+0xd0>

080052ac <memset>:
 80052ac:	0783      	lsls	r3, r0, #30
 80052ae:	b530      	push	{r4, r5, lr}
 80052b0:	d048      	beq.n	8005344 <memset+0x98>
 80052b2:	1e54      	subs	r4, r2, #1
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	d03f      	beq.n	8005338 <memset+0x8c>
 80052b8:	b2ca      	uxtb	r2, r1
 80052ba:	4603      	mov	r3, r0
 80052bc:	e001      	b.n	80052c2 <memset+0x16>
 80052be:	3c01      	subs	r4, #1
 80052c0:	d33a      	bcc.n	8005338 <memset+0x8c>
 80052c2:	f803 2b01 	strb.w	r2, [r3], #1
 80052c6:	079d      	lsls	r5, r3, #30
 80052c8:	d1f9      	bne.n	80052be <memset+0x12>
 80052ca:	2c03      	cmp	r4, #3
 80052cc:	d92d      	bls.n	800532a <memset+0x7e>
 80052ce:	b2cd      	uxtb	r5, r1
 80052d0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80052d4:	2c0f      	cmp	r4, #15
 80052d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80052da:	d936      	bls.n	800534a <memset+0x9e>
 80052dc:	f1a4 0210 	sub.w	r2, r4, #16
 80052e0:	f022 0c0f 	bic.w	ip, r2, #15
 80052e4:	f103 0e20 	add.w	lr, r3, #32
 80052e8:	44e6      	add	lr, ip
 80052ea:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80052ee:	f103 0210 	add.w	r2, r3, #16
 80052f2:	e942 5504 	strd	r5, r5, [r2, #-16]
 80052f6:	e942 5502 	strd	r5, r5, [r2, #-8]
 80052fa:	3210      	adds	r2, #16
 80052fc:	4572      	cmp	r2, lr
 80052fe:	d1f8      	bne.n	80052f2 <memset+0x46>
 8005300:	f10c 0201 	add.w	r2, ip, #1
 8005304:	f014 0f0c 	tst.w	r4, #12
 8005308:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800530c:	f004 0c0f 	and.w	ip, r4, #15
 8005310:	d013      	beq.n	800533a <memset+0x8e>
 8005312:	f1ac 0304 	sub.w	r3, ip, #4
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	3304      	adds	r3, #4
 800531c:	4413      	add	r3, r2
 800531e:	f842 5b04 	str.w	r5, [r2], #4
 8005322:	4293      	cmp	r3, r2
 8005324:	d1fb      	bne.n	800531e <memset+0x72>
 8005326:	f00c 0403 	and.w	r4, ip, #3
 800532a:	b12c      	cbz	r4, 8005338 <memset+0x8c>
 800532c:	b2ca      	uxtb	r2, r1
 800532e:	441c      	add	r4, r3
 8005330:	f803 2b01 	strb.w	r2, [r3], #1
 8005334:	429c      	cmp	r4, r3
 8005336:	d1fb      	bne.n	8005330 <memset+0x84>
 8005338:	bd30      	pop	{r4, r5, pc}
 800533a:	4664      	mov	r4, ip
 800533c:	4613      	mov	r3, r2
 800533e:	2c00      	cmp	r4, #0
 8005340:	d1f4      	bne.n	800532c <memset+0x80>
 8005342:	e7f9      	b.n	8005338 <memset+0x8c>
 8005344:	4603      	mov	r3, r0
 8005346:	4614      	mov	r4, r2
 8005348:	e7bf      	b.n	80052ca <memset+0x1e>
 800534a:	461a      	mov	r2, r3
 800534c:	46a4      	mov	ip, r4
 800534e:	e7e0      	b.n	8005312 <memset+0x66>

08005350 <__malloc_lock>:
 8005350:	4801      	ldr	r0, [pc, #4]	; (8005358 <__malloc_lock+0x8>)
 8005352:	f7ff bc37 	b.w	8004bc4 <__retarget_lock_acquire_recursive>
 8005356:	bf00      	nop
 8005358:	20001078 	.word	0x20001078

0800535c <__malloc_unlock>:
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <__malloc_unlock+0x8>)
 800535e:	f7ff bc33 	b.w	8004bc8 <__retarget_lock_release_recursive>
 8005362:	bf00      	nop
 8005364:	20001078 	.word	0x20001078

08005368 <printf>:
 8005368:	b40f      	push	{r0, r1, r2, r3}
 800536a:	b500      	push	{lr}
 800536c:	4907      	ldr	r1, [pc, #28]	; (800538c <printf+0x24>)
 800536e:	b083      	sub	sp, #12
 8005370:	ab04      	add	r3, sp, #16
 8005372:	6808      	ldr	r0, [r1, #0]
 8005374:	f853 2b04 	ldr.w	r2, [r3], #4
 8005378:	6881      	ldr	r1, [r0, #8]
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	f000 f8b6 	bl	80054ec <_vfprintf_r>
 8005380:	b003      	add	sp, #12
 8005382:	f85d eb04 	ldr.w	lr, [sp], #4
 8005386:	b004      	add	sp, #16
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000000 	.word	0x20000000

08005390 <_puts_r>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4605      	mov	r5, r0
 8005394:	b088      	sub	sp, #32
 8005396:	4608      	mov	r0, r1
 8005398:	460c      	mov	r4, r1
 800539a:	f7fa ffd1 	bl	8000340 <strlen>
 800539e:	4e22      	ldr	r6, [pc, #136]	; (8005428 <_puts_r+0x98>)
 80053a0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80053a2:	9005      	str	r0, [sp, #20]
 80053a4:	2101      	movs	r1, #1
 80053a6:	1843      	adds	r3, r0, r1
 80053a8:	e9cd 6106 	strd	r6, r1, [sp, #24]
 80053ac:	a804      	add	r0, sp, #16
 80053ae:	2102      	movs	r1, #2
 80053b0:	9404      	str	r4, [sp, #16]
 80053b2:	9303      	str	r3, [sp, #12]
 80053b4:	68ac      	ldr	r4, [r5, #8]
 80053b6:	9001      	str	r0, [sp, #4]
 80053b8:	9102      	str	r1, [sp, #8]
 80053ba:	b322      	cbz	r2, 8005406 <_puts_r+0x76>
 80053bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053be:	f013 0f01 	tst.w	r3, #1
 80053c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	d101      	bne.n	80053ce <_puts_r+0x3e>
 80053ca:	0598      	lsls	r0, r3, #22
 80053cc:	d525      	bpl.n	800541a <_puts_r+0x8a>
 80053ce:	0491      	lsls	r1, r2, #18
 80053d0:	d406      	bmi.n	80053e0 <_puts_r+0x50>
 80053d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053dc:	81a3      	strh	r3, [r4, #12]
 80053de:	6662      	str	r2, [r4, #100]	; 0x64
 80053e0:	4628      	mov	r0, r5
 80053e2:	aa01      	add	r2, sp, #4
 80053e4:	4621      	mov	r1, r4
 80053e6:	f003 f9b5 	bl	8008754 <__sfvwrite_r>
 80053ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ec:	2800      	cmp	r0, #0
 80053ee:	bf14      	ite	ne
 80053f0:	f04f 35ff 	movne.w	r5, #4294967295
 80053f4:	250a      	moveq	r5, #10
 80053f6:	07da      	lsls	r2, r3, #31
 80053f8:	d402      	bmi.n	8005400 <_puts_r+0x70>
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	059b      	lsls	r3, r3, #22
 80053fe:	d506      	bpl.n	800540e <_puts_r+0x7e>
 8005400:	4628      	mov	r0, r5
 8005402:	b008      	add	sp, #32
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	4628      	mov	r0, r5
 8005408:	f7ff fafe 	bl	8004a08 <__sinit>
 800540c:	e7d6      	b.n	80053bc <_puts_r+0x2c>
 800540e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005410:	f7ff fbda 	bl	8004bc8 <__retarget_lock_release_recursive>
 8005414:	4628      	mov	r0, r5
 8005416:	b008      	add	sp, #32
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800541c:	f7ff fbd2 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 8005420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005424:	b29a      	uxth	r2, r3
 8005426:	e7d2      	b.n	80053ce <_puts_r+0x3e>
 8005428:	0800b11c 	.word	0x0800b11c

0800542c <puts>:
 800542c:	4b02      	ldr	r3, [pc, #8]	; (8005438 <puts+0xc>)
 800542e:	4601      	mov	r1, r0
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	f7ff bfad 	b.w	8005390 <_puts_r>
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000

0800543c <_sbrk_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d07      	ldr	r5, [pc, #28]	; (800545c <_sbrk_r+0x20>)
 8005440:	2200      	movs	r2, #0
 8005442:	4604      	mov	r4, r0
 8005444:	4608      	mov	r0, r1
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	f7ff fa28 	bl	800489c <_sbrk>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d000      	beq.n	8005452 <_sbrk_r+0x16>
 8005450:	bd38      	pop	{r3, r4, r5, pc}
 8005452:	682b      	ldr	r3, [r5, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0fb      	beq.n	8005450 <_sbrk_r+0x14>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200010b8 	.word	0x200010b8

08005460 <__sread>:
 8005460:	b510      	push	{r4, lr}
 8005462:	460c      	mov	r4, r1
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	f003 ff1c 	bl	80092a4 <_read_r>
 800546c:	2800      	cmp	r0, #0
 800546e:	db03      	blt.n	8005478 <__sread+0x18>
 8005470:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005472:	4403      	add	r3, r0
 8005474:	6523      	str	r3, [r4, #80]	; 0x50
 8005476:	bd10      	pop	{r4, pc}
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800547e:	81a3      	strh	r3, [r4, #12]
 8005480:	bd10      	pop	{r4, pc}
 8005482:	bf00      	nop

08005484 <__swrite>:
 8005484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800548e:	461f      	mov	r7, r3
 8005490:	05cb      	lsls	r3, r1, #23
 8005492:	4605      	mov	r5, r0
 8005494:	4616      	mov	r6, r2
 8005496:	d40b      	bmi.n	80054b0 <__swrite+0x2c>
 8005498:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800549c:	81a1      	strh	r1, [r4, #12]
 800549e:	463b      	mov	r3, r7
 80054a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a4:	4632      	mov	r2, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ac:	f001 bdc8 	b.w	8007040 <_write_r>
 80054b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b4:	2302      	movs	r3, #2
 80054b6:	2200      	movs	r2, #0
 80054b8:	f003 fac4 	bl	8008a44 <_lseek_r>
 80054bc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80054c0:	e7ea      	b.n	8005498 <__swrite+0x14>
 80054c2:	bf00      	nop

080054c4 <__sseek>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	460c      	mov	r4, r1
 80054c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054cc:	f003 faba 	bl	8008a44 <_lseek_r>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	1c42      	adds	r2, r0, #1
 80054d4:	bf0e      	itee	eq
 80054d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054de:	6520      	strne	r0, [r4, #80]	; 0x50
 80054e0:	81a3      	strh	r3, [r4, #12]
 80054e2:	bd10      	pop	{r4, pc}

080054e4 <__sclose>:
 80054e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e8:	f001 be9c 	b.w	8007224 <_close_r>

080054ec <_vfprintf_r>:
 80054ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f0:	b0d5      	sub	sp, #340	; 0x154
 80054f2:	461c      	mov	r4, r3
 80054f4:	9107      	str	r1, [sp, #28]
 80054f6:	4691      	mov	r9, r2
 80054f8:	4605      	mov	r5, r0
 80054fa:	9009      	str	r0, [sp, #36]	; 0x24
 80054fc:	f003 fa9e 	bl	8008a3c <_localeconv_r>
 8005500:	6802      	ldr	r2, [r0, #0]
 8005502:	9217      	str	r2, [sp, #92]	; 0x5c
 8005504:	4610      	mov	r0, r2
 8005506:	940e      	str	r4, [sp, #56]	; 0x38
 8005508:	f7fa ff1a 	bl	8000340 <strlen>
 800550c:	9016      	str	r0, [sp, #88]	; 0x58
 800550e:	b11d      	cbz	r5, 8005518 <_vfprintf_r+0x2c>
 8005510:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 822a 	beq.w	800596c <_vfprintf_r+0x480>
 8005518:	9a07      	ldr	r2, [sp, #28]
 800551a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800551c:	07dd      	lsls	r5, r3, #31
 800551e:	f140 8138 	bpl.w	8005792 <_vfprintf_r+0x2a6>
 8005522:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8005526:	b291      	uxth	r1, r2
 8005528:	048f      	lsls	r7, r1, #18
 800552a:	d409      	bmi.n	8005540 <_vfprintf_r+0x54>
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005532:	819a      	strh	r2, [r3, #12]
 8005534:	b291      	uxth	r1, r2
 8005536:	461a      	mov	r2, r3
 8005538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553e:	6653      	str	r3, [r2, #100]	; 0x64
 8005540:	070e      	lsls	r6, r1, #28
 8005542:	f140 80cb 	bpl.w	80056dc <_vfprintf_r+0x1f0>
 8005546:	9b07      	ldr	r3, [sp, #28]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80c6 	beq.w	80056dc <_vfprintf_r+0x1f0>
 8005550:	f001 031a 	and.w	r3, r1, #26
 8005554:	2b0a      	cmp	r3, #10
 8005556:	f000 80cf 	beq.w	80056f8 <_vfprintf_r+0x20c>
 800555a:	2400      	movs	r4, #0
 800555c:	ab2b      	add	r3, sp, #172	; 0xac
 800555e:	464d      	mov	r5, r9
 8005560:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
 8005564:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8005568:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 800556c:	9412      	str	r4, [sp, #72]	; 0x48
 800556e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005570:	4698      	mov	r8, r3
 8005572:	9418      	str	r4, [sp, #96]	; 0x60
 8005574:	2300      	movs	r3, #0
 8005576:	940b      	str	r4, [sp, #44]	; 0x2c
 8005578:	2400      	movs	r4, #0
 800557a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 800557e:	782b      	ldrb	r3, [r5, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 819d 	beq.w	80058c0 <_vfprintf_r+0x3d4>
 8005586:	46aa      	mov	sl, r5
 8005588:	e004      	b.n	8005594 <_vfprintf_r+0xa8>
 800558a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80c7 	beq.w	8005722 <_vfprintf_r+0x236>
 8005594:	2b25      	cmp	r3, #37	; 0x25
 8005596:	d1f8      	bne.n	800558a <_vfprintf_r+0x9e>
 8005598:	ebba 0605 	subs.w	r6, sl, r5
 800559c:	f040 80c5 	bne.w	800572a <_vfprintf_r+0x23e>
 80055a0:	f89a 3000 	ldrb.w	r3, [sl]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 818b 	beq.w	80058c0 <_vfprintf_r+0x3d4>
 80055aa:	2300      	movs	r3, #0
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295
 80055b0:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80055b4:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80055b8:	930a      	str	r3, [sp, #40]	; 0x28
 80055ba:	f10a 0a01 	add.w	sl, sl, #1
 80055be:	9208      	str	r2, [sp, #32]
 80055c0:	461f      	mov	r7, r3
 80055c2:	242b      	movs	r4, #43	; 0x2b
 80055c4:	f04f 0920 	mov.w	r9, #32
 80055c8:	f10a 0a01 	add.w	sl, sl, #1
 80055cc:	f1a6 0320 	sub.w	r3, r6, #32
 80055d0:	2b5a      	cmp	r3, #90	; 0x5a
 80055d2:	f200 80ed 	bhi.w	80057b0 <_vfprintf_r+0x2c4>
 80055d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80055da:	02eb      	.short	0x02eb
 80055dc:	00eb00eb 	.word	0x00eb00eb
 80055e0:	00eb02e6 	.word	0x00eb02e6
 80055e4:	00eb00eb 	.word	0x00eb00eb
 80055e8:	00eb006a 	.word	0x00eb006a
 80055ec:	025c00eb 	.word	0x025c00eb
 80055f0:	00eb0280 	.word	0x00eb0280
 80055f4:	028a0267 	.word	0x028a0267
 80055f8:	028500eb 	.word	0x028500eb
 80055fc:	005b005b 	.word	0x005b005b
 8005600:	005b005b 	.word	0x005b005b
 8005604:	005b005b 	.word	0x005b005b
 8005608:	005b005b 	.word	0x005b005b
 800560c:	00eb005b 	.word	0x00eb005b
 8005610:	00eb00eb 	.word	0x00eb00eb
 8005614:	00eb00eb 	.word	0x00eb00eb
 8005618:	00eb00eb 	.word	0x00eb00eb
 800561c:	00eb017a 	.word	0x00eb017a
 8005620:	01d201f8 	.word	0x01d201f8
 8005624:	017a017a 	.word	0x017a017a
 8005628:	00eb017a 	.word	0x00eb017a
 800562c:	00eb00eb 	.word	0x00eb00eb
 8005630:	02e100eb 	.word	0x02e100eb
 8005634:	00eb00eb 	.word	0x00eb00eb
 8005638:	00eb022d 	.word	0x00eb022d
 800563c:	00eb00eb 	.word	0x00eb00eb
 8005640:	00eb0202 	.word	0x00eb0202
 8005644:	00eb02a4 	.word	0x00eb02a4
 8005648:	078300eb 	.word	0x078300eb
 800564c:	00eb00eb 	.word	0x00eb00eb
 8005650:	00eb00eb 	.word	0x00eb00eb
 8005654:	00eb00eb 	.word	0x00eb00eb
 8005658:	00eb00eb 	.word	0x00eb00eb
 800565c:	00eb017a 	.word	0x00eb017a
 8005660:	01d401f8 	.word	0x01d401f8
 8005664:	017a017a 	.word	0x017a017a
 8005668:	02c7017a 	.word	0x02c7017a
 800566c:	01cd01d4 	.word	0x01cd01d4
 8005670:	02d400eb 	.word	0x02d400eb
 8005674:	026c00eb 	.word	0x026c00eb
 8005678:	02b5022f 	.word	0x02b5022f
 800567c:	00eb01cd 	.word	0x00eb01cd
 8005680:	007e0202 	.word	0x007e0202
 8005684:	00eb0780 	.word	0x00eb0780
 8005688:	076100eb 	.word	0x076100eb
 800568c:	007e00eb 	.word	0x007e00eb
 8005690:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005694:	2200      	movs	r2, #0
 8005696:	f81a 6b01 	ldrb.w	r6, [sl], #1
 800569a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800569e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80056a2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	d9f5      	bls.n	8005696 <_vfprintf_r+0x1aa>
 80056aa:	920a      	str	r2, [sp, #40]	; 0x28
 80056ac:	e78e      	b.n	80055cc <_vfprintf_r+0xe0>
 80056ae:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80056b2:	4658      	mov	r0, fp
 80056b4:	f003 f9c2 	bl	8008a3c <_localeconv_r>
 80056b8:	6843      	ldr	r3, [r0, #4]
 80056ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fa fe3f 	bl	8000340 <strlen>
 80056c2:	901c      	str	r0, [sp, #112]	; 0x70
 80056c4:	4606      	mov	r6, r0
 80056c6:	4658      	mov	r0, fp
 80056c8:	f003 f9b8 	bl	8008a3c <_localeconv_r>
 80056cc:	6883      	ldr	r3, [r0, #8]
 80056ce:	9319      	str	r3, [sp, #100]	; 0x64
 80056d0:	2e00      	cmp	r6, #0
 80056d2:	f040 86cd 	bne.w	8006470 <_vfprintf_r+0xf84>
 80056d6:	f89a 6000 	ldrb.w	r6, [sl]
 80056da:	e775      	b.n	80055c8 <_vfprintf_r+0xdc>
 80056dc:	9d07      	ldr	r5, [sp, #28]
 80056de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056e0:	4629      	mov	r1, r5
 80056e2:	f001 fcc3 	bl	800706c <__swsetup_r>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	f041 831c 	bne.w	8006d24 <_vfprintf_r+0x1838>
 80056ec:	89a9      	ldrh	r1, [r5, #12]
 80056ee:	f001 031a 	and.w	r3, r1, #26
 80056f2:	2b0a      	cmp	r3, #10
 80056f4:	f47f af31 	bne.w	800555a <_vfprintf_r+0x6e>
 80056f8:	9a07      	ldr	r2, [sp, #28]
 80056fa:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f6ff af2b 	blt.w	800555a <_vfprintf_r+0x6e>
 8005704:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005706:	07d8      	lsls	r0, r3, #31
 8005708:	d402      	bmi.n	8005710 <_vfprintf_r+0x224>
 800570a:	0589      	lsls	r1, r1, #22
 800570c:	f141 813b 	bpl.w	8006986 <_vfprintf_r+0x149a>
 8005710:	9907      	ldr	r1, [sp, #28]
 8005712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005714:	4623      	mov	r3, r4
 8005716:	464a      	mov	r2, r9
 8005718:	b055      	add	sp, #340	; 0x154
 800571a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571e:	f001 bc4f 	b.w	8006fc0 <__sbprintf>
 8005722:	ebba 0605 	subs.w	r6, sl, r5
 8005726:	f000 80cb 	beq.w	80058c0 <_vfprintf_r+0x3d4>
 800572a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800572c:	4433      	add	r3, r6
 800572e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005730:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005732:	3301      	adds	r3, #1
 8005734:	2b07      	cmp	r3, #7
 8005736:	e9c8 5600 	strd	r5, r6, [r8]
 800573a:	9329      	str	r3, [sp, #164]	; 0xa4
 800573c:	dc05      	bgt.n	800574a <_vfprintf_r+0x25e>
 800573e:	f108 0808 	add.w	r8, r8, #8
 8005742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005744:	4433      	add	r3, r6
 8005746:	930b      	str	r3, [sp, #44]	; 0x2c
 8005748:	e72a      	b.n	80055a0 <_vfprintf_r+0xb4>
 800574a:	9907      	ldr	r1, [sp, #28]
 800574c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800574e:	aa28      	add	r2, sp, #160	; 0xa0
 8005750:	f004 f850 	bl	80097f4 <__sprint_r>
 8005754:	b980      	cbnz	r0, 8005778 <_vfprintf_r+0x28c>
 8005756:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800575a:	e7f2      	b.n	8005742 <_vfprintf_r+0x256>
 800575c:	9907      	ldr	r1, [sp, #28]
 800575e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005760:	aa28      	add	r2, sp, #160	; 0xa0
 8005762:	f004 f847 	bl	80097f4 <__sprint_r>
 8005766:	2800      	cmp	r0, #0
 8005768:	f000 809b 	beq.w	80058a2 <_vfprintf_r+0x3b6>
 800576c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800576e:	b11b      	cbz	r3, 8005778 <_vfprintf_r+0x28c>
 8005770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005772:	4619      	mov	r1, r3
 8005774:	f002 fee8 	bl	8008548 <_free_r>
 8005778:	9a07      	ldr	r2, [sp, #28]
 800577a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800577c:	07d9      	lsls	r1, r3, #31
 800577e:	f140 80ea 	bpl.w	8005956 <_vfprintf_r+0x46a>
 8005782:	8993      	ldrh	r3, [r2, #12]
 8005784:	065b      	lsls	r3, r3, #25
 8005786:	f101 82d9 	bmi.w	8006d3c <_vfprintf_r+0x1850>
 800578a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800578c:	b055      	add	sp, #340	; 0x154
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	9b07      	ldr	r3, [sp, #28]
 8005794:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005798:	0590      	lsls	r0, r2, #22
 800579a:	b291      	uxth	r1, r2
 800579c:	f53f aec4 	bmi.w	8005528 <_vfprintf_r+0x3c>
 80057a0:	461d      	mov	r5, r3
 80057a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80057a4:	f7ff fa0e 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 80057a8:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 80057ac:	b291      	uxth	r1, r2
 80057ae:	e6bb      	b.n	8005528 <_vfprintf_r+0x3c>
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	f000 8085 	beq.w	80058c0 <_vfprintf_r+0x3d4>
 80057b6:	2200      	movs	r2, #0
 80057b8:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
 80057bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 80057c0:	2301      	movs	r3, #1
 80057c2:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 80057c6:	9306      	str	r3, [sp, #24]
 80057c8:	9208      	str	r2, [sp, #32]
 80057ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80057cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80057ce:	9210      	str	r2, [sp, #64]	; 0x40
 80057d0:	ad3b      	add	r5, sp, #236	; 0xec
 80057d2:	f017 0302 	ands.w	r3, r7, #2
 80057d6:	d002      	beq.n	80057de <_vfprintf_r+0x2f2>
 80057d8:	9906      	ldr	r1, [sp, #24]
 80057da:	3102      	adds	r1, #2
 80057dc:	9106      	str	r1, [sp, #24]
 80057de:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
 80057e2:	d107      	bne.n	80057f4 <_vfprintf_r+0x308>
 80057e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80057e6:	9806      	ldr	r0, [sp, #24]
 80057e8:	eba1 0900 	sub.w	r9, r1, r0
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	f300 8370 	bgt.w	8005ed4 <_vfprintf_r+0x9e8>
 80057f4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80057f6:	b18a      	cbz	r2, 800581c <_vfprintf_r+0x330>
 80057f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80057fa:	f10d 0183 	add.w	r1, sp, #131	; 0x83
 80057fe:	3201      	adds	r2, #1
 8005800:	3401      	adds	r4, #1
 8005802:	f8c8 1000 	str.w	r1, [r8]
 8005806:	2a07      	cmp	r2, #7
 8005808:	f04f 0101 	mov.w	r1, #1
 800580c:	942a      	str	r4, [sp, #168]	; 0xa8
 800580e:	9229      	str	r2, [sp, #164]	; 0xa4
 8005810:	f8c8 1004 	str.w	r1, [r8, #4]
 8005814:	f300 83b6 	bgt.w	8005f84 <_vfprintf_r+0xa98>
 8005818:	f108 0808 	add.w	r8, r8, #8
 800581c:	b183      	cbz	r3, 8005840 <_vfprintf_r+0x354>
 800581e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005820:	aa21      	add	r2, sp, #132	; 0x84
 8005822:	3301      	adds	r3, #1
 8005824:	3402      	adds	r4, #2
 8005826:	f8c8 2000 	str.w	r2, [r8]
 800582a:	2b07      	cmp	r3, #7
 800582c:	f04f 0202 	mov.w	r2, #2
 8005830:	942a      	str	r4, [sp, #168]	; 0xa8
 8005832:	9329      	str	r3, [sp, #164]	; 0xa4
 8005834:	f8c8 2004 	str.w	r2, [r8, #4]
 8005838:	f300 83b2 	bgt.w	8005fa0 <_vfprintf_r+0xab4>
 800583c:	f108 0808 	add.w	r8, r8, #8
 8005840:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8005844:	f000 8269 	beq.w	8005d1a <_vfprintf_r+0x82e>
 8005848:	9b08      	ldr	r3, [sp, #32]
 800584a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800584c:	eba3 0b02 	sub.w	fp, r3, r2
 8005850:	f1bb 0f00 	cmp.w	fp, #0
 8005854:	f300 82aa 	bgt.w	8005dac <_vfprintf_r+0x8c0>
 8005858:	05fb      	lsls	r3, r7, #23
 800585a:	f100 8200 	bmi.w	8005c5e <_vfprintf_r+0x772>
 800585e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005860:	f8c8 3004 	str.w	r3, [r8, #4]
 8005864:	441c      	add	r4, r3
 8005866:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005868:	f8c8 5000 	str.w	r5, [r8]
 800586c:	3301      	adds	r3, #1
 800586e:	2b07      	cmp	r3, #7
 8005870:	942a      	str	r4, [sp, #168]	; 0xa8
 8005872:	9329      	str	r3, [sp, #164]	; 0xa4
 8005874:	f300 8322 	bgt.w	8005ebc <_vfprintf_r+0x9d0>
 8005878:	f108 0808 	add.w	r8, r8, #8
 800587c:	0778      	lsls	r0, r7, #29
 800587e:	d505      	bpl.n	800588c <_vfprintf_r+0x3a0>
 8005880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005882:	9a06      	ldr	r2, [sp, #24]
 8005884:	1a9d      	subs	r5, r3, r2
 8005886:	2d00      	cmp	r5, #0
 8005888:	f300 8396 	bgt.w	8005fb8 <_vfprintf_r+0xacc>
 800588c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005890:	9906      	ldr	r1, [sp, #24]
 8005892:	428a      	cmp	r2, r1
 8005894:	bfac      	ite	ge
 8005896:	189b      	addge	r3, r3, r2
 8005898:	185b      	addlt	r3, r3, r1
 800589a:	930b      	str	r3, [sp, #44]	; 0x2c
 800589c:	2c00      	cmp	r4, #0
 800589e:	f47f af5d 	bne.w	800575c <_vfprintf_r+0x270>
 80058a2:	2300      	movs	r3, #0
 80058a4:	9329      	str	r3, [sp, #164]	; 0xa4
 80058a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058a8:	b11b      	cbz	r3, 80058b2 <_vfprintf_r+0x3c6>
 80058aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ae:	f002 fe4b 	bl	8008548 <_free_r>
 80058b2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80058b6:	4655      	mov	r5, sl
 80058b8:	782b      	ldrb	r3, [r5, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f47f ae63 	bne.w	8005586 <_vfprintf_r+0x9a>
 80058c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f041 81d3 	bne.w	8006c6e <_vfprintf_r+0x1782>
 80058c8:	2300      	movs	r3, #0
 80058ca:	9329      	str	r3, [sp, #164]	; 0xa4
 80058cc:	e754      	b.n	8005778 <_vfprintf_r+0x28c>
 80058ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058d0:	3307      	adds	r3, #7
 80058d2:	f023 0207 	bic.w	r2, r3, #7
 80058d6:	e8f2 3402 	ldrd	r3, r4, [r2], #8
 80058da:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 80058de:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 80058e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80058e6:	920e      	str	r2, [sp, #56]	; 0x38
 80058e8:	4699      	mov	r9, r3
 80058ea:	4618      	mov	r0, r3
 80058ec:	4621      	mov	r1, r4
 80058ee:	4bb5      	ldr	r3, [pc, #724]	; (8005bc4 <_vfprintf_r+0x6d8>)
 80058f0:	f04f 32ff 	mov.w	r2, #4294967295
 80058f4:	f7fb fa3a 	bl	8000d6c <__aeabi_dcmpun>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f040 84ef 	bne.w	80062dc <_vfprintf_r+0xdf0>
 80058fe:	4bb1      	ldr	r3, [pc, #708]	; (8005bc4 <_vfprintf_r+0x6d8>)
 8005900:	4648      	mov	r0, r9
 8005902:	4621      	mov	r1, r4
 8005904:	f04f 32ff 	mov.w	r2, #4294967295
 8005908:	f7fb fa12 	bl	8000d30 <__aeabi_dcmple>
 800590c:	2800      	cmp	r0, #0
 800590e:	f040 84e5 	bne.w	80062dc <_vfprintf_r+0xdf0>
 8005912:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005916:	2200      	movs	r2, #0
 8005918:	2300      	movs	r3, #0
 800591a:	f7fb f9ff 	bl	8000d1c <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	f040 8767 	bne.w	80067f2 <_vfprintf_r+0x1306>
 8005924:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005928:	4da7      	ldr	r5, [pc, #668]	; (8005bc8 <_vfprintf_r+0x6dc>)
 800592a:	4ba8      	ldr	r3, [pc, #672]	; (8005bcc <_vfprintf_r+0x6e0>)
 800592c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8005930:	2103      	movs	r1, #3
 8005932:	2e47      	cmp	r6, #71	; 0x47
 8005934:	bfc8      	it	gt
 8005936:	461d      	movgt	r5, r3
 8005938:	2300      	movs	r3, #0
 800593a:	930d      	str	r3, [sp, #52]	; 0x34
 800593c:	9106      	str	r1, [sp, #24]
 800593e:	910c      	str	r1, [sp, #48]	; 0x30
 8005940:	9308      	str	r3, [sp, #32]
 8005942:	930f      	str	r3, [sp, #60]	; 0x3c
 8005944:	9313      	str	r3, [sp, #76]	; 0x4c
 8005946:	9310      	str	r3, [sp, #64]	; 0x40
 8005948:	2a00      	cmp	r2, #0
 800594a:	f43f af42 	beq.w	80057d2 <_vfprintf_r+0x2e6>
 800594e:	9b06      	ldr	r3, [sp, #24]
 8005950:	3301      	adds	r3, #1
 8005952:	9306      	str	r3, [sp, #24]
 8005954:	e73d      	b.n	80057d2 <_vfprintf_r+0x2e6>
 8005956:	9b07      	ldr	r3, [sp, #28]
 8005958:	899b      	ldrh	r3, [r3, #12]
 800595a:	059a      	lsls	r2, r3, #22
 800595c:	f53f af12 	bmi.w	8005784 <_vfprintf_r+0x298>
 8005960:	9c07      	ldr	r4, [sp, #28]
 8005962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005964:	f7ff f930 	bl	8004bc8 <__retarget_lock_release_recursive>
 8005968:	89a3      	ldrh	r3, [r4, #12]
 800596a:	e70b      	b.n	8005784 <_vfprintf_r+0x298>
 800596c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800596e:	f7ff f84b 	bl	8004a08 <__sinit>
 8005972:	e5d1      	b.n	8005518 <_vfprintf_r+0x2c>
 8005974:	f89a 6000 	ldrb.w	r6, [sl]
 8005978:	f047 0720 	orr.w	r7, r7, #32
 800597c:	e624      	b.n	80055c8 <_vfprintf_r+0xdc>
 800597e:	f047 0710 	orr.w	r7, r7, #16
 8005982:	06ba      	lsls	r2, r7, #26
 8005984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005986:	f140 843b 	bpl.w	8006200 <_vfprintf_r+0xd14>
 800598a:	3307      	adds	r3, #7
 800598c:	f023 0307 	bic.w	r3, r3, #7
 8005990:	461a      	mov	r2, r3
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f852 4b08 	ldr.w	r4, [r2], #8
 8005998:	920e      	str	r2, [sp, #56]	; 0x38
 800599a:	4699      	mov	r9, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f2c0 844c 	blt.w	800623a <_vfprintf_r+0xd4e>
 80059a2:	9b08      	ldr	r3, [sp, #32]
 80059a4:	3301      	adds	r3, #1
 80059a6:	f000 82d8 	beq.w	8005f5a <_vfprintf_r+0xa6e>
 80059aa:	ea54 0309 	orrs.w	r3, r4, r9
 80059ae:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
 80059b2:	f040 82d3 	bne.w	8005f5c <_vfprintf_r+0xa70>
 80059b6:	9b08      	ldr	r3, [sp, #32]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f040 82d4 	bne.w	8005f66 <_vfprintf_r+0xa7a>
 80059be:	465f      	mov	r7, fp
 80059c0:	2300      	movs	r3, #0
 80059c2:	9308      	str	r3, [sp, #32]
 80059c4:	930c      	str	r3, [sp, #48]	; 0x30
 80059c6:	ad54      	add	r5, sp, #336	; 0x150
 80059c8:	e11d      	b.n	8005c06 <_vfprintf_r+0x71a>
 80059ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059cc:	2200      	movs	r2, #0
 80059ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80059d2:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 80059d6:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
 80059da:	930e      	str	r3, [sp, #56]	; 0x38
 80059dc:	e6f0      	b.n	80057c0 <_vfprintf_r+0x2d4>
 80059de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80059e0:	9b08      	ldr	r3, [sp, #32]
 80059e2:	f854 5b04 	ldr.w	r5, [r4], #4
 80059e6:	f04f 0900 	mov.w	r9, #0
 80059ea:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
 80059ee:	2d00      	cmp	r5, #0
 80059f0:	f000 8593 	beq.w	800651a <_vfprintf_r+0x102e>
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	f000 8651 	beq.w	800669c <_vfprintf_r+0x11b0>
 80059fa:	461a      	mov	r2, r3
 80059fc:	4649      	mov	r1, r9
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7fa fd0e 	bl	8000420 <memchr>
 8005a04:	900d      	str	r0, [sp, #52]	; 0x34
 8005a06:	2800      	cmp	r0, #0
 8005a08:	f001 810e 	beq.w	8006c28 <_vfprintf_r+0x173c>
 8005a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a12:	1b5b      	subs	r3, r3, r5
 8005a14:	930c      	str	r3, [sp, #48]	; 0x30
 8005a16:	940e      	str	r4, [sp, #56]	; 0x38
 8005a18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a1c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005a20:	9306      	str	r3, [sp, #24]
 8005a22:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8005a26:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005a2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005a2e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8005a32:	e789      	b.n	8005948 <_vfprintf_r+0x45c>
 8005a34:	f047 0710 	orr.w	r7, r7, #16
 8005a38:	f017 0920 	ands.w	r9, r7, #32
 8005a3c:	f000 83d2 	beq.w	80061e4 <_vfprintf_r+0xcf8>
 8005a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a42:	3307      	adds	r3, #7
 8005a44:	f023 0307 	bic.w	r3, r3, #7
 8005a48:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005a4c:	f853 4b08 	ldr.w	r4, [r3], #8
 8005a50:	930e      	str	r3, [sp, #56]	; 0x38
 8005a52:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
 8005a56:	2300      	movs	r3, #0
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8005a5e:	9a08      	ldr	r2, [sp, #32]
 8005a60:	1c51      	adds	r1, r2, #1
 8005a62:	f000 80b8 	beq.w	8005bd6 <_vfprintf_r+0x6ea>
 8005a66:	ea54 0109 	orrs.w	r1, r4, r9
 8005a6a:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8005a6e:	f040 80b1 	bne.w	8005bd4 <_vfprintf_r+0x6e8>
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	f040 85f6 	bne.w	8006664 <_vfprintf_r+0x1178>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1a1      	bne.n	80059c0 <_vfprintf_r+0x4d4>
 8005a7c:	f01b 0301 	ands.w	r3, fp, #1
 8005a80:	930c      	str	r3, [sp, #48]	; 0x30
 8005a82:	f000 8414 	beq.w	80062ae <_vfprintf_r+0xdc2>
 8005a86:	2330      	movs	r3, #48	; 0x30
 8005a88:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 8005a8c:	f20d 154f 	addw	r5, sp, #335	; 0x14f
 8005a90:	e0b9      	b.n	8005c06 <_vfprintf_r+0x71a>
 8005a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a98:	920a      	str	r2, [sp, #40]	; 0x28
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	f280 83da 	bge.w	8006254 <_vfprintf_r+0xd68>
 8005aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8005aa4:	4252      	negs	r2, r2
 8005aa6:	920a      	str	r2, [sp, #40]	; 0x28
 8005aa8:	f89a 6000 	ldrb.w	r6, [sl]
 8005aac:	f047 0704 	orr.w	r7, r7, #4
 8005ab0:	e58a      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005ab2:	06bd      	lsls	r5, r7, #26
 8005ab4:	f100 84d1 	bmi.w	800645a <_vfprintf_r+0xf6e>
 8005ab8:	06fc      	lsls	r4, r7, #27
 8005aba:	f100 85d8 	bmi.w	800666e <_vfprintf_r+0x1182>
 8005abe:	0678      	lsls	r0, r7, #25
 8005ac0:	f100 86a5 	bmi.w	800680e <_vfprintf_r+0x1322>
 8005ac4:	05b9      	lsls	r1, r7, #22
 8005ac6:	f140 85d2 	bpl.w	800666e <_vfprintf_r+0x1182>
 8005aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ad4:	7011      	strb	r1, [r2, #0]
 8005ad6:	4655      	mov	r5, sl
 8005ad8:	e6ee      	b.n	80058b8 <_vfprintf_r+0x3cc>
 8005ada:	f89a 6000 	ldrb.w	r6, [sl]
 8005ade:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
 8005ae2:	e571      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005ae4:	f89a 6000 	ldrb.w	r6, [sl]
 8005ae8:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8005aec:	e56c      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005aee:	4652      	mov	r2, sl
 8005af0:	f812 6b01 	ldrb.w	r6, [r2], #1
 8005af4:	2e2a      	cmp	r6, #42	; 0x2a
 8005af6:	f001 823f 	beq.w	8006f78 <_vfprintf_r+0x1a8c>
 8005afa:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	4692      	mov	sl, r2
 8005b02:	bf98      	it	ls
 8005b04:	2200      	movls	r2, #0
 8005b06:	f201 80bc 	bhi.w	8006c82 <_vfprintf_r+0x1796>
 8005b0a:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8005b0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005b12:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005b16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b1a:	2b09      	cmp	r3, #9
 8005b1c:	d9f5      	bls.n	8005b0a <_vfprintf_r+0x61e>
 8005b1e:	9208      	str	r2, [sp, #32]
 8005b20:	e554      	b.n	80055cc <_vfprintf_r+0xe0>
 8005b22:	f047 0b10 	orr.w	fp, r7, #16
 8005b26:	f01b 0920 	ands.w	r9, fp, #32
 8005b2a:	f000 8376 	beq.w	800621a <_vfprintf_r+0xd2e>
 8005b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b30:	3307      	adds	r3, #7
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8005b3a:	f853 4b08 	ldr.w	r4, [r3], #8
 8005b3e:	930e      	str	r3, [sp, #56]	; 0x38
 8005b40:	2301      	movs	r3, #1
 8005b42:	e789      	b.n	8005a58 <_vfprintf_r+0x56c>
 8005b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b46:	f853 4b04 	ldr.w	r4, [r3], #4
 8005b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8005b4c:	2330      	movs	r3, #48	; 0x30
 8005b4e:	2678      	movs	r6, #120	; 0x78
 8005b50:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8005b54:	4b1e      	ldr	r3, [pc, #120]	; (8005bd0 <_vfprintf_r+0x6e4>)
 8005b56:	9318      	str	r3, [sp, #96]	; 0x60
 8005b58:	f047 0b02 	orr.w	fp, r7, #2
 8005b5c:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
 8005b60:	f04f 0900 	mov.w	r9, #0
 8005b64:	2302      	movs	r3, #2
 8005b66:	e777      	b.n	8005a58 <_vfprintf_r+0x56c>
 8005b68:	f89a 6000 	ldrb.w	r6, [sl]
 8005b6c:	2e68      	cmp	r6, #104	; 0x68
 8005b6e:	bf03      	ittte	eq
 8005b70:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8005b74:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
 8005b78:	f10a 0a01 	addeq.w	sl, sl, #1
 8005b7c:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
 8005b80:	e522      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005b82:	f89a 6000 	ldrb.w	r6, [sl]
 8005b86:	2e6c      	cmp	r6, #108	; 0x6c
 8005b88:	bf03      	ittte	eq
 8005b8a:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8005b8e:	f047 0720 	orreq.w	r7, r7, #32
 8005b92:	f10a 0a01 	addeq.w	sl, sl, #1
 8005b96:	f047 0710 	orrne.w	r7, r7, #16
 8005b9a:	e515      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005b9c:	f89a 6000 	ldrb.w	r6, [sl]
 8005ba0:	f047 0708 	orr.w	r7, r7, #8
 8005ba4:	e510      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005ba6:	f89a 6000 	ldrb.w	r6, [sl]
 8005baa:	f047 0701 	orr.w	r7, r7, #1
 8005bae:	e50b      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005bb0:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f47f ad8e 	bne.w	80056d6 <_vfprintf_r+0x1ea>
 8005bba:	f89a 6000 	ldrb.w	r6, [sl]
 8005bbe:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
 8005bc2:	e501      	b.n	80055c8 <_vfprintf_r+0xdc>
 8005bc4:	7fefffff 	.word	0x7fefffff
 8005bc8:	0800b120 	.word	0x0800b120
 8005bcc:	0800b124 	.word	0x0800b124
 8005bd0:	0800b130 	.word	0x0800b130
 8005bd4:	46bb      	mov	fp, r7
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	f000 81c0 	beq.w	8005f5c <_vfprintf_r+0xa70>
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	ad54      	add	r5, sp, #336	; 0x150
 8005be0:	d120      	bne.n	8005c24 <_vfprintf_r+0x738>
 8005be2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005be4:	f004 030f 	and.w	r3, r4, #15
 8005be8:	0924      	lsrs	r4, r4, #4
 8005bea:	5cd3      	ldrb	r3, [r2, r3]
 8005bec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bf0:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
 8005bf4:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8005bf8:	ea54 0309 	orrs.w	r3, r4, r9
 8005bfc:	d1f2      	bne.n	8005be4 <_vfprintf_r+0x6f8>
 8005bfe:	ab54      	add	r3, sp, #336	; 0x150
 8005c00:	1b5b      	subs	r3, r3, r5
 8005c02:	465f      	mov	r7, fp
 8005c04:	930c      	str	r3, [sp, #48]	; 0x30
 8005c06:	9908      	ldr	r1, [sp, #32]
 8005c08:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c0a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005c0e:	4281      	cmp	r1, r0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	bfb8      	it	lt
 8005c16:	4601      	movlt	r1, r0
 8005c18:	930d      	str	r3, [sp, #52]	; 0x34
 8005c1a:	9106      	str	r1, [sp, #24]
 8005c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c20:	9310      	str	r3, [sp, #64]	; 0x40
 8005c22:	e691      	b.n	8005948 <_vfprintf_r+0x45c>
 8005c24:	f004 0307 	and.w	r3, r4, #7
 8005c28:	08e4      	lsrs	r4, r4, #3
 8005c2a:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
 8005c2e:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8005c32:	3330      	adds	r3, #48	; 0x30
 8005c34:	ea54 0109 	orrs.w	r1, r4, r9
 8005c38:	462a      	mov	r2, r5
 8005c3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c3e:	d1f1      	bne.n	8005c24 <_vfprintf_r+0x738>
 8005c40:	f01b 0f01 	tst.w	fp, #1
 8005c44:	d0db      	beq.n	8005bfe <_vfprintf_r+0x712>
 8005c46:	2b30      	cmp	r3, #48	; 0x30
 8005c48:	d0d9      	beq.n	8005bfe <_vfprintf_r+0x712>
 8005c4a:	2330      	movs	r3, #48	; 0x30
 8005c4c:	3a02      	subs	r2, #2
 8005c4e:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005c52:	ab54      	add	r3, sp, #336	; 0x150
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	465f      	mov	r7, fp
 8005c58:	930c      	str	r3, [sp, #48]	; 0x30
 8005c5a:	4615      	mov	r5, r2
 8005c5c:	e7d3      	b.n	8005c06 <_vfprintf_r+0x71a>
 8005c5e:	2e65      	cmp	r6, #101	; 0x65
 8005c60:	f340 80e6 	ble.w	8005e30 <_vfprintf_r+0x944>
 8005c64:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f7fb f84c 	bl	8000d08 <__aeabi_dcmpeq>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f000 81dc 	beq.w	800602e <_vfprintf_r+0xb42>
 8005c76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005c78:	4abf      	ldr	r2, [pc, #764]	; (8005f78 <_vfprintf_r+0xa8c>)
 8005c7a:	f8c8 2000 	str.w	r2, [r8]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	3401      	adds	r4, #1
 8005c82:	2201      	movs	r2, #1
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	942a      	str	r4, [sp, #168]	; 0xa8
 8005c88:	9329      	str	r3, [sp, #164]	; 0xa4
 8005c8a:	f8c8 2004 	str.w	r2, [r8, #4]
 8005c8e:	f300 84cc 	bgt.w	800662a <_vfprintf_r+0x113e>
 8005c92:	f108 0808 	add.w	r8, r8, #8
 8005c96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	f280 82d6 	bge.w	800624c <_vfprintf_r+0xd60>
 8005ca0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ca2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ca4:	441c      	add	r4, r3
 8005ca6:	e9c8 2300 	strd	r2, r3, [r8]
 8005caa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005cac:	942a      	str	r4, [sp, #168]	; 0xa8
 8005cae:	3301      	adds	r3, #1
 8005cb0:	2b07      	cmp	r3, #7
 8005cb2:	9329      	str	r3, [sp, #164]	; 0xa4
 8005cb4:	f300 8424 	bgt.w	8006500 <_vfprintf_r+0x1014>
 8005cb8:	f108 0808 	add.w	r8, r8, #8
 8005cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cbe:	1e5d      	subs	r5, r3, #1
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	f77f addb 	ble.w	800587c <_vfprintf_r+0x390>
 8005cc6:	2d10      	cmp	r5, #16
 8005cc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005cca:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8005f7c <_vfprintf_r+0xa90>
 8005cce:	f340 84bd 	ble.w	800664c <_vfprintf_r+0x1160>
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	46b9      	mov	r9, r7
 8005cd8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005cdc:	9c07      	ldr	r4, [sp, #28]
 8005cde:	2610      	movs	r6, #16
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	e005      	b.n	8005cf0 <_vfprintf_r+0x804>
 8005ce4:	f108 0808 	add.w	r8, r8, #8
 8005ce8:	3d10      	subs	r5, #16
 8005cea:	2d10      	cmp	r5, #16
 8005cec:	f340 84aa 	ble.w	8006644 <_vfprintf_r+0x1158>
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	3210      	adds	r2, #16
 8005cf4:	2b07      	cmp	r3, #7
 8005cf6:	e9c8 7600 	strd	r7, r6, [r8]
 8005cfa:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005cfe:	ddf1      	ble.n	8005ce4 <_vfprintf_r+0x7f8>
 8005d00:	aa28      	add	r2, sp, #160	; 0xa0
 8005d02:	4621      	mov	r1, r4
 8005d04:	4658      	mov	r0, fp
 8005d06:	f003 fd75 	bl	80097f4 <__sprint_r>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f47f ad2e 	bne.w	800576c <_vfprintf_r+0x280>
 8005d10:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005d14:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005d18:	e7e6      	b.n	8005ce8 <_vfprintf_r+0x7fc>
 8005d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1c:	9a06      	ldr	r2, [sp, #24]
 8005d1e:	eba3 0b02 	sub.w	fp, r3, r2
 8005d22:	f1bb 0f00 	cmp.w	fp, #0
 8005d26:	f77f ad8f 	ble.w	8005848 <_vfprintf_r+0x35c>
 8005d2a:	f1bb 0f10 	cmp.w	fp, #16
 8005d2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005d30:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8005f7c <_vfprintf_r+0xa90>
 8005d34:	dd2c      	ble.n	8005d90 <_vfprintf_r+0x8a4>
 8005d36:	961d      	str	r6, [sp, #116]	; 0x74
 8005d38:	4621      	mov	r1, r4
 8005d3a:	464e      	mov	r6, r9
 8005d3c:	9c07      	ldr	r4, [sp, #28]
 8005d3e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d42:	2310      	movs	r3, #16
 8005d44:	e006      	b.n	8005d54 <_vfprintf_r+0x868>
 8005d46:	f1ab 0b10 	sub.w	fp, fp, #16
 8005d4a:	f1bb 0f10 	cmp.w	fp, #16
 8005d4e:	f108 0808 	add.w	r8, r8, #8
 8005d52:	dd1a      	ble.n	8005d8a <_vfprintf_r+0x89e>
 8005d54:	3201      	adds	r2, #1
 8005d56:	3110      	adds	r1, #16
 8005d58:	2a07      	cmp	r2, #7
 8005d5a:	e9c8 6300 	strd	r6, r3, [r8]
 8005d5e:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8005d62:	ddf0      	ble.n	8005d46 <_vfprintf_r+0x85a>
 8005d64:	aa28      	add	r2, sp, #160	; 0xa0
 8005d66:	4621      	mov	r1, r4
 8005d68:	4648      	mov	r0, r9
 8005d6a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005d6e:	f003 fd41 	bl	80097f4 <__sprint_r>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f47f acfa 	bne.w	800576c <_vfprintf_r+0x280>
 8005d78:	f1ab 0b10 	sub.w	fp, fp, #16
 8005d7c:	f1bb 0f10 	cmp.w	fp, #16
 8005d80:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8005d84:	f04f 0310 	mov.w	r3, #16
 8005d88:	dce4      	bgt.n	8005d54 <_vfprintf_r+0x868>
 8005d8a:	46b1      	mov	r9, r6
 8005d8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005d8e:	460c      	mov	r4, r1
 8005d90:	3201      	adds	r2, #1
 8005d92:	445c      	add	r4, fp
 8005d94:	2a07      	cmp	r2, #7
 8005d96:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8005d9a:	f8c8 9000 	str.w	r9, [r8]
 8005d9e:	f8c8 b004 	str.w	fp, [r8, #4]
 8005da2:	f300 83a0 	bgt.w	80064e6 <_vfprintf_r+0xffa>
 8005da6:	f108 0808 	add.w	r8, r8, #8
 8005daa:	e54d      	b.n	8005848 <_vfprintf_r+0x35c>
 8005dac:	f1bb 0f10 	cmp.w	fp, #16
 8005db0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005db2:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8005f7c <_vfprintf_r+0xa90>
 8005db6:	dd2d      	ble.n	8005e14 <_vfprintf_r+0x928>
 8005db8:	4620      	mov	r0, r4
 8005dba:	4641      	mov	r1, r8
 8005dbc:	464c      	mov	r4, r9
 8005dbe:	46a8      	mov	r8, r5
 8005dc0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005dc4:	9d07      	ldr	r5, [sp, #28]
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	e006      	b.n	8005dd8 <_vfprintf_r+0x8ec>
 8005dca:	f1ab 0b10 	sub.w	fp, fp, #16
 8005dce:	f1bb 0f10 	cmp.w	fp, #16
 8005dd2:	f101 0108 	add.w	r1, r1, #8
 8005dd6:	dd19      	ble.n	8005e0c <_vfprintf_r+0x920>
 8005dd8:	3201      	adds	r2, #1
 8005dda:	3010      	adds	r0, #16
 8005ddc:	2a07      	cmp	r2, #7
 8005dde:	e9c1 4300 	strd	r4, r3, [r1]
 8005de2:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
 8005de6:	ddf0      	ble.n	8005dca <_vfprintf_r+0x8de>
 8005de8:	aa28      	add	r2, sp, #160	; 0xa0
 8005dea:	4629      	mov	r1, r5
 8005dec:	4648      	mov	r0, r9
 8005dee:	f003 fd01 	bl	80097f4 <__sprint_r>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	f47f acba 	bne.w	800576c <_vfprintf_r+0x280>
 8005df8:	f1ab 0b10 	sub.w	fp, fp, #16
 8005dfc:	f1bb 0f10 	cmp.w	fp, #16
 8005e00:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
 8005e04:	a92b      	add	r1, sp, #172	; 0xac
 8005e06:	f04f 0310 	mov.w	r3, #16
 8005e0a:	dce5      	bgt.n	8005dd8 <_vfprintf_r+0x8ec>
 8005e0c:	4645      	mov	r5, r8
 8005e0e:	46a1      	mov	r9, r4
 8005e10:	4688      	mov	r8, r1
 8005e12:	4604      	mov	r4, r0
 8005e14:	3201      	adds	r2, #1
 8005e16:	445c      	add	r4, fp
 8005e18:	2a07      	cmp	r2, #7
 8005e1a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8005e1e:	f8c8 9000 	str.w	r9, [r8]
 8005e22:	f8c8 b004 	str.w	fp, [r8, #4]
 8005e26:	f300 81d0 	bgt.w	80061ca <_vfprintf_r+0xcde>
 8005e2a:	f108 0808 	add.w	r8, r8, #8
 8005e2e:	e513      	b.n	8005858 <_vfprintf_r+0x36c>
 8005e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	f340 8180 	ble.w	8006138 <_vfprintf_r+0xc4c>
 8005e38:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8005e3a:	f8c8 5000 	str.w	r5, [r8]
 8005e3e:	3601      	adds	r6, #1
 8005e40:	3401      	adds	r4, #1
 8005e42:	2301      	movs	r3, #1
 8005e44:	2e07      	cmp	r6, #7
 8005e46:	942a      	str	r4, [sp, #168]	; 0xa8
 8005e48:	9629      	str	r6, [sp, #164]	; 0xa4
 8005e4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e4e:	f300 837c 	bgt.w	800654a <_vfprintf_r+0x105e>
 8005e52:	f108 0808 	add.w	r8, r8, #8
 8005e56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	441c      	add	r4, r3
 8005e5e:	2e07      	cmp	r6, #7
 8005e60:	e9c8 2300 	strd	r2, r3, [r8]
 8005e64:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 8005e68:	f300 837c 	bgt.w	8006564 <_vfprintf_r+0x1078>
 8005e6c:	f108 0808 	add.w	r8, r8, #8
 8005e70:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005e74:	2200      	movs	r2, #0
 8005e76:	2300      	movs	r3, #0
 8005e78:	f7fa ff46 	bl	8000d08 <__aeabi_dcmpeq>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	f040 8178 	bne.w	8006172 <_vfprintf_r+0xc86>
 8005e82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e84:	3601      	adds	r6, #1
 8005e86:	3b01      	subs	r3, #1
 8005e88:	3501      	adds	r5, #1
 8005e8a:	441c      	add	r4, r3
 8005e8c:	2e07      	cmp	r6, #7
 8005e8e:	f8c8 5000 	str.w	r5, [r8]
 8005e92:	9629      	str	r6, [sp, #164]	; 0xa4
 8005e94:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e98:	942a      	str	r4, [sp, #168]	; 0xa8
 8005e9a:	f300 815d 	bgt.w	8006158 <_vfprintf_r+0xc6c>
 8005e9e:	f108 0808 	add.w	r8, r8, #8
 8005ea2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005ea4:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	441c      	add	r4, r3
 8005eac:	2e07      	cmp	r6, #7
 8005eae:	ab24      	add	r3, sp, #144	; 0x90
 8005eb0:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 8005eb4:	f8c8 3000 	str.w	r3, [r8]
 8005eb8:	f77f acde 	ble.w	8005878 <_vfprintf_r+0x38c>
 8005ebc:	9907      	ldr	r1, [sp, #28]
 8005ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec0:	aa28      	add	r2, sp, #160	; 0xa0
 8005ec2:	f003 fc97 	bl	80097f4 <__sprint_r>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f47f ac50 	bne.w	800576c <_vfprintf_r+0x280>
 8005ecc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005ece:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005ed2:	e4d3      	b.n	800587c <_vfprintf_r+0x390>
 8005ed4:	f1b9 0f10 	cmp.w	r9, #16
 8005ed8:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8005edc:	dd2b      	ble.n	8005f36 <_vfprintf_r+0xa4a>
 8005ede:	e9cd 3b1d 	strd	r3, fp, [sp, #116]	; 0x74
 8005ee2:	961f      	str	r6, [sp, #124]	; 0x7c
 8005ee4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005ee8:	464e      	mov	r6, r9
 8005eea:	2410      	movs	r4, #16
 8005eec:	46a9      	mov	r9, r5
 8005eee:	9d07      	ldr	r5, [sp, #28]
 8005ef0:	e004      	b.n	8005efc <_vfprintf_r+0xa10>
 8005ef2:	3e10      	subs	r6, #16
 8005ef4:	2e10      	cmp	r6, #16
 8005ef6:	f108 0808 	add.w	r8, r8, #8
 8005efa:	dd17      	ble.n	8005f2c <_vfprintf_r+0xa40>
 8005efc:	3201      	adds	r2, #1
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <_vfprintf_r+0xa94>)
 8005f00:	3110      	adds	r1, #16
 8005f02:	2a07      	cmp	r2, #7
 8005f04:	e9c8 3400 	strd	r3, r4, [r8]
 8005f08:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8005f0c:	ddf1      	ble.n	8005ef2 <_vfprintf_r+0xa06>
 8005f0e:	aa28      	add	r2, sp, #160	; 0xa0
 8005f10:	4629      	mov	r1, r5
 8005f12:	4658      	mov	r0, fp
 8005f14:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005f18:	f003 fc6c 	bl	80097f4 <__sprint_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f47f ac25 	bne.w	800576c <_vfprintf_r+0x280>
 8005f22:	3e10      	subs	r6, #16
 8005f24:	2e10      	cmp	r6, #16
 8005f26:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8005f2a:	dce7      	bgt.n	8005efc <_vfprintf_r+0xa10>
 8005f2c:	e9dd 3b1d 	ldrd	r3, fp, [sp, #116]	; 0x74
 8005f30:	464d      	mov	r5, r9
 8005f32:	46b1      	mov	r9, r6
 8005f34:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8005f36:	f8c8 9004 	str.w	r9, [r8, #4]
 8005f3a:	3201      	adds	r2, #1
 8005f3c:	eb09 0401 	add.w	r4, r9, r1
 8005f40:	2a07      	cmp	r2, #7
 8005f42:	490f      	ldr	r1, [pc, #60]	; (8005f80 <_vfprintf_r+0xa94>)
 8005f44:	f8c8 1000 	str.w	r1, [r8]
 8005f48:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8005f4c:	f300 8351 	bgt.w	80065f2 <_vfprintf_r+0x1106>
 8005f50:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005f54:	f108 0808 	add.w	r8, r8, #8
 8005f58:	e44d      	b.n	80057f6 <_vfprintf_r+0x30a>
 8005f5a:	46bb      	mov	fp, r7
 8005f5c:	2c0a      	cmp	r4, #10
 8005f5e:	f179 0300 	sbcs.w	r3, r9, #0
 8005f62:	f080 830c 	bcs.w	800657e <_vfprintf_r+0x1092>
 8005f66:	3430      	adds	r4, #48	; 0x30
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 8005f6e:	465f      	mov	r7, fp
 8005f70:	930c      	str	r3, [sp, #48]	; 0x30
 8005f72:	f20d 154f 	addw	r5, sp, #335	; 0x14f
 8005f76:	e646      	b.n	8005c06 <_vfprintf_r+0x71a>
 8005f78:	0800b160 	.word	0x0800b160
 8005f7c:	0800b174 	.word	0x0800b174
 8005f80:	0800b164 	.word	0x0800b164
 8005f84:	9907      	ldr	r1, [sp, #28]
 8005f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f88:	931d      	str	r3, [sp, #116]	; 0x74
 8005f8a:	aa28      	add	r2, sp, #160	; 0xa0
 8005f8c:	f003 fc32 	bl	80097f4 <__sprint_r>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f47f abeb 	bne.w	800576c <_vfprintf_r+0x280>
 8005f96:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005f98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f9a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005f9e:	e43d      	b.n	800581c <_vfprintf_r+0x330>
 8005fa0:	9907      	ldr	r1, [sp, #28]
 8005fa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fa4:	aa28      	add	r2, sp, #160	; 0xa0
 8005fa6:	f003 fc25 	bl	80097f4 <__sprint_r>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f47f abde 	bne.w	800576c <_vfprintf_r+0x280>
 8005fb0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005fb2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005fb6:	e443      	b.n	8005840 <_vfprintf_r+0x354>
 8005fb8:	2d10      	cmp	r5, #16
 8005fba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005fbc:	dd21      	ble.n	8006002 <_vfprintf_r+0xb16>
 8005fbe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005fc0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8005fc4:	2610      	movs	r6, #16
 8005fc6:	e004      	b.n	8005fd2 <_vfprintf_r+0xae6>
 8005fc8:	3d10      	subs	r5, #16
 8005fca:	2d10      	cmp	r5, #16
 8005fcc:	f108 0808 	add.w	r8, r8, #8
 8005fd0:	dd17      	ble.n	8006002 <_vfprintf_r+0xb16>
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4abb      	ldr	r2, [pc, #748]	; (80062c4 <_vfprintf_r+0xdd8>)
 8005fd6:	3410      	adds	r4, #16
 8005fd8:	2b07      	cmp	r3, #7
 8005fda:	e9c8 2600 	strd	r2, r6, [r8]
 8005fde:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8005fe2:	ddf1      	ble.n	8005fc8 <_vfprintf_r+0xadc>
 8005fe4:	aa28      	add	r2, sp, #160	; 0xa0
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8005fee:	f003 fc01 	bl	80097f4 <__sprint_r>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f47f abba 	bne.w	800576c <_vfprintf_r+0x280>
 8005ff8:	3d10      	subs	r5, #16
 8005ffa:	2d10      	cmp	r5, #16
 8005ffc:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
 8006000:	dce7      	bgt.n	8005fd2 <_vfprintf_r+0xae6>
 8006002:	3301      	adds	r3, #1
 8006004:	4aaf      	ldr	r2, [pc, #700]	; (80062c4 <_vfprintf_r+0xdd8>)
 8006006:	f8c8 5004 	str.w	r5, [r8, #4]
 800600a:	442c      	add	r4, r5
 800600c:	2b07      	cmp	r3, #7
 800600e:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8006012:	f8c8 2000 	str.w	r2, [r8]
 8006016:	f77f ac39 	ble.w	800588c <_vfprintf_r+0x3a0>
 800601a:	9907      	ldr	r1, [sp, #28]
 800601c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800601e:	aa28      	add	r2, sp, #160	; 0xa0
 8006020:	f003 fbe8 	bl	80097f4 <__sprint_r>
 8006024:	2800      	cmp	r0, #0
 8006026:	f47f aba1 	bne.w	800576c <_vfprintf_r+0x280>
 800602a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800602c:	e42e      	b.n	800588c <_vfprintf_r+0x3a0>
 800602e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006030:	2900      	cmp	r1, #0
 8006032:	f340 8114 	ble.w	800625e <_vfprintf_r+0xd72>
 8006036:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800603a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800603c:	4599      	cmp	r9, r3
 800603e:	bfa8      	it	ge
 8006040:	4699      	movge	r9, r3
 8006042:	f1b9 0f00 	cmp.w	r9, #0
 8006046:	dd0b      	ble.n	8006060 <_vfprintf_r+0xb74>
 8006048:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800604a:	3301      	adds	r3, #1
 800604c:	444c      	add	r4, r9
 800604e:	2b07      	cmp	r3, #7
 8006050:	e9c8 5900 	strd	r5, r9, [r8]
 8006054:	942a      	str	r4, [sp, #168]	; 0xa8
 8006056:	9329      	str	r3, [sp, #164]	; 0xa4
 8006058:	f300 859a 	bgt.w	8006b90 <_vfprintf_r+0x16a4>
 800605c:	f108 0808 	add.w	r8, r8, #8
 8006060:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006062:	f1b9 0f00 	cmp.w	r9, #0
 8006066:	bfa8      	it	ge
 8006068:	eba6 0609 	subge.w	r6, r6, r9
 800606c:	2e00      	cmp	r6, #0
 800606e:	f300 8346 	bgt.w	80066fe <_vfprintf_r+0x1212>
 8006072:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8006076:	0579      	lsls	r1, r7, #21
 8006078:	44ab      	add	fp, r5
 800607a:	f100 84ce 	bmi.w	8006a1a <_vfprintf_r+0x152e>
 800607e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006082:	4293      	cmp	r3, r2
 8006084:	db02      	blt.n	800608c <_vfprintf_r+0xba0>
 8006086:	07fa      	lsls	r2, r7, #31
 8006088:	f140 83b8 	bpl.w	80067fc <_vfprintf_r+0x1310>
 800608c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800608e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006090:	4414      	add	r4, r2
 8006092:	e9c8 1200 	strd	r1, r2, [r8]
 8006096:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006098:	942a      	str	r4, [sp, #168]	; 0xa8
 800609a:	3201      	adds	r2, #1
 800609c:	2a07      	cmp	r2, #7
 800609e:	9229      	str	r2, [sp, #164]	; 0xa4
 80060a0:	f300 8583 	bgt.w	8006baa <_vfprintf_r+0x16be>
 80060a4:	f108 0808 	add.w	r8, r8, #8
 80060a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060aa:	18ae      	adds	r6, r5, r2
 80060ac:	eba6 060b 	sub.w	r6, r6, fp
 80060b0:	1ad5      	subs	r5, r2, r3
 80060b2:	42ae      	cmp	r6, r5
 80060b4:	bfa8      	it	ge
 80060b6:	462e      	movge	r6, r5
 80060b8:	2e00      	cmp	r6, #0
 80060ba:	dd0d      	ble.n	80060d8 <_vfprintf_r+0xbec>
 80060bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80060be:	f8c8 b000 	str.w	fp, [r8]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4434      	add	r4, r6
 80060c6:	2b07      	cmp	r3, #7
 80060c8:	f8c8 6004 	str.w	r6, [r8, #4]
 80060cc:	942a      	str	r4, [sp, #168]	; 0xa8
 80060ce:	9329      	str	r3, [sp, #164]	; 0xa4
 80060d0:	f300 85f1 	bgt.w	8006cb6 <_vfprintf_r+0x17ca>
 80060d4:	f108 0808 	add.w	r8, r8, #8
 80060d8:	2e00      	cmp	r6, #0
 80060da:	bfa8      	it	ge
 80060dc:	1bad      	subge	r5, r5, r6
 80060de:	2d00      	cmp	r5, #0
 80060e0:	f77f abcc 	ble.w	800587c <_vfprintf_r+0x390>
 80060e4:	2d10      	cmp	r5, #16
 80060e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80060e8:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 80062c8 <_vfprintf_r+0xddc>
 80060ec:	f340 82ae 	ble.w	800664c <_vfprintf_r+0x1160>
 80060f0:	4649      	mov	r1, r9
 80060f2:	4622      	mov	r2, r4
 80060f4:	46b9      	mov	r9, r7
 80060f6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80060fa:	9c07      	ldr	r4, [sp, #28]
 80060fc:	2610      	movs	r6, #16
 80060fe:	460f      	mov	r7, r1
 8006100:	e005      	b.n	800610e <_vfprintf_r+0xc22>
 8006102:	f108 0808 	add.w	r8, r8, #8
 8006106:	3d10      	subs	r5, #16
 8006108:	2d10      	cmp	r5, #16
 800610a:	f340 829b 	ble.w	8006644 <_vfprintf_r+0x1158>
 800610e:	3301      	adds	r3, #1
 8006110:	3210      	adds	r2, #16
 8006112:	2b07      	cmp	r3, #7
 8006114:	e9c8 7600 	strd	r7, r6, [r8]
 8006118:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 800611c:	ddf1      	ble.n	8006102 <_vfprintf_r+0xc16>
 800611e:	aa28      	add	r2, sp, #160	; 0xa0
 8006120:	4621      	mov	r1, r4
 8006122:	4658      	mov	r0, fp
 8006124:	f003 fb66 	bl	80097f4 <__sprint_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	f47f ab1f 	bne.w	800576c <_vfprintf_r+0x280>
 800612e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006132:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006136:	e7e6      	b.n	8006106 <_vfprintf_r+0xc1a>
 8006138:	07fe      	lsls	r6, r7, #31
 800613a:	f53f ae7d 	bmi.w	8005e38 <_vfprintf_r+0x94c>
 800613e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8006140:	f8c8 5000 	str.w	r5, [r8]
 8006144:	3601      	adds	r6, #1
 8006146:	3401      	adds	r4, #1
 8006148:	2301      	movs	r3, #1
 800614a:	2e07      	cmp	r6, #7
 800614c:	942a      	str	r4, [sp, #168]	; 0xa8
 800614e:	9629      	str	r6, [sp, #164]	; 0xa4
 8006150:	f8c8 3004 	str.w	r3, [r8, #4]
 8006154:	f77f aea3 	ble.w	8005e9e <_vfprintf_r+0x9b2>
 8006158:	9907      	ldr	r1, [sp, #28]
 800615a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615c:	aa28      	add	r2, sp, #160	; 0xa0
 800615e:	f003 fb49 	bl	80097f4 <__sprint_r>
 8006162:	2800      	cmp	r0, #0
 8006164:	f47f ab02 	bne.w	800576c <_vfprintf_r+0x280>
 8006168:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 800616c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006170:	e697      	b.n	8005ea2 <_vfprintf_r+0x9b6>
 8006172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006174:	1e5d      	subs	r5, r3, #1
 8006176:	2d00      	cmp	r5, #0
 8006178:	f77f ae93 	ble.w	8005ea2 <_vfprintf_r+0x9b6>
 800617c:	2d10      	cmp	r5, #16
 800617e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80062c8 <_vfprintf_r+0xddc>
 8006182:	f340 827f 	ble.w	8006684 <_vfprintf_r+0x1198>
 8006186:	4622      	mov	r2, r4
 8006188:	9708      	str	r7, [sp, #32]
 800618a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800618c:	9f07      	ldr	r7, [sp, #28]
 800618e:	f04f 0b10 	mov.w	fp, #16
 8006192:	e005      	b.n	80061a0 <_vfprintf_r+0xcb4>
 8006194:	f108 0808 	add.w	r8, r8, #8
 8006198:	3d10      	subs	r5, #16
 800619a:	2d10      	cmp	r5, #16
 800619c:	f340 8270 	ble.w	8006680 <_vfprintf_r+0x1194>
 80061a0:	3601      	adds	r6, #1
 80061a2:	3210      	adds	r2, #16
 80061a4:	2e07      	cmp	r6, #7
 80061a6:	e9c8 9b00 	strd	r9, fp, [r8]
 80061aa:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
 80061ae:	ddf1      	ble.n	8006194 <_vfprintf_r+0xca8>
 80061b0:	aa28      	add	r2, sp, #160	; 0xa0
 80061b2:	4639      	mov	r1, r7
 80061b4:	4620      	mov	r0, r4
 80061b6:	f003 fb1d 	bl	80097f4 <__sprint_r>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f47f aad6 	bne.w	800576c <_vfprintf_r+0x280>
 80061c0:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
 80061c4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80061c8:	e7e6      	b.n	8006198 <_vfprintf_r+0xcac>
 80061ca:	9907      	ldr	r1, [sp, #28]
 80061cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ce:	aa28      	add	r2, sp, #160	; 0xa0
 80061d0:	f003 fb10 	bl	80097f4 <__sprint_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f47f aac9 	bne.w	800576c <_vfprintf_r+0x280>
 80061da:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80061dc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80061e0:	f7ff bb3a 	b.w	8005858 <_vfprintf_r+0x36c>
 80061e4:	f017 0310 	ands.w	r3, r7, #16
 80061e8:	d172      	bne.n	80062d0 <_vfprintf_r+0xde4>
 80061ea:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 80061ee:	f000 82bd 	beq.w	800676c <_vfprintf_r+0x1280>
 80061f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f4:	f852 4b04 	ldr.w	r4, [r2], #4
 80061f8:	920e      	str	r2, [sp, #56]	; 0x38
 80061fa:	4699      	mov	r9, r3
 80061fc:	b2a4      	uxth	r4, r4
 80061fe:	e428      	b.n	8005a52 <_vfprintf_r+0x566>
 8006200:	f853 4b04 	ldr.w	r4, [r3], #4
 8006204:	930e      	str	r3, [sp, #56]	; 0x38
 8006206:	06fb      	lsls	r3, r7, #27
 8006208:	d456      	bmi.n	80062b8 <_vfprintf_r+0xdcc>
 800620a:	067d      	lsls	r5, r7, #25
 800620c:	d551      	bpl.n	80062b2 <_vfprintf_r+0xdc6>
 800620e:	f344 39c0 	sbfx	r9, r4, #15, #1
 8006212:	464b      	mov	r3, r9
 8006214:	b224      	sxth	r4, r4
 8006216:	f7ff bbc1 	b.w	800599c <_vfprintf_r+0x4b0>
 800621a:	f01b 0310 	ands.w	r3, fp, #16
 800621e:	f040 8136 	bne.w	800648e <_vfprintf_r+0xfa2>
 8006222:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 8006226:	f000 8292 	beq.w	800674e <_vfprintf_r+0x1262>
 800622a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800622c:	f852 4b04 	ldr.w	r4, [r2], #4
 8006230:	920e      	str	r2, [sp, #56]	; 0x38
 8006232:	4699      	mov	r9, r3
 8006234:	b2a4      	uxth	r4, r4
 8006236:	2301      	movs	r3, #1
 8006238:	e40e      	b.n	8005a58 <_vfprintf_r+0x56c>
 800623a:	232d      	movs	r3, #45	; 0x2d
 800623c:	4264      	negs	r4, r4
 800623e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006242:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 8006246:	46bb      	mov	fp, r7
 8006248:	2301      	movs	r3, #1
 800624a:	e408      	b.n	8005a5e <_vfprintf_r+0x572>
 800624c:	07f8      	lsls	r0, r7, #31
 800624e:	f57f ab15 	bpl.w	800587c <_vfprintf_r+0x390>
 8006252:	e525      	b.n	8005ca0 <_vfprintf_r+0x7b4>
 8006254:	f89a 6000 	ldrb.w	r6, [sl]
 8006258:	930e      	str	r3, [sp, #56]	; 0x38
 800625a:	f7ff b9b5 	b.w	80055c8 <_vfprintf_r+0xdc>
 800625e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006260:	4a1a      	ldr	r2, [pc, #104]	; (80062cc <_vfprintf_r+0xde0>)
 8006262:	f8c8 2000 	str.w	r2, [r8]
 8006266:	3301      	adds	r3, #1
 8006268:	3401      	adds	r4, #1
 800626a:	2201      	movs	r2, #1
 800626c:	2b07      	cmp	r3, #7
 800626e:	942a      	str	r4, [sp, #168]	; 0xa8
 8006270:	9329      	str	r3, [sp, #164]	; 0xa4
 8006272:	f8c8 2004 	str.w	r2, [r8, #4]
 8006276:	f300 8470 	bgt.w	8006b5a <_vfprintf_r+0x166e>
 800627a:	f108 0808 	add.w	r8, r8, #8
 800627e:	2900      	cmp	r1, #0
 8006280:	f040 821e 	bne.w	80066c0 <_vfprintf_r+0x11d4>
 8006284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006286:	f007 0301 	and.w	r3, r7, #1
 800628a:	4313      	orrs	r3, r2
 800628c:	f43f aaf6 	beq.w	800587c <_vfprintf_r+0x390>
 8006290:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006292:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006294:	18e2      	adds	r2, r4, r3
 8006296:	e9c8 1300 	strd	r1, r3, [r8]
 800629a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800629c:	922a      	str	r2, [sp, #168]	; 0xa8
 800629e:	3301      	adds	r3, #1
 80062a0:	2b07      	cmp	r3, #7
 80062a2:	9329      	str	r3, [sp, #164]	; 0xa4
 80062a4:	f300 8361 	bgt.w	800696a <_vfprintf_r+0x147e>
 80062a8:	f108 0808 	add.w	r8, r8, #8
 80062ac:	e219      	b.n	80066e2 <_vfprintf_r+0x11f6>
 80062ae:	ad54      	add	r5, sp, #336	; 0x150
 80062b0:	e4a9      	b.n	8005c06 <_vfprintf_r+0x71a>
 80062b2:	05b8      	lsls	r0, r7, #22
 80062b4:	f100 82b4 	bmi.w	8006820 <_vfprintf_r+0x1334>
 80062b8:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80062bc:	464b      	mov	r3, r9
 80062be:	f7ff bb6d 	b.w	800599c <_vfprintf_r+0x4b0>
 80062c2:	bf00      	nop
 80062c4:	0800b164 	.word	0x0800b164
 80062c8:	0800b174 	.word	0x0800b174
 80062cc:	0800b160 	.word	0x0800b160
 80062d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062d2:	f853 4b04 	ldr.w	r4, [r3], #4
 80062d6:	930e      	str	r3, [sp, #56]	; 0x38
 80062d8:	f7ff bbbb 	b.w	8005a52 <_vfprintf_r+0x566>
 80062dc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	f7fa fd42 	bl	8000d6c <__aeabi_dcmpun>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f040 85a0 	bne.w	8006e2e <_vfprintf_r+0x1942>
 80062ee:	2e61      	cmp	r6, #97	; 0x61
 80062f0:	f000 8550 	beq.w	8006d94 <_vfprintf_r+0x18a8>
 80062f4:	2e41      	cmp	r6, #65	; 0x41
 80062f6:	f000 8299 	beq.w	800682c <_vfprintf_r+0x1340>
 80062fa:	9b08      	ldr	r3, [sp, #32]
 80062fc:	3301      	adds	r3, #1
 80062fe:	f026 0320 	bic.w	r3, r6, #32
 8006302:	9306      	str	r3, [sp, #24]
 8006304:	f000 858f 	beq.w	8006e26 <_vfprintf_r+0x193a>
 8006308:	2b47      	cmp	r3, #71	; 0x47
 800630a:	f000 8579 	beq.w	8006e00 <_vfprintf_r+0x1914>
 800630e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006312:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8006316:	930f      	str	r3, [sp, #60]	; 0x3c
 8006318:	4613      	mov	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	f2c0 85ed 	blt.w	8006efa <_vfprintf_r+0x1a0e>
 8006320:	930c      	str	r3, [sp, #48]	; 0x30
 8006322:	2300      	movs	r3, #0
 8006324:	931d      	str	r3, [sp, #116]	; 0x74
 8006326:	468b      	mov	fp, r1
 8006328:	930d      	str	r3, [sp, #52]	; 0x34
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	2b46      	cmp	r3, #70	; 0x46
 800632e:	f000 844a 	beq.w	8006bc6 <_vfprintf_r+0x16da>
 8006332:	2b45      	cmp	r3, #69	; 0x45
 8006334:	f000 854f 	beq.w	8006dd6 <_vfprintf_r+0x18ea>
 8006338:	9908      	ldr	r1, [sp, #32]
 800633a:	9101      	str	r1, [sp, #4]
 800633c:	a926      	add	r1, sp, #152	; 0x98
 800633e:	9104      	str	r1, [sp, #16]
 8006340:	a923      	add	r1, sp, #140	; 0x8c
 8006342:	9103      	str	r1, [sp, #12]
 8006344:	a922      	add	r1, sp, #136	; 0x88
 8006346:	9102      	str	r1, [sp, #8]
 8006348:	2102      	movs	r1, #2
 800634a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800634c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634e:	9100      	str	r1, [sp, #0]
 8006350:	465a      	mov	r2, fp
 8006352:	f001 f80d 	bl	8007370 <_dtoa_r>
 8006356:	9b06      	ldr	r3, [sp, #24]
 8006358:	2b47      	cmp	r3, #71	; 0x47
 800635a:	4605      	mov	r5, r0
 800635c:	f040 861c 	bne.w	8006f98 <_vfprintf_r+0x1aac>
 8006360:	f017 0f01 	tst.w	r7, #1
 8006364:	46b9      	mov	r9, r7
 8006366:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006368:	f040 84d9 	bne.w	8006d1e <_vfprintf_r+0x1832>
 800636c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800636e:	1b5b      	subs	r3, r3, r5
 8006370:	9312      	str	r3, [sp, #72]	; 0x48
 8006372:	9b06      	ldr	r3, [sp, #24]
 8006374:	2b47      	cmp	r3, #71	; 0x47
 8006376:	f000 8318 	beq.w	80069aa <_vfprintf_r+0x14be>
 800637a:	9b06      	ldr	r3, [sp, #24]
 800637c:	2b46      	cmp	r3, #70	; 0x46
 800637e:	f000 845f 	beq.w	8006c40 <_vfprintf_r+0x1754>
 8006382:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006384:	9310      	str	r3, [sp, #64]	; 0x40
 8006386:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006388:	9a06      	ldr	r2, [sp, #24]
 800638a:	3b01      	subs	r3, #1
 800638c:	2a41      	cmp	r2, #65	; 0x41
 800638e:	9322      	str	r3, [sp, #136]	; 0x88
 8006390:	f000 85aa 	beq.w	8006ee8 <_vfprintf_r+0x19fc>
 8006394:	b2f2      	uxtb	r2, r6
 8006396:	2100      	movs	r1, #0
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfb8      	it	lt
 800639c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800639e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 80063a2:	bfba      	itte	lt
 80063a4:	f1c3 0301 	rsblt	r3, r3, #1
 80063a8:	222d      	movlt	r2, #45	; 0x2d
 80063aa:	222b      	movge	r2, #43	; 0x2b
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 80063b2:	f340 8563 	ble.w	8006e7c <_vfprintf_r+0x1990>
 80063b6:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
 80063ba:	4fbd      	ldr	r7, [pc, #756]	; (80066b0 <_vfprintf_r+0x11c4>)
 80063bc:	4622      	mov	r2, r4
 80063be:	4610      	mov	r0, r2
 80063c0:	fb87 2103 	smull	r2, r1, r7, r3
 80063c4:	17da      	asrs	r2, r3, #31
 80063c6:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80063ca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80063ce:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 80063d2:	3130      	adds	r1, #48	; 0x30
 80063d4:	f800 1c01 	strb.w	r1, [r0, #-1]
 80063d8:	4619      	mov	r1, r3
 80063da:	2963      	cmp	r1, #99	; 0x63
 80063dc:	4613      	mov	r3, r2
 80063de:	f100 32ff 	add.w	r2, r0, #4294967295
 80063e2:	dcec      	bgt.n	80063be <_vfprintf_r+0xed2>
 80063e4:	3330      	adds	r3, #48	; 0x30
 80063e6:	b2d9      	uxtb	r1, r3
 80063e8:	1e83      	subs	r3, r0, #2
 80063ea:	429c      	cmp	r4, r3
 80063ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063f0:	f240 85ce 	bls.w	8006f90 <_vfprintf_r+0x1aa4>
 80063f4:	4613      	mov	r3, r2
 80063f6:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80063fa:	e001      	b.n	8006400 <_vfprintf_r+0xf14>
 80063fc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006400:	f802 1b01 	strb.w	r1, [r2], #1
 8006404:	429c      	cmp	r4, r3
 8006406:	d1f9      	bne.n	80063fc <_vfprintf_r+0xf10>
 8006408:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 800640c:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8006410:	1a1b      	subs	r3, r3, r0
 8006412:	4413      	add	r3, r2
 8006414:	aa24      	add	r2, sp, #144	; 0x90
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	931a      	str	r3, [sp, #104]	; 0x68
 800641a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800641c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800641e:	2b01      	cmp	r3, #1
 8006420:	441a      	add	r2, r3
 8006422:	920c      	str	r2, [sp, #48]	; 0x30
 8006424:	f340 8572 	ble.w	8006f0c <_vfprintf_r+0x1a20>
 8006428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800642a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800642c:	4413      	add	r3, r2
 800642e:	930c      	str	r3, [sp, #48]	; 0x30
 8006430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006432:	2300      	movs	r3, #0
 8006434:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
 8006438:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800643c:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8006440:	930f      	str	r3, [sp, #60]	; 0x3c
 8006442:	9206      	str	r2, [sp, #24]
 8006444:	9313      	str	r3, [sp, #76]	; 0x4c
 8006446:	9310      	str	r3, [sp, #64]	; 0x40
 8006448:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 82de 	bne.w	8006a0c <_vfprintf_r+0x1520>
 8006450:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8006454:	9308      	str	r3, [sp, #32]
 8006456:	f7ff ba77 	b.w	8005948 <_vfprintf_r+0x45c>
 800645a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800645c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800645e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006462:	930e      	str	r3, [sp, #56]	; 0x38
 8006464:	17c2      	asrs	r2, r0, #31
 8006466:	e9c1 0200 	strd	r0, r2, [r1]
 800646a:	4655      	mov	r5, sl
 800646c:	f7ff ba24 	b.w	80058b8 <_vfprintf_r+0x3cc>
 8006470:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006472:	2b00      	cmp	r3, #0
 8006474:	f43f a92f 	beq.w	80056d6 <_vfprintf_r+0x1ea>
 8006478:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f43f a92a 	beq.w	80056d6 <_vfprintf_r+0x1ea>
 8006482:	f89a 6000 	ldrb.w	r6, [sl]
 8006486:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800648a:	f7ff b89d 	b.w	80055c8 <_vfprintf_r+0xdc>
 800648e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006490:	f853 4b04 	ldr.w	r4, [r3], #4
 8006494:	930e      	str	r3, [sp, #56]	; 0x38
 8006496:	2301      	movs	r3, #1
 8006498:	f7ff bade 	b.w	8005a58 <_vfprintf_r+0x56c>
 800649c:	4b85      	ldr	r3, [pc, #532]	; (80066b4 <_vfprintf_r+0x11c8>)
 800649e:	9318      	str	r3, [sp, #96]	; 0x60
 80064a0:	f017 0920 	ands.w	r9, r7, #32
 80064a4:	d049      	beq.n	800653a <_vfprintf_r+0x104e>
 80064a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064a8:	3307      	adds	r3, #7
 80064aa:	f023 0307 	bic.w	r3, r3, #7
 80064ae:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80064b2:	f853 4b08 	ldr.w	r4, [r3], #8
 80064b6:	930e      	str	r3, [sp, #56]	; 0x38
 80064b8:	07f8      	lsls	r0, r7, #31
 80064ba:	d509      	bpl.n	80064d0 <_vfprintf_r+0xfe4>
 80064bc:	ea54 0309 	orrs.w	r3, r4, r9
 80064c0:	d006      	beq.n	80064d0 <_vfprintf_r+0xfe4>
 80064c2:	2330      	movs	r3, #48	; 0x30
 80064c4:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
 80064c8:	f047 0702 	orr.w	r7, r7, #2
 80064cc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80064d0:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
 80064d4:	2302      	movs	r3, #2
 80064d6:	f7ff babf 	b.w	8005a58 <_vfprintf_r+0x56c>
 80064da:	46bb      	mov	fp, r7
 80064dc:	f7ff bb23 	b.w	8005b26 <_vfprintf_r+0x63a>
 80064e0:	4b75      	ldr	r3, [pc, #468]	; (80066b8 <_vfprintf_r+0x11cc>)
 80064e2:	9318      	str	r3, [sp, #96]	; 0x60
 80064e4:	e7dc      	b.n	80064a0 <_vfprintf_r+0xfb4>
 80064e6:	9907      	ldr	r1, [sp, #28]
 80064e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ea:	aa28      	add	r2, sp, #160	; 0xa0
 80064ec:	f003 f982 	bl	80097f4 <__sprint_r>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f47f a93b 	bne.w	800576c <_vfprintf_r+0x280>
 80064f6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80064f8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80064fc:	f7ff b9a4 	b.w	8005848 <_vfprintf_r+0x35c>
 8006500:	9907      	ldr	r1, [sp, #28]
 8006502:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006504:	aa28      	add	r2, sp, #160	; 0xa0
 8006506:	f003 f975 	bl	80097f4 <__sprint_r>
 800650a:	2800      	cmp	r0, #0
 800650c:	f47f a92e 	bne.w	800576c <_vfprintf_r+0x280>
 8006510:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006512:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006516:	f7ff bbd1 	b.w	8005cbc <_vfprintf_r+0x7d0>
 800651a:	2b06      	cmp	r3, #6
 800651c:	4629      	mov	r1, r5
 800651e:	bf28      	it	cs
 8006520:	2306      	movcs	r3, #6
 8006522:	9508      	str	r5, [sp, #32]
 8006524:	950d      	str	r5, [sp, #52]	; 0x34
 8006526:	462a      	mov	r2, r5
 8006528:	9306      	str	r3, [sp, #24]
 800652a:	4d64      	ldr	r5, [pc, #400]	; (80066bc <_vfprintf_r+0x11d0>)
 800652c:	940e      	str	r4, [sp, #56]	; 0x38
 800652e:	930c      	str	r3, [sp, #48]	; 0x30
 8006530:	910f      	str	r1, [sp, #60]	; 0x3c
 8006532:	9113      	str	r1, [sp, #76]	; 0x4c
 8006534:	9110      	str	r1, [sp, #64]	; 0x40
 8006536:	f7ff ba07 	b.w	8005948 <_vfprintf_r+0x45c>
 800653a:	f017 0310 	ands.w	r3, r7, #16
 800653e:	d069      	beq.n	8006614 <_vfprintf_r+0x1128>
 8006540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006542:	f853 4b04 	ldr.w	r4, [r3], #4
 8006546:	930e      	str	r3, [sp, #56]	; 0x38
 8006548:	e7b6      	b.n	80064b8 <_vfprintf_r+0xfcc>
 800654a:	9907      	ldr	r1, [sp, #28]
 800654c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800654e:	aa28      	add	r2, sp, #160	; 0xa0
 8006550:	f003 f950 	bl	80097f4 <__sprint_r>
 8006554:	2800      	cmp	r0, #0
 8006556:	f47f a909 	bne.w	800576c <_vfprintf_r+0x280>
 800655a:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 800655e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006562:	e478      	b.n	8005e56 <_vfprintf_r+0x96a>
 8006564:	9907      	ldr	r1, [sp, #28]
 8006566:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006568:	aa28      	add	r2, sp, #160	; 0xa0
 800656a:	f003 f943 	bl	80097f4 <__sprint_r>
 800656e:	2800      	cmp	r0, #0
 8006570:	f47f a8fc 	bne.w	800576c <_vfprintf_r+0x280>
 8006574:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 8006578:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800657c:	e478      	b.n	8005e70 <_vfprintf_r+0x984>
 800657e:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
 8006582:	2200      	movs	r2, #0
 8006584:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
 8006588:	9606      	str	r6, [sp, #24]
 800658a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800658e:	af54      	add	r7, sp, #336	; 0x150
 8006590:	4616      	mov	r6, r2
 8006592:	469a      	mov	sl, r3
 8006594:	e00c      	b.n	80065b0 <_vfprintf_r+0x10c4>
 8006596:	2300      	movs	r3, #0
 8006598:	4620      	mov	r0, r4
 800659a:	4649      	mov	r1, r9
 800659c:	220a      	movs	r2, #10
 800659e:	f7fa fc23 	bl	8000de8 <__aeabi_uldivmod>
 80065a2:	2c0a      	cmp	r4, #10
 80065a4:	f179 0300 	sbcs.w	r3, r9, #0
 80065a8:	d31b      	bcc.n	80065e2 <_vfprintf_r+0x10f6>
 80065aa:	4604      	mov	r4, r0
 80065ac:	4689      	mov	r9, r1
 80065ae:	462f      	mov	r7, r5
 80065b0:	4620      	mov	r0, r4
 80065b2:	220a      	movs	r2, #10
 80065b4:	2300      	movs	r3, #0
 80065b6:	4649      	mov	r1, r9
 80065b8:	f7fa fc16 	bl	8000de8 <__aeabi_uldivmod>
 80065bc:	3230      	adds	r2, #48	; 0x30
 80065be:	1e7d      	subs	r5, r7, #1
 80065c0:	3601      	adds	r6, #1
 80065c2:	f807 2c01 	strb.w	r2, [r7, #-1]
 80065c6:	f1ba 0f00 	cmp.w	sl, #0
 80065ca:	d0e4      	beq.n	8006596 <_vfprintf_r+0x10aa>
 80065cc:	f898 3000 	ldrb.w	r3, [r8]
 80065d0:	429e      	cmp	r6, r3
 80065d2:	d1e0      	bne.n	8006596 <_vfprintf_r+0x10aa>
 80065d4:	2eff      	cmp	r6, #255	; 0xff
 80065d6:	d0de      	beq.n	8006596 <_vfprintf_r+0x10aa>
 80065d8:	2c0a      	cmp	r4, #10
 80065da:	f179 0300 	sbcs.w	r3, r9, #0
 80065de:	f080 80f4 	bcs.w	80067ca <_vfprintf_r+0x12de>
 80065e2:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 80065e6:	9612      	str	r6, [sp, #72]	; 0x48
 80065e8:	e9dd a80c 	ldrd	sl, r8, [sp, #48]	; 0x30
 80065ec:	9e06      	ldr	r6, [sp, #24]
 80065ee:	f7ff bb06 	b.w	8005bfe <_vfprintf_r+0x712>
 80065f2:	9907      	ldr	r1, [sp, #28]
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	931d      	str	r3, [sp, #116]	; 0x74
 80065f8:	aa28      	add	r2, sp, #160	; 0xa0
 80065fa:	f003 f8fb 	bl	80097f4 <__sprint_r>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f47f a8b4 	bne.w	800576c <_vfprintf_r+0x280>
 8006604:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8006608:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800660a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800660c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006610:	f7ff b8f1 	b.w	80057f6 <_vfprintf_r+0x30a>
 8006614:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8006618:	f000 80b6 	beq.w	8006788 <_vfprintf_r+0x129c>
 800661c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661e:	f852 4b04 	ldr.w	r4, [r2], #4
 8006622:	920e      	str	r2, [sp, #56]	; 0x38
 8006624:	4699      	mov	r9, r3
 8006626:	b2a4      	uxth	r4, r4
 8006628:	e746      	b.n	80064b8 <_vfprintf_r+0xfcc>
 800662a:	9907      	ldr	r1, [sp, #28]
 800662c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662e:	aa28      	add	r2, sp, #160	; 0xa0
 8006630:	f003 f8e0 	bl	80097f4 <__sprint_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	f47f a899 	bne.w	800576c <_vfprintf_r+0x280>
 800663a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800663c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006640:	f7ff bb29 	b.w	8005c96 <_vfprintf_r+0x7aa>
 8006644:	4614      	mov	r4, r2
 8006646:	463a      	mov	r2, r7
 8006648:	464f      	mov	r7, r9
 800664a:	4691      	mov	r9, r2
 800664c:	3301      	adds	r3, #1
 800664e:	442c      	add	r4, r5
 8006650:	2b07      	cmp	r3, #7
 8006652:	f8c8 9000 	str.w	r9, [r8]
 8006656:	f8c8 5004 	str.w	r5, [r8, #4]
 800665a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 800665e:	f77f a90b 	ble.w	8005878 <_vfprintf_r+0x38c>
 8006662:	e42b      	b.n	8005ebc <_vfprintf_r+0x9d0>
 8006664:	2b01      	cmp	r3, #1
 8006666:	46bb      	mov	fp, r7
 8006668:	f47f aab8 	bne.w	8005bdc <_vfprintf_r+0x6f0>
 800666c:	e47b      	b.n	8005f66 <_vfprintf_r+0xa7a>
 800666e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006672:	f853 2b04 	ldr.w	r2, [r3], #4
 8006676:	4655      	mov	r5, sl
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	930e      	str	r3, [sp, #56]	; 0x38
 800667c:	f7ff b91c 	b.w	80058b8 <_vfprintf_r+0x3cc>
 8006680:	9f08      	ldr	r7, [sp, #32]
 8006682:	4614      	mov	r4, r2
 8006684:	3601      	adds	r6, #1
 8006686:	442c      	add	r4, r5
 8006688:	2e07      	cmp	r6, #7
 800668a:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 800668e:	f8c8 9000 	str.w	r9, [r8]
 8006692:	f8c8 5004 	str.w	r5, [r8, #4]
 8006696:	f77f ac02 	ble.w	8005e9e <_vfprintf_r+0x9b2>
 800669a:	e55d      	b.n	8006158 <_vfprintf_r+0xc6c>
 800669c:	4628      	mov	r0, r5
 800669e:	f8cd 9020 	str.w	r9, [sp, #32]
 80066a2:	940e      	str	r4, [sp, #56]	; 0x38
 80066a4:	f7f9 fe4c 	bl	8000340 <strlen>
 80066a8:	4603      	mov	r3, r0
 80066aa:	900c      	str	r0, [sp, #48]	; 0x30
 80066ac:	f7ff b9b4 	b.w	8005a18 <_vfprintf_r+0x52c>
 80066b0:	66666667 	.word	0x66666667
 80066b4:	0800b130 	.word	0x0800b130
 80066b8:	0800b144 	.word	0x0800b144
 80066bc:	0800b158 	.word	0x0800b158
 80066c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80066c4:	18e2      	adds	r2, r4, r3
 80066c6:	e9c8 0300 	strd	r0, r3, [r8]
 80066ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80066cc:	922a      	str	r2, [sp, #168]	; 0xa8
 80066ce:	3301      	adds	r3, #1
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	9329      	str	r3, [sp, #164]	; 0xa4
 80066d4:	f300 8149 	bgt.w	800696a <_vfprintf_r+0x147e>
 80066d8:	f108 0808 	add.w	r8, r8, #8
 80066dc:	2900      	cmp	r1, #0
 80066de:	f2c0 82fa 	blt.w	8006cd6 <_vfprintf_r+0x17ea>
 80066e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80066e4:	f8c8 5000 	str.w	r5, [r8]
 80066e8:	3301      	adds	r3, #1
 80066ea:	188c      	adds	r4, r1, r2
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80066f2:	f8c8 1004 	str.w	r1, [r8, #4]
 80066f6:	f77f a8bf 	ble.w	8005878 <_vfprintf_r+0x38c>
 80066fa:	f7ff bbdf 	b.w	8005ebc <_vfprintf_r+0x9d0>
 80066fe:	2e10      	cmp	r6, #16
 8006700:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006702:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80069c4 <_vfprintf_r+0x14d8>
 8006706:	dd52      	ble.n	80067ae <_vfprintf_r+0x12c2>
 8006708:	4648      	mov	r0, r9
 800670a:	4621      	mov	r1, r4
 800670c:	4642      	mov	r2, r8
 800670e:	46b9      	mov	r9, r7
 8006710:	46a8      	mov	r8, r5
 8006712:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006714:	9d07      	ldr	r5, [sp, #28]
 8006716:	f04f 0b10 	mov.w	fp, #16
 800671a:	4607      	mov	r7, r0
 800671c:	e003      	b.n	8006726 <_vfprintf_r+0x123a>
 800671e:	3208      	adds	r2, #8
 8006720:	3e10      	subs	r6, #16
 8006722:	2e10      	cmp	r6, #16
 8006724:	dd3d      	ble.n	80067a2 <_vfprintf_r+0x12b6>
 8006726:	3301      	adds	r3, #1
 8006728:	3110      	adds	r1, #16
 800672a:	2b07      	cmp	r3, #7
 800672c:	e9c2 7b00 	strd	r7, fp, [r2]
 8006730:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
 8006734:	ddf3      	ble.n	800671e <_vfprintf_r+0x1232>
 8006736:	aa28      	add	r2, sp, #160	; 0xa0
 8006738:	4629      	mov	r1, r5
 800673a:	4620      	mov	r0, r4
 800673c:	f003 f85a 	bl	80097f4 <__sprint_r>
 8006740:	2800      	cmp	r0, #0
 8006742:	f47f a813 	bne.w	800576c <_vfprintf_r+0x280>
 8006746:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
 800674a:	aa2b      	add	r2, sp, #172	; 0xac
 800674c:	e7e8      	b.n	8006720 <_vfprintf_r+0x1234>
 800674e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006750:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8006754:	bf14      	ite	ne
 8006756:	f853 4b04 	ldrne.w	r4, [r3], #4
 800675a:	f853 4b04 	ldreq.w	r4, [r3], #4
 800675e:	930e      	str	r3, [sp, #56]	; 0x38
 8006760:	bf1c      	itt	ne
 8006762:	4691      	movne	r9, r2
 8006764:	b2e4      	uxtbne	r4, r4
 8006766:	2301      	movs	r3, #1
 8006768:	f7ff b976 	b.w	8005a58 <_vfprintf_r+0x56c>
 800676c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
 8006772:	bf14      	ite	ne
 8006774:	f853 4b04 	ldrne.w	r4, [r3], #4
 8006778:	f853 4b04 	ldreq.w	r4, [r3], #4
 800677c:	930e      	str	r3, [sp, #56]	; 0x38
 800677e:	bf1c      	itt	ne
 8006780:	4691      	movne	r9, r2
 8006782:	b2e4      	uxtbne	r4, r4
 8006784:	f7ff b965 	b.w	8005a52 <_vfprintf_r+0x566>
 8006788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800678a:	f417 7900 	ands.w	r9, r7, #512	; 0x200
 800678e:	bf14      	ite	ne
 8006790:	f853 4b04 	ldrne.w	r4, [r3], #4
 8006794:	f853 4b04 	ldreq.w	r4, [r3], #4
 8006798:	930e      	str	r3, [sp, #56]	; 0x38
 800679a:	bf1c      	itt	ne
 800679c:	4691      	movne	r9, r2
 800679e:	b2e4      	uxtbne	r4, r4
 80067a0:	e68a      	b.n	80064b8 <_vfprintf_r+0xfcc>
 80067a2:	4645      	mov	r5, r8
 80067a4:	4690      	mov	r8, r2
 80067a6:	463a      	mov	r2, r7
 80067a8:	460c      	mov	r4, r1
 80067aa:	464f      	mov	r7, r9
 80067ac:	4691      	mov	r9, r2
 80067ae:	3301      	adds	r3, #1
 80067b0:	4434      	add	r4, r6
 80067b2:	2b07      	cmp	r3, #7
 80067b4:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80067b8:	f8c8 9000 	str.w	r9, [r8]
 80067bc:	f8c8 6004 	str.w	r6, [r8, #4]
 80067c0:	f300 80e6 	bgt.w	8006990 <_vfprintf_r+0x14a4>
 80067c4:	f108 0808 	add.w	r8, r8, #8
 80067c8:	e453      	b.n	8006072 <_vfprintf_r+0xb86>
 80067ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80067cc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80067ce:	1aed      	subs	r5, r5, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	4628      	mov	r0, r5
 80067d4:	f002 ffa0 	bl	8009718 <strncpy>
 80067d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80067dc:	b10b      	cbz	r3, 80067e2 <_vfprintf_r+0x12f6>
 80067de:	f108 0801 	add.w	r8, r8, #1
 80067e2:	4620      	mov	r0, r4
 80067e4:	4649      	mov	r1, r9
 80067e6:	220a      	movs	r2, #10
 80067e8:	2300      	movs	r3, #0
 80067ea:	2600      	movs	r6, #0
 80067ec:	f7fa fafc 	bl	8000de8 <__aeabi_uldivmod>
 80067f0:	e6db      	b.n	80065aa <_vfprintf_r+0x10be>
 80067f2:	222d      	movs	r2, #45	; 0x2d
 80067f4:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 80067f8:	f7ff b896 	b.w	8005928 <_vfprintf_r+0x43c>
 80067fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067fe:	18ae      	adds	r6, r5, r2
 8006800:	eba6 060b 	sub.w	r6, r6, fp
 8006804:	1ad5      	subs	r5, r2, r3
 8006806:	42ae      	cmp	r6, r5
 8006808:	bfa8      	it	ge
 800680a:	462e      	movge	r6, r5
 800680c:	e464      	b.n	80060d8 <_vfprintf_r+0xbec>
 800680e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006812:	f853 2b04 	ldr.w	r2, [r3], #4
 8006816:	930e      	str	r3, [sp, #56]	; 0x38
 8006818:	8011      	strh	r1, [r2, #0]
 800681a:	4655      	mov	r5, sl
 800681c:	f7ff b84c 	b.w	80058b8 <_vfprintf_r+0x3cc>
 8006820:	f344 19c0 	sbfx	r9, r4, #7, #1
 8006824:	464b      	mov	r3, r9
 8006826:	b264      	sxtb	r4, r4
 8006828:	f7ff b8b8 	b.w	800599c <_vfprintf_r+0x4b0>
 800682c:	2330      	movs	r3, #48	; 0x30
 800682e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8006832:	2358      	movs	r3, #88	; 0x58
 8006834:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8006838:	9b08      	ldr	r3, [sp, #32]
 800683a:	2b63      	cmp	r3, #99	; 0x63
 800683c:	f047 0402 	orr.w	r4, r7, #2
 8006840:	f300 829b 	bgt.w	8006d7a <_vfprintf_r+0x188e>
 8006844:	2300      	movs	r3, #0
 8006846:	930d      	str	r3, [sp, #52]	; 0x34
 8006848:	ad3b      	add	r5, sp, #236	; 0xec
 800684a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800684e:	f447 7381 	orr.w	r3, r7, #258	; 0x102
 8006852:	930f      	str	r3, [sp, #60]	; 0x3c
 8006854:	4613      	mov	r3, r2
 8006856:	2b00      	cmp	r3, #0
 8006858:	4627      	mov	r7, r4
 800685a:	f2c0 8220 	blt.w	8006c9e <_vfprintf_r+0x17b2>
 800685e:	930c      	str	r3, [sp, #48]	; 0x30
 8006860:	f026 0320 	bic.w	r3, r6, #32
 8006864:	9306      	str	r3, [sp, #24]
 8006866:	2300      	movs	r3, #0
 8006868:	468b      	mov	fp, r1
 800686a:	931d      	str	r3, [sp, #116]	; 0x74
 800686c:	2e61      	cmp	r6, #97	; 0x61
 800686e:	f000 82ed 	beq.w	8006e4c <_vfprintf_r+0x1960>
 8006872:	2e41      	cmp	r6, #65	; 0x41
 8006874:	f47f ad59 	bne.w	800632a <_vfprintf_r+0xe3e>
 8006878:	aa22      	add	r2, sp, #136	; 0x88
 800687a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800687c:	4658      	mov	r0, fp
 800687e:	f002 ff13 	bl	80096a8 <frexp>
 8006882:	2200      	movs	r2, #0
 8006884:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006888:	f7f9 ffd6 	bl	8000838 <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	f7fa fa36 	bl	8000d08 <__aeabi_dcmpeq>
 800689c:	b108      	cbz	r0, 80068a2 <_vfprintf_r+0x13b6>
 800689e:	2301      	movs	r3, #1
 80068a0:	9322      	str	r3, [sp, #136]	; 0x88
 80068a2:	4b49      	ldr	r3, [pc, #292]	; (80069c8 <_vfprintf_r+0x14dc>)
 80068a4:	930c      	str	r3, [sp, #48]	; 0x30
 80068a6:	9b08      	ldr	r3, [sp, #32]
 80068a8:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
 80068ac:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
 80068b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068b4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80068b8:	f103 39ff 	add.w	r9, r3, #4294967295
 80068bc:	46ab      	mov	fp, r5
 80068be:	9510      	str	r5, [sp, #64]	; 0x40
 80068c0:	e006      	b.n	80068d0 <_vfprintf_r+0x13e4>
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80068ca:	f7fa fa1d 	bl	8000d08 <__aeabi_dcmpeq>
 80068ce:	b9e8      	cbnz	r0, 800690c <_vfprintf_r+0x1420>
 80068d0:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <_vfprintf_r+0x14e0>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	4630      	mov	r0, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	f7f9 ffae 	bl	8000838 <__aeabi_dmul>
 80068dc:	460f      	mov	r7, r1
 80068de:	4606      	mov	r6, r0
 80068e0:	f7fa fa5a 	bl	8000d98 <__aeabi_d2iz>
 80068e4:	4604      	mov	r4, r0
 80068e6:	f7f9 ff3d 	bl	8000764 <__aeabi_i2d>
 80068ea:	460b      	mov	r3, r1
 80068ec:	4602      	mov	r2, r0
 80068ee:	4639      	mov	r1, r7
 80068f0:	4630      	mov	r0, r6
 80068f2:	f7f9 fde9 	bl	80004c8 <__aeabi_dsub>
 80068f6:	f81a 3004 	ldrb.w	r3, [sl, r4]
 80068fa:	f1b9 3fff 	cmp.w	r9, #4294967295
 80068fe:	46d8      	mov	r8, fp
 8006900:	464d      	mov	r5, r9
 8006902:	f80b 3b01 	strb.w	r3, [fp], #1
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	d1da      	bne.n	80068c2 <_vfprintf_r+0x13d6>
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	4b2f      	ldr	r3, [pc, #188]	; (80069d0 <_vfprintf_r+0x14e4>)
 8006912:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8006916:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006918:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800691c:	2200      	movs	r2, #0
 800691e:	46a9      	mov	r9, r5
 8006920:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8006924:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006926:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8006928:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800692c:	f7fa fa14 	bl	8000d58 <__aeabi_dcmpgt>
 8006930:	2800      	cmp	r0, #0
 8006932:	f040 8234 	bne.w	8006d9e <_vfprintf_r+0x18b2>
 8006936:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800693a:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <_vfprintf_r+0x14e4>)
 800693c:	2200      	movs	r2, #0
 800693e:	f7fa f9e3 	bl	8000d08 <__aeabi_dcmpeq>
 8006942:	b110      	cbz	r0, 800694a <_vfprintf_r+0x145e>
 8006944:	07e1      	lsls	r1, r4, #31
 8006946:	f100 822a 	bmi.w	8006d9e <_vfprintf_r+0x18b2>
 800694a:	464b      	mov	r3, r9
 800694c:	2b00      	cmp	r3, #0
 800694e:	db06      	blt.n	800695e <_vfprintf_r+0x1472>
 8006950:	3301      	adds	r3, #1
 8006952:	445b      	add	r3, fp
 8006954:	2230      	movs	r2, #48	; 0x30
 8006956:	f80b 2b01 	strb.w	r2, [fp], #1
 800695a:	455b      	cmp	r3, fp
 800695c:	d1fb      	bne.n	8006956 <_vfprintf_r+0x146a>
 800695e:	ebab 0305 	sub.w	r3, fp, r5
 8006962:	46b9      	mov	r9, r7
 8006964:	9312      	str	r3, [sp, #72]	; 0x48
 8006966:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006968:	e503      	b.n	8006372 <_vfprintf_r+0xe86>
 800696a:	9907      	ldr	r1, [sp, #28]
 800696c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800696e:	aa28      	add	r2, sp, #160	; 0xa0
 8006970:	f002 ff40 	bl	80097f4 <__sprint_r>
 8006974:	2800      	cmp	r0, #0
 8006976:	f47e aef9 	bne.w	800576c <_vfprintf_r+0x280>
 800697a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 800697e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006980:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006984:	e6aa      	b.n	80066dc <_vfprintf_r+0x11f0>
 8006986:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8006988:	f7fe f91e 	bl	8004bc8 <__retarget_lock_release_recursive>
 800698c:	f7fe bec0 	b.w	8005710 <_vfprintf_r+0x224>
 8006990:	9907      	ldr	r1, [sp, #28]
 8006992:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006994:	aa28      	add	r2, sp, #160	; 0xa0
 8006996:	f002 ff2d 	bl	80097f4 <__sprint_r>
 800699a:	2800      	cmp	r0, #0
 800699c:	f47e aee6 	bne.w	800576c <_vfprintf_r+0x280>
 80069a0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80069a2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80069a6:	f7ff bb64 	b.w	8006072 <_vfprintf_r+0xb86>
 80069aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ac:	9310      	str	r3, [sp, #64]	; 0x40
 80069ae:	1cda      	adds	r2, r3, #3
 80069b0:	db02      	blt.n	80069b8 <_vfprintf_r+0x14cc>
 80069b2:	9a08      	ldr	r2, [sp, #32]
 80069b4:	4293      	cmp	r3, r2
 80069b6:	dd0d      	ble.n	80069d4 <_vfprintf_r+0x14e8>
 80069b8:	3e02      	subs	r6, #2
 80069ba:	f026 0320 	bic.w	r3, r6, #32
 80069be:	9306      	str	r3, [sp, #24]
 80069c0:	e4e1      	b.n	8006386 <_vfprintf_r+0xe9a>
 80069c2:	bf00      	nop
 80069c4:	0800b174 	.word	0x0800b174
 80069c8:	0800b144 	.word	0x0800b144
 80069cc:	40300000 	.word	0x40300000
 80069d0:	3fe00000 	.word	0x3fe00000
 80069d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069d8:	4293      	cmp	r3, r2
 80069da:	f2c0 8156 	blt.w	8006c8a <_vfprintf_r+0x179e>
 80069de:	f019 0f01 	tst.w	r9, #1
 80069e2:	f000 8287 	beq.w	8006ef4 <_vfprintf_r+0x1a08>
 80069e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80069e8:	4413      	add	r3, r2
 80069ea:	930c      	str	r3, [sp, #48]	; 0x30
 80069ec:	f419 6f80 	tst.w	r9, #1024	; 0x400
 80069f0:	d003      	beq.n	80069fa <_vfprintf_r+0x150e>
 80069f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f300 8250 	bgt.w	8006e9a <_vfprintf_r+0x19ae>
 80069fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a00:	9306      	str	r3, [sp, #24]
 8006a02:	2667      	movs	r6, #103	; 0x67
 8006a04:	2300      	movs	r3, #0
 8006a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a08:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a0a:	e51d      	b.n	8006448 <_vfprintf_r+0xf5c>
 8006a0c:	222d      	movs	r2, #45	; 0x2d
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8006a14:	9308      	str	r3, [sp, #32]
 8006a16:	f7fe bf9a 	b.w	800594e <_vfprintf_r+0x462>
 8006a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a1c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006a20:	4642      	mov	r2, r8
 8006a22:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8006a26:	9710      	str	r7, [sp, #64]	; 0x40
 8006a28:	18eb      	adds	r3, r5, r3
 8006a2a:	9308      	str	r3, [sp, #32]
 8006a2c:	465e      	mov	r6, fp
 8006a2e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8006a30:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8006a34:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006a38:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3e:	9513      	str	r5, [sp, #76]	; 0x4c
 8006a40:	4621      	mov	r1, r4
 8006a42:	f1b8 0f00 	cmp.w	r8, #0
 8006a46:	d02e      	beq.n	8006aa6 <_vfprintf_r+0x15ba>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d16b      	bne.n	8006b24 <_vfprintf_r+0x1638>
 8006a4c:	3f01      	subs	r7, #1
 8006a4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a54:	e9c2 3900 	strd	r3, r9, [r2]
 8006a58:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	4449      	add	r1, r9
 8006a5e:	2b07      	cmp	r3, #7
 8006a60:	912a      	str	r1, [sp, #168]	; 0xa8
 8006a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8006a64:	dc62      	bgt.n	8006b2c <_vfprintf_r+0x1640>
 8006a66:	3208      	adds	r2, #8
 8006a68:	9b08      	ldr	r3, [sp, #32]
 8006a6a:	7838      	ldrb	r0, [r7, #0]
 8006a6c:	1b9b      	subs	r3, r3, r6
 8006a6e:	4283      	cmp	r3, r0
 8006a70:	bfa8      	it	ge
 8006a72:	4603      	movge	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	461c      	mov	r4, r3
 8006a78:	dd0a      	ble.n	8006a90 <_vfprintf_r+0x15a4>
 8006a7a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	4419      	add	r1, r3
 8006a80:	2807      	cmp	r0, #7
 8006a82:	e9c2 6300 	strd	r6, r3, [r2]
 8006a86:	912a      	str	r1, [sp, #168]	; 0xa8
 8006a88:	9029      	str	r0, [sp, #164]	; 0xa4
 8006a8a:	dc5a      	bgt.n	8006b42 <_vfprintf_r+0x1656>
 8006a8c:	7838      	ldrb	r0, [r7, #0]
 8006a8e:	3208      	adds	r2, #8
 8006a90:	2c00      	cmp	r4, #0
 8006a92:	bfac      	ite	ge
 8006a94:	1b05      	subge	r5, r0, r4
 8006a96:	4605      	movlt	r5, r0
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	dc15      	bgt.n	8006ac8 <_vfprintf_r+0x15dc>
 8006a9c:	4406      	add	r6, r0
 8006a9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006aa0:	f1b8 0f00 	cmp.w	r8, #0
 8006aa4:	d1d0      	bne.n	8006a48 <_vfprintf_r+0x155c>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d13c      	bne.n	8006b24 <_vfprintf_r+0x1638>
 8006aaa:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
 8006aae:	18eb      	adds	r3, r5, r3
 8006ab0:	429e      	cmp	r6, r3
 8006ab2:	9719      	str	r7, [sp, #100]	; 0x64
 8006ab4:	46b3      	mov	fp, r6
 8006ab6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006aba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006abc:	460c      	mov	r4, r1
 8006abe:	4690      	mov	r8, r2
 8006ac0:	bf28      	it	cs
 8006ac2:	469b      	movcs	fp, r3
 8006ac4:	f7ff badb 	b.w	800607e <_vfprintf_r+0xb92>
 8006ac8:	2d10      	cmp	r5, #16
 8006aca:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8006acc:	dd1d      	ble.n	8006b0a <_vfprintf_r+0x161e>
 8006ace:	2410      	movs	r4, #16
 8006ad0:	e004      	b.n	8006adc <_vfprintf_r+0x15f0>
 8006ad2:	3d10      	subs	r5, #16
 8006ad4:	2d10      	cmp	r5, #16
 8006ad6:	f102 0208 	add.w	r2, r2, #8
 8006ada:	dd16      	ble.n	8006b0a <_vfprintf_r+0x161e>
 8006adc:	3001      	adds	r0, #1
 8006ade:	4bac      	ldr	r3, [pc, #688]	; (8006d90 <_vfprintf_r+0x18a4>)
 8006ae0:	3110      	adds	r1, #16
 8006ae2:	2807      	cmp	r0, #7
 8006ae4:	e9c2 3400 	strd	r3, r4, [r2]
 8006ae8:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 8006aec:	ddf1      	ble.n	8006ad2 <_vfprintf_r+0x15e6>
 8006aee:	aa28      	add	r2, sp, #160	; 0xa0
 8006af0:	4659      	mov	r1, fp
 8006af2:	4650      	mov	r0, sl
 8006af4:	f002 fe7e 	bl	80097f4 <__sprint_r>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	f47e ae37 	bne.w	800576c <_vfprintf_r+0x280>
 8006afe:	3d10      	subs	r5, #16
 8006b00:	2d10      	cmp	r5, #16
 8006b02:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
 8006b06:	aa2b      	add	r2, sp, #172	; 0xac
 8006b08:	dce8      	bgt.n	8006adc <_vfprintf_r+0x15f0>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	4ba0      	ldr	r3, [pc, #640]	; (8006d90 <_vfprintf_r+0x18a4>)
 8006b0e:	6055      	str	r5, [r2, #4]
 8006b10:	4429      	add	r1, r5
 8006b12:	2807      	cmp	r0, #7
 8006b14:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	dc2c      	bgt.n	8006b76 <_vfprintf_r+0x168a>
 8006b1c:	7838      	ldrb	r0, [r7, #0]
 8006b1e:	3208      	adds	r2, #8
 8006b20:	4406      	add	r6, r0
 8006b22:	e7bc      	b.n	8006a9e <_vfprintf_r+0x15b2>
 8006b24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b26:	3b01      	subs	r3, #1
 8006b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b2a:	e792      	b.n	8006a52 <_vfprintf_r+0x1566>
 8006b2c:	aa28      	add	r2, sp, #160	; 0xa0
 8006b2e:	4659      	mov	r1, fp
 8006b30:	4650      	mov	r0, sl
 8006b32:	f002 fe5f 	bl	80097f4 <__sprint_r>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	f47e ae18 	bne.w	800576c <_vfprintf_r+0x280>
 8006b3c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8006b3e:	aa2b      	add	r2, sp, #172	; 0xac
 8006b40:	e792      	b.n	8006a68 <_vfprintf_r+0x157c>
 8006b42:	aa28      	add	r2, sp, #160	; 0xa0
 8006b44:	4659      	mov	r1, fp
 8006b46:	4650      	mov	r0, sl
 8006b48:	f002 fe54 	bl	80097f4 <__sprint_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	f47e ae0d 	bne.w	800576c <_vfprintf_r+0x280>
 8006b52:	7838      	ldrb	r0, [r7, #0]
 8006b54:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8006b56:	aa2b      	add	r2, sp, #172	; 0xac
 8006b58:	e79a      	b.n	8006a90 <_vfprintf_r+0x15a4>
 8006b5a:	9907      	ldr	r1, [sp, #28]
 8006b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5e:	aa28      	add	r2, sp, #160	; 0xa0
 8006b60:	f002 fe48 	bl	80097f4 <__sprint_r>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	f47e ae01 	bne.w	800576c <_vfprintf_r+0x280>
 8006b6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b6c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006b6e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006b72:	f7ff bb84 	b.w	800627e <_vfprintf_r+0xd92>
 8006b76:	aa28      	add	r2, sp, #160	; 0xa0
 8006b78:	4659      	mov	r1, fp
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	f002 fe3a 	bl	80097f4 <__sprint_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f47e adf3 	bne.w	800576c <_vfprintf_r+0x280>
 8006b86:	7838      	ldrb	r0, [r7, #0]
 8006b88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8006b8a:	aa2b      	add	r2, sp, #172	; 0xac
 8006b8c:	4406      	add	r6, r0
 8006b8e:	e786      	b.n	8006a9e <_vfprintf_r+0x15b2>
 8006b90:	9907      	ldr	r1, [sp, #28]
 8006b92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b94:	aa28      	add	r2, sp, #160	; 0xa0
 8006b96:	f002 fe2d 	bl	80097f4 <__sprint_r>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	f47e ade6 	bne.w	800576c <_vfprintf_r+0x280>
 8006ba0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006ba2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006ba6:	f7ff ba5b 	b.w	8006060 <_vfprintf_r+0xb74>
 8006baa:	9907      	ldr	r1, [sp, #28]
 8006bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bae:	aa28      	add	r2, sp, #160	; 0xa0
 8006bb0:	f002 fe20 	bl	80097f4 <__sprint_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f47e add9 	bne.w	800576c <_vfprintf_r+0x280>
 8006bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bbc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006bbe:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006bc2:	f7ff ba71 	b.w	80060a8 <_vfprintf_r+0xbbc>
 8006bc6:	9908      	ldr	r1, [sp, #32]
 8006bc8:	9101      	str	r1, [sp, #4]
 8006bca:	a926      	add	r1, sp, #152	; 0x98
 8006bcc:	9104      	str	r1, [sp, #16]
 8006bce:	a923      	add	r1, sp, #140	; 0x8c
 8006bd0:	9103      	str	r1, [sp, #12]
 8006bd2:	a922      	add	r1, sp, #136	; 0x88
 8006bd4:	9102      	str	r1, [sp, #8]
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bdc:	9100      	str	r1, [sp, #0]
 8006bde:	465a      	mov	r2, fp
 8006be0:	f000 fbc6 	bl	8007370 <_dtoa_r>
 8006be4:	7803      	ldrb	r3, [r0, #0]
 8006be6:	2b30      	cmp	r3, #48	; 0x30
 8006be8:	4605      	mov	r5, r0
 8006bea:	f000 8195 	beq.w	8006f18 <_vfprintf_r+0x1a2c>
 8006bee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf0:	9a08      	ldr	r2, [sp, #32]
 8006bf2:	46b9      	mov	r9, r7
 8006bf4:	4413      	add	r3, r2
 8006bf6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006bf8:	18ec      	adds	r4, r5, r3
 8006bfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bfc:	4658      	mov	r0, fp
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2300      	movs	r3, #0
 8006c02:	f7fa f881 	bl	8000d08 <__aeabi_dcmpeq>
 8006c06:	b110      	cbz	r0, 8006c0e <_vfprintf_r+0x1722>
 8006c08:	4623      	mov	r3, r4
 8006c0a:	f7ff bbb0 	b.w	800636e <_vfprintf_r+0xe82>
 8006c0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	f4bf abac 	bcs.w	800636e <_vfprintf_r+0xe82>
 8006c16:	2130      	movs	r1, #48	; 0x30
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	9226      	str	r2, [sp, #152]	; 0x98
 8006c1c:	7019      	strb	r1, [r3, #0]
 8006c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c20:	429c      	cmp	r4, r3
 8006c22:	d8f9      	bhi.n	8006c18 <_vfprintf_r+0x172c>
 8006c24:	f7ff bba3 	b.w	800636e <_vfprintf_r+0xe82>
 8006c28:	9b08      	ldr	r3, [sp, #32]
 8006c2a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8006c2e:	940e      	str	r4, [sp, #56]	; 0x38
 8006c30:	9306      	str	r3, [sp, #24]
 8006c32:	930c      	str	r3, [sp, #48]	; 0x30
 8006c34:	9008      	str	r0, [sp, #32]
 8006c36:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c38:	9013      	str	r0, [sp, #76]	; 0x4c
 8006c3a:	9010      	str	r0, [sp, #64]	; 0x40
 8006c3c:	f7fe be84 	b.w	8005948 <_vfprintf_r+0x45c>
 8006c40:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c42:	9210      	str	r2, [sp, #64]	; 0x40
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	f340 8181 	ble.w	8006f4c <_vfprintf_r+0x1a60>
 8006c4a:	9908      	ldr	r1, [sp, #32]
 8006c4c:	f009 0301 	and.w	r3, r9, #1
 8006c50:	430b      	orrs	r3, r1
 8006c52:	f040 8155 	bne.w	8006f00 <_vfprintf_r+0x1a14>
 8006c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c58:	930c      	str	r3, [sp, #48]	; 0x30
 8006c5a:	2666      	movs	r6, #102	; 0x66
 8006c5c:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8006c60:	f040 811c 	bne.w	8006e9c <_vfprintf_r+0x19b0>
 8006c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006c6a:	9306      	str	r3, [sp, #24]
 8006c6c:	e6ca      	b.n	8006a04 <_vfprintf_r+0x1518>
 8006c6e:	9907      	ldr	r1, [sp, #28]
 8006c70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c72:	aa28      	add	r2, sp, #160	; 0xa0
 8006c74:	f002 fdbe 	bl	80097f4 <__sprint_r>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f43e ae25 	beq.w	80058c8 <_vfprintf_r+0x3dc>
 8006c7e:	f7fe bd7b 	b.w	8005778 <_vfprintf_r+0x28c>
 8006c82:	2300      	movs	r3, #0
 8006c84:	9308      	str	r3, [sp, #32]
 8006c86:	f7fe bca1 	b.w	80055cc <_vfprintf_r+0xe0>
 8006c8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c8e:	189a      	adds	r2, r3, r2
 8006c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c92:	920c      	str	r2, [sp, #48]	; 0x30
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f340 814d 	ble.w	8006f34 <_vfprintf_r+0x1a48>
 8006c9a:	2667      	movs	r6, #103	; 0x67
 8006c9c:	e7de      	b.n	8006c5c <_vfprintf_r+0x1770>
 8006c9e:	f026 0320 	bic.w	r3, r6, #32
 8006ca2:	9306      	str	r3, [sp, #24]
 8006ca4:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8006ca8:	469b      	mov	fp, r3
 8006caa:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8006cae:	930c      	str	r3, [sp, #48]	; 0x30
 8006cb0:	232d      	movs	r3, #45	; 0x2d
 8006cb2:	931d      	str	r3, [sp, #116]	; 0x74
 8006cb4:	e5da      	b.n	800686c <_vfprintf_r+0x1380>
 8006cb6:	9907      	ldr	r1, [sp, #28]
 8006cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cba:	aa28      	add	r2, sp, #160	; 0xa0
 8006cbc:	f002 fd9a 	bl	80097f4 <__sprint_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	f47e ad53 	bne.w	800576c <_vfprintf_r+0x280>
 8006cc6:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8006cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cca:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006ccc:	1b5d      	subs	r5, r3, r5
 8006cce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006cd2:	f7ff ba01 	b.w	80060d8 <_vfprintf_r+0xbec>
 8006cd6:	424e      	negs	r6, r1
 8006cd8:	3110      	adds	r1, #16
 8006cda:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006d90 <_vfprintf_r+0x18a4>
 8006cde:	da34      	bge.n	8006d4a <_vfprintf_r+0x185e>
 8006ce0:	4641      	mov	r1, r8
 8006ce2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006ce6:	46a8      	mov	r8, r5
 8006ce8:	2410      	movs	r4, #16
 8006cea:	9d07      	ldr	r5, [sp, #28]
 8006cec:	e003      	b.n	8006cf6 <_vfprintf_r+0x180a>
 8006cee:	3108      	adds	r1, #8
 8006cf0:	3e10      	subs	r6, #16
 8006cf2:	2e10      	cmp	r6, #16
 8006cf4:	dd27      	ble.n	8006d46 <_vfprintf_r+0x185a>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	3210      	adds	r2, #16
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	e9c1 9400 	strd	r9, r4, [r1]
 8006d00:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006d04:	ddf3      	ble.n	8006cee <_vfprintf_r+0x1802>
 8006d06:	aa28      	add	r2, sp, #160	; 0xa0
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4658      	mov	r0, fp
 8006d0c:	f002 fd72 	bl	80097f4 <__sprint_r>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f47e ad2b 	bne.w	800576c <_vfprintf_r+0x280>
 8006d16:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006d1a:	a92b      	add	r1, sp, #172	; 0xac
 8006d1c:	e7e8      	b.n	8006cf0 <_vfprintf_r+0x1804>
 8006d1e:	9b08      	ldr	r3, [sp, #32]
 8006d20:	18ec      	adds	r4, r5, r3
 8006d22:	e76a      	b.n	8006bfa <_vfprintf_r+0x170e>
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d28:	07dd      	lsls	r5, r3, #31
 8006d2a:	d407      	bmi.n	8006d3c <_vfprintf_r+0x1850>
 8006d2c:	9b07      	ldr	r3, [sp, #28]
 8006d2e:	899b      	ldrh	r3, [r3, #12]
 8006d30:	059c      	lsls	r4, r3, #22
 8006d32:	d403      	bmi.n	8006d3c <_vfprintf_r+0x1850>
 8006d34:	9b07      	ldr	r3, [sp, #28]
 8006d36:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006d38:	f7fd ff46 	bl	8004bc8 <__retarget_lock_release_recursive>
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d42:	f7fe bd22 	b.w	800578a <_vfprintf_r+0x29e>
 8006d46:	4645      	mov	r5, r8
 8006d48:	4688      	mov	r8, r1
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4432      	add	r2, r6
 8006d4e:	2b07      	cmp	r3, #7
 8006d50:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8006d54:	f8c8 9000 	str.w	r9, [r8]
 8006d58:	f8c8 6004 	str.w	r6, [r8, #4]
 8006d5c:	f77f aaa4 	ble.w	80062a8 <_vfprintf_r+0xdbc>
 8006d60:	9907      	ldr	r1, [sp, #28]
 8006d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d64:	aa28      	add	r2, sp, #160	; 0xa0
 8006d66:	f002 fd45 	bl	80097f4 <__sprint_r>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	f47e acfe 	bne.w	800576c <_vfprintf_r+0x280>
 8006d70:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8006d74:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006d78:	e4b3      	b.n	80066e2 <_vfprintf_r+0x11f6>
 8006d7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d7c:	1c59      	adds	r1, r3, #1
 8006d7e:	f7fd ff35 	bl	8004bec <_malloc_r>
 8006d82:	4605      	mov	r5, r0
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f000 810d 	beq.w	8006fa4 <_vfprintf_r+0x1ab8>
 8006d8a:	900d      	str	r0, [sp, #52]	; 0x34
 8006d8c:	e55d      	b.n	800684a <_vfprintf_r+0x135e>
 8006d8e:	bf00      	nop
 8006d90:	0800b174 	.word	0x0800b174
 8006d94:	2330      	movs	r3, #48	; 0x30
 8006d96:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8006d9a:	2378      	movs	r3, #120	; 0x78
 8006d9c:	e54a      	b.n	8006834 <_vfprintf_r+0x1348>
 8006d9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006da0:	9326      	str	r3, [sp, #152]	; 0x98
 8006da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8006da8:	7bd9      	ldrb	r1, [r3, #15]
 8006daa:	428a      	cmp	r2, r1
 8006dac:	465b      	mov	r3, fp
 8006dae:	d109      	bne.n	8006dc4 <_vfprintf_r+0x18d8>
 8006db0:	2030      	movs	r0, #48	; 0x30
 8006db2:	f803 0c01 	strb.w	r0, [r3, #-1]
 8006db6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006db8:	1e5a      	subs	r2, r3, #1
 8006dba:	9226      	str	r2, [sp, #152]	; 0x98
 8006dbc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006dc0:	4291      	cmp	r1, r2
 8006dc2:	d0f6      	beq.n	8006db2 <_vfprintf_r+0x18c6>
 8006dc4:	2a39      	cmp	r2, #57	; 0x39
 8006dc6:	bf0b      	itete	eq
 8006dc8:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
 8006dca:	3201      	addne	r2, #1
 8006dcc:	7a92      	ldrbeq	r2, [r2, #10]
 8006dce:	b2d2      	uxtbne	r2, r2
 8006dd0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006dd4:	e5c3      	b.n	800695e <_vfprintf_r+0x1472>
 8006dd6:	9908      	ldr	r1, [sp, #32]
 8006dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ddc:	1c4c      	adds	r4, r1, #1
 8006dde:	a926      	add	r1, sp, #152	; 0x98
 8006de0:	9104      	str	r1, [sp, #16]
 8006de2:	a923      	add	r1, sp, #140	; 0x8c
 8006de4:	9103      	str	r1, [sp, #12]
 8006de6:	a922      	add	r1, sp, #136	; 0x88
 8006de8:	9102      	str	r1, [sp, #8]
 8006dea:	2102      	movs	r1, #2
 8006dec:	465a      	mov	r2, fp
 8006dee:	9401      	str	r4, [sp, #4]
 8006df0:	9100      	str	r1, [sp, #0]
 8006df2:	f000 fabd 	bl	8007370 <_dtoa_r>
 8006df6:	4605      	mov	r5, r0
 8006df8:	46b9      	mov	r9, r7
 8006dfa:	442c      	add	r4, r5
 8006dfc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8006dfe:	e6fc      	b.n	8006bfa <_vfprintf_r+0x170e>
 8006e00:	9b08      	ldr	r3, [sp, #32]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bf08      	it	eq
 8006e06:	2301      	moveq	r3, #1
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8006e0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f2c0 80ae 	blt.w	8006f74 <_vfprintf_r+0x1a88>
 8006e18:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8006e1c:	901d      	str	r0, [sp, #116]	; 0x74
 8006e1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e20:	900d      	str	r0, [sp, #52]	; 0x34
 8006e22:	f7ff ba89 	b.w	8006338 <_vfprintf_r+0xe4c>
 8006e26:	2306      	movs	r3, #6
 8006e28:	9308      	str	r3, [sp, #32]
 8006e2a:	f7ff ba70 	b.w	800630e <_vfprintf_r+0xe22>
 8006e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e30:	4d60      	ldr	r5, [pc, #384]	; (8006fb4 <_vfprintf_r+0x1ac8>)
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bfb4      	ite	lt
 8006e36:	222d      	movlt	r2, #45	; 0x2d
 8006e38:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
 8006e3c:	4b5e      	ldr	r3, [pc, #376]	; (8006fb8 <_vfprintf_r+0x1acc>)
 8006e3e:	bfb8      	it	lt
 8006e40:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
 8006e44:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8006e48:	f7fe bd72 	b.w	8005930 <_vfprintf_r+0x444>
 8006e4c:	aa22      	add	r2, sp, #136	; 0x88
 8006e4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e50:	4658      	mov	r0, fp
 8006e52:	f002 fc29 	bl	80096a8 <frexp>
 8006e56:	2200      	movs	r2, #0
 8006e58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006e5c:	f7f9 fcec 	bl	8000838 <__aeabi_dmul>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f7f9 ff4c 	bl	8000d08 <__aeabi_dcmpeq>
 8006e70:	b108      	cbz	r0, 8006e76 <_vfprintf_r+0x198a>
 8006e72:	2301      	movs	r3, #1
 8006e74:	9322      	str	r3, [sp, #136]	; 0x88
 8006e76:	4b51      	ldr	r3, [pc, #324]	; (8006fbc <_vfprintf_r+0x1ad0>)
 8006e78:	930c      	str	r3, [sp, #48]	; 0x30
 8006e7a:	e514      	b.n	80068a6 <_vfprintf_r+0x13ba>
 8006e7c:	2900      	cmp	r1, #0
 8006e7e:	d162      	bne.n	8006f46 <_vfprintf_r+0x1a5a>
 8006e80:	2230      	movs	r2, #48	; 0x30
 8006e82:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 8006e86:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 8006e8a:	3330      	adds	r3, #48	; 0x30
 8006e8c:	f802 3b01 	strb.w	r3, [r2], #1
 8006e90:	ab24      	add	r3, sp, #144	; 0x90
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	931a      	str	r3, [sp, #104]	; 0x68
 8006e96:	f7ff bac0 	b.w	800641a <_vfprintf_r+0xf2e>
 8006e9a:	2667      	movs	r6, #103	; 0x67
 8006e9c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006e9e:	780b      	ldrb	r3, [r1, #0]
 8006ea0:	2bff      	cmp	r3, #255	; 0xff
 8006ea2:	d07b      	beq.n	8006f9c <_vfprintf_r+0x1ab0>
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	e003      	b.n	8006eb4 <_vfprintf_r+0x19c8>
 8006eac:	3001      	adds	r0, #1
 8006eae:	3101      	adds	r1, #1
 8006eb0:	2bff      	cmp	r3, #255	; 0xff
 8006eb2:	d008      	beq.n	8006ec6 <_vfprintf_r+0x19da>
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	da06      	bge.n	8006ec6 <_vfprintf_r+0x19da>
 8006eb8:	1ad2      	subs	r2, r2, r3
 8006eba:	784b      	ldrb	r3, [r1, #1]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1f5      	bne.n	8006eac <_vfprintf_r+0x19c0>
 8006ec0:	780b      	ldrb	r3, [r1, #0]
 8006ec2:	3401      	adds	r4, #1
 8006ec4:	e7f4      	b.n	8006eb0 <_vfprintf_r+0x19c4>
 8006ec6:	9119      	str	r1, [sp, #100]	; 0x64
 8006ec8:	9210      	str	r2, [sp, #64]	; 0x40
 8006eca:	9013      	str	r0, [sp, #76]	; 0x4c
 8006ecc:	940f      	str	r4, [sp, #60]	; 0x3c
 8006ece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ed4:	4413      	add	r3, r2
 8006ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ed8:	fb01 2303 	mla	r3, r1, r3, r2
 8006edc:	930c      	str	r3, [sp, #48]	; 0x30
 8006ede:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ee2:	9306      	str	r3, [sp, #24]
 8006ee4:	f7ff bab0 	b.w	8006448 <_vfprintf_r+0xf5c>
 8006ee8:	f106 020f 	add.w	r2, r6, #15
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	2101      	movs	r1, #1
 8006ef0:	f7ff ba52 	b.w	8006398 <_vfprintf_r+0xeac>
 8006ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef8:	e578      	b.n	80069ec <_vfprintf_r+0x1500>
 8006efa:	2300      	movs	r3, #0
 8006efc:	930d      	str	r3, [sp, #52]	; 0x34
 8006efe:	e6d1      	b.n	8006ca4 <_vfprintf_r+0x17b8>
 8006f00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f02:	18d3      	adds	r3, r2, r3
 8006f04:	4419      	add	r1, r3
 8006f06:	910c      	str	r1, [sp, #48]	; 0x30
 8006f08:	2666      	movs	r6, #102	; 0x66
 8006f0a:	e6a7      	b.n	8006c5c <_vfprintf_r+0x1770>
 8006f0c:	f019 0f01 	tst.w	r9, #1
 8006f10:	f43f aa8e 	beq.w	8006430 <_vfprintf_r+0xf44>
 8006f14:	f7ff ba88 	b.w	8006428 <_vfprintf_r+0xf3c>
 8006f18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f1a:	4658      	mov	r0, fp
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f7f9 fef2 	bl	8000d08 <__aeabi_dcmpeq>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f47f ae62 	bne.w	8006bee <_vfprintf_r+0x1702>
 8006f2a:	9b08      	ldr	r3, [sp, #32]
 8006f2c:	f1c3 0301 	rsb	r3, r3, #1
 8006f30:	9322      	str	r3, [sp, #136]	; 0x88
 8006f32:	e65d      	b.n	8006bf0 <_vfprintf_r+0x1704>
 8006f34:	f1c3 0301 	rsb	r3, r3, #1
 8006f38:	441a      	add	r2, r3
 8006f3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f3e:	920c      	str	r2, [sp, #48]	; 0x30
 8006f40:	9306      	str	r3, [sp, #24]
 8006f42:	2667      	movs	r6, #103	; 0x67
 8006f44:	e55e      	b.n	8006a04 <_vfprintf_r+0x1518>
 8006f46:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8006f4a:	e79e      	b.n	8006e8a <_vfprintf_r+0x199e>
 8006f4c:	9a08      	ldr	r2, [sp, #32]
 8006f4e:	f009 0901 	and.w	r9, r9, #1
 8006f52:	ea59 0302 	orrs.w	r3, r9, r2
 8006f56:	d104      	bne.n	8006f62 <_vfprintf_r+0x1a76>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	9306      	str	r3, [sp, #24]
 8006f5c:	2666      	movs	r6, #102	; 0x66
 8006f5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f60:	e550      	b.n	8006a04 <_vfprintf_r+0x1518>
 8006f62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f64:	3301      	adds	r3, #1
 8006f66:	441a      	add	r2, r3
 8006f68:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f6c:	920c      	str	r2, [sp, #48]	; 0x30
 8006f6e:	9306      	str	r3, [sp, #24]
 8006f70:	2666      	movs	r6, #102	; 0x66
 8006f72:	e547      	b.n	8006a04 <_vfprintf_r+0x1518>
 8006f74:	900d      	str	r0, [sp, #52]	; 0x34
 8006f76:	e695      	b.n	8006ca4 <_vfprintf_r+0x17b8>
 8006f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f7a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8006f7e:	4692      	mov	sl, r2
 8006f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f84:	930e      	str	r3, [sp, #56]	; 0x38
 8006f86:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8006f8a:	9208      	str	r2, [sp, #32]
 8006f8c:	f7fe bb1c 	b.w	80055c8 <_vfprintf_r+0xdc>
 8006f90:	2302      	movs	r3, #2
 8006f92:	931a      	str	r3, [sp, #104]	; 0x68
 8006f94:	f7ff ba41 	b.w	800641a <_vfprintf_r+0xf2e>
 8006f98:	9c08      	ldr	r4, [sp, #32]
 8006f9a:	e72d      	b.n	8006df8 <_vfprintf_r+0x190c>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fa0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fa2:	e794      	b.n	8006ece <_vfprintf_r+0x19e2>
 8006fa4:	9a07      	ldr	r2, [sp, #28]
 8006fa6:	8993      	ldrh	r3, [r2, #12]
 8006fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fac:	8193      	strh	r3, [r2, #12]
 8006fae:	f7fe bbe3 	b.w	8005778 <_vfprintf_r+0x28c>
 8006fb2:	bf00      	nop
 8006fb4:	0800b128 	.word	0x0800b128
 8006fb8:	0800b12c 	.word	0x0800b12c
 8006fbc:	0800b130 	.word	0x0800b130

08006fc0 <__sbprintf>:
 8006fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc2:	461f      	mov	r7, r3
 8006fc4:	898b      	ldrh	r3, [r1, #12]
 8006fc6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006fca:	f023 0302 	bic.w	r3, r3, #2
 8006fce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006fd2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006fd4:	9319      	str	r3, [sp, #100]	; 0x64
 8006fd6:	89cb      	ldrh	r3, [r1, #14]
 8006fd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006fdc:	69cb      	ldr	r3, [r1, #28]
 8006fde:	9307      	str	r3, [sp, #28]
 8006fe0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8006fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe4:	ab1a      	add	r3, sp, #104	; 0x68
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fee:	4615      	mov	r5, r2
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	9302      	str	r3, [sp, #8]
 8006ff4:	9305      	str	r3, [sp, #20]
 8006ff6:	a816      	add	r0, sp, #88	; 0x58
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	9306      	str	r3, [sp, #24]
 8006ffe:	f7fd fddd 	bl	8004bbc <__retarget_lock_init_recursive>
 8007002:	462a      	mov	r2, r5
 8007004:	463b      	mov	r3, r7
 8007006:	4669      	mov	r1, sp
 8007008:	4630      	mov	r0, r6
 800700a:	f7fe fa6f 	bl	80054ec <_vfprintf_r>
 800700e:	1e05      	subs	r5, r0, #0
 8007010:	db07      	blt.n	8007022 <__sbprintf+0x62>
 8007012:	4669      	mov	r1, sp
 8007014:	4630      	mov	r0, r6
 8007016:	f001 fa03 	bl	8008420 <_fflush_r>
 800701a:	2800      	cmp	r0, #0
 800701c:	bf18      	it	ne
 800701e:	f04f 35ff 	movne.w	r5, #4294967295
 8007022:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007026:	065b      	lsls	r3, r3, #25
 8007028:	d503      	bpl.n	8007032 <__sbprintf+0x72>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007034:	f7fd fdc4 	bl	8004bc0 <__retarget_lock_close_recursive>
 8007038:	4628      	mov	r0, r5
 800703a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800703e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007040 <_write_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	460c      	mov	r4, r1
 8007044:	4d08      	ldr	r5, [pc, #32]	; (8007068 <_write_r+0x28>)
 8007046:	4684      	mov	ip, r0
 8007048:	4611      	mov	r1, r2
 800704a:	4620      	mov	r0, r4
 800704c:	461a      	mov	r2, r3
 800704e:	2300      	movs	r3, #0
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	4664      	mov	r4, ip
 8007054:	f003 fd32 	bl	800aabc <_write>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d000      	beq.n	800705e <_write_r+0x1e>
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	682b      	ldr	r3, [r5, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0fb      	beq.n	800705c <_write_r+0x1c>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	200010b8 	.word	0x200010b8

0800706c <__swsetup_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4b33      	ldr	r3, [pc, #204]	; (800713c <__swsetup_r+0xd0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4605      	mov	r5, r0
 8007074:	460c      	mov	r4, r1
 8007076:	b10b      	cbz	r3, 800707c <__swsetup_r+0x10>
 8007078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707a:	b312      	cbz	r2, 80070c2 <__swsetup_r+0x56>
 800707c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007080:	0718      	lsls	r0, r3, #28
 8007082:	b29a      	uxth	r2, r3
 8007084:	d525      	bpl.n	80070d2 <__swsetup_r+0x66>
 8007086:	6921      	ldr	r1, [r4, #16]
 8007088:	2900      	cmp	r1, #0
 800708a:	d02d      	beq.n	80070e8 <__swsetup_r+0x7c>
 800708c:	f012 0001 	ands.w	r0, r2, #1
 8007090:	d007      	beq.n	80070a2 <__swsetup_r+0x36>
 8007092:	2000      	movs	r0, #0
 8007094:	60a0      	str	r0, [r4, #8]
 8007096:	6960      	ldr	r0, [r4, #20]
 8007098:	4240      	negs	r0, r0
 800709a:	61a0      	str	r0, [r4, #24]
 800709c:	b139      	cbz	r1, 80070ae <__swsetup_r+0x42>
 800709e:	2000      	movs	r0, #0
 80070a0:	bd38      	pop	{r3, r4, r5, pc}
 80070a2:	0795      	lsls	r5, r2, #30
 80070a4:	bf58      	it	pl
 80070a6:	6960      	ldrpl	r0, [r4, #20]
 80070a8:	60a0      	str	r0, [r4, #8]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d1f7      	bne.n	800709e <__swsetup_r+0x32>
 80070ae:	0612      	lsls	r2, r2, #24
 80070b0:	bf58      	it	pl
 80070b2:	4608      	movpl	r0, r1
 80070b4:	d5f4      	bpl.n	80070a0 <__swsetup_r+0x34>
 80070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	bd38      	pop	{r3, r4, r5, pc}
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fd fca0 	bl	8004a08 <__sinit>
 80070c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070cc:	0718      	lsls	r0, r3, #28
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	d4d9      	bmi.n	8007086 <__swsetup_r+0x1a>
 80070d2:	06d1      	lsls	r1, r2, #27
 80070d4:	d52a      	bpl.n	800712c <__swsetup_r+0xc0>
 80070d6:	0752      	lsls	r2, r2, #29
 80070d8:	d414      	bmi.n	8007104 <__swsetup_r+0x98>
 80070da:	6921      	ldr	r1, [r4, #16]
 80070dc:	f043 0308 	orr.w	r3, r3, #8
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d1d1      	bne.n	800708c <__swsetup_r+0x20>
 80070e8:	f402 7020 	and.w	r0, r2, #640	; 0x280
 80070ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80070f0:	d0cc      	beq.n	800708c <__swsetup_r+0x20>
 80070f2:	4621      	mov	r1, r4
 80070f4:	4628      	mov	r0, r5
 80070f6:	f001 fcbb 	bl	8008a70 <__smakebuf_r>
 80070fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fe:	6921      	ldr	r1, [r4, #16]
 8007100:	b29a      	uxth	r2, r3
 8007102:	e7c3      	b.n	800708c <__swsetup_r+0x20>
 8007104:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007106:	b151      	cbz	r1, 800711e <__swsetup_r+0xb2>
 8007108:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800710c:	4291      	cmp	r1, r2
 800710e:	d004      	beq.n	800711a <__swsetup_r+0xae>
 8007110:	4628      	mov	r0, r5
 8007112:	f001 fa19 	bl	8008548 <_free_r>
 8007116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	6322      	str	r2, [r4, #48]	; 0x30
 800711e:	6921      	ldr	r1, [r4, #16]
 8007120:	2200      	movs	r2, #0
 8007122:	e9c4 1200 	strd	r1, r2, [r4]
 8007126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800712a:	e7d7      	b.n	80070dc <__swsetup_r+0x70>
 800712c:	2209      	movs	r2, #9
 800712e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007132:	602a      	str	r2, [r5, #0]
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20000000 	.word	0x20000000

08007140 <register_fini>:
 8007140:	4b02      	ldr	r3, [pc, #8]	; (800714c <register_fini+0xc>)
 8007142:	b113      	cbz	r3, 800714a <register_fini+0xa>
 8007144:	4802      	ldr	r0, [pc, #8]	; (8007150 <register_fini+0x10>)
 8007146:	f000 b867 	b.w	8007218 <atexit>
 800714a:	4770      	bx	lr
 800714c:	00000000 	.word	0x00000000
 8007150:	0800847d 	.word	0x0800847d

08007154 <__call_exitprocs>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	4b2d      	ldr	r3, [pc, #180]	; (8007210 <__call_exitprocs+0xbc>)
 800715a:	b083      	sub	sp, #12
 800715c:	4683      	mov	fp, r0
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	f8cd b004 	str.w	fp, [sp, #4]
 8007164:	460f      	mov	r7, r1
 8007166:	f7fd fd2d 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 800716a:	4b2a      	ldr	r3, [pc, #168]	; (8007214 <__call_exitprocs+0xc0>)
 800716c:	f8d3 8000 	ldr.w	r8, [r3]
 8007170:	f8d8 6148 	ldr.w	r6, [r8, #328]	; 0x148
 8007174:	b19e      	cbz	r6, 800719e <__call_exitprocs+0x4a>
 8007176:	f04f 0901 	mov.w	r9, #1
 800717a:	f04f 0a00 	mov.w	sl, #0
 800717e:	6874      	ldr	r4, [r6, #4]
 8007180:	1e65      	subs	r5, r4, #1
 8007182:	d40c      	bmi.n	800719e <__call_exitprocs+0x4a>
 8007184:	3401      	adds	r4, #1
 8007186:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800718a:	b17f      	cbz	r7, 80071ac <__call_exitprocs+0x58>
 800718c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007190:	42bb      	cmp	r3, r7
 8007192:	d00b      	beq.n	80071ac <__call_exitprocs+0x58>
 8007194:	3d01      	subs	r5, #1
 8007196:	1c6b      	adds	r3, r5, #1
 8007198:	f1a4 0404 	sub.w	r4, r4, #4
 800719c:	d1f5      	bne.n	800718a <__call_exitprocs+0x36>
 800719e:	4b1c      	ldr	r3, [pc, #112]	; (8007210 <__call_exitprocs+0xbc>)
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	b003      	add	sp, #12
 80071a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a8:	f7fd bd0e 	b.w	8004bc8 <__retarget_lock_release_recursive>
 80071ac:	6873      	ldr	r3, [r6, #4]
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	42ab      	cmp	r3, r5
 80071b4:	bf0c      	ite	eq
 80071b6:	6075      	streq	r5, [r6, #4]
 80071b8:	f8c4 a000 	strne.w	sl, [r4]
 80071bc:	2a00      	cmp	r2, #0
 80071be:	d0e9      	beq.n	8007194 <__call_exitprocs+0x40>
 80071c0:	f8d6 0188 	ldr.w	r0, [r6, #392]	; 0x188
 80071c4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80071c8:	fa09 f105 	lsl.w	r1, r9, r5
 80071cc:	4201      	tst	r1, r0
 80071ce:	d10b      	bne.n	80071e8 <__call_exitprocs+0x94>
 80071d0:	4790      	blx	r2
 80071d2:	6872      	ldr	r2, [r6, #4]
 80071d4:	455a      	cmp	r2, fp
 80071d6:	d112      	bne.n	80071fe <__call_exitprocs+0xaa>
 80071d8:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
 80071dc:	42b3      	cmp	r3, r6
 80071de:	d0d9      	beq.n	8007194 <__call_exitprocs+0x40>
 80071e0:	461e      	mov	r6, r3
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	d1cb      	bne.n	800717e <__call_exitprocs+0x2a>
 80071e6:	e7da      	b.n	800719e <__call_exitprocs+0x4a>
 80071e8:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 80071ec:	4201      	tst	r1, r0
 80071ee:	d10b      	bne.n	8007208 <__call_exitprocs+0xb4>
 80071f0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80071f4:	9801      	ldr	r0, [sp, #4]
 80071f6:	4790      	blx	r2
 80071f8:	6872      	ldr	r2, [r6, #4]
 80071fa:	455a      	cmp	r2, fp
 80071fc:	d0ec      	beq.n	80071d8 <__call_exitprocs+0x84>
 80071fe:	f8d8 6148 	ldr.w	r6, [r8, #328]	; 0x148
 8007202:	2e00      	cmp	r6, #0
 8007204:	d1bb      	bne.n	800717e <__call_exitprocs+0x2a>
 8007206:	e7ca      	b.n	800719e <__call_exitprocs+0x4a>
 8007208:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800720c:	4790      	blx	r2
 800720e:	e7e0      	b.n	80071d2 <__call_exitprocs+0x7e>
 8007210:	20000840 	.word	0x20000840
 8007214:	0800b118 	.word	0x0800b118

08007218 <atexit>:
 8007218:	2300      	movs	r3, #0
 800721a:	4601      	mov	r1, r0
 800721c:	461a      	mov	r2, r3
 800721e:	4618      	mov	r0, r3
 8007220:	f003 b9fc 	b.w	800a61c <__register_exitproc>

08007224 <_close_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_close_r+0x20>)
 8007228:	2200      	movs	r2, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	602a      	str	r2, [r5, #0]
 8007230:	f003 fc0c 	bl	800aa4c <_close>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d000      	beq.n	800723a <_close_r+0x16>
 8007238:	bd38      	pop	{r3, r4, r5, pc}
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0fb      	beq.n	8007238 <_close_r+0x14>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	200010b8 	.word	0x200010b8

08007248 <quorem>:
 8007248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724c:	6903      	ldr	r3, [r0, #16]
 800724e:	690c      	ldr	r4, [r1, #16]
 8007250:	42a3      	cmp	r3, r4
 8007252:	b083      	sub	sp, #12
 8007254:	f2c0 8086 	blt.w	8007364 <quorem+0x11c>
 8007258:	3c01      	subs	r4, #1
 800725a:	f101 0514 	add.w	r5, r1, #20
 800725e:	00a3      	lsls	r3, r4, #2
 8007260:	f100 0814 	add.w	r8, r0, #20
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800726a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800726e:	3301      	adds	r3, #1
 8007270:	468a      	mov	sl, r1
 8007272:	429a      	cmp	r2, r3
 8007274:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8007278:	4681      	mov	r9, r0
 800727a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800727e:	9101      	str	r1, [sp, #4]
 8007280:	fbb2 f6f3 	udiv	r6, r2, r3
 8007284:	d338      	bcc.n	80072f8 <quorem+0xb0>
 8007286:	2300      	movs	r3, #0
 8007288:	46ae      	mov	lr, r5
 800728a:	4640      	mov	r0, r8
 800728c:	469b      	mov	fp, r3
 800728e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007292:	6802      	ldr	r2, [r0, #0]
 8007294:	fa1f fc81 	uxth.w	ip, r1
 8007298:	fb06 330c 	mla	r3, r6, ip, r3
 800729c:	0c09      	lsrs	r1, r1, #16
 800729e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80072a2:	fb06 cc01 	mla	ip, r6, r1, ip
 80072a6:	b299      	uxth	r1, r3
 80072a8:	ebab 0101 	sub.w	r1, fp, r1
 80072ac:	fa1f f38c 	uxth.w	r3, ip
 80072b0:	fa11 f182 	uxtah	r1, r1, r2
 80072b4:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 80072b8:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80072bc:	b289      	uxth	r1, r1
 80072be:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072c2:	4577      	cmp	r7, lr
 80072c4:	f840 1b04 	str.w	r1, [r0], #4
 80072c8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80072cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072d0:	d2dd      	bcs.n	800728e <quorem+0x46>
 80072d2:	9b00      	ldr	r3, [sp, #0]
 80072d4:	f858 3003 	ldr.w	r3, [r8, r3]
 80072d8:	b973      	cbnz	r3, 80072f8 <quorem+0xb0>
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	3b04      	subs	r3, #4
 80072de:	4598      	cmp	r8, r3
 80072e0:	d304      	bcc.n	80072ec <quorem+0xa4>
 80072e2:	e007      	b.n	80072f4 <quorem+0xac>
 80072e4:	4598      	cmp	r8, r3
 80072e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072ea:	d203      	bcs.n	80072f4 <quorem+0xac>
 80072ec:	f853 2904 	ldr.w	r2, [r3], #-4
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	d0f7      	beq.n	80072e4 <quorem+0x9c>
 80072f4:	f8c9 4010 	str.w	r4, [r9, #16]
 80072f8:	4651      	mov	r1, sl
 80072fa:	4648      	mov	r0, r9
 80072fc:	f001 feaa 	bl	8009054 <__mcmp>
 8007300:	2800      	cmp	r0, #0
 8007302:	db2b      	blt.n	800735c <quorem+0x114>
 8007304:	3601      	adds	r6, #1
 8007306:	4640      	mov	r0, r8
 8007308:	2300      	movs	r3, #0
 800730a:	f855 1b04 	ldr.w	r1, [r5], #4
 800730e:	f8d0 c000 	ldr.w	ip, [r0]
 8007312:	b28a      	uxth	r2, r1
 8007314:	1a9a      	subs	r2, r3, r2
 8007316:	0c0b      	lsrs	r3, r1, #16
 8007318:	fa12 f28c 	uxtah	r2, r2, ip
 800731c:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 8007320:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007324:	b292      	uxth	r2, r2
 8007326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800732a:	42af      	cmp	r7, r5
 800732c:	f840 2b04 	str.w	r2, [r0], #4
 8007330:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007334:	d2e9      	bcs.n	800730a <quorem+0xc2>
 8007336:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800733a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800733e:	b96a      	cbnz	r2, 800735c <quorem+0x114>
 8007340:	3b04      	subs	r3, #4
 8007342:	4598      	cmp	r8, r3
 8007344:	d304      	bcc.n	8007350 <quorem+0x108>
 8007346:	e007      	b.n	8007358 <quorem+0x110>
 8007348:	4598      	cmp	r8, r3
 800734a:	f104 34ff 	add.w	r4, r4, #4294967295
 800734e:	d203      	bcs.n	8007358 <quorem+0x110>
 8007350:	f853 2904 	ldr.w	r2, [r3], #-4
 8007354:	2a00      	cmp	r2, #0
 8007356:	d0f7      	beq.n	8007348 <quorem+0x100>
 8007358:	f8c9 4010 	str.w	r4, [r9, #16]
 800735c:	4630      	mov	r0, r6
 800735e:	b003      	add	sp, #12
 8007360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007364:	2000      	movs	r0, #0
 8007366:	b003      	add	sp, #12
 8007368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736c:	0000      	movs	r0, r0
 800736e:	0000      	movs	r0, r0

08007370 <_dtoa_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007376:	b099      	sub	sp, #100	; 0x64
 8007378:	4690      	mov	r8, r2
 800737a:	4699      	mov	r9, r3
 800737c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007380:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007382:	4604      	mov	r4, r0
 8007384:	b141      	cbz	r1, 8007398 <_dtoa_r+0x28>
 8007386:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007388:	604a      	str	r2, [r1, #4]
 800738a:	2301      	movs	r3, #1
 800738c:	4093      	lsls	r3, r2
 800738e:	608b      	str	r3, [r1, #8]
 8007390:	f001 fc04 	bl	8008b9c <_Bfree>
 8007394:	2300      	movs	r3, #0
 8007396:	6423      	str	r3, [r4, #64]	; 0x40
 8007398:	f1b9 0a00 	subs.w	sl, r9, #0
 800739c:	bfb4      	ite	lt
 800739e:	2301      	movlt	r3, #1
 80073a0:	2300      	movge	r3, #0
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	4b76      	ldr	r3, [pc, #472]	; (8007580 <_dtoa_r+0x210>)
 80073a6:	bfbc      	itt	lt
 80073a8:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 80073ac:	f8cd a014 	strlt.w	sl, [sp, #20]
 80073b0:	ea33 030a 	bics.w	r3, r3, sl
 80073b4:	f000 80aa 	beq.w	800750c <_dtoa_r+0x19c>
 80073b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073bc:	4610      	mov	r0, r2
 80073be:	4619      	mov	r1, r3
 80073c0:	2200      	movs	r2, #0
 80073c2:	2300      	movs	r3, #0
 80073c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80073c8:	f7f9 fc9e 	bl	8000d08 <__aeabi_dcmpeq>
 80073cc:	4607      	mov	r7, r0
 80073ce:	b170      	cbz	r0, 80073ee <_dtoa_r+0x7e>
 80073d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073d2:	2301      	movs	r3, #1
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 82e4 	beq.w	80079a6 <_dtoa_r+0x636>
 80073de:	4869      	ldr	r0, [pc, #420]	; (8007584 <_dtoa_r+0x214>)
 80073e0:	6018      	str	r0, [r3, #0]
 80073e2:	1e43      	subs	r3, r0, #1
 80073e4:	9303      	str	r3, [sp, #12]
 80073e6:	9803      	ldr	r0, [sp, #12]
 80073e8:	b019      	add	sp, #100	; 0x64
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	ab16      	add	r3, sp, #88	; 0x58
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	ab17      	add	r3, sp, #92	; 0x5c
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	4620      	mov	r0, r4
 80073f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073fc:	f001 fef0 	bl	80091e0 <__d2b>
 8007400:	ea5f 561a 	movs.w	r6, sl, lsr #20
 8007404:	4605      	mov	r5, r0
 8007406:	f040 8097 	bne.w	8007538 <_dtoa_r+0x1c8>
 800740a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
 800740e:	443e      	add	r6, r7
 8007410:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8007414:	2820      	cmp	r0, #32
 8007416:	f340 83b5 	ble.w	8007b84 <_dtoa_r+0x814>
 800741a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800741e:	fa0a fa00 	lsl.w	sl, sl, r0
 8007422:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8007426:	fa28 f000 	lsr.w	r0, r8, r0
 800742a:	ea4a 0000 	orr.w	r0, sl, r0
 800742e:	f7f9 f989 	bl	8000744 <__aeabi_ui2d>
 8007432:	2301      	movs	r3, #1
 8007434:	3e01      	subs	r6, #1
 8007436:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800743a:	930f      	str	r3, [sp, #60]	; 0x3c
 800743c:	4b52      	ldr	r3, [pc, #328]	; (8007588 <_dtoa_r+0x218>)
 800743e:	2200      	movs	r2, #0
 8007440:	f7f9 f842 	bl	80004c8 <__aeabi_dsub>
 8007444:	a348      	add	r3, pc, #288	; (adr r3, 8007568 <_dtoa_r+0x1f8>)
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f9 f9f5 	bl	8000838 <__aeabi_dmul>
 800744e:	a348      	add	r3, pc, #288	; (adr r3, 8007570 <_dtoa_r+0x200>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f83a 	bl	80004cc <__adddf3>
 8007458:	4680      	mov	r8, r0
 800745a:	4630      	mov	r0, r6
 800745c:	4689      	mov	r9, r1
 800745e:	f7f9 f981 	bl	8000764 <__aeabi_i2d>
 8007462:	a345      	add	r3, pc, #276	; (adr r3, 8007578 <_dtoa_r+0x208>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f7f9 f9e6 	bl	8000838 <__aeabi_dmul>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	f7f9 f82a 	bl	80004cc <__adddf3>
 8007478:	4680      	mov	r8, r0
 800747a:	4689      	mov	r9, r1
 800747c:	f7f9 fc8c 	bl	8000d98 <__aeabi_d2iz>
 8007480:	2200      	movs	r2, #0
 8007482:	4683      	mov	fp, r0
 8007484:	2300      	movs	r3, #0
 8007486:	4640      	mov	r0, r8
 8007488:	4649      	mov	r1, r9
 800748a:	f7f9 fc47 	bl	8000d1c <__aeabi_dcmplt>
 800748e:	2800      	cmp	r0, #0
 8007490:	f040 827c 	bne.w	800798c <_dtoa_r+0x61c>
 8007494:	f1bb 0f16 	cmp.w	fp, #22
 8007498:	f200 826b 	bhi.w	8007972 <_dtoa_r+0x602>
 800749c:	4b3b      	ldr	r3, [pc, #236]	; (800758c <_dtoa_r+0x21c>)
 800749e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074aa:	f7f9 fc37 	bl	8000d1c <__aeabi_dcmplt>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d072      	beq.n	8007598 <_dtoa_r+0x228>
 80074b2:	2300      	movs	r3, #0
 80074b4:	1bbe      	subs	r6, r7, r6
 80074b6:	930e      	str	r3, [sp, #56]	; 0x38
 80074b8:	1e73      	subs	r3, r6, #1
 80074ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074be:	9306      	str	r3, [sp, #24]
 80074c0:	f100 825e 	bmi.w	8007980 <_dtoa_r+0x610>
 80074c4:	2300      	movs	r3, #0
 80074c6:	9309      	str	r3, [sp, #36]	; 0x24
 80074c8:	f1bb 0f00 	cmp.w	fp, #0
 80074cc:	da6b      	bge.n	80075a6 <_dtoa_r+0x236>
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	f8cd b01c 	str.w	fp, [sp, #28]
 80074d4:	eba3 030b 	sub.w	r3, r3, fp
 80074d8:	9309      	str	r3, [sp, #36]	; 0x24
 80074da:	f1cb 0300 	rsb	r3, fp, #0
 80074de:	930d      	str	r3, [sp, #52]	; 0x34
 80074e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074e2:	2b09      	cmp	r3, #9
 80074e4:	f04f 0b00 	mov.w	fp, #0
 80074e8:	d866      	bhi.n	80075b8 <_dtoa_r+0x248>
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	f340 8348 	ble.w	8007b80 <_dtoa_r+0x810>
 80074f0:	3b04      	subs	r3, #4
 80074f2:	9322      	str	r3, [sp, #136]	; 0x88
 80074f4:	2600      	movs	r6, #0
 80074f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f8:	3b02      	subs	r3, #2
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	f200 8668 	bhi.w	80081d0 <_dtoa_r+0xe60>
 8007500:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007504:	0459045c 	.word	0x0459045c
 8007508:	04330450 	.word	0x04330450
 800750c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800750e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007512:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	ea5a 0308 	orrs.w	r3, sl, r8
 800751c:	d11a      	bne.n	8007554 <_dtoa_r+0x1e4>
 800751e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8664 	beq.w	80081ee <_dtoa_r+0xe7e>
 8007526:	4b1a      	ldr	r3, [pc, #104]	; (8007590 <_dtoa_r+0x220>)
 8007528:	9303      	str	r3, [sp, #12]
 800752a:	3308      	adds	r3, #8
 800752c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800752e:	9803      	ldr	r0, [sp, #12]
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	b019      	add	sp, #100	; 0x64
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800753c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8007540:	4608      	mov	r0, r1
 8007542:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007546:	970f      	str	r7, [sp, #60]	; 0x3c
 8007548:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800754c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800754e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007552:	e773      	b.n	800743c <_dtoa_r+0xcc>
 8007554:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007556:	2b00      	cmp	r3, #0
 8007558:	f040 83ea 	bne.w	8007d30 <_dtoa_r+0x9c0>
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <_dtoa_r+0x224>)
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	e741      	b.n	80073e6 <_dtoa_r+0x76>
 8007562:	bf00      	nop
 8007564:	f3af 8000 	nop.w
 8007568:	636f4361 	.word	0x636f4361
 800756c:	3fd287a7 	.word	0x3fd287a7
 8007570:	8b60c8b3 	.word	0x8b60c8b3
 8007574:	3fc68a28 	.word	0x3fc68a28
 8007578:	509f79fb 	.word	0x509f79fb
 800757c:	3fd34413 	.word	0x3fd34413
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	0800b161 	.word	0x0800b161
 8007588:	3ff80000 	.word	0x3ff80000
 800758c:	0800b2d0 	.word	0x0800b2d0
 8007590:	0800b188 	.word	0x0800b188
 8007594:	0800b184 	.word	0x0800b184
 8007598:	1bbe      	subs	r6, r7, r6
 800759a:	1e73      	subs	r3, r6, #1
 800759c:	9306      	str	r3, [sp, #24]
 800759e:	f100 8485 	bmi.w	8007eac <_dtoa_r+0xb3c>
 80075a2:	900e      	str	r0, [sp, #56]	; 0x38
 80075a4:	9009      	str	r0, [sp, #36]	; 0x24
 80075a6:	9b06      	ldr	r3, [sp, #24]
 80075a8:	445b      	add	r3, fp
 80075aa:	e9cd 3b06 	strd	r3, fp, [sp, #24]
 80075ae:	2300      	movs	r3, #0
 80075b0:	930d      	str	r3, [sp, #52]	; 0x34
 80075b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075b4:	2b09      	cmp	r3, #9
 80075b6:	d998      	bls.n	80074ea <_dtoa_r+0x17a>
 80075b8:	2300      	movs	r3, #0
 80075ba:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
 80075be:	2601      	movs	r6, #1
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	960c      	str	r6, [sp, #48]	; 0x30
 80075c6:	9308      	str	r3, [sp, #32]
 80075c8:	9b08      	ldr	r3, [sp, #32]
 80075ca:	9312      	str	r3, [sp, #72]	; 0x48
 80075cc:	2100      	movs	r1, #0
 80075ce:	6461      	str	r1, [r4, #68]	; 0x44
 80075d0:	4620      	mov	r0, r4
 80075d2:	f001 fabd 	bl	8008b50 <_Balloc>
 80075d6:	9003      	str	r0, [sp, #12]
 80075d8:	2800      	cmp	r0, #0
 80075da:	f000 8601 	beq.w	80081e0 <_dtoa_r+0xe70>
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	6423      	str	r3, [r4, #64]	; 0x40
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	2b0e      	cmp	r3, #14
 80075e6:	f200 8113 	bhi.w	8007810 <_dtoa_r+0x4a0>
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	f000 8110 	beq.w	8007810 <_dtoa_r+0x4a0>
 80075f0:	9907      	ldr	r1, [sp, #28]
 80075f2:	2900      	cmp	r1, #0
 80075f4:	f340 845c 	ble.w	8007eb0 <_dtoa_r+0xb40>
 80075f8:	4bae      	ldr	r3, [pc, #696]	; (80078b4 <_dtoa_r+0x544>)
 80075fa:	f001 020f 	and.w	r2, r1, #15
 80075fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007602:	ea4f 1821 	mov.w	r8, r1, asr #4
 8007606:	05c9      	lsls	r1, r1, #23
 8007608:	e9d3 6700 	ldrd	r6, r7, [r3]
 800760c:	f140 8414 	bpl.w	8007e38 <_dtoa_r+0xac8>
 8007610:	4ba9      	ldr	r3, [pc, #676]	; (80078b8 <_dtoa_r+0x548>)
 8007612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800761a:	f7f9 fa37 	bl	8000a8c <__aeabi_ddiv>
 800761e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007622:	f008 080f 	and.w	r8, r8, #15
 8007626:	f04f 0a03 	mov.w	sl, #3
 800762a:	f1b8 0f00 	cmp.w	r8, #0
 800762e:	d013      	beq.n	8007658 <_dtoa_r+0x2e8>
 8007630:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80078b8 <_dtoa_r+0x548>
 8007634:	f018 0f01 	tst.w	r8, #1
 8007638:	d009      	beq.n	800764e <_dtoa_r+0x2de>
 800763a:	4630      	mov	r0, r6
 800763c:	4639      	mov	r1, r7
 800763e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007642:	f7f9 f8f9 	bl	8000838 <__aeabi_dmul>
 8007646:	f10a 0a01 	add.w	sl, sl, #1
 800764a:	4606      	mov	r6, r0
 800764c:	460f      	mov	r7, r1
 800764e:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007652:	f109 0908 	add.w	r9, r9, #8
 8007656:	d1ed      	bne.n	8007634 <_dtoa_r+0x2c4>
 8007658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	f7f9 fa14 	bl	8000a8c <__aeabi_ddiv>
 8007664:	4680      	mov	r8, r0
 8007666:	4689      	mov	r9, r1
 8007668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800766a:	b143      	cbz	r3, 800767e <_dtoa_r+0x30e>
 800766c:	4b93      	ldr	r3, [pc, #588]	; (80078bc <_dtoa_r+0x54c>)
 800766e:	2200      	movs	r2, #0
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	f7f9 fb52 	bl	8000d1c <__aeabi_dcmplt>
 8007678:	2800      	cmp	r0, #0
 800767a:	f040 8530 	bne.w	80080de <_dtoa_r+0xd6e>
 800767e:	4650      	mov	r0, sl
 8007680:	f7f9 f870 	bl	8000764 <__aeabi_i2d>
 8007684:	4642      	mov	r2, r8
 8007686:	464b      	mov	r3, r9
 8007688:	f7f9 f8d6 	bl	8000838 <__aeabi_dmul>
 800768c:	4b8c      	ldr	r3, [pc, #560]	; (80078c0 <_dtoa_r+0x550>)
 800768e:	2200      	movs	r2, #0
 8007690:	f7f8 ff1c 	bl	80004cc <__adddf3>
 8007694:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007698:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800769c:	9311      	str	r3, [sp, #68]	; 0x44
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8097 	beq.w	80077d4 <_dtoa_r+0x464>
 80076a6:	9b07      	ldr	r3, [sp, #28]
 80076a8:	9314      	str	r3, [sp, #80]	; 0x50
 80076aa:	9b08      	ldr	r3, [sp, #32]
 80076ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80076ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 84a5 	beq.w	8008000 <_dtoa_r+0xc90>
 80076b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80076b8:	4b7e      	ldr	r3, [pc, #504]	; (80078b4 <_dtoa_r+0x544>)
 80076ba:	4982      	ldr	r1, [pc, #520]	; (80078c4 <_dtoa_r+0x554>)
 80076bc:	9e03      	ldr	r6, [sp, #12]
 80076be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076c6:	2000      	movs	r0, #0
 80076c8:	f7f9 f9e0 	bl	8000a8c <__aeabi_ddiv>
 80076cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076d0:	f7f8 fefa 	bl	80004c8 <__aeabi_dsub>
 80076d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076d8:	4649      	mov	r1, r9
 80076da:	4640      	mov	r0, r8
 80076dc:	f7f9 fb5c 	bl	8000d98 <__aeabi_d2iz>
 80076e0:	4607      	mov	r7, r0
 80076e2:	f7f9 f83f 	bl	8000764 <__aeabi_i2d>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	f7f8 feeb 	bl	80004c8 <__aeabi_dsub>
 80076f2:	3730      	adds	r7, #48	; 0x30
 80076f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076f8:	f806 7b01 	strb.w	r7, [r6], #1
 80076fc:	4680      	mov	r8, r0
 80076fe:	4689      	mov	r9, r1
 8007700:	f7f9 fb0c 	bl	8000d1c <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f040 8529 	bne.w	800815c <_dtoa_r+0xdec>
 800770a:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 800770e:	2700      	movs	r7, #0
 8007710:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8007714:	9510      	str	r5, [sp, #64]	; 0x40
 8007716:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007718:	9413      	str	r4, [sp, #76]	; 0x4c
 800771a:	e02a      	b.n	8007772 <_dtoa_r+0x402>
 800771c:	3701      	adds	r7, #1
 800771e:	42af      	cmp	r7, r5
 8007720:	f280 852c 	bge.w	800817c <_dtoa_r+0xe0c>
 8007724:	4b68      	ldr	r3, [pc, #416]	; (80078c8 <_dtoa_r+0x558>)
 8007726:	4650      	mov	r0, sl
 8007728:	4659      	mov	r1, fp
 800772a:	2200      	movs	r2, #0
 800772c:	f7f9 f884 	bl	8000838 <__aeabi_dmul>
 8007730:	4b65      	ldr	r3, [pc, #404]	; (80078c8 <_dtoa_r+0x558>)
 8007732:	2200      	movs	r2, #0
 8007734:	4682      	mov	sl, r0
 8007736:	468b      	mov	fp, r1
 8007738:	4640      	mov	r0, r8
 800773a:	4649      	mov	r1, r9
 800773c:	f7f9 f87c 	bl	8000838 <__aeabi_dmul>
 8007740:	4689      	mov	r9, r1
 8007742:	4680      	mov	r8, r0
 8007744:	f7f9 fb28 	bl	8000d98 <__aeabi_d2iz>
 8007748:	4604      	mov	r4, r0
 800774a:	f7f9 f80b 	bl	8000764 <__aeabi_i2d>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4640      	mov	r0, r8
 8007754:	4649      	mov	r1, r9
 8007756:	f7f8 feb7 	bl	80004c8 <__aeabi_dsub>
 800775a:	3430      	adds	r4, #48	; 0x30
 800775c:	f806 4b01 	strb.w	r4, [r6], #1
 8007760:	4652      	mov	r2, sl
 8007762:	465b      	mov	r3, fp
 8007764:	4680      	mov	r8, r0
 8007766:	4689      	mov	r9, r1
 8007768:	f7f9 fad8 	bl	8000d1c <__aeabi_dcmplt>
 800776c:	2800      	cmp	r0, #0
 800776e:	f040 84f3 	bne.w	8008158 <_dtoa_r+0xde8>
 8007772:	4642      	mov	r2, r8
 8007774:	464b      	mov	r3, r9
 8007776:	4951      	ldr	r1, [pc, #324]	; (80078bc <_dtoa_r+0x54c>)
 8007778:	2000      	movs	r0, #0
 800777a:	f7f8 fea5 	bl	80004c8 <__aeabi_dsub>
 800777e:	4652      	mov	r2, sl
 8007780:	465b      	mov	r3, fp
 8007782:	f7f9 facb 	bl	8000d1c <__aeabi_dcmplt>
 8007786:	2800      	cmp	r0, #0
 8007788:	d0c8      	beq.n	800771c <_dtoa_r+0x3ac>
 800778a:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
 800778e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007790:	9a03      	ldr	r2, [sp, #12]
 8007792:	9307      	str	r3, [sp, #28]
 8007794:	e002      	b.n	800779c <_dtoa_r+0x42c>
 8007796:	4296      	cmp	r6, r2
 8007798:	f000 84c8 	beq.w	800812c <_dtoa_r+0xdbc>
 800779c:	46b2      	mov	sl, r6
 800779e:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 80077a2:	2b39      	cmp	r3, #57	; 0x39
 80077a4:	d0f7      	beq.n	8007796 <_dtoa_r+0x426>
 80077a6:	3301      	adds	r3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	7033      	strb	r3, [r6, #0]
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	3301      	adds	r3, #1
 80077b0:	9307      	str	r3, [sp, #28]
 80077b2:	e1c8      	b.n	8007b46 <_dtoa_r+0x7d6>
 80077b4:	4650      	mov	r0, sl
 80077b6:	f7f8 ffd5 	bl	8000764 <__aeabi_i2d>
 80077ba:	4642      	mov	r2, r8
 80077bc:	464b      	mov	r3, r9
 80077be:	f7f9 f83b 	bl	8000838 <__aeabi_dmul>
 80077c2:	4b3f      	ldr	r3, [pc, #252]	; (80078c0 <_dtoa_r+0x550>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	f7f8 fe81 	bl	80004cc <__adddf3>
 80077ca:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80077ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077d2:	9311      	str	r3, [sp, #68]	; 0x44
 80077d4:	4b3d      	ldr	r3, [pc, #244]	; (80078cc <_dtoa_r+0x55c>)
 80077d6:	4640      	mov	r0, r8
 80077d8:	4649      	mov	r1, r9
 80077da:	2200      	movs	r2, #0
 80077dc:	f7f8 fe74 	bl	80004c8 <__aeabi_dsub>
 80077e0:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80077e4:	464b      	mov	r3, r9
 80077e6:	4642      	mov	r2, r8
 80077e8:	4606      	mov	r6, r0
 80077ea:	460f      	mov	r7, r1
 80077ec:	f7f9 fab4 	bl	8000d58 <__aeabi_dcmpgt>
 80077f0:	4681      	mov	r9, r0
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f040 84aa 	bne.w	800814c <_dtoa_r+0xddc>
 80077f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077fc:	4602      	mov	r2, r0
 80077fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007802:	4630      	mov	r0, r6
 8007804:	4639      	mov	r1, r7
 8007806:	f7f9 fa89 	bl	8000d1c <__aeabi_dcmplt>
 800780a:	2800      	cmp	r0, #0
 800780c:	f040 8345 	bne.w	8007e9a <_dtoa_r+0xb2a>
 8007810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007812:	2b00      	cmp	r3, #0
 8007814:	f2c0 808c 	blt.w	8007930 <_dtoa_r+0x5c0>
 8007818:	9a07      	ldr	r2, [sp, #28]
 800781a:	2a0e      	cmp	r2, #14
 800781c:	f300 8088 	bgt.w	8007930 <_dtoa_r+0x5c0>
 8007820:	4b24      	ldr	r3, [pc, #144]	; (80078b4 <_dtoa_r+0x544>)
 8007822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007826:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800782a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800782c:	2b00      	cmp	r3, #0
 800782e:	da1b      	bge.n	8007868 <_dtoa_r+0x4f8>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dc18      	bgt.n	8007868 <_dtoa_r+0x4f8>
 8007836:	f040 832e 	bne.w	8007e96 <_dtoa_r+0xb26>
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <_dtoa_r+0x55c>)
 800783c:	2200      	movs	r2, #0
 800783e:	4650      	mov	r0, sl
 8007840:	4659      	mov	r1, fp
 8007842:	f7f8 fff9 	bl	8000838 <__aeabi_dmul>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800784e:	f7f9 fa6f 	bl	8000d30 <__aeabi_dcmple>
 8007852:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007856:	464e      	mov	r6, r9
 8007858:	2800      	cmp	r0, #0
 800785a:	f000 82c7 	beq.w	8007dec <_dtoa_r+0xa7c>
 800785e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007860:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007864:	43df      	mvns	r7, r3
 8007866:	e2c9      	b.n	8007dfc <_dtoa_r+0xa8c>
 8007868:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 800786c:	4652      	mov	r2, sl
 800786e:	465b      	mov	r3, fp
 8007870:	4638      	mov	r0, r7
 8007872:	4641      	mov	r1, r8
 8007874:	f7f9 f90a 	bl	8000a8c <__aeabi_ddiv>
 8007878:	f7f9 fa8e 	bl	8000d98 <__aeabi_d2iz>
 800787c:	4681      	mov	r9, r0
 800787e:	9009      	str	r0, [sp, #36]	; 0x24
 8007880:	f7f8 ff70 	bl	8000764 <__aeabi_i2d>
 8007884:	4652      	mov	r2, sl
 8007886:	465b      	mov	r3, fp
 8007888:	f7f8 ffd6 	bl	8000838 <__aeabi_dmul>
 800788c:	9e03      	ldr	r6, [sp, #12]
 800788e:	460b      	mov	r3, r1
 8007890:	4602      	mov	r2, r0
 8007892:	4641      	mov	r1, r8
 8007894:	4638      	mov	r0, r7
 8007896:	f7f8 fe17 	bl	80004c8 <__aeabi_dsub>
 800789a:	f109 0330 	add.w	r3, r9, #48	; 0x30
 800789e:	f806 3b01 	strb.w	r3, [r6], #1
 80078a2:	9b08      	ldr	r3, [sp, #32]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f000 835c 	beq.w	8007f62 <_dtoa_r+0xbf2>
 80078aa:	9406      	str	r4, [sp, #24]
 80078ac:	2701      	movs	r7, #1
 80078ae:	9504      	str	r5, [sp, #16]
 80078b0:	461c      	mov	r4, r3
 80078b2:	e02a      	b.n	800790a <_dtoa_r+0x59a>
 80078b4:	0800b2d0 	.word	0x0800b2d0
 80078b8:	0800b2a8 	.word	0x0800b2a8
 80078bc:	3ff00000 	.word	0x3ff00000
 80078c0:	401c0000 	.word	0x401c0000
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	40240000 	.word	0x40240000
 80078cc:	40140000 	.word	0x40140000
 80078d0:	4652      	mov	r2, sl
 80078d2:	465b      	mov	r3, fp
 80078d4:	4640      	mov	r0, r8
 80078d6:	4649      	mov	r1, r9
 80078d8:	f7f9 f8d8 	bl	8000a8c <__aeabi_ddiv>
 80078dc:	f7f9 fa5c 	bl	8000d98 <__aeabi_d2iz>
 80078e0:	4605      	mov	r5, r0
 80078e2:	f7f8 ff3f 	bl	8000764 <__aeabi_i2d>
 80078e6:	4652      	mov	r2, sl
 80078e8:	465b      	mov	r3, fp
 80078ea:	f7f8 ffa5 	bl	8000838 <__aeabi_dmul>
 80078ee:	3701      	adds	r7, #1
 80078f0:	460b      	mov	r3, r1
 80078f2:	4602      	mov	r2, r0
 80078f4:	4649      	mov	r1, r9
 80078f6:	4640      	mov	r0, r8
 80078f8:	f7f8 fde6 	bl	80004c8 <__aeabi_dsub>
 80078fc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8007900:	42a7      	cmp	r7, r4
 8007902:	f806 3b01 	strb.w	r3, [r6], #1
 8007906:	f000 8329 	beq.w	8007f5c <_dtoa_r+0xbec>
 800790a:	4bac      	ldr	r3, [pc, #688]	; (8007bbc <_dtoa_r+0x84c>)
 800790c:	2200      	movs	r2, #0
 800790e:	f7f8 ff93 	bl	8000838 <__aeabi_dmul>
 8007912:	2200      	movs	r2, #0
 8007914:	2300      	movs	r3, #0
 8007916:	4680      	mov	r8, r0
 8007918:	4689      	mov	r9, r1
 800791a:	f7f9 f9f5 	bl	8000d08 <__aeabi_dcmpeq>
 800791e:	2800      	cmp	r0, #0
 8007920:	d0d6      	beq.n	80078d0 <_dtoa_r+0x560>
 8007922:	9d04      	ldr	r5, [sp, #16]
 8007924:	9c06      	ldr	r4, [sp, #24]
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	3301      	adds	r3, #1
 800792a:	9307      	str	r3, [sp, #28]
 800792c:	46b2      	mov	sl, r6
 800792e:	e10a      	b.n	8007b46 <_dtoa_r+0x7d6>
 8007930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007932:	2a00      	cmp	r2, #0
 8007934:	d03d      	beq.n	80079b2 <_dtoa_r+0x642>
 8007936:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007938:	2a01      	cmp	r2, #1
 800793a:	f340 829c 	ble.w	8007e76 <_dtoa_r+0xb06>
 800793e:	9b08      	ldr	r3, [sp, #32]
 8007940:	f103 38ff 	add.w	r8, r3, #4294967295
 8007944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007946:	4543      	cmp	r3, r8
 8007948:	f2c0 826d 	blt.w	8007e26 <_dtoa_r+0xab6>
 800794c:	eba3 0808 	sub.w	r8, r3, r8
 8007950:	9b08      	ldr	r3, [sp, #32]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f2c0 833c 	blt.w	8007fd0 <_dtoa_r+0xc60>
 8007958:	9a06      	ldr	r2, [sp, #24]
 800795a:	441a      	add	r2, r3
 800795c:	9206      	str	r2, [sp, #24]
 800795e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007960:	4617      	mov	r7, r2
 8007962:	441a      	add	r2, r3
 8007964:	9209      	str	r2, [sp, #36]	; 0x24
 8007966:	2101      	movs	r1, #1
 8007968:	4620      	mov	r0, r4
 800796a:	f001 f9bf 	bl	8008cec <__i2b>
 800796e:	4606      	mov	r6, r0
 8007970:	e023      	b.n	80079ba <_dtoa_r+0x64a>
 8007972:	2301      	movs	r3, #1
 8007974:	1bbe      	subs	r6, r7, r6
 8007976:	930e      	str	r3, [sp, #56]	; 0x38
 8007978:	1e73      	subs	r3, r6, #1
 800797a:	9306      	str	r3, [sp, #24]
 800797c:	f57f ada2 	bpl.w	80074c4 <_dtoa_r+0x154>
 8007980:	f1c6 0301 	rsb	r3, r6, #1
 8007984:	9309      	str	r3, [sp, #36]	; 0x24
 8007986:	2300      	movs	r3, #0
 8007988:	9306      	str	r3, [sp, #24]
 800798a:	e59d      	b.n	80074c8 <_dtoa_r+0x158>
 800798c:	4658      	mov	r0, fp
 800798e:	f7f8 fee9 	bl	8000764 <__aeabi_i2d>
 8007992:	4642      	mov	r2, r8
 8007994:	464b      	mov	r3, r9
 8007996:	f7f9 f9b7 	bl	8000d08 <__aeabi_dcmpeq>
 800799a:	2800      	cmp	r0, #0
 800799c:	f47f ad7a 	bne.w	8007494 <_dtoa_r+0x124>
 80079a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079a4:	e576      	b.n	8007494 <_dtoa_r+0x124>
 80079a6:	4b86      	ldr	r3, [pc, #536]	; (8007bc0 <_dtoa_r+0x850>)
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	9803      	ldr	r0, [sp, #12]
 80079ac:	b019      	add	sp, #100	; 0x64
 80079ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80079b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	dd0c      	ble.n	80079d8 <_dtoa_r+0x668>
 80079be:	9906      	ldr	r1, [sp, #24]
 80079c0:	2900      	cmp	r1, #0
 80079c2:	460b      	mov	r3, r1
 80079c4:	dd08      	ble.n	80079d8 <_dtoa_r+0x668>
 80079c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c8:	42b9      	cmp	r1, r7
 80079ca:	bfa8      	it	ge
 80079cc:	463b      	movge	r3, r7
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	1aff      	subs	r7, r7, r3
 80079d2:	1acb      	subs	r3, r1, r3
 80079d4:	9209      	str	r2, [sp, #36]	; 0x24
 80079d6:	9306      	str	r3, [sp, #24]
 80079d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079da:	b1db      	cbz	r3, 8007a14 <_dtoa_r+0x6a4>
 80079dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 825d 	beq.w	8007e9e <_dtoa_r+0xb2e>
 80079e4:	f1b8 0f00 	cmp.w	r8, #0
 80079e8:	dd0f      	ble.n	8007a0a <_dtoa_r+0x69a>
 80079ea:	4631      	mov	r1, r6
 80079ec:	4642      	mov	r2, r8
 80079ee:	4620      	mov	r0, r4
 80079f0:	f001 fa58 	bl	8008ea4 <__pow5mult>
 80079f4:	462a      	mov	r2, r5
 80079f6:	4601      	mov	r1, r0
 80079f8:	4606      	mov	r6, r0
 80079fa:	4620      	mov	r0, r4
 80079fc:	f001 f9a4 	bl	8008d48 <__multiply>
 8007a00:	4629      	mov	r1, r5
 8007a02:	4605      	mov	r5, r0
 8007a04:	4620      	mov	r0, r4
 8007a06:	f001 f8c9 	bl	8008b9c <_Bfree>
 8007a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a0c:	ebb3 0208 	subs.w	r2, r3, r8
 8007a10:	f040 82d8 	bne.w	8007fc4 <_dtoa_r+0xc54>
 8007a14:	2101      	movs	r1, #1
 8007a16:	4620      	mov	r0, r4
 8007a18:	f001 f968 	bl	8008cec <__i2b>
 8007a1c:	f1bb 0f00 	cmp.w	fp, #0
 8007a20:	4681      	mov	r9, r0
 8007a22:	f300 80b4 	bgt.w	8007b8e <_dtoa_r+0x81e>
 8007a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	f340 8186 	ble.w	8007d3a <_dtoa_r+0x9ca>
 8007a2e:	f04f 0a00 	mov.w	sl, #0
 8007a32:	2001      	movs	r0, #1
 8007a34:	f1bb 0f00 	cmp.w	fp, #0
 8007a38:	f040 80b5 	bne.w	8007ba6 <_dtoa_r+0x836>
 8007a3c:	9a06      	ldr	r2, [sp, #24]
 8007a3e:	4410      	add	r0, r2
 8007a40:	f010 001f 	ands.w	r0, r0, #31
 8007a44:	f000 8093 	beq.w	8007b6e <_dtoa_r+0x7fe>
 8007a48:	f1c0 0320 	rsb	r3, r0, #32
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	f340 83d2 	ble.w	80081f6 <_dtoa_r+0xe86>
 8007a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a54:	f1c0 001c 	rsb	r0, r0, #28
 8007a58:	4403      	add	r3, r0
 8007a5a:	4402      	add	r2, r0
 8007a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5e:	4407      	add	r7, r0
 8007a60:	9206      	str	r2, [sp, #24]
 8007a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd05      	ble.n	8007a74 <_dtoa_r+0x704>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f001 fa79 	bl	8008f64 <__lshift>
 8007a72:	4605      	mov	r5, r0
 8007a74:	9b06      	ldr	r3, [sp, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd05      	ble.n	8007a86 <_dtoa_r+0x716>
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 fa70 	bl	8008f64 <__lshift>
 8007a84:	4681      	mov	r9, r0
 8007a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 8136 	bne.w	8007cfa <_dtoa_r+0x98a>
 8007a8e:	9b08      	ldr	r3, [sp, #32]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f340 811d 	ble.w	8007cd0 <_dtoa_r+0x960>
 8007a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f040 80a0 	bne.w	8007bde <_dtoa_r+0x86e>
 8007a9e:	9b07      	ldr	r3, [sp, #28]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	9307      	str	r3, [sp, #28]
 8007aa4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007aa8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007aac:	2701      	movs	r7, #1
 8007aae:	e007      	b.n	8007ac0 <_dtoa_r+0x750>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f001 f87a 	bl	8008bb0 <__multadd>
 8007abc:	3701      	adds	r7, #1
 8007abe:	4605      	mov	r5, r0
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f7ff fbc0 	bl	8007248 <quorem>
 8007ac8:	4557      	cmp	r7, sl
 8007aca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007ace:	f808 3b01 	strb.w	r3, [r8], #1
 8007ad2:	dbed      	blt.n	8007ab0 <_dtoa_r+0x740>
 8007ad4:	9a08      	ldr	r2, [sp, #32]
 8007ad6:	2a00      	cmp	r2, #0
 8007ad8:	bfc8      	it	gt
 8007ada:	4693      	movgt	fp, r2
 8007adc:	9a03      	ldr	r2, [sp, #12]
 8007ade:	bfd8      	it	le
 8007ae0:	f04f 0b01 	movle.w	fp, #1
 8007ae4:	4493      	add	fp, r2
 8007ae6:	2700      	movs	r7, #0
 8007ae8:	4629      	mov	r1, r5
 8007aea:	2201      	movs	r2, #1
 8007aec:	4620      	mov	r0, r4
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	f001 fa38 	bl	8008f64 <__lshift>
 8007af4:	4649      	mov	r1, r9
 8007af6:	4605      	mov	r5, r0
 8007af8:	f001 faac 	bl	8009054 <__mcmp>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	f340 81a8 	ble.w	8007e52 <_dtoa_r+0xae2>
 8007b02:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 8007b06:	9a03      	ldr	r2, [sp, #12]
 8007b08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007b0c:	e004      	b.n	8007b18 <_dtoa_r+0x7a8>
 8007b0e:	455a      	cmp	r2, fp
 8007b10:	f000 81aa 	beq.w	8007e68 <_dtoa_r+0xaf8>
 8007b14:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8007b18:	2b39      	cmp	r3, #57	; 0x39
 8007b1a:	f10b 0a01 	add.w	sl, fp, #1
 8007b1e:	d0f6      	beq.n	8007b0e <_dtoa_r+0x79e>
 8007b20:	3301      	adds	r3, #1
 8007b22:	f88b 3000 	strb.w	r3, [fp]
 8007b26:	4649      	mov	r1, r9
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 f837 	bl	8008b9c <_Bfree>
 8007b2e:	b156      	cbz	r6, 8007b46 <_dtoa_r+0x7d6>
 8007b30:	b12f      	cbz	r7, 8007b3e <_dtoa_r+0x7ce>
 8007b32:	42b7      	cmp	r7, r6
 8007b34:	d003      	beq.n	8007b3e <_dtoa_r+0x7ce>
 8007b36:	4639      	mov	r1, r7
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f001 f82f 	bl	8008b9c <_Bfree>
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4620      	mov	r0, r4
 8007b42:	f001 f82b 	bl	8008b9c <_Bfree>
 8007b46:	4629      	mov	r1, r5
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 f827 	bl	8008b9c <_Bfree>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	f88a 3000 	strb.w	r3, [sl]
 8007b54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007b56:	9a07      	ldr	r2, [sp, #28]
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f43f ac42 	beq.w	80073e6 <_dtoa_r+0x76>
 8007b62:	9803      	ldr	r0, [sp, #12]
 8007b64:	f8c3 a000 	str.w	sl, [r3]
 8007b68:	b019      	add	sp, #100	; 0x64
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6e:	201c      	movs	r0, #28
 8007b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b72:	4403      	add	r3, r0
 8007b74:	9309      	str	r3, [sp, #36]	; 0x24
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	4403      	add	r3, r0
 8007b7a:	4407      	add	r7, r0
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	e770      	b.n	8007a62 <_dtoa_r+0x6f2>
 8007b80:	2601      	movs	r6, #1
 8007b82:	e4b8      	b.n	80074f6 <_dtoa_r+0x186>
 8007b84:	f1c0 0020 	rsb	r0, r0, #32
 8007b88:	fa08 f000 	lsl.w	r0, r8, r0
 8007b8c:	e44f      	b.n	800742e <_dtoa_r+0xbe>
 8007b8e:	4601      	mov	r1, r0
 8007b90:	465a      	mov	r2, fp
 8007b92:	4620      	mov	r0, r4
 8007b94:	f001 f986 	bl	8008ea4 <__pow5mult>
 8007b98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	4681      	mov	r9, r0
 8007b9e:	f340 81b3 	ble.w	8007f08 <_dtoa_r+0xb98>
 8007ba2:	f04f 0a00 	mov.w	sl, #0
 8007ba6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007baa:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007bae:	6918      	ldr	r0, [r3, #16]
 8007bb0:	f001 f84e 	bl	8008c50 <__hi0bits>
 8007bb4:	f1c0 0020 	rsb	r0, r0, #32
 8007bb8:	e740      	b.n	8007a3c <_dtoa_r+0x6cc>
 8007bba:	bf00      	nop
 8007bbc:	40240000 	.word	0x40240000
 8007bc0:	0800b160 	.word	0x0800b160
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	220a      	movs	r2, #10
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fff0 	bl	8008bb0 <__multadd>
 8007bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	f340 82e7 	ble.w	80081a8 <_dtoa_r+0xe38>
 8007bda:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8007bde:	2f00      	cmp	r7, #0
 8007be0:	f300 811a 	bgt.w	8007e18 <_dtoa_r+0xaa8>
 8007be4:	f1ba 0f00 	cmp.w	sl, #0
 8007be8:	f040 81d5 	bne.w	8007f96 <_dtoa_r+0xc26>
 8007bec:	46b0      	mov	r8, r6
 8007bee:	9b04      	ldr	r3, [sp, #16]
 8007bf0:	9f03      	ldr	r7, [sp, #12]
 8007bf2:	9908      	ldr	r1, [sp, #32]
 8007bf4:	f003 0201 	and.w	r2, r3, #1
 8007bf8:	1e7b      	subs	r3, r7, #1
 8007bfa:	4419      	add	r1, r3
 8007bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bfe:	920c      	str	r2, [sp, #48]	; 0x30
 8007c00:	4313      	orrs	r3, r2
 8007c02:	9109      	str	r1, [sp, #36]	; 0x24
 8007c04:	930a      	str	r3, [sp, #40]	; 0x28
 8007c06:	4649      	mov	r1, r9
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f7ff fb1d 	bl	8007248 <quorem>
 8007c0e:	4631      	mov	r1, r6
 8007c10:	4683      	mov	fp, r0
 8007c12:	4628      	mov	r0, r5
 8007c14:	f001 fa1e 	bl	8009054 <__mcmp>
 8007c18:	4642      	mov	r2, r8
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f001 fa38 	bl	8009094 <__mdiff>
 8007c24:	68c2      	ldr	r2, [r0, #12]
 8007c26:	4601      	mov	r1, r0
 8007c28:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8007c2c:	2a00      	cmp	r2, #0
 8007c2e:	d142      	bne.n	8007cb6 <_dtoa_r+0x946>
 8007c30:	9006      	str	r0, [sp, #24]
 8007c32:	4628      	mov	r0, r5
 8007c34:	9308      	str	r3, [sp, #32]
 8007c36:	f001 fa0d 	bl	8009054 <__mcmp>
 8007c3a:	9906      	ldr	r1, [sp, #24]
 8007c3c:	9004      	str	r0, [sp, #16]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 ffac 	bl	8008b9c <_Bfree>
 8007c44:	9a04      	ldr	r2, [sp, #16]
 8007c46:	9b08      	ldr	r3, [sp, #32]
 8007c48:	b91a      	cbnz	r2, 8007c52 <_dtoa_r+0x8e2>
 8007c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c4c:	2900      	cmp	r1, #0
 8007c4e:	f000 829b 	beq.w	8008188 <_dtoa_r+0xe18>
 8007c52:	f1ba 0f00 	cmp.w	sl, #0
 8007c56:	f2c0 8163 	blt.w	8007f20 <_dtoa_r+0xbb0>
 8007c5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007c5c:	ea4a 0a01 	orr.w	sl, sl, r1
 8007c60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c62:	ea51 010a 	orrs.w	r1, r1, sl
 8007c66:	f000 815b 	beq.w	8007f20 <_dtoa_r+0xbb0>
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	f300 81b4 	bgt.w	8007fd8 <_dtoa_r+0xc68>
 8007c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c72:	703b      	strb	r3, [r7, #0]
 8007c74:	f107 0a01 	add.w	sl, r7, #1
 8007c78:	4297      	cmp	r7, r2
 8007c7a:	46d3      	mov	fp, sl
 8007c7c:	f000 81b2 	beq.w	8007fe4 <_dtoa_r+0xc74>
 8007c80:	4629      	mov	r1, r5
 8007c82:	2300      	movs	r3, #0
 8007c84:	220a      	movs	r2, #10
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 ff92 	bl	8008bb0 <__multadd>
 8007c8c:	4546      	cmp	r6, r8
 8007c8e:	4605      	mov	r5, r0
 8007c90:	4631      	mov	r1, r6
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	f04f 020a 	mov.w	r2, #10
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	d012      	beq.n	8007cc4 <_dtoa_r+0x954>
 8007c9e:	f000 ff87 	bl	8008bb0 <__multadd>
 8007ca2:	4641      	mov	r1, r8
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	220a      	movs	r2, #10
 8007caa:	4620      	mov	r0, r4
 8007cac:	f000 ff80 	bl	8008bb0 <__multadd>
 8007cb0:	4657      	mov	r7, sl
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	e7a7      	b.n	8007c06 <_dtoa_r+0x896>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	f000 ff6f 	bl	8008b9c <_Bfree>
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	e7c6      	b.n	8007c52 <_dtoa_r+0x8e2>
 8007cc4:	f000 ff74 	bl	8008bb0 <__multadd>
 8007cc8:	4657      	mov	r7, sl
 8007cca:	4606      	mov	r6, r0
 8007ccc:	4680      	mov	r8, r0
 8007cce:	e79a      	b.n	8007c06 <_dtoa_r+0x896>
 8007cd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	dc79      	bgt.n	8007dca <_dtoa_r+0xa5a>
 8007cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d180      	bne.n	8007bde <_dtoa_r+0x86e>
 8007cdc:	9b07      	ldr	r3, [sp, #28]
 8007cde:	4649      	mov	r1, r9
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	9307      	str	r3, [sp, #28]
 8007ce6:	f7ff faaf 	bl	8007248 <quorem>
 8007cea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007cee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cf2:	f80b 3b01 	strb.w	r3, [fp], #1
 8007cf6:	2700      	movs	r7, #0
 8007cf8:	e6f6      	b.n	8007ae8 <_dtoa_r+0x778>
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f001 f9a9 	bl	8009054 <__mcmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f6bf aec3 	bge.w	8007a8e <_dtoa_r+0x71e>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	220a      	movs	r2, #10
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 ff4e 	bl	8008bb0 <__multadd>
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8007d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f47f af50 	bne.w	8007bc4 <_dtoa_r+0x854>
 8007d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f340 8235 	ble.w	8008196 <_dtoa_r+0xe26>
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	e6b9      	b.n	8007aa4 <_dtoa_r+0x734>
 8007d30:	4baf      	ldr	r3, [pc, #700]	; (8007ff0 <_dtoa_r+0xc80>)
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	3303      	adds	r3, #3
 8007d36:	f7ff bbf9 	b.w	800752c <_dtoa_r+0x1bc>
 8007d3a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8007d3e:	2900      	cmp	r1, #0
 8007d40:	f47f ae75 	bne.w	8007a2e <_dtoa_r+0x6be>
 8007d44:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f47f ae70 	bne.w	8007a2e <_dtoa_r+0x6be>
 8007d4e:	4ba9      	ldr	r3, [pc, #676]	; (8007ff4 <_dtoa_r+0xc84>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 81fe 	beq.w	8008154 <_dtoa_r+0xde4>
 8007d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5e:	9b06      	ldr	r3, [sp, #24]
 8007d60:	3301      	adds	r3, #1
 8007d62:	9306      	str	r3, [sp, #24]
 8007d64:	f04f 0a01 	mov.w	sl, #1
 8007d68:	e663      	b.n	8007a32 <_dtoa_r+0x6c2>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d70:	9a07      	ldr	r2, [sp, #28]
 8007d72:	4413      	add	r3, r2
 8007d74:	9312      	str	r3, [sp, #72]	; 0x48
 8007d76:	3301      	adds	r3, #1
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	461f      	mov	r7, r3
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	bfb8      	it	lt
 8007d80:	2701      	movlt	r7, #1
 8007d82:	2100      	movs	r1, #0
 8007d84:	2f17      	cmp	r7, #23
 8007d86:	6461      	str	r1, [r4, #68]	; 0x44
 8007d88:	f77f ac22 	ble.w	80075d0 <_dtoa_r+0x260>
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	2304      	movs	r3, #4
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	f103 0014 	add.w	r0, r3, #20
 8007d96:	42b8      	cmp	r0, r7
 8007d98:	4611      	mov	r1, r2
 8007d9a:	f102 0201 	add.w	r2, r2, #1
 8007d9e:	d9f7      	bls.n	8007d90 <_dtoa_r+0xa20>
 8007da0:	6461      	str	r1, [r4, #68]	; 0x44
 8007da2:	e415      	b.n	80075d0 <_dtoa_r+0x260>
 8007da4:	2301      	movs	r3, #1
 8007da6:	930c      	str	r3, [sp, #48]	; 0x30
 8007da8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	dd4c      	ble.n	8007e48 <_dtoa_r+0xad8>
 8007dae:	9312      	str	r3, [sp, #72]	; 0x48
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	461f      	mov	r7, r3
 8007db4:	e7e5      	b.n	8007d82 <_dtoa_r+0xa12>
 8007db6:	2300      	movs	r3, #0
 8007db8:	930c      	str	r3, [sp, #48]	; 0x30
 8007dba:	e7d8      	b.n	8007d6e <_dtoa_r+0x9fe>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8007dc0:	e7f2      	b.n	8007da8 <_dtoa_r+0xa38>
 8007dc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dc4:	f8cd 801c 	str.w	r8, [sp, #28]
 8007dc8:	9308      	str	r3, [sp, #32]
 8007dca:	9b08      	ldr	r3, [sp, #32]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f47f ad46 	bne.w	800785e <_dtoa_r+0x4ee>
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	2205      	movs	r2, #5
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 feea 	bl	8008bb0 <__multadd>
 8007ddc:	4601      	mov	r1, r0
 8007dde:	4681      	mov	r9, r0
 8007de0:	4628      	mov	r0, r5
 8007de2:	f001 f937 	bl	8009054 <__mcmp>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f77f ad39 	ble.w	800785e <_dtoa_r+0x4ee>
 8007dec:	9803      	ldr	r0, [sp, #12]
 8007dee:	9f07      	ldr	r7, [sp, #28]
 8007df0:	2331      	movs	r3, #49	; 0x31
 8007df2:	4680      	mov	r8, r0
 8007df4:	f800 3b01 	strb.w	r3, [r0], #1
 8007df8:	3701      	adds	r7, #1
 8007dfa:	9003      	str	r0, [sp, #12]
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fecc 	bl	8008b9c <_Bfree>
 8007e04:	1c7b      	adds	r3, r7, #1
 8007e06:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e10:	2e00      	cmp	r6, #0
 8007e12:	f47f ae94 	bne.w	8007b3e <_dtoa_r+0x7ce>
 8007e16:	e696      	b.n	8007b46 <_dtoa_r+0x7d6>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f001 f8a1 	bl	8008f64 <__lshift>
 8007e22:	4606      	mov	r6, r0
 8007e24:	e6de      	b.n	8007be4 <_dtoa_r+0x874>
 8007e26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e28:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8007e2c:	eba8 0303 	sub.w	r3, r8, r3
 8007e30:	449b      	add	fp, r3
 8007e32:	f04f 0800 	mov.w	r8, #0
 8007e36:	e58b      	b.n	8007950 <_dtoa_r+0x5e0>
 8007e38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e3c:	f04f 0a02 	mov.w	sl, #2
 8007e40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e44:	f7ff bbf1 	b.w	800762a <_dtoa_r+0x2ba>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8007e4c:	9308      	str	r3, [sp, #32]
 8007e4e:	f7ff bbbb 	b.w	80075c8 <_dtoa_r+0x258>
 8007e52:	d103      	bne.n	8007e5c <_dtoa_r+0xaec>
 8007e54:	9b04      	ldr	r3, [sp, #16]
 8007e56:	07db      	lsls	r3, r3, #31
 8007e58:	f53f ae53 	bmi.w	8007b02 <_dtoa_r+0x792>
 8007e5c:	46da      	mov	sl, fp
 8007e5e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8007e62:	2b30      	cmp	r3, #48	; 0x30
 8007e64:	d0fa      	beq.n	8007e5c <_dtoa_r+0xaec>
 8007e66:	e65e      	b.n	8007b26 <_dtoa_r+0x7b6>
 8007e68:	9b07      	ldr	r3, [sp, #28]
 8007e6a:	9a03      	ldr	r2, [sp, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	2331      	movs	r3, #49	; 0x31
 8007e72:	7013      	strb	r3, [r2, #0]
 8007e74:	e657      	b.n	8007b26 <_dtoa_r+0x7b6>
 8007e76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	f000 8126 	beq.w	80080ca <_dtoa_r+0xd5a>
 8007e7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e82:	9a06      	ldr	r2, [sp, #24]
 8007e84:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8007e88:	441a      	add	r2, r3
 8007e8a:	9206      	str	r2, [sp, #24]
 8007e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e8e:	4617      	mov	r7, r2
 8007e90:	441a      	add	r2, r3
 8007e92:	9209      	str	r2, [sp, #36]	; 0x24
 8007e94:	e567      	b.n	8007966 <_dtoa_r+0x5f6>
 8007e96:	f04f 0900 	mov.w	r9, #0
 8007e9a:	464e      	mov	r6, r9
 8007e9c:	e4df      	b.n	800785e <_dtoa_r+0x4ee>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fffe 	bl	8008ea4 <__pow5mult>
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	e5b3      	b.n	8007a14 <_dtoa_r+0x6a4>
 8007eac:	900e      	str	r0, [sp, #56]	; 0x38
 8007eae:	e567      	b.n	8007980 <_dtoa_r+0x610>
 8007eb0:	f000 810f 	beq.w	80080d2 <_dtoa_r+0xd62>
 8007eb4:	9a07      	ldr	r2, [sp, #28]
 8007eb6:	4b50      	ldr	r3, [pc, #320]	; (8007ff8 <_dtoa_r+0xc88>)
 8007eb8:	4256      	negs	r6, r2
 8007eba:	f006 020f 	and.w	r2, r6, #15
 8007ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007eca:	f7f8 fcb5 	bl	8000838 <__aeabi_dmul>
 8007ece:	1136      	asrs	r6, r6, #4
 8007ed0:	4680      	mov	r8, r0
 8007ed2:	4689      	mov	r9, r1
 8007ed4:	f000 8171 	beq.w	80081ba <_dtoa_r+0xe4a>
 8007ed8:	4f48      	ldr	r7, [pc, #288]	; (8007ffc <_dtoa_r+0xc8c>)
 8007eda:	2300      	movs	r3, #0
 8007edc:	f04f 0a02 	mov.w	sl, #2
 8007ee0:	07f2      	lsls	r2, r6, #31
 8007ee2:	d506      	bpl.n	8007ef2 <_dtoa_r+0xb82>
 8007ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee8:	f7f8 fca6 	bl	8000838 <__aeabi_dmul>
 8007eec:	f10a 0a01 	add.w	sl, sl, #1
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	1076      	asrs	r6, r6, #1
 8007ef4:	f107 0708 	add.w	r7, r7, #8
 8007ef8:	d1f2      	bne.n	8007ee0 <_dtoa_r+0xb70>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f43f abb4 	beq.w	8007668 <_dtoa_r+0x2f8>
 8007f00:	4680      	mov	r8, r0
 8007f02:	4689      	mov	r9, r1
 8007f04:	f7ff bbb0 	b.w	8007668 <_dtoa_r+0x2f8>
 8007f08:	9b04      	ldr	r3, [sp, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f47f ae49 	bne.w	8007ba2 <_dtoa_r+0x832>
 8007f10:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8007f14:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f43f af18 	beq.w	8007d4e <_dtoa_r+0x9de>
 8007f1e:	e640      	b.n	8007ba2 <_dtoa_r+0x832>
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	dd12      	ble.n	8007f4a <_dtoa_r+0xbda>
 8007f24:	4629      	mov	r1, r5
 8007f26:	2201      	movs	r2, #1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	f001 f81a 	bl	8008f64 <__lshift>
 8007f30:	4649      	mov	r1, r9
 8007f32:	4605      	mov	r5, r0
 8007f34:	f001 f88e 	bl	8009054 <__mcmp>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	9b04      	ldr	r3, [sp, #16]
 8007f3c:	f340 8118 	ble.w	8008170 <_dtoa_r+0xe00>
 8007f40:	2b39      	cmp	r3, #57	; 0x39
 8007f42:	f000 80f9 	beq.w	8008138 <_dtoa_r+0xdc8>
 8007f46:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 8007f4a:	46ba      	mov	sl, r7
 8007f4c:	f80a 3b01 	strb.w	r3, [sl], #1
 8007f50:	9b07      	ldr	r3, [sp, #28]
 8007f52:	3301      	adds	r3, #1
 8007f54:	4637      	mov	r7, r6
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	4646      	mov	r6, r8
 8007f5a:	e5e4      	b.n	8007b26 <_dtoa_r+0x7b6>
 8007f5c:	9509      	str	r5, [sp, #36]	; 0x24
 8007f5e:	9c06      	ldr	r4, [sp, #24]
 8007f60:	9d04      	ldr	r5, [sp, #16]
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	f7f8 fab1 	bl	80004cc <__adddf3>
 8007f6a:	4652      	mov	r2, sl
 8007f6c:	465b      	mov	r3, fp
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4689      	mov	r9, r1
 8007f72:	f7f8 fef1 	bl	8000d58 <__aeabi_dcmpgt>
 8007f76:	b960      	cbnz	r0, 8007f92 <_dtoa_r+0xc22>
 8007f78:	4652      	mov	r2, sl
 8007f7a:	465b      	mov	r3, fp
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	4649      	mov	r1, r9
 8007f80:	f7f8 fec2 	bl	8000d08 <__aeabi_dcmpeq>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	f43f acce 	beq.w	8007926 <_dtoa_r+0x5b6>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8c:	07d9      	lsls	r1, r3, #31
 8007f8e:	f57f acca 	bpl.w	8007926 <_dtoa_r+0x5b6>
 8007f92:	9a03      	ldr	r2, [sp, #12]
 8007f94:	e402      	b.n	800779c <_dtoa_r+0x42c>
 8007f96:	6871      	ldr	r1, [r6, #4]
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 fdd9 	bl	8008b50 <_Balloc>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	f000 810e 	beq.w	80081c2 <_dtoa_r+0xe52>
 8007fa6:	6933      	ldr	r3, [r6, #16]
 8007fa8:	3302      	adds	r3, #2
 8007faa:	009a      	lsls	r2, r3, #2
 8007fac:	f106 010c 	add.w	r1, r6, #12
 8007fb0:	300c      	adds	r0, #12
 8007fb2:	f7f8 f925 	bl	8000200 <memcpy>
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	2201      	movs	r2, #1
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 ffd2 	bl	8008f64 <__lshift>
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	e614      	b.n	8007bee <_dtoa_r+0x87e>
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 ff6c 	bl	8008ea4 <__pow5mult>
 8007fcc:	4605      	mov	r5, r0
 8007fce:	e521      	b.n	8007a14 <_dtoa_r+0x6a4>
 8007fd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007fd4:	1a9f      	subs	r7, r3, r2
 8007fd6:	e4c6      	b.n	8007966 <_dtoa_r+0x5f6>
 8007fd8:	2b39      	cmp	r3, #57	; 0x39
 8007fda:	f000 80ad 	beq.w	8008138 <_dtoa_r+0xdc8>
 8007fde:	46ba      	mov	sl, r7
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	e7b3      	b.n	8007f4c <_dtoa_r+0xbdc>
 8007fe4:	9a07      	ldr	r2, [sp, #28]
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	4637      	mov	r7, r6
 8007fea:	9207      	str	r2, [sp, #28]
 8007fec:	4646      	mov	r6, r8
 8007fee:	e57b      	b.n	8007ae8 <_dtoa_r+0x778>
 8007ff0:	0800b184 	.word	0x0800b184
 8007ff4:	7ff00000 	.word	0x7ff00000
 8007ff8:	0800b2d0 	.word	0x0800b2d0
 8007ffc:	0800b2a8 	.word	0x0800b2a8
 8008000:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008004:	4984      	ldr	r1, [pc, #528]	; (8008218 <_dtoa_r+0xea8>)
 8008006:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800800a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800800e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008012:	f7f8 fc11 	bl	8000838 <__aeabi_dmul>
 8008016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800801a:	4649      	mov	r1, r9
 800801c:	4640      	mov	r0, r8
 800801e:	f7f8 febb 	bl	8000d98 <__aeabi_d2iz>
 8008022:	4606      	mov	r6, r0
 8008024:	f7f8 fb9e 	bl	8000764 <__aeabi_i2d>
 8008028:	460b      	mov	r3, r1
 800802a:	4602      	mov	r2, r0
 800802c:	4649      	mov	r1, r9
 800802e:	4640      	mov	r0, r8
 8008030:	f7f8 fa4a 	bl	80004c8 <__aeabi_dsub>
 8008034:	9f03      	ldr	r7, [sp, #12]
 8008036:	4653      	mov	r3, sl
 8008038:	3630      	adds	r6, #48	; 0x30
 800803a:	2b01      	cmp	r3, #1
 800803c:	f807 6b01 	strb.w	r6, [r7], #1
 8008040:	4680      	mov	r8, r0
 8008042:	4689      	mov	r9, r1
 8008044:	f000 80ae 	beq.w	80081a4 <_dtoa_r+0xe34>
 8008048:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	441e      	add	r6, r3
 800804e:	4b73      	ldr	r3, [pc, #460]	; (800821c <_dtoa_r+0xeac>)
 8008050:	2200      	movs	r2, #0
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 fbef 	bl	8000838 <__aeabi_dmul>
 800805a:	4689      	mov	r9, r1
 800805c:	4680      	mov	r8, r0
 800805e:	f7f8 fe9b 	bl	8000d98 <__aeabi_d2iz>
 8008062:	4682      	mov	sl, r0
 8008064:	f7f8 fb7e 	bl	8000764 <__aeabi_i2d>
 8008068:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4640      	mov	r0, r8
 8008072:	4649      	mov	r1, r9
 8008074:	f7f8 fa28 	bl	80004c8 <__aeabi_dsub>
 8008078:	f807 ab01 	strb.w	sl, [r7], #1
 800807c:	42b7      	cmp	r7, r6
 800807e:	4680      	mov	r8, r0
 8008080:	4689      	mov	r9, r1
 8008082:	d1e4      	bne.n	800804e <_dtoa_r+0xcde>
 8008084:	4b66      	ldr	r3, [pc, #408]	; (8008220 <_dtoa_r+0xeb0>)
 8008086:	2200      	movs	r2, #0
 8008088:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800808c:	f7f8 fa1e 	bl	80004cc <__adddf3>
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	f7f8 fe42 	bl	8000d1c <__aeabi_dcmplt>
 8008098:	2800      	cmp	r0, #0
 800809a:	d164      	bne.n	8008166 <_dtoa_r+0xdf6>
 800809c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080a0:	495f      	ldr	r1, [pc, #380]	; (8008220 <_dtoa_r+0xeb0>)
 80080a2:	2000      	movs	r0, #0
 80080a4:	f7f8 fa10 	bl	80004c8 <__aeabi_dsub>
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	f7f8 fe54 	bl	8000d58 <__aeabi_dcmpgt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f43f abad 	beq.w	8007810 <_dtoa_r+0x4a0>
 80080b6:	46b2      	mov	sl, r6
 80080b8:	3e01      	subs	r6, #1
 80080ba:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80080be:	2b30      	cmp	r3, #48	; 0x30
 80080c0:	d0f9      	beq.n	80080b6 <_dtoa_r+0xd46>
 80080c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c4:	3301      	adds	r3, #1
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	e53d      	b.n	8007b46 <_dtoa_r+0x7d6>
 80080ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080cc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080d0:	e6d7      	b.n	8007e82 <_dtoa_r+0xb12>
 80080d2:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80080d6:	f04f 0a02 	mov.w	sl, #2
 80080da:	f7ff bac5 	b.w	8007668 <_dtoa_r+0x2f8>
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f43f ab67 	beq.w	80077b4 <_dtoa_r+0x444>
 80080e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f77f ab91 	ble.w	8007810 <_dtoa_r+0x4a0>
 80080ee:	9a07      	ldr	r2, [sp, #28]
 80080f0:	3a01      	subs	r2, #1
 80080f2:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 80080f6:	4640      	mov	r0, r8
 80080f8:	4b48      	ldr	r3, [pc, #288]	; (800821c <_dtoa_r+0xeac>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 fb9b 	bl	8000838 <__aeabi_dmul>
 8008102:	4680      	mov	r8, r0
 8008104:	4689      	mov	r9, r1
 8008106:	f10a 0001 	add.w	r0, sl, #1
 800810a:	f7f8 fb2b 	bl	8000764 <__aeabi_i2d>
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	f7f8 fb91 	bl	8000838 <__aeabi_dmul>
 8008116:	4b43      	ldr	r3, [pc, #268]	; (8008224 <_dtoa_r+0xeb4>)
 8008118:	2200      	movs	r2, #0
 800811a:	f7f8 f9d7 	bl	80004cc <__adddf3>
 800811e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008122:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008126:	9311      	str	r3, [sp, #68]	; 0x44
 8008128:	f7ff bac1 	b.w	80076ae <_dtoa_r+0x33e>
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	3301      	adds	r3, #1
 8008130:	9307      	str	r3, [sp, #28]
 8008132:	2331      	movs	r3, #49	; 0x31
 8008134:	f7ff bb39 	b.w	80077aa <_dtoa_r+0x43a>
 8008138:	9b07      	ldr	r3, [sp, #28]
 800813a:	46bb      	mov	fp, r7
 800813c:	3301      	adds	r3, #1
 800813e:	9307      	str	r3, [sp, #28]
 8008140:	2339      	movs	r3, #57	; 0x39
 8008142:	4637      	mov	r7, r6
 8008144:	f80b 3b01 	strb.w	r3, [fp], #1
 8008148:	4646      	mov	r6, r8
 800814a:	e4dc      	b.n	8007b06 <_dtoa_r+0x796>
 800814c:	f04f 0900 	mov.w	r9, #0
 8008150:	464e      	mov	r6, r9
 8008152:	e64b      	b.n	8007dec <_dtoa_r+0xa7c>
 8008154:	469a      	mov	sl, r3
 8008156:	e46c      	b.n	8007a32 <_dtoa_r+0x6c2>
 8008158:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800815a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800815c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800815e:	3301      	adds	r3, #1
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	46b2      	mov	sl, r6
 8008164:	e4ef      	b.n	8007b46 <_dtoa_r+0x7d6>
 8008166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008168:	9a03      	ldr	r2, [sp, #12]
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	f7ff bb16 	b.w	800779c <_dtoa_r+0x42c>
 8008170:	f47f aeeb 	bne.w	8007f4a <_dtoa_r+0xbda>
 8008174:	07da      	lsls	r2, r3, #31
 8008176:	f57f aee8 	bpl.w	8007f4a <_dtoa_r+0xbda>
 800817a:	e6e1      	b.n	8007f40 <_dtoa_r+0xbd0>
 800817c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8008180:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008182:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008184:	f7ff bb44 	b.w	8007810 <_dtoa_r+0x4a0>
 8008188:	2b39      	cmp	r3, #57	; 0x39
 800818a:	d0d5      	beq.n	8008138 <_dtoa_r+0xdc8>
 800818c:	f1ba 0f00 	cmp.w	sl, #0
 8008190:	f73f aed9 	bgt.w	8007f46 <_dtoa_r+0xbd6>
 8008194:	e6d9      	b.n	8007f4a <_dtoa_r+0xbda>
 8008196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008198:	2b02      	cmp	r3, #2
 800819a:	f73f ae12 	bgt.w	8007dc2 <_dtoa_r+0xa52>
 800819e:	f8cd 801c 	str.w	r8, [sp, #28]
 80081a2:	e59b      	b.n	8007cdc <_dtoa_r+0x96c>
 80081a4:	463e      	mov	r6, r7
 80081a6:	e76d      	b.n	8008084 <_dtoa_r+0xd14>
 80081a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	f73f ae09 	bgt.w	8007dc2 <_dtoa_r+0xa52>
 80081b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081b2:	f8cd 801c 	str.w	r8, [sp, #28]
 80081b6:	9308      	str	r3, [sp, #32]
 80081b8:	e511      	b.n	8007bde <_dtoa_r+0x86e>
 80081ba:	f04f 0a02 	mov.w	sl, #2
 80081be:	f7ff ba53 	b.w	8007668 <_dtoa_r+0x2f8>
 80081c2:	4b19      	ldr	r3, [pc, #100]	; (8008228 <_dtoa_r+0xeb8>)
 80081c4:	4819      	ldr	r0, [pc, #100]	; (800822c <_dtoa_r+0xebc>)
 80081c6:	463a      	mov	r2, r7
 80081c8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081cc:	f002 fa6c 	bl	800a6a8 <__assert_func>
 80081d0:	2600      	movs	r6, #0
 80081d2:	6466      	str	r6, [r4, #68]	; 0x44
 80081d4:	4631      	mov	r1, r6
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fcba 	bl	8008b50 <_Balloc>
 80081dc:	9003      	str	r0, [sp, #12]
 80081de:	b978      	cbnz	r0, 8008200 <_dtoa_r+0xe90>
 80081e0:	4b11      	ldr	r3, [pc, #68]	; (8008228 <_dtoa_r+0xeb8>)
 80081e2:	4812      	ldr	r0, [pc, #72]	; (800822c <_dtoa_r+0xebc>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081ea:	f002 fa5d 	bl	800a6a8 <__assert_func>
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <_dtoa_r+0xec0>)
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	f7ff b8f8 	b.w	80073e6 <_dtoa_r+0x76>
 80081f6:	f43f ac34 	beq.w	8007a62 <_dtoa_r+0x6f2>
 80081fa:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80081fe:	e4b7      	b.n	8007b70 <_dtoa_r+0x800>
 8008200:	9b03      	ldr	r3, [sp, #12]
 8008202:	6423      	str	r3, [r4, #64]	; 0x40
 8008204:	2201      	movs	r2, #1
 8008206:	f04f 33ff 	mov.w	r3, #4294967295
 800820a:	9623      	str	r6, [sp, #140]	; 0x8c
 800820c:	9312      	str	r3, [sp, #72]	; 0x48
 800820e:	920c      	str	r2, [sp, #48]	; 0x30
 8008210:	9308      	str	r3, [sp, #32]
 8008212:	f7ff bafd 	b.w	8007810 <_dtoa_r+0x4a0>
 8008216:	bf00      	nop
 8008218:	0800b2d0 	.word	0x0800b2d0
 800821c:	40240000 	.word	0x40240000
 8008220:	3fe00000 	.word	0x3fe00000
 8008224:	401c0000 	.word	0x401c0000
 8008228:	0800b194 	.word	0x0800b194
 800822c:	0800b1a8 	.word	0x0800b1a8
 8008230:	0800b188 	.word	0x0800b188

08008234 <_fclose_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	2900      	cmp	r1, #0
 8008238:	d04b      	beq.n	80082d2 <_fclose_r+0x9e>
 800823a:	4606      	mov	r6, r0
 800823c:	460c      	mov	r4, r1
 800823e:	b110      	cbz	r0, 8008246 <_fclose_r+0x12>
 8008240:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	d048      	beq.n	80082d8 <_fclose_r+0xa4>
 8008246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008248:	07d8      	lsls	r0, r3, #31
 800824a:	d534      	bpl.n	80082b6 <_fclose_r+0x82>
 800824c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d03e      	beq.n	80082d2 <_fclose_r+0x9e>
 8008254:	4621      	mov	r1, r4
 8008256:	4630      	mov	r0, r6
 8008258:	f000 f852 	bl	8008300 <__sflush_r>
 800825c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800825e:	4605      	mov	r5, r0
 8008260:	b133      	cbz	r3, 8008270 <_fclose_r+0x3c>
 8008262:	69e1      	ldr	r1, [r4, #28]
 8008264:	4630      	mov	r0, r6
 8008266:	4798      	blx	r3
 8008268:	2800      	cmp	r0, #0
 800826a:	bfb8      	it	lt
 800826c:	f04f 35ff 	movlt.w	r5, #4294967295
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	061a      	lsls	r2, r3, #24
 8008274:	d43b      	bmi.n	80082ee <_fclose_r+0xba>
 8008276:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008278:	b141      	cbz	r1, 800828c <_fclose_r+0x58>
 800827a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800827e:	4299      	cmp	r1, r3
 8008280:	d002      	beq.n	8008288 <_fclose_r+0x54>
 8008282:	4630      	mov	r0, r6
 8008284:	f000 f960 	bl	8008548 <_free_r>
 8008288:	2300      	movs	r3, #0
 800828a:	6323      	str	r3, [r4, #48]	; 0x30
 800828c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800828e:	b121      	cbz	r1, 800829a <_fclose_r+0x66>
 8008290:	4630      	mov	r0, r6
 8008292:	f000 f959 	bl	8008548 <_free_r>
 8008296:	2300      	movs	r3, #0
 8008298:	6463      	str	r3, [r4, #68]	; 0x44
 800829a:	f7fc fc3b 	bl	8004b14 <__sfp_lock_acquire>
 800829e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a0:	2200      	movs	r2, #0
 80082a2:	07db      	lsls	r3, r3, #31
 80082a4:	81a2      	strh	r2, [r4, #12]
 80082a6:	d527      	bpl.n	80082f8 <_fclose_r+0xc4>
 80082a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082aa:	f7fc fc89 	bl	8004bc0 <__retarget_lock_close_recursive>
 80082ae:	f7fc fc37 	bl	8004b20 <__sfp_lock_release>
 80082b2:	4628      	mov	r0, r5
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	0599      	lsls	r1, r3, #22
 80082ba:	d4cb      	bmi.n	8008254 <_fclose_r+0x20>
 80082bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082be:	f7fc fc81 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 80082c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1c4      	bne.n	8008254 <_fclose_r+0x20>
 80082ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80082cc:	f015 0501 	ands.w	r5, r5, #1
 80082d0:	d008      	beq.n	80082e4 <_fclose_r+0xb0>
 80082d2:	2500      	movs	r5, #0
 80082d4:	4628      	mov	r0, r5
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	f7fc fb96 	bl	8004a08 <__sinit>
 80082dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082de:	07d8      	lsls	r0, r3, #31
 80082e0:	d4b4      	bmi.n	800824c <_fclose_r+0x18>
 80082e2:	e7e8      	b.n	80082b6 <_fclose_r+0x82>
 80082e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082e6:	f7fc fc6f 	bl	8004bc8 <__retarget_lock_release_recursive>
 80082ea:	4628      	mov	r0, r5
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	6921      	ldr	r1, [r4, #16]
 80082f0:	4630      	mov	r0, r6
 80082f2:	f000 f929 	bl	8008548 <_free_r>
 80082f6:	e7be      	b.n	8008276 <_fclose_r+0x42>
 80082f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fa:	f7fc fc65 	bl	8004bc8 <__retarget_lock_release_recursive>
 80082fe:	e7d3      	b.n	80082a8 <_fclose_r+0x74>

08008300 <__sflush_r>:
 8008300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	460c      	mov	r4, r1
 8008308:	0711      	lsls	r1, r2, #28
 800830a:	4607      	mov	r7, r0
 800830c:	d442      	bmi.n	8008394 <__sflush_r+0x94>
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008314:	2b00      	cmp	r3, #0
 8008316:	81a2      	strh	r2, [r4, #12]
 8008318:	dd59      	ble.n	80083ce <__sflush_r+0xce>
 800831a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800831c:	2d00      	cmp	r5, #0
 800831e:	d054      	beq.n	80083ca <__sflush_r+0xca>
 8008320:	2300      	movs	r3, #0
 8008322:	683e      	ldr	r6, [r7, #0]
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	b293      	uxth	r3, r2
 8008328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800832c:	d153      	bne.n	80083d6 <__sflush_r+0xd6>
 800832e:	69e1      	ldr	r1, [r4, #28]
 8008330:	2301      	movs	r3, #1
 8008332:	4638      	mov	r0, r7
 8008334:	47a8      	blx	r5
 8008336:	1c42      	adds	r2, r0, #1
 8008338:	d063      	beq.n	8008402 <__sflush_r+0x102>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800833e:	075b      	lsls	r3, r3, #29
 8008340:	d505      	bpl.n	800834e <__sflush_r+0x4e>
 8008342:	6863      	ldr	r3, [r4, #4]
 8008344:	1ac0      	subs	r0, r0, r3
 8008346:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008348:	b10b      	cbz	r3, 800834e <__sflush_r+0x4e>
 800834a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	69e1      	ldr	r1, [r4, #28]
 8008350:	4602      	mov	r2, r0
 8008352:	2300      	movs	r3, #0
 8008354:	4638      	mov	r0, r7
 8008356:	47a8      	blx	r5
 8008358:	1c41      	adds	r1, r0, #1
 800835a:	d13e      	bne.n	80083da <__sflush_r+0xda>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d03b      	beq.n	80083da <__sflush_r+0xda>
 8008362:	2b1d      	cmp	r3, #29
 8008364:	d001      	beq.n	800836a <__sflush_r+0x6a>
 8008366:	2b16      	cmp	r3, #22
 8008368:	d152      	bne.n	8008410 <__sflush_r+0x110>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	6022      	str	r2, [r4, #0]
 8008370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008374:	2100      	movs	r1, #0
 8008376:	6061      	str	r1, [r4, #4]
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800837c:	603e      	str	r6, [r7, #0]
 800837e:	b321      	cbz	r1, 80083ca <__sflush_r+0xca>
 8008380:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008384:	4299      	cmp	r1, r3
 8008386:	d002      	beq.n	800838e <__sflush_r+0x8e>
 8008388:	4638      	mov	r0, r7
 800838a:	f000 f8dd 	bl	8008548 <_free_r>
 800838e:	2000      	movs	r0, #0
 8008390:	6320      	str	r0, [r4, #48]	; 0x30
 8008392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008394:	6926      	ldr	r6, [r4, #16]
 8008396:	b1c6      	cbz	r6, 80083ca <__sflush_r+0xca>
 8008398:	b293      	uxth	r3, r2
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	6026      	str	r6, [r4, #0]
 800839e:	079a      	lsls	r2, r3, #30
 80083a0:	bf0c      	ite	eq
 80083a2:	6963      	ldreq	r3, [r4, #20]
 80083a4:	2300      	movne	r3, #0
 80083a6:	1bad      	subs	r5, r5, r6
 80083a8:	60a3      	str	r3, [r4, #8]
 80083aa:	e00c      	b.n	80083c6 <__sflush_r+0xc6>
 80083ac:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80083b0:	69e1      	ldr	r1, [r4, #28]
 80083b2:	462b      	mov	r3, r5
 80083b4:	4632      	mov	r2, r6
 80083b6:	4638      	mov	r0, r7
 80083b8:	47e0      	blx	ip
 80083ba:	f1b0 0c00 	subs.w	ip, r0, #0
 80083be:	eba5 050c 	sub.w	r5, r5, ip
 80083c2:	4466      	add	r6, ip
 80083c4:	dd16      	ble.n	80083f4 <__sflush_r+0xf4>
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	dcf0      	bgt.n	80083ac <__sflush_r+0xac>
 80083ca:	2000      	movs	r0, #0
 80083cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	dca2      	bgt.n	800831a <__sflush_r+0x1a>
 80083d4:	e7f9      	b.n	80083ca <__sflush_r+0xca>
 80083d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80083d8:	e7b1      	b.n	800833e <__sflush_r+0x3e>
 80083da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083de:	6922      	ldr	r2, [r4, #16]
 80083e0:	6022      	str	r2, [r4, #0]
 80083e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	04db      	lsls	r3, r3, #19
 80083ec:	6062      	str	r2, [r4, #4]
 80083ee:	d5c4      	bpl.n	800837a <__sflush_r+0x7a>
 80083f0:	6520      	str	r0, [r4, #80]	; 0x50
 80083f2:	e7c2      	b.n	800837a <__sflush_r+0x7a>
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d098      	beq.n	800833a <__sflush_r+0x3a>
 8008408:	2b1d      	cmp	r3, #29
 800840a:	d006      	beq.n	800841a <__sflush_r+0x11a>
 800840c:	2b16      	cmp	r3, #22
 800840e:	d004      	beq.n	800841a <__sflush_r+0x11a>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800841a:	603e      	str	r6, [r7, #0]
 800841c:	e7d5      	b.n	80083ca <__sflush_r+0xca>
 800841e:	bf00      	nop

08008420 <_fflush_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	460c      	mov	r4, r1
 8008424:	4605      	mov	r5, r0
 8008426:	b108      	cbz	r0, 800842c <_fflush_r+0xc>
 8008428:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800842a:	b1a3      	cbz	r3, 8008456 <_fflush_r+0x36>
 800842c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8008430:	b1b8      	cbz	r0, 8008462 <_fflush_r+0x42>
 8008432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008434:	07db      	lsls	r3, r3, #31
 8008436:	d401      	bmi.n	800843c <_fflush_r+0x1c>
 8008438:	0581      	lsls	r1, r0, #22
 800843a:	d515      	bpl.n	8008468 <_fflush_r+0x48>
 800843c:	4628      	mov	r0, r5
 800843e:	4621      	mov	r1, r4
 8008440:	f7ff ff5e 	bl	8008300 <__sflush_r>
 8008444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008446:	07da      	lsls	r2, r3, #31
 8008448:	4605      	mov	r5, r0
 800844a:	d402      	bmi.n	8008452 <_fflush_r+0x32>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	059b      	lsls	r3, r3, #22
 8008450:	d50e      	bpl.n	8008470 <_fflush_r+0x50>
 8008452:	4628      	mov	r0, r5
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	f7fc fad7 	bl	8004a08 <__sinit>
 800845a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800845e:	2800      	cmp	r0, #0
 8008460:	d1e7      	bne.n	8008432 <_fflush_r+0x12>
 8008462:	4605      	mov	r5, r0
 8008464:	4628      	mov	r0, r5
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846a:	f7fc fbab 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 800846e:	e7e5      	b.n	800843c <_fflush_r+0x1c>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f7fc fba9 	bl	8004bc8 <__retarget_lock_release_recursive>
 8008476:	4628      	mov	r0, r5
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop

0800847c <__libc_fini_array>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <__libc_fini_array+0x24>)
 8008480:	4d08      	ldr	r5, [pc, #32]	; (80084a4 <__libc_fini_array+0x28>)
 8008482:	1b5b      	subs	r3, r3, r5
 8008484:	109c      	asrs	r4, r3, #2
 8008486:	d007      	beq.n	8008498 <__libc_fini_array+0x1c>
 8008488:	3b04      	subs	r3, #4
 800848a:	441d      	add	r5, r3
 800848c:	3c01      	subs	r4, #1
 800848e:	f855 3904 	ldr.w	r3, [r5], #-4
 8008492:	4798      	blx	r3
 8008494:	2c00      	cmp	r4, #0
 8008496:	d1f9      	bne.n	800848c <__libc_fini_array+0x10>
 8008498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800849c:	f002 bb1e 	b.w	800aadc <_fini>
 80084a0:	0800b428 	.word	0x0800b428
 80084a4:	0800b424 	.word	0x0800b424

080084a8 <_malloc_trim_r>:
 80084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084aa:	4f24      	ldr	r7, [pc, #144]	; (800853c <_malloc_trim_r+0x94>)
 80084ac:	460c      	mov	r4, r1
 80084ae:	4606      	mov	r6, r0
 80084b0:	f7fc ff4e 	bl	8005350 <__malloc_lock>
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	6855      	ldr	r5, [r2, #4]
 80084b8:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 80084bc:	330f      	adds	r3, #15
 80084be:	f025 0503 	bic.w	r5, r5, #3
 80084c2:	442b      	add	r3, r5
 80084c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084c8:	f023 030f 	bic.w	r3, r3, #15
 80084cc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 80084d0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80084d4:	db07      	blt.n	80084e6 <_malloc_trim_r+0x3e>
 80084d6:	2100      	movs	r1, #0
 80084d8:	4630      	mov	r0, r6
 80084da:	f7fc ffaf 	bl	800543c <_sbrk_r>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	442b      	add	r3, r5
 80084e2:	4298      	cmp	r0, r3
 80084e4:	d004      	beq.n	80084f0 <_malloc_trim_r+0x48>
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7fc ff38 	bl	800535c <__malloc_unlock>
 80084ec:	2000      	movs	r0, #0
 80084ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f0:	4261      	negs	r1, r4
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7fc ffa2 	bl	800543c <_sbrk_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d00d      	beq.n	8008518 <_malloc_trim_r+0x70>
 80084fc:	4a10      	ldr	r2, [pc, #64]	; (8008540 <_malloc_trim_r+0x98>)
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	1b2d      	subs	r5, r5, r4
 8008502:	f045 0501 	orr.w	r5, r5, #1
 8008506:	605d      	str	r5, [r3, #4]
 8008508:	6813      	ldr	r3, [r2, #0]
 800850a:	4630      	mov	r0, r6
 800850c:	1b1b      	subs	r3, r3, r4
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	f7fc ff24 	bl	800535c <__malloc_unlock>
 8008514:	2001      	movs	r0, #1
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008518:	2100      	movs	r1, #0
 800851a:	4630      	mov	r0, r6
 800851c:	f7fc ff8e 	bl	800543c <_sbrk_r>
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	1a83      	subs	r3, r0, r2
 8008524:	2b0f      	cmp	r3, #15
 8008526:	ddde      	ble.n	80084e6 <_malloc_trim_r+0x3e>
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	6053      	str	r3, [r2, #4]
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <_malloc_trim_r+0x9c>)
 8008530:	4903      	ldr	r1, [pc, #12]	; (8008540 <_malloc_trim_r+0x98>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	1ac0      	subs	r0, r0, r3
 8008536:	6008      	str	r0, [r1, #0]
 8008538:	e7d5      	b.n	80084e6 <_malloc_trim_r+0x3e>
 800853a:	bf00      	nop
 800853c:	20000430 	.word	0x20000430
 8008540:	20001084 	.word	0x20001084
 8008544:	20000838 	.word	0x20000838

08008548 <_free_r>:
 8008548:	2900      	cmp	r1, #0
 800854a:	d061      	beq.n	8008610 <_free_r+0xc8>
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	4606      	mov	r6, r0
 8008552:	f7fc fefd 	bl	8005350 <__malloc_lock>
 8008556:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800855a:	4f7b      	ldr	r7, [pc, #492]	; (8008748 <_free_r+0x200>)
 800855c:	f1a4 0508 	sub.w	r5, r4, #8
 8008560:	f022 0101 	bic.w	r1, r2, #1
 8008564:	eb05 0c01 	add.w	ip, r5, r1
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800856e:	4560      	cmp	r0, ip
 8008570:	f023 0303 	bic.w	r3, r3, #3
 8008574:	f000 808b 	beq.w	800868e <_free_r+0x146>
 8008578:	07d2      	lsls	r2, r2, #31
 800857a:	f8cc 3004 	str.w	r3, [ip, #4]
 800857e:	d432      	bmi.n	80085e6 <_free_r+0x9e>
 8008580:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8008584:	1aad      	subs	r5, r5, r2
 8008586:	4411      	add	r1, r2
 8008588:	68aa      	ldr	r2, [r5, #8]
 800858a:	f107 0008 	add.w	r0, r7, #8
 800858e:	4282      	cmp	r2, r0
 8008590:	d06a      	beq.n	8008668 <_free_r+0x120>
 8008592:	eb0c 0403 	add.w	r4, ip, r3
 8008596:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800859a:	68ec      	ldr	r4, [r5, #12]
 800859c:	60d4      	str	r4, [r2, #12]
 800859e:	f01e 0f01 	tst.w	lr, #1
 80085a2:	60a2      	str	r2, [r4, #8]
 80085a4:	f000 8097 	beq.w	80086d6 <_free_r+0x18e>
 80085a8:	f041 0301 	orr.w	r3, r1, #1
 80085ac:	606b      	str	r3, [r5, #4]
 80085ae:	f8cc 1000 	str.w	r1, [ip]
 80085b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80085b6:	d235      	bcs.n	8008624 <_free_r+0xdc>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	08cb      	lsrs	r3, r1, #3
 80085bc:	0948      	lsrs	r0, r1, #5
 80085be:	2101      	movs	r1, #1
 80085c0:	3301      	adds	r3, #1
 80085c2:	4081      	lsls	r1, r0
 80085c4:	4311      	orrs	r1, r2
 80085c6:	6079      	str	r1, [r7, #4]
 80085c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80085cc:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 80085d0:	3a08      	subs	r2, #8
 80085d2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 80085d6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80085da:	60cd      	str	r5, [r1, #12]
 80085dc:	4630      	mov	r0, r6
 80085de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085e2:	f7fc bebb 	b.w	800535c <__malloc_unlock>
 80085e6:	eb0c 0203 	add.w	r2, ip, r3
 80085ea:	6852      	ldr	r2, [r2, #4]
 80085ec:	07d0      	lsls	r0, r2, #31
 80085ee:	d410      	bmi.n	8008612 <_free_r+0xca>
 80085f0:	4419      	add	r1, r3
 80085f2:	f107 0008 	add.w	r0, r7, #8
 80085f6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80085fa:	4283      	cmp	r3, r0
 80085fc:	d073      	beq.n	80086e6 <_free_r+0x19e>
 80085fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008602:	60da      	str	r2, [r3, #12]
 8008604:	6093      	str	r3, [r2, #8]
 8008606:	f041 0301 	orr.w	r3, r1, #1
 800860a:	606b      	str	r3, [r5, #4]
 800860c:	5069      	str	r1, [r5, r1]
 800860e:	e7d0      	b.n	80085b2 <_free_r+0x6a>
 8008610:	4770      	bx	lr
 8008612:	f041 0301 	orr.w	r3, r1, #1
 8008616:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800861a:	f844 3c04 	str.w	r3, [r4, #-4]
 800861e:	f8cc 1000 	str.w	r1, [ip]
 8008622:	d3c9      	bcc.n	80085b8 <_free_r+0x70>
 8008624:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8008628:	ea4f 2351 	mov.w	r3, r1, lsr #9
 800862c:	d248      	bcs.n	80086c0 <_free_r+0x178>
 800862e:	098b      	lsrs	r3, r1, #6
 8008630:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8008634:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008638:	00c3      	lsls	r3, r0, #3
 800863a:	18f8      	adds	r0, r7, r3
 800863c:	58fb      	ldr	r3, [r7, r3]
 800863e:	3808      	subs	r0, #8
 8008640:	4298      	cmp	r0, r3
 8008642:	d059      	beq.n	80086f8 <_free_r+0x1b0>
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	f022 0203 	bic.w	r2, r2, #3
 800864a:	428a      	cmp	r2, r1
 800864c:	d902      	bls.n	8008654 <_free_r+0x10c>
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	4298      	cmp	r0, r3
 8008652:	d1f7      	bne.n	8008644 <_free_r+0xfc>
 8008654:	68d8      	ldr	r0, [r3, #12]
 8008656:	e9c5 3002 	strd	r3, r0, [r5, #8]
 800865a:	6085      	str	r5, [r0, #8]
 800865c:	60dd      	str	r5, [r3, #12]
 800865e:	4630      	mov	r0, r6
 8008660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008664:	f7fc be7a 	b.w	800535c <__malloc_unlock>
 8008668:	eb0c 0203 	add.w	r2, ip, r3
 800866c:	6852      	ldr	r2, [r2, #4]
 800866e:	07d2      	lsls	r2, r2, #31
 8008670:	d463      	bmi.n	800873a <_free_r+0x1f2>
 8008672:	440b      	add	r3, r1
 8008674:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8008678:	60ca      	str	r2, [r1, #12]
 800867a:	6091      	str	r1, [r2, #8]
 800867c:	f043 0201 	orr.w	r2, r3, #1
 8008680:	606a      	str	r2, [r5, #4]
 8008682:	4630      	mov	r0, r6
 8008684:	50eb      	str	r3, [r5, r3]
 8008686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800868a:	f7fc be67 	b.w	800535c <__malloc_unlock>
 800868e:	440b      	add	r3, r1
 8008690:	07d1      	lsls	r1, r2, #31
 8008692:	d407      	bmi.n	80086a4 <_free_r+0x15c>
 8008694:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8008698:	1aad      	subs	r5, r5, r2
 800869a:	4413      	add	r3, r2
 800869c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 80086a0:	60ca      	str	r2, [r1, #12]
 80086a2:	6091      	str	r1, [r2, #8]
 80086a4:	f043 0201 	orr.w	r2, r3, #1
 80086a8:	606a      	str	r2, [r5, #4]
 80086aa:	4a28      	ldr	r2, [pc, #160]	; (800874c <_free_r+0x204>)
 80086ac:	60bd      	str	r5, [r7, #8]
 80086ae:	6812      	ldr	r2, [r2, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d893      	bhi.n	80085dc <_free_r+0x94>
 80086b4:	4b26      	ldr	r3, [pc, #152]	; (8008750 <_free_r+0x208>)
 80086b6:	4630      	mov	r0, r6
 80086b8:	6819      	ldr	r1, [r3, #0]
 80086ba:	f7ff fef5 	bl	80084a8 <_malloc_trim_r>
 80086be:	e78d      	b.n	80085dc <_free_r+0x94>
 80086c0:	2b14      	cmp	r3, #20
 80086c2:	d90a      	bls.n	80086da <_free_r+0x192>
 80086c4:	2b54      	cmp	r3, #84	; 0x54
 80086c6:	d81f      	bhi.n	8008708 <_free_r+0x1c0>
 80086c8:	0b0b      	lsrs	r3, r1, #12
 80086ca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80086ce:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80086d2:	00c3      	lsls	r3, r0, #3
 80086d4:	e7b1      	b.n	800863a <_free_r+0xf2>
 80086d6:	4419      	add	r1, r3
 80086d8:	e78d      	b.n	80085f6 <_free_r+0xae>
 80086da:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80086de:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80086e2:	00c3      	lsls	r3, r0, #3
 80086e4:	e7a9      	b.n	800863a <_free_r+0xf2>
 80086e6:	f041 0301 	orr.w	r3, r1, #1
 80086ea:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80086ee:	e9c5 0002 	strd	r0, r0, [r5, #8]
 80086f2:	606b      	str	r3, [r5, #4]
 80086f4:	5069      	str	r1, [r5, r1]
 80086f6:	e771      	b.n	80085dc <_free_r+0x94>
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	1092      	asrs	r2, r2, #2
 80086fc:	2401      	movs	r4, #1
 80086fe:	fa04 f202 	lsl.w	r2, r4, r2
 8008702:	430a      	orrs	r2, r1
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	e7a6      	b.n	8008656 <_free_r+0x10e>
 8008708:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800870c:	d806      	bhi.n	800871c <_free_r+0x1d4>
 800870e:	0bcb      	lsrs	r3, r1, #15
 8008710:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008714:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8008718:	00c3      	lsls	r3, r0, #3
 800871a:	e78e      	b.n	800863a <_free_r+0xf2>
 800871c:	f240 5254 	movw	r2, #1364	; 0x554
 8008720:	4293      	cmp	r3, r2
 8008722:	d806      	bhi.n	8008732 <_free_r+0x1ea>
 8008724:	0c8b      	lsrs	r3, r1, #18
 8008726:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800872a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800872e:	00c3      	lsls	r3, r0, #3
 8008730:	e783      	b.n	800863a <_free_r+0xf2>
 8008732:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8008736:	227e      	movs	r2, #126	; 0x7e
 8008738:	e77f      	b.n	800863a <_free_r+0xf2>
 800873a:	f041 0301 	orr.w	r3, r1, #1
 800873e:	606b      	str	r3, [r5, #4]
 8008740:	f8cc 1000 	str.w	r1, [ip]
 8008744:	e74a      	b.n	80085dc <_free_r+0x94>
 8008746:	bf00      	nop
 8008748:	20000430 	.word	0x20000430
 800874c:	2000083c 	.word	0x2000083c
 8008750:	200010b4 	.word	0x200010b4

08008754 <__sfvwrite_r>:
 8008754:	6893      	ldr	r3, [r2, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8081 	beq.w	800885e <__sfvwrite_r+0x10a>
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008764:	460c      	mov	r4, r1
 8008766:	0719      	lsls	r1, r3, #28
 8008768:	4680      	mov	r8, r0
 800876a:	b083      	sub	sp, #12
 800876c:	4617      	mov	r7, r2
 800876e:	b298      	uxth	r0, r3
 8008770:	d523      	bpl.n	80087ba <__sfvwrite_r+0x66>
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	b30b      	cbz	r3, 80087ba <__sfvwrite_r+0x66>
 8008776:	f010 0302 	ands.w	r3, r0, #2
 800877a:	683d      	ldr	r5, [r7, #0]
 800877c:	d02b      	beq.n	80087d6 <__sfvwrite_r+0x82>
 800877e:	f04f 0a00 	mov.w	sl, #0
 8008782:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8008a38 <__sfvwrite_r+0x2e4>
 8008786:	4656      	mov	r6, sl
 8008788:	455e      	cmp	r6, fp
 800878a:	4633      	mov	r3, r6
 800878c:	4652      	mov	r2, sl
 800878e:	bf28      	it	cs
 8008790:	465b      	movcs	r3, fp
 8008792:	4640      	mov	r0, r8
 8008794:	2e00      	cmp	r6, #0
 8008796:	d04f      	beq.n	8008838 <__sfvwrite_r+0xe4>
 8008798:	69e1      	ldr	r1, [r4, #28]
 800879a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800879e:	47e0      	blx	ip
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dd52      	ble.n	800884a <__sfvwrite_r+0xf6>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	1a1b      	subs	r3, r3, r0
 80087a8:	4482      	add	sl, r0
 80087aa:	1a36      	subs	r6, r6, r0
 80087ac:	60bb      	str	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1ea      	bne.n	8008788 <__sfvwrite_r+0x34>
 80087b2:	2000      	movs	r0, #0
 80087b4:	b003      	add	sp, #12
 80087b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ba:	4621      	mov	r1, r4
 80087bc:	4640      	mov	r0, r8
 80087be:	f7fe fc55 	bl	800706c <__swsetup_r>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f040 8134 	bne.w	8008a30 <__sfvwrite_r+0x2dc>
 80087c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087cc:	683d      	ldr	r5, [r7, #0]
 80087ce:	b298      	uxth	r0, r3
 80087d0:	f010 0302 	ands.w	r3, r0, #2
 80087d4:	d1d3      	bne.n	800877e <__sfvwrite_r+0x2a>
 80087d6:	f010 0901 	ands.w	r9, r0, #1
 80087da:	d142      	bne.n	8008862 <__sfvwrite_r+0x10e>
 80087dc:	464e      	mov	r6, r9
 80087de:	b33e      	cbz	r6, 8008830 <__sfvwrite_r+0xdc>
 80087e0:	0582      	lsls	r2, r0, #22
 80087e2:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80087e6:	f140 8081 	bpl.w	80088ec <__sfvwrite_r+0x198>
 80087ea:	45b3      	cmp	fp, r6
 80087ec:	465a      	mov	r2, fp
 80087ee:	f200 80b1 	bhi.w	8008954 <__sfvwrite_r+0x200>
 80087f2:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80087f6:	f040 80be 	bne.w	8008976 <__sfvwrite_r+0x222>
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	9201      	str	r2, [sp, #4]
 80087fe:	4649      	mov	r1, r9
 8008800:	f7fc fcd8 	bl	80051b4 <memmove>
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	6821      	ldr	r1, [r4, #0]
 8008808:	9a01      	ldr	r2, [sp, #4]
 800880a:	eba3 030b 	sub.w	r3, r3, fp
 800880e:	440a      	add	r2, r1
 8008810:	46b2      	mov	sl, r6
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	2600      	movs	r6, #0
 8008818:	68b8      	ldr	r0, [r7, #8]
 800881a:	eba0 000a 	sub.w	r0, r0, sl
 800881e:	44d1      	add	r9, sl
 8008820:	60b8      	str	r0, [r7, #8]
 8008822:	2800      	cmp	r0, #0
 8008824:	d0c5      	beq.n	80087b2 <__sfvwrite_r+0x5e>
 8008826:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800882a:	b280      	uxth	r0, r0
 800882c:	2e00      	cmp	r6, #0
 800882e:	d1d7      	bne.n	80087e0 <__sfvwrite_r+0x8c>
 8008830:	e9d5 9600 	ldrd	r9, r6, [r5]
 8008834:	3508      	adds	r5, #8
 8008836:	e7d2      	b.n	80087de <__sfvwrite_r+0x8a>
 8008838:	e9d5 a600 	ldrd	sl, r6, [r5]
 800883c:	3508      	adds	r5, #8
 800883e:	e7a3      	b.n	8008788 <__sfvwrite_r+0x34>
 8008840:	4621      	mov	r1, r4
 8008842:	4640      	mov	r0, r8
 8008844:	f7ff fdec 	bl	8008420 <_fflush_r>
 8008848:	b380      	cbz	r0, 80088ac <__sfvwrite_r+0x158>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	b003      	add	sp, #12
 800885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885e:	2000      	movs	r0, #0
 8008860:	4770      	bx	lr
 8008862:	461e      	mov	r6, r3
 8008864:	46aa      	mov	sl, r5
 8008866:	4699      	mov	r9, r3
 8008868:	4618      	mov	r0, r3
 800886a:	461d      	mov	r5, r3
 800886c:	b356      	cbz	r6, 80088c4 <__sfvwrite_r+0x170>
 800886e:	b388      	cbz	r0, 80088d4 <__sfvwrite_r+0x180>
 8008870:	464a      	mov	r2, r9
 8008872:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8008876:	6820      	ldr	r0, [r4, #0]
 8008878:	42b2      	cmp	r2, r6
 800887a:	bf28      	it	cs
 800887c:	4632      	movcs	r2, r6
 800887e:	4288      	cmp	r0, r1
 8008880:	d905      	bls.n	800888e <__sfvwrite_r+0x13a>
 8008882:	68a1      	ldr	r1, [r4, #8]
 8008884:	eb03 0b01 	add.w	fp, r3, r1
 8008888:	455a      	cmp	r2, fp
 800888a:	f300 80a7 	bgt.w	80089dc <__sfvwrite_r+0x288>
 800888e:	4293      	cmp	r3, r2
 8008890:	dc64      	bgt.n	800895c <__sfvwrite_r+0x208>
 8008892:	69e1      	ldr	r1, [r4, #28]
 8008894:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8008898:	462a      	mov	r2, r5
 800889a:	4640      	mov	r0, r8
 800889c:	47e0      	blx	ip
 800889e:	f1b0 0b00 	subs.w	fp, r0, #0
 80088a2:	ddd2      	ble.n	800884a <__sfvwrite_r+0xf6>
 80088a4:	ebb9 090b 	subs.w	r9, r9, fp
 80088a8:	d0ca      	beq.n	8008840 <__sfvwrite_r+0xec>
 80088aa:	2001      	movs	r0, #1
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	eba3 030b 	sub.w	r3, r3, fp
 80088b2:	445d      	add	r5, fp
 80088b4:	eba6 060b 	sub.w	r6, r6, fp
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f43f af79 	beq.w	80087b2 <__sfvwrite_r+0x5e>
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	d1d4      	bne.n	800886e <__sfvwrite_r+0x11a>
 80088c4:	f10a 0308 	add.w	r3, sl, #8
 80088c8:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 80088cc:	469a      	mov	sl, r3
 80088ce:	3308      	adds	r3, #8
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d0f9      	beq.n	80088c8 <__sfvwrite_r+0x174>
 80088d4:	4632      	mov	r2, r6
 80088d6:	210a      	movs	r1, #10
 80088d8:	4628      	mov	r0, r5
 80088da:	f7f7 fda1 	bl	8000420 <memchr>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f000 809d 	beq.w	8008a1e <__sfvwrite_r+0x2ca>
 80088e4:	3001      	adds	r0, #1
 80088e6:	eba0 0905 	sub.w	r9, r0, r5
 80088ea:	e7c1      	b.n	8008870 <__sfvwrite_r+0x11c>
 80088ec:	6820      	ldr	r0, [r4, #0]
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	4298      	cmp	r0, r3
 80088f2:	d817      	bhi.n	8008924 <__sfvwrite_r+0x1d0>
 80088f4:	6963      	ldr	r3, [r4, #20]
 80088f6:	42b3      	cmp	r3, r6
 80088f8:	d814      	bhi.n	8008924 <__sfvwrite_r+0x1d0>
 80088fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80088fe:	42b2      	cmp	r2, r6
 8008900:	bf28      	it	cs
 8008902:	4632      	movcs	r2, r6
 8008904:	69e1      	ldr	r1, [r4, #28]
 8008906:	fb92 f2f3 	sdiv	r2, r2, r3
 800890a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800890e:	fb02 f303 	mul.w	r3, r2, r3
 8008912:	4640      	mov	r0, r8
 8008914:	464a      	mov	r2, r9
 8008916:	47e0      	blx	ip
 8008918:	f1b0 0a00 	subs.w	sl, r0, #0
 800891c:	dd95      	ble.n	800884a <__sfvwrite_r+0xf6>
 800891e:	eba6 060a 	sub.w	r6, r6, sl
 8008922:	e779      	b.n	8008818 <__sfvwrite_r+0xc4>
 8008924:	45b3      	cmp	fp, r6
 8008926:	46da      	mov	sl, fp
 8008928:	bf28      	it	cs
 800892a:	46b2      	movcs	sl, r6
 800892c:	4652      	mov	r2, sl
 800892e:	4649      	mov	r1, r9
 8008930:	f7fc fc40 	bl	80051b4 <memmove>
 8008934:	68a3      	ldr	r3, [r4, #8]
 8008936:	6822      	ldr	r2, [r4, #0]
 8008938:	eba3 030a 	sub.w	r3, r3, sl
 800893c:	4452      	add	r2, sl
 800893e:	60a3      	str	r3, [r4, #8]
 8008940:	6022      	str	r2, [r4, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1eb      	bne.n	800891e <__sfvwrite_r+0x1ca>
 8008946:	4621      	mov	r1, r4
 8008948:	4640      	mov	r0, r8
 800894a:	f7ff fd69 	bl	8008420 <_fflush_r>
 800894e:	2800      	cmp	r0, #0
 8008950:	d0e5      	beq.n	800891e <__sfvwrite_r+0x1ca>
 8008952:	e77a      	b.n	800884a <__sfvwrite_r+0xf6>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	46b3      	mov	fp, r6
 8008958:	4632      	mov	r2, r6
 800895a:	e74f      	b.n	80087fc <__sfvwrite_r+0xa8>
 800895c:	4629      	mov	r1, r5
 800895e:	9201      	str	r2, [sp, #4]
 8008960:	f7fc fc28 	bl	80051b4 <memmove>
 8008964:	9a01      	ldr	r2, [sp, #4]
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	4413      	add	r3, r2
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	4693      	mov	fp, r2
 8008974:	e796      	b.n	80088a4 <__sfvwrite_r+0x150>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	6921      	ldr	r1, [r4, #16]
 800897a:	eba3 0b01 	sub.w	fp, r3, r1
 800897e:	6963      	ldr	r3, [r4, #20]
 8008980:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8008984:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8008988:	f10b 0301 	add.w	r3, fp, #1
 800898c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8008990:	4433      	add	r3, r6
 8008992:	4553      	cmp	r3, sl
 8008994:	4652      	mov	r2, sl
 8008996:	bf84      	itt	hi
 8008998:	469a      	movhi	sl, r3
 800899a:	4652      	movhi	r2, sl
 800899c:	0543      	lsls	r3, r0, #21
 800899e:	d52c      	bpl.n	80089fa <__sfvwrite_r+0x2a6>
 80089a0:	4611      	mov	r1, r2
 80089a2:	4640      	mov	r0, r8
 80089a4:	f7fc f922 	bl	8004bec <_malloc_r>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d03b      	beq.n	8008a24 <__sfvwrite_r+0x2d0>
 80089ac:	465a      	mov	r2, fp
 80089ae:	6921      	ldr	r1, [r4, #16]
 80089b0:	9001      	str	r0, [sp, #4]
 80089b2:	f7f7 fc25 	bl	8000200 <memcpy>
 80089b6:	89a2      	ldrh	r2, [r4, #12]
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80089be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80089c2:	81a2      	strh	r2, [r4, #12]
 80089c4:	eb03 000b 	add.w	r0, r3, fp
 80089c8:	6123      	str	r3, [r4, #16]
 80089ca:	ebaa 030b 	sub.w	r3, sl, fp
 80089ce:	f8c4 a014 	str.w	sl, [r4, #20]
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	6020      	str	r0, [r4, #0]
 80089d6:	46b3      	mov	fp, r6
 80089d8:	4632      	mov	r2, r6
 80089da:	e70f      	b.n	80087fc <__sfvwrite_r+0xa8>
 80089dc:	4629      	mov	r1, r5
 80089de:	465a      	mov	r2, fp
 80089e0:	f7fc fbe8 	bl	80051b4 <memmove>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	445b      	add	r3, fp
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	4621      	mov	r1, r4
 80089ec:	4640      	mov	r0, r8
 80089ee:	f7ff fd17 	bl	8008420 <_fflush_r>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f43f af56 	beq.w	80088a4 <__sfvwrite_r+0x150>
 80089f8:	e727      	b.n	800884a <__sfvwrite_r+0xf6>
 80089fa:	4640      	mov	r0, r8
 80089fc:	f000 fc68 	bl	80092d0 <_realloc_r>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1de      	bne.n	80089c4 <__sfvwrite_r+0x270>
 8008a06:	6921      	ldr	r1, [r4, #16]
 8008a08:	4640      	mov	r0, r8
 8008a0a:	f7ff fd9d 	bl	8008548 <_free_r>
 8008a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a12:	220c      	movs	r2, #12
 8008a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a18:	f8c8 2000 	str.w	r2, [r8]
 8008a1c:	e717      	b.n	800884e <__sfvwrite_r+0xfa>
 8008a1e:	1c72      	adds	r2, r6, #1
 8008a20:	4691      	mov	r9, r2
 8008a22:	e726      	b.n	8008872 <__sfvwrite_r+0x11e>
 8008a24:	220c      	movs	r2, #12
 8008a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a2a:	f8c8 2000 	str.w	r2, [r8]
 8008a2e:	e70e      	b.n	800884e <__sfvwrite_r+0xfa>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	e6be      	b.n	80087b4 <__sfvwrite_r+0x60>
 8008a36:	bf00      	nop
 8008a38:	7ffffc00 	.word	0x7ffffc00

08008a3c <_localeconv_r>:
 8008a3c:	4800      	ldr	r0, [pc, #0]	; (8008a40 <_localeconv_r+0x4>)
 8008a3e:	4770      	bx	lr
 8008a40:	20000934 	.word	0x20000934

08008a44 <_lseek_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	460c      	mov	r4, r1
 8008a48:	4d08      	ldr	r5, [pc, #32]	; (8008a6c <_lseek_r+0x28>)
 8008a4a:	4684      	mov	ip, r0
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4620      	mov	r0, r4
 8008a50:	461a      	mov	r2, r3
 8008a52:	2300      	movs	r3, #0
 8008a54:	602b      	str	r3, [r5, #0]
 8008a56:	4664      	mov	r4, ip
 8008a58:	f002 f820 	bl	800aa9c <_lseek>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d000      	beq.n	8008a62 <_lseek_r+0x1e>
 8008a60:	bd38      	pop	{r3, r4, r5, pc}
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0fb      	beq.n	8008a60 <_lseek_r+0x1c>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	200010b8 	.word	0x200010b8

08008a70 <__smakebuf_r>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	898b      	ldrh	r3, [r1, #12]
 8008a76:	460c      	mov	r4, r1
 8008a78:	0799      	lsls	r1, r3, #30
 8008a7a:	b096      	sub	sp, #88	; 0x58
 8008a7c:	d508      	bpl.n	8008a90 <__smakebuf_r+0x20>
 8008a7e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008a82:	2201      	movs	r2, #1
 8008a84:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	b016      	add	sp, #88	; 0x58
 8008a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a94:	2900      	cmp	r1, #0
 8008a96:	4606      	mov	r6, r0
 8008a98:	db27      	blt.n	8008aea <__smakebuf_r+0x7a>
 8008a9a:	466a      	mov	r2, sp
 8008a9c:	f001 fec0 	bl	800a820 <_fstat_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	db21      	blt.n	8008ae8 <__smakebuf_r+0x78>
 8008aa4:	9d01      	ldr	r5, [sp, #4]
 8008aa6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8008aaa:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8008aae:	fab5 f585 	clz	r5, r5
 8008ab2:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8008ab6:	096d      	lsrs	r5, r5, #5
 8008ab8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8008abc:	4641      	mov	r1, r8
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7fc f894 	bl	8004bec <_malloc_r>
 8008ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac8:	b1f0      	cbz	r0, 8008b08 <__smakebuf_r+0x98>
 8008aca:	4a20      	ldr	r2, [pc, #128]	; (8008b4c <__smakebuf_r+0xdc>)
 8008acc:	63f2      	str	r2, [r6, #60]	; 0x3c
 8008ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad2:	f8c4 8014 	str.w	r8, [r4, #20]
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	6020      	str	r0, [r4, #0]
 8008ada:	6120      	str	r0, [r4, #16]
 8008adc:	bb35      	cbnz	r5, 8008b2c <__smakebuf_r+0xbc>
 8008ade:	433b      	orrs	r3, r7
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	b016      	add	sp, #88	; 0x58
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8008aee:	d019      	beq.n	8008b24 <__smakebuf_r+0xb4>
 8008af0:	f04f 0840 	mov.w	r8, #64	; 0x40
 8008af4:	4641      	mov	r1, r8
 8008af6:	4630      	mov	r0, r6
 8008af8:	f7fc f878 	bl	8004bec <_malloc_r>
 8008afc:	2500      	movs	r5, #0
 8008afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b02:	462f      	mov	r7, r5
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1e0      	bne.n	8008aca <__smakebuf_r+0x5a>
 8008b08:	059a      	lsls	r2, r3, #22
 8008b0a:	d4be      	bmi.n	8008a8a <__smakebuf_r+0x1a>
 8008b0c:	f023 0303 	bic.w	r3, r3, #3
 8008b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b14:	f043 0302 	orr.w	r3, r3, #2
 8008b18:	2101      	movs	r1, #1
 8008b1a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8008b1e:	81a3      	strh	r3, [r4, #12]
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	e7b2      	b.n	8008a8a <__smakebuf_r+0x1a>
 8008b24:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8008b28:	462f      	mov	r7, r5
 8008b2a:	e7c7      	b.n	8008abc <__smakebuf_r+0x4c>
 8008b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b30:	4630      	mov	r0, r6
 8008b32:	f001 fe8b 	bl	800a84c <_isatty_r>
 8008b36:	b910      	cbnz	r0, 8008b3e <__smakebuf_r+0xce>
 8008b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3c:	e7cf      	b.n	8008ade <__smakebuf_r+0x6e>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	e7c8      	b.n	8008ade <__smakebuf_r+0x6e>
 8008b4c:	080049fd 	.word	0x080049fd

08008b50 <_Balloc>:
 8008b50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008b52:	b570      	push	{r4, r5, r6, lr}
 8008b54:	4605      	mov	r5, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b14b      	cbz	r3, 8008b6e <_Balloc+0x1e>
 8008b5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008b5e:	b180      	cbz	r0, 8008b82 <_Balloc+0x32>
 8008b60:	6802      	ldr	r2, [r0, #0]
 8008b62:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008b66:	2300      	movs	r3, #0
 8008b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b6c:	bd70      	pop	{r4, r5, r6, pc}
 8008b6e:	2221      	movs	r2, #33	; 0x21
 8008b70:	2104      	movs	r1, #4
 8008b72:	f7fb fefd 	bl	8004970 <_calloc_r>
 8008b76:	4603      	mov	r3, r0
 8008b78:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d1ed      	bne.n	8008b5a <_Balloc+0xa>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	bd70      	pop	{r4, r5, r6, pc}
 8008b82:	2101      	movs	r1, #1
 8008b84:	fa01 f604 	lsl.w	r6, r1, r4
 8008b88:	1d72      	adds	r2, r6, #5
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f7fb feef 	bl	8004970 <_calloc_r>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0f3      	beq.n	8008b7e <_Balloc+0x2e>
 8008b96:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008b9a:	e7e4      	b.n	8008b66 <_Balloc+0x16>

08008b9c <_Bfree>:
 8008b9c:	b131      	cbz	r1, 8008bac <_Bfree+0x10>
 8008b9e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008ba0:	684a      	ldr	r2, [r1, #4]
 8008ba2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008ba6:	6008      	str	r0, [r1, #0]
 8008ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop

08008bb0 <__multadd>:
 8008bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	690d      	ldr	r5, [r1, #16]
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	460e      	mov	r6, r1
 8008bba:	461c      	mov	r4, r3
 8008bbc:	f101 0e14 	add.w	lr, r1, #20
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	f8de 1000 	ldr.w	r1, [lr]
 8008bc6:	b28b      	uxth	r3, r1
 8008bc8:	fb02 4303 	mla	r3, r2, r3, r4
 8008bcc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008bd0:	0c09      	lsrs	r1, r1, #16
 8008bd2:	fb02 cc01 	mla	ip, r2, r1, ip
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8008bde:	4285      	cmp	r5, r0
 8008be0:	f84e 3b04 	str.w	r3, [lr], #4
 8008be4:	ea4f 441c 	mov.w	r4, ip, lsr #16
 8008be8:	dceb      	bgt.n	8008bc2 <__multadd+0x12>
 8008bea:	b13c      	cbz	r4, 8008bfc <__multadd+0x4c>
 8008bec:	68b3      	ldr	r3, [r6, #8]
 8008bee:	42ab      	cmp	r3, r5
 8008bf0:	dd07      	ble.n	8008c02 <__multadd+0x52>
 8008bf2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8008bf6:	3501      	adds	r5, #1
 8008bf8:	615c      	str	r4, [r3, #20]
 8008bfa:	6135      	str	r5, [r6, #16]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c02:	6871      	ldr	r1, [r6, #4]
 8008c04:	4638      	mov	r0, r7
 8008c06:	3101      	adds	r1, #1
 8008c08:	f7ff ffa2 	bl	8008b50 <_Balloc>
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	b1a8      	cbz	r0, 8008c3c <__multadd+0x8c>
 8008c10:	6932      	ldr	r2, [r6, #16]
 8008c12:	3202      	adds	r2, #2
 8008c14:	f106 010c 	add.w	r1, r6, #12
 8008c18:	0092      	lsls	r2, r2, #2
 8008c1a:	300c      	adds	r0, #12
 8008c1c:	f7f7 faf0 	bl	8000200 <memcpy>
 8008c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c22:	6872      	ldr	r2, [r6, #4]
 8008c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c28:	6031      	str	r1, [r6, #0]
 8008c2a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008c2e:	4646      	mov	r6, r8
 8008c30:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8008c34:	3501      	adds	r5, #1
 8008c36:	615c      	str	r4, [r3, #20]
 8008c38:	6135      	str	r5, [r6, #16]
 8008c3a:	e7df      	b.n	8008bfc <__multadd+0x4c>
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <__multadd+0x98>)
 8008c3e:	4803      	ldr	r0, [pc, #12]	; (8008c4c <__multadd+0x9c>)
 8008c40:	4642      	mov	r2, r8
 8008c42:	21b5      	movs	r1, #181	; 0xb5
 8008c44:	f001 fd30 	bl	800a6a8 <__assert_func>
 8008c48:	0800b194 	.word	0x0800b194
 8008c4c:	0800b228 	.word	0x0800b228

08008c50 <__hi0bits>:
 8008c50:	0c02      	lsrs	r2, r0, #16
 8008c52:	0412      	lsls	r2, r2, #16
 8008c54:	4603      	mov	r3, r0
 8008c56:	b9ca      	cbnz	r2, 8008c8c <__hi0bits+0x3c>
 8008c58:	0403      	lsls	r3, r0, #16
 8008c5a:	2010      	movs	r0, #16
 8008c5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c60:	bf04      	itt	eq
 8008c62:	021b      	lsleq	r3, r3, #8
 8008c64:	3008      	addeq	r0, #8
 8008c66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c6a:	bf04      	itt	eq
 8008c6c:	011b      	lsleq	r3, r3, #4
 8008c6e:	3004      	addeq	r0, #4
 8008c70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c74:	bf04      	itt	eq
 8008c76:	009b      	lsleq	r3, r3, #2
 8008c78:	3002      	addeq	r0, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	db05      	blt.n	8008c8a <__hi0bits+0x3a>
 8008c7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c82:	f100 0001 	add.w	r0, r0, #1
 8008c86:	bf08      	it	eq
 8008c88:	2020      	moveq	r0, #32
 8008c8a:	4770      	bx	lr
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e7e5      	b.n	8008c5c <__hi0bits+0xc>

08008c90 <__lo0bits>:
 8008c90:	6803      	ldr	r3, [r0, #0]
 8008c92:	4602      	mov	r2, r0
 8008c94:	f013 0007 	ands.w	r0, r3, #7
 8008c98:	d007      	beq.n	8008caa <__lo0bits+0x1a>
 8008c9a:	07d9      	lsls	r1, r3, #31
 8008c9c:	d41d      	bmi.n	8008cda <__lo0bits+0x4a>
 8008c9e:	0798      	lsls	r0, r3, #30
 8008ca0:	d51f      	bpl.n	8008ce2 <__lo0bits+0x52>
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	4770      	bx	lr
 8008caa:	b299      	uxth	r1, r3
 8008cac:	b909      	cbnz	r1, 8008cb2 <__lo0bits+0x22>
 8008cae:	0c1b      	lsrs	r3, r3, #16
 8008cb0:	2010      	movs	r0, #16
 8008cb2:	b2d9      	uxtb	r1, r3
 8008cb4:	b909      	cbnz	r1, 8008cba <__lo0bits+0x2a>
 8008cb6:	3008      	adds	r0, #8
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	0719      	lsls	r1, r3, #28
 8008cbc:	bf04      	itt	eq
 8008cbe:	091b      	lsreq	r3, r3, #4
 8008cc0:	3004      	addeq	r0, #4
 8008cc2:	0799      	lsls	r1, r3, #30
 8008cc4:	bf04      	itt	eq
 8008cc6:	089b      	lsreq	r3, r3, #2
 8008cc8:	3002      	addeq	r0, #2
 8008cca:	07d9      	lsls	r1, r3, #31
 8008ccc:	d403      	bmi.n	8008cd6 <__lo0bits+0x46>
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	f100 0001 	add.w	r0, r0, #1
 8008cd4:	d003      	beq.n	8008cde <__lo0bits+0x4e>
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	4770      	bx	lr
 8008cda:	2000      	movs	r0, #0
 8008cdc:	4770      	bx	lr
 8008cde:	2020      	movs	r0, #32
 8008ce0:	4770      	bx	lr
 8008ce2:	089b      	lsrs	r3, r3, #2
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	2002      	movs	r0, #2
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop

08008cec <__i2b>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	b14b      	cbz	r3, 8008d0a <__i2b+0x1e>
 8008cf6:	6858      	ldr	r0, [r3, #4]
 8008cf8:	b1b0      	cbz	r0, 8008d28 <__i2b+0x3c>
 8008cfa:	6802      	ldr	r2, [r0, #0]
 8008cfc:	605a      	str	r2, [r3, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2301      	movs	r3, #1
 8008d02:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d06:	60c2      	str	r2, [r0, #12]
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
 8008d0a:	2221      	movs	r2, #33	; 0x21
 8008d0c:	2104      	movs	r1, #4
 8008d0e:	f7fb fe2f 	bl	8004970 <_calloc_r>
 8008d12:	4603      	mov	r3, r0
 8008d14:	64e0      	str	r0, [r4, #76]	; 0x4c
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d1ed      	bne.n	8008cf6 <__i2b+0xa>
 8008d1a:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <__i2b+0x54>)
 8008d1c:	4809      	ldr	r0, [pc, #36]	; (8008d44 <__i2b+0x58>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d24:	f001 fcc0 	bl	800a6a8 <__assert_func>
 8008d28:	221c      	movs	r2, #28
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f7fb fe1f 	bl	8004970 <_calloc_r>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d0f1      	beq.n	8008d1a <__i2b+0x2e>
 8008d36:	2201      	movs	r2, #1
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8008d3e:	e7de      	b.n	8008cfe <__i2b+0x12>
 8008d40:	0800b194 	.word	0x0800b194
 8008d44:	0800b228 	.word	0x0800b228

08008d48 <__multiply>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	690e      	ldr	r6, [r1, #16]
 8008d4e:	6915      	ldr	r5, [r2, #16]
 8008d50:	42ae      	cmp	r6, r5
 8008d52:	b085      	sub	sp, #20
 8008d54:	4688      	mov	r8, r1
 8008d56:	4614      	mov	r4, r2
 8008d58:	db05      	blt.n	8008d66 <__multiply+0x1e>
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	4635      	mov	r5, r6
 8008d60:	460c      	mov	r4, r1
 8008d62:	4616      	mov	r6, r2
 8008d64:	4698      	mov	r8, r3
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	6861      	ldr	r1, [r4, #4]
 8008d6a:	19af      	adds	r7, r5, r6
 8008d6c:	42bb      	cmp	r3, r7
 8008d6e:	bfb8      	it	lt
 8008d70:	3101      	addlt	r1, #1
 8008d72:	f7ff feed 	bl	8008b50 <_Balloc>
 8008d76:	9001      	str	r0, [sp, #4]
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f000 8087 	beq.w	8008e8c <__multiply+0x144>
 8008d7e:	9b01      	ldr	r3, [sp, #4]
 8008d80:	f103 0914 	add.w	r9, r3, #20
 8008d84:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 8008d88:	45d1      	cmp	r9, sl
 8008d8a:	d205      	bcs.n	8008d98 <__multiply+0x50>
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f843 2b04 	str.w	r2, [r3], #4
 8008d94:	459a      	cmp	sl, r3
 8008d96:	d8fb      	bhi.n	8008d90 <__multiply+0x48>
 8008d98:	f108 0814 	add.w	r8, r8, #20
 8008d9c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8008da0:	f104 0314 	add.w	r3, r4, #20
 8008da4:	45d8      	cmp	r8, fp
 8008da6:	461a      	mov	r2, r3
 8008da8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008dac:	d25f      	bcs.n	8008e6e <__multiply+0x126>
 8008dae:	1b2b      	subs	r3, r5, r4
 8008db0:	3b15      	subs	r3, #21
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	3304      	adds	r3, #4
 8008db8:	3415      	adds	r4, #21
 8008dba:	42a5      	cmp	r5, r4
 8008dbc:	bf38      	it	cc
 8008dbe:	2304      	movcc	r3, #4
 8008dc0:	e9cd a702 	strd	sl, r7, [sp, #8]
 8008dc4:	46ac      	mov	ip, r5
 8008dc6:	461f      	mov	r7, r3
 8008dc8:	4692      	mov	sl, r2
 8008dca:	e005      	b.n	8008dd8 <__multiply+0x90>
 8008dcc:	0c00      	lsrs	r0, r0, #16
 8008dce:	d129      	bne.n	8008e24 <__multiply+0xdc>
 8008dd0:	45c3      	cmp	fp, r8
 8008dd2:	f109 0904 	add.w	r9, r9, #4
 8008dd6:	d948      	bls.n	8008e6a <__multiply+0x122>
 8008dd8:	f858 0b04 	ldr.w	r0, [r8], #4
 8008ddc:	b285      	uxth	r5, r0
 8008dde:	2d00      	cmp	r5, #0
 8008de0:	d0f4      	beq.n	8008dcc <__multiply+0x84>
 8008de2:	4656      	mov	r6, sl
 8008de4:	464c      	mov	r4, r9
 8008de6:	2300      	movs	r3, #0
 8008de8:	f856 0b04 	ldr.w	r0, [r6], #4
 8008dec:	6821      	ldr	r1, [r4, #0]
 8008dee:	b282      	uxth	r2, r0
 8008df0:	fa1f fe81 	uxth.w	lr, r1
 8008df4:	fb05 ee02 	mla	lr, r5, r2, lr
 8008df8:	0c00      	lsrs	r0, r0, #16
 8008dfa:	0c0a      	lsrs	r2, r1, #16
 8008dfc:	4473      	add	r3, lr
 8008dfe:	fb05 2200 	mla	r2, r5, r0, r2
 8008e02:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e0c:	45b4      	cmp	ip, r6
 8008e0e:	f844 3b04 	str.w	r3, [r4], #4
 8008e12:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8008e16:	d8e7      	bhi.n	8008de8 <__multiply+0xa0>
 8008e18:	f849 3007 	str.w	r3, [r9, r7]
 8008e1c:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8008e20:	0c00      	lsrs	r0, r0, #16
 8008e22:	d0d5      	beq.n	8008dd0 <__multiply+0x88>
 8008e24:	f8d9 3000 	ldr.w	r3, [r9]
 8008e28:	4654      	mov	r4, sl
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	464d      	mov	r5, r9
 8008e2e:	2200      	movs	r2, #0
 8008e30:	8826      	ldrh	r6, [r4, #0]
 8008e32:	0c09      	lsrs	r1, r1, #16
 8008e34:	fb00 1106 	mla	r1, r0, r6, r1
 8008e38:	440a      	add	r2, r1
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e40:	f845 3b04 	str.w	r3, [r5], #4
 8008e44:	f854 6b04 	ldr.w	r6, [r4], #4
 8008e48:	6829      	ldr	r1, [r5, #0]
 8008e4a:	0c36      	lsrs	r6, r6, #16
 8008e4c:	b28b      	uxth	r3, r1
 8008e4e:	fb00 3306 	mla	r3, r0, r6, r3
 8008e52:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008e56:	45a4      	cmp	ip, r4
 8008e58:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8008e5c:	d8e8      	bhi.n	8008e30 <__multiply+0xe8>
 8008e5e:	45c3      	cmp	fp, r8
 8008e60:	f849 3007 	str.w	r3, [r9, r7]
 8008e64:	f109 0904 	add.w	r9, r9, #4
 8008e68:	d8b6      	bhi.n	8008dd8 <__multiply+0x90>
 8008e6a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	dc02      	bgt.n	8008e78 <__multiply+0x130>
 8008e72:	e005      	b.n	8008e80 <__multiply+0x138>
 8008e74:	3f01      	subs	r7, #1
 8008e76:	d003      	beq.n	8008e80 <__multiply+0x138>
 8008e78:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0f9      	beq.n	8008e74 <__multiply+0x12c>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	4618      	mov	r0, r3
 8008e84:	611f      	str	r7, [r3, #16]
 8008e86:	b005      	add	sp, #20
 8008e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <__multiply+0x154>)
 8008e8e:	4804      	ldr	r0, [pc, #16]	; (8008ea0 <__multiply+0x158>)
 8008e90:	9a01      	ldr	r2, [sp, #4]
 8008e92:	f240 115d 	movw	r1, #349	; 0x15d
 8008e96:	f001 fc07 	bl	800a6a8 <__assert_func>
 8008e9a:	bf00      	nop
 8008e9c:	0800b194 	.word	0x0800b194
 8008ea0:	0800b228 	.word	0x0800b228

08008ea4 <__pow5mult>:
 8008ea4:	f012 0303 	ands.w	r3, r2, #3
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	4614      	mov	r4, r2
 8008eae:	4606      	mov	r6, r0
 8008eb0:	d132      	bne.n	8008f18 <__pow5mult+0x74>
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	10a4      	asrs	r4, r4, #2
 8008eb6:	d020      	beq.n	8008efa <__pow5mult+0x56>
 8008eb8:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8008ebc:	f1b8 0f00 	cmp.w	r8, #0
 8008ec0:	d033      	beq.n	8008f2a <__pow5mult+0x86>
 8008ec2:	07e3      	lsls	r3, r4, #31
 8008ec4:	f04f 0700 	mov.w	r7, #0
 8008ec8:	d407      	bmi.n	8008eda <__pow5mult+0x36>
 8008eca:	1064      	asrs	r4, r4, #1
 8008ecc:	d015      	beq.n	8008efa <__pow5mult+0x56>
 8008ece:	f8d8 0000 	ldr.w	r0, [r8]
 8008ed2:	b1a8      	cbz	r0, 8008f00 <__pow5mult+0x5c>
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	07e3      	lsls	r3, r4, #31
 8008ed8:	d5f7      	bpl.n	8008eca <__pow5mult+0x26>
 8008eda:	4642      	mov	r2, r8
 8008edc:	4629      	mov	r1, r5
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7ff ff32 	bl	8008d48 <__multiply>
 8008ee4:	b1b5      	cbz	r5, 8008f14 <__pow5mult+0x70>
 8008ee6:	6869      	ldr	r1, [r5, #4]
 8008ee8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8008eea:	1064      	asrs	r4, r4, #1
 8008eec:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8008ef0:	602a      	str	r2, [r5, #0]
 8008ef2:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	d1e9      	bne.n	8008ece <__pow5mult+0x2a>
 8008efa:	4628      	mov	r0, r5
 8008efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f00:	4642      	mov	r2, r8
 8008f02:	4641      	mov	r1, r8
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7ff ff1f 	bl	8008d48 <__multiply>
 8008f0a:	f8c8 0000 	str.w	r0, [r8]
 8008f0e:	6007      	str	r7, [r0, #0]
 8008f10:	4680      	mov	r8, r0
 8008f12:	e7e0      	b.n	8008ed6 <__pow5mult+0x32>
 8008f14:	4605      	mov	r5, r0
 8008f16:	e7d8      	b.n	8008eca <__pow5mult+0x26>
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	4a0f      	ldr	r2, [pc, #60]	; (8008f58 <__pow5mult+0xb4>)
 8008f1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f20:	2300      	movs	r3, #0
 8008f22:	f7ff fe45 	bl	8008bb0 <__multadd>
 8008f26:	4605      	mov	r5, r0
 8008f28:	e7c4      	b.n	8008eb4 <__pow5mult+0x10>
 8008f2a:	2101      	movs	r1, #1
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f7ff fe0f 	bl	8008b50 <_Balloc>
 8008f32:	4680      	mov	r8, r0
 8008f34:	b140      	cbz	r0, 8008f48 <__pow5mult+0xa4>
 8008f36:	2301      	movs	r3, #1
 8008f38:	f240 2271 	movw	r2, #625	; 0x271
 8008f3c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8008f40:	2300      	movs	r3, #0
 8008f42:	64b0      	str	r0, [r6, #72]	; 0x48
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	e7bc      	b.n	8008ec2 <__pow5mult+0x1e>
 8008f48:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <__pow5mult+0xb8>)
 8008f4a:	4805      	ldr	r0, [pc, #20]	; (8008f60 <__pow5mult+0xbc>)
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f52:	f001 fba9 	bl	800a6a8 <__assert_func>
 8008f56:	bf00      	nop
 8008f58:	0800b398 	.word	0x0800b398
 8008f5c:	0800b194 	.word	0x0800b194
 8008f60:	0800b228 	.word	0x0800b228

08008f64 <__lshift>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	460c      	mov	r4, r1
 8008f6a:	4690      	mov	r8, r2
 8008f6c:	6926      	ldr	r6, [r4, #16]
 8008f6e:	68a3      	ldr	r3, [r4, #8]
 8008f70:	6849      	ldr	r1, [r1, #4]
 8008f72:	eb06 1662 	add.w	r6, r6, r2, asr #5
 8008f76:	1c75      	adds	r5, r6, #1
 8008f78:	429d      	cmp	r5, r3
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008f80:	dd04      	ble.n	8008f8c <__lshift+0x28>
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	429d      	cmp	r5, r3
 8008f86:	f101 0101 	add.w	r1, r1, #1
 8008f8a:	dcfa      	bgt.n	8008f82 <__lshift+0x1e>
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff fddf 	bl	8008b50 <_Balloc>
 8008f92:	4684      	mov	ip, r0
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d051      	beq.n	800903c <__lshift+0xd8>
 8008f98:	f1b9 0f00 	cmp.w	r9, #0
 8008f9c:	f100 0014 	add.w	r0, r0, #20
 8008fa0:	dd0e      	ble.n	8008fc0 <__lshift+0x5c>
 8008fa2:	f109 0205 	add.w	r2, r9, #5
 8008fa6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8008faa:	4603      	mov	r3, r0
 8008fac:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	f843 1b04 	str.w	r1, [r3], #4
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d1fb      	bne.n	8008fb2 <__lshift+0x4e>
 8008fba:	f1ae 0314 	sub.w	r3, lr, #20
 8008fbe:	4418      	add	r0, r3
 8008fc0:	6921      	ldr	r1, [r4, #16]
 8008fc2:	f104 0314 	add.w	r3, r4, #20
 8008fc6:	f018 081f 	ands.w	r8, r8, #31
 8008fca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008fce:	d02d      	beq.n	800902c <__lshift+0xc8>
 8008fd0:	f1c8 0920 	rsb	r9, r8, #32
 8008fd4:	4686      	mov	lr, r0
 8008fd6:	f04f 0a00 	mov.w	sl, #0
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	fa02 f208 	lsl.w	r2, r2, r8
 8008fe0:	ea42 020a 	orr.w	r2, r2, sl
 8008fe4:	f84e 2b04 	str.w	r2, [lr], #4
 8008fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fec:	4299      	cmp	r1, r3
 8008fee:	fa22 fa09 	lsr.w	sl, r2, r9
 8008ff2:	d8f2      	bhi.n	8008fda <__lshift+0x76>
 8008ff4:	1b0b      	subs	r3, r1, r4
 8008ff6:	3b15      	subs	r3, #21
 8008ff8:	f023 0303 	bic.w	r3, r3, #3
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	f104 0215 	add.w	r2, r4, #21
 8009002:	4291      	cmp	r1, r2
 8009004:	bf38      	it	cc
 8009006:	2304      	movcc	r3, #4
 8009008:	f1ba 0f00 	cmp.w	sl, #0
 800900c:	bf18      	it	ne
 800900e:	462e      	movne	r6, r5
 8009010:	f840 a003 	str.w	sl, [r0, r3]
 8009014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009016:	6862      	ldr	r2, [r4, #4]
 8009018:	f8cc 6010 	str.w	r6, [ip, #16]
 800901c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009020:	6021      	str	r1, [r4, #0]
 8009022:	4660      	mov	r0, ip
 8009024:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	3804      	subs	r0, #4
 800902e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009032:	f840 2f04 	str.w	r2, [r0, #4]!
 8009036:	4299      	cmp	r1, r3
 8009038:	d8f9      	bhi.n	800902e <__lshift+0xca>
 800903a:	e7eb      	b.n	8009014 <__lshift+0xb0>
 800903c:	4b03      	ldr	r3, [pc, #12]	; (800904c <__lshift+0xe8>)
 800903e:	4804      	ldr	r0, [pc, #16]	; (8009050 <__lshift+0xec>)
 8009040:	4662      	mov	r2, ip
 8009042:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009046:	f001 fb2f 	bl	800a6a8 <__assert_func>
 800904a:	bf00      	nop
 800904c:	0800b194 	.word	0x0800b194
 8009050:	0800b228 	.word	0x0800b228

08009054 <__mcmp>:
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	4684      	mov	ip, r0
 8009058:	6900      	ldr	r0, [r0, #16]
 800905a:	1ac0      	subs	r0, r0, r3
 800905c:	d115      	bne.n	800908a <__mcmp+0x36>
 800905e:	f10c 0c14 	add.w	ip, ip, #20
 8009062:	3114      	adds	r1, #20
 8009064:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8009068:	b410      	push	{r4}
 800906a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800906e:	e001      	b.n	8009074 <__mcmp+0x20>
 8009070:	4594      	cmp	ip, r2
 8009072:	d208      	bcs.n	8009086 <__mcmp+0x32>
 8009074:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8009078:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800907c:	428c      	cmp	r4, r1
 800907e:	d0f7      	beq.n	8009070 <__mcmp+0x1c>
 8009080:	d204      	bcs.n	800908c <__mcmp+0x38>
 8009082:	f04f 30ff 	mov.w	r0, #4294967295
 8009086:	bc10      	pop	{r4}
 8009088:	4770      	bx	lr
 800908a:	4770      	bx	lr
 800908c:	2001      	movs	r0, #1
 800908e:	bc10      	pop	{r4}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop

08009094 <__mdiff>:
 8009094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	690f      	ldr	r7, [r1, #16]
 800909a:	6913      	ldr	r3, [r2, #16]
 800909c:	1aff      	subs	r7, r7, r3
 800909e:	2f00      	cmp	r7, #0
 80090a0:	460e      	mov	r6, r1
 80090a2:	4690      	mov	r8, r2
 80090a4:	d17a      	bne.n	800919c <__mdiff+0x108>
 80090a6:	f101 0514 	add.w	r5, r1, #20
 80090aa:	3214      	adds	r2, #20
 80090ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80090b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80090b4:	e001      	b.n	80090ba <__mdiff+0x26>
 80090b6:	429d      	cmp	r5, r3
 80090b8:	d273      	bcs.n	80091a2 <__mdiff+0x10e>
 80090ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090be:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 80090c2:	42a1      	cmp	r1, r4
 80090c4:	d0f7      	beq.n	80090b6 <__mdiff+0x22>
 80090c6:	d364      	bcc.n	8009192 <__mdiff+0xfe>
 80090c8:	6871      	ldr	r1, [r6, #4]
 80090ca:	f7ff fd41 	bl	8008b50 <_Balloc>
 80090ce:	4681      	mov	r9, r0
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d072      	beq.n	80091ba <__mdiff+0x126>
 80090d4:	6935      	ldr	r5, [r6, #16]
 80090d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80090da:	60c7      	str	r7, [r0, #12]
 80090dc:	f108 0e14 	add.w	lr, r8, #20
 80090e0:	f106 0014 	add.w	r0, r6, #20
 80090e4:	f109 0a14 	add.w	sl, r9, #20
 80090e8:	f106 0c10 	add.w	ip, r6, #16
 80090ec:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 80090f0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 80090f4:	4656      	mov	r6, sl
 80090f6:	2100      	movs	r1, #0
 80090f8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80090fc:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8009100:	b2a3      	uxth	r3, r4
 8009102:	fa11 f18b 	uxtah	r1, r1, fp
 8009106:	1acb      	subs	r3, r1, r3
 8009108:	0c21      	lsrs	r1, r4, #16
 800910a:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 800910e:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8009112:	b29b      	uxth	r3, r3
 8009114:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009118:	4572      	cmp	r2, lr
 800911a:	f846 3b04 	str.w	r3, [r6], #4
 800911e:	ea4f 4121 	mov.w	r1, r1, asr #16
 8009122:	d8e9      	bhi.n	80090f8 <__mdiff+0x64>
 8009124:	eba2 0408 	sub.w	r4, r2, r8
 8009128:	3c15      	subs	r4, #21
 800912a:	f108 0815 	add.w	r8, r8, #21
 800912e:	4542      	cmp	r2, r8
 8009130:	f024 0603 	bic.w	r6, r4, #3
 8009134:	f106 0604 	add.w	r6, r6, #4
 8009138:	bf38      	it	cc
 800913a:	2604      	movcc	r6, #4
 800913c:	4430      	add	r0, r6
 800913e:	f024 0203 	bic.w	r2, r4, #3
 8009142:	bf38      	it	cc
 8009144:	2200      	movcc	r2, #0
 8009146:	4287      	cmp	r7, r0
 8009148:	4452      	add	r2, sl
 800914a:	44b2      	add	sl, r6
 800914c:	d916      	bls.n	800917c <__mdiff+0xe8>
 800914e:	4656      	mov	r6, sl
 8009150:	4604      	mov	r4, r0
 8009152:	f854 3b04 	ldr.w	r3, [r4], #4
 8009156:	fa11 f183 	uxtah	r1, r1, r3
 800915a:	140a      	asrs	r2, r1, #16
 800915c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009160:	b289      	uxth	r1, r1
 8009162:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8009166:	42a7      	cmp	r7, r4
 8009168:	f846 3b04 	str.w	r3, [r6], #4
 800916c:	ea4f 4122 	mov.w	r1, r2, asr #16
 8009170:	d8ef      	bhi.n	8009152 <__mdiff+0xbe>
 8009172:	1e7a      	subs	r2, r7, #1
 8009174:	1a10      	subs	r0, r2, r0
 8009176:	f020 0203 	bic.w	r2, r0, #3
 800917a:	4452      	add	r2, sl
 800917c:	b923      	cbnz	r3, 8009188 <__mdiff+0xf4>
 800917e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009182:	3d01      	subs	r5, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0fa      	beq.n	800917e <__mdiff+0xea>
 8009188:	f8c9 5010 	str.w	r5, [r9, #16]
 800918c:	4648      	mov	r0, r9
 800918e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009192:	4633      	mov	r3, r6
 8009194:	2701      	movs	r7, #1
 8009196:	4646      	mov	r6, r8
 8009198:	4698      	mov	r8, r3
 800919a:	e795      	b.n	80090c8 <__mdiff+0x34>
 800919c:	dbf9      	blt.n	8009192 <__mdiff+0xfe>
 800919e:	2700      	movs	r7, #0
 80091a0:	e792      	b.n	80090c8 <__mdiff+0x34>
 80091a2:	2100      	movs	r1, #0
 80091a4:	f7ff fcd4 	bl	8008b50 <_Balloc>
 80091a8:	4681      	mov	r9, r0
 80091aa:	b168      	cbz	r0, 80091c8 <__mdiff+0x134>
 80091ac:	2201      	movs	r2, #1
 80091ae:	2300      	movs	r3, #0
 80091b0:	e9c9 2304 	strd	r2, r3, [r9, #16]
 80091b4:	4648      	mov	r0, r9
 80091b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <__mdiff+0x144>)
 80091bc:	4807      	ldr	r0, [pc, #28]	; (80091dc <__mdiff+0x148>)
 80091be:	464a      	mov	r2, r9
 80091c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091c4:	f001 fa70 	bl	800a6a8 <__assert_func>
 80091c8:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <__mdiff+0x144>)
 80091ca:	4804      	ldr	r0, [pc, #16]	; (80091dc <__mdiff+0x148>)
 80091cc:	464a      	mov	r2, r9
 80091ce:	f240 2132 	movw	r1, #562	; 0x232
 80091d2:	f001 fa69 	bl	800a6a8 <__assert_func>
 80091d6:	bf00      	nop
 80091d8:	0800b194 	.word	0x0800b194
 80091dc:	0800b228 	.word	0x0800b228

080091e0 <__d2b>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	2101      	movs	r1, #1
 80091e4:	b082      	sub	sp, #8
 80091e6:	4616      	mov	r6, r2
 80091e8:	461d      	mov	r5, r3
 80091ea:	f7ff fcb1 	bl	8008b50 <_Balloc>
 80091ee:	4604      	mov	r4, r0
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d04b      	beq.n	800928c <__d2b+0xac>
 80091f4:	462b      	mov	r3, r5
 80091f6:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80091fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091fe:	b10d      	cbz	r5, 8009204 <__d2b+0x24>
 8009200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009204:	2e00      	cmp	r6, #0
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	d022      	beq.n	8009250 <__d2b+0x70>
 800920a:	4668      	mov	r0, sp
 800920c:	9600      	str	r6, [sp, #0]
 800920e:	f7ff fd3f 	bl	8008c90 <__lo0bits>
 8009212:	2800      	cmp	r0, #0
 8009214:	d036      	beq.n	8009284 <__d2b+0xa4>
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	9900      	ldr	r1, [sp, #0]
 800921a:	f1c0 0220 	rsb	r2, r0, #32
 800921e:	fa03 f202 	lsl.w	r2, r3, r2
 8009222:	430a      	orrs	r2, r1
 8009224:	40c3      	lsrs	r3, r0
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	6162      	str	r2, [r4, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bf14      	ite	ne
 800922e:	2102      	movne	r1, #2
 8009230:	2101      	moveq	r1, #1
 8009232:	61a3      	str	r3, [r4, #24]
 8009234:	6121      	str	r1, [r4, #16]
 8009236:	b1ad      	cbz	r5, 8009264 <__d2b+0x84>
 8009238:	9a06      	ldr	r2, [sp, #24]
 800923a:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 800923e:	4403      	add	r3, r0
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	9b07      	ldr	r3, [sp, #28]
 8009244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009248:	6018      	str	r0, [r3, #0]
 800924a:	4620      	mov	r0, r4
 800924c:	b002      	add	sp, #8
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	a801      	add	r0, sp, #4
 8009252:	f7ff fd1d 	bl	8008c90 <__lo0bits>
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	2101      	movs	r1, #1
 800925a:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800925e:	3020      	adds	r0, #32
 8009260:	2d00      	cmp	r5, #0
 8009262:	d1e9      	bne.n	8009238 <__d2b+0x58>
 8009264:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 8009268:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800926c:	6910      	ldr	r0, [r2, #16]
 800926e:	9a06      	ldr	r2, [sp, #24]
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	f7ff fced 	bl	8008c50 <__hi0bits>
 8009276:	9b07      	ldr	r3, [sp, #28]
 8009278:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800927c:	4620      	mov	r0, r4
 800927e:	6019      	str	r1, [r3, #0]
 8009280:	b002      	add	sp, #8
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009288:	6162      	str	r2, [r4, #20]
 800928a:	e7ce      	b.n	800922a <__d2b+0x4a>
 800928c:	4b03      	ldr	r3, [pc, #12]	; (800929c <__d2b+0xbc>)
 800928e:	4804      	ldr	r0, [pc, #16]	; (80092a0 <__d2b+0xc0>)
 8009290:	4622      	mov	r2, r4
 8009292:	f240 310a 	movw	r1, #778	; 0x30a
 8009296:	f001 fa07 	bl	800a6a8 <__assert_func>
 800929a:	bf00      	nop
 800929c:	0800b194 	.word	0x0800b194
 80092a0:	0800b228 	.word	0x0800b228

080092a4 <_read_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	460c      	mov	r4, r1
 80092a8:	4d08      	ldr	r5, [pc, #32]	; (80092cc <_read_r+0x28>)
 80092aa:	4684      	mov	ip, r0
 80092ac:	4611      	mov	r1, r2
 80092ae:	4620      	mov	r0, r4
 80092b0:	461a      	mov	r2, r3
 80092b2:	2300      	movs	r3, #0
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	4664      	mov	r4, ip
 80092b8:	f001 fbf8 	bl	800aaac <_read>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d000      	beq.n	80092c2 <_read_r+0x1e>
 80092c0:	bd38      	pop	{r3, r4, r5, pc}
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0fb      	beq.n	80092c0 <_read_r+0x1c>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	200010b8 	.word	0x200010b8

080092d0 <_realloc_r>:
 80092d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	4617      	mov	r7, r2
 80092d6:	2900      	cmp	r1, #0
 80092d8:	f000 8098 	beq.w	800940c <_realloc_r+0x13c>
 80092dc:	f107 050b 	add.w	r5, r7, #11
 80092e0:	4680      	mov	r8, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	f7fc f834 	bl	8005350 <__malloc_lock>
 80092e8:	2d16      	cmp	r5, #22
 80092ea:	d85d      	bhi.n	80093a8 <_realloc_r+0xd8>
 80092ec:	2510      	movs	r5, #16
 80092ee:	462a      	mov	r2, r5
 80092f0:	42af      	cmp	r7, r5
 80092f2:	d85e      	bhi.n	80093b2 <_realloc_r+0xe2>
 80092f4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80092f8:	f021 0603 	bic.w	r6, r1, #3
 80092fc:	4296      	cmp	r6, r2
 80092fe:	f1a4 0908 	sub.w	r9, r4, #8
 8009302:	da62      	bge.n	80093ca <_realloc_r+0xfa>
 8009304:	4bbc      	ldr	r3, [pc, #752]	; (80095f8 <_realloc_r+0x328>)
 8009306:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800930a:	eb09 0006 	add.w	r0, r9, r6
 800930e:	4584      	cmp	ip, r0
 8009310:	f000 8097 	beq.w	8009442 <_realloc_r+0x172>
 8009314:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009318:	f02c 0301 	bic.w	r3, ip, #1
 800931c:	4403      	add	r3, r0
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	07db      	lsls	r3, r3, #31
 8009322:	d468      	bmi.n	80093f6 <_realloc_r+0x126>
 8009324:	f02c 0c03 	bic.w	ip, ip, #3
 8009328:	eb06 030c 	add.w	r3, r6, ip
 800932c:	4293      	cmp	r3, r2
 800932e:	da47      	bge.n	80093c0 <_realloc_r+0xf0>
 8009330:	07cb      	lsls	r3, r1, #31
 8009332:	d410      	bmi.n	8009356 <_realloc_r+0x86>
 8009334:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009338:	eba9 0a03 	sub.w	sl, r9, r3
 800933c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009340:	f023 0103 	bic.w	r1, r3, #3
 8009344:	448c      	add	ip, r1
 8009346:	44b4      	add	ip, r6
 8009348:	4594      	cmp	ip, r2
 800934a:	f280 8111 	bge.w	8009570 <_realloc_r+0x2a0>
 800934e:	1873      	adds	r3, r6, r1
 8009350:	4293      	cmp	r3, r2
 8009352:	f280 80e8 	bge.w	8009526 <_realloc_r+0x256>
 8009356:	4639      	mov	r1, r7
 8009358:	4640      	mov	r0, r8
 800935a:	f7fb fc47 	bl	8004bec <_malloc_r>
 800935e:	4607      	mov	r7, r0
 8009360:	b1e0      	cbz	r0, 800939c <_realloc_r+0xcc>
 8009362:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009366:	f023 0301 	bic.w	r3, r3, #1
 800936a:	444b      	add	r3, r9
 800936c:	f1a0 0208 	sub.w	r2, r0, #8
 8009370:	4293      	cmp	r3, r2
 8009372:	f000 80d2 	beq.w	800951a <_realloc_r+0x24a>
 8009376:	1f32      	subs	r2, r6, #4
 8009378:	2a24      	cmp	r2, #36	; 0x24
 800937a:	f200 80f5 	bhi.w	8009568 <_realloc_r+0x298>
 800937e:	2a13      	cmp	r2, #19
 8009380:	f200 80ac 	bhi.w	80094dc <_realloc_r+0x20c>
 8009384:	4603      	mov	r3, r0
 8009386:	4622      	mov	r2, r4
 8009388:	6811      	ldr	r1, [r2, #0]
 800938a:	6019      	str	r1, [r3, #0]
 800938c:	6851      	ldr	r1, [r2, #4]
 800938e:	6059      	str	r1, [r3, #4]
 8009390:	6892      	ldr	r2, [r2, #8]
 8009392:	609a      	str	r2, [r3, #8]
 8009394:	4621      	mov	r1, r4
 8009396:	4640      	mov	r0, r8
 8009398:	f7ff f8d6 	bl	8008548 <_free_r>
 800939c:	4640      	mov	r0, r8
 800939e:	f7fb ffdd 	bl	800535c <__malloc_unlock>
 80093a2:	4638      	mov	r0, r7
 80093a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	f025 0507 	bic.w	r5, r5, #7
 80093ac:	2d00      	cmp	r5, #0
 80093ae:	462a      	mov	r2, r5
 80093b0:	da9e      	bge.n	80092f0 <_realloc_r+0x20>
 80093b2:	230c      	movs	r3, #12
 80093b4:	f8c8 3000 	str.w	r3, [r8]
 80093b8:	2700      	movs	r7, #0
 80093ba:	4638      	mov	r0, r7
 80093bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c0:	461e      	mov	r6, r3
 80093c2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80093c6:	60d3      	str	r3, [r2, #12]
 80093c8:	609a      	str	r2, [r3, #8]
 80093ca:	1b73      	subs	r3, r6, r5
 80093cc:	2b0f      	cmp	r3, #15
 80093ce:	d822      	bhi.n	8009416 <_realloc_r+0x146>
 80093d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	4333      	orrs	r3, r6
 80093da:	444e      	add	r6, r9
 80093dc:	f8c9 3004 	str.w	r3, [r9, #4]
 80093e0:	6873      	ldr	r3, [r6, #4]
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	6073      	str	r3, [r6, #4]
 80093e8:	4640      	mov	r0, r8
 80093ea:	4627      	mov	r7, r4
 80093ec:	f7fb ffb6 	bl	800535c <__malloc_unlock>
 80093f0:	4638      	mov	r0, r7
 80093f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f6:	07c9      	lsls	r1, r1, #31
 80093f8:	d4ad      	bmi.n	8009356 <_realloc_r+0x86>
 80093fa:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80093fe:	eba9 0a03 	sub.w	sl, r9, r3
 8009402:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009406:	f021 0103 	bic.w	r1, r1, #3
 800940a:	e7a0      	b.n	800934e <_realloc_r+0x7e>
 800940c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	4611      	mov	r1, r2
 8009412:	f7fb bbeb 	b.w	8004bec <_malloc_r>
 8009416:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800941a:	f001 0101 	and.w	r1, r1, #1
 800941e:	4329      	orrs	r1, r5
 8009420:	f8c9 1004 	str.w	r1, [r9, #4]
 8009424:	eb09 0105 	add.w	r1, r9, r5
 8009428:	444e      	add	r6, r9
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	604b      	str	r3, [r1, #4]
 8009430:	6873      	ldr	r3, [r6, #4]
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	3108      	adds	r1, #8
 8009438:	6073      	str	r3, [r6, #4]
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff f884 	bl	8008548 <_free_r>
 8009440:	e7d2      	b.n	80093e8 <_realloc_r+0x118>
 8009442:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8009446:	f020 0b03 	bic.w	fp, r0, #3
 800944a:	eb06 0c0b 	add.w	ip, r6, fp
 800944e:	f105 0010 	add.w	r0, r5, #16
 8009452:	4584      	cmp	ip, r0
 8009454:	da4d      	bge.n	80094f2 <_realloc_r+0x222>
 8009456:	07c9      	lsls	r1, r1, #31
 8009458:	f53f af7d 	bmi.w	8009356 <_realloc_r+0x86>
 800945c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8009460:	eba9 0a01 	sub.w	sl, r9, r1
 8009464:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009468:	f021 0103 	bic.w	r1, r1, #3
 800946c:	448b      	add	fp, r1
 800946e:	44b3      	add	fp, r6
 8009470:	4558      	cmp	r0, fp
 8009472:	f73f af6c 	bgt.w	800934e <_realloc_r+0x7e>
 8009476:	4657      	mov	r7, sl
 8009478:	f8da 100c 	ldr.w	r1, [sl, #12]
 800947c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009480:	1f32      	subs	r2, r6, #4
 8009482:	2a24      	cmp	r2, #36	; 0x24
 8009484:	60c1      	str	r1, [r0, #12]
 8009486:	6088      	str	r0, [r1, #8]
 8009488:	f200 80db 	bhi.w	8009642 <_realloc_r+0x372>
 800948c:	2a13      	cmp	r2, #19
 800948e:	f240 80d6 	bls.w	800963e <_realloc_r+0x36e>
 8009492:	6821      	ldr	r1, [r4, #0]
 8009494:	f8ca 1008 	str.w	r1, [sl, #8]
 8009498:	6861      	ldr	r1, [r4, #4]
 800949a:	f8ca 100c 	str.w	r1, [sl, #12]
 800949e:	2a1b      	cmp	r2, #27
 80094a0:	f200 80df 	bhi.w	8009662 <_realloc_r+0x392>
 80094a4:	3408      	adds	r4, #8
 80094a6:	f10a 0210 	add.w	r2, sl, #16
 80094aa:	6821      	ldr	r1, [r4, #0]
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	6861      	ldr	r1, [r4, #4]
 80094b0:	6051      	str	r1, [r2, #4]
 80094b2:	68a1      	ldr	r1, [r4, #8]
 80094b4:	6091      	str	r1, [r2, #8]
 80094b6:	eb0a 0105 	add.w	r1, sl, r5
 80094ba:	ebab 0205 	sub.w	r2, fp, r5
 80094be:	f042 0201 	orr.w	r2, r2, #1
 80094c2:	6099      	str	r1, [r3, #8]
 80094c4:	604a      	str	r2, [r1, #4]
 80094c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	431d      	orrs	r5, r3
 80094d0:	4640      	mov	r0, r8
 80094d2:	f8ca 5004 	str.w	r5, [sl, #4]
 80094d6:	f7fb ff41 	bl	800535c <__malloc_unlock>
 80094da:	e76e      	b.n	80093ba <_realloc_r+0xea>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	6043      	str	r3, [r0, #4]
 80094e4:	2a1b      	cmp	r2, #27
 80094e6:	d868      	bhi.n	80095ba <_realloc_r+0x2ea>
 80094e8:	f104 0208 	add.w	r2, r4, #8
 80094ec:	f100 0308 	add.w	r3, r0, #8
 80094f0:	e74a      	b.n	8009388 <_realloc_r+0xb8>
 80094f2:	eb09 0205 	add.w	r2, r9, r5
 80094f6:	609a      	str	r2, [r3, #8]
 80094f8:	ebac 0305 	sub.w	r3, ip, r5
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	6053      	str	r3, [r2, #4]
 8009502:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	431d      	orrs	r5, r3
 800950c:	4640      	mov	r0, r8
 800950e:	f844 5c04 	str.w	r5, [r4, #-4]
 8009512:	f7fb ff23 	bl	800535c <__malloc_unlock>
 8009516:	4627      	mov	r7, r4
 8009518:	e74f      	b.n	80093ba <_realloc_r+0xea>
 800951a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800951e:	f023 0303 	bic.w	r3, r3, #3
 8009522:	441e      	add	r6, r3
 8009524:	e751      	b.n	80093ca <_realloc_r+0xfa>
 8009526:	4657      	mov	r7, sl
 8009528:	f8da 100c 	ldr.w	r1, [sl, #12]
 800952c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009530:	1f32      	subs	r2, r6, #4
 8009532:	2a24      	cmp	r2, #36	; 0x24
 8009534:	60c1      	str	r1, [r0, #12]
 8009536:	6088      	str	r0, [r1, #8]
 8009538:	d84c      	bhi.n	80095d4 <_realloc_r+0x304>
 800953a:	2a13      	cmp	r2, #19
 800953c:	d948      	bls.n	80095d0 <_realloc_r+0x300>
 800953e:	6821      	ldr	r1, [r4, #0]
 8009540:	f8ca 1008 	str.w	r1, [sl, #8]
 8009544:	6861      	ldr	r1, [r4, #4]
 8009546:	f8ca 100c 	str.w	r1, [sl, #12]
 800954a:	2a1b      	cmp	r2, #27
 800954c:	d856      	bhi.n	80095fc <_realloc_r+0x32c>
 800954e:	3408      	adds	r4, #8
 8009550:	f10a 0210 	add.w	r2, sl, #16
 8009554:	461e      	mov	r6, r3
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	6053      	str	r3, [r2, #4]
 800955e:	68a3      	ldr	r3, [r4, #8]
 8009560:	6093      	str	r3, [r2, #8]
 8009562:	46d1      	mov	r9, sl
 8009564:	463c      	mov	r4, r7
 8009566:	e730      	b.n	80093ca <_realloc_r+0xfa>
 8009568:	4621      	mov	r1, r4
 800956a:	f7fb fe23 	bl	80051b4 <memmove>
 800956e:	e711      	b.n	8009394 <_realloc_r+0xc4>
 8009570:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8009574:	4657      	mov	r7, sl
 8009576:	60cb      	str	r3, [r1, #12]
 8009578:	6099      	str	r1, [r3, #8]
 800957a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800957e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009582:	60cb      	str	r3, [r1, #12]
 8009584:	1f32      	subs	r2, r6, #4
 8009586:	2a24      	cmp	r2, #36	; 0x24
 8009588:	6099      	str	r1, [r3, #8]
 800958a:	d82d      	bhi.n	80095e8 <_realloc_r+0x318>
 800958c:	2a13      	cmp	r2, #19
 800958e:	d929      	bls.n	80095e4 <_realloc_r+0x314>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	f8ca 3008 	str.w	r3, [sl, #8]
 8009596:	6863      	ldr	r3, [r4, #4]
 8009598:	f8ca 300c 	str.w	r3, [sl, #12]
 800959c:	2a1b      	cmp	r2, #27
 800959e:	d842      	bhi.n	8009626 <_realloc_r+0x356>
 80095a0:	3408      	adds	r4, #8
 80095a2:	f10a 0310 	add.w	r3, sl, #16
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	6862      	ldr	r2, [r4, #4]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	68a2      	ldr	r2, [r4, #8]
 80095b0:	609a      	str	r2, [r3, #8]
 80095b2:	4666      	mov	r6, ip
 80095b4:	46d1      	mov	r9, sl
 80095b6:	463c      	mov	r4, r7
 80095b8:	e707      	b.n	80093ca <_realloc_r+0xfa>
 80095ba:	68a3      	ldr	r3, [r4, #8]
 80095bc:	6083      	str	r3, [r0, #8]
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	60c3      	str	r3, [r0, #12]
 80095c2:	2a24      	cmp	r2, #36	; 0x24
 80095c4:	d026      	beq.n	8009614 <_realloc_r+0x344>
 80095c6:	f104 0210 	add.w	r2, r4, #16
 80095ca:	f100 0310 	add.w	r3, r0, #16
 80095ce:	e6db      	b.n	8009388 <_realloc_r+0xb8>
 80095d0:	463a      	mov	r2, r7
 80095d2:	e7bf      	b.n	8009554 <_realloc_r+0x284>
 80095d4:	4621      	mov	r1, r4
 80095d6:	4638      	mov	r0, r7
 80095d8:	461e      	mov	r6, r3
 80095da:	46d1      	mov	r9, sl
 80095dc:	f7fb fdea 	bl	80051b4 <memmove>
 80095e0:	463c      	mov	r4, r7
 80095e2:	e6f2      	b.n	80093ca <_realloc_r+0xfa>
 80095e4:	463b      	mov	r3, r7
 80095e6:	e7de      	b.n	80095a6 <_realloc_r+0x2d6>
 80095e8:	4621      	mov	r1, r4
 80095ea:	4638      	mov	r0, r7
 80095ec:	4666      	mov	r6, ip
 80095ee:	46d1      	mov	r9, sl
 80095f0:	f7fb fde0 	bl	80051b4 <memmove>
 80095f4:	463c      	mov	r4, r7
 80095f6:	e6e8      	b.n	80093ca <_realloc_r+0xfa>
 80095f8:	20000430 	.word	0x20000430
 80095fc:	68a1      	ldr	r1, [r4, #8]
 80095fe:	f8ca 1010 	str.w	r1, [sl, #16]
 8009602:	68e1      	ldr	r1, [r4, #12]
 8009604:	f8ca 1014 	str.w	r1, [sl, #20]
 8009608:	2a24      	cmp	r2, #36	; 0x24
 800960a:	d020      	beq.n	800964e <_realloc_r+0x37e>
 800960c:	3410      	adds	r4, #16
 800960e:	f10a 0218 	add.w	r2, sl, #24
 8009612:	e79f      	b.n	8009554 <_realloc_r+0x284>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	6103      	str	r3, [r0, #16]
 8009618:	6961      	ldr	r1, [r4, #20]
 800961a:	6141      	str	r1, [r0, #20]
 800961c:	f104 0218 	add.w	r2, r4, #24
 8009620:	f100 0318 	add.w	r3, r0, #24
 8009624:	e6b0      	b.n	8009388 <_realloc_r+0xb8>
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	f8ca 3010 	str.w	r3, [sl, #16]
 800962c:	68e3      	ldr	r3, [r4, #12]
 800962e:	f8ca 3014 	str.w	r3, [sl, #20]
 8009632:	2a24      	cmp	r2, #36	; 0x24
 8009634:	d021      	beq.n	800967a <_realloc_r+0x3aa>
 8009636:	3410      	adds	r4, #16
 8009638:	f10a 0318 	add.w	r3, sl, #24
 800963c:	e7b3      	b.n	80095a6 <_realloc_r+0x2d6>
 800963e:	463a      	mov	r2, r7
 8009640:	e733      	b.n	80094aa <_realloc_r+0x1da>
 8009642:	4621      	mov	r1, r4
 8009644:	4638      	mov	r0, r7
 8009646:	f7fb fdb5 	bl	80051b4 <memmove>
 800964a:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <_realloc_r+0x3d4>)
 800964c:	e733      	b.n	80094b6 <_realloc_r+0x1e6>
 800964e:	6922      	ldr	r2, [r4, #16]
 8009650:	f8ca 2018 	str.w	r2, [sl, #24]
 8009654:	6962      	ldr	r2, [r4, #20]
 8009656:	f8ca 201c 	str.w	r2, [sl, #28]
 800965a:	3418      	adds	r4, #24
 800965c:	f10a 0220 	add.w	r2, sl, #32
 8009660:	e778      	b.n	8009554 <_realloc_r+0x284>
 8009662:	68a1      	ldr	r1, [r4, #8]
 8009664:	f8ca 1010 	str.w	r1, [sl, #16]
 8009668:	68e1      	ldr	r1, [r4, #12]
 800966a:	f8ca 1014 	str.w	r1, [sl, #20]
 800966e:	2a24      	cmp	r2, #36	; 0x24
 8009670:	d00d      	beq.n	800968e <_realloc_r+0x3be>
 8009672:	3410      	adds	r4, #16
 8009674:	f10a 0218 	add.w	r2, sl, #24
 8009678:	e717      	b.n	80094aa <_realloc_r+0x1da>
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	f8ca 3018 	str.w	r3, [sl, #24]
 8009680:	6963      	ldr	r3, [r4, #20]
 8009682:	f8ca 301c 	str.w	r3, [sl, #28]
 8009686:	3418      	adds	r4, #24
 8009688:	f10a 0320 	add.w	r3, sl, #32
 800968c:	e78b      	b.n	80095a6 <_realloc_r+0x2d6>
 800968e:	6922      	ldr	r2, [r4, #16]
 8009690:	f8ca 2018 	str.w	r2, [sl, #24]
 8009694:	6962      	ldr	r2, [r4, #20]
 8009696:	f8ca 201c 	str.w	r2, [sl, #28]
 800969a:	3418      	adds	r4, #24
 800969c:	f10a 0220 	add.w	r2, sl, #32
 80096a0:	e703      	b.n	80094aa <_realloc_r+0x1da>
 80096a2:	bf00      	nop
 80096a4:	20000430 	.word	0x20000430

080096a8 <frexp>:
 80096a8:	f8df c060 	ldr.w	ip, [pc, #96]	; 800970c <frexp+0x64>
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096b2:	2700      	movs	r7, #0
 80096b4:	4563      	cmp	r3, ip
 80096b6:	4604      	mov	r4, r0
 80096b8:	460d      	mov	r5, r1
 80096ba:	4616      	mov	r6, r2
 80096bc:	6017      	str	r7, [r2, #0]
 80096be:	dc22      	bgt.n	8009706 <frexp+0x5e>
 80096c0:	4684      	mov	ip, r0
 80096c2:	ea53 0c0c 	orrs.w	ip, r3, ip
 80096c6:	d01e      	beq.n	8009706 <frexp+0x5e>
 80096c8:	f8df c044 	ldr.w	ip, [pc, #68]	; 8009710 <frexp+0x68>
 80096cc:	ea01 0c0c 	and.w	ip, r1, ip
 80096d0:	460a      	mov	r2, r1
 80096d2:	f1bc 0f00 	cmp.w	ip, #0
 80096d6:	d109      	bne.n	80096ec <frexp+0x44>
 80096d8:	4b0e      	ldr	r3, [pc, #56]	; (8009714 <frexp+0x6c>)
 80096da:	2200      	movs	r2, #0
 80096dc:	f7f7 f8ac 	bl	8000838 <__aeabi_dmul>
 80096e0:	f06f 0735 	mvn.w	r7, #53	; 0x35
 80096e4:	4604      	mov	r4, r0
 80096e6:	460a      	mov	r2, r1
 80096e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096ec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80096f0:	151b      	asrs	r3, r3, #20
 80096f2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80096f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80096fa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80096fe:	443b      	add	r3, r7
 8009700:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8009704:	6033      	str	r3, [r6, #0]
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800970c:	7fefffff 	.word	0x7fefffff
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	43500000 	.word	0x43500000

08009718 <strncpy>:
 8009718:	b530      	push	{r4, r5, lr}
 800971a:	ea40 0401 	orr.w	r4, r0, r1
 800971e:	07a3      	lsls	r3, r4, #30
 8009720:	d101      	bne.n	8009726 <strncpy+0xe>
 8009722:	2a03      	cmp	r2, #3
 8009724:	d80f      	bhi.n	8009746 <strncpy+0x2e>
 8009726:	4684      	mov	ip, r0
 8009728:	f101 3eff 	add.w	lr, r1, #4294967295
 800972c:	e007      	b.n	800973e <strncpy+0x26>
 800972e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8009732:	f803 1b01 	strb.w	r1, [r3], #1
 8009736:	1e54      	subs	r4, r2, #1
 8009738:	b1c1      	cbz	r1, 800976c <strncpy+0x54>
 800973a:	469c      	mov	ip, r3
 800973c:	4622      	mov	r2, r4
 800973e:	4663      	mov	r3, ip
 8009740:	2a00      	cmp	r2, #0
 8009742:	d1f4      	bne.n	800972e <strncpy+0x16>
 8009744:	bd30      	pop	{r4, r5, pc}
 8009746:	460b      	mov	r3, r1
 8009748:	4684      	mov	ip, r0
 800974a:	4619      	mov	r1, r3
 800974c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009750:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 8009754:	ea24 0405 	bic.w	r4, r4, r5
 8009758:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800975c:	d1e4      	bne.n	8009728 <strncpy+0x10>
 800975e:	3a04      	subs	r2, #4
 8009760:	2a03      	cmp	r2, #3
 8009762:	f84c 5b04 	str.w	r5, [ip], #4
 8009766:	4619      	mov	r1, r3
 8009768:	d8ef      	bhi.n	800974a <strncpy+0x32>
 800976a:	e7dd      	b.n	8009728 <strncpy+0x10>
 800976c:	4462      	add	r2, ip
 800976e:	2c00      	cmp	r4, #0
 8009770:	d0e8      	beq.n	8009744 <strncpy+0x2c>
 8009772:	f803 1b01 	strb.w	r1, [r3], #1
 8009776:	4293      	cmp	r3, r2
 8009778:	d1fb      	bne.n	8009772 <strncpy+0x5a>
 800977a:	bd30      	pop	{r4, r5, pc}

0800977c <__sprint_r.part.0>:
 800977c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009782:	049c      	lsls	r4, r3, #18
 8009784:	4690      	mov	r8, r2
 8009786:	d52d      	bpl.n	80097e4 <__sprint_r.part.0+0x68>
 8009788:	6893      	ldr	r3, [r2, #8]
 800978a:	6812      	ldr	r2, [r2, #0]
 800978c:	b343      	cbz	r3, 80097e0 <__sprint_r.part.0+0x64>
 800978e:	468b      	mov	fp, r1
 8009790:	4606      	mov	r6, r0
 8009792:	f102 0908 	add.w	r9, r2, #8
 8009796:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 800979a:	ea5f 079a 	movs.w	r7, sl, lsr #2
 800979e:	d015      	beq.n	80097cc <__sprint_r.part.0+0x50>
 80097a0:	3d04      	subs	r5, #4
 80097a2:	2400      	movs	r4, #0
 80097a4:	e001      	b.n	80097aa <__sprint_r.part.0+0x2e>
 80097a6:	42a7      	cmp	r7, r4
 80097a8:	d00e      	beq.n	80097c8 <__sprint_r.part.0+0x4c>
 80097aa:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80097ae:	465a      	mov	r2, fp
 80097b0:	4630      	mov	r0, r6
 80097b2:	f001 f801 	bl	800a7b8 <_fputwc_r>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	f104 0401 	add.w	r4, r4, #1
 80097bc:	d1f3      	bne.n	80097a6 <__sprint_r.part.0+0x2a>
 80097be:	2300      	movs	r3, #0
 80097c0:	e9c8 3301 	strd	r3, r3, [r8, #4]
 80097c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097cc:	f02a 0a03 	bic.w	sl, sl, #3
 80097d0:	eba3 030a 	sub.w	r3, r3, sl
 80097d4:	f8c8 3008 	str.w	r3, [r8, #8]
 80097d8:	f109 0908 	add.w	r9, r9, #8
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1da      	bne.n	8009796 <__sprint_r.part.0+0x1a>
 80097e0:	2000      	movs	r0, #0
 80097e2:	e7ec      	b.n	80097be <__sprint_r.part.0+0x42>
 80097e4:	f7fe ffb6 	bl	8008754 <__sfvwrite_r>
 80097e8:	2300      	movs	r3, #0
 80097ea:	e9c8 3301 	strd	r3, r3, [r8, #4]
 80097ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f2:	bf00      	nop

080097f4 <__sprint_r>:
 80097f4:	b410      	push	{r4}
 80097f6:	6894      	ldr	r4, [r2, #8]
 80097f8:	b114      	cbz	r4, 8009800 <__sprint_r+0xc>
 80097fa:	bc10      	pop	{r4}
 80097fc:	f7ff bfbe 	b.w	800977c <__sprint_r.part.0>
 8009800:	4620      	mov	r0, r4
 8009802:	6054      	str	r4, [r2, #4]
 8009804:	bc10      	pop	{r4}
 8009806:	4770      	bx	lr

08009808 <_vfiprintf_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	b0bd      	sub	sp, #244	; 0xf4
 800980e:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8009812:	461c      	mov	r4, r3
 8009814:	9101      	str	r1, [sp, #4]
 8009816:	4617      	mov	r7, r2
 8009818:	b118      	cbz	r0, 8009822 <_vfiprintf_r+0x1a>
 800981a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800981c:	2b00      	cmp	r3, #0
 800981e:	f000 8286 	beq.w	8009d2e <_vfiprintf_r+0x526>
 8009822:	9a01      	ldr	r2, [sp, #4]
 8009824:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009826:	07de      	lsls	r6, r3, #31
 8009828:	f140 818f 	bpl.w	8009b4a <_vfiprintf_r+0x342>
 800982c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8009830:	b28a      	uxth	r2, r1
 8009832:	0490      	lsls	r0, r2, #18
 8009834:	d408      	bmi.n	8009848 <_vfiprintf_r+0x40>
 8009836:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800983a:	9901      	ldr	r1, [sp, #4]
 800983c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800983e:	818a      	strh	r2, [r1, #12]
 8009840:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009844:	b292      	uxth	r2, r2
 8009846:	664b      	str	r3, [r1, #100]	; 0x64
 8009848:	0711      	lsls	r1, r2, #28
 800984a:	f140 80f7 	bpl.w	8009a3c <_vfiprintf_r+0x234>
 800984e:	9b01      	ldr	r3, [sp, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 80f2 	beq.w	8009a3c <_vfiprintf_r+0x234>
 8009858:	f002 031a 	and.w	r3, r2, #26
 800985c:	2b0a      	cmp	r3, #10
 800985e:	f000 80fb 	beq.w	8009a58 <_vfiprintf_r+0x250>
 8009862:	ab13      	add	r3, sp, #76	; 0x4c
 8009864:	9310      	str	r3, [sp, #64]	; 0x40
 8009866:	2300      	movs	r3, #0
 8009868:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800986c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8009870:	9308      	str	r3, [sp, #32]
 8009872:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009876:	9309      	str	r3, [sp, #36]	; 0x24
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	783b      	ldrb	r3, [r7, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8151 	beq.w	8009b24 <_vfiprintf_r+0x31c>
 8009882:	463c      	mov	r4, r7
 8009884:	e004      	b.n	8009890 <_vfiprintf_r+0x88>
 8009886:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 812c 	beq.w	8009ae8 <_vfiprintf_r+0x2e0>
 8009890:	2b25      	cmp	r3, #37	; 0x25
 8009892:	d1f8      	bne.n	8009886 <_vfiprintf_r+0x7e>
 8009894:	1be5      	subs	r5, r4, r7
 8009896:	f040 8129 	bne.w	8009aec <_vfiprintf_r+0x2e4>
 800989a:	7823      	ldrb	r3, [r4, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8141 	beq.w	8009b24 <_vfiprintf_r+0x31c>
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	2500      	movs	r5, #0
 80098a8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80098ac:	1c67      	adds	r7, r4, #1
 80098ae:	7863      	ldrb	r3, [r4, #1]
 80098b0:	9502      	str	r5, [sp, #8]
 80098b2:	f04f 3bff 	mov.w	fp, #4294967295
 80098b6:	242b      	movs	r4, #43	; 0x2b
 80098b8:	3701      	adds	r7, #1
 80098ba:	f1a3 0220 	sub.w	r2, r3, #32
 80098be:	2a5a      	cmp	r2, #90	; 0x5a
 80098c0:	f200 8152 	bhi.w	8009b68 <_vfiprintf_r+0x360>
 80098c4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80098c8:	01500298 	.word	0x01500298
 80098cc:	02940150 	.word	0x02940150
 80098d0:	01500150 	.word	0x01500150
 80098d4:	006a0150 	.word	0x006a0150
 80098d8:	01500150 	.word	0x01500150
 80098dc:	026b0236 	.word	0x026b0236
 80098e0:	02410150 	.word	0x02410150
 80098e4:	015002a6 	.word	0x015002a6
 80098e8:	005b02a2 	.word	0x005b02a2
 80098ec:	005b005b 	.word	0x005b005b
 80098f0:	005b005b 	.word	0x005b005b
 80098f4:	005b005b 	.word	0x005b005b
 80098f8:	005b005b 	.word	0x005b005b
 80098fc:	01500150 	.word	0x01500150
 8009900:	01500150 	.word	0x01500150
 8009904:	01500150 	.word	0x01500150
 8009908:	01500150 	.word	0x01500150
 800990c:	02230150 	.word	0x02230150
 8009910:	01500084 	.word	0x01500084
 8009914:	01500150 	.word	0x01500150
 8009918:	01500150 	.word	0x01500150
 800991c:	01500150 	.word	0x01500150
 8009920:	01500150 	.word	0x01500150
 8009924:	00dd0150 	.word	0x00dd0150
 8009928:	01500150 	.word	0x01500150
 800992c:	02070150 	.word	0x02070150
 8009930:	02590150 	.word	0x02590150
 8009934:	01500150 	.word	0x01500150
 8009938:	01500519 	.word	0x01500519
 800993c:	01500150 	.word	0x01500150
 8009940:	01500150 	.word	0x01500150
 8009944:	01500150 	.word	0x01500150
 8009948:	01500150 	.word	0x01500150
 800994c:	02230150 	.word	0x02230150
 8009950:	01500086 	.word	0x01500086
 8009954:	01500150 	.word	0x01500150
 8009958:	0086024f 	.word	0x0086024f
 800995c:	01500080 	.word	0x01500080
 8009960:	01500245 	.word	0x01500245
 8009964:	00df0281 	.word	0x00df0281
 8009968:	0080026f 	.word	0x0080026f
 800996c:	02070150 	.word	0x02070150
 8009970:	0539007e 	.word	0x0539007e
 8009974:	01500150 	.word	0x01500150
 8009978:	0150053b 	.word	0x0150053b
 800997c:	007e      	.short	0x007e
 800997e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009982:	2100      	movs	r1, #0
 8009984:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009988:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800998c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009990:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009994:	2a09      	cmp	r2, #9
 8009996:	d9f5      	bls.n	8009984 <_vfiprintf_r+0x17c>
 8009998:	9102      	str	r1, [sp, #8]
 800999a:	e78e      	b.n	80098ba <_vfiprintf_r+0xb2>
 800999c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80099a0:	4640      	mov	r0, r8
 80099a2:	f7ff f84b 	bl	8008a3c <_localeconv_r>
 80099a6:	6843      	ldr	r3, [r0, #4]
 80099a8:	930a      	str	r3, [sp, #40]	; 0x28
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f6 fcc8 	bl	8000340 <strlen>
 80099b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80099b2:	4606      	mov	r6, r0
 80099b4:	4640      	mov	r0, r8
 80099b6:	f7ff f841 	bl	8008a3c <_localeconv_r>
 80099ba:	6883      	ldr	r3, [r0, #8]
 80099bc:	9309      	str	r3, [sp, #36]	; 0x24
 80099be:	2e00      	cmp	r6, #0
 80099c0:	f040 8476 	bne.w	800a2b0 <_vfiprintf_r+0xaa8>
 80099c4:	783b      	ldrb	r3, [r7, #0]
 80099c6:	e777      	b.n	80098b8 <_vfiprintf_r+0xb0>
 80099c8:	783b      	ldrb	r3, [r7, #0]
 80099ca:	f045 0520 	orr.w	r5, r5, #32
 80099ce:	e773      	b.n	80098b8 <_vfiprintf_r+0xb0>
 80099d0:	f045 0510 	orr.w	r5, r5, #16
 80099d4:	06ac      	lsls	r4, r5, #26
 80099d6:	9e04      	ldr	r6, [sp, #16]
 80099d8:	f140 816f 	bpl.w	8009cba <_vfiprintf_r+0x4b2>
 80099dc:	3607      	adds	r6, #7
 80099de:	f026 0607 	bic.w	r6, r6, #7
 80099e2:	4632      	mov	r2, r6
 80099e4:	6873      	ldr	r3, [r6, #4]
 80099e6:	f852 6b08 	ldr.w	r6, [r2], #8
 80099ea:	9204      	str	r2, [sp, #16]
 80099ec:	4698      	mov	r8, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f2c0 8428 	blt.w	800a244 <_vfiprintf_r+0xa3c>
 80099f4:	f1bb 3fff 	cmp.w	fp, #4294967295
 80099f8:	f000 850b 	beq.w	800a412 <_vfiprintf_r+0xc0a>
 80099fc:	ea56 0308 	orrs.w	r3, r6, r8
 8009a00:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
 8009a04:	f000 8403 	beq.w	800a20e <_vfiprintf_r+0xa06>
 8009a08:	2e0a      	cmp	r6, #10
 8009a0a:	f178 0300 	sbcs.w	r3, r8, #0
 8009a0e:	f080 84b8 	bcs.w	800a382 <_vfiprintf_r+0xb7a>
 8009a12:	3630      	adds	r6, #48	; 0x30
 8009a14:	2301      	movs	r3, #1
 8009a16:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
 8009a1a:	4655      	mov	r5, sl
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 8009a22:	f8dd 8000 	ldr.w	r8, [sp]
 8009a26:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8009a2a:	45d8      	cmp	r8, fp
 8009a2c:	bfb8      	it	lt
 8009a2e:	46d8      	movlt	r8, fp
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 80a8 	beq.w	8009b86 <_vfiprintf_r+0x37e>
 8009a36:	f108 0801 	add.w	r8, r8, #1
 8009a3a:	e0a4      	b.n	8009b86 <_vfiprintf_r+0x37e>
 8009a3c:	9d01      	ldr	r5, [sp, #4]
 8009a3e:	9805      	ldr	r0, [sp, #20]
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7fd fb13 	bl	800706c <__swsetup_r>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	f040 8582 	bne.w	800a550 <_vfiprintf_r+0xd48>
 8009a4c:	89aa      	ldrh	r2, [r5, #12]
 8009a4e:	f002 031a 	and.w	r3, r2, #26
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	f47f af05 	bne.w	8009862 <_vfiprintf_r+0x5a>
 8009a58:	9901      	ldr	r1, [sp, #4]
 8009a5a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f6ff aeff 	blt.w	8009862 <_vfiprintf_r+0x5a>
 8009a64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009a66:	07de      	lsls	r6, r3, #31
 8009a68:	d402      	bmi.n	8009a70 <_vfiprintf_r+0x268>
 8009a6a:	0595      	lsls	r5, r2, #22
 8009a6c:	f140 8550 	bpl.w	800a510 <_vfiprintf_r+0xd08>
 8009a70:	9901      	ldr	r1, [sp, #4]
 8009a72:	9805      	ldr	r0, [sp, #20]
 8009a74:	4623      	mov	r3, r4
 8009a76:	463a      	mov	r2, r7
 8009a78:	b03d      	add	sp, #244	; 0xf4
 8009a7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7e:	f000 bd8d 	b.w	800a59c <__sbprintf>
 8009a82:	f045 0510 	orr.w	r5, r5, #16
 8009a86:	f015 0820 	ands.w	r8, r5, #32
 8009a8a:	f000 8107 	beq.w	8009c9c <_vfiprintf_r+0x494>
 8009a8e:	9e04      	ldr	r6, [sp, #16]
 8009a90:	3607      	adds	r6, #7
 8009a92:	f026 0607 	bic.w	r6, r6, #7
 8009a96:	4633      	mov	r3, r6
 8009a98:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8009a9c:	f853 6b08 	ldr.w	r6, [r3], #8
 8009aa0:	9304      	str	r3, [sp, #16]
 8009aa2:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f04f 0200 	mov.w	r2, #0
 8009aac:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8009ab0:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009ab4:	f000 81c8 	beq.w	8009e48 <_vfiprintf_r+0x640>
 8009ab8:	ea56 0208 	orrs.w	r2, r6, r8
 8009abc:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
 8009ac0:	f040 81c1 	bne.w	8009e46 <_vfiprintf_r+0x63e>
 8009ac4:	f1bb 0f00 	cmp.w	fp, #0
 8009ac8:	f040 84a6 	bne.w	800a418 <_vfiprintf_r+0xc10>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 83a3 	bne.w	800a218 <_vfiprintf_r+0xa10>
 8009ad2:	f01a 0301 	ands.w	r3, sl, #1
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	f000 83d1 	beq.w	800a27e <_vfiprintf_r+0xa76>
 8009adc:	2330      	movs	r3, #48	; 0x30
 8009ade:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8009ae2:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 8009ae6:	e79c      	b.n	8009a22 <_vfiprintf_r+0x21a>
 8009ae8:	1be5      	subs	r5, r4, r7
 8009aea:	d01b      	beq.n	8009b24 <_vfiprintf_r+0x31c>
 8009aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009af0:	3301      	adds	r3, #1
 8009af2:	442a      	add	r2, r5
 8009af4:	2b07      	cmp	r3, #7
 8009af6:	e9c9 7500 	strd	r7, r5, [r9]
 8009afa:	9212      	str	r2, [sp, #72]	; 0x48
 8009afc:	9311      	str	r3, [sp, #68]	; 0x44
 8009afe:	dc05      	bgt.n	8009b0c <_vfiprintf_r+0x304>
 8009b00:	f109 0908 	add.w	r9, r9, #8
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	442b      	add	r3, r5
 8009b08:	9303      	str	r3, [sp, #12]
 8009b0a:	e6c6      	b.n	800989a <_vfiprintf_r+0x92>
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	f000 837a 	beq.w	800a206 <_vfiprintf_r+0x9fe>
 8009b12:	9901      	ldr	r1, [sp, #4]
 8009b14:	9805      	ldr	r0, [sp, #20]
 8009b16:	aa10      	add	r2, sp, #64	; 0x40
 8009b18:	f7ff fe30 	bl	800977c <__sprint_r.part.0>
 8009b1c:	b940      	cbnz	r0, 8009b30 <_vfiprintf_r+0x328>
 8009b1e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009b22:	e7ef      	b.n	8009b04 <_vfiprintf_r+0x2fc>
 8009b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f040 8503 	bne.w	800a532 <_vfiprintf_r+0xd2a>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8009b30:	9a01      	ldr	r2, [sp, #4]
 8009b32:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009b34:	07d9      	lsls	r1, r3, #31
 8009b36:	f140 80a6 	bpl.w	8009c86 <_vfiprintf_r+0x47e>
 8009b3a:	8993      	ldrh	r3, [r2, #12]
 8009b3c:	065b      	lsls	r3, r3, #25
 8009b3e:	f100 8513 	bmi.w	800a568 <_vfiprintf_r+0xd60>
 8009b42:	9803      	ldr	r0, [sp, #12]
 8009b44:	b03d      	add	sp, #244	; 0xf4
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4a:	9b01      	ldr	r3, [sp, #4]
 8009b4c:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8009b50:	058d      	lsls	r5, r1, #22
 8009b52:	b28a      	uxth	r2, r1
 8009b54:	f53f ae6d 	bmi.w	8009832 <_vfiprintf_r+0x2a>
 8009b58:	461d      	mov	r5, r3
 8009b5a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009b5c:	f7fb f832 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 8009b60:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8009b64:	b28a      	uxth	r2, r1
 8009b66:	e664      	b.n	8009832 <_vfiprintf_r+0x2a>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0db      	beq.n	8009b24 <_vfiprintf_r+0x31c>
 8009b6c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009b70:	f04f 0801 	mov.w	r8, #1
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009b7c:	f8cd 8000 	str.w	r8, [sp]
 8009b80:	ac23      	add	r4, sp, #140	; 0x8c
 8009b82:	f04f 0b00 	mov.w	fp, #0
 8009b86:	f015 0302 	ands.w	r3, r5, #2
 8009b8a:	9306      	str	r3, [sp, #24]
 8009b8c:	bf18      	it	ne
 8009b8e:	f108 0802 	addne.w	r8, r8, #2
 8009b92:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8009b96:	9307      	str	r3, [sp, #28]
 8009b98:	d105      	bne.n	8009ba6 <_vfiprintf_r+0x39e>
 8009b9a:	9b02      	ldr	r3, [sp, #8]
 8009b9c:	eba3 0608 	sub.w	r6, r3, r8
 8009ba0:	2e00      	cmp	r6, #0
 8009ba2:	f300 8269 	bgt.w	800a078 <_vfiprintf_r+0x870>
 8009ba6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009baa:	1c50      	adds	r0, r2, #1
 8009bac:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
 8009bb0:	b18e      	cbz	r6, 8009bd6 <_vfiprintf_r+0x3ce>
 8009bb2:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8009bb6:	3101      	adds	r1, #1
 8009bb8:	f8c9 2000 	str.w	r2, [r9]
 8009bbc:	2807      	cmp	r0, #7
 8009bbe:	f04f 0201 	mov.w	r2, #1
 8009bc2:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009bc6:	f8c9 2004 	str.w	r2, [r9, #4]
 8009bca:	f300 8238 	bgt.w	800a03e <_vfiprintf_r+0x836>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	f109 0908 	add.w	r9, r9, #8
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	b1db      	cbz	r3, 8009c12 <_vfiprintf_r+0x40a>
 8009bda:	ab0f      	add	r3, sp, #60	; 0x3c
 8009bdc:	3102      	adds	r1, #2
 8009bde:	f8c9 3000 	str.w	r3, [r9]
 8009be2:	2807      	cmp	r0, #7
 8009be4:	f04f 0302 	mov.w	r3, #2
 8009be8:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009bec:	f8c9 3004 	str.w	r3, [r9, #4]
 8009bf0:	f340 823d 	ble.w	800a06e <_vfiprintf_r+0x866>
 8009bf4:	2900      	cmp	r1, #0
 8009bf6:	f000 8301 	beq.w	800a1fc <_vfiprintf_r+0x9f4>
 8009bfa:	9901      	ldr	r1, [sp, #4]
 8009bfc:	9805      	ldr	r0, [sp, #20]
 8009bfe:	aa10      	add	r2, sp, #64	; 0x40
 8009c00:	f7ff fdbc 	bl	800977c <__sprint_r.part.0>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d193      	bne.n	8009b30 <_vfiprintf_r+0x328>
 8009c08:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009c0c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009c10:	1c50      	adds	r0, r2, #1
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	2b80      	cmp	r3, #128	; 0x80
 8009c16:	f000 8158 	beq.w	8009eca <_vfiprintf_r+0x6c2>
 8009c1a:	9b00      	ldr	r3, [sp, #0]
 8009c1c:	ebab 0603 	sub.w	r6, fp, r3
 8009c20:	2e00      	cmp	r6, #0
 8009c22:	f300 81b3 	bgt.w	8009f8c <_vfiprintf_r+0x784>
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	f8c9 4000 	str.w	r4, [r9]
 8009c2c:	4419      	add	r1, r3
 8009c2e:	2807      	cmp	r0, #7
 8009c30:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009c34:	f8c9 3004 	str.w	r3, [r9, #4]
 8009c38:	f340 8144 	ble.w	8009ec4 <_vfiprintf_r+0x6bc>
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	f000 826d 	beq.w	800a11c <_vfiprintf_r+0x914>
 8009c42:	9901      	ldr	r1, [sp, #4]
 8009c44:	9805      	ldr	r0, [sp, #20]
 8009c46:	aa10      	add	r2, sp, #64	; 0x40
 8009c48:	f7ff fd98 	bl	800977c <__sprint_r.part.0>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f47f af6f 	bne.w	8009b30 <_vfiprintf_r+0x328>
 8009c52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009c54:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009c58:	0768      	lsls	r0, r5, #29
 8009c5a:	d505      	bpl.n	8009c68 <_vfiprintf_r+0x460>
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	eba3 0408 	sub.w	r4, r3, r8
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	f300 8264 	bgt.w	800a130 <_vfiprintf_r+0x928>
 8009c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c6c:	4542      	cmp	r2, r8
 8009c6e:	bfac      	ite	ge
 8009c70:	189b      	addge	r3, r3, r2
 8009c72:	4443      	addlt	r3, r8
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	2900      	cmp	r1, #0
 8009c78:	f040 81d2 	bne.w	800a020 <_vfiprintf_r+0x818>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9311      	str	r3, [sp, #68]	; 0x44
 8009c80:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009c84:	e5f9      	b.n	800987a <_vfiprintf_r+0x72>
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	899b      	ldrh	r3, [r3, #12]
 8009c8a:	059a      	lsls	r2, r3, #22
 8009c8c:	f53f af56 	bmi.w	8009b3c <_vfiprintf_r+0x334>
 8009c90:	9c01      	ldr	r4, [sp, #4]
 8009c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c94:	f7fa ff98 	bl	8004bc8 <__retarget_lock_release_recursive>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	e74f      	b.n	8009b3c <_vfiprintf_r+0x334>
 8009c9c:	f015 0310 	ands.w	r3, r5, #16
 8009ca0:	f040 831e 	bne.w	800a2e0 <_vfiprintf_r+0xad8>
 8009ca4:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 8009ca8:	f000 83e5 	beq.w	800a476 <_vfiprintf_r+0xc6e>
 8009cac:	9a04      	ldr	r2, [sp, #16]
 8009cae:	f852 6b04 	ldr.w	r6, [r2], #4
 8009cb2:	9204      	str	r2, [sp, #16]
 8009cb4:	4698      	mov	r8, r3
 8009cb6:	b2b6      	uxth	r6, r6
 8009cb8:	e6f3      	b.n	8009aa2 <_vfiprintf_r+0x29a>
 8009cba:	f856 3b04 	ldr.w	r3, [r6], #4
 8009cbe:	9604      	str	r6, [sp, #16]
 8009cc0:	06e8      	lsls	r0, r5, #27
 8009cc2:	f100 82e8 	bmi.w	800a296 <_vfiprintf_r+0xa8e>
 8009cc6:	0669      	lsls	r1, r5, #25
 8009cc8:	f140 82e2 	bpl.w	800a290 <_vfiprintf_r+0xa88>
 8009ccc:	f343 38c0 	sbfx	r8, r3, #15, #1
 8009cd0:	b21e      	sxth	r6, r3
 8009cd2:	4643      	mov	r3, r8
 8009cd4:	e68b      	b.n	80099ee <_vfiprintf_r+0x1e6>
 8009cd6:	9e04      	ldr	r6, [sp, #16]
 8009cd8:	f856 4b04 	ldr.w	r4, [r6], #4
 8009cdc:	f04f 0300 	mov.w	r3, #0
 8009ce0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009ce4:	2c00      	cmp	r4, #0
 8009ce6:	f000 83ab 	beq.w	800a440 <_vfiprintf_r+0xc38>
 8009cea:	f1bb 3fff 	cmp.w	fp, #4294967295
 8009cee:	f000 8329 	beq.w	800a344 <_vfiprintf_r+0xb3c>
 8009cf2:	465a      	mov	r2, fp
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7f6 fb92 	bl	8000420 <memchr>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f000 840c 	beq.w	800a51a <_vfiprintf_r+0xd12>
 8009d02:	1b03      	subs	r3, r0, r4
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	9604      	str	r6, [sp, #16]
 8009d08:	f04f 0b00 	mov.w	fp, #0
 8009d0c:	e689      	b.n	8009a22 <_vfiprintf_r+0x21a>
 8009d0e:	9e04      	ldr	r6, [sp, #16]
 8009d10:	f04f 0300 	mov.w	r3, #0
 8009d14:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009d18:	f04f 0801 	mov.w	r8, #1
 8009d1c:	f856 3b04 	ldr.w	r3, [r6], #4
 8009d20:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009d24:	9604      	str	r6, [sp, #16]
 8009d26:	f8cd 8000 	str.w	r8, [sp]
 8009d2a:	ac23      	add	r4, sp, #140	; 0x8c
 8009d2c:	e729      	b.n	8009b82 <_vfiprintf_r+0x37a>
 8009d2e:	f7fa fe6b 	bl	8004a08 <__sinit>
 8009d32:	e576      	b.n	8009822 <_vfiprintf_r+0x1a>
 8009d34:	9b04      	ldr	r3, [sp, #16]
 8009d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3a:	9202      	str	r2, [sp, #8]
 8009d3c:	2a00      	cmp	r2, #0
 8009d3e:	f280 829a 	bge.w	800a276 <_vfiprintf_r+0xa6e>
 8009d42:	9a02      	ldr	r2, [sp, #8]
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	4252      	negs	r2, r2
 8009d48:	9202      	str	r2, [sp, #8]
 8009d4a:	783b      	ldrb	r3, [r7, #0]
 8009d4c:	f045 0504 	orr.w	r5, r5, #4
 8009d50:	e5b2      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009d52:	783b      	ldrb	r3, [r7, #0]
 8009d54:	2b6c      	cmp	r3, #108	; 0x6c
 8009d56:	bf03      	ittte	eq
 8009d58:	787b      	ldrbeq	r3, [r7, #1]
 8009d5a:	f045 0520 	orreq.w	r5, r5, #32
 8009d5e:	3701      	addeq	r7, #1
 8009d60:	f045 0510 	orrne.w	r5, r5, #16
 8009d64:	e5a8      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009d66:	783b      	ldrb	r3, [r7, #0]
 8009d68:	2b68      	cmp	r3, #104	; 0x68
 8009d6a:	bf03      	ittte	eq
 8009d6c:	787b      	ldrbeq	r3, [r7, #1]
 8009d6e:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8009d72:	3701      	addeq	r7, #1
 8009d74:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8009d78:	e59e      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009d7a:	f045 0a10 	orr.w	sl, r5, #16
 8009d7e:	f01a 0820 	ands.w	r8, sl, #32
 8009d82:	f000 8250 	beq.w	800a226 <_vfiprintf_r+0xa1e>
 8009d86:	9e04      	ldr	r6, [sp, #16]
 8009d88:	3607      	adds	r6, #7
 8009d8a:	f026 0607 	bic.w	r6, r6, #7
 8009d8e:	4633      	mov	r3, r6
 8009d90:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8009d94:	f853 6b08 	ldr.w	r6, [r3], #8
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e684      	b.n	8009aa8 <_vfiprintf_r+0x2a0>
 8009d9e:	783b      	ldrb	r3, [r7, #0]
 8009da0:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 8009da4:	e588      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	2330      	movs	r3, #48	; 0x30
 8009db0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8009db4:	2378      	movs	r3, #120	; 0x78
 8009db6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8009dba:	4bb7      	ldr	r3, [pc, #732]	; (800a098 <_vfiprintf_r+0x890>)
 8009dbc:	9308      	str	r3, [sp, #32]
 8009dbe:	f045 0a02 	orr.w	sl, r5, #2
 8009dc2:	f04f 0800 	mov.w	r8, #0
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	e66e      	b.n	8009aa8 <_vfiprintf_r+0x2a0>
 8009dca:	06ae      	lsls	r6, r5, #26
 8009dcc:	f100 827e 	bmi.w	800a2cc <_vfiprintf_r+0xac4>
 8009dd0:	06ec      	lsls	r4, r5, #27
 8009dd2:	f100 832d 	bmi.w	800a430 <_vfiprintf_r+0xc28>
 8009dd6:	0668      	lsls	r0, r5, #25
 8009dd8:	f100 838c 	bmi.w	800a4f4 <_vfiprintf_r+0xcec>
 8009ddc:	05a9      	lsls	r1, r5, #22
 8009dde:	f140 8327 	bpl.w	800a430 <_vfiprintf_r+0xc28>
 8009de2:	9e04      	ldr	r6, [sp, #16]
 8009de4:	9a03      	ldr	r2, [sp, #12]
 8009de6:	f856 3b04 	ldr.w	r3, [r6], #4
 8009dea:	9604      	str	r6, [sp, #16]
 8009dec:	701a      	strb	r2, [r3, #0]
 8009dee:	e544      	b.n	800987a <_vfiprintf_r+0x72>
 8009df0:	783b      	ldrb	r3, [r7, #0]
 8009df2:	f045 0501 	orr.w	r5, r5, #1
 8009df6:	e55f      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009df8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f47f ade1 	bne.w	80099c4 <_vfiprintf_r+0x1bc>
 8009e02:	2320      	movs	r3, #32
 8009e04:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009e08:	783b      	ldrb	r3, [r7, #0]
 8009e0a:	e555      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009e0c:	783b      	ldrb	r3, [r7, #0]
 8009e0e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8009e12:	e551      	b.n	80098b8 <_vfiprintf_r+0xb0>
 8009e14:	4639      	mov	r1, r7
 8009e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e1c:	f000 83ad 	beq.w	800a57a <_vfiprintf_r+0xd72>
 8009e20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e24:	2a09      	cmp	r2, #9
 8009e26:	460f      	mov	r7, r1
 8009e28:	f04f 0b00 	mov.w	fp, #0
 8009e2c:	f63f ad45 	bhi.w	80098ba <_vfiprintf_r+0xb2>
 8009e30:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009e34:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8009e38:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 8009e3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e40:	2a09      	cmp	r2, #9
 8009e42:	d9f5      	bls.n	8009e30 <_vfiprintf_r+0x628>
 8009e44:	e539      	b.n	80098ba <_vfiprintf_r+0xb2>
 8009e46:	46aa      	mov	sl, r5
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	f43f addd 	beq.w	8009a08 <_vfiprintf_r+0x200>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	ac3c      	add	r4, sp, #240	; 0xf0
 8009e52:	d112      	bne.n	8009e7a <_vfiprintf_r+0x672>
 8009e54:	9a08      	ldr	r2, [sp, #32]
 8009e56:	f006 030f 	and.w	r3, r6, #15
 8009e5a:	0936      	lsrs	r6, r6, #4
 8009e5c:	5cd3      	ldrb	r3, [r2, r3]
 8009e5e:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009e62:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
 8009e66:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009e6a:	ea56 0308 	orrs.w	r3, r6, r8
 8009e6e:	d1f2      	bne.n	8009e56 <_vfiprintf_r+0x64e>
 8009e70:	ab3c      	add	r3, sp, #240	; 0xf0
 8009e72:	1b1b      	subs	r3, r3, r4
 8009e74:	4655      	mov	r5, sl
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	e5d3      	b.n	8009a22 <_vfiprintf_r+0x21a>
 8009e7a:	f006 0307 	and.w	r3, r6, #7
 8009e7e:	08f6      	lsrs	r6, r6, #3
 8009e80:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
 8009e84:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8009e88:	3330      	adds	r3, #48	; 0x30
 8009e8a:	ea56 0108 	orrs.w	r1, r6, r8
 8009e8e:	4622      	mov	r2, r4
 8009e90:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009e94:	d1f1      	bne.n	8009e7a <_vfiprintf_r+0x672>
 8009e96:	f01a 0f01 	tst.w	sl, #1
 8009e9a:	d0e9      	beq.n	8009e70 <_vfiprintf_r+0x668>
 8009e9c:	2b30      	cmp	r3, #48	; 0x30
 8009e9e:	d0e7      	beq.n	8009e70 <_vfiprintf_r+0x668>
 8009ea0:	2330      	movs	r3, #48	; 0x30
 8009ea2:	3a02      	subs	r2, #2
 8009ea4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009ea8:	ab3c      	add	r3, sp, #240	; 0xf0
 8009eaa:	1a9b      	subs	r3, r3, r2
 8009eac:	4655      	mov	r5, sl
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	e5b6      	b.n	8009a22 <_vfiprintf_r+0x21a>
 8009eb4:	9900      	ldr	r1, [sp, #0]
 8009eb6:	9413      	str	r4, [sp, #76]	; 0x4c
 8009eb8:	2301      	movs	r3, #1
 8009eba:	9114      	str	r1, [sp, #80]	; 0x50
 8009ebc:	9112      	str	r1, [sp, #72]	; 0x48
 8009ebe:	9311      	str	r3, [sp, #68]	; 0x44
 8009ec0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009ec4:	f109 0908 	add.w	r9, r9, #8
 8009ec8:	e6c6      	b.n	8009c58 <_vfiprintf_r+0x450>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	eba3 0608 	sub.w	r6, r3, r8
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	f77f aea2 	ble.w	8009c1a <_vfiprintf_r+0x412>
 8009ed6:	2e10      	cmp	r6, #16
 8009ed8:	f340 834b 	ble.w	800a572 <_vfiprintf_r+0xd6a>
 8009edc:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800a09c <_vfiprintf_r+0x894>
 8009ee0:	4653      	mov	r3, sl
 8009ee2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ee6:	46ba      	mov	sl, r7
 8009ee8:	9c05      	ldr	r4, [sp, #20]
 8009eea:	9d01      	ldr	r5, [sp, #4]
 8009eec:	461f      	mov	r7, r3
 8009eee:	e007      	b.n	8009f00 <_vfiprintf_r+0x6f8>
 8009ef0:	f102 0c02 	add.w	ip, r2, #2
 8009ef4:	f109 0908 	add.w	r9, r9, #8
 8009ef8:	4602      	mov	r2, r0
 8009efa:	3e10      	subs	r6, #16
 8009efc:	2e10      	cmp	r6, #16
 8009efe:	dd1e      	ble.n	8009f3e <_vfiprintf_r+0x736>
 8009f00:	1c50      	adds	r0, r2, #1
 8009f02:	3110      	adds	r1, #16
 8009f04:	2310      	movs	r3, #16
 8009f06:	2807      	cmp	r0, #7
 8009f08:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009f0c:	f8c9 7000 	str.w	r7, [r9]
 8009f10:	f8c9 3004 	str.w	r3, [r9, #4]
 8009f14:	ddec      	ble.n	8009ef0 <_vfiprintf_r+0x6e8>
 8009f16:	aa10      	add	r2, sp, #64	; 0x40
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	f000 808a 	beq.w	800a032 <_vfiprintf_r+0x82a>
 8009f1e:	4629      	mov	r1, r5
 8009f20:	4620      	mov	r0, r4
 8009f22:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009f26:	f7ff fc29 	bl	800977c <__sprint_r.part.0>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f47f ae00 	bne.w	8009b30 <_vfiprintf_r+0x328>
 8009f30:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009f34:	3e10      	subs	r6, #16
 8009f36:	2e10      	cmp	r6, #16
 8009f38:	f102 0c01 	add.w	ip, r2, #1
 8009f3c:	dce0      	bgt.n	8009f00 <_vfiprintf_r+0x6f8>
 8009f3e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009f42:	463b      	mov	r3, r7
 8009f44:	4657      	mov	r7, sl
 8009f46:	469a      	mov	sl, r3
 8009f48:	4431      	add	r1, r6
 8009f4a:	f1bc 0f07 	cmp.w	ip, #7
 8009f4e:	e9cd c111 	strd	ip, r1, [sp, #68]	; 0x44
 8009f52:	f8c9 a000 	str.w	sl, [r9]
 8009f56:	f8c9 6004 	str.w	r6, [r9, #4]
 8009f5a:	f340 8193 	ble.w	800a284 <_vfiprintf_r+0xa7c>
 8009f5e:	2900      	cmp	r1, #0
 8009f60:	f000 82b8 	beq.w	800a4d4 <_vfiprintf_r+0xccc>
 8009f64:	9901      	ldr	r1, [sp, #4]
 8009f66:	9805      	ldr	r0, [sp, #20]
 8009f68:	aa10      	add	r2, sp, #64	; 0x40
 8009f6a:	f7ff fc07 	bl	800977c <__sprint_r.part.0>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f47f adde 	bne.w	8009b30 <_vfiprintf_r+0x328>
 8009f74:	9b00      	ldr	r3, [sp, #0]
 8009f76:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009f7a:	ebab 0603 	sub.w	r6, fp, r3
 8009f7e:	2e00      	cmp	r6, #0
 8009f80:	f102 0001 	add.w	r0, r2, #1
 8009f84:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009f88:	f77f ae4d 	ble.w	8009c26 <_vfiprintf_r+0x41e>
 8009f8c:	2e10      	cmp	r6, #16
 8009f8e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800a09c <_vfiprintf_r+0x894>
 8009f92:	dd31      	ble.n	8009ff8 <_vfiprintf_r+0x7f0>
 8009f94:	4653      	mov	r3, sl
 8009f96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009f9a:	46ba      	mov	sl, r7
 8009f9c:	9c05      	ldr	r4, [sp, #20]
 8009f9e:	9d01      	ldr	r5, [sp, #4]
 8009fa0:	f04f 0b10 	mov.w	fp, #16
 8009fa4:	461f      	mov	r7, r3
 8009fa6:	e007      	b.n	8009fb8 <_vfiprintf_r+0x7b0>
 8009fa8:	f102 0c02 	add.w	ip, r2, #2
 8009fac:	f109 0908 	add.w	r9, r9, #8
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	3e10      	subs	r6, #16
 8009fb4:	2e10      	cmp	r6, #16
 8009fb6:	dd19      	ble.n	8009fec <_vfiprintf_r+0x7e4>
 8009fb8:	1c50      	adds	r0, r2, #1
 8009fba:	3110      	adds	r1, #16
 8009fbc:	2807      	cmp	r0, #7
 8009fbe:	e9c9 7b00 	strd	r7, fp, [r9]
 8009fc2:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009fc6:	ddef      	ble.n	8009fa8 <_vfiprintf_r+0x7a0>
 8009fc8:	aa10      	add	r2, sp, #64	; 0x40
 8009fca:	b319      	cbz	r1, 800a014 <_vfiprintf_r+0x80c>
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009fd4:	f7ff fbd2 	bl	800977c <__sprint_r.part.0>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f47f ada9 	bne.w	8009b30 <_vfiprintf_r+0x328>
 8009fde:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009fe2:	3e10      	subs	r6, #16
 8009fe4:	2e10      	cmp	r6, #16
 8009fe6:	f102 0c01 	add.w	ip, r2, #1
 8009fea:	dce5      	bgt.n	8009fb8 <_vfiprintf_r+0x7b0>
 8009fec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	4660      	mov	r0, ip
 8009ff4:	4657      	mov	r7, sl
 8009ff6:	469a      	mov	sl, r3
 8009ff8:	4431      	add	r1, r6
 8009ffa:	2807      	cmp	r0, #7
 8009ffc:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800a000:	f8c9 a000 	str.w	sl, [r9]
 800a004:	f8c9 6004 	str.w	r6, [r9, #4]
 800a008:	f300 80e4 	bgt.w	800a1d4 <_vfiprintf_r+0x9cc>
 800a00c:	f109 0908 	add.w	r9, r9, #8
 800a010:	3001      	adds	r0, #1
 800a012:	e608      	b.n	8009c26 <_vfiprintf_r+0x41e>
 800a014:	f04f 0c01 	mov.w	ip, #1
 800a018:	460a      	mov	r2, r1
 800a01a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a01e:	e7c8      	b.n	8009fb2 <_vfiprintf_r+0x7aa>
 800a020:	9901      	ldr	r1, [sp, #4]
 800a022:	9805      	ldr	r0, [sp, #20]
 800a024:	aa10      	add	r2, sp, #64	; 0x40
 800a026:	f7ff fba9 	bl	800977c <__sprint_r.part.0>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	f43f ae26 	beq.w	8009c7c <_vfiprintf_r+0x474>
 800a030:	e57e      	b.n	8009b30 <_vfiprintf_r+0x328>
 800a032:	f04f 0c01 	mov.w	ip, #1
 800a036:	460a      	mov	r2, r1
 800a038:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a03c:	e75d      	b.n	8009efa <_vfiprintf_r+0x6f2>
 800a03e:	2900      	cmp	r1, #0
 800a040:	f000 80d9 	beq.w	800a1f6 <_vfiprintf_r+0x9ee>
 800a044:	9901      	ldr	r1, [sp, #4]
 800a046:	9805      	ldr	r0, [sp, #20]
 800a048:	aa10      	add	r2, sp, #64	; 0x40
 800a04a:	f7ff fb97 	bl	800977c <__sprint_r.part.0>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f47f ad6e 	bne.w	8009b30 <_vfiprintf_r+0x328>
 800a054:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800a058:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a05c:	1c50      	adds	r0, r2, #1
 800a05e:	e5ba      	b.n	8009bd6 <_vfiprintf_r+0x3ce>
 800a060:	2102      	movs	r1, #2
 800a062:	ab0f      	add	r3, sp, #60	; 0x3c
 800a064:	9114      	str	r1, [sp, #80]	; 0x50
 800a066:	9313      	str	r3, [sp, #76]	; 0x4c
 800a068:	2001      	movs	r0, #1
 800a06a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a06e:	4602      	mov	r2, r0
 800a070:	f109 0908 	add.w	r9, r9, #8
 800a074:	1c50      	adds	r0, r2, #1
 800a076:	e5cc      	b.n	8009c12 <_vfiprintf_r+0x40a>
 800a078:	2e10      	cmp	r6, #16
 800a07a:	f340 8254 	ble.w	800a526 <_vfiprintf_r+0xd1e>
 800a07e:	e9dd c111 	ldrd	ip, r1, [sp, #68]	; 0x44
 800a082:	f8df a01c 	ldr.w	sl, [pc, #28]	; 800a0a0 <_vfiprintf_r+0x898>
 800a086:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800a08a:	2310      	movs	r3, #16
 800a08c:	4654      	mov	r4, sl
 800a08e:	9d05      	ldr	r5, [sp, #20]
 800a090:	f8dd a004 	ldr.w	sl, [sp, #4]
 800a094:	4662      	mov	r2, ip
 800a096:	e00d      	b.n	800a0b4 <_vfiprintf_r+0x8ac>
 800a098:	0800b130 	.word	0x0800b130
 800a09c:	0800b3b4 	.word	0x0800b3b4
 800a0a0:	0800b3a4 	.word	0x0800b3a4
 800a0a4:	f102 0c02 	add.w	ip, r2, #2
 800a0a8:	f109 0908 	add.w	r9, r9, #8
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	3e10      	subs	r6, #16
 800a0b0:	2e10      	cmp	r6, #16
 800a0b2:	dd1b      	ble.n	800a0ec <_vfiprintf_r+0x8e4>
 800a0b4:	1c50      	adds	r0, r2, #1
 800a0b6:	3110      	adds	r1, #16
 800a0b8:	2807      	cmp	r0, #7
 800a0ba:	e9c9 4300 	strd	r4, r3, [r9]
 800a0be:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800a0c2:	ddef      	ble.n	800a0a4 <_vfiprintf_r+0x89c>
 800a0c4:	aa10      	add	r2, sp, #64	; 0x40
 800a0c6:	b319      	cbz	r1, 800a110 <_vfiprintf_r+0x908>
 800a0c8:	4651      	mov	r1, sl
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a0d0:	f7ff fb54 	bl	800977c <__sprint_r.part.0>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	f47f ad2b 	bne.w	8009b30 <_vfiprintf_r+0x328>
 800a0da:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800a0de:	3e10      	subs	r6, #16
 800a0e0:	2e10      	cmp	r6, #16
 800a0e2:	f102 0c01 	add.w	ip, r2, #1
 800a0e6:	f04f 0310 	mov.w	r3, #16
 800a0ea:	dce3      	bgt.n	800a0b4 <_vfiprintf_r+0x8ac>
 800a0ec:	46a2      	mov	sl, r4
 800a0ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a0f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a0f2:	4662      	mov	r2, ip
 800a0f4:	4431      	add	r1, r6
 800a0f6:	2a07      	cmp	r2, #7
 800a0f8:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 800a0fc:	f8c9 a000 	str.w	sl, [r9]
 800a100:	f8c9 6004 	str.w	r6, [r9, #4]
 800a104:	f300 80a7 	bgt.w	800a256 <_vfiprintf_r+0xa4e>
 800a108:	f109 0908 	add.w	r9, r9, #8
 800a10c:	1c50      	adds	r0, r2, #1
 800a10e:	e54d      	b.n	8009bac <_vfiprintf_r+0x3a4>
 800a110:	460a      	mov	r2, r1
 800a112:	f04f 0c01 	mov.w	ip, #1
 800a116:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a11a:	e7c8      	b.n	800a0ae <_vfiprintf_r+0x8a6>
 800a11c:	076c      	lsls	r4, r5, #29
 800a11e:	9111      	str	r1, [sp, #68]	; 0x44
 800a120:	d550      	bpl.n	800a1c4 <_vfiprintf_r+0x9bc>
 800a122:	9b02      	ldr	r3, [sp, #8]
 800a124:	eba3 0408 	sub.w	r4, r3, r8
 800a128:	2c00      	cmp	r4, #0
 800a12a:	dd4b      	ble.n	800a1c4 <_vfiprintf_r+0x9bc>
 800a12c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a130:	2c10      	cmp	r4, #16
 800a132:	f340 8208 	ble.w	800a546 <_vfiprintf_r+0xd3e>
 800a136:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 800a424 <_vfiprintf_r+0xc1c>
 800a13a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a13c:	9e05      	ldr	r6, [sp, #20]
 800a13e:	f8dd b004 	ldr.w	fp, [sp, #4]
 800a142:	4653      	mov	r3, sl
 800a144:	2510      	movs	r5, #16
 800a146:	46ba      	mov	sl, r7
 800a148:	461f      	mov	r7, r3
 800a14a:	e006      	b.n	800a15a <_vfiprintf_r+0x952>
 800a14c:	1c90      	adds	r0, r2, #2
 800a14e:	f109 0908 	add.w	r9, r9, #8
 800a152:	461a      	mov	r2, r3
 800a154:	3c10      	subs	r4, #16
 800a156:	2c10      	cmp	r4, #16
 800a158:	dd19      	ble.n	800a18e <_vfiprintf_r+0x986>
 800a15a:	1c53      	adds	r3, r2, #1
 800a15c:	3110      	adds	r1, #16
 800a15e:	2b07      	cmp	r3, #7
 800a160:	e9c9 7500 	strd	r7, r5, [r9]
 800a164:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
 800a168:	ddf0      	ble.n	800a14c <_vfiprintf_r+0x944>
 800a16a:	aa10      	add	r2, sp, #64	; 0x40
 800a16c:	b329      	cbz	r1, 800a1ba <_vfiprintf_r+0x9b2>
 800a16e:	4659      	mov	r1, fp
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff fb03 	bl	800977c <__sprint_r.part.0>
 800a176:	2800      	cmp	r0, #0
 800a178:	f47f acda 	bne.w	8009b30 <_vfiprintf_r+0x328>
 800a17c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800a180:	3c10      	subs	r4, #16
 800a182:	2c10      	cmp	r4, #16
 800a184:	f102 0001 	add.w	r0, r2, #1
 800a188:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a18c:	dce5      	bgt.n	800a15a <_vfiprintf_r+0x952>
 800a18e:	463b      	mov	r3, r7
 800a190:	4657      	mov	r7, sl
 800a192:	469a      	mov	sl, r3
 800a194:	4421      	add	r1, r4
 800a196:	2807      	cmp	r0, #7
 800a198:	e9c9 a400 	strd	sl, r4, [r9]
 800a19c:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800a1a0:	f77f ad62 	ble.w	8009c68 <_vfiprintf_r+0x460>
 800a1a4:	b171      	cbz	r1, 800a1c4 <_vfiprintf_r+0x9bc>
 800a1a6:	9901      	ldr	r1, [sp, #4]
 800a1a8:	9805      	ldr	r0, [sp, #20]
 800a1aa:	aa10      	add	r2, sp, #64	; 0x40
 800a1ac:	f7ff fae6 	bl	800977c <__sprint_r.part.0>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	f47f acbd 	bne.w	8009b30 <_vfiprintf_r+0x328>
 800a1b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a1b8:	e556      	b.n	8009c68 <_vfiprintf_r+0x460>
 800a1ba:	2001      	movs	r0, #1
 800a1bc:	460a      	mov	r2, r1
 800a1be:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a1c2:	e7c7      	b.n	800a154 <_vfiprintf_r+0x94c>
 800a1c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c8:	4542      	cmp	r2, r8
 800a1ca:	bfac      	ite	ge
 800a1cc:	189b      	addge	r3, r3, r2
 800a1ce:	4443      	addlt	r3, r8
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	e553      	b.n	8009c7c <_vfiprintf_r+0x474>
 800a1d4:	2900      	cmp	r1, #0
 800a1d6:	f43f ae6d 	beq.w	8009eb4 <_vfiprintf_r+0x6ac>
 800a1da:	9901      	ldr	r1, [sp, #4]
 800a1dc:	9805      	ldr	r0, [sp, #20]
 800a1de:	aa10      	add	r2, sp, #64	; 0x40
 800a1e0:	f7ff facc 	bl	800977c <__sprint_r.part.0>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f47f aca3 	bne.w	8009b30 <_vfiprintf_r+0x328>
 800a1ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a1ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a1f4:	e517      	b.n	8009c26 <_vfiprintf_r+0x41e>
 800a1f6:	9b06      	ldr	r3, [sp, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d177      	bne.n	800a2ec <_vfiprintf_r+0xae4>
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	460a      	mov	r2, r1
 800a200:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a204:	e505      	b.n	8009c12 <_vfiprintf_r+0x40a>
 800a206:	9211      	str	r2, [sp, #68]	; 0x44
 800a208:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a20c:	e47a      	b.n	8009b04 <_vfiprintf_r+0x2fc>
 800a20e:	f1bb 0f00 	cmp.w	fp, #0
 800a212:	f47f abfe 	bne.w	8009a12 <_vfiprintf_r+0x20a>
 800a216:	4655      	mov	r5, sl
 800a218:	f04f 0b00 	mov.w	fp, #0
 800a21c:	f8cd b000 	str.w	fp, [sp]
 800a220:	ac3c      	add	r4, sp, #240	; 0xf0
 800a222:	f7ff bbfe 	b.w	8009a22 <_vfiprintf_r+0x21a>
 800a226:	f01a 0310 	ands.w	r3, sl, #16
 800a22a:	d13a      	bne.n	800a2a2 <_vfiprintf_r+0xa9a>
 800a22c:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800a230:	f000 8112 	beq.w	800a458 <_vfiprintf_r+0xc50>
 800a234:	9a04      	ldr	r2, [sp, #16]
 800a236:	f852 6b04 	ldr.w	r6, [r2], #4
 800a23a:	9204      	str	r2, [sp, #16]
 800a23c:	4698      	mov	r8, r3
 800a23e:	b2b6      	uxth	r6, r6
 800a240:	2301      	movs	r3, #1
 800a242:	e431      	b.n	8009aa8 <_vfiprintf_r+0x2a0>
 800a244:	232d      	movs	r3, #45	; 0x2d
 800a246:	4276      	negs	r6, r6
 800a248:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800a24c:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 800a250:	46aa      	mov	sl, r5
 800a252:	2301      	movs	r3, #1
 800a254:	e42c      	b.n	8009ab0 <_vfiprintf_r+0x2a8>
 800a256:	2900      	cmp	r1, #0
 800a258:	d07d      	beq.n	800a356 <_vfiprintf_r+0xb4e>
 800a25a:	9901      	ldr	r1, [sp, #4]
 800a25c:	9805      	ldr	r0, [sp, #20]
 800a25e:	aa10      	add	r2, sp, #64	; 0x40
 800a260:	f7ff fa8c 	bl	800977c <__sprint_r.part.0>
 800a264:	2800      	cmp	r0, #0
 800a266:	f47f ac63 	bne.w	8009b30 <_vfiprintf_r+0x328>
 800a26a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800a26e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a272:	1c50      	adds	r0, r2, #1
 800a274:	e49a      	b.n	8009bac <_vfiprintf_r+0x3a4>
 800a276:	9304      	str	r3, [sp, #16]
 800a278:	783b      	ldrb	r3, [r7, #0]
 800a27a:	f7ff bb1d 	b.w	80098b8 <_vfiprintf_r+0xb0>
 800a27e:	ac3c      	add	r4, sp, #240	; 0xf0
 800a280:	f7ff bbcf 	b.w	8009a22 <_vfiprintf_r+0x21a>
 800a284:	f109 0908 	add.w	r9, r9, #8
 800a288:	f10c 0001 	add.w	r0, ip, #1
 800a28c:	4662      	mov	r2, ip
 800a28e:	e4c4      	b.n	8009c1a <_vfiprintf_r+0x412>
 800a290:	05aa      	lsls	r2, r5, #22
 800a292:	f100 8137 	bmi.w	800a504 <_vfiprintf_r+0xcfc>
 800a296:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800a29a:	461e      	mov	r6, r3
 800a29c:	4643      	mov	r3, r8
 800a29e:	f7ff bba6 	b.w	80099ee <_vfiprintf_r+0x1e6>
 800a2a2:	9b04      	ldr	r3, [sp, #16]
 800a2a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f7ff bbfc 	b.w	8009aa8 <_vfiprintf_r+0x2a0>
 800a2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f43f ab86 	beq.w	80099c4 <_vfiprintf_r+0x1bc>
 800a2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f43f ab81 	beq.w	80099c4 <_vfiprintf_r+0x1bc>
 800a2c2:	783b      	ldrb	r3, [r7, #0]
 800a2c4:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800a2c8:	f7ff baf6 	b.w	80098b8 <_vfiprintf_r+0xb0>
 800a2cc:	e9dd 1603 	ldrd	r1, r6, [sp, #12]
 800a2d0:	f856 2b04 	ldr.w	r2, [r6], #4
 800a2d4:	9604      	str	r6, [sp, #16]
 800a2d6:	17cb      	asrs	r3, r1, #31
 800a2d8:	e9c2 1300 	strd	r1, r3, [r2]
 800a2dc:	f7ff bacd 	b.w	800987a <_vfiprintf_r+0x72>
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	f7ff bbdb 	b.w	8009aa2 <_vfiprintf_r+0x29a>
 800a2ec:	2102      	movs	r1, #2
 800a2ee:	ab0f      	add	r3, sp, #60	; 0x3c
 800a2f0:	9114      	str	r1, [sp, #80]	; 0x50
 800a2f2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2f4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a2f8:	e6ba      	b.n	800a070 <_vfiprintf_r+0x868>
 800a2fa:	4a4b      	ldr	r2, [pc, #300]	; (800a428 <_vfiprintf_r+0xc20>)
 800a2fc:	9208      	str	r2, [sp, #32]
 800a2fe:	f015 0820 	ands.w	r8, r5, #32
 800a302:	d036      	beq.n	800a372 <_vfiprintf_r+0xb6a>
 800a304:	9e04      	ldr	r6, [sp, #16]
 800a306:	3607      	adds	r6, #7
 800a308:	f026 0607 	bic.w	r6, r6, #7
 800a30c:	4632      	mov	r2, r6
 800a30e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800a312:	f852 6b08 	ldr.w	r6, [r2], #8
 800a316:	9204      	str	r2, [sp, #16]
 800a318:	07ea      	lsls	r2, r5, #31
 800a31a:	d509      	bpl.n	800a330 <_vfiprintf_r+0xb28>
 800a31c:	ea56 0208 	orrs.w	r2, r6, r8
 800a320:	d006      	beq.n	800a330 <_vfiprintf_r+0xb28>
 800a322:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800a326:	2330      	movs	r3, #48	; 0x30
 800a328:	f045 0502 	orr.w	r5, r5, #2
 800a32c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800a330:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 800a334:	2302      	movs	r3, #2
 800a336:	f7ff bbb7 	b.w	8009aa8 <_vfiprintf_r+0x2a0>
 800a33a:	46aa      	mov	sl, r5
 800a33c:	e51f      	b.n	8009d7e <_vfiprintf_r+0x576>
 800a33e:	4a3b      	ldr	r2, [pc, #236]	; (800a42c <_vfiprintf_r+0xc24>)
 800a340:	9208      	str	r2, [sp, #32]
 800a342:	e7dc      	b.n	800a2fe <_vfiprintf_r+0xaf6>
 800a344:	4620      	mov	r0, r4
 800a346:	9604      	str	r6, [sp, #16]
 800a348:	f7f5 fffa 	bl	8000340 <strlen>
 800a34c:	f04f 0b00 	mov.w	fp, #0
 800a350:	9000      	str	r0, [sp, #0]
 800a352:	f7ff bb66 	b.w	8009a22 <_vfiprintf_r+0x21a>
 800a356:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	f000 80c0 	beq.w	800a4e0 <_vfiprintf_r+0xcd8>
 800a360:	2001      	movs	r0, #1
 800a362:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 800a366:	9014      	str	r0, [sp, #80]	; 0x50
 800a368:	9213      	str	r2, [sp, #76]	; 0x4c
 800a36a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a36e:	4601      	mov	r1, r0
 800a370:	e42d      	b.n	8009bce <_vfiprintf_r+0x3c6>
 800a372:	f015 0210 	ands.w	r2, r5, #16
 800a376:	d042      	beq.n	800a3fe <_vfiprintf_r+0xbf6>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	f852 6b04 	ldr.w	r6, [r2], #4
 800a37e:	9204      	str	r2, [sp, #16]
 800a380:	e7ca      	b.n	800a318 <_vfiprintf_r+0xb10>
 800a382:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800a386:	f8cd a000 	str.w	sl, [sp]
 800a38a:	f8cd 9018 	str.w	r9, [sp, #24]
 800a38e:	46ba      	mov	sl, r7
 800a390:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a394:	2500      	movs	r5, #0
 800a396:	ac3c      	add	r4, sp, #240	; 0xf0
 800a398:	461f      	mov	r7, r3
 800a39a:	e009      	b.n	800a3b0 <_vfiprintf_r+0xba8>
 800a39c:	4630      	mov	r0, r6
 800a39e:	4641      	mov	r1, r8
 800a3a0:	f7f6 fd22 	bl	8000de8 <__aeabi_uldivmod>
 800a3a4:	2e0a      	cmp	r6, #10
 800a3a6:	f178 0300 	sbcs.w	r3, r8, #0
 800a3aa:	d31b      	bcc.n	800a3e4 <_vfiprintf_r+0xbdc>
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	4688      	mov	r8, r1
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f7f6 fd16 	bl	8000de8 <__aeabi_uldivmod>
 800a3bc:	4611      	mov	r1, r2
 800a3be:	3130      	adds	r1, #48	; 0x30
 800a3c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a3c4:	220a      	movs	r2, #10
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	3c01      	subs	r4, #1
 800a3ca:	3501      	adds	r5, #1
 800a3cc:	2f00      	cmp	r7, #0
 800a3ce:	d0e5      	beq.n	800a39c <_vfiprintf_r+0xb94>
 800a3d0:	f899 1000 	ldrb.w	r1, [r9]
 800a3d4:	42a9      	cmp	r1, r5
 800a3d6:	d1e1      	bne.n	800a39c <_vfiprintf_r+0xb94>
 800a3d8:	2dff      	cmp	r5, #255	; 0xff
 800a3da:	d0df      	beq.n	800a39c <_vfiprintf_r+0xb94>
 800a3dc:	2e0a      	cmp	r6, #10
 800a3de:	f178 0300 	sbcs.w	r3, r8, #0
 800a3e2:	d263      	bcs.n	800a4ac <_vfiprintf_r+0xca4>
 800a3e4:	4657      	mov	r7, sl
 800a3e6:	ab3c      	add	r3, sp, #240	; 0xf0
 800a3e8:	f8dd a000 	ldr.w	sl, [sp]
 800a3ec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a3f0:	1b1b      	subs	r3, r3, r4
 800a3f2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	4655      	mov	r5, sl
 800a3fa:	f7ff bb12 	b.w	8009a22 <_vfiprintf_r+0x21a>
 800a3fe:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 800a402:	d046      	beq.n	800a492 <_vfiprintf_r+0xc8a>
 800a404:	9904      	ldr	r1, [sp, #16]
 800a406:	f851 6b04 	ldr.w	r6, [r1], #4
 800a40a:	9104      	str	r1, [sp, #16]
 800a40c:	4690      	mov	r8, r2
 800a40e:	b2b6      	uxth	r6, r6
 800a410:	e782      	b.n	800a318 <_vfiprintf_r+0xb10>
 800a412:	46aa      	mov	sl, r5
 800a414:	f7ff baf8 	b.w	8009a08 <_vfiprintf_r+0x200>
 800a418:	2b01      	cmp	r3, #1
 800a41a:	46aa      	mov	sl, r5
 800a41c:	f47f ad17 	bne.w	8009e4e <_vfiprintf_r+0x646>
 800a420:	f7ff baf7 	b.w	8009a12 <_vfiprintf_r+0x20a>
 800a424:	0800b3a4 	.word	0x0800b3a4
 800a428:	0800b144 	.word	0x0800b144
 800a42c:	0800b130 	.word	0x0800b130
 800a430:	9e04      	ldr	r6, [sp, #16]
 800a432:	9a03      	ldr	r2, [sp, #12]
 800a434:	f856 3b04 	ldr.w	r3, [r6], #4
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	9604      	str	r6, [sp, #16]
 800a43c:	f7ff ba1d 	b.w	800987a <_vfiprintf_r+0x72>
 800a440:	f1bb 0f06 	cmp.w	fp, #6
 800a444:	46d8      	mov	r8, fp
 800a446:	bf28      	it	cs
 800a448:	f04f 0806 	movcs.w	r8, #6
 800a44c:	4c50      	ldr	r4, [pc, #320]	; (800a590 <_vfiprintf_r+0xd88>)
 800a44e:	f8cd 8000 	str.w	r8, [sp]
 800a452:	9604      	str	r6, [sp, #16]
 800a454:	f7ff bb95 	b.w	8009b82 <_vfiprintf_r+0x37a>
 800a458:	9b04      	ldr	r3, [sp, #16]
 800a45a:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 800a45e:	bf14      	ite	ne
 800a460:	f853 6b04 	ldrne.w	r6, [r3], #4
 800a464:	f853 6b04 	ldreq.w	r6, [r3], #4
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	bf1c      	itt	ne
 800a46c:	4690      	movne	r8, r2
 800a46e:	b2f6      	uxtbne	r6, r6
 800a470:	2301      	movs	r3, #1
 800a472:	f7ff bb19 	b.w	8009aa8 <_vfiprintf_r+0x2a0>
 800a476:	9b04      	ldr	r3, [sp, #16]
 800a478:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800a47c:	bf14      	ite	ne
 800a47e:	f853 6b04 	ldrne.w	r6, [r3], #4
 800a482:	f853 6b04 	ldreq.w	r6, [r3], #4
 800a486:	9304      	str	r3, [sp, #16]
 800a488:	bf1c      	itt	ne
 800a48a:	4690      	movne	r8, r2
 800a48c:	b2f6      	uxtbne	r6, r6
 800a48e:	f7ff bb08 	b.w	8009aa2 <_vfiprintf_r+0x29a>
 800a492:	9a04      	ldr	r2, [sp, #16]
 800a494:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800a498:	bf14      	ite	ne
 800a49a:	f852 6b04 	ldrne.w	r6, [r2], #4
 800a49e:	f852 6b04 	ldreq.w	r6, [r2], #4
 800a4a2:	9204      	str	r2, [sp, #16]
 800a4a4:	bf1c      	itt	ne
 800a4a6:	4688      	movne	r8, r1
 800a4a8:	b2f6      	uxtbne	r6, r6
 800a4aa:	e735      	b.n	800a318 <_vfiprintf_r+0xb10>
 800a4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a4b0:	1ae4      	subs	r4, r4, r3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f7ff f92f 	bl	8009718 <strncpy>
 800a4ba:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a4be:	b10b      	cbz	r3, 800a4c4 <_vfiprintf_r+0xcbc>
 800a4c0:	f109 0901 	add.w	r9, r9, #1
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4641      	mov	r1, r8
 800a4c8:	220a      	movs	r2, #10
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	f7f6 fc8b 	bl	8000de8 <__aeabi_uldivmod>
 800a4d2:	e76b      	b.n	800a3ac <_vfiprintf_r+0xba4>
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	460a      	mov	r2, r1
 800a4d8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a4dc:	f7ff bb9d 	b.w	8009c1a <_vfiprintf_r+0x412>
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f47f adbc 	bne.w	800a060 <_vfiprintf_r+0x858>
 800a4e8:	460a      	mov	r2, r1
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800a4f0:	f7ff bb93 	b.w	8009c1a <_vfiprintf_r+0x412>
 800a4f4:	9e04      	ldr	r6, [sp, #16]
 800a4f6:	9a03      	ldr	r2, [sp, #12]
 800a4f8:	f856 3b04 	ldr.w	r3, [r6], #4
 800a4fc:	9604      	str	r6, [sp, #16]
 800a4fe:	801a      	strh	r2, [r3, #0]
 800a500:	f7ff b9bb 	b.w	800987a <_vfiprintf_r+0x72>
 800a504:	f343 18c0 	sbfx	r8, r3, #7, #1
 800a508:	b25e      	sxtb	r6, r3
 800a50a:	4643      	mov	r3, r8
 800a50c:	f7ff ba6f 	b.w	80099ee <_vfiprintf_r+0x1e6>
 800a510:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800a512:	f7fa fb59 	bl	8004bc8 <__retarget_lock_release_recursive>
 800a516:	f7ff baab 	b.w	8009a70 <_vfiprintf_r+0x268>
 800a51a:	f8cd b000 	str.w	fp, [sp]
 800a51e:	9604      	str	r6, [sp, #16]
 800a520:	4683      	mov	fp, r0
 800a522:	f7ff ba7e 	b.w	8009a22 <_vfiprintf_r+0x21a>
 800a526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a528:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a52a:	f8df a068 	ldr.w	sl, [pc, #104]	; 800a594 <_vfiprintf_r+0xd8c>
 800a52e:	3201      	adds	r2, #1
 800a530:	e5e0      	b.n	800a0f4 <_vfiprintf_r+0x8ec>
 800a532:	9901      	ldr	r1, [sp, #4]
 800a534:	9805      	ldr	r0, [sp, #20]
 800a536:	aa10      	add	r2, sp, #64	; 0x40
 800a538:	f7ff f920 	bl	800977c <__sprint_r.part.0>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f43f aaf5 	beq.w	8009b2c <_vfiprintf_r+0x324>
 800a542:	f7ff baf5 	b.w	8009b30 <_vfiprintf_r+0x328>
 800a546:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a548:	f8df a048 	ldr.w	sl, [pc, #72]	; 800a594 <_vfiprintf_r+0xd8c>
 800a54c:	3001      	adds	r0, #1
 800a54e:	e621      	b.n	800a194 <_vfiprintf_r+0x98c>
 800a550:	9b01      	ldr	r3, [sp, #4]
 800a552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a554:	07db      	lsls	r3, r3, #31
 800a556:	d407      	bmi.n	800a568 <_vfiprintf_r+0xd60>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	059f      	lsls	r7, r3, #22
 800a55e:	d403      	bmi.n	800a568 <_vfiprintf_r+0xd60>
 800a560:	9b01      	ldr	r3, [sp, #4]
 800a562:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a564:	f7fa fb30 	bl	8004bc8 <__retarget_lock_release_recursive>
 800a568:	f04f 33ff 	mov.w	r3, #4294967295
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	f7ff bae8 	b.w	8009b42 <_vfiprintf_r+0x33a>
 800a572:	f8df a024 	ldr.w	sl, [pc, #36]	; 800a598 <_vfiprintf_r+0xd90>
 800a576:	4684      	mov	ip, r0
 800a578:	e4e6      	b.n	8009f48 <_vfiprintf_r+0x740>
 800a57a:	9a04      	ldr	r2, [sp, #16]
 800a57c:	787b      	ldrb	r3, [r7, #1]
 800a57e:	460f      	mov	r7, r1
 800a580:	f852 1b04 	ldr.w	r1, [r2], #4
 800a584:	9204      	str	r2, [sp, #16]
 800a586:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800a58a:	f7ff b995 	b.w	80098b8 <_vfiprintf_r+0xb0>
 800a58e:	bf00      	nop
 800a590:	0800b158 	.word	0x0800b158
 800a594:	0800b3a4 	.word	0x0800b3a4
 800a598:	0800b3b4 	.word	0x0800b3b4

0800a59c <__sbprintf>:
 800a59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a59e:	461f      	mov	r7, r3
 800a5a0:	898b      	ldrh	r3, [r1, #12]
 800a5a2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800a5a6:	f023 0302 	bic.w	r3, r3, #2
 800a5aa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a5ae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a5b0:	9319      	str	r3, [sp, #100]	; 0x64
 800a5b2:	89cb      	ldrh	r3, [r1, #14]
 800a5b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a5b8:	69cb      	ldr	r3, [r1, #28]
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	ab1a      	add	r3, sp, #104	; 0x68
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ca:	4615      	mov	r5, r2
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	a816      	add	r0, sp, #88	; 0x58
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	9306      	str	r3, [sp, #24]
 800a5da:	f7fa faef 	bl	8004bbc <__retarget_lock_init_recursive>
 800a5de:	462a      	mov	r2, r5
 800a5e0:	463b      	mov	r3, r7
 800a5e2:	4669      	mov	r1, sp
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff f90f 	bl	8009808 <_vfiprintf_r>
 800a5ea:	1e05      	subs	r5, r0, #0
 800a5ec:	db07      	blt.n	800a5fe <__sbprintf+0x62>
 800a5ee:	4669      	mov	r1, sp
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	f7fd ff15 	bl	8008420 <_fflush_r>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	bf18      	it	ne
 800a5fa:	f04f 35ff 	movne.w	r5, #4294967295
 800a5fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a602:	065b      	lsls	r3, r3, #25
 800a604:	d503      	bpl.n	800a60e <__sbprintf+0x72>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a610:	f7fa fad6 	bl	8004bc0 <__retarget_lock_close_recursive>
 800a614:	4628      	mov	r0, r5
 800a616:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800a61a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a61c <__register_exitproc>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800a6a0 <__register_exitproc+0x84>
 800a624:	4606      	mov	r6, r0
 800a626:	f8da 0000 	ldr.w	r0, [sl]
 800a62a:	4698      	mov	r8, r3
 800a62c:	460f      	mov	r7, r1
 800a62e:	4691      	mov	r9, r2
 800a630:	f7fa fac8 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 800a634:	4b1b      	ldr	r3, [pc, #108]	; (800a6a4 <__register_exitproc+0x88>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a63c:	b324      	cbz	r4, 800a688 <__register_exitproc+0x6c>
 800a63e:	6865      	ldr	r5, [r4, #4]
 800a640:	2d1f      	cmp	r5, #31
 800a642:	dc26      	bgt.n	800a692 <__register_exitproc+0x76>
 800a644:	b95e      	cbnz	r6, 800a65e <__register_exitproc+0x42>
 800a646:	1c6b      	adds	r3, r5, #1
 800a648:	3502      	adds	r5, #2
 800a64a:	f8da 0000 	ldr.w	r0, [sl]
 800a64e:	6063      	str	r3, [r4, #4]
 800a650:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a654:	f7fa fab8 	bl	8004bc8 <__retarget_lock_release_recursive>
 800a658:	2000      	movs	r0, #0
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a662:	2301      	movs	r3, #1
 800a664:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a668:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800a66c:	40ab      	lsls	r3, r5
 800a66e:	431a      	orrs	r2, r3
 800a670:	2e02      	cmp	r6, #2
 800a672:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800a676:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a67a:	d1e4      	bne.n	800a646 <__register_exitproc+0x2a>
 800a67c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 800a680:	4313      	orrs	r3, r2
 800a682:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800a686:	e7de      	b.n	800a646 <__register_exitproc+0x2a>
 800a688:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800a68c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800a690:	e7d5      	b.n	800a63e <__register_exitproc+0x22>
 800a692:	f8da 0000 	ldr.w	r0, [sl]
 800a696:	f7fa fa97 	bl	8004bc8 <__retarget_lock_release_recursive>
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	e7dc      	b.n	800a65a <__register_exitproc+0x3e>
 800a6a0:	20000840 	.word	0x20000840
 800a6a4:	0800b118 	.word	0x0800b118

0800a6a8 <__assert_func>:
 800a6a8:	b500      	push	{lr}
 800a6aa:	4c0b      	ldr	r4, [pc, #44]	; (800a6d8 <__assert_func+0x30>)
 800a6ac:	6825      	ldr	r5, [r4, #0]
 800a6ae:	4614      	mov	r4, r2
 800a6b0:	68ee      	ldr	r6, [r5, #12]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	b14c      	cbz	r4, 800a6d0 <__assert_func+0x28>
 800a6bc:	4907      	ldr	r1, [pc, #28]	; (800a6dc <__assert_func+0x34>)
 800a6be:	9500      	str	r5, [sp, #0]
 800a6c0:	e9cd 1401 	strd	r1, r4, [sp, #4]
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4906      	ldr	r1, [pc, #24]	; (800a6e0 <__assert_func+0x38>)
 800a6c8:	f000 f80e 	bl	800a6e8 <fiprintf>
 800a6cc:	f000 f970 	bl	800a9b0 <abort>
 800a6d0:	4904      	ldr	r1, [pc, #16]	; (800a6e4 <__assert_func+0x3c>)
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	e7f3      	b.n	800a6be <__assert_func+0x16>
 800a6d6:	bf00      	nop
 800a6d8:	20000000 	.word	0x20000000
 800a6dc:	0800b3c4 	.word	0x0800b3c4
 800a6e0:	0800b3d4 	.word	0x0800b3d4
 800a6e4:	0800b3d0 	.word	0x0800b3d0

0800a6e8 <fiprintf>:
 800a6e8:	b40e      	push	{r1, r2, r3}
 800a6ea:	b510      	push	{r4, lr}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	ab05      	add	r3, sp, #20
 800a6f0:	4c06      	ldr	r4, [pc, #24]	; (800a70c <fiprintf+0x24>)
 800a6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	4601      	mov	r1, r0
 800a6fa:	6820      	ldr	r0, [r4, #0]
 800a6fc:	f7ff f884 	bl	8009808 <_vfiprintf_r>
 800a700:	b003      	add	sp, #12
 800a702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a706:	b003      	add	sp, #12
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	20000000 	.word	0x20000000

0800a710 <__fputwc>:
 800a710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a714:	b083      	sub	sp, #12
 800a716:	4607      	mov	r7, r0
 800a718:	4688      	mov	r8, r1
 800a71a:	4614      	mov	r4, r2
 800a71c:	f000 f8a8 	bl	800a870 <__locale_mb_cur_max>
 800a720:	2801      	cmp	r0, #1
 800a722:	d103      	bne.n	800a72c <__fputwc+0x1c>
 800a724:	f108 33ff 	add.w	r3, r8, #4294967295
 800a728:	2bfe      	cmp	r3, #254	; 0xfe
 800a72a:	d937      	bls.n	800a79c <__fputwc+0x8c>
 800a72c:	4642      	mov	r2, r8
 800a72e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a732:	a901      	add	r1, sp, #4
 800a734:	4638      	mov	r0, r7
 800a736:	f000 f90f 	bl	800a958 <_wcrtomb_r>
 800a73a:	1c42      	adds	r2, r0, #1
 800a73c:	4606      	mov	r6, r0
 800a73e:	d033      	beq.n	800a7a8 <__fputwc+0x98>
 800a740:	b338      	cbz	r0, 800a792 <__fputwc+0x82>
 800a742:	f89d c004 	ldrb.w	ip, [sp, #4]
 800a746:	f10d 0905 	add.w	r9, sp, #5
 800a74a:	2500      	movs	r5, #0
 800a74c:	e009      	b.n	800a762 <__fputwc+0x52>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	6022      	str	r2, [r4, #0]
 800a754:	f883 c000 	strb.w	ip, [r3]
 800a758:	3501      	adds	r5, #1
 800a75a:	42b5      	cmp	r5, r6
 800a75c:	d219      	bcs.n	800a792 <__fputwc+0x82>
 800a75e:	f819 cb01 	ldrb.w	ip, [r9], #1
 800a762:	68a3      	ldr	r3, [r4, #8]
 800a764:	3b01      	subs	r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	60a3      	str	r3, [r4, #8]
 800a76a:	daf0      	bge.n	800a74e <__fputwc+0x3e>
 800a76c:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800a770:	4573      	cmp	r3, lr
 800a772:	4661      	mov	r1, ip
 800a774:	4622      	mov	r2, r4
 800a776:	4638      	mov	r0, r7
 800a778:	db02      	blt.n	800a780 <__fputwc+0x70>
 800a77a:	f1bc 0f0a 	cmp.w	ip, #10
 800a77e:	d1e6      	bne.n	800a74e <__fputwc+0x3e>
 800a780:	f000 f892 	bl	800a8a8 <__swbuf_r>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d1e7      	bne.n	800a758 <__fputwc+0x48>
 800a788:	4606      	mov	r6, r0
 800a78a:	4630      	mov	r0, r6
 800a78c:	b003      	add	sp, #12
 800a78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a792:	4646      	mov	r6, r8
 800a794:	4630      	mov	r0, r6
 800a796:	b003      	add	sp, #12
 800a798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a79c:	fa5f fc88 	uxtb.w	ip, r8
 800a7a0:	f88d c004 	strb.w	ip, [sp, #4]
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	e7ce      	b.n	800a746 <__fputwc+0x36>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	b003      	add	sp, #12
 800a7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a7b8 <_fputwc_r>:
 800a7b8:	b530      	push	{r4, r5, lr}
 800a7ba:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a7bc:	f013 0f01 	tst.w	r3, #1
 800a7c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a7c4:	4614      	mov	r4, r2
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	d101      	bne.n	800a7d2 <_fputwc_r+0x1a>
 800a7ce:	0598      	lsls	r0, r3, #22
 800a7d0:	d51c      	bpl.n	800a80c <_fputwc_r+0x54>
 800a7d2:	0490      	lsls	r0, r2, #18
 800a7d4:	d406      	bmi.n	800a7e4 <_fputwc_r+0x2c>
 800a7d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a7dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	6662      	str	r2, [r4, #100]	; 0x64
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f7ff ff92 	bl	800a710 <__fputwc>
 800a7ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7ee:	07da      	lsls	r2, r3, #31
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	d402      	bmi.n	800a7fa <_fputwc_r+0x42>
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	059b      	lsls	r3, r3, #22
 800a7f8:	d502      	bpl.n	800a800 <_fputwc_r+0x48>
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	b003      	add	sp, #12
 800a7fe:	bd30      	pop	{r4, r5, pc}
 800a800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a802:	f7fa f9e1 	bl	8004bc8 <__retarget_lock_release_recursive>
 800a806:	4628      	mov	r0, r5
 800a808:	b003      	add	sp, #12
 800a80a:	bd30      	pop	{r4, r5, pc}
 800a80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a80e:	9101      	str	r1, [sp, #4]
 800a810:	f7fa f9d8 	bl	8004bc4 <__retarget_lock_acquire_recursive>
 800a814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a818:	9901      	ldr	r1, [sp, #4]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	e7d9      	b.n	800a7d2 <_fputwc_r+0x1a>
 800a81e:	bf00      	nop

0800a820 <_fstat_r>:
 800a820:	b570      	push	{r4, r5, r6, lr}
 800a822:	460c      	mov	r4, r1
 800a824:	4d08      	ldr	r5, [pc, #32]	; (800a848 <_fstat_r+0x28>)
 800a826:	4603      	mov	r3, r0
 800a828:	2600      	movs	r6, #0
 800a82a:	4620      	mov	r0, r4
 800a82c:	4611      	mov	r1, r2
 800a82e:	461c      	mov	r4, r3
 800a830:	602e      	str	r6, [r5, #0]
 800a832:	f000 f913 	bl	800aa5c <_fstat>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d000      	beq.n	800a83c <_fstat_r+0x1c>
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0fb      	beq.n	800a83a <_fstat_r+0x1a>
 800a842:	6023      	str	r3, [r4, #0]
 800a844:	bd70      	pop	{r4, r5, r6, pc}
 800a846:	bf00      	nop
 800a848:	200010b8 	.word	0x200010b8

0800a84c <_isatty_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	; (800a86c <_isatty_r+0x20>)
 800a850:	2200      	movs	r2, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	602a      	str	r2, [r5, #0]
 800a858:	f000 f910 	bl	800aa7c <_isatty>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d000      	beq.n	800a862 <_isatty_r+0x16>
 800a860:	bd38      	pop	{r3, r4, r5, pc}
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d0fb      	beq.n	800a860 <_isatty_r+0x14>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	200010b8 	.word	0x200010b8

0800a870 <__locale_mb_cur_max>:
 800a870:	4b01      	ldr	r3, [pc, #4]	; (800a878 <__locale_mb_cur_max+0x8>)
 800a872:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800a876:	4770      	bx	lr
 800a878:	20000844 	.word	0x20000844

0800a87c <__ascii_mbtowc>:
 800a87c:	b082      	sub	sp, #8
 800a87e:	b149      	cbz	r1, 800a894 <__ascii_mbtowc+0x18>
 800a880:	b15a      	cbz	r2, 800a89a <__ascii_mbtowc+0x1e>
 800a882:	b16b      	cbz	r3, 800a8a0 <__ascii_mbtowc+0x24>
 800a884:	7813      	ldrb	r3, [r2, #0]
 800a886:	600b      	str	r3, [r1, #0]
 800a888:	7812      	ldrb	r2, [r2, #0]
 800a88a:	1e10      	subs	r0, r2, #0
 800a88c:	bf18      	it	ne
 800a88e:	2001      	movne	r0, #1
 800a890:	b002      	add	sp, #8
 800a892:	4770      	bx	lr
 800a894:	a901      	add	r1, sp, #4
 800a896:	2a00      	cmp	r2, #0
 800a898:	d1f3      	bne.n	800a882 <__ascii_mbtowc+0x6>
 800a89a:	4610      	mov	r0, r2
 800a89c:	b002      	add	sp, #8
 800a89e:	4770      	bx	lr
 800a8a0:	f06f 0001 	mvn.w	r0, #1
 800a8a4:	e7f4      	b.n	800a890 <__ascii_mbtowc+0x14>
 800a8a6:	bf00      	nop

0800a8a8 <__swbuf_r>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	b110      	cbz	r0, 800a8b8 <__swbuf_r+0x10>
 800a8b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d043      	beq.n	800a940 <__swbuf_r+0x98>
 800a8b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8bc:	69a3      	ldr	r3, [r4, #24]
 800a8be:	60a3      	str	r3, [r4, #8]
 800a8c0:	0717      	lsls	r7, r2, #28
 800a8c2:	b290      	uxth	r0, r2
 800a8c4:	d51b      	bpl.n	800a8fe <__swbuf_r+0x56>
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	b1cb      	cbz	r3, 800a8fe <__swbuf_r+0x56>
 800a8ca:	b2ed      	uxtb	r5, r5
 800a8cc:	0481      	lsls	r1, r0, #18
 800a8ce:	462f      	mov	r7, r5
 800a8d0:	d522      	bpl.n	800a918 <__swbuf_r+0x70>
 800a8d2:	6822      	ldr	r2, [r4, #0]
 800a8d4:	6961      	ldr	r1, [r4, #20]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	4299      	cmp	r1, r3
 800a8da:	dd29      	ble.n	800a930 <__swbuf_r+0x88>
 800a8dc:	3301      	adds	r3, #1
 800a8de:	68a1      	ldr	r1, [r4, #8]
 800a8e0:	3901      	subs	r1, #1
 800a8e2:	60a1      	str	r1, [r4, #8]
 800a8e4:	1c51      	adds	r1, r2, #1
 800a8e6:	6021      	str	r1, [r4, #0]
 800a8e8:	7015      	strb	r5, [r2, #0]
 800a8ea:	6962      	ldr	r2, [r4, #20]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d02a      	beq.n	800a946 <__swbuf_r+0x9e>
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	07db      	lsls	r3, r3, #31
 800a8f4:	d501      	bpl.n	800a8fa <__swbuf_r+0x52>
 800a8f6:	2d0a      	cmp	r5, #10
 800a8f8:	d025      	beq.n	800a946 <__swbuf_r+0x9e>
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fe:	4621      	mov	r1, r4
 800a900:	4630      	mov	r0, r6
 800a902:	f7fc fbb3 	bl	800706c <__swsetup_r>
 800a906:	bb20      	cbnz	r0, 800a952 <__swbuf_r+0xaa>
 800a908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	b290      	uxth	r0, r2
 800a910:	b2ed      	uxtb	r5, r5
 800a912:	0481      	lsls	r1, r0, #18
 800a914:	462f      	mov	r7, r5
 800a916:	d4dc      	bmi.n	800a8d2 <__swbuf_r+0x2a>
 800a918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a91c:	81a2      	strh	r2, [r4, #12]
 800a91e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a920:	6961      	ldr	r1, [r4, #20]
 800a922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a926:	6662      	str	r2, [r4, #100]	; 0x64
 800a928:	6822      	ldr	r2, [r4, #0]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	4299      	cmp	r1, r3
 800a92e:	dcd5      	bgt.n	800a8dc <__swbuf_r+0x34>
 800a930:	4621      	mov	r1, r4
 800a932:	4630      	mov	r0, r6
 800a934:	f7fd fd74 	bl	8008420 <_fflush_r>
 800a938:	b958      	cbnz	r0, 800a952 <__swbuf_r+0xaa>
 800a93a:	6822      	ldr	r2, [r4, #0]
 800a93c:	2301      	movs	r3, #1
 800a93e:	e7ce      	b.n	800a8de <__swbuf_r+0x36>
 800a940:	f7fa f862 	bl	8004a08 <__sinit>
 800a944:	e7b8      	b.n	800a8b8 <__swbuf_r+0x10>
 800a946:	4621      	mov	r1, r4
 800a948:	4630      	mov	r0, r6
 800a94a:	f7fd fd69 	bl	8008420 <_fflush_r>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d0d3      	beq.n	800a8fa <__swbuf_r+0x52>
 800a952:	f04f 37ff 	mov.w	r7, #4294967295
 800a956:	e7d0      	b.n	800a8fa <__swbuf_r+0x52>

0800a958 <_wcrtomb_r>:
 800a958:	b570      	push	{r4, r5, r6, lr}
 800a95a:	4605      	mov	r5, r0
 800a95c:	b084      	sub	sp, #16
 800a95e:	461c      	mov	r4, r3
 800a960:	b139      	cbz	r1, 800a972 <_wcrtomb_r+0x1a>
 800a962:	4e0b      	ldr	r6, [pc, #44]	; (800a990 <_wcrtomb_r+0x38>)
 800a964:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 800a968:	47b0      	blx	r6
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	d009      	beq.n	800a982 <_wcrtomb_r+0x2a>
 800a96e:	b004      	add	sp, #16
 800a970:	bd70      	pop	{r4, r5, r6, pc}
 800a972:	460a      	mov	r2, r1
 800a974:	4906      	ldr	r1, [pc, #24]	; (800a990 <_wcrtomb_r+0x38>)
 800a976:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 800a97a:	a901      	add	r1, sp, #4
 800a97c:	47b0      	blx	r6
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d1f5      	bne.n	800a96e <_wcrtomb_r+0x16>
 800a982:	2200      	movs	r2, #0
 800a984:	238a      	movs	r3, #138	; 0x8a
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	602b      	str	r3, [r5, #0]
 800a98a:	b004      	add	sp, #16
 800a98c:	bd70      	pop	{r4, r5, r6, pc}
 800a98e:	bf00      	nop
 800a990:	20000844 	.word	0x20000844

0800a994 <__ascii_wctomb>:
 800a994:	b149      	cbz	r1, 800a9aa <__ascii_wctomb+0x16>
 800a996:	2aff      	cmp	r2, #255	; 0xff
 800a998:	d802      	bhi.n	800a9a0 <__ascii_wctomb+0xc>
 800a99a:	700a      	strb	r2, [r1, #0]
 800a99c:	2001      	movs	r0, #1
 800a99e:	4770      	bx	lr
 800a9a0:	238a      	movs	r3, #138	; 0x8a
 800a9a2:	6003      	str	r3, [r0, #0]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	4770      	bx	lr
 800a9aa:	4608      	mov	r0, r1
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop

0800a9b0 <abort>:
 800a9b0:	b508      	push	{r3, lr}
 800a9b2:	2006      	movs	r0, #6
 800a9b4:	f000 f804 	bl	800a9c0 <raise>
 800a9b8:	2001      	movs	r0, #1
 800a9ba:	f000 f887 	bl	800aacc <_exit>
 800a9be:	bf00      	nop

0800a9c0 <raise>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <raise+0x58>)
 800a9c4:	281f      	cmp	r0, #31
 800a9c6:	681d      	ldr	r5, [r3, #0]
 800a9c8:	d820      	bhi.n	800aa0c <raise+0x4c>
 800a9ca:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	b162      	cbz	r2, 800a9ec <raise+0x2c>
 800a9d2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800a9d6:	b14b      	cbz	r3, 800a9ec <raise+0x2c>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d015      	beq.n	800aa08 <raise+0x48>
 800a9dc:	1c59      	adds	r1, r3, #1
 800a9de:	d00f      	beq.n	800aa00 <raise+0x40>
 800a9e0:	2500      	movs	r5, #0
 800a9e2:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800a9e6:	4798      	blx	r3
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 f82b 	bl	800aa48 <_getpid_r>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9fc:	f000 b80e 	b.w	800aa1c <_kill_r>
 800aa00:	2316      	movs	r3, #22
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	2001      	movs	r0, #1
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	2000      	movs	r0, #0
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	2316      	movs	r3, #22
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	f04f 30ff 	mov.w	r0, #4294967295
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
 800aa16:	bf00      	nop
 800aa18:	20000000 	.word	0x20000000

0800aa1c <_kill_r>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4d08      	ldr	r5, [pc, #32]	; (800aa44 <_kill_r+0x28>)
 800aa22:	4603      	mov	r3, r0
 800aa24:	2600      	movs	r6, #0
 800aa26:	4620      	mov	r0, r4
 800aa28:	4611      	mov	r1, r2
 800aa2a:	461c      	mov	r4, r3
 800aa2c:	602e      	str	r6, [r5, #0]
 800aa2e:	f000 f82d 	bl	800aa8c <_kill>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d000      	beq.n	800aa38 <_kill_r+0x1c>
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0fb      	beq.n	800aa36 <_kill_r+0x1a>
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	bd70      	pop	{r4, r5, r6, pc}
 800aa42:	bf00      	nop
 800aa44:	200010b8 	.word	0x200010b8

0800aa48 <_getpid_r>:
 800aa48:	f000 b810 	b.w	800aa6c <_getpid>

0800aa4c <_close>:
 800aa4c:	4b02      	ldr	r3, [pc, #8]	; (800aa58 <_close+0xc>)
 800aa4e:	2258      	movs	r2, #88	; 0x58
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	4770      	bx	lr
 800aa58:	200010b8 	.word	0x200010b8

0800aa5c <_fstat>:
 800aa5c:	4b02      	ldr	r3, [pc, #8]	; (800aa68 <_fstat+0xc>)
 800aa5e:	2258      	movs	r2, #88	; 0x58
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	f04f 30ff 	mov.w	r0, #4294967295
 800aa66:	4770      	bx	lr
 800aa68:	200010b8 	.word	0x200010b8

0800aa6c <_getpid>:
 800aa6c:	4b02      	ldr	r3, [pc, #8]	; (800aa78 <_getpid+0xc>)
 800aa6e:	2258      	movs	r2, #88	; 0x58
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	f04f 30ff 	mov.w	r0, #4294967295
 800aa76:	4770      	bx	lr
 800aa78:	200010b8 	.word	0x200010b8

0800aa7c <_isatty>:
 800aa7c:	4b02      	ldr	r3, [pc, #8]	; (800aa88 <_isatty+0xc>)
 800aa7e:	2258      	movs	r2, #88	; 0x58
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	2000      	movs	r0, #0
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	200010b8 	.word	0x200010b8

0800aa8c <_kill>:
 800aa8c:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <_kill+0xc>)
 800aa8e:	2258      	movs	r2, #88	; 0x58
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	f04f 30ff 	mov.w	r0, #4294967295
 800aa96:	4770      	bx	lr
 800aa98:	200010b8 	.word	0x200010b8

0800aa9c <_lseek>:
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <_lseek+0xc>)
 800aa9e:	2258      	movs	r2, #88	; 0x58
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	4770      	bx	lr
 800aaa8:	200010b8 	.word	0x200010b8

0800aaac <_read>:
 800aaac:	4b02      	ldr	r3, [pc, #8]	; (800aab8 <_read+0xc>)
 800aaae:	2258      	movs	r2, #88	; 0x58
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	f04f 30ff 	mov.w	r0, #4294967295
 800aab6:	4770      	bx	lr
 800aab8:	200010b8 	.word	0x200010b8

0800aabc <_write>:
 800aabc:	4b02      	ldr	r3, [pc, #8]	; (800aac8 <_write+0xc>)
 800aabe:	2258      	movs	r2, #88	; 0x58
 800aac0:	601a      	str	r2, [r3, #0]
 800aac2:	f04f 30ff 	mov.w	r0, #4294967295
 800aac6:	4770      	bx	lr
 800aac8:	200010b8 	.word	0x200010b8

0800aacc <_exit>:
 800aacc:	e7fe      	b.n	800aacc <_exit>
 800aace:	bf00      	nop

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
