   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"nistseedexpander.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.seedexpander_init,"ax",%progbits
  16              		.align	1
  17              		.global	seedexpander_init
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	seedexpander_init:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "nistseedexpander.c"
   1:nistseedexpander.c **** //
   2:nistseedexpander.c **** //  rng.c
   3:nistseedexpander.c **** //
   4:nistseedexpander.c **** //  Created by Bassham, Lawrence E (Fed) on 8/29/17.
   5:nistseedexpander.c **** //  Copyright Â© 2017 Bassham, Lawrence E (Fed). All rights reserved.
   6:nistseedexpander.c **** //  Modified for PQClean by Sebastian Verschoor
   7:nistseedexpander.c **** //
   8:nistseedexpander.c **** 
   9:nistseedexpander.c **** #include "nistseedexpander.h"
  10:nistseedexpander.c **** #include "aes.h"
  11:nistseedexpander.c **** #include <string.h>
  12:nistseedexpander.c **** 
  13:nistseedexpander.c **** /*
  14:nistseedexpander.c ****  seedexpander_init()
  15:nistseedexpander.c ****  ctx            - stores the current state of an instance of the seed expander
  16:nistseedexpander.c ****  seed           - a 32 byte random value
  17:nistseedexpander.c ****  diversifier    - an 8 byte diversifier
  18:nistseedexpander.c ****  maxlen         - maximum number of bytes (less than 2**32) generated under this seed and diversifi
  19:nistseedexpander.c ****  */
  20:nistseedexpander.c **** int
  21:nistseedexpander.c **** seedexpander_init(AES_XOF_struct *ctx,
  22:nistseedexpander.c ****                   const uint8_t *seed,
  23:nistseedexpander.c ****                   const uint8_t *diversifier,
  24:nistseedexpander.c ****                   size_t maxlen) {
  28              		.loc 1 24 34 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  25:nistseedexpander.c ****     ctx->length_remaining = maxlen;
  32              		.loc 1 25 5 view .LVU1
  24:nistseedexpander.c ****     ctx->length_remaining = maxlen;
  33              		.loc 1 24 34 is_stmt 0 view .LVU2
  34 0000 70B5     		push	{r4, r5, r6, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 14, -4
  41              		.loc 1 25 27 view .LVU3
  42 0002 4361     		str	r3, [r0, #20]
  26:nistseedexpander.c **** 
  27:nistseedexpander.c ****     memcpy(ctx->key, seed, 32);
  43              		.loc 1 27 5 is_stmt 1 view .LVU4
  44 0004 00F11804 		add	r4, r0, #24
  45 0008 01F12005 		add	r5, r1, #32
  46              	.LVL1:
  47              	.L2:
  48              		.loc 1 27 5 is_stmt 0 view .LVU5
  49 000c 51F8046B 		ldr	r6, [r1], #4	@ unaligned
  50 0010 44F8046B 		str	r6, [r4], #4	@ unaligned
  51 0014 A942     		cmp	r1, r5
  52 0016 F9D1     		bne	.L2
  28:nistseedexpander.c ****     memcpy(ctx->ctr, diversifier, 8);
  53              		.loc 1 28 5 is_stmt 1 view .LVU6
  54 0018 1168     		ldr	r1, [r2]	@ unaligned
  55 001a 8163     		str	r1, [r0, #56]	@ unaligned
  56 001c 5168     		ldr	r1, [r2, #4]	@ unaligned
  57 001e C163     		str	r1, [r0, #60]	@ unaligned
  29:nistseedexpander.c **** 
  30:nistseedexpander.c ****     ctx->ctr[11] = maxlen % 256;
  58              		.loc 1 30 5 view .LVU7
  31:nistseedexpander.c ****     maxlen >>= 8;
  59              		.loc 1 31 5 view .LVU8
  60              	.LVL2:
  32:nistseedexpander.c ****     ctx->ctr[10] = maxlen % 256;
  61              		.loc 1 32 5 view .LVU9
  33:nistseedexpander.c ****     maxlen >>= 8;
  62              		.loc 1 33 5 view .LVU10
  34:nistseedexpander.c ****     ctx->ctr[9] = maxlen % 256;
  63              		.loc 1 34 5 view .LVU11
  35:nistseedexpander.c ****     maxlen >>= 8;
  64              		.loc 1 35 5 view .LVU12
  36:nistseedexpander.c ****     ctx->ctr[8] = maxlen % 256;
  65              		.loc 1 36 5 view .LVU13
  37:nistseedexpander.c ****     memset(ctx->ctr + 12, 0x00, 4);
  66              		.loc 1 37 5 is_stmt 0 view .LVU14
  67 0020 0024     		movs	r4, #0
  68 0022 1BBA     		rev	r3, r3
  69              	.LVL3:
  38:nistseedexpander.c **** 
  39:nistseedexpander.c ****     ctx->buffer_pos = 16;
  70              		.loc 1 39 21 view .LVU15
  71 0024 1022     		movs	r2, #16
  72              	.LVL4:
  36:nistseedexpander.c ****     memset(ctx->ctr + 12, 0x00, 4);
  73              		.loc 1 36 17 view .LVU16
  74 0026 0364     		str	r3, [r0, #64]
  37:nistseedexpander.c ****     memset(ctx->ctr + 12, 0x00, 4);
  75              		.loc 1 37 5 is_stmt 1 view .LVU17
  76 0028 4464     		str	r4, [r0, #68]	@ unaligned
  77              		.loc 1 39 5 view .LVU18
  78              		.loc 1 39 21 is_stmt 0 view .LVU19
  79 002a 0261     		str	r2, [r0, #16]
  40:nistseedexpander.c ****     memset(ctx->buffer, 0x00, 16);
  80              		.loc 1 40 5 is_stmt 1 view .LVU20
  81 002c 2146     		mov	r1, r4
  82 002e FFF7FEFF 		bl	memset
  83              	.LVL5:
  41:nistseedexpander.c **** 
  42:nistseedexpander.c ****     return RNG_SUCCESS;
  84              		.loc 1 42 5 view .LVU21
  43:nistseedexpander.c **** }
  85              		.loc 1 43 1 is_stmt 0 view .LVU22
  86 0032 2046     		mov	r0, r4
  87 0034 70BD     		pop	{r4, r5, r6, pc}
  88              		.loc 1 43 1 view .LVU23
  89              		.cfi_endproc
  90              	.LFE0:
  92              		.section	.text.seedexpander,"ax",%progbits
  93              		.align	1
  94              		.global	seedexpander
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	seedexpander:
 101              	.LVL6:
 102              	.LFB2:
  44:nistseedexpander.c **** 
  45:nistseedexpander.c **** static void AES256_ECB(uint8_t *key, uint8_t *ctr, uint8_t *buffer) {
  46:nistseedexpander.c ****     aes256ctx ctx;
  47:nistseedexpander.c ****     aes256_ecb_keyexp(&ctx, key);
  48:nistseedexpander.c ****     aes256_ecb(buffer, ctr, 1, &ctx);
  49:nistseedexpander.c ****     aes256_ctx_release(&ctx);
  50:nistseedexpander.c **** }
  51:nistseedexpander.c **** 
  52:nistseedexpander.c **** /*
  53:nistseedexpander.c ****  seedexpander()
  54:nistseedexpander.c ****     ctx  - stores the current state of an instance of the seed expander
  55:nistseedexpander.c ****     x    - returns the XOF data
  56:nistseedexpander.c ****     xlen - number of bytes to return
  57:nistseedexpander.c ****  */
  58:nistseedexpander.c **** int
  59:nistseedexpander.c **** seedexpander(AES_XOF_struct *ctx, uint8_t *x, size_t xlen) {
 103              		.loc 1 59 60 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 8
 106              		@ frame_needed = 0, uses_anonymous_args = 0
  60:nistseedexpander.c ****     size_t offset;
 107              		.loc 1 60 5 view .LVU25
  61:nistseedexpander.c **** 
  62:nistseedexpander.c ****     if ( x == NULL ) {
 108              		.loc 1 62 5 view .LVU26
  59:nistseedexpander.c ****     size_t offset;
 109              		.loc 1 59 60 is_stmt 0 view .LVU27
 110 0000 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 40
 113              		.cfi_offset 4, -28
 114              		.cfi_offset 5, -24
 115              		.cfi_offset 6, -20
 116              		.cfi_offset 7, -16
 117              		.cfi_offset 8, -12
 118              		.cfi_offset 9, -8
 119              		.cfi_offset 14, -4
  59:nistseedexpander.c ****     size_t offset;
 120              		.loc 1 59 60 view .LVU28
 121 0004 0546     		mov	r5, r0
 122 0006 1446     		mov	r4, r2
 123              		.loc 1 62 8 view .LVU29
 124 0008 0F46     		mov	r7, r1
 125 000a 0029     		cmp	r1, #0
 126 000c 46D0     		beq	.L12
  63:nistseedexpander.c ****         return RNG_BAD_OUTBUF;
  64:nistseedexpander.c ****     }
  65:nistseedexpander.c ****     if ( xlen >= ctx->length_remaining ) {
 127              		.loc 1 65 5 is_stmt 1 view .LVU30
 128              		.loc 1 65 21 is_stmt 0 view .LVU31
 129 000e 4369     		ldr	r3, [r0, #20]
 130              		.loc 1 65 8 view .LVU32
 131 0010 9342     		cmp	r3, r2
 132 0012 46D9     		bls	.L13
  66:nistseedexpander.c ****         return RNG_BAD_REQ_LEN;
  67:nistseedexpander.c ****     }
  68:nistseedexpander.c **** 
  69:nistseedexpander.c ****     ctx->length_remaining -= xlen;
 133              		.loc 1 69 5 is_stmt 1 view .LVU33
 134              		.loc 1 69 27 is_stmt 0 view .LVU34
 135 0014 9B1A     		subs	r3, r3, r2
  70:nistseedexpander.c **** 
  71:nistseedexpander.c ****     offset = 0;
 136              		.loc 1 71 12 view .LVU35
 137 0016 0026     		movs	r6, #0
  69:nistseedexpander.c **** 
 138              		.loc 1 69 27 view .LVU36
 139 0018 4361     		str	r3, [r0, #20]
 140              		.loc 1 71 5 is_stmt 1 view .LVU37
 141              	.LVL7:
  72:nistseedexpander.c ****     while ( xlen > 0 ) {
 142              		.loc 1 72 5 view .LVU38
  73:nistseedexpander.c ****         if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
  74:nistseedexpander.c ****             memcpy(x + offset, ctx->buffer + ctx->buffer_pos, xlen);
  75:nistseedexpander.c ****             ctx->buffer_pos += xlen;
  76:nistseedexpander.c **** 
  77:nistseedexpander.c ****             return RNG_SUCCESS;
  78:nistseedexpander.c ****         }
  79:nistseedexpander.c **** 
  80:nistseedexpander.c ****         // take what's in the buffer
  81:nistseedexpander.c ****         memcpy(x + offset, ctx->buffer + ctx->buffer_pos, 16 - ctx->buffer_pos);
  82:nistseedexpander.c ****         xlen -= 16 - ctx->buffer_pos;
  83:nistseedexpander.c ****         offset += 16 - ctx->buffer_pos;
  84:nistseedexpander.c **** 
  85:nistseedexpander.c ****         AES256_ECB(ctx->key, ctx->ctr, ctx->buffer);
 143              		.loc 1 85 23 is_stmt 0 view .LVU39
 144 001a 00F11809 		add	r9, r0, #24
  86:nistseedexpander.c ****         ctx->buffer_pos = 0;
 145              		.loc 1 86 25 view .LVU40
 146 001e B046     		mov	r8, r6
 147              	.LVL8:
 148              	.L6:
  72:nistseedexpander.c ****     while ( xlen > 0 ) {
 149              		.loc 1 72 11 is_stmt 1 view .LVU41
 150 0020 6CB1     		cbz	r4, .L15
  73:nistseedexpander.c ****         if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 151              		.loc 1 73 9 view .LVU42
  73:nistseedexpander.c ****         if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 152              		.loc 1 73 31 is_stmt 0 view .LVU43
 153 0022 2969     		ldr	r1, [r5, #16]
  73:nistseedexpander.c ****         if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 154              		.loc 1 73 26 view .LVU44
 155 0024 C1F11002 		rsb	r2, r1, #16
  73:nistseedexpander.c ****         if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 156              		.loc 1 73 12 view .LVU45
 157 0028 A242     		cmp	r2, r4
  74:nistseedexpander.c ****             ctx->buffer_pos += xlen;
 158              		.loc 1 74 22 view .LVU46
 159 002a 07EB0600 		add	r0, r7, r6
  74:nistseedexpander.c ****             ctx->buffer_pos += xlen;
 160              		.loc 1 74 13 view .LVU47
 161 002e 2944     		add	r1, r1, r5
  73:nistseedexpander.c ****         if ( xlen <= (16 - ctx->buffer_pos) ) { // buffer has what we need
 162              		.loc 1 73 12 view .LVU48
 163 0030 09D3     		bcc	.L7
  74:nistseedexpander.c ****             ctx->buffer_pos += xlen;
 164              		.loc 1 74 13 is_stmt 1 view .LVU49
 165 0032 2246     		mov	r2, r4
 166 0034 FFF7FEFF 		bl	memcpy
 167              	.LVL9:
  75:nistseedexpander.c **** 
 168              		.loc 1 75 13 view .LVU50
  75:nistseedexpander.c **** 
 169              		.loc 1 75 29 is_stmt 0 view .LVU51
 170 0038 2A69     		ldr	r2, [r5, #16]
 171 003a 2244     		add	r2, r2, r4
 172 003c 2A61     		str	r2, [r5, #16]
 173              	.L15:
  77:nistseedexpander.c ****         }
 174              		.loc 1 77 13 is_stmt 1 view .LVU52
  77:nistseedexpander.c ****         }
 175              		.loc 1 77 20 is_stmt 0 view .LVU53
 176 003e 0020     		movs	r0, #0
 177              	.LVL10:
 178              	.L4:
  87:nistseedexpander.c **** 
  88:nistseedexpander.c ****         //increment the counter
  89:nistseedexpander.c ****         for (size_t i = 15; i >= 12; i--) {
  90:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
  91:nistseedexpander.c ****                 ctx->ctr[i] = 0x00;
  92:nistseedexpander.c ****             } else {
  93:nistseedexpander.c ****                 ctx->ctr[i]++;
  94:nistseedexpander.c ****                 break;
  95:nistseedexpander.c ****             }
  96:nistseedexpander.c ****         }
  97:nistseedexpander.c **** 
  98:nistseedexpander.c ****     }
  99:nistseedexpander.c **** 
 100:nistseedexpander.c ****     return RNG_SUCCESS;
 101:nistseedexpander.c **** }
 179              		.loc 1 101 1 view .LVU54
 180 0040 03B0     		add	sp, sp, #12
 181              	.LCFI2:
 182              		.cfi_remember_state
 183              		.cfi_def_cfa_offset 28
 184              		@ sp needed
 185 0042 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 186              	.LVL11:
 187              	.L7:
 188              	.LCFI3:
 189              		.cfi_restore_state
  81:nistseedexpander.c ****         xlen -= 16 - ctx->buffer_pos;
 190              		.loc 1 81 9 is_stmt 1 view .LVU55
 191 0046 FFF7FEFF 		bl	memcpy
 192              	.LVL12:
  82:nistseedexpander.c ****         offset += 16 - ctx->buffer_pos;
 193              		.loc 1 82 9 view .LVU56
  82:nistseedexpander.c ****         offset += 16 - ctx->buffer_pos;
 194              		.loc 1 82 25 is_stmt 0 view .LVU57
 195 004a 2B69     		ldr	r3, [r5, #16]
 196              	.LBB5:
 197              	.LBB6:
  47:nistseedexpander.c ****     aes256_ecb(buffer, ctr, 1, &ctx);
 198              		.loc 1 47 5 view .LVU58
 199 004c 4946     		mov	r1, r9
 200              	.LBE6:
 201              	.LBE5:
  82:nistseedexpander.c ****         offset += 16 - ctx->buffer_pos;
 202              		.loc 1 82 14 view .LVU59
 203 004e A3F11002 		sub	r2, r3, #16
 204              	.LBB9:
 205              	.LBB7:
  47:nistseedexpander.c ****     aes256_ecb(buffer, ctr, 1, &ctx);
 206              		.loc 1 47 5 view .LVU60
 207 0052 01A8     		add	r0, sp, #4
 208              	.LBE7:
 209              	.LBE9:
  83:nistseedexpander.c **** 
 210              		.loc 1 83 16 view .LVU61
 211 0054 C3F11003 		rsb	r3, r3, #16
  82:nistseedexpander.c ****         offset += 16 - ctx->buffer_pos;
 212              		.loc 1 82 14 view .LVU62
 213 0058 1444     		add	r4, r4, r2
 214              	.LVL13:
  83:nistseedexpander.c **** 
 215              		.loc 1 83 9 is_stmt 1 view .LVU63
  83:nistseedexpander.c **** 
 216              		.loc 1 83 16 is_stmt 0 view .LVU64
 217 005a 1E44     		add	r6, r6, r3
 218              	.LVL14:
  85:nistseedexpander.c ****         ctx->buffer_pos = 0;
 219              		.loc 1 85 9 is_stmt 1 view .LVU65
 220              	.LBB10:
 221              	.LBI5:
  45:nistseedexpander.c ****     aes256ctx ctx;
 222              		.loc 1 45 13 view .LVU66
 223              	.LBB8:
  46:nistseedexpander.c ****     aes256_ecb_keyexp(&ctx, key);
 224              		.loc 1 46 5 view .LVU67
  47:nistseedexpander.c ****     aes256_ecb(buffer, ctr, 1, &ctx);
 225              		.loc 1 47 5 view .LVU68
 226 005c FFF7FEFF 		bl	aes256_ecb_keyexp
 227              	.LVL15:
  48:nistseedexpander.c ****     aes256_ctx_release(&ctx);
 228              		.loc 1 48 5 view .LVU69
 229 0060 01AB     		add	r3, sp, #4
 230 0062 05F13801 		add	r1, r5, #56
 231              	.LVL16:
  48:nistseedexpander.c ****     aes256_ctx_release(&ctx);
 232              		.loc 1 48 5 is_stmt 0 view .LVU70
 233 0066 0122     		movs	r2, #1
 234 0068 2846     		mov	r0, r5
 235 006a FFF7FEFF 		bl	aes256_ecb
 236              	.LVL17:
  49:nistseedexpander.c **** }
 237              		.loc 1 49 5 is_stmt 1 view .LVU71
 238 006e 01A8     		add	r0, sp, #4
 239 0070 FFF7FEFF 		bl	aes256_ctx_release
 240              	.LVL18:
  49:nistseedexpander.c **** }
 241              		.loc 1 49 5 is_stmt 0 view .LVU72
 242              	.LBE8:
 243              	.LBE10:
  86:nistseedexpander.c **** 
 244              		.loc 1 86 9 is_stmt 1 view .LVU73
  86:nistseedexpander.c **** 
 245              		.loc 1 86 25 is_stmt 0 view .LVU74
 246 0074 C5F81080 		str	r8, [r5, #16]
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 247              		.loc 1 89 9 is_stmt 1 view .LVU75
 248              	.LBB11:
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 249              		.loc 1 89 14 view .LVU76
 250              	.LVL19:
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 251              		.loc 1 89 29 view .LVU77
 252 0078 05F14701 		add	r1, r5, #71
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 253              		.loc 1 89 21 is_stmt 0 view .LVU78
 254 007c 0F23     		movs	r3, #15
 255              	.LVL20:
 256              	.L9:
  90:nistseedexpander.c ****                 ctx->ctr[i] = 0x00;
 257              		.loc 1 90 13 is_stmt 1 view .LVU79
  90:nistseedexpander.c ****                 ctx->ctr[i] = 0x00;
 258              		.loc 1 90 26 is_stmt 0 view .LVU80
 259 007e 11F80129 		ldrb	r2, [r1], #-1	@ zero_extendqisi2
  90:nistseedexpander.c ****                 ctx->ctr[i] = 0x00;
 260              		.loc 1 90 16 view .LVU81
 261 0082 FF2A     		cmp	r2, #255
 262 0084 05D1     		bne	.L8
  91:nistseedexpander.c ****             } else {
 263              		.loc 1 91 17 is_stmt 1 view .LVU82
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 264              		.loc 1 89 39 is_stmt 0 view .LVU83
 265 0086 013B     		subs	r3, r3, #1
 266              	.LVL21:
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 267              		.loc 1 89 9 view .LVU84
 268 0088 0B2B     		cmp	r3, #11
  91:nistseedexpander.c ****             } else {
 269              		.loc 1 91 29 view .LVU85
 270 008a 81F80180 		strb	r8, [r1, #1]
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 271              		.loc 1 89 38 is_stmt 1 view .LVU86
 272              	.LVL22:
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 273              		.loc 1 89 29 view .LVU87
  89:nistseedexpander.c ****             if ( ctx->ctr[i] == 0xff ) {
 274              		.loc 1 89 9 is_stmt 0 view .LVU88
 275 008e F6D1     		bne	.L9
 276 0090 C6E7     		b	.L6
 277              	.L8:
  93:nistseedexpander.c ****                 break;
 278              		.loc 1 93 17 is_stmt 1 view .LVU89
  93:nistseedexpander.c ****                 break;
 279              		.loc 1 93 28 is_stmt 0 view .LVU90
 280 0092 2B44     		add	r3, r3, r5
 281              	.LVL23:
  93:nistseedexpander.c ****                 break;
 282              		.loc 1 93 28 view .LVU91
 283 0094 0132     		adds	r2, r2, #1
 284 0096 83F83820 		strb	r2, [r3, #56]
  94:nistseedexpander.c ****             }
 285              		.loc 1 94 17 is_stmt 1 view .LVU92
 286 009a C1E7     		b	.L6
 287              	.LVL24:
 288              	.L12:
  94:nistseedexpander.c ****             }
 289              		.loc 1 94 17 is_stmt 0 view .LVU93
 290              	.LBE11:
  63:nistseedexpander.c ****     }
 291              		.loc 1 63 16 view .LVU94
 292 009c 6FF00100 		mvn	r0, #1
 293              	.LVL25:
  63:nistseedexpander.c ****     }
 294              		.loc 1 63 16 view .LVU95
 295 00a0 CEE7     		b	.L4
 296              	.LVL26:
 297              	.L13:
  66:nistseedexpander.c ****     }
 298              		.loc 1 66 16 view .LVU96
 299 00a2 6FF00200 		mvn	r0, #2
 300              	.LVL27:
  66:nistseedexpander.c ****     }
 301              		.loc 1 66 16 view .LVU97
 302 00a6 CBE7     		b	.L4
 303              		.cfi_endproc
 304              	.LFE2:
 306              		.text
 307              	.Letext0:
 308              		.file 2 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\lib\\gcc\\arm-none-eabi\\
 309              		.file 3 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\m
 310              		.file 4 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\s
 311              		.file 5 "nistseedexpander.h"
 312              		.file 6 "aes.h"
 313              		.file 7 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 nistseedexpander.c
C:\Users\dudixiao\AppData\Local\Temp\cc4h2eiS.s:16     .text.seedexpander_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cc4h2eiS.s:24     .text.seedexpander_init:00000000 seedexpander_init
C:\Users\dudixiao\AppData\Local\Temp\cc4h2eiS.s:93     .text.seedexpander:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cc4h2eiS.s:100    .text.seedexpander:00000000 seedexpander

UNDEFINED SYMBOLS
memset
memcpy
aes256_ecb_keyexp
aes256_ecb
aes256_ctx_release
