
maskmain-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08003ef8  08003ef8  00013ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800407c  0800407c  00020434  2**0
                  CONTENTS
  4 .ARM          00000000  0800407c  0800407c  00020434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800407c  0800407c  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  10000000  08004088  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  10000434  080044bc  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  10000af8  080044bc  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a06  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c4  00000000  00000000  00027e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f5d  00000000  00000000  0002912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  0002f089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000640  00000000  00000000  0002f401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b53  00000000  00000000  0002fa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000176f  00000000  00000000  00036594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00037d03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cb8  00000000  00000000  00037d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00038a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000054  00000000  00000000  00038b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	10000434 	.word	0x10000434
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ee0 	.word	0x08003ee0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	10000438 	.word	0x10000438
 80001c4:	08003ee0 	.word	0x08003ee0

080001c8 <memcpy>:
 80001c8:	4684      	mov	ip, r0
 80001ca:	ea41 0300 	orr.w	r3, r1, r0
 80001ce:	f013 0303 	ands.w	r3, r3, #3
 80001d2:	d16d      	bne.n	80002b0 <memcpy+0xe8>
 80001d4:	3a40      	subs	r2, #64	; 0x40
 80001d6:	d341      	bcc.n	800025c <memcpy+0x94>
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	3a40      	subs	r2, #64	; 0x40
 800025a:	d2bd      	bcs.n	80001d8 <memcpy+0x10>
 800025c:	3230      	adds	r2, #48	; 0x30
 800025e:	d311      	bcc.n	8000284 <memcpy+0xbc>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	3a10      	subs	r2, #16
 8000282:	d2ed      	bcs.n	8000260 <memcpy+0x98>
 8000284:	320c      	adds	r2, #12
 8000286:	d305      	bcc.n	8000294 <memcpy+0xcc>
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	3a04      	subs	r2, #4
 8000292:	d2f9      	bcs.n	8000288 <memcpy+0xc0>
 8000294:	3204      	adds	r2, #4
 8000296:	d008      	beq.n	80002aa <memcpy+0xe2>
 8000298:	07d2      	lsls	r2, r2, #31
 800029a:	bf1c      	itt	ne
 800029c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002a4:	d301      	bcc.n	80002aa <memcpy+0xe2>
 80002a6:	880b      	ldrh	r3, [r1, #0]
 80002a8:	8003      	strh	r3, [r0, #0]
 80002aa:	4660      	mov	r0, ip
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	2a08      	cmp	r2, #8
 80002b2:	d313      	bcc.n	80002dc <memcpy+0x114>
 80002b4:	078b      	lsls	r3, r1, #30
 80002b6:	d08d      	beq.n	80001d4 <memcpy+0xc>
 80002b8:	f010 0303 	ands.w	r3, r0, #3
 80002bc:	d08a      	beq.n	80001d4 <memcpy+0xc>
 80002be:	f1c3 0304 	rsb	r3, r3, #4
 80002c2:	1ad2      	subs	r2, r2, r3
 80002c4:	07db      	lsls	r3, r3, #31
 80002c6:	bf1c      	itt	ne
 80002c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80002d0:	d380      	bcc.n	80001d4 <memcpy+0xc>
 80002d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002d6:	f820 3b02 	strh.w	r3, [r0], #2
 80002da:	e77b      	b.n	80001d4 <memcpy+0xc>
 80002dc:	3a04      	subs	r2, #4
 80002de:	d3d9      	bcc.n	8000294 <memcpy+0xcc>
 80002e0:	3a01      	subs	r2, #1
 80002e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e6:	f800 3b01 	strb.w	r3, [r0], #1
 80002ea:	d2f9      	bcs.n	80002e0 <memcpy+0x118>
 80002ec:	780b      	ldrb	r3, [r1, #0]
 80002ee:	7003      	strb	r3, [r0, #0]
 80002f0:	784b      	ldrb	r3, [r1, #1]
 80002f2:	7043      	strb	r3, [r0, #1]
 80002f4:	788b      	ldrb	r3, [r1, #2]
 80002f6:	7083      	strb	r3, [r0, #2]
 80002f8:	4660      	mov	r0, ip
 80002fa:	4770      	bx	lr

080002fc <mask_hash>:
#include "config.h"
#include "masking_interface.h"
#include "fips202.h"

uint8_t mask_hash(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p)
{
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8000302:	461e      	mov	r6, r3
  uint8_t masked_key[SEEDBYTES*N_SHARES];
  
  //給消息賦值
	uint8_t m[33];
	for(int ii=0; ii < 33;ii++)
		m[ii] =p[ii];
 8000304:	aa01      	add	r2, sp, #4
 8000306:	f103 0520 	add.w	r5, r3, #32
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	6859      	ldr	r1, [r3, #4]
 800030e:	4614      	mov	r4, r2
 8000310:	c403      	stmia	r4!, {r0, r1}
 8000312:	3308      	adds	r3, #8
 8000314:	42ab      	cmp	r3, r5
 8000316:	4622      	mov	r2, r4
 8000318:	d1f7      	bne.n	800030a <mask_hash+0xe>
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	7023      	strb	r3, [r4, #0]
	
	
	//固定賦值給masked_key
	for(int ii=0; ii < 96;ii++)
		masked_key[ii] =p[85+ii];
 800031e:	2260      	movs	r2, #96	; 0x60
 8000320:	f106 0155 	add.w	r1, r6, #85	; 0x55
 8000324:	a822      	add	r0, sp, #136	; 0x88
 8000326:	f7ff ff4f 	bl	80001c8 <memcpy>
  
  
  //給tr賦值
	uint8_t tr[48];
	for(int ii=0; ii < 48;ii++)
		tr[ii] =p[35+ii];
 800032a:	ac0a      	add	r4, sp, #40	; 0x28
 800032c:	f106 0323 	add.w	r3, r6, #35	; 0x23
 8000330:	f106 0553 	add.w	r5, r6, #83	; 0x53
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	6859      	ldr	r1, [r3, #4]
 8000338:	4622      	mov	r2, r4
 800033a:	c203      	stmia	r2!, {r0, r1}
 800033c:	3308      	adds	r3, #8
 800033e:	42ab      	cmp	r3, r5
 8000340:	4614      	mov	r4, r2
 8000342:	d1f7      	bne.n	8000334 <mask_hash+0x38>
  
  
  //計算mu
  keccak_state state;
  uint8_t mu[48];
  shake256_init(&state);
 8000344:	a86a      	add	r0, sp, #424	; 0x1a8
 8000346:	f001 f93e 	bl	80015c6 <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(&state, tr, CRHBYTES);
 800034a:	a90a      	add	r1, sp, #40	; 0x28
 800034c:	a86a      	add	r0, sp, #424	; 0x1a8
 800034e:	2230      	movs	r2, #48	; 0x30
 8000350:	f001 f93b 	bl	80015ca <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(&state, m, mlen);
 8000354:	a901      	add	r1, sp, #4
 8000356:	2221      	movs	r2, #33	; 0x21
 8000358:	a86a      	add	r0, sp, #424	; 0x1a8
 800035a:	f001 f936 	bl	80015ca <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(&state);
 800035e:	a86a      	add	r0, sp, #424	; 0x1a8
 8000360:	f001 f940 	bl	80015e4 <pqcrystals_fips202_ref_shake256_finalize>
  shake256_squeeze(mu, CRHBYTES, &state);
  
  
  for(int i=0; i < SEEDBYTES; ++i){
    for(int j=0; j < N_SHARES; ++j){
      in[i + (SEEDBYTES+CRHBYTES)*j] = masked_key[i + (SEEDBYTES)*j]; 
 8000364:	ac22      	add	r4, sp, #136	; 0x88
  shake256_squeeze(mu, CRHBYTES, &state);
 8000366:	aa6a      	add	r2, sp, #424	; 0x1a8
 8000368:	a816      	add	r0, sp, #88	; 0x58
 800036a:	2130      	movs	r1, #48	; 0x30
 800036c:	f001 f946 	bl	80015fc <pqcrystals_fips202_ref_shake256_squeeze>
      in[i + (SEEDBYTES+CRHBYTES)*j] = masked_key[i + (SEEDBYTES)*j]; 
 8000370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000372:	ad9e      	add	r5, sp, #632	; 0x278
 8000374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800037a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800037e:	ad2a      	add	r5, sp, #168	; 0xa8
 8000380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000382:	acb2      	add	r4, sp, #712	; 0x2c8
 8000384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000386:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800038a:	ad32      	add	r5, sp, #200	; 0xc8
 800038c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000392:	acc6      	add	r4, sp, #792	; 0x318
 8000394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000396:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800039a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }
  }

  for(int i=SEEDBYTES; i < SEEDBYTES+CRHBYTES; ++i){
    in[i] = mu[i-SEEDBYTES];
 800039e:	ac16      	add	r4, sp, #88	; 0x58
 80003a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a2:	ada6      	add	r5, sp, #664	; 0x298
 80003a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003ae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for(int j=1; j < N_SHARES; ++j){
      in[i + (SEEDBYTES+CRHBYTES)*j] = 0; 
 80003b2:	2230      	movs	r2, #48	; 0x30
 80003b4:	2100      	movs	r1, #0
 80003b6:	a8ba      	add	r0, sp, #744	; 0x2e8
 80003b8:	f003 fcb4 	bl	8003d24 <memset>
 80003bc:	2230      	movs	r2, #48	; 0x30
 80003be:	2100      	movs	r1, #0
 80003c0:	a8ce      	add	r0, sp, #824	; 0x338
 80003c2:	f003 fcaf 	bl	8003d24 <memset>
    }
  }
  trigger_high();
 80003c6:	f002 ffe7 	bl	8003398 <trigger_high>
  shake256_masked(seed_y, 64, in, SEEDBYTES+CRHBYTES);
 80003ca:	2350      	movs	r3, #80	; 0x50
 80003cc:	aa9e      	add	r2, sp, #632	; 0x278
 80003ce:	2140      	movs	r1, #64	; 0x40
 80003d0:	a83a      	add	r0, sp, #232	; 0xe8
 80003d2:	f002 fe1a 	bl	800300a <shake256_masked>
  trigger_low();
 80003d6:	f002 ffe7 	bl	80033a8 <trigger_low>
  for(int ii=0; ii < 180;ii++)
	  p[ii] = 0;
  
  //輸出結果放入p數組中
  for(int ii=0; ii < 180 ;ii++)
	  p[ii] = seed_y[ii];
 80003da:	a93a      	add	r1, sp, #232	; 0xe8
 80003dc:	22b4      	movs	r2, #180	; 0xb4
 80003de:	4630      	mov	r0, r6
 80003e0:	f7ff fef2 	bl	80001c8 <memcpy>
	for(int ii=0; ii < 48 ;ii++)
	  p[35+ii] = tr[ii];
  
    for(int ii=0; ii < 96 ;ii++)
	  p[83+ii] = masked_key[ii]; */
  simpleserial_put('r', 180, p);
 80003e4:	4632      	mov	r2, r6
 80003e6:	21b4      	movs	r1, #180	; 0xb4
 80003e8:	2072      	movs	r0, #114	; 0x72
 80003ea:	f002 fe8f 	bl	800310c <simpleserial_put>
   return 0x00;
}
 80003ee:	2000      	movs	r0, #0
 80003f0:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	0000      	movs	r0, r0

080003f8 <main>:



int main(void){
 80003f8:	b508      	push	{r3, lr}

    platform_init();
 80003fa:	f002 ff27 	bl	800324c <platform_init>
    init_uart();
 80003fe:	f002 ff6d 	bl	80032dc <init_uart>

    trigger_setup();
 8000402:	f002 ffa9 	bl	8003358 <trigger_setup>
    
    /* Device reset detected */
    putch('r');
 8000406:	2072      	movs	r0, #114	; 0x72
 8000408:	f002 ffe8 	bl	80033dc <putch>
    putch('R');
 800040c:	2052      	movs	r0, #82	; 0x52
 800040e:	f002 ffe5 	bl	80033dc <putch>
    putch('E');
 8000412:	2045      	movs	r0, #69	; 0x45
 8000414:	f002 ffe2 	bl	80033dc <putch>
    putch('S');
 8000418:	2053      	movs	r0, #83	; 0x53
 800041a:	f002 ffdf 	bl	80033dc <putch>
    putch('E');
 800041e:	2045      	movs	r0, #69	; 0x45
 8000420:	f002 ffdc 	bl	80033dc <putch>
    putch('T');
 8000424:	2054      	movs	r0, #84	; 0x54
 8000426:	f002 ffd9 	bl	80033dc <putch>
    putch(' ');
 800042a:	2020      	movs	r0, #32
 800042c:	f002 ffd6 	bl	80033dc <putch>
    putch(' ');
 8000430:	2020      	movs	r0, #32
 8000432:	f002 ffd3 	bl	80033dc <putch>
    putch(' ');
 8000436:	2020      	movs	r0, #32
 8000438:	f002 ffd0 	bl	80033dc <putch>
    putch('\n');
 800043c:	200a      	movs	r0, #10
 800043e:	f002 ffcd 	bl	80033dc <putch>
    
    simpleserial_init();
 8000442:	f002 fe46 	bl	80030d2 <simpleserial_init>
	
	simpleserial_addcmd('3', 183, mask_hash);
 8000446:	4a04      	ldr	r2, [pc, #16]	; (8000458 <main+0x60>)
 8000448:	21b7      	movs	r1, #183	; 0xb7
 800044a:	2033      	movs	r0, #51	; 0x33
 800044c:	f002 fe42 	bl	80030d4 <simpleserial_addcmd>
	
	while(1)
        simpleserial_get();
 8000450:	f002 fe8a 	bl	8003168 <simpleserial_get>
	while(1)
 8000454:	e7fc      	b.n	8000450 <main+0x58>
 8000456:	bf00      	nop
 8000458:	080002fd 	.word	0x080002fd

0800045c <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800045c:	2300      	movs	r3, #0
 800045e:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;
  uint64_t r = 0;
 8000460:	4619      	mov	r1, r3
 8000462:	1e45      	subs	r5, r0, #1
 8000464:	4618      	mov	r0, r3

  for(i=0;i<8;i++)
    r |= (uint64_t)x[i] << 8*i;
 8000466:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800046a:	f1a3 0220 	sub.w	r2, r3, #32
 800046e:	f1c3 0620 	rsb	r6, r3, #32
 8000472:	fa04 f202 	lsl.w	r2, r4, r2
 8000476:	fa24 f606 	lsr.w	r6, r4, r6
 800047a:	409c      	lsls	r4, r3
  for(i=0;i<8;i++)
 800047c:	3308      	adds	r3, #8
    r |= (uint64_t)x[i] << 8*i;
 800047e:	4332      	orrs	r2, r6
  for(i=0;i<8;i++)
 8000480:	2b40      	cmp	r3, #64	; 0x40
    r |= (uint64_t)x[i] << 8*i;
 8000482:	ea40 0004 	orr.w	r0, r0, r4
 8000486:	ea41 0102 	orr.w	r1, r1, r2
  for(i=0;i<8;i++)
 800048a:	d1ec      	bne.n	8000466 <load64+0xa>

  return r;
}
 800048c:	bd70      	pop	{r4, r5, r6, pc}

0800048e <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800048e:	b570      	push	{r4, r5, r6, lr}
 8000490:	3801      	subs	r0, #1
 8000492:	2100      	movs	r1, #0
  unsigned int i;

  for(i=0;i<8;i++)
    x[i] = u >> 8*i;
 8000494:	f1c1 0620 	rsb	r6, r1, #32
 8000498:	f1a1 0520 	sub.w	r5, r1, #32
 800049c:	fa22 f401 	lsr.w	r4, r2, r1
 80004a0:	fa03 f606 	lsl.w	r6, r3, r6
 80004a4:	4334      	orrs	r4, r6
 80004a6:	fa23 f505 	lsr.w	r5, r3, r5
  for(i=0;i<8;i++)
 80004aa:	3108      	adds	r1, #8
    x[i] = u >> 8*i;
 80004ac:	432c      	orrs	r4, r5
  for(i=0;i<8;i++)
 80004ae:	2940      	cmp	r1, #64	; 0x40
    x[i] = u >> 8*i;
 80004b0:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i=0;i<8;i++)
 80004b4:	d1ee      	bne.n	8000494 <store64+0x6>
}
 80004b6:	bd70      	pop	{r4, r5, r6, pc}

080004b8 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 80004b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004bc:	b0bf      	sub	sp, #252	; 0xfc
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 80004be:	6803      	ldr	r3, [r0, #0]
 80004c0:	930c      	str	r3, [sp, #48]	; 0x30
 80004c2:	6843      	ldr	r3, [r0, #4]
 80004c4:	930d      	str	r3, [sp, #52]	; 0x34
        Abe = state[ 1];
 80004c6:	6883      	ldr	r3, [r0, #8]
 80004c8:	930e      	str	r3, [sp, #56]	; 0x38
 80004ca:	68c3      	ldr	r3, [r0, #12]
 80004cc:	930f      	str	r3, [sp, #60]	; 0x3c
        Abi = state[ 2];
 80004ce:	6903      	ldr	r3, [r0, #16]
 80004d0:	9310      	str	r3, [sp, #64]	; 0x40
 80004d2:	6943      	ldr	r3, [r0, #20]
 80004d4:	9311      	str	r3, [sp, #68]	; 0x44
        Abo = state[ 3];
 80004d6:	6983      	ldr	r3, [r0, #24]
 80004d8:	9312      	str	r3, [sp, #72]	; 0x48
 80004da:	69c3      	ldr	r3, [r0, #28]
 80004dc:	9313      	str	r3, [sp, #76]	; 0x4c
        Abu = state[ 4];
 80004de:	6a03      	ldr	r3, [r0, #32]
 80004e0:	9314      	str	r3, [sp, #80]	; 0x50
 80004e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80004e4:	9315      	str	r3, [sp, #84]	; 0x54
        Aga = state[ 5];
 80004e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004e8:	9316      	str	r3, [sp, #88]	; 0x58
 80004ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80004ec:	9317      	str	r3, [sp, #92]	; 0x5c
        Age = state[ 6];
 80004ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004f0:	9318      	str	r3, [sp, #96]	; 0x60
 80004f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80004f4:	9319      	str	r3, [sp, #100]	; 0x64
        Agi = state[ 7];
 80004f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80004f8:	931a      	str	r3, [sp, #104]	; 0x68
 80004fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80004fc:	931b      	str	r3, [sp, #108]	; 0x6c
        Ago = state[ 8];
 80004fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000500:	931c      	str	r3, [sp, #112]	; 0x70
 8000502:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000504:	931d      	str	r3, [sp, #116]	; 0x74
        Agu = state[ 9];
 8000506:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000508:	931e      	str	r3, [sp, #120]	; 0x78
 800050a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800050c:	931f      	str	r3, [sp, #124]	; 0x7c
        Aka = state[10];
 800050e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000510:	9320      	str	r3, [sp, #128]	; 0x80
 8000512:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000514:	9321      	str	r3, [sp, #132]	; 0x84
        Ake = state[11];
 8000516:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000518:	9322      	str	r3, [sp, #136]	; 0x88
 800051a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800051c:	9323      	str	r3, [sp, #140]	; 0x8c
        Aki = state[12];
 800051e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000520:	9324      	str	r3, [sp, #144]	; 0x90
 8000522:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8000524:	9325      	str	r3, [sp, #148]	; 0x94
        Ako = state[13];
 8000526:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000528:	9326      	str	r3, [sp, #152]	; 0x98
 800052a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800052c:	9327      	str	r3, [sp, #156]	; 0x9c
        Aku = state[14];
 800052e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000530:	9328      	str	r3, [sp, #160]	; 0xa0
 8000532:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8000534:	9329      	str	r3, [sp, #164]	; 0xa4
        Ama = state[15];
 8000536:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8000538:	932a      	str	r3, [sp, #168]	; 0xa8
 800053a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800053c:	932b      	str	r3, [sp, #172]	; 0xac
        Ame = state[16];
 800053e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8000542:	932c      	str	r3, [sp, #176]	; 0xb0
 8000544:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8000548:	932d      	str	r3, [sp, #180]	; 0xb4
        Ami = state[17];
 800054a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800054e:	932e      	str	r3, [sp, #184]	; 0xb8
 8000550:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8000554:	932f      	str	r3, [sp, #188]	; 0xbc
        Amo = state[18];
 8000556:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800055a:	9330      	str	r3, [sp, #192]	; 0xc0
 800055c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8000560:	9331      	str	r3, [sp, #196]	; 0xc4
        Amu = state[19];
 8000562:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8000566:	9332      	str	r3, [sp, #200]	; 0xc8
 8000568:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800056c:	9333      	str	r3, [sp, #204]	; 0xcc
        Asa = state[20];
 800056e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8000572:	930b      	str	r3, [sp, #44]	; 0x2c
 8000574:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8000578:	9334      	str	r3, [sp, #208]	; 0xd0
        Ase = state[21];
 800057a:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 800057e:	9335      	str	r3, [sp, #212]	; 0xd4
 8000580:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8000584:	9336      	str	r3, [sp, #216]	; 0xd8
        Asi = state[22];
 8000586:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800058a:	9337      	str	r3, [sp, #220]	; 0xdc
 800058c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8000590:	9338      	str	r3, [sp, #224]	; 0xe0
        Aso = state[23];
 8000592:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8000596:	9339      	str	r3, [sp, #228]	; 0xe4
 8000598:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 800059c:	933a      	str	r3, [sp, #232]	; 0xe8
        Asu = state[24];
 800059e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80005a2:	933b      	str	r3, [sp, #236]	; 0xec
 80005a4:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4

        for( round = 0; round < NROUNDS; round += 2 )
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <KeccakF1600_StatePermute+0xf8>)
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	e002      	b.n	80005b4 <KeccakF1600_StatePermute+0xfc>
 80005ae:	bf00      	nop
 80005b0:	08003ef8 	.word	0x08003ef8
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 80005b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80005b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80005ba:	4053      	eors	r3, r2
 80005bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80005be:	ea82 0501 	eor.w	r5, r2, r1
 80005c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80005c4:	4053      	eors	r3, r2
 80005c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80005c8:	4055      	eors	r5, r2
 80005ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80005cc:	4053      	eors	r3, r2
 80005ce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80005d0:	4055      	eors	r5, r2
 80005d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80005d4:	4053      	eors	r3, r2
 80005d6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80005d8:	9309      	str	r3, [sp, #36]	; 0x24
 80005da:	4055      	eors	r5, r2
            BCe = Abe^Age^Ake^Ame^Ase;
 80005dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80005de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80005e0:	ea83 0902 	eor.w	r9, r3, r2
 80005e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80005e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80005e8:	ea83 0802 	eor.w	r8, r3, r2
 80005ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = Abi^Agi^Aki^Ami^Asi;
 80005ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            BCe = Abe^Age^Ake^Ame^Ase;
 80005f0:	ea89 0903 	eor.w	r9, r9, r3
 80005f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80005f6:	ea88 0803 	eor.w	r8, r8, r3
 80005fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80005fc:	ea89 0903 	eor.w	r9, r9, r3
 8000600:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8000602:	ea88 0803 	eor.w	r8, r8, r3
 8000606:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8000608:	ea89 0903 	eor.w	r9, r9, r3
 800060c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800060e:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000614:	ea83 0c02 	eor.w	ip, r3, r2
 8000618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800061a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800061c:	ea83 0702 	eor.w	r7, r3, r2
 8000620:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000622:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8000624:	ea8c 0c03 	eor.w	ip, ip, r3
 8000628:	4057      	eors	r7, r2
 800062a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800062c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800062e:	ea8c 0c03 	eor.w	ip, ip, r3
 8000632:	4057      	eors	r7, r2
 8000634:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000636:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8000638:	ea8c 0c03 	eor.w	ip, ip, r3
 800063c:	4057      	eors	r7, r2
            BCo = Abo^Ago^Ako^Amo^Aso;
 800063e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000640:	9a1c      	ldr	r2, [sp, #112]	; 0x70
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000642:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000646:	ea83 0402 	eor.w	r4, r3, r2
 800064a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800064c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800064e:	ea83 0102 	eor.w	r1, r3, r2
 8000652:	9a26      	ldr	r2, [sp, #152]	; 0x98
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000654:	9b14      	ldr	r3, [sp, #80]	; 0x50
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000656:	4054      	eors	r4, r2
 8000658:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800065a:	4051      	eors	r1, r2
 800065c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800065e:	4054      	eors	r4, r2
 8000660:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8000662:	4051      	eors	r1, r2
 8000664:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8000666:	4054      	eors	r4, r2
 8000668:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800066a:	4051      	eors	r1, r2
            BCu = Abu^Agu^Aku^Amu^Asu;
 800066c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800066e:	405a      	eors	r2, r3
 8000670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000672:	ea83 0e0e 	eor.w	lr, r3, lr
 8000676:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8000678:	405a      	eors	r2, r3
 800067a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800067c:	ea8e 0e03 	eor.w	lr, lr, r3
 8000680:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8000682:	405a      	eors	r2, r3
 8000684:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8000686:	ea8e 0e03 	eor.w	lr, lr, r3
 800068a:	9b3b      	ldr	r3, [sp, #236]	; 0xec

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 800068c:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000690:	405a      	eors	r2, r3
            Da = BCu^ROL(BCe, 1);
 8000692:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8000696:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 800069a:	ea8e 0e06 	eor.w	lr, lr, r6
            Da = BCu^ROL(BCe, 1);
 800069e:	ea8b 0302 	eor.w	r3, fp, r2
 80006a2:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	ea8a 030e 	eor.w	r3, sl, lr
 80006ac:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 80006ae:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 80006b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80006b4:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
 80006b8:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80006bc:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 80006c0:	ea8b 0303 	eor.w	r3, fp, r3
 80006c4:	9304      	str	r3, [sp, #16]
 80006c6:	ea8a 0305 	eor.w	r3, sl, r5
            Di = BCe^ROL(BCo, 1);
 80006ca:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 80006ce:	ea4a 7ad4 	orr.w	sl, sl, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 80006d2:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 80006d4:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 80006d8:	ea4f 084e 	mov.w	r8, lr, lsl #1
 80006dc:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 80006e0:	0052      	lsls	r2, r2, #1
 80006e2:	ea42 72de 	orr.w	r2, r2, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 80006e6:	9306      	str	r3, [sp, #24]
            Do = BCi^ROL(BCu, 1);
 80006e8:	ea82 030c 	eor.w	r3, r2, ip
 80006ec:	9307      	str	r3, [sp, #28]
 80006ee:	ea88 0307 	eor.w	r3, r8, r7
 80006f2:	9308      	str	r3, [sp, #32]
            Du = BCo^ROL(BCa, 1);
 80006f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80006f6:	006a      	lsls	r2, r5, #1
 80006f8:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
 8000702:	4063      	eors	r3, r4
 8000704:	9309      	str	r3, [sp, #36]	; 0x24
 8000706:	ea82 0301 	eor.w	r3, r2, r1
            Di = BCe^ROL(BCo, 1);
 800070a:	ea4f 0b44 	mov.w	fp, r4, lsl #1

            Aba ^= Da;
 800070e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            Du = BCo^ROL(BCa, 1);
 8000710:	930a      	str	r3, [sp, #40]	; 0x28
            Aba ^= Da;
 8000712:	9b02      	ldr	r3, [sp, #8]
            Di = BCe^ROL(BCo, 1);
 8000714:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 8000718:	ea8b 0b09 	eor.w	fp, fp, r9
            Aba ^= Da;
 800071c:	ea83 0902 	eor.w	r9, r3, r2
 8000720:	9b03      	ldr	r3, [sp, #12]
 8000722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
 8000724:	9906      	ldr	r1, [sp, #24]
 8000726:	9c25      	ldr	r4, [sp, #148]	; 0x94
            BCi = ROL(Aki, 43);
            Amo ^= Do;
 8000728:	9f31      	ldr	r7, [sp, #196]	; 0xc4
            Aba ^= Da;
 800072a:	ea83 0a02 	eor.w	sl, r3, r2
            Age ^= De;
 800072e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000730:	9b04      	ldr	r3, [sp, #16]
 8000732:	ea83 0e02 	eor.w	lr, r3, r2
 8000736:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000738:	9b05      	ldr	r3, [sp, #20]
 800073a:	ea83 0c02 	eor.w	ip, r3, r2
            Aki ^= Di;
 800073e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000740:	ea8b 0202 	eor.w	r2, fp, r2
 8000744:	404c      	eors	r4, r1
            BCi = ROL(Aki, 43);
 8000746:	ea4f 5852 	mov.w	r8, r2, lsr #21
 800074a:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 800074e:	0d64      	lsrs	r4, r4, #21
 8000750:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
            Amo ^= Do;
 8000754:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8000756:	9a07      	ldr	r2, [sp, #28]
 8000758:	4051      	eors	r1, r2
 800075a:	9a08      	ldr	r2, [sp, #32]
            BCe = ROL(Age, 44);
 800075c:	ea4f 551e 	mov.w	r5, lr, lsr #20
 8000760:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
            Amo ^= Do;
 8000764:	407a      	eors	r2, r7
            BCe = ROL(Age, 44);
 8000766:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 800076a:	ea4c 330e 	orr.w	r3, ip, lr, lsl #12
            BCo = ROL(Amo, 21);
 800076e:	ea4f 5e42 	mov.w	lr, r2, lsl #21
 8000772:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 8000776:	0549      	lsls	r1, r1, #21
 8000778:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
            Asu ^= Du;
 800077c:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 800077e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000780:	4057      	eors	r7, r2
 8000782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000784:	4056      	eors	r6, r2
            BCu = ROL(Asu, 14);
 8000786:	03ba      	lsls	r2, r7, #14
 8000788:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 800078c:	ea4f 3c86 	mov.w	ip, r6, lsl #14
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000790:	9e01      	ldr	r6, [sp, #4]
            BCu = ROL(Asu, 14);
 8000792:	ea4c 4c97 	orr.w	ip, ip, r7, lsr #18
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000796:	e9d6 7600 	ldrd	r7, r6, [r6]
 800079a:	ea8a 0606 	eor.w	r6, sl, r6
 800079e:	960d      	str	r6, [sp, #52]	; 0x34
 80007a0:	ea89 0707 	eor.w	r7, r9, r7
 80007a4:	ea28 0605 	bic.w	r6, r8, r5
 80007a8:	407e      	eors	r6, r7
 80007aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80007ac:	960c      	str	r6, [sp, #48]	; 0x30
 80007ae:	ea24 0603 	bic.w	r6, r4, r3
 80007b2:	4077      	eors	r7, r6
            Ebe =   BCe ^((~BCi)&  BCo );
 80007b4:	ea2e 0604 	bic.w	r6, lr, r4
 80007b8:	405e      	eors	r6, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80007ba:	970d      	str	r7, [sp, #52]	; 0x34
            Ebe =   BCe ^((~BCi)&  BCo );
 80007bc:	ea21 0708 	bic.w	r7, r1, r8
 80007c0:	406f      	eors	r7, r5
 80007c2:	9625      	str	r6, [sp, #148]	; 0x94
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );
 80007c4:	ea25 0509 	bic.w	r5, r5, r9
            Ebi =   BCi ^((~BCo)&  BCu );
 80007c8:	ea2c 060e 	bic.w	r6, ip, lr
            Ebu =   BCu ^((~BCa)&  BCe );
 80007cc:	ea23 030a 	bic.w	r3, r3, sl
            Ebi =   BCi ^((~BCo)&  BCu );
 80007d0:	4074      	eors	r4, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 80007d2:	ea83 030c 	eor.w	r3, r3, ip
            Ebo =   BCo ^((~BCu)&  BCa );
 80007d6:	ea29 0602 	bic.w	r6, r9, r2
            Ebe =   BCe ^((~BCi)&  BCo );
 80007da:	9724      	str	r7, [sp, #144]	; 0x90
            Ebi =   BCi ^((~BCo)&  BCu );
 80007dc:	ea22 0701 	bic.w	r7, r2, r1
            Ebu =   BCu ^((~BCa)&  BCe );
 80007e0:	406a      	eors	r2, r5
            Ebo =   BCo ^((~BCu)&  BCa );
 80007e2:	4071      	eors	r1, r6
            Ebi =   BCi ^((~BCo)&  BCu );
 80007e4:	943c      	str	r4, [sp, #240]	; 0xf0
            Ebu =   BCu ^((~BCa)&  BCe );
 80007e6:	9230      	str	r2, [sp, #192]	; 0xc0
            Ebo =   BCo ^((~BCu)&  BCa );
 80007e8:	ea2a 040c 	bic.w	r4, sl, ip

            Abo ^= Do;
 80007ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
            Ebu =   BCu ^((~BCa)&  BCe );
 80007ee:	9331      	str	r3, [sp, #196]	; 0xc4
            Abo ^= Do;
 80007f0:	9b07      	ldr	r3, [sp, #28]
            Ebo =   BCo ^((~BCu)&  BCa );
 80007f2:	9118      	str	r1, [sp, #96]	; 0x60
            Ebi =   BCi ^((~BCo)&  BCu );
 80007f4:	ea87 0708 	eor.w	r7, r7, r8
            Ebo =   BCo ^((~BCu)&  BCa );
 80007f8:	ea84 010e 	eor.w	r1, r4, lr
            Abo ^= Do;
 80007fc:	405a      	eors	r2, r3
            Ebi =   BCi ^((~BCo)&  BCu );
 80007fe:	973b      	str	r7, [sp, #236]	; 0xec
            Ebo =   BCo ^((~BCu)&  BCa );
 8000800:	9119      	str	r1, [sp, #100]	; 0x64
            Abo ^= Do;
 8000802:	9b08      	ldr	r3, [sp, #32]
 8000804:	9913      	ldr	r1, [sp, #76]	; 0x4c
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
            Aka ^= Da;
 8000806:	9c21      	ldr	r4, [sp, #132]	; 0x84
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
 8000808:	9f38      	ldr	r7, [sp, #224]	; 0xe0
            Abo ^= Do;
 800080a:	4059      	eors	r1, r3
            BCa = ROL(Abo, 28);
 800080c:	ea4f 7c01 	mov.w	ip, r1, lsl #28
 8000810:	ea4c 1c12 	orr.w	ip, ip, r2, lsr #4
 8000814:	0712      	lsls	r2, r2, #28
 8000816:	ea42 1e11 	orr.w	lr, r2, r1, lsr #4
            Agu ^= Du;
 800081a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800081c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
            Aka ^= Da;
 800081e:	9920      	ldr	r1, [sp, #128]	; 0x80
            Agu ^= Du;
 8000820:	ea83 0802 	eor.w	r8, r3, r2
 8000824:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8000826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000828:	ea83 0602 	eor.w	r6, r3, r2
            Aka ^= Da;
 800082c:	9a02      	ldr	r2, [sp, #8]
 800082e:	404a      	eors	r2, r1
 8000830:	9903      	ldr	r1, [sp, #12]
 8000832:	404c      	eors	r4, r1
            BCi = ROL(Aka,  3);
 8000834:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8000838:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	ea42 7454 	orr.w	r4, r2, r4, lsr #29
            Ame ^= De;
 8000842:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8000844:	9a04      	ldr	r2, [sp, #16]
            BCe = ROL(Agu, 20);
 8000846:	0535      	lsls	r5, r6, #20
 8000848:	ea45 3518 	orr.w	r5, r5, r8, lsr #12
 800084c:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8000850:	ea48 3316 	orr.w	r3, r8, r6, lsr #12
            Ame ^= De;
 8000854:	4051      	eors	r1, r2
 8000856:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8000858:	9a05      	ldr	r2, [sp, #20]
            BCo = ROL(Ame, 45);
 800085a:	ea4f 48d1 	mov.w	r8, r1, lsr #19
            Ame ^= De;
 800085e:	4072      	eors	r2, r6
            BCo = ROL(Ame, 45);
 8000860:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8000864:	0cd2      	lsrs	r2, r2, #19
 8000866:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
            Asi ^= Di;
 800086a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800086c:	ea8b 0601 	eor.w	r6, fp, r1
 8000870:	9906      	ldr	r1, [sp, #24]
 8000872:	4079      	eors	r1, r7
            BCu = ROL(Asi, 61);
 8000874:	08f7      	lsrs	r7, r6, #3
 8000876:	ea47 7741 	orr.w	r7, r7, r1, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 800087a:	ea24 0a03 	bic.w	sl, r4, r3
            BCu = ROL(Asi, 61);
 800087e:	08c9      	lsrs	r1, r1, #3
 8000880:	ea41 7146 	orr.w	r1, r1, r6, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 8000884:	ea8a 0a0e 	eor.w	sl, sl, lr
 8000888:	ea29 0605 	bic.w	r6, r9, r5
 800088c:	ea86 060c 	eor.w	r6, r6, ip
 8000890:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
            Ege =   BCe ^((~BCi)&  BCo );
 8000894:	ea28 0a04 	bic.w	sl, r8, r4
 8000898:	ea8a 0a03 	eor.w	sl, sl, r3
            Ega =   BCa ^((~BCe)&  BCi );
 800089c:	962d      	str	r6, [sp, #180]	; 0xb4
            Ege =   BCe ^((~BCi)&  BCo );
 800089e:	ea22 0609 	bic.w	r6, r2, r9
 80008a2:	406e      	eors	r6, r5
 80008a4:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
            Egi =   BCi ^((~BCo)&  BCu );
 80008a8:	ea27 0a08 	bic.w	sl, r7, r8
 80008ac:	ea8a 0404 	eor.w	r4, sl, r4
            Ege =   BCe ^((~BCi)&  BCo );
 80008b0:	9613      	str	r6, [sp, #76]	; 0x4c
            Egi =   BCi ^((~BCo)&  BCu );
 80008b2:	ea21 0602 	bic.w	r6, r1, r2
 80008b6:	9420      	str	r4, [sp, #128]	; 0x80
 80008b8:	ea86 0409 	eor.w	r4, r6, r9
            Ego =   BCo ^((~BCu)&  BCa );
 80008bc:	ea2e 0607 	bic.w	r6, lr, r7
            Egu =   BCu ^((~BCa)&  BCe );
 80008c0:	ea23 0e0e 	bic.w	lr, r3, lr
 80008c4:	ea8e 0307 	eor.w	r3, lr, r7
 80008c8:	ea25 050c 	bic.w	r5, r5, ip
            Egi =   BCi ^((~BCo)&  BCu );
 80008cc:	9421      	str	r4, [sp, #132]	; 0x84
            Ego =   BCo ^((~BCu)&  BCa );
 80008ce:	ea2c 0401 	bic.w	r4, ip, r1
 80008d2:	4062      	eors	r2, r4
            Egu =   BCu ^((~BCa)&  BCe );
 80008d4:	931e      	str	r3, [sp, #120]	; 0x78
 80008d6:	ea85 0301 	eor.w	r3, r5, r1
            Ego =   BCo ^((~BCu)&  BCa );
 80008da:	9238      	str	r2, [sp, #224]	; 0xe0
            Egu =   BCu ^((~BCa)&  BCe );
 80008dc:	931f      	str	r3, [sp, #124]	; 0x7c

            Abe ^= De;
 80008de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80008e0:	9b04      	ldr	r3, [sp, #16]
 80008e2:	ea83 0902 	eor.w	r9, r3, r2
 80008e6:	9b05      	ldr	r3, [sp, #20]
 80008e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80008ea:	ea83 0502 	eor.w	r5, r3, r2
            BCa = ROL(Abe,  1);
            Agi ^= Di;
 80008ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
            Ego =   BCo ^((~BCu)&  BCa );
 80008f0:	ea86 0608 	eor.w	r6, r6, r8
            Agi ^= Di;
 80008f4:	ea8b 0203 	eor.w	r2, fp, r3
            Ego =   BCo ^((~BCu)&  BCa );
 80008f8:	9637      	str	r6, [sp, #220]	; 0xdc
            Agi ^= Di;
 80008fa:	9b06      	ldr	r3, [sp, #24]
 80008fc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80008fe:	ea83 0701 	eor.w	r7, r3, r1
            BCe = ROL(Agi,  6);
 8000902:	01be      	lsls	r6, r7, #6
 8000904:	ea46 6692 	orr.w	r6, r6, r2, lsr #26
 8000908:	0192      	lsls	r2, r2, #6
 800090a:	ea42 6397 	orr.w	r3, r2, r7, lsr #26
            Ako ^= Do;
 800090e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000910:	9a07      	ldr	r2, [sp, #28]
 8000912:	ea82 0701 	eor.w	r7, r2, r1
 8000916:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8000918:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Abe,  1);
 800091a:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 800091e:	ea4c 7cd9 	orr.w	ip, ip, r9, lsr #31
            Ako ^= Do;
 8000922:	404a      	eors	r2, r1
            BCa = ROL(Abe,  1);
 8000924:	ea4f 0949 	mov.w	r9, r9, lsl #1
            BCi = ROL(Ako, 25);
 8000928:	0679      	lsls	r1, r7, #25
            BCa = ROL(Abe,  1);
 800092a:	ea49 74d5 	orr.w	r4, r9, r5, lsr #31
            BCi = ROL(Ako, 25);
 800092e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
            Amu ^= Du;
 8000932:	9d32      	ldr	r5, [sp, #200]	; 0xc8
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 8000934:	f8dd 90d0 	ldr.w	r9, [sp, #208]	; 0xd0
            BCi = ROL(Ako, 25);
 8000938:	ea4f 6842 	mov.w	r8, r2, lsl #25
            Amu ^= Du;
 800093c:	9a09      	ldr	r2, [sp, #36]	; 0x24
            BCi = ROL(Ako, 25);
 800093e:	ea48 18d7 	orr.w	r8, r8, r7, lsr #7
            Amu ^= Du;
 8000942:	4055      	eors	r5, r2
 8000944:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 8000946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000948:	407a      	eors	r2, r7
            BCo = ROL(Amu,  8);
 800094a:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 800094e:	ea4e 6e15 	orr.w	lr, lr, r5, lsr #24
 8000952:	022d      	lsls	r5, r5, #8
 8000954:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
            Asa ^= Da;
 8000958:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800095a:	9a02      	ldr	r2, [sp, #8]
 800095c:	407a      	eors	r2, r7
 800095e:	9f03      	ldr	r7, [sp, #12]
 8000960:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Asa, 18);
 8000964:	ea4f 4789 	mov.w	r7, r9, lsl #18
 8000968:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 800096c:	ea21 0a03 	bic.w	sl, r1, r3
            BCu = ROL(Asa, 18);
 8000970:	0492      	lsls	r2, r2, #18
 8000972:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 8000976:	ea8a 0a04 	eor.w	sl, sl, r4
 800097a:	ea28 0906 	bic.w	r9, r8, r6
 800097e:	ea89 090c 	eor.w	r9, r9, ip
 8000982:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
            Eke =   BCe ^((~BCi)&  BCo );
 8000986:	ea25 0a01 	bic.w	sl, r5, r1
 800098a:	ea8a 0a03 	eor.w	sl, sl, r3
            Eka =   BCa ^((~BCe)&  BCi );
 800098e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
 8000992:	ea23 0304 	bic.w	r3, r3, r4
            Eke =   BCe ^((~BCi)&  BCo );
 8000996:	ea2e 0908 	bic.w	r9, lr, r8
 800099a:	ea89 0906 	eor.w	r9, r9, r6
            Eku =   BCu ^((~BCa)&  BCe );
 800099e:	4053      	eors	r3, r2
 80009a0:	ea26 060c 	bic.w	r6, r6, ip
            Eke =   BCe ^((~BCi)&  BCo );
 80009a4:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
            Eki =   BCi ^((~BCo)&  BCu );
 80009a8:	ea22 0a05 	bic.w	sl, r2, r5
 80009ac:	ea8a 0101 	eor.w	r1, sl, r1
            Eke =   BCe ^((~BCi)&  BCo );
 80009b0:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
            Eku =   BCu ^((~BCa)&  BCe );
 80009b4:	9334      	str	r3, [sp, #208]	; 0xd0
            Eki =   BCi ^((~BCo)&  BCu );
 80009b6:	ea27 090e 	bic.w	r9, r7, lr
            Eku =   BCu ^((~BCa)&  BCe );
 80009ba:	ea86 0307 	eor.w	r3, r6, r7
            Eki =   BCi ^((~BCo)&  BCu );
 80009be:	910e      	str	r1, [sp, #56]	; 0x38
            Eku =   BCu ^((~BCa)&  BCe );
 80009c0:	933d      	str	r3, [sp, #244]	; 0xf4
            Eki =   BCi ^((~BCo)&  BCu );
 80009c2:	ea89 0108 	eor.w	r1, r9, r8

            Abu ^= Du;
 80009c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
            Eki =   BCi ^((~BCo)&  BCu );
 80009c8:	910f      	str	r1, [sp, #60]	; 0x3c
            Eko =   BCo ^((~BCu)&  BCa );
 80009ca:	ea24 0802 	bic.w	r8, r4, r2
            Abu ^= Du;
 80009ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
            Eko =   BCo ^((~BCu)&  BCa );
 80009d0:	ea2c 0107 	bic.w	r1, ip, r7
            Abu ^= Du;
 80009d4:	ea83 0702 	eor.w	r7, r3, r2
 80009d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80009dc:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Abu, 27);
            Aga ^= Da;
 80009e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80009e2:	9b02      	ldr	r3, [sp, #8]
            Eko =   BCo ^((~BCu)&  BCa );
 80009e4:	ea81 010e 	eor.w	r1, r1, lr
            Aga ^= Da;
 80009e8:	4053      	eors	r3, r2
            Eko =   BCo ^((~BCu)&  BCa );
 80009ea:	9127      	str	r1, [sp, #156]	; 0x9c
            Aga ^= Da;
 80009ec:	9a03      	ldr	r2, [sp, #12]
 80009ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
            BCa = ROL(Abu, 27);
 80009f0:	ea4f 6ec6 	mov.w	lr, r6, lsl #27
 80009f4:	ea4e 1e57 	orr.w	lr, lr, r7, lsr #5
 80009f8:	06ff      	lsls	r7, r7, #27
 80009fa:	ea47 1c56 	orr.w	ip, r7, r6, lsr #5
            Aga ^= Da;
 80009fe:	4051      	eors	r1, r2
            BCe = ROL(Aga, 36);
 8000a00:	0f1e      	lsrs	r6, r3, #28
 8000a02:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 8000a06:	ea88 0505 	eor.w	r5, r8, r5
            BCe = ROL(Aga, 36);
 8000a0a:	0f09      	lsrs	r1, r1, #28
 8000a0c:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 8000a10:	9526      	str	r5, [sp, #152]	; 0x98
            Ake ^= De;
 8000a12:	9b04      	ldr	r3, [sp, #16]
 8000a14:	9a22      	ldr	r2, [sp, #136]	; 0x88
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
 8000a16:	9f39      	ldr	r7, [sp, #228]	; 0xe4
            Ake ^= De;
 8000a18:	ea83 0402 	eor.w	r4, r3, r2
 8000a1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000a1e:	9b05      	ldr	r3, [sp, #20]
 8000a20:	ea83 0502 	eor.w	r5, r3, r2
            BCi = ROL(Ake, 10);
 8000a24:	ea4f 2885 	mov.w	r8, r5, lsl #10
 8000a28:	ea48 5894 	orr.w	r8, r8, r4, lsr #22
 8000a2c:	02a4      	lsls	r4, r4, #10
 8000a2e:	ea44 5595 	orr.w	r5, r4, r5, lsr #22
            Ami ^= Di;
 8000a32:	9a06      	ldr	r2, [sp, #24]
 8000a34:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8000a36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8000a38:	4054      	eors	r4, r2
 8000a3a:	ea8b 0303 	eor.w	r3, fp, r3
            BCo = ROL(Ami, 15);
 8000a3e:	03e2      	lsls	r2, r4, #15
 8000a40:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8000a44:	03db      	lsls	r3, r3, #15
 8000a46:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
            Aso ^= Do;
 8000a4a:	9c07      	ldr	r4, [sp, #28]
 8000a4c:	ea84 0907 	eor.w	r9, r4, r7
 8000a50:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 8000a52:	9c08      	ldr	r4, [sp, #32]
 8000a54:	407c      	eors	r4, r7
            BCu = ROL(Aso, 56);
 8000a56:	ea4f 2719 	mov.w	r7, r9, lsr #8
 8000a5a:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8000a5e:	ea25 0a06 	bic.w	sl, r5, r6
            BCu = ROL(Aso, 56);
 8000a62:	0a24      	lsrs	r4, r4, #8
 8000a64:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8000a68:	ea8a 0a0c 	eor.w	sl, sl, ip
 8000a6c:	ea28 0901 	bic.w	r9, r8, r1
 8000a70:	ea89 090e 	eor.w	r9, r9, lr
 8000a74:	f8cd a0e4 	str.w	sl, [sp, #228]	; 0xe4
            Eme =   BCe ^((~BCi)&  BCo );
 8000a78:	ea23 0a05 	bic.w	sl, r3, r5
 8000a7c:	ea8a 0a06 	eor.w	sl, sl, r6
            Ema =   BCa ^((~BCe)&  BCi );
 8000a80:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
            Eme =   BCe ^((~BCi)&  BCo );
 8000a84:	ea22 0908 	bic.w	r9, r2, r8
 8000a88:	ea89 0901 	eor.w	r9, r9, r1
 8000a8c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
            Emi =   BCi ^((~BCo)&  BCu );
 8000a90:	ea27 0a03 	bic.w	sl, r7, r3
 8000a94:	ea8a 0505 	eor.w	r5, sl, r5
            Eme =   BCe ^((~BCi)&  BCo );
 8000a98:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
            Emi =   BCi ^((~BCo)&  BCu );
 8000a9c:	ea24 0902 	bic.w	r9, r4, r2
 8000aa0:	952e      	str	r5, [sp, #184]	; 0xb8
 8000aa2:	ea89 0508 	eor.w	r5, r9, r8
            Emo =   BCo ^((~BCu)&  BCa );
 8000aa6:	ea2c 0807 	bic.w	r8, ip, r7
 8000aaa:	ea88 0303 	eor.w	r3, r8, r3
            Emi =   BCi ^((~BCo)&  BCu );
 8000aae:	952f      	str	r5, [sp, #188]	; 0xbc
            Emo =   BCo ^((~BCu)&  BCa );
 8000ab0:	ea2e 0504 	bic.w	r5, lr, r4
            Emu =   BCu ^((~BCa)&  BCe );
 8000ab4:	ea26 0c0c 	bic.w	ip, r6, ip
            Emo =   BCo ^((~BCu)&  BCa );
 8000ab8:	9314      	str	r3, [sp, #80]	; 0x50
 8000aba:	ea85 0302 	eor.w	r3, r5, r2
            Emu =   BCu ^((~BCa)&  BCe );
 8000abe:	ea21 010e 	bic.w	r1, r1, lr
            Emo =   BCo ^((~BCu)&  BCa );
 8000ac2:	9315      	str	r3, [sp, #84]	; 0x54
            Emu =   BCu ^((~BCa)&  BCe );
 8000ac4:	ea8c 0307 	eor.w	r3, ip, r7
 8000ac8:	9322      	str	r3, [sp, #136]	; 0x88
 8000aca:	ea81 0304 	eor.w	r3, r1, r4
 8000ace:	9323      	str	r3, [sp, #140]	; 0x8c

            Abi ^= Di;
 8000ad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000ad2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000ad4:	ea8b 0903 	eor.w	r9, fp, r3
 8000ad8:	9b06      	ldr	r3, [sp, #24]
 8000ada:	ea83 0a02 	eor.w	sl, r3, r2
            BCa = ROL(Abi, 62);
            Ago ^= Do;
 8000ade:	9b07      	ldr	r3, [sp, #28]
 8000ae0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000ae2:	ea83 0c02 	eor.w	ip, r3, r2
 8000ae6:	9b08      	ldr	r3, [sp, #32]
 8000ae8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8000aea:	ea83 0702 	eor.w	r7, r3, r2
            BCe = ROL(Ago, 55);
            Aku ^= Du;
 8000aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000af0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8000af2:	ea83 0402 	eor.w	r4, r3, r2
 8000af6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8000af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000afa:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Aku, 39);
            Ama ^= Da;
 8000afe:	9b02      	ldr	r3, [sp, #8]
 8000b00:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            BCa = ROL(Abi, 62);
 8000b02:	ea4f 0699 	mov.w	r6, r9, lsr #2
            Ama ^= Da;
 8000b06:	ea83 0b02 	eor.w	fp, r3, r2
            BCe = ROL(Ago, 55);
 8000b0a:	ea4f 2e5c 	mov.w	lr, ip, lsr #9
            Ama ^= Da;
 8000b0e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8000b10:	9b03      	ldr	r3, [sp, #12]
            BCa = ROL(Abi, 62);
 8000b12:	ea46 768a 	orr.w	r6, r6, sl, lsl #30
            BCe = ROL(Ago, 55);
 8000b16:	ea4e 5ec7 	orr.w	lr, lr, r7, lsl #23
            BCa = ROL(Abi, 62);
 8000b1a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
            BCe = ROL(Ago, 55);
 8000b1e:	0a7f      	lsrs	r7, r7, #9
 8000b20:	ea47 55cc 	orr.w	r5, r7, ip, lsl #23
            BCa = ROL(Abi, 62);
 8000b24:	ea4a 7989 	orr.w	r9, sl, r9, lsl #30
            BCi = ROL(Aku, 39);
 8000b28:	ea4f 6c54 	mov.w	ip, r4, lsr #25
            Ama ^= Da;
 8000b2c:	ea83 0a02 	eor.w	sl, r3, r2
            BCo = ROL(Ama, 41);
            Ase ^= De;
 8000b30:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8000b32:	9b04      	ldr	r3, [sp, #16]
            BCi = ROL(Aku, 39);
 8000b34:	ea4c 1cc1 	orr.w	ip, ip, r1, lsl #7
            BCo = ROL(Ama, 41);
 8000b38:	ea4f 57da 	mov.w	r7, sl, lsr #23
            BCi = ROL(Aku, 39);
 8000b3c:	0e49      	lsrs	r1, r1, #25
 8000b3e:	ea41 18c4 	orr.w	r8, r1, r4, lsl #7
            BCo = ROL(Ama, 41);
 8000b42:	ea47 274b 	orr.w	r7, r7, fp, lsl #9
 8000b46:	ea4f 51db 	mov.w	r1, fp, lsr #23
            Ase ^= De;
 8000b4a:	ea83 0b02 	eor.w	fp, r3, r2
 8000b4e:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8000b50:	9b05      	ldr	r3, [sp, #20]
            BCo = ROL(Ama, 41);
 8000b52:	ea41 214a 	orr.w	r1, r1, sl, lsl #9
            Ase ^= De;
 8000b56:	ea83 0a02 	eor.w	sl, r3, r2
            BCu = ROL(Ase,  2);
 8000b5a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8000b5e:	ea43 729a 	orr.w	r2, r3, sl, lsr #30
            Esa =   BCa ^((~BCe)&  BCi );
 8000b62:	ea28 0305 	bic.w	r3, r8, r5
 8000b66:	ea83 0309 	eor.w	r3, r3, r9
            BCu = ROL(Ase,  2);
 8000b6a:	ea4f 048a 	mov.w	r4, sl, lsl #2
            Esa =   BCa ^((~BCe)&  BCi );
 8000b6e:	ea2c 0a0e 	bic.w	sl, ip, lr
 8000b72:	ea8a 0a06 	eor.w	sl, sl, r6
 8000b76:	9329      	str	r3, [sp, #164]	; 0xa4
            Ese =   BCe ^((~BCi)&  BCo );
 8000b78:	ea21 030c 	bic.w	r3, r1, ip
            Esa =   BCa ^((~BCe)&  BCi );
 8000b7c:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
            Ese =   BCe ^((~BCi)&  BCo );
 8000b80:	ea83 030e 	eor.w	r3, r3, lr
 8000b84:	ea27 0a08 	bic.w	sl, r7, r8
            BCu = ROL(Ase,  2);
 8000b88:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
            Ese =   BCe ^((~BCi)&  BCo );
 8000b8c:	9335      	str	r3, [sp, #212]	; 0xd4
 8000b8e:	ea8a 0305 	eor.w	r3, sl, r5
 8000b92:	9336      	str	r3, [sp, #216]	; 0xd8
            Esi =   BCi ^((~BCo)&  BCu );
 8000b94:	ea24 0307 	bic.w	r3, r4, r7
 8000b98:	ea83 0308 	eor.w	r3, r3, r8
 8000b9c:	931d      	str	r3, [sp, #116]	; 0x74
            Eso =   BCo ^((~BCu)&  BCa );
 8000b9e:	ea29 0304 	bic.w	r3, r9, r4
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	932b      	str	r3, [sp, #172]	; 0xac
            Esu =   BCu ^((~BCa)&  BCe );
 8000ba6:	ea2e 0306 	bic.w	r3, lr, r6
            Esi =   BCi ^((~BCo)&  BCu );
 8000baa:	ea22 0a01 	bic.w	sl, r2, r1
            Esu =   BCu ^((~BCa)&  BCe );
 8000bae:	ea25 0909 	bic.w	r9, r5, r9
 8000bb2:	4053      	eors	r3, r2
            Esi =   BCi ^((~BCo)&  BCu );
 8000bb4:	ea8a 0c0c 	eor.w	ip, sl, ip
            Esu =   BCu ^((~BCa)&  BCe );
 8000bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8000bba:	ea89 0304 	eor.w	r3, r9, r4
            Esi =   BCi ^((~BCo)&  BCu );
 8000bbe:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
            Esu =   BCu ^((~BCa)&  BCe );
 8000bc2:	9311      	str	r3, [sp, #68]	; 0x44
            Eso =   BCo ^((~BCu)&  BCa );
 8000bc4:	ea26 0c02 	bic.w	ip, r6, r2

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8000bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000bca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            Eso =   BCo ^((~BCu)&  BCa );
 8000bcc:	ea8c 0101 	eor.w	r1, ip, r1
 8000bd0:	912a      	str	r1, [sp, #168]	; 0xa8
            BCa = Eba^Ega^Eka^Ema^Esa;
 8000bd2:	405a      	eors	r2, r3
 8000bd4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8000bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000bd8:	ea83 0601 	eor.w	r6, r3, r1
 8000bdc:	991a      	ldr	r1, [sp, #104]	; 0x68
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8000bde:	9b24      	ldr	r3, [sp, #144]	; 0x90
            BCa = Eba^Ega^Eka^Ema^Esa;
 8000be0:	404a      	eors	r2, r1
 8000be2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8000be4:	404e      	eors	r6, r1
 8000be6:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8000be8:	404a      	eors	r2, r1
 8000bea:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8000bec:	404e      	eors	r6, r1
 8000bee:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8000bf0:	404a      	eors	r2, r1
 8000bf2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000bf4:	404e      	eors	r6, r1
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8000bf6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000bf8:	ea83 0901 	eor.w	r9, r3, r1
 8000bfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000bfe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8000c00:	ea83 0801 	eor.w	r8, r3, r1
 8000c04:	9b32      	ldr	r3, [sp, #200]	; 0xc8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8000c06:	9920      	ldr	r1, [sp, #128]	; 0x80
            BCo = Ebo^Ego^Eko^Emo^Eso;
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8000c08:	f8dd e0f4 	ldr.w	lr, [sp, #244]	; 0xf4
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8000c0c:	ea89 0903 	eor.w	r9, r9, r3
 8000c10:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8000c12:	ea88 0803 	eor.w	r8, r8, r3
 8000c16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000c18:	ea89 0903 	eor.w	r9, r9, r3
 8000c1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000c1e:	ea88 0803 	eor.w	r8, r8, r3
 8000c22:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8000c24:	ea89 0903 	eor.w	r9, r9, r3
 8000c28:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8000c2a:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8000c2e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8000c30:	ea83 0c01 	eor.w	ip, r3, r1
 8000c34:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8000c36:	9921      	ldr	r1, [sp, #132]	; 0x84
 8000c38:	ea83 0701 	eor.w	r7, r3, r1
 8000c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000c3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000c40:	ea8c 0c03 	eor.w	ip, ip, r3
 8000c44:	404f      	eors	r7, r1
 8000c46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8000c48:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8000c4a:	ea8c 0c03 	eor.w	ip, ip, r3
 8000c4e:	404f      	eors	r7, r1
 8000c50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000c52:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000c54:	ea8c 0c03 	eor.w	ip, ip, r3
 8000c58:	404f      	eors	r7, r1
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8000c5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8000c5c:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8000c5e:	ea83 0501 	eor.w	r5, r3, r1
 8000c62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000c64:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8000c66:	ea83 0401 	eor.w	r4, r3, r1
 8000c6a:	9926      	ldr	r1, [sp, #152]	; 0x98
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8000c6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8000c6e:	404d      	eors	r5, r1
 8000c70:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8000c72:	404c      	eors	r4, r1
 8000c74:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000c76:	404d      	eors	r5, r1
 8000c78:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000c7a:	404c      	eors	r4, r1
 8000c7c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8000c7e:	404d      	eors	r5, r1
 8000c80:	992b      	ldr	r1, [sp, #172]	; 0xac
 8000c82:	404c      	eors	r4, r1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8000c84:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8000c86:	4059      	eors	r1, r3
 8000c88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000c8a:	ea83 0e0e 	eor.w	lr, r3, lr
 8000c8e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8000c90:	4059      	eors	r1, r3
 8000c92:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8000c94:	ea8e 0e03 	eor.w	lr, lr, r3
 8000c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000c9a:	4059      	eors	r1, r3
 8000c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000c9e:	ea8e 0e03 	eor.w	lr, lr, r3
 8000ca2:	9b10      	ldr	r3, [sp, #64]	; 0x40

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8000ca4:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8000ca8:	4059      	eors	r1, r3
 8000caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
            Da = BCu^ROL(BCe, 1);
 8000cac:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8000cb0:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8000cb4:	ea8e 0e03 	eor.w	lr, lr, r3
            Da = BCu^ROL(BCe, 1);
 8000cb8:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 8000cbc:	ea8b 0301 	eor.w	r3, fp, r1
            De = BCa^ROL(BCi, 1);
 8000cc0:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
            Da = BCu^ROL(BCe, 1);
 8000cc4:	9302      	str	r3, [sp, #8]
            De = BCa^ROL(BCi, 1);
 8000cc6:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
            Da = BCu^ROL(BCe, 1);
 8000cca:	ea8a 030e 	eor.w	r3, sl, lr
            De = BCa^ROL(BCi, 1);
 8000cce:	ea4f 0a47 	mov.w	sl, r7, lsl #1
            Da = BCu^ROL(BCe, 1);
 8000cd2:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 8000cd4:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8000cd8:	ea8b 0302 	eor.w	r3, fp, r2
            Di = BCe^ROL(BCo, 1);
 8000cdc:	ea4f 0b45 	mov.w	fp, r5, lsl #1
            De = BCa^ROL(BCi, 1);
 8000ce0:	9304      	str	r3, [sp, #16]
            Di = BCe^ROL(BCo, 1);
 8000ce2:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 8000ce6:	ea8a 0306 	eor.w	r3, sl, r6
            Di = BCe^ROL(BCo, 1);
 8000cea:	ea4f 0a44 	mov.w	sl, r4, lsl #1
            De = BCa^ROL(BCi, 1);
 8000cee:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 8000cf0:	ea4a 7ad5 	orr.w	sl, sl, r5, lsr #31
 8000cf4:	ea8b 0309 	eor.w	r3, fp, r9
 8000cf8:	9306      	str	r3, [sp, #24]
 8000cfa:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 8000cfe:	ea4f 084e 	mov.w	r8, lr, lsl #1
 8000d02:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	ea41 71de 	orr.w	r1, r1, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 8000d0c:	9307      	str	r3, [sp, #28]
            Do = BCi^ROL(BCu, 1);
 8000d0e:	ea81 030c 	eor.w	r3, r1, ip
 8000d12:	9308      	str	r3, [sp, #32]
 8000d14:	ea88 0307 	eor.w	r3, r8, r7
            Du = BCo^ROL(BCa, 1);
 8000d18:	0077      	lsls	r7, r6, #1
 8000d1a:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 8000d1e:	0052      	lsls	r2, r2, #1
 8000d20:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
            Do = BCi^ROL(BCu, 1);
 8000d24:	9309      	str	r3, [sp, #36]	; 0x24
            Du = BCo^ROL(BCa, 1);
 8000d26:	ea82 0305 	eor.w	r3, r2, r5
 8000d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8000d2c:	ea87 0304 	eor.w	r3, r7, r4

            Eba ^= Da;
 8000d30:	9a02      	ldr	r2, [sp, #8]
            Du = BCo^ROL(BCa, 1);
 8000d32:	930b      	str	r3, [sp, #44]	; 0x2c
            Eba ^= Da;
 8000d34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000d36:	ea83 0702 	eor.w	r7, r3, r2
 8000d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000d3c:	9a03      	ldr	r2, [sp, #12]
 8000d3e:	ea83 0b02 	eor.w	fp, r3, r2
            BCa = Eba;
            Ege ^= De;
 8000d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000d44:	9a04      	ldr	r2, [sp, #16]
 8000d46:	ea83 0a02 	eor.w	sl, r3, r2
 8000d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8000d4c:	9a05      	ldr	r2, [sp, #20]
            BCe = ROL(Ege, 44);
 8000d4e:	ea4f 541a 	mov.w	r4, sl, lsr #20
            Ege ^= De;
 8000d52:	ea83 0602 	eor.w	r6, r3, r2
            Eki ^= Di;
 8000d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d58:	9a06      	ldr	r2, [sp, #24]
            BCe = ROL(Ege, 44);
 8000d5a:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
 8000d5e:	0d36      	lsrs	r6, r6, #20
 8000d60:	ea46 360a 	orr.w	r6, r6, sl, lsl #12
            Eki ^= Di;
 8000d64:	ea83 0a02 	eor.w	sl, r3, r2
 8000d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d6a:	9a07      	ldr	r2, [sp, #28]
 8000d6c:	ea83 0902 	eor.w	r9, r3, r2
            BCi = ROL(Eki, 43);
            Emo ^= Do;
 8000d70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000d72:	9a08      	ldr	r2, [sp, #32]
 8000d74:	ea83 0c02 	eor.w	ip, r3, r2
 8000d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d7c:	ea83 0502 	eor.w	r5, r3, r2
            BCo = ROL(Emo, 21);
 8000d80:	ea4f 524c 	mov.w	r2, ip, lsl #21
 8000d84:	ea42 22d5 	orr.w	r2, r2, r5, lsr #11
            Esu ^= Du;
 8000d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            BCo = ROL(Emo, 21);
 8000d8a:	ea4f 5e45 	mov.w	lr, r5, lsl #21
            Esu ^= Du;
 8000d8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8000d90:	405d      	eors	r5, r3
            BCo = ROL(Emo, 21);
 8000d92:	ea4e 2edc 	orr.w	lr, lr, ip, lsr #11
            Esu ^= Du;
 8000d96:	462b      	mov	r3, r5
 8000d98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8000d9a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8000d9e:	ea85 050c 	eor.w	r5, r5, ip
            BCu = ROL(Esu, 14);
 8000da2:	ea4f 3c85 	mov.w	ip, r5, lsl #14
 8000da6:	ea4c 4c93 	orr.w	ip, ip, r3, lsr #18
 8000daa:	039b      	lsls	r3, r3, #14
 8000dac:	ea43 4395 	orr.w	r3, r3, r5, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8000db0:	9d01      	ldr	r5, [sp, #4]
 8000db2:	68ad      	ldr	r5, [r5, #8]
 8000db4:	950c      	str	r5, [sp, #48]	; 0x30
 8000db6:	9d01      	ldr	r5, [sp, #4]
            BCi = ROL(Eki, 43);
 8000db8:	ea4f 585a 	mov.w	r8, sl, lsr #21
 8000dbc:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8000dc0:	68ed      	ldr	r5, [r5, #12]
            BCi = ROL(Eki, 43);
 8000dc2:	ea4f 5959 	mov.w	r9, r9, lsr #21
 8000dc6:	ea49 21ca 	orr.w	r1, r9, sl, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8000dca:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8000dce:	ea28 0a04 	bic.w	sl, r8, r4
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8000dd2:	ea8b 0505 	eor.w	r5, fp, r5
 8000dd6:	950d      	str	r5, [sp, #52]	; 0x34
 8000dd8:	ea87 0909 	eor.w	r9, r7, r9
            Aba =   BCa ^((~BCe)&  BCi );
 8000ddc:	4655      	mov	r5, sl
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8000dde:	ea89 0905 	eor.w	r9, r9, r5
 8000de2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000de4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8000de8:	ea21 0a06 	bic.w	sl, r1, r6
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8000dec:	ea85 050a 	eor.w	r5, r5, sl
 8000df0:	950d      	str	r5, [sp, #52]	; 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 8000df2:	ea2e 0501 	bic.w	r5, lr, r1
 8000df6:	4075      	eors	r5, r6
 8000df8:	ea22 0908 	bic.w	r9, r2, r8
 8000dfc:	950f      	str	r5, [sp, #60]	; 0x3c
            Abi =   BCi ^((~BCo)&  BCu );
 8000dfe:	ea2c 050e 	bic.w	r5, ip, lr
            Abe =   BCe ^((~BCi)&  BCo );
 8000e02:	ea89 0904 	eor.w	r9, r9, r4
            Abi =   BCi ^((~BCo)&  BCu );
 8000e06:	4069      	eors	r1, r5
            Abo =   BCo ^((~BCu)&  BCa );
 8000e08:	ea27 0503 	bic.w	r5, r7, r3
            Abu =   BCu ^((~BCa)&  BCe );
 8000e0c:	ea24 0707 	bic.w	r7, r4, r7
 8000e10:	ea26 060b 	bic.w	r6, r6, fp
            Abe =   BCe ^((~BCi)&  BCo );
 8000e14:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
            Abi =   BCi ^((~BCo)&  BCu );
 8000e18:	9111      	str	r1, [sp, #68]	; 0x44
 8000e1a:	ea23 0902 	bic.w	r9, r3, r2
            Abo =   BCo ^((~BCu)&  BCa );
 8000e1e:	ea2b 010c 	bic.w	r1, fp, ip
 8000e22:	406a      	eors	r2, r5
            Abu =   BCu ^((~BCa)&  BCe );
 8000e24:	407b      	eors	r3, r7
            Abo =   BCo ^((~BCu)&  BCa );
 8000e26:	9212      	str	r2, [sp, #72]	; 0x48
            Abu =   BCu ^((~BCa)&  BCe );
 8000e28:	9314      	str	r3, [sp, #80]	; 0x50
            Abo =   BCo ^((~BCu)&  BCa );
 8000e2a:	ea81 020e 	eor.w	r2, r1, lr
            Abu =   BCu ^((~BCa)&  BCe );
 8000e2e:	ea86 030c 	eor.w	r3, r6, ip
            Abo =   BCo ^((~BCu)&  BCa );
 8000e32:	9213      	str	r2, [sp, #76]	; 0x4c
            Abu =   BCu ^((~BCa)&  BCe );
 8000e34:	9315      	str	r3, [sp, #84]	; 0x54

            Ebo ^= Do;
 8000e36:	9a08      	ldr	r2, [sp, #32]
 8000e38:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8000e3a:	ea83 0102 	eor.w	r1, r3, r2
 8000e3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8000e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e42:	ea83 0e02 	eor.w	lr, r3, r2
            BCa = ROL(Ebo, 28);
 8000e46:	ea4f 7b0e 	mov.w	fp, lr, lsl #28
            Egu ^= Du;
 8000e4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            BCa = ROL(Ebo, 28);
 8000e4e:	ea4b 1b11 	orr.w	fp, fp, r1, lsr #4
 8000e52:	0709      	lsls	r1, r1, #28
 8000e54:	ea41 141e 	orr.w	r4, r1, lr, lsr #4
            Egu ^= Du;
 8000e58:	ea83 0e02 	eor.w	lr, r3, r2
 8000e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000e60:	ea83 0502 	eor.w	r5, r3, r2
            BCe = ROL(Egu, 20);
            Eka ^= Da;
 8000e64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000e66:	9a02      	ldr	r2, [sp, #8]
            BCe = ROL(Egu, 20);
 8000e68:	052e      	lsls	r6, r5, #20
            Eka ^= Da;
 8000e6a:	ea83 0a02 	eor.w	sl, r3, r2
 8000e6e:	9a03      	ldr	r2, [sp, #12]
 8000e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            BCe = ROL(Egu, 20);
 8000e72:	ea46 361e 	orr.w	r6, r6, lr, lsr #12
            Abi =   BCi ^((~BCo)&  BCu );
 8000e76:	ea89 0808 	eor.w	r8, r9, r8
            BCe = ROL(Egu, 20);
 8000e7a:	ea4f 5e0e 	mov.w	lr, lr, lsl #20
 8000e7e:	ea4e 3115 	orr.w	r1, lr, r5, lsr #12
            Eka ^= Da;
 8000e82:	ea83 0902 	eor.w	r9, r3, r2
            Abi =   BCi ^((~BCo)&  BCu );
 8000e86:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
            BCi = ROL(Eka, 3);
            Eme ^= De;
 8000e8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000e8c:	9d04      	ldr	r5, [sp, #16]
 8000e8e:	f8dd c014 	ldr.w	ip, [sp, #20]
            BCo = ROL(Eme, 45);
            Esi ^= Di;
 8000e92:	f8dd e01c 	ldr.w	lr, [sp, #28]
            Eme ^= De;
 8000e96:	406b      	eors	r3, r5
            BCi = ROL(Eka, 3);
 8000e98:	ea4f 07c9 	mov.w	r7, r9, lsl #3
            Eme ^= De;
 8000e9c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
            BCi = ROL(Eka, 3);
 8000e9e:	ea47 775a 	orr.w	r7, r7, sl, lsr #29
 8000ea2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8000ea6:	ea4a 7259 	orr.w	r2, sl, r9, lsr #29
            Eme ^= De;
 8000eaa:	ea85 090c 	eor.w	r9, r5, ip
            BCo = ROL(Eme, 45);
 8000eae:	0cdd      	lsrs	r5, r3, #19
 8000eb0:	ea45 3549 	orr.w	r5, r5, r9, lsl #13
 8000eb4:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8000eb8:	ea49 3a43 	orr.w	sl, r9, r3, lsl #13
            Esi ^= Di;
 8000ebc:	f8dd c018 	ldr.w	ip, [sp, #24]
 8000ec0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8000ec2:	ea83 0c0c 	eor.w	ip, r3, ip
 8000ec6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            BCu = ROL(Esi, 61);
 8000ec8:	ea4f 08dc 	mov.w	r8, ip, lsr #3
            Esi ^= Di;
 8000ecc:	ea83 030e 	eor.w	r3, r3, lr
            BCu = ROL(Esi, 61);
 8000ed0:	ea48 7843 	orr.w	r8, r8, r3, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8000ed4:	ea22 0e01 	bic.w	lr, r2, r1
            BCu = ROL(Esi, 61);
 8000ed8:	08db      	lsrs	r3, r3, #3
 8000eda:	ea43 734c 	orr.w	r3, r3, ip, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8000ede:	ea8e 0e04 	eor.w	lr, lr, r4
 8000ee2:	ea27 0c06 	bic.w	ip, r7, r6
 8000ee6:	ea8c 0c0b 	eor.w	ip, ip, fp
 8000eea:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
            Age =   BCe ^((~BCi)&  BCo );
 8000eee:	ea25 0e02 	bic.w	lr, r5, r2
 8000ef2:	ea8e 0e01 	eor.w	lr, lr, r1
            Aga =   BCa ^((~BCe)&  BCi );
 8000ef6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
            Age =   BCe ^((~BCi)&  BCo );
 8000efa:	ea2a 0c07 	bic.w	ip, sl, r7
 8000efe:	ea8c 0c06 	eor.w	ip, ip, r6
 8000f02:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
            Agi =   BCi ^((~BCo)&  BCu );
 8000f06:	ea28 0e05 	bic.w	lr, r8, r5
 8000f0a:	ea8e 0202 	eor.w	r2, lr, r2
            Age =   BCe ^((~BCi)&  BCo );
 8000f0e:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
            Agi =   BCi ^((~BCo)&  BCu );
 8000f12:	ea23 0c0a 	bic.w	ip, r3, sl
 8000f16:	921a      	str	r2, [sp, #104]	; 0x68
 8000f18:	ea8c 0207 	eor.w	r2, ip, r7
 8000f1c:	921b      	str	r2, [sp, #108]	; 0x6c
            Ago =   BCo ^((~BCu)&  BCa );
 8000f1e:	ea2b 0203 	bic.w	r2, fp, r3
 8000f22:	ea82 020a 	eor.w	r2, r2, sl
            Agu =   BCu ^((~BCa)&  BCe );
 8000f26:	ea21 0104 	bic.w	r1, r1, r4
 8000f2a:	ea26 060b 	bic.w	r6, r6, fp
 8000f2e:	4073      	eors	r3, r6
            Ago =   BCo ^((~BCu)&  BCa );
 8000f30:	921d      	str	r2, [sp, #116]	; 0x74
            Agu =   BCu ^((~BCa)&  BCe );
 8000f32:	ea81 0208 	eor.w	r2, r1, r8
 8000f36:	921e      	str	r2, [sp, #120]	; 0x78
 8000f38:	931f      	str	r3, [sp, #124]	; 0x7c

            Ebe ^= De;
 8000f3a:	9a04      	ldr	r2, [sp, #16]
 8000f3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
            Ago =   BCo ^((~BCu)&  BCa );
 8000f3e:	ea24 0708 	bic.w	r7, r4, r8
 8000f42:	407d      	eors	r5, r7
            Ebe ^= De;
 8000f44:	ea83 0702 	eor.w	r7, r3, r2
 8000f48:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8000f4a:	9a05      	ldr	r2, [sp, #20]
            Ago =   BCo ^((~BCu)&  BCa );
 8000f4c:	951c      	str	r5, [sp, #112]	; 0x70
            Ebe ^= De;
 8000f4e:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
 8000f52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000f54:	9a06      	ldr	r2, [sp, #24]
            BCa = ROL(Ebe, 1);
 8000f56:	ea4f 0846 	mov.w	r8, r6, lsl #1
            Egi ^= Di;
 8000f5a:	ea83 0402 	eor.w	r4, r3, r2
 8000f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000f60:	9a07      	ldr	r2, [sp, #28]
            BCa = ROL(Ebe, 1);
 8000f62:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 8000f66:	007f      	lsls	r7, r7, #1
 8000f68:	ea47 7bd6 	orr.w	fp, r7, r6, lsr #31
            Egi ^= Di;
 8000f6c:	ea83 0602 	eor.w	r6, r3, r2
            BCe = ROL(Egi, 6);
            Eko ^= Do;
 8000f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000f72:	9a08      	ldr	r2, [sp, #32]
 8000f74:	ea83 0502 	eor.w	r5, r3, r2
 8000f78:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8000f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f7c:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Eko, 25);
 8000f80:	066a      	lsls	r2, r5, #25
 8000f82:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
            Emu ^= Du;
 8000f86:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = ROL(Eko, 25);
 8000f88:	ea4f 6a41 	mov.w	sl, r1, lsl #25
            Emu ^= Du;
 8000f8c:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCe = ROL(Egi, 6);
 8000f8e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
            Emu ^= Du;
 8000f92:	ea83 0701 	eor.w	r7, r3, r1
 8000f96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000f98:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCe = ROL(Egi, 6);
 8000f9a:	ea4c 6c94 	orr.w	ip, ip, r4, lsr #26
 8000f9e:	01a4      	lsls	r4, r4, #6
 8000fa0:	ea44 6996 	orr.w	r9, r4, r6, lsr #26
            Emu ^= Du;
 8000fa4:	ea83 0401 	eor.w	r4, r3, r1
            BCo = ROL(Emu, 8);
 8000fa8:	0221      	lsls	r1, r4, #8
 8000faa:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
 8000fae:	023f      	lsls	r7, r7, #8
 8000fb0:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
            Esa ^= Da;
 8000fb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8000fb6:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eko, 25);
 8000fb8:	ea4a 1ad5 	orr.w	sl, sl, r5, lsr #7
            Esa ^= Da;
 8000fbc:	4063      	eors	r3, r4
 8000fbe:	9d03      	ldr	r5, [sp, #12]
 8000fc0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8000fc2:	406c      	eors	r4, r5
            BCu = ROL(Esa, 18);
 8000fc4:	ea4f 4e84 	mov.w	lr, r4, lsl #18
 8000fc8:	ea4e 3e93 	orr.w	lr, lr, r3, lsr #14
 8000fcc:	049b      	lsls	r3, r3, #18
 8000fce:	ea43 3394 	orr.w	r3, r3, r4, lsr #14
            Aka =   BCa ^((~BCe)&  BCi );
 8000fd2:	ea2a 040c 	bic.w	r4, sl, ip
 8000fd6:	ea22 0509 	bic.w	r5, r2, r9
 8000fda:	ea84 0408 	eor.w	r4, r4, r8
 8000fde:	ea85 050b 	eor.w	r5, r5, fp
 8000fe2:	9421      	str	r4, [sp, #132]	; 0x84
            Ake =   BCe ^((~BCi)&  BCo );
 8000fe4:	ea27 0402 	bic.w	r4, r7, r2
 8000fe8:	ea84 0409 	eor.w	r4, r4, r9
            Aka =   BCa ^((~BCe)&  BCi );
 8000fec:	9520      	str	r5, [sp, #128]	; 0x80
            Ake =   BCe ^((~BCi)&  BCo );
 8000fee:	ea21 050a 	bic.w	r5, r1, sl
 8000ff2:	9422      	str	r4, [sp, #136]	; 0x88
 8000ff4:	ea85 040c 	eor.w	r4, r5, ip
            Aki =   BCi ^((~BCo)&  BCu );
 8000ff8:	ea23 0507 	bic.w	r5, r3, r7
 8000ffc:	406a      	eors	r2, r5
            Ake =   BCe ^((~BCi)&  BCo );
 8000ffe:	9423      	str	r4, [sp, #140]	; 0x8c
            Aki =   BCi ^((~BCo)&  BCu );
 8001000:	ea2e 0401 	bic.w	r4, lr, r1
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
 8001004:	ea29 090b 	bic.w	r9, r9, fp
            Aki =   BCi ^((~BCo)&  BCu );
 8001008:	9224      	str	r2, [sp, #144]	; 0x90
 800100a:	ea84 020a 	eor.w	r2, r4, sl
            Aku =   BCu ^((~BCa)&  BCe );
 800100e:	ea2c 0c08 	bic.w	ip, ip, r8
            Ako =   BCo ^((~BCu)&  BCa );
 8001012:	ea2b 0403 	bic.w	r4, fp, r3
            Aki =   BCi ^((~BCo)&  BCu );
 8001016:	9225      	str	r2, [sp, #148]	; 0x94
            Aku =   BCu ^((~BCa)&  BCe );
 8001018:	ea89 0303 	eor.w	r3, r9, r3
            Ako =   BCo ^((~BCu)&  BCa );
 800101c:	ea28 020e 	bic.w	r2, r8, lr
 8001020:	404a      	eors	r2, r1
            Aku =   BCu ^((~BCa)&  BCe );
 8001022:	9328      	str	r3, [sp, #160]	; 0xa0
 8001024:	ea8c 030e 	eor.w	r3, ip, lr
            Ako =   BCo ^((~BCu)&  BCa );
 8001028:	9227      	str	r2, [sp, #156]	; 0x9c
            Aku =   BCu ^((~BCa)&  BCe );
 800102a:	9329      	str	r3, [sp, #164]	; 0xa4

            Ebu ^= Du;
 800102c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800102e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
            Eke ^= De;
 8001030:	9905      	ldr	r1, [sp, #20]
            Ebu ^= Du;
 8001032:	ea83 0502 	eor.w	r5, r3, r2
 8001036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001038:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800103a:	4053      	eors	r3, r2
            BCa = ROL(Ebu, 27);
 800103c:	ea4f 6bc3 	mov.w	fp, r3, lsl #27
 8001040:	ea4b 1b55 	orr.w	fp, fp, r5, lsr #5
 8001044:	06ed      	lsls	r5, r5, #27
 8001046:	ea45 1c53 	orr.w	ip, r5, r3, lsr #5
            Ega ^= Da;
 800104a:	9a02      	ldr	r2, [sp, #8]
 800104c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800104e:	ea83 0a02 	eor.w	sl, r3, r2
 8001052:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001054:	9a03      	ldr	r2, [sp, #12]
 8001056:	ea83 0602 	eor.w	r6, r3, r2
            Eke ^= De;
 800105a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800105c:	9a04      	ldr	r2, [sp, #16]
 800105e:	405a      	eors	r2, r3
 8001060:	9b33      	ldr	r3, [sp, #204]	; 0xcc
            BCe = ROL(Ega, 36);
 8001062:	ea4f 7e1a 	mov.w	lr, sl, lsr #28
 8001066:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
            Eke ^= De;
 800106a:	ea83 0901 	eor.w	r9, r3, r1
            BCe = ROL(Ega, 36);
 800106e:	0f36      	lsrs	r6, r6, #28
 8001070:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
            BCi = ROL(Eke, 10);
 8001074:	ea4f 2a89 	mov.w	sl, r9, lsl #10
 8001078:	ea4a 5a92 	orr.w	sl, sl, r2, lsr #22
            Emi ^= Di;
 800107c:	9906      	ldr	r1, [sp, #24]
            BCi = ROL(Eke, 10);
 800107e:	0293      	lsls	r3, r2, #10
            Emi ^= Di;
 8001080:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8001082:	ea82 0501 	eor.w	r5, r2, r1
 8001086:	9907      	ldr	r1, [sp, #28]
 8001088:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            BCi = ROL(Eke, 10);
 800108a:	ea43 5399 	orr.w	r3, r3, r9, lsr #22
            Ako =   BCo ^((~BCu)&  BCa );
 800108e:	407c      	eors	r4, r7
            Emi ^= Di;
 8001090:	ea82 0901 	eor.w	r9, r2, r1
            Ako =   BCo ^((~BCu)&  BCa );
 8001094:	9426      	str	r4, [sp, #152]	; 0x98
            BCo = ROL(Emi, 15);
            Eso ^= Do;
 8001096:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8001098:	9908      	ldr	r1, [sp, #32]
            BCo = ROL(Emi, 15);
 800109a:	ea4f 34c9 	mov.w	r4, r9, lsl #15
 800109e:	ea44 4455 	orr.w	r4, r4, r5, lsr #17
 80010a2:	03ed      	lsls	r5, r5, #15
 80010a4:	ea45 4859 	orr.w	r8, r5, r9, lsr #17
            Eso ^= Do;
 80010a8:	4051      	eors	r1, r2
 80010aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80010ac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            BCu = ROL(Eso, 56);
 80010ae:	ea4f 2911 	mov.w	r9, r1, lsr #8
            Eso ^= Do;
 80010b2:	ea82 0705 	eor.w	r7, r2, r5
            BCu = ROL(Eso, 56);
 80010b6:	ea49 6907 	orr.w	r9, r9, r7, lsl #24
 80010ba:	0a3f      	lsrs	r7, r7, #8
 80010bc:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
            Ama =   BCa ^((~BCe)&  BCi );
 80010c0:	ea23 010e 	bic.w	r1, r3, lr
 80010c4:	ea2a 0206 	bic.w	r2, sl, r6
 80010c8:	ea81 010c 	eor.w	r1, r1, ip
 80010cc:	ea82 020b 	eor.w	r2, r2, fp
 80010d0:	912a      	str	r1, [sp, #168]	; 0xa8
            Ame =   BCe ^((~BCi)&  BCo );
 80010d2:	ea28 0103 	bic.w	r1, r8, r3
 80010d6:	ea81 010e 	eor.w	r1, r1, lr
            Ama =   BCa ^((~BCe)&  BCi );
 80010da:	922b      	str	r2, [sp, #172]	; 0xac
            Ame =   BCe ^((~BCi)&  BCo );
 80010dc:	ea24 020a 	bic.w	r2, r4, sl
 80010e0:	4072      	eors	r2, r6
 80010e2:	912c      	str	r1, [sp, #176]	; 0xb0
            Ami =   BCi ^((~BCo)&  BCu );
 80010e4:	ea29 0108 	bic.w	r1, r9, r8
 80010e8:	404b      	eors	r3, r1
            Ame =   BCe ^((~BCi)&  BCo );
 80010ea:	922d      	str	r2, [sp, #180]	; 0xb4
            Ami =   BCi ^((~BCo)&  BCu );
 80010ec:	ea27 0204 	bic.w	r2, r7, r4
            Amo =   BCo ^((~BCu)&  BCa );
 80010f0:	ea2c 0109 	bic.w	r1, ip, r9
            Ami =   BCi ^((~BCo)&  BCu );
 80010f4:	932e      	str	r3, [sp, #184]	; 0xb8
 80010f6:	ea82 030a 	eor.w	r3, r2, sl
 80010fa:	932f      	str	r3, [sp, #188]	; 0xbc
            Amo =   BCo ^((~BCu)&  BCa );
 80010fc:	ea2b 0207 	bic.w	r2, fp, r7
 8001100:	ea81 0308 	eor.w	r3, r1, r8
            Amu =   BCu ^((~BCa)&  BCe );
 8001104:	ea2e 0c0c 	bic.w	ip, lr, ip
            Amo =   BCo ^((~BCu)&  BCa );
 8001108:	9330      	str	r3, [sp, #192]	; 0xc0
 800110a:	ea82 0304 	eor.w	r3, r2, r4
            Amu =   BCu ^((~BCa)&  BCe );
 800110e:	ea26 060b 	bic.w	r6, r6, fp
            Amo =   BCo ^((~BCu)&  BCa );
 8001112:	9331      	str	r3, [sp, #196]	; 0xc4
            Amu =   BCu ^((~BCa)&  BCe );
 8001114:	ea8c 0309 	eor.w	r3, ip, r9
 8001118:	9332      	str	r3, [sp, #200]	; 0xc8
 800111a:	ea86 0307 	eor.w	r3, r6, r7

            Ebi ^= Di;
 800111e:	9a06      	ldr	r2, [sp, #24]
            Amu =   BCu ^((~BCa)&  BCe );
 8001120:	9333      	str	r3, [sp, #204]	; 0xcc
            Ebi ^= Di;
 8001122:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
 8001124:	9908      	ldr	r1, [sp, #32]
            Ebi ^= Di;
 8001126:	ea83 0902 	eor.w	r9, r3, r2
 800112a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800112c:	9a07      	ldr	r2, [sp, #28]
 800112e:	ea83 0802 	eor.w	r8, r3, r2
            Ego ^= Do;
 8001132:	9a37      	ldr	r2, [sp, #220]	; 0xdc
            BCa = ROL(Ebi, 62);
 8001134:	ea4f 0c99 	mov.w	ip, r9, lsr #2
            Ego ^= Do;
 8001138:	ea82 0601 	eor.w	r6, r2, r1
 800113c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
            BCe = ROL(Ego, 55);
            Eku ^= Du;
 800113e:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCa = ROL(Ebi, 62);
 8001140:	ea4c 7c88 	orr.w	ip, ip, r8, lsl #30
 8001144:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8001148:	ea48 7389 	orr.w	r3, r8, r9, lsl #30
            Ego ^= Do;
 800114c:	ea82 0805 	eor.w	r8, r2, r5
            Eku ^= Du;
 8001150:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8001152:	ea82 0501 	eor.w	r5, r2, r1
 8001156:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8001158:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCi = ROL(Eku, 39);
 800115a:	ea4f 6b55 	mov.w	fp, r5, lsr #25
            Eku ^= Du;
 800115e:	ea82 0401 	eor.w	r4, r2, r1
            BCi = ROL(Eku, 39);
 8001162:	ea4b 1bc4 	orr.w	fp, fp, r4, lsl #7
            Ema ^= Da;
 8001166:	9a39      	ldr	r2, [sp, #228]	; 0xe4
            BCi = ROL(Eku, 39);
 8001168:	0e61      	lsrs	r1, r4, #25
            Ema ^= Da;
 800116a:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eku, 39);
 800116c:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
            Ema ^= Da;
 8001170:	4062      	eors	r2, r4
 8001172:	9d03      	ldr	r5, [sp, #12]
 8001174:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8001176:	ea84 0a05 	eor.w	sl, r4, r5
            BCo = ROL(Ema, 41);
 800117a:	ea4f 54da 	mov.w	r4, sl, lsr #23
 800117e:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
            Ese ^= De;
 8001182:	9d04      	ldr	r5, [sp, #16]
            BCo = ROL(Ema, 41);
 8001184:	0dd7      	lsrs	r7, r2, #23
            Ese ^= De;
 8001186:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8001188:	ea82 0905 	eor.w	r9, r2, r5
 800118c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800118e:	9d05      	ldr	r5, [sp, #20]
            BCe = ROL(Ego, 55);
 8001190:	ea4f 2e56 	mov.w	lr, r6, lsr #9
 8001194:	ea4e 5ec8 	orr.w	lr, lr, r8, lsl #23
            BCo = ROL(Ema, 41);
 8001198:	ea47 274a 	orr.w	r7, r7, sl, lsl #9
            BCe = ROL(Ego, 55);
 800119c:	ea4f 2858 	mov.w	r8, r8, lsr #9
            Ese ^= De;
 80011a0:	ea82 0a05 	eor.w	sl, r2, r5
            BCe = ROL(Ego, 55);
 80011a4:	ea48 58c6 	orr.w	r8, r8, r6, lsl #23
            BCu = ROL(Ese, 2);
 80011a8:	ea4f 068a 	mov.w	r6, sl, lsl #2
 80011ac:	ea46 7599 	orr.w	r5, r6, r9, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 80011b0:	ea2b 020e 	bic.w	r2, fp, lr
            BCu = ROL(Ese, 2);
 80011b4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80011b8:	ea49 7a9a 	orr.w	sl, r9, sl, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 80011bc:	ea82 020c 	eor.w	r2, r2, ip
 80011c0:	ea21 0908 	bic.w	r9, r1, r8
 80011c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80011c6:	ea89 0203 	eor.w	r2, r9, r3
 80011ca:	9234      	str	r2, [sp, #208]	; 0xd0
            Ase =   BCe ^((~BCi)&  BCo );
 80011cc:	ea27 060b 	bic.w	r6, r7, fp
 80011d0:	ea24 0201 	bic.w	r2, r4, r1
 80011d4:	ea86 060e 	eor.w	r6, r6, lr
 80011d8:	ea82 0208 	eor.w	r2, r2, r8
 80011dc:	9635      	str	r6, [sp, #212]	; 0xd4
 80011de:	9236      	str	r2, [sp, #216]	; 0xd8
            Asi =   BCi ^((~BCo)&  BCu );
 80011e0:	ea2a 0607 	bic.w	r6, sl, r7
 80011e4:	ea25 0204 	bic.w	r2, r5, r4
 80011e8:	404a      	eors	r2, r1
 80011ea:	ea86 060b 	eor.w	r6, r6, fp
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
 80011ee:	ea2e 0e0c 	bic.w	lr, lr, ip
            Asi =   BCi ^((~BCo)&  BCu );
 80011f2:	9637      	str	r6, [sp, #220]	; 0xdc
 80011f4:	9238      	str	r2, [sp, #224]	; 0xe0
            Asu =   BCu ^((~BCa)&  BCe );
 80011f6:	ea28 0603 	bic.w	r6, r8, r3
            Aso =   BCo ^((~BCu)&  BCa );
 80011fa:	ea23 0205 	bic.w	r2, r3, r5
            Asu =   BCu ^((~BCa)&  BCe );
 80011fe:	ea8e 030a 	eor.w	r3, lr, sl
 8001202:	933b      	str	r3, [sp, #236]	; 0xec
        for( round = 0; round < NROUNDS; round += 2 )
 8001204:	9b01      	ldr	r3, [sp, #4]
 8001206:	3310      	adds	r3, #16
            Aso =   BCo ^((~BCu)&  BCa );
 8001208:	4062      	eors	r2, r4
        for( round = 0; round < NROUNDS; round += 2 )
 800120a:	9301      	str	r3, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 800120c:	923a      	str	r2, [sp, #232]	; 0xe8
        for( round = 0; round < NROUNDS; round += 2 )
 800120e:	4b40      	ldr	r3, [pc, #256]	; (8001310 <KeccakF1600_StatePermute+0xe58>)
 8001210:	9a01      	ldr	r2, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 8001212:	ea2c 090a 	bic.w	r9, ip, sl
 8001216:	ea89 0107 	eor.w	r1, r9, r7
        for( round = 0; round < NROUNDS; round += 2 )
 800121a:	4293      	cmp	r3, r2
            Aso =   BCo ^((~BCu)&  BCa );
 800121c:	9139      	str	r1, [sp, #228]	; 0xe4
            Asu =   BCu ^((~BCa)&  BCe );
 800121e:	ea86 0605 	eor.w	r6, r6, r5
        for( round = 0; round < NROUNDS; round += 2 )
 8001222:	f47f a9c7 	bne.w	80005b4 <KeccakF1600_StatePermute+0xfc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8001226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001228:	6003      	str	r3, [r0, #0]
 800122a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800122c:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 800122e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001230:	6083      	str	r3, [r0, #8]
 8001232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001234:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 8001236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001238:	6103      	str	r3, [r0, #16]
 800123a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800123c:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 800123e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001240:	6183      	str	r3, [r0, #24]
 8001242:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001244:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 8001246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001248:	6203      	str	r3, [r0, #32]
 800124a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800124c:	6243      	str	r3, [r0, #36]	; 0x24
        state[ 5] = Aga;
 800124e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001250:	6283      	str	r3, [r0, #40]	; 0x28
 8001252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001254:	62c3      	str	r3, [r0, #44]	; 0x2c
        state[ 6] = Age;
 8001256:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001258:	6303      	str	r3, [r0, #48]	; 0x30
 800125a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800125c:	6343      	str	r3, [r0, #52]	; 0x34
        state[ 7] = Agi;
 800125e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001260:	6383      	str	r3, [r0, #56]	; 0x38
 8001262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001264:	63c3      	str	r3, [r0, #60]	; 0x3c
        state[ 8] = Ago;
 8001266:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001268:	6403      	str	r3, [r0, #64]	; 0x40
 800126a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800126c:	6443      	str	r3, [r0, #68]	; 0x44
        state[ 9] = Agu;
 800126e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001270:	6483      	str	r3, [r0, #72]	; 0x48
 8001272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001274:	64c3      	str	r3, [r0, #76]	; 0x4c
        state[10] = Aka;
 8001276:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001278:	6503      	str	r3, [r0, #80]	; 0x50
 800127a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800127c:	6543      	str	r3, [r0, #84]	; 0x54
        state[11] = Ake;
 800127e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001280:	6583      	str	r3, [r0, #88]	; 0x58
 8001282:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001284:	65c3      	str	r3, [r0, #92]	; 0x5c
        state[12] = Aki;
 8001286:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001288:	6603      	str	r3, [r0, #96]	; 0x60
 800128a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800128c:	6643      	str	r3, [r0, #100]	; 0x64
        state[13] = Ako;
 800128e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001290:	6683      	str	r3, [r0, #104]	; 0x68
 8001292:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001294:	66c3      	str	r3, [r0, #108]	; 0x6c
        state[14] = Aku;
 8001296:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001298:	6703      	str	r3, [r0, #112]	; 0x70
 800129a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800129c:	6743      	str	r3, [r0, #116]	; 0x74
        state[15] = Ama;
 800129e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80012a0:	6783      	str	r3, [r0, #120]	; 0x78
 80012a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80012a4:	67c3      	str	r3, [r0, #124]	; 0x7c
        state[16] = Ame;
 80012a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80012a8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 80012ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80012ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
        state[17] = Ami;
 80012b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80012b4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80012b8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80012ba:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        state[18] = Amo;
 80012be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80012c0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80012c4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80012c6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
        state[19] = Amu;
 80012ca:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80012cc:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80012d0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80012d2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        state[20] = Asa;
 80012d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012d8:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 80012dc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80012de:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
        state[21] = Ase;
 80012e2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80012e4:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 80012e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80012ea:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
        state[22] = Asi;
 80012ee:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80012f0:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 80012f4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80012f6:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        state[23] = Aso;
 80012fa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80012fc:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
        state[24] = Asu;
 8001300:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        state[23] = Aso;
 8001302:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
        state[24] = Asu;
 8001306:	e9c0 3630 	strd	r3, r6, [r0, #192]	; 0xc0
}
 800130a:	b03f      	add	sp, #252	; 0xfc
 800130c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001310:	08003fb8 	.word	0x08003fb8

08001314 <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8001314:	b510      	push	{r4, lr}
  unsigned int i;
  for(i=0;i<25;i++)
    state->s[i] = 0;
 8001316:	22c8      	movs	r2, #200	; 0xc8
{
 8001318:	4604      	mov	r4, r0
    state->s[i] = 0;
 800131a:	2100      	movs	r1, #0
 800131c:	f002 fd02 	bl	8003d24 <memset>
  state->pos = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
 8001326:	bd10      	pop	{r4, pc}

08001328 <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8001328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	b085      	sub	sp, #20
 800132e:	461c      	mov	r4, r3
  unsigned int i;
  uint8_t t[8] = {0};

  if(pos & 7) {
 8001330:	f012 0807 	ands.w	r8, r2, #7
  uint8_t t[8] = {0};
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
 800133c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800133e:	4607      	mov	r7, r0
 8001340:	4689      	mov	r9, r1
 8001342:	4615      	mov	r5, r2
  if(pos & 7) {
 8001344:	d021      	beq.n	800138a <keccak_absorb+0x62>
    i = pos & 7;
    while(i < 8 && mlen > 0) {
 8001346:	b16e      	cbz	r6, 8001364 <keccak_absorb+0x3c>
      t[i++] = *m++;
 8001348:	aa02      	add	r2, sp, #8
 800134a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800134e:	f802 3008 	strb.w	r3, [r2, r8]
    while(i < 8 && mlen > 0) {
 8001352:	f108 0801 	add.w	r8, r8, #1
 8001356:	f1b8 0f08 	cmp.w	r8, #8
      mlen--;
 800135a:	f106 36ff 	add.w	r6, r6, #4294967295
      pos++;
 800135e:	f105 0501 	add.w	r5, r5, #1
    while(i < 8 && mlen > 0) {
 8001362:	d1f0      	bne.n	8001346 <keccak_absorb+0x1e>
    }
    s[(pos-i)/8] ^= load64(t);
 8001364:	eba5 0808 	sub.w	r8, r5, r8
 8001368:	f028 0807 	bic.w	r8, r8, #7
 800136c:	a802      	add	r0, sp, #8
 800136e:	f7ff f875 	bl	800045c <load64>
 8001372:	eb07 0c08 	add.w	ip, r7, r8
 8001376:	f857 2008 	ldr.w	r2, [r7, r8]
 800137a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800137e:	4042      	eors	r2, r0
 8001380:	404b      	eors	r3, r1
 8001382:	f847 2008 	str.w	r2, [r7, r8]
 8001386:	f8cc 3004 	str.w	r3, [ip, #4]
  }

  if(pos && mlen >= r-pos) {
 800138a:	b1a5      	cbz	r5, 80013b6 <keccak_absorb+0x8e>
 800138c:	eba9 0b05 	sub.w	fp, r9, r5
 8001390:	45b3      	cmp	fp, r6
 8001392:	d810      	bhi.n	80013b6 <keccak_absorb+0x8e>
 8001394:	f025 0807 	bic.w	r8, r5, #7
 8001398:	f02b 0307 	bic.w	r3, fp, #7
 800139c:	46a2      	mov	sl, r4
 800139e:	44b8      	add	r8, r7
 80013a0:	4423      	add	r3, r4
    for(i=0;i<(r-pos)/8;i++)
 80013a2:	4553      	cmp	r3, sl
 80013a4:	d10a      	bne.n	80013bc <keccak_absorb+0x94>
      s[pos/8+i] ^= load64(m+8*i);
    m += r-pos;
    mlen -= r-pos;
    pos = 0;
    KeccakF1600_StatePermute(s);
 80013a6:	4638      	mov	r0, r7
 80013a8:	f7ff f886 	bl	80004b8 <KeccakF1600_StatePermute>
 80013ac:	442e      	add	r6, r5
    m += r-pos;
 80013ae:	445c      	add	r4, fp
    mlen -= r-pos;
 80013b0:	eba6 0609 	sub.w	r6, r6, r9
    pos = 0;
 80013b4:	2500      	movs	r5, #0
  }

  while(mlen >= r) {
    for(i=0;i<r/8;i++)
 80013b6:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
 80013ba:	e029      	b.n	8001410 <keccak_absorb+0xe8>
      s[pos/8+i] ^= load64(m+8*i);
 80013bc:	4650      	mov	r0, sl
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f7ff f84c 	bl	800045c <load64>
 80013c4:	e9d8 3200 	ldrd	r3, r2, [r8]
 80013c8:	4058      	eors	r0, r3
 80013ca:	f848 0b08 	str.w	r0, [r8], #8
 80013ce:	404a      	eors	r2, r1
 80013d0:	9b01      	ldr	r3, [sp, #4]
 80013d2:	f848 2c04 	str.w	r2, [r8, #-4]
    for(i=0;i<(r-pos)/8;i++)
 80013d6:	f10a 0a08 	add.w	sl, sl, #8
 80013da:	e7e2      	b.n	80013a2 <keccak_absorb+0x7a>
 80013dc:	f1a7 0808 	sub.w	r8, r7, #8
    for(i=0;i<r/8;i++)
 80013e0:	f04f 0a00 	mov.w	sl, #0
      s[i] ^= load64(m+8*i);
 80013e4:	eb04 00ca 	add.w	r0, r4, sl, lsl #3
 80013e8:	f7ff f838 	bl	800045c <load64>
 80013ec:	f858 2f08 	ldr.w	r2, [r8, #8]!
 80013f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    for(i=0;i<r/8;i++)
 80013f4:	f10a 0a01 	add.w	sl, sl, #1
      s[i] ^= load64(m+8*i);
 80013f8:	4042      	eors	r2, r0
 80013fa:	404b      	eors	r3, r1
    for(i=0;i<r/8;i++)
 80013fc:	45d3      	cmp	fp, sl
      s[i] ^= load64(m+8*i);
 80013fe:	e9c8 2300 	strd	r2, r3, [r8]
    for(i=0;i<r/8;i++)
 8001402:	d8ef      	bhi.n	80013e4 <keccak_absorb+0xbc>
    m += r;
    mlen -= r;
    KeccakF1600_StatePermute(s);
 8001404:	4638      	mov	r0, r7
    m += r;
 8001406:	444c      	add	r4, r9
    mlen -= r;
 8001408:	eba6 0609 	sub.w	r6, r6, r9
    KeccakF1600_StatePermute(s);
 800140c:	f7ff f854 	bl	80004b8 <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8001410:	454e      	cmp	r6, r9
 8001412:	d2e3      	bcs.n	80013dc <keccak_absorb+0xb4>
 8001414:	f025 0807 	bic.w	r8, r5, #7
 8001418:	f026 0907 	bic.w	r9, r6, #7
 800141c:	44b8      	add	r8, r7
 800141e:	eb04 0a09 	add.w	sl, r4, r9
  }

  for(i=0;i<mlen/8;i++)
 8001422:	45a2      	cmp	sl, r4
 8001424:	d11f      	bne.n	8001466 <keccak_absorb+0x13e>
    s[pos/8+i] ^= load64(m+8*i);
  m += 8*i;
  mlen -= 8*i;
  pos += 8*i;

  if(mlen) {
 8001426:	ebb6 0209 	subs.w	r2, r6, r9
  pos += 8*i;
 800142a:	eb05 0409 	add.w	r4, r5, r9
  if(mlen) {
 800142e:	d016      	beq.n	800145e <keccak_absorb+0x136>
    for(i=0;i<8;i++)
      t[i] = 0;
 8001430:	2300      	movs	r3, #0
    for(i=0;i<mlen;i++)
      t[i] = m[i];
 8001432:	4651      	mov	r1, sl
 8001434:	a802      	add	r0, sp, #8
    s[pos/8] ^= load64(t);
 8001436:	f024 0407 	bic.w	r4, r4, #7
      t[i] = 0;
 800143a:	e9cd 3302 	strd	r3, r3, [sp, #8]
      t[i] = m[i];
 800143e:	f7fe fec3 	bl	80001c8 <memcpy>
    s[pos/8] ^= load64(t);
 8001442:	a802      	add	r0, sp, #8
 8001444:	f7ff f80a 	bl	800045c <load64>
 8001448:	eb07 0c04 	add.w	ip, r7, r4
 800144c:	593a      	ldr	r2, [r7, r4]
 800144e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001452:	4042      	eors	r2, r0
 8001454:	4059      	eors	r1, r3
 8001456:	513a      	str	r2, [r7, r4]
 8001458:	f8cc 1004 	str.w	r1, [ip, #4]
    pos += mlen;
 800145c:	1974      	adds	r4, r6, r5
  }

  return pos;
}
 800145e:	4620      	mov	r0, r4
 8001460:	b005      	add	sp, #20
 8001462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s[pos/8+i] ^= load64(m+8*i);
 8001466:	4620      	mov	r0, r4
 8001468:	f7fe fff8 	bl	800045c <load64>
 800146c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8001470:	4042      	eors	r2, r0
 8001472:	f848 2b08 	str.w	r2, [r8], #8
 8001476:	404b      	eors	r3, r1
 8001478:	f848 3c04 	str.w	r3, [r8, #-4]
  for(i=0;i<mlen/8;i++)
 800147c:	3408      	adds	r4, #8
 800147e:	e7d0      	b.n	8001422 <keccak_absorb+0xfa>

08001480 <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned int i,j;

  i = pos >> 3;
 8001482:	08d7      	lsrs	r7, r2, #3
  j = pos & 7;
  s[i] ^= (uint64_t)p << 8*j;
 8001484:	f022 0507 	bic.w	r5, r2, #7
  j = pos & 7;
 8001488:	f002 0207 	and.w	r2, r2, #7
  s[i] ^= (uint64_t)p << 8*j;
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	4405      	add	r5, r0
 8001490:	f1a2 0420 	sub.w	r4, r2, #32
 8001494:	f1c2 0620 	rsb	r6, r2, #32
 8001498:	fa23 f606 	lsr.w	r6, r3, r6
 800149c:	fa03 f404 	lsl.w	r4, r3, r4
 80014a0:	fa03 f202 	lsl.w	r2, r3, r2
 80014a4:	f850 3037 	ldr.w	r3, [r0, r7, lsl #3]
 80014a8:	4334      	orrs	r4, r6
 80014aa:	686e      	ldr	r6, [r5, #4]
 80014ac:	4053      	eors	r3, r2
  s[r/8-1] ^= 1ULL << 63;
 80014ae:	3908      	subs	r1, #8
  s[i] ^= (uint64_t)p << 8*j;
 80014b0:	f840 3037 	str.w	r3, [r0, r7, lsl #3]
 80014b4:	4074      	eors	r4, r6
  s[r/8-1] ^= 1ULL << 63;
 80014b6:	4408      	add	r0, r1
  s[i] ^= (uint64_t)p << 8*j;
 80014b8:	606c      	str	r4, [r5, #4]
  s[r/8-1] ^= 1ULL << 63;
 80014ba:	6843      	ldr	r3, [r0, #4]
 80014bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80014c0:	6043      	str	r3, [r0, #4]
}
 80014c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014c4 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int r,
                                   unsigned int pos)
{
 80014c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c8:	b085      	sub	sp, #20
 80014ca:	4604      	mov	r4, r0
 80014cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  unsigned int i;
  uint8_t t[8];

  if(pos & 7) {
 80014ce:	f015 0907 	ands.w	r9, r5, #7
{
 80014d2:	460e      	mov	r6, r1
 80014d4:	4617      	mov	r7, r2
 80014d6:	4698      	mov	r8, r3
  if(pos & 7) {
 80014d8:	d015      	beq.n	8001506 <keccak_squeeze+0x42>
    store64(t,s[pos/8]);
 80014da:	f025 0307 	bic.w	r3, r5, #7
 80014de:	4413      	add	r3, r2
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	a802      	add	r0, sp, #8
 80014e6:	f7fe ffd2 	bl	800048e <store64>
    i = pos & 7;
    while(i < 8 && outlen > 0) {
 80014ea:	b166      	cbz	r6, 8001506 <keccak_squeeze+0x42>
      *out++ = t[i++];
 80014ec:	ab02      	add	r3, sp, #8
      outlen--;
 80014ee:	3e01      	subs	r6, #1
      *out++ = t[i++];
 80014f0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80014f4:	f804 3b01 	strb.w	r3, [r4], #1
    while(i < 8 && outlen > 0) {
 80014f8:	f109 0901 	add.w	r9, r9, #1
 80014fc:	f1b9 0f08 	cmp.w	r9, #8
      pos++;
 8001500:	f105 0501 	add.w	r5, r5, #1
    while(i < 8 && outlen > 0) {
 8001504:	d1f1      	bne.n	80014ea <keccak_squeeze+0x26>
    }
  }

  if(pos && outlen >= r-pos) {
 8001506:	b18d      	cbz	r5, 800152c <keccak_squeeze+0x68>
 8001508:	eba8 0b05 	sub.w	fp, r8, r5
 800150c:	45b3      	cmp	fp, r6
 800150e:	d80d      	bhi.n	800152c <keccak_squeeze+0x68>
 8001510:	f025 0a07 	bic.w	sl, r5, #7
 8001514:	f02b 0107 	bic.w	r1, fp, #7
 8001518:	44ba      	add	sl, r7
 800151a:	46a1      	mov	r9, r4
 800151c:	4421      	add	r1, r4
    for(i=0;i<(r-pos)/8;i++)
 800151e:	4549      	cmp	r1, r9
 8001520:	d107      	bne.n	8001532 <keccak_squeeze+0x6e>
      store64(out+8*i,s[pos/8+i]);
    out += r-pos;
 8001522:	442e      	add	r6, r5
 8001524:	445c      	add	r4, fp
    outlen -= r-pos;
 8001526:	eba6 0608 	sub.w	r6, r6, r8
    pos = 0;
 800152a:	2500      	movs	r5, #0
  }

  while(outlen >= r) {
    KeccakF1600_StatePermute(s);
    for(i=0;i<r/8;i++)
 800152c:	ea4f 0bd8 	mov.w	fp, r8, lsr #3
 8001530:	e01d      	b.n	800156e <keccak_squeeze+0xaa>
      store64(out+8*i,s[pos/8+i]);
 8001532:	4648      	mov	r0, r9
 8001534:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	f109 0908 	add.w	r9, r9, #8
 800153e:	f7fe ffa6 	bl	800048e <store64>
    for(i=0;i<(r-pos)/8;i++)
 8001542:	9901      	ldr	r1, [sp, #4]
 8001544:	e7eb      	b.n	800151e <keccak_squeeze+0x5a>
    KeccakF1600_StatePermute(s);
 8001546:	4638      	mov	r0, r7
 8001548:	f7fe ffb6 	bl	80004b8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 800154c:	f1a7 0a08 	sub.w	sl, r7, #8
 8001550:	f04f 0900 	mov.w	r9, #0
      store64(out+8*i,s[i]);
 8001554:	eb04 00c9 	add.w	r0, r4, r9, lsl #3
 8001558:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
    for(i=0;i<r/8;i++)
 800155c:	f109 0901 	add.w	r9, r9, #1
      store64(out+8*i,s[i]);
 8001560:	f7fe ff95 	bl	800048e <store64>
    for(i=0;i<r/8;i++)
 8001564:	45cb      	cmp	fp, r9
 8001566:	d8f5      	bhi.n	8001554 <keccak_squeeze+0x90>
    out += r;
 8001568:	4444      	add	r4, r8
    outlen -= r;
 800156a:	eba6 0608 	sub.w	r6, r6, r8
  while(outlen >= r) {
 800156e:	4546      	cmp	r6, r8
 8001570:	d2e9      	bcs.n	8001546 <keccak_squeeze+0x82>
  }

  if(!outlen)
 8001572:	b1ee      	cbz	r6, 80015b0 <keccak_squeeze+0xec>
    return pos;
  else if(!pos)
 8001574:	b915      	cbnz	r5, 800157c <keccak_squeeze+0xb8>
    KeccakF1600_StatePermute(s);
 8001576:	4638      	mov	r0, r7
 8001578:	f7fe ff9e 	bl	80004b8 <KeccakF1600_StatePermute>
 800157c:	f025 0907 	bic.w	r9, r5, #7
 8001580:	f026 0807 	bic.w	r8, r6, #7
 8001584:	44b9      	add	r9, r7
 8001586:	eb04 0a08 	add.w	sl, r4, r8

  for(i=0;i<outlen/8;i++)
 800158a:	4554      	cmp	r4, sl
 800158c:	d114      	bne.n	80015b8 <keccak_squeeze+0xf4>
    store64(out+8*i,s[pos/8+i]);
  out += 8*i;
  outlen -= 8*i;
 800158e:	eba6 0908 	sub.w	r9, r6, r8
  pos += 8*i;
 8001592:	44a8      	add	r8, r5

  store64(t,s[pos/8]);
 8001594:	f028 0807 	bic.w	r8, r8, #7
 8001598:	4447      	add	r7, r8
 800159a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800159e:	a802      	add	r0, sp, #8
 80015a0:	f7fe ff75 	bl	800048e <store64>
  for(i=0;i<outlen;i++)
    out[i] = t[i];
 80015a4:	464a      	mov	r2, r9
 80015a6:	a902      	add	r1, sp, #8
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7fe fe0d 	bl	80001c8 <memcpy>
  pos += outlen;
 80015ae:	4435      	add	r5, r6
  return pos;
}
 80015b0:	4628      	mov	r0, r5
 80015b2:	b005      	add	sp, #20
 80015b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    store64(out+8*i,s[pos/8+i]);
 80015b8:	4620      	mov	r0, r4
 80015ba:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80015be:	f7fe ff66 	bl	800048e <store64>
  for(i=0;i<outlen/8;i++)
 80015c2:	3408      	adds	r4, #8
 80015c4:	e7e1      	b.n	800158a <keccak_squeeze+0xc6>

080015c6 <pqcrystals_fips202_ref_shake256_init>:
 80015c6:	f7ff bea5 	b.w	8001314 <keccak_init>

080015ca <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 80015ca:	b513      	push	{r0, r1, r4, lr}
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 80015cc:	9200      	str	r2, [sp, #0]
{
 80015ce:	460b      	mov	r3, r1
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 80015d0:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 80015d4:	2188      	movs	r1, #136	; 0x88
{
 80015d6:	4604      	mov	r4, r0
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 80015d8:	f7ff fea6 	bl	8001328 <keccak_absorb>
 80015dc:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
}
 80015e0:	b002      	add	sp, #8
 80015e2:	bd10      	pop	{r4, pc}

080015e4 <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 80015e4:	b510      	push	{r4, lr}
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 80015e6:	231f      	movs	r3, #31
{
 80015e8:	4604      	mov	r4, r0
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 80015ea:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 80015ee:	2188      	movs	r1, #136	; 0x88
 80015f0:	f7ff ff46 	bl	8001480 <keccak_finalize>
  state->pos = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
 80015fa:	bd10      	pop	{r4, pc}

080015fc <pqcrystals_fips202_ref_shake256_squeeze>:
*              - size_t outlen :  number of bytes to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 80015fc:	b513      	push	{r0, r1, r4, lr}
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 80015fe:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2388      	movs	r3, #136	; 0x88
{
 8001606:	4614      	mov	r4, r2
  state->pos = keccak_squeeze(out, outlen, state->s, SHAKE256_RATE, state->pos);
 8001608:	f7ff ff5c 	bl	80014c4 <keccak_squeeze>
 800160c:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
}
 8001610:	b002      	add	sp, #8
 8001612:	bd10      	pop	{r4, pc}

08001614 <rand32bits>:
#include <string.h>

#define NROUNDS 24
#define ROL(a, offset) ((a << offset) ^ (a >> (64-offset)))
unsigned long rand32bits(void)
{
 8001614:	b538      	push	{r3, r4, r5, lr}
    unsigned long tmp_r;
    tmp_r = rand();
 8001616:	f002 fbd7 	bl	8003dc8 <rand>
 800161a:	4604      	mov	r4, r0
    tmp_r ^= rand() << 15;
 800161c:	f002 fbd4 	bl	8003dc8 <rand>
 8001620:	4605      	mov	r5, r0
    tmp_r ^= rand() << 30;
 8001622:	f002 fbd1 	bl	8003dc8 <rand>
 8001626:	0783      	lsls	r3, r0, #30
 8001628:	ea83 33c5 	eor.w	r3, r3, r5, lsl #15
    return tmp_r;
}
 800162c:	ea83 0004 	eor.w	r0, r3, r4
 8001630:	bd38      	pop	{r3, r4, r5, pc}

08001632 <secMult>:
//secMult from https://www.iacr.org/archive/ches2010/62250403/62250403.pdf
void secMult(uint64_t* c, uint64_t* a, uint64_t* b)
{
 8001632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001636:	b099      	sub	sp, #100	; 0x64
 8001638:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800163c:	9003      	str	r0, [sp, #12]
    unsigned int i, j, offset_i, offset_j;
    uint64_t r_ij[(MASKING_ORDER + 1) * (MASKING_ORDER + 1)];
    memset(r_ij, 0, (MASKING_ORDER + 1) * (MASKING_ORDER + 1) * 8);
 800163e:	2248      	movs	r2, #72	; 0x48
 8001640:	2100      	movs	r1, #0
 8001642:	a806      	add	r0, sp, #24
 8001644:	f002 fb6e 	bl	8003d24 <memset>
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001648:	e9dd 6701 	ldrd	r6, r7, [sp, #4]
 800164c:	ab06      	add	r3, sp, #24
 800164e:	9300      	str	r3, [sp, #0]
    memset(r_ij, 0, (MASKING_ORDER + 1) * (MASKING_ORDER + 1) * 8);
 8001650:	469a      	mov	sl, r3
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001652:	f04f 0b00 	mov.w	fp, #0
    {
        offset_i = i * (MASKING_ORDER + 1);
        for (j = i + 1; j < (MASKING_ORDER + 1); j++)
 8001656:	f10b 0b01 	add.w	fp, fp, #1
 800165a:	46b1      	mov	r9, r6
 800165c:	4655      	mov	r5, sl
 800165e:	46b8      	mov	r8, r7
 8001660:	4654      	mov	r4, sl
 8001662:	4659      	mov	r1, fp
 8001664:	2903      	cmp	r1, #3
 8001666:	f104 0408 	add.w	r4, r4, #8
 800166a:	f108 0808 	add.w	r8, r8, #8
 800166e:	f109 0908 	add.w	r9, r9, #8
 8001672:	d13a      	bne.n	80016ea <secMult+0xb8>
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001674:	f1bb 0f03 	cmp.w	fp, #3
 8001678:	f10a 0a20 	add.w	sl, sl, #32
 800167c:	f107 0708 	add.w	r7, r7, #8
 8001680:	f106 0608 	add.w	r6, r6, #8
 8001684:	d1e7      	bne.n	8001656 <secMult+0x24>
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	f1a3 0108 	sub.w	r1, r3, #8
 800168c:	9b02      	ldr	r3, [sp, #8]
 800168e:	f1a3 0208 	sub.w	r2, r3, #8
 8001692:	9b03      	ldr	r3, [sp, #12]
 8001694:	f1a3 0008 	sub.w	r0, r3, #8
            r_ij[i + offset_j] = (a[i] & b[j]);
            r_ij[i + offset_j] = r_ij[i + offset_j] ^ r_ij[j + offset_i];
            r_ij[i + offset_j] = r_ij[i + offset_j] ^ (a[j] & b[i]);
        }
    }
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001698:	2300      	movs	r3, #0
    {
        c[i] = a[i] & b[i];
 800169a:	f851 5f08 	ldr.w	r5, [r1, #8]!
 800169e:	f852 7f08 	ldr.w	r7, [r2, #8]!
 80016a2:	684c      	ldr	r4, [r1, #4]
 80016a4:	6856      	ldr	r6, [r2, #4]
 80016a6:	f8dd c000 	ldr.w	ip, [sp]
 80016aa:	403d      	ands	r5, r7
 80016ac:	f840 5f08 	str.w	r5, [r0, #8]!
 80016b0:	4034      	ands	r4, r6
 80016b2:	6044      	str	r4, [r0, #4]
        offset_i = i * (MASKING_ORDER + 1);
        for (j = 0; j < (MASKING_ORDER + 1); j++)
 80016b4:	2400      	movs	r4, #0
        {
            if (i != j)
 80016b6:	42a3      	cmp	r3, r4
 80016b8:	d009      	beq.n	80016ce <secMult+0x9c>
                c[i] = c[i] ^ r_ij[j + offset_i];
 80016ba:	e9d0 6500 	ldrd	r6, r5, [r0]
 80016be:	9501      	str	r5, [sp, #4]
 80016c0:	e9dc 5700 	ldrd	r5, r7, [ip]
 80016c4:	406e      	eors	r6, r5
 80016c6:	9d01      	ldr	r5, [sp, #4]
 80016c8:	407d      	eors	r5, r7
 80016ca:	e9c0 6500 	strd	r6, r5, [r0]
        for (j = 0; j < (MASKING_ORDER + 1); j++)
 80016ce:	3401      	adds	r4, #1
 80016d0:	2c03      	cmp	r4, #3
 80016d2:	f10c 0c08 	add.w	ip, ip, #8
 80016d6:	d1ee      	bne.n	80016b6 <secMult+0x84>
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 80016d8:	9c00      	ldr	r4, [sp, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	3418      	adds	r4, #24
 80016de:	2b03      	cmp	r3, #3
 80016e0:	9400      	str	r4, [sp, #0]
 80016e2:	d1da      	bne.n	800169a <secMult+0x68>
        }
    }
    return;
}
 80016e4:	b019      	add	sp, #100	; 0x64
 80016e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016ea:	9105      	str	r1, [sp, #20]
            r_ij[j + offset_i] = ((uint64_t)(rand32bits()) << 32) + (uint64_t)(rand32bits());
 80016ec:	f7ff ff92 	bl	8001614 <rand32bits>
 80016f0:	9004      	str	r0, [sp, #16]
 80016f2:	f7ff ff8f 	bl	8001614 <rand32bits>
 80016f6:	9b04      	ldr	r3, [sp, #16]
 80016f8:	6020      	str	r0, [r4, #0]
 80016fa:	6063      	str	r3, [r4, #4]
            r_ij[i + offset_j] = (a[i] & b[j]);
 80016fc:	e9d8 1000 	ldrd	r1, r0, [r8]
 8001700:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001704:	ea02 0c01 	and.w	ip, r2, r1
 8001708:	4018      	ands	r0, r3
            r_ij[i + offset_j] = r_ij[i + offset_j] ^ (a[j] & b[i]);
 800170a:	f8d9 1000 	ldr.w	r1, [r9]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	f8d9 3004 	ldr.w	r3, [r9, #4]
            r_ij[i + offset_j] = (a[i] & b[j]);
 8001714:	e9c5 c006 	strd	ip, r0, [r5, #24]
            r_ij[i + offset_j] = r_ij[i + offset_j] ^ (a[j] & b[i]);
 8001718:	400a      	ands	r2, r1
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	400b      	ands	r3, r1
 800171e:	6821      	ldr	r1, [r4, #0]
 8001720:	ea82 020c 	eor.w	r2, r2, ip
 8001724:	404a      	eors	r2, r1
 8001726:	6861      	ldr	r1, [r4, #4]
 8001728:	4043      	eors	r3, r0
 800172a:	404b      	eors	r3, r1
        for (j = i + 1; j < (MASKING_ORDER + 1); j++)
 800172c:	9905      	ldr	r1, [sp, #20]
            r_ij[i + offset_j] = r_ij[i + offset_j] ^ (a[j] & b[i]);
 800172e:	e9c5 2306 	strd	r2, r3, [r5, #24]
        for (j = i + 1; j < (MASKING_ORDER + 1); j++)
 8001732:	3101      	adds	r1, #1
 8001734:	3518      	adds	r5, #24
 8001736:	e795      	b.n	8001664 <secMult+0x32>

08001738 <not_mult_xor>:

void not_mult_xor(uint64_t* r, uint64_t* n, uint64_t* m, uint64_t* x)
{
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173a:	461d      	mov	r5, r3
    unsigned int i;
    uint64_t tmp_share;
    r[0] = n[0] ^ 0xFFFFFFFFFFFFFFFF;
 800173c:	e9d1 6300 	ldrd	r6, r3, [r1]
 8001740:	43db      	mvns	r3, r3
 8001742:	43f6      	mvns	r6, r6
 8001744:	e9c0 6300 	strd	r6, r3, [r0]
    for (i = 1; i < (MASKING_ORDER + 1); i++)
        r[i] = n[i];
 8001748:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
 800174c:	e9c0 6702 	strd	r6, r7, [r0, #8]
 8001750:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
{
 8001754:	4604      	mov	r4, r0
        r[i] = n[i];
 8001756:	e9c0 6704 	strd	r6, r7, [r0, #16]
    secMult(r, r, m);
 800175a:	4601      	mov	r1, r0
 800175c:	f7ff ff69 	bl	8001632 <secMult>
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001760:	f1a4 0208 	sub.w	r2, r4, #8
 8001764:	f1a5 0308 	sub.w	r3, r5, #8
 8001768:	3410      	adds	r4, #16
    {
        r[i] = r[i] ^ x[i];
 800176a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800176e:	f853 6f08 	ldr.w	r6, [r3, #8]!
 8001772:	6851      	ldr	r1, [r2, #4]
 8001774:	685d      	ldr	r5, [r3, #4]
 8001776:	4070      	eors	r0, r6
 8001778:	4069      	eors	r1, r5
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 800177a:	4294      	cmp	r4, r2
        r[i] = r[i] ^ x[i];
 800177c:	e9c2 0100 	strd	r0, r1, [r2]
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001780:	d1f3      	bne.n	800176a <not_mult_xor+0x32>
    }
    return;
}
 8001782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001784 <KeccakF1600_StatePermute_masked>:
  (uint64_t)0x8000000000008080ULL,
  (uint64_t)0x0000000080000001ULL,
  (uint64_t)0x8000000080008008ULL
};
void KeccakF1600_StatePermute_masked(uint64_t state_masked[25 * (MASKING_ORDER + 1)])
{
 8001784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001788:	f2ad 6d64 	subw	sp, sp, #1636	; 0x664
 800178c:	ab30      	add	r3, sp, #192	; 0xc0
 800178e:	931f      	str	r3, [sp, #124]	; 0x7c
 8001790:	ab36      	add	r3, sp, #216	; 0xd8
 8001792:	930e      	str	r3, [sp, #56]	; 0x38
 8001794:	ab3c      	add	r3, sp, #240	; 0xf0
 8001796:	930d      	str	r3, [sp, #52]	; 0x34
 8001798:	ab42      	add	r3, sp, #264	; 0x108
 800179a:	930c      	str	r3, [sp, #48]	; 0x30
 800179c:	ab48      	add	r3, sp, #288	; 0x120
 800179e:	930b      	str	r3, [sp, #44]	; 0x2c
 80017a0:	ab4e      	add	r3, sp, #312	; 0x138
 80017a2:	930a      	str	r3, [sp, #40]	; 0x28
 80017a4:	ab54      	add	r3, sp, #336	; 0x150
 80017a6:	9000      	str	r0, [sp, #0]
 80017a8:	931e      	str	r3, [sp, #120]	; 0x78
 80017aa:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80017ae:	ab5a      	add	r3, sp, #360	; 0x168
 80017b0:	e9dd 7c0c 	ldrd	r7, ip, [sp, #48]	; 0x30
 80017b4:	931d      	str	r3, [sp, #116]	; 0x74
 80017b6:	4618      	mov	r0, r3
 80017b8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80017ba:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 80017be:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 80017c2:	9b00      	ldr	r3, [sp, #0]
 80017c4:	2200      	movs	r2, #0
    uint64_t Esa[(MASKING_ORDER + 1)], Ese[(MASKING_ORDER + 1)], Esi[(MASKING_ORDER + 1)], Eso[(MASKING_ORDER + 1)], Esu[(MASKING_ORDER + 1)];

    //copyFromState(A, state)
    for (i = 0; i < (MASKING_ORDER + 1); i++)
    {
        Aba[i] = state_masked[ 0+(i*25)];
 80017c6:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80017ca:	e8e8 ab02 	strd	sl, fp, [r8], #8
        Abe[i] = state_masked[ 1+(i*25)];
 80017ce:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80017d2:	e8ee ab02 	strd	sl, fp, [lr], #8
        Abi[i] = state_masked[ 2+(i*25)];
 80017d6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80017da:	e8ec ab02 	strd	sl, fp, [ip], #8
        Abo[i] = state_masked[ 3+(i*25)];
 80017de:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80017e2:	e8e7 ab02 	strd	sl, fp, [r7], #8
        Abu[i] = state_masked[ 4+(i*25)];
 80017e6:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 80017ea:	e8e6 ab02 	strd	sl, fp, [r6], #8
        Aga[i] = state_masked[ 5+(i*25)];
 80017ee:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	; 0x28
 80017f2:	e8e5 ab02 	strd	sl, fp, [r5], #8
        Age[i] = state_masked[ 6+(i*25)];
 80017f6:	e9d3 ab0c 	ldrd	sl, fp, [r3, #48]	; 0x30
 80017fa:	e8e4 ab02 	strd	sl, fp, [r4], #8
        Agi[i] = state_masked[ 7+(i*25)];
 80017fe:	e9d3 ab0e 	ldrd	sl, fp, [r3, #56]	; 0x38
 8001802:	e8e0 ab02 	strd	sl, fp, [r0], #8
        Ago[i] = state_masked[ 8+(i*25)];
 8001806:	e9d3 ab10 	ldrd	sl, fp, [r3, #64]	; 0x40
 800180a:	a960      	add	r1, sp, #384	; 0x180
 800180c:	4411      	add	r1, r2
 800180e:	e9c1 ab00 	strd	sl, fp, [r1]
        Agu[i] = state_masked[ 9+(i*25)];
 8001812:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8001816:	a966      	add	r1, sp, #408	; 0x198
 8001818:	4411      	add	r1, r2
 800181a:	e9c1 ab00 	strd	sl, fp, [r1]
        Aka[i] = state_masked[10+(i*25)];
 800181e:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8001822:	a96c      	add	r1, sp, #432	; 0x1b0
 8001824:	4411      	add	r1, r2
 8001826:	e9c1 ab00 	strd	sl, fp, [r1]
        Ake[i] = state_masked[11+(i*25)];
 800182a:	e9d3 ab16 	ldrd	sl, fp, [r3, #88]	; 0x58
 800182e:	a972      	add	r1, sp, #456	; 0x1c8
 8001830:	4411      	add	r1, r2
 8001832:	e9c1 ab00 	strd	sl, fp, [r1]
        Aki[i] = state_masked[12+(i*25)];
 8001836:	e9d3 ab18 	ldrd	sl, fp, [r3, #96]	; 0x60
 800183a:	a978      	add	r1, sp, #480	; 0x1e0
 800183c:	4411      	add	r1, r2
 800183e:	e9c1 ab00 	strd	sl, fp, [r1]
        Ako[i] = state_masked[13+(i*25)];
 8001842:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8001846:	a97e      	add	r1, sp, #504	; 0x1f8
 8001848:	4411      	add	r1, r2
 800184a:	e9c1 ab00 	strd	sl, fp, [r1]
        Aku[i] = state_masked[14+(i*25)];
 800184e:	e9d3 ab1c 	ldrd	sl, fp, [r3, #112]	; 0x70
 8001852:	a984      	add	r1, sp, #528	; 0x210
 8001854:	4411      	add	r1, r2
 8001856:	e9c1 ab00 	strd	sl, fp, [r1]
        Ama[i] = state_masked[15+(i*25)];
 800185a:	e9d3 ab1e 	ldrd	sl, fp, [r3, #120]	; 0x78
 800185e:	a98a      	add	r1, sp, #552	; 0x228
 8001860:	4411      	add	r1, r2
 8001862:	e9c1 ab00 	strd	sl, fp, [r1]
        Ame[i] = state_masked[16+(i*25)];
 8001866:	e9d3 ab20 	ldrd	sl, fp, [r3, #128]	; 0x80
 800186a:	a990      	add	r1, sp, #576	; 0x240
 800186c:	4411      	add	r1, r2
 800186e:	e9c1 ab00 	strd	sl, fp, [r1]
        Ami[i] = state_masked[17+(i*25)];
 8001872:	e9d3 ab22 	ldrd	sl, fp, [r3, #136]	; 0x88
 8001876:	a996      	add	r1, sp, #600	; 0x258
 8001878:	4411      	add	r1, r2
 800187a:	e9c1 ab00 	strd	sl, fp, [r1]
        Amo[i] = state_masked[18+(i*25)];
 800187e:	e9d3 ab24 	ldrd	sl, fp, [r3, #144]	; 0x90
 8001882:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 8001886:	4411      	add	r1, r2
 8001888:	e941 abfc 	strd	sl, fp, [r1, #-1008]	; 0x3f0
        Amu[i] = state_masked[19+(i*25)];
 800188c:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	; 0x98
 8001890:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 8001894:	4411      	add	r1, r2
 8001896:	e941 abf6 	strd	sl, fp, [r1, #-984]	; 0x3d8
        Asa[i] = state_masked[20+(i*25)];
 800189a:	e9d3 ab28 	ldrd	sl, fp, [r3, #160]	; 0xa0
 800189e:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 80018a2:	4411      	add	r1, r2
 80018a4:	e941 abf0 	strd	sl, fp, [r1, #-960]	; 0x3c0
        Ase[i] = state_masked[21+(i*25)];
 80018a8:	e9d3 ab2a 	ldrd	sl, fp, [r3, #168]	; 0xa8
 80018ac:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 80018b0:	4411      	add	r1, r2
 80018b2:	e941 abea 	strd	sl, fp, [r1, #-936]	; 0x3a8
        Asi[i] = state_masked[22+(i*25)];
 80018b6:	e9d3 ab2c 	ldrd	sl, fp, [r3, #176]	; 0xb0
 80018ba:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 80018be:	4411      	add	r1, r2
 80018c0:	e941 abe4 	strd	sl, fp, [r1, #-912]	; 0x390
        Aso[i] = state_masked[23+(i*25)];
 80018c4:	e9d3 ab2e 	ldrd	sl, fp, [r3, #184]	; 0xb8
 80018c8:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 80018cc:	4411      	add	r1, r2
 80018ce:	e941 abde 	strd	sl, fp, [r1, #-888]	; 0x378
        Asu[i] = state_masked[24+(i*25)];
 80018d2:	e9d3 ab30 	ldrd	sl, fp, [r3, #192]	; 0xc0
 80018d6:	f50d 61cc 	add.w	r1, sp, #1632	; 0x660
 80018da:	4411      	add	r1, r2
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 80018dc:	3208      	adds	r2, #8
 80018de:	2a18      	cmp	r2, #24
        Asu[i] = state_masked[24+(i*25)];
 80018e0:	e941 abd8 	strd	sl, fp, [r1, #-864]	; 0x360
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 80018e4:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80018e8:	f47f af6d 	bne.w	80017c6 <KeccakF1600_StatePermute_masked+0x42>
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <KeccakF1600_StatePermute_masked+0x1a4>)
 80018ee:	9305      	str	r3, [sp, #20]
    }
    for (round = 0; round < NROUNDS; round += 2)
 80018f0:	2300      	movs	r3, #0
 80018f2:	9320      	str	r3, [sp, #128]	; 0x80
    {
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 80018f4:	ab6c      	add	r3, sp, #432	; 0x1b0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	ab8a      	add	r3, sp, #552	; 0x228
 80018fa:	9303      	str	r3, [sp, #12]
 80018fc:	aba8      	add	r3, sp, #672	; 0x2a0
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	ab78      	add	r3, sp, #480	; 0x1e0
 8001902:	9307      	str	r3, [sp, #28]
 8001904:	ab9c      	add	r3, sp, #624	; 0x270
 8001906:	9306      	str	r3, [sp, #24]
 8001908:	abc0      	add	r3, sp, #768	; 0x300
 800190a:	9304      	str	r3, [sp, #16]
{
 800190c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800190e:	9308      	str	r3, [sp, #32]
 8001910:	9b02      	ldr	r3, [sp, #8]
 8001912:	9309      	str	r3, [sp, #36]	; 0x24
 8001914:	9b03      	ldr	r3, [sp, #12]
 8001916:	930f      	str	r3, [sp, #60]	; 0x3c
 8001918:	9b01      	ldr	r3, [sp, #4]
 800191a:	9310      	str	r3, [sp, #64]	; 0x40
 800191c:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 8001920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001922:	9311      	str	r3, [sp, #68]	; 0x44
 8001924:	2300      	movs	r3, #0
 8001926:	e001      	b.n	800192c <KeccakF1600_StatePermute_masked+0x1a8>
 8001928:	08003fb8 	.word	0x08003fb8
        {
            //    prepareTheta
            BCa[i] = Aba[i] ^ Aga[i] ^ Aka[i] ^ Ama[i] ^ Asa[i];
 800192c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800192e:	e9d2 1e00 	ldrd	r1, lr, [r2]
 8001932:	3208      	adds	r2, #8
 8001934:	9211      	str	r2, [sp, #68]	; 0x44
 8001936:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001938:	e9d2 c700 	ldrd	ip, r7, [r2]
 800193c:	3208      	adds	r2, #8
 800193e:	9210      	str	r2, [sp, #64]	; 0x40
 8001940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001942:	e9d2 6400 	ldrd	r6, r4, [r2]
 8001946:	3208      	adds	r2, #8
 8001948:	920f      	str	r2, [sp, #60]	; 0x3c
 800194a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800194c:	e9d2 5000 	ldrd	r5, r0, [r2]
 8001950:	3208      	adds	r2, #8
 8001952:	9209      	str	r2, [sp, #36]	; 0x24
 8001954:	f8db 2000 	ldr.w	r2, [fp]
 8001958:	4051      	eors	r1, r2
 800195a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800195e:	ea8e 0202 	eor.w	r2, lr, r2
 8001962:	407a      	eors	r2, r7
 8001964:	4062      	eors	r2, r4
 8001966:	4042      	eors	r2, r0
 8001968:	9213      	str	r2, [sp, #76]	; 0x4c
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 800196a:	9a08      	ldr	r2, [sp, #32]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	9216      	str	r2, [sp, #88]	; 0x58
 8001970:	9a08      	ldr	r2, [sp, #32]
            BCa[i] = Aba[i] ^ Aga[i] ^ Aka[i] ^ Ama[i] ^ Asa[i];
 8001972:	ea81 010c 	eor.w	r1, r1, ip
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 8001976:	6852      	ldr	r2, [r2, #4]
 8001978:	9217      	str	r2, [sp, #92]	; 0x5c
            BCa[i] = Aba[i] ^ Aga[i] ^ Aka[i] ^ Ama[i] ^ Asa[i];
 800197a:	4071      	eors	r1, r6
 800197c:	4069      	eors	r1, r5
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 800197e:	aa36      	add	r2, sp, #216	; 0xd8
            BCa[i] = Aba[i] ^ Aga[i] ^ Aka[i] ^ Ama[i] ^ Asa[i];
 8001980:	9112      	str	r1, [sp, #72]	; 0x48
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 8001982:	18d1      	adds	r1, r2, r3
 8001984:	58d2      	ldr	r2, [r2, r3]
 8001986:	6848      	ldr	r0, [r1, #4]
 8001988:	9916      	ldr	r1, [sp, #88]	; 0x58
 800198a:	ea81 0c02 	eor.w	ip, r1, r2
 800198e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001990:	a972      	add	r1, sp, #456	; 0x1c8
 8001992:	4050      	eors	r0, r2
 8001994:	aa72      	add	r2, sp, #456	; 0x1c8
 8001996:	441a      	add	r2, r3
 8001998:	58c9      	ldr	r1, [r1, r3]
 800199a:	6854      	ldr	r4, [r2, #4]
 800199c:	aa90      	add	r2, sp, #576	; 0x240
 800199e:	441a      	add	r2, r3
 80019a0:	ea8c 0c01 	eor.w	ip, ip, r1
 80019a4:	a990      	add	r1, sp, #576	; 0x240
 80019a6:	4060      	eors	r0, r4
 80019a8:	58c9      	ldr	r1, [r1, r3]
 80019aa:	6854      	ldr	r4, [r2, #4]
 80019ac:	aaae      	add	r2, sp, #696	; 0x2b8
 80019ae:	441a      	add	r2, r3
 80019b0:	4060      	eors	r0, r4
 80019b2:	6854      	ldr	r4, [r2, #4]
 80019b4:	ea80 0204 	eor.w	r2, r0, r4
 80019b8:	9214      	str	r2, [sp, #80]	; 0x50
            BCi[i] = Abi[i] ^ Agi[i] ^ Aki[i] ^ Ami[i] ^ Asi[i];
 80019ba:	9a07      	ldr	r2, [sp, #28]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	9218      	str	r2, [sp, #96]	; 0x60
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 80019c0:	ea8c 0c01 	eor.w	ip, ip, r1
            BCi[i] = Abi[i] ^ Agi[i] ^ Aki[i] ^ Ami[i] ^ Asi[i];
 80019c4:	9a07      	ldr	r2, [sp, #28]
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 80019c6:	a9ae      	add	r1, sp, #696	; 0x2b8
            BCi[i] = Abi[i] ^ Agi[i] ^ Aki[i] ^ Ami[i] ^ Asi[i];
 80019c8:	6852      	ldr	r2, [r2, #4]
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 80019ca:	58c9      	ldr	r1, [r1, r3]
            BCi[i] = Abi[i] ^ Agi[i] ^ Aki[i] ^ Ami[i] ^ Asi[i];
 80019cc:	9219      	str	r2, [sp, #100]	; 0x64
 80019ce:	aa3c      	add	r2, sp, #240	; 0xf0
            BCe[i] = Abe[i] ^ Age[i] ^ Ake[i] ^ Ame[i] ^ Ase[i];
 80019d0:	ea8c 0c01 	eor.w	ip, ip, r1
            BCi[i] = Abi[i] ^ Agi[i] ^ Aki[i] ^ Ami[i] ^ Asi[i];
 80019d4:	18d1      	adds	r1, r2, r3
 80019d6:	a83c      	add	r0, sp, #240	; 0xf0
 80019d8:	684d      	ldr	r5, [r1, #4]
 80019da:	58c0      	ldr	r0, [r0, r3]
 80019dc:	a95a      	add	r1, sp, #360	; 0x168
 80019de:	aa5a      	add	r2, sp, #360	; 0x168
 80019e0:	441a      	add	r2, r3
 80019e2:	58ce      	ldr	r6, [r1, r3]
 80019e4:	6851      	ldr	r1, [r2, #4]
 80019e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80019e8:	4046      	eors	r6, r0
 80019ea:	4056      	eors	r6, r2
 80019ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80019ee:	404d      	eors	r5, r1
 80019f0:	4055      	eors	r5, r2
 80019f2:	aa96      	add	r2, sp, #600	; 0x258
 80019f4:	18d1      	adds	r1, r2, r3
 80019f6:	58d2      	ldr	r2, [r2, r3]
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	4056      	eors	r6, r2
 80019fc:	aab4      	add	r2, sp, #720	; 0x2d0
 80019fe:	404d      	eors	r5, r1
 8001a00:	18d1      	adds	r1, r2, r3
 8001a02:	58d2      	ldr	r2, [r2, r3]
 8001a04:	6849      	ldr	r1, [r1, #4]
 8001a06:	4056      	eors	r6, r2
            BCo[i] = Abo[i] ^ Ago[i] ^ Ako[i] ^ Amo[i] ^ Aso[i];
 8001a08:	9a06      	ldr	r2, [sp, #24]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	921a      	str	r2, [sp, #104]	; 0x68
 8001a0e:	9a06      	ldr	r2, [sp, #24]
 8001a10:	6852      	ldr	r2, [r2, #4]
 8001a12:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a14:	a860      	add	r0, sp, #384	; 0x180
 8001a16:	aa42      	add	r2, sp, #264	; 0x108
            BCi[i] = Abi[i] ^ Agi[i] ^ Aki[i] ^ Ami[i] ^ Asi[i];
 8001a18:	404d      	eors	r5, r1
            BCo[i] = Abo[i] ^ Ago[i] ^ Ako[i] ^ Amo[i] ^ Aso[i];
 8001a1a:	18d4      	adds	r4, r2, r3
 8001a1c:	18c1      	adds	r1, r0, r3
 8001a1e:	6864      	ldr	r4, [r4, #4]
 8001a20:	6849      	ldr	r1, [r1, #4]
 8001a22:	58c0      	ldr	r0, [r0, r3]
 8001a24:	58d2      	ldr	r2, [r2, r3]
 8001a26:	404c      	eors	r4, r1
 8001a28:	a97e      	add	r1, sp, #504	; 0x1f8
 8001a2a:	4042      	eors	r2, r0
 8001a2c:	18c8      	adds	r0, r1, r3
 8001a2e:	58c9      	ldr	r1, [r1, r3]
 8001a30:	6840      	ldr	r0, [r0, #4]
 8001a32:	ea82 0a01 	eor.w	sl, r2, r1
 8001a36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001a38:	ea8a 0a02 	eor.w	sl, sl, r2
 8001a3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001a3e:	4044      	eors	r4, r0
 8001a40:	a9ba      	add	r1, sp, #744	; 0x2e8
 8001a42:	4054      	eors	r4, r2
 8001a44:	18ca      	adds	r2, r1, r3
 8001a46:	58c9      	ldr	r1, [r1, r3]
 8001a48:	6852      	ldr	r2, [r2, #4]
 8001a4a:	4054      	eors	r4, r2
            BCu[i] = Abu[i] ^ Agu[i] ^ Aku[i] ^ Amu[i] ^ Asu[i];
 8001a4c:	9a04      	ldr	r2, [sp, #16]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	921c      	str	r2, [sp, #112]	; 0x70
 8001a52:	9a04      	ldr	r2, [sp, #16]
 8001a54:	a848      	add	r0, sp, #288	; 0x120
 8001a56:	6852      	ldr	r2, [r2, #4]
 8001a58:	9221      	str	r2, [sp, #132]	; 0x84
            BCo[i] = Abo[i] ^ Ago[i] ^ Ako[i] ^ Amo[i] ^ Aso[i];
 8001a5a:	ea8a 0101 	eor.w	r1, sl, r1
            BCu[i] = Abu[i] ^ Agu[i] ^ Aku[i] ^ Amu[i] ^ Asu[i];
 8001a5e:	18c2      	adds	r2, r0, r3
 8001a60:	f50d 7acc 	add.w	sl, sp, #408	; 0x198
            BCo[i] = Abo[i] ^ Ago[i] ^ Ako[i] ^ Amo[i] ^ Aso[i];
 8001a64:	9115      	str	r1, [sp, #84]	; 0x54
            BCu[i] = Abu[i] ^ Agu[i] ^ Aku[i] ^ Amu[i] ^ Asu[i];
 8001a66:	eb0a 0103 	add.w	r1, sl, r3
 8001a6a:	58c0      	ldr	r0, [r0, r3]
 8001a6c:	6857      	ldr	r7, [r2, #4]
 8001a6e:	f85a 2003 	ldr.w	r2, [sl, r3]
 8001a72:	6849      	ldr	r1, [r1, #4]
 8001a74:	4042      	eors	r2, r0
 8001a76:	a884      	add	r0, sp, #528	; 0x210
 8001a78:	404f      	eors	r7, r1
 8001a7a:	18c1      	adds	r1, r0, r3
 8001a7c:	58c0      	ldr	r0, [r0, r3]
 8001a7e:	6849      	ldr	r1, [r1, #4]
 8001a80:	404f      	eors	r7, r1
 8001a82:	a9a2      	add	r1, sp, #648	; 0x288
 8001a84:	4042      	eors	r2, r0
 8001a86:	18c8      	adds	r0, r1, r3
 8001a88:	58c9      	ldr	r1, [r1, r3]
 8001a8a:	6840      	ldr	r0, [r0, #4]
 8001a8c:	404a      	eors	r2, r1
 8001a8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a90:	404a      	eors	r2, r1
 8001a92:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001a94:	4047      	eors	r7, r0
 8001a96:	404f      	eors	r7, r1

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da[i] = BCu[i] ^ ROL(BCe[i], 1);
 8001a98:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001a9a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001a9c:	0049      	lsls	r1, r1, #1
 8001a9e:	ea41 71dc 	orr.w	r1, r1, ip, lsr #31
 8001aa2:	4079      	eors	r1, r7
 8001aa4:	ea4f 094c 	mov.w	r9, ip, lsl #1
 8001aa8:	9122      	str	r1, [sp, #136]	; 0x88
 8001aaa:	ea49 79d0 	orr.w	r9, r9, r0, lsr #31
 8001aae:	a9e4      	add	r1, sp, #912	; 0x390
 8001ab0:	a8e4      	add	r0, sp, #912	; 0x390
 8001ab2:	ea89 0902 	eor.w	r9, r9, r2
 8001ab6:	4419      	add	r1, r3
 8001ab8:	f840 9003 	str.w	r9, [r0, r3]
 8001abc:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001abe:	6048      	str	r0, [r1, #4]
            De[i] = BCa[i] ^ ROL(BCi[i], 1);
 8001ac0:	ea4f 0846 	mov.w	r8, r6, lsl #1
 8001ac4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001ac6:	ea48 78d5 	orr.w	r8, r8, r5, lsr #31
 8001aca:	ea88 0801 	eor.w	r8, r8, r1
 8001ace:	0068      	lsls	r0, r5, #1
 8001ad0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001ad2:	ea40 70d6 	orr.w	r0, r0, r6, lsr #31
 8001ad6:	4041      	eors	r1, r0
 8001ad8:	9123      	str	r1, [sp, #140]	; 0x8c
 8001ada:	a8ea      	add	r0, sp, #936	; 0x3a8
 8001adc:	a9ea      	add	r1, sp, #936	; 0x3a8
 8001ade:	4419      	add	r1, r3
 8001ae0:	f840 8003 	str.w	r8, [r0, r3]
 8001ae4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001ae6:	6048      	str	r0, [r1, #4]
            Di[i] = BCe[i] ^ ROL(BCo[i], 1);
 8001ae8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001aea:	0061      	lsls	r1, r4, #1
 8001aec:	ea41 71d0 	orr.w	r1, r1, r0, lsr #31
 8001af0:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 8001af4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001af6:	ea4e 7ed4 	orr.w	lr, lr, r4, lsr #31
 8001afa:	4041      	eors	r1, r0
 8001afc:	a8f0      	add	r0, sp, #960	; 0x3c0
 8001afe:	ea8e 0c0c 	eor.w	ip, lr, ip
 8001b02:	eb00 0e03 	add.w	lr, r0, r3
 8001b06:	f840 c003 	str.w	ip, [r0, r3]
 8001b0a:	f8ce 1004 	str.w	r1, [lr, #4]
            Do[i] = BCi[i] ^ ROL(BCu[i], 1);
 8001b0e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8001b12:	ea4e 7ed2 	orr.w	lr, lr, r2, lsr #31
 8001b16:	0052      	lsls	r2, r2, #1
 8001b18:	ea42 72d7 	orr.w	r2, r2, r7, lsr #31
 8001b1c:	4056      	eors	r6, r2
 8001b1e:	aaf6      	add	r2, sp, #984	; 0x3d8
 8001b20:	441a      	add	r2, r3
 8001b22:	a8f6      	add	r0, sp, #984	; 0x3d8
 8001b24:	ea8e 0705 	eor.w	r7, lr, r5
 8001b28:	50c6      	str	r6, [r0, r3]
 8001b2a:	6057      	str	r7, [r2, #4]
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 8001b2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001b2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001b30:	0052      	lsls	r2, r2, #1
 8001b32:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
 8001b36:	0045      	lsls	r5, r0, #1
 8001b38:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001b3a:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
 8001b3e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001b40:	4054      	eors	r4, r2
 8001b42:	aafc      	add	r2, sp, #1008	; 0x3f0
 8001b44:	4045      	eors	r5, r0
 8001b46:	441a      	add	r2, r3
 8001b48:	a8fc      	add	r0, sp, #1008	; 0x3f0
 8001b4a:	50c5      	str	r5, [r0, r3]
 8001b4c:	6054      	str	r4, [r2, #4]

            Aba[i] ^= Da[i];
 8001b4e:	f8db 2000 	ldr.w	r2, [fp]
 8001b52:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001b54:	ea82 0909 	eor.w	r9, r2, r9
 8001b58:	f8db 2004 	ldr.w	r2, [fp, #4]
 8001b5c:	f84b 9b08 	str.w	r9, [fp], #8
 8001b60:	4042      	eors	r2, r0
            BCa[i] = Aba[i];
 8001b62:	a8c6      	add	r0, sp, #792	; 0x318
 8001b64:	eb00 0e03 	add.w	lr, r0, r3
 8001b68:	f840 9003 	str.w	r9, [r0, r3]
            Aba[i] ^= Da[i];
 8001b6c:	f84b 2c04 	str.w	r2, [fp, #-4]
            BCa[i] = Aba[i];
 8001b70:	f8ce 2004 	str.w	r2, [lr, #4]
            Age[i] ^= De[i];
 8001b74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001b76:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b78:	ea82 0808 	eor.w	r8, r2, r8
 8001b7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001b7e:	4050      	eors	r0, r2
 8001b80:	9a08      	ldr	r2, [sp, #32]
 8001b82:	f842 8b08 	str.w	r8, [r2], #8
 8001b86:	f842 0c04 	str.w	r0, [r2, #-4]
 8001b8a:	9208      	str	r2, [sp, #32]
            BCe[i] = ROL(Age[i], 44);
 8001b8c:	aacc      	add	r2, sp, #816	; 0x330
 8001b8e:	eb02 0e03 	add.w	lr, r2, r3
 8001b92:	ea4f 5218 	mov.w	r2, r8, lsr #20
 8001b96:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8001b9a:	0d00      	lsrs	r0, r0, #20
 8001b9c:	ea40 3008 	orr.w	r0, r0, r8, lsl #12
 8001ba0:	f50d 784c 	add.w	r8, sp, #816	; 0x330
 8001ba4:	f848 2003 	str.w	r2, [r8, r3]
            Aki[i] ^= Di[i];
 8001ba8:	9a18      	ldr	r2, [sp, #96]	; 0x60
            BCe[i] = ROL(Age[i], 44);
 8001baa:	f8ce 0004 	str.w	r0, [lr, #4]
            Aki[i] ^= Di[i];
 8001bae:	ea82 000c 	eor.w	r0, r2, ip
 8001bb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001bb4:	4051      	eors	r1, r2
 8001bb6:	9a07      	ldr	r2, [sp, #28]
 8001bb8:	f842 0b08 	str.w	r0, [r2], #8
 8001bbc:	f842 1c04 	str.w	r1, [r2, #-4]
 8001bc0:	9207      	str	r2, [sp, #28]
            BCi[i] = ROL(Aki[i], 43);
 8001bc2:	aad2      	add	r2, sp, #840	; 0x348
 8001bc4:	eb02 0803 	add.w	r8, r2, r3
 8001bc8:	0d42      	lsrs	r2, r0, #21
 8001bca:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001bce:	0d49      	lsrs	r1, r1, #21
 8001bd0:	ea41 21c0 	orr.w	r1, r1, r0, lsl #11
 8001bd4:	a8d2      	add	r0, sp, #840	; 0x348
 8001bd6:	50c2      	str	r2, [r0, r3]
            Amo[i] ^= Do[i];
 8001bd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            BCi[i] = ROL(Aki[i], 43);
 8001bda:	f8c8 1004 	str.w	r1, [r8, #4]
            Amo[i] ^= Do[i];
 8001bde:	4056      	eors	r6, r2
 8001be0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001be2:	4057      	eors	r7, r2
 8001be4:	9a06      	ldr	r2, [sp, #24]
 8001be6:	f842 6b08 	str.w	r6, [r2], #8
            BCo[i] = ROL(Amo[i], 21);
 8001bea:	0579      	lsls	r1, r7, #21
 8001bec:	ea41 21d6 	orr.w	r1, r1, r6, lsr #11
            Amo[i] ^= Do[i];
 8001bf0:	f842 7c04 	str.w	r7, [r2, #-4]
 8001bf4:	9206      	str	r2, [sp, #24]
            BCo[i] = ROL(Amo[i], 21);
 8001bf6:	0576      	lsls	r6, r6, #21
 8001bf8:	aad8      	add	r2, sp, #864	; 0x360
 8001bfa:	ea46 26d7 	orr.w	r6, r6, r7, lsr #11
 8001bfe:	50d6      	str	r6, [r2, r3]
 8001c00:	18d0      	adds	r0, r2, r3
            Asu[i] ^= Du[i];
 8001c02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
            BCo[i] = ROL(Amo[i], 21);
 8001c04:	6041      	str	r1, [r0, #4]
            Asu[i] ^= Du[i];
 8001c06:	4055      	eors	r5, r2
 8001c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001c0a:	4054      	eors	r4, r2
 8001c0c:	9a04      	ldr	r2, [sp, #16]
 8001c0e:	f842 5b08 	str.w	r5, [r2], #8
            BCu[i] = ROL(Asu[i], 14);
 8001c12:	03a1      	lsls	r1, r4, #14
 8001c14:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
            Asu[i] ^= Du[i];
 8001c18:	9204      	str	r2, [sp, #16]
 8001c1a:	f842 4c04 	str.w	r4, [r2, #-4]
            BCu[i] = ROL(Asu[i], 14);
 8001c1e:	03ad      	lsls	r5, r5, #14
 8001c20:	aade      	add	r2, sp, #888	; 0x378
 8001c22:	ea45 4594 	orr.w	r5, r5, r4, lsr #18
 8001c26:	50d5      	str	r5, [r2, r3]
 8001c28:	18d0      	adds	r0, r2, r3
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	2b18      	cmp	r3, #24
            BCu[i] = ROL(Asu[i], 14);
 8001c2e:	6041      	str	r1, [r0, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001c30:	f47f ae7c 	bne.w	800192c <KeccakF1600_StatePermute_masked+0x1a8>
        }
        not_mult_xor(Eba, BCe, BCi, BCa);
 8001c34:	abc6      	add	r3, sp, #792	; 0x318
 8001c36:	aad2      	add	r2, sp, #840	; 0x348
 8001c38:	a9cc      	add	r1, sp, #816	; 0x330
 8001c3a:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
 8001c3e:	f7ff fd7b 	bl	8001738 <not_mult_xor>
        Eba[0] ^= (uint64_t)KeccakF_RoundConstants[round];
 8001c42:	9905      	ldr	r1, [sp, #20]
 8001c44:	f8dd 2408 	ldr.w	r2, [sp, #1032]	; 0x408
 8001c48:	f8dd 340c 	ldr.w	r3, [sp, #1036]	; 0x40c
 8001c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c50:	4042      	eors	r2, r0
 8001c52:	404b      	eors	r3, r1
 8001c54:	f8cd 2408 	str.w	r2, [sp, #1032]	; 0x408
 8001c58:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
        not_mult_xor(Ebe, BCi, BCo, BCe);
 8001c5c:	aad8      	add	r2, sp, #864	; 0x360
 8001c5e:	abcc      	add	r3, sp, #816	; 0x330
 8001c60:	a9d2      	add	r1, sp, #840	; 0x348
 8001c62:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8001c66:	f7ff fd67 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ebi, BCo, BCu, BCi);
 8001c6a:	abd2      	add	r3, sp, #840	; 0x348
 8001c6c:	aade      	add	r2, sp, #888	; 0x378
 8001c6e:	a9d8      	add	r1, sp, #864	; 0x360
 8001c70:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 8001c74:	f7ff fd60 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ebo, BCu, BCa, BCo);
 8001c78:	abd8      	add	r3, sp, #864	; 0x360
 8001c7a:	aac6      	add	r2, sp, #792	; 0x318
 8001c7c:	a9de      	add	r1, sp, #888	; 0x378
 8001c7e:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 8001c82:	f7ff fd59 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ebu, BCa, BCe, BCu);
 8001c86:	abde      	add	r3, sp, #888	; 0x378
 8001c88:	aacc      	add	r2, sp, #816	; 0x330
 8001c8a:	a9c6      	add	r1, sp, #792	; 0x318
 8001c8c:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
 8001c90:	f7ff fd52 	bl	8001738 <not_mult_xor>
        //Eba[i] ^= (uint64_t)KeccakF_RoundConstants[round];
        //Ebe[i] = BCe ^ ((~BCi) & BCo);
        //Ebi[i] = BCi ^ ((~BCo) & BCu);
        //Ebo[i] = BCo ^ ((~BCu) & BCa);
        //Ebu[i] = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001c94:	abf6      	add	r3, sp, #984	; 0x3d8
 8001c96:	931a      	str	r3, [sp, #104]	; 0x68
 8001c98:	abc6      	add	r3, sp, #792	; 0x318
 8001c9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001c9c:	abfc      	add	r3, sp, #1008	; 0x3f0
 8001c9e:	9318      	str	r3, [sp, #96]	; 0x60
 8001ca0:	abcc      	add	r3, sp, #816	; 0x330
 8001ca2:	9319      	str	r3, [sp, #100]	; 0x64
 8001ca4:	abe4      	add	r3, sp, #912	; 0x390
 8001ca6:	9316      	str	r3, [sp, #88]	; 0x58
 8001ca8:	abd2      	add	r3, sp, #840	; 0x348
 8001caa:	9317      	str	r3, [sp, #92]	; 0x5c
 8001cac:	abea      	add	r3, sp, #936	; 0x3a8
 8001cae:	9314      	str	r3, [sp, #80]	; 0x50
 8001cb0:	abd8      	add	r3, sp, #864	; 0x360
 8001cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8001cb4:	abf0      	add	r3, sp, #960	; 0x3c0
 8001cb6:	931c      	str	r3, [sp, #112]	; 0x70
 8001cb8:	abde      	add	r3, sp, #888	; 0x378
 8001cba:	9313      	str	r3, [sp, #76]	; 0x4c
 8001cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	9309      	str	r3, [sp, #36]	; 0x24
        not_mult_xor(Ebu, BCa, BCe, BCu);
 8001cc2:	abde      	add	r3, sp, #888	; 0x378
 8001cc4:	9304      	str	r3, [sp, #16]
 8001cc6:	abd8      	add	r3, sp, #864	; 0x360
 8001cc8:	9306      	str	r3, [sp, #24]
 8001cca:	abc6      	add	r3, sp, #792	; 0x318
 8001ccc:	acfc      	add	r4, sp, #1008	; 0x3f0
 8001cce:	9308      	str	r3, [sp, #32]
 8001cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cd2:	9407      	str	r4, [sp, #28]
 8001cd4:	4650      	mov	r0, sl
 8001cd6:	a990      	add	r1, sp, #576	; 0x240
 8001cd8:	aab4      	add	r2, sp, #720	; 0x2d0
 8001cda:	adf0      	add	r5, sp, #960	; 0x3c0
 8001cdc:	f50d 7e6a 	add.w	lr, sp, #936	; 0x3a8
 8001ce0:	f50d 7852 	add.w	r8, sp, #840	; 0x348
 8001ce4:	f50d 7964 	add.w	r9, sp, #912	; 0x390
 8001ce8:	f50d 7a4c 	add.w	sl, sp, #816	; 0x330
 8001cec:	f50d 7c76 	add.w	ip, sp, #984	; 0x3d8
        {
            Abo[i] ^= Do[i];
 8001cf0:	e9dc 7600 	ldrd	r7, r6, [ip]
 8001cf4:	681c      	ldr	r4, [r3, #0]
 8001cf6:	4067      	eors	r7, r4
 8001cf8:	685c      	ldr	r4, [r3, #4]
 8001cfa:	f843 7b08 	str.w	r7, [r3], #8
 8001cfe:	ea84 0b06 	eor.w	fp, r4, r6
            BCa[i] = ROL(Abo[i], 28);
 8001d02:	ea4f 760b 	mov.w	r6, fp, lsl #28
 8001d06:	9c08      	ldr	r4, [sp, #32]
            Abo[i] ^= Do[i];
 8001d08:	f843 bc04 	str.w	fp, [r3, #-4]
            BCa[i] = ROL(Abo[i], 28);
 8001d0c:	ea46 1617 	orr.w	r6, r6, r7, lsr #4
 8001d10:	073f      	lsls	r7, r7, #28
 8001d12:	ea47 171b 	orr.w	r7, r7, fp, lsr #4
 8001d16:	e9c4 7600 	strd	r7, r6, [r4]
 8001d1a:	3408      	adds	r4, #8
 8001d1c:	9408      	str	r4, [sp, #32]
            Agu[i] ^= Du[i];
 8001d1e:	9c07      	ldr	r4, [sp, #28]
 8001d20:	e9d4 7600 	ldrd	r7, r6, [r4]
 8001d24:	3408      	adds	r4, #8
 8001d26:	9407      	str	r4, [sp, #28]
 8001d28:	6804      	ldr	r4, [r0, #0]
 8001d2a:	4067      	eors	r7, r4
 8001d2c:	6844      	ldr	r4, [r0, #4]
 8001d2e:	f840 7b08 	str.w	r7, [r0], #8
 8001d32:	ea84 0b06 	eor.w	fp, r4, r6
            BCe[i] = ROL(Agu[i], 20);
            Aka[i] ^= Da[i];
 8001d36:	9c01      	ldr	r4, [sp, #4]
            Agu[i] ^= Du[i];
 8001d38:	f840 bc04 	str.w	fp, [r0, #-4]
            Aka[i] ^= Da[i];
 8001d3c:	6824      	ldr	r4, [r4, #0]
 8001d3e:	940f      	str	r4, [sp, #60]	; 0x3c
            BCe[i] = ROL(Agu[i], 20);
 8001d40:	ea4f 560b 	mov.w	r6, fp, lsl #20
 8001d44:	ea46 3617 	orr.w	r6, r6, r7, lsr #12
            Aka[i] ^= Da[i];
 8001d48:	9c01      	ldr	r4, [sp, #4]
            BCe[i] = ROL(Agu[i], 20);
 8001d4a:	053f      	lsls	r7, r7, #20
 8001d4c:	ea47 371b 	orr.w	r7, r7, fp, lsr #12
            Aka[i] ^= Da[i];
 8001d50:	6864      	ldr	r4, [r4, #4]
 8001d52:	9410      	str	r4, [sp, #64]	; 0x40
            BCe[i] = ROL(Agu[i], 20);
 8001d54:	e9ca 7600 	strd	r7, r6, [sl]
            Aka[i] ^= Da[i];
 8001d58:	e9d9 7600 	ldrd	r7, r6, [r9]
 8001d5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001d5e:	4067      	eors	r7, r4
 8001d60:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001d62:	ea84 0b06 	eor.w	fp, r4, r6
 8001d66:	9c01      	ldr	r4, [sp, #4]
            BCi[i] = ROL(Aka[i], 3);
 8001d68:	ea4f 06cb 	mov.w	r6, fp, lsl #3
            Aka[i] ^= Da[i];
 8001d6c:	f844 7b08 	str.w	r7, [r4], #8
            BCi[i] = ROL(Aka[i], 3);
 8001d70:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 8001d74:	00ff      	lsls	r7, r7, #3
 8001d76:	ea47 775b 	orr.w	r7, r7, fp, lsr #29
            Aka[i] ^= Da[i];
 8001d7a:	9401      	str	r4, [sp, #4]
            BCi[i] = ROL(Aka[i], 3);
 8001d7c:	e9c8 7600 	strd	r7, r6, [r8]
            Ame[i] ^= De[i];
 8001d80:	e9de 7600 	ldrd	r7, r6, [lr]
            Aka[i] ^= Da[i];
 8001d84:	f844 bc04 	str.w	fp, [r4, #-4]
            Ame[i] ^= De[i];
 8001d88:	680c      	ldr	r4, [r1, #0]
 8001d8a:	4067      	eors	r7, r4
 8001d8c:	684c      	ldr	r4, [r1, #4]
 8001d8e:	f841 7b08 	str.w	r7, [r1], #8
 8001d92:	4066      	eors	r6, r4
            BCo[i] = ROL(Ame[i], 45);
 8001d94:	ea4f 4bd7 	mov.w	fp, r7, lsr #19
 8001d98:	9c06      	ldr	r4, [sp, #24]
            Ame[i] ^= De[i];
 8001d9a:	f841 6c04 	str.w	r6, [r1, #-4]
            BCo[i] = ROL(Ame[i], 45);
 8001d9e:	ea4b 3b46 	orr.w	fp, fp, r6, lsl #13
 8001da2:	0cf6      	lsrs	r6, r6, #19
 8001da4:	ea46 3647 	orr.w	r6, r6, r7, lsl #13
 8001da8:	e9c4 b600 	strd	fp, r6, [r4]
            Asi[i] ^= Di[i];
 8001dac:	e9d5 7600 	ldrd	r7, r6, [r5]
 8001db0:	3408      	adds	r4, #8
 8001db2:	9406      	str	r4, [sp, #24]
 8001db4:	6814      	ldr	r4, [r2, #0]
 8001db6:	4067      	eors	r7, r4
 8001db8:	6854      	ldr	r4, [r2, #4]
 8001dba:	f842 7b08 	str.w	r7, [r2], #8
 8001dbe:	4066      	eors	r6, r4
            BCu[i] = ROL(Asi[i], 61);
 8001dc0:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 8001dc4:	9c04      	ldr	r4, [sp, #16]
            Asi[i] ^= Di[i];
 8001dc6:	f842 6c04 	str.w	r6, [r2, #-4]
            BCu[i] = ROL(Asi[i], 61);
 8001dca:	ea4b 7b46 	orr.w	fp, fp, r6, lsl #29
 8001dce:	08f6      	lsrs	r6, r6, #3
 8001dd0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8001dd4:	e9c4 b600 	strd	fp, r6, [r4]
 8001dd8:	3408      	adds	r4, #8
 8001dda:	9404      	str	r4, [sp, #16]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001ddc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001dde:	429c      	cmp	r4, r3
 8001de0:	f10c 0c08 	add.w	ip, ip, #8
 8001de4:	f10a 0a08 	add.w	sl, sl, #8
            BCi[i] = ROL(Aka[i], 3);
 8001de8:	f109 0908 	add.w	r9, r9, #8
 8001dec:	f108 0808 	add.w	r8, r8, #8
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001df0:	f10e 0e08 	add.w	lr, lr, #8
 8001df4:	f105 0508 	add.w	r5, r5, #8
 8001df8:	f47f af7a 	bne.w	8001cf0 <KeccakF1600_StatePermute_masked+0x56c>
        }
        not_mult_xor(Ega, BCe, BCi, BCa);
 8001dfc:	abc6      	add	r3, sp, #792	; 0x318
 8001dfe:	aad2      	add	r2, sp, #840	; 0x348
 8001e00:	a9cc      	add	r1, sp, #816	; 0x330
 8001e02:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
 8001e06:	f7ff fc97 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ege, BCi, BCo, BCe);
 8001e0a:	abcc      	add	r3, sp, #816	; 0x330
 8001e0c:	aad8      	add	r2, sp, #864	; 0x360
 8001e0e:	a9d2      	add	r1, sp, #840	; 0x348
 8001e10:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
 8001e14:	f7ff fc90 	bl	8001738 <not_mult_xor>
        not_mult_xor(Egi, BCo, BCu, BCi);
 8001e18:	abd2      	add	r3, sp, #840	; 0x348
 8001e1a:	aade      	add	r2, sp, #888	; 0x378
 8001e1c:	a9d8      	add	r1, sp, #864	; 0x360
 8001e1e:	f50d 6096 	add.w	r0, sp, #1200	; 0x4b0
 8001e22:	f7ff fc89 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ego, BCu, BCa, BCo);
 8001e26:	abd8      	add	r3, sp, #864	; 0x360
 8001e28:	aac6      	add	r2, sp, #792	; 0x318
 8001e2a:	a9de      	add	r1, sp, #888	; 0x378
 8001e2c:	f50d 6099 	add.w	r0, sp, #1224	; 0x4c8
 8001e30:	f7ff fc82 	bl	8001738 <not_mult_xor>
        not_mult_xor(Egu, BCa, BCe, BCu);
 8001e34:	abde      	add	r3, sp, #888	; 0x378
 8001e36:	aacc      	add	r2, sp, #816	; 0x330
 8001e38:	a9c6      	add	r1, sp, #792	; 0x318
 8001e3a:	f50d 609c 	add.w	r0, sp, #1248	; 0x4e0
 8001e3e:	f7ff fc7b 	bl	8001738 <not_mult_xor>
        //Ega = BCa ^ ((~BCe) & BCi);
        //Ege = BCe ^ ((~BCi) & BCo);
        //Egi = BCi ^ ((~BCo) & BCu);
        //Ego = BCo ^ ((~BCu) & BCa);
        //Egu = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        not_mult_xor(Egu, BCa, BCe, BCu);
 8001e44:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001e46:	3318      	adds	r3, #24
 8001e48:	9308      	str	r3, [sp, #32]
 8001e4a:	abde      	add	r3, sp, #888	; 0x378
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	abd8      	add	r3, sp, #864	; 0x360
 8001e50:	9304      	str	r3, [sp, #16]
 8001e52:	abc6      	add	r3, sp, #792	; 0x318
 8001e54:	acf0      	add	r4, sp, #960	; 0x3c0
 8001e56:	9307      	str	r3, [sp, #28]
 8001e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e5a:	9406      	str	r4, [sp, #24]
 8001e5c:	a97e      	add	r1, sp, #504	; 0x1f8
 8001e5e:	aaa2      	add	r2, sp, #648	; 0x288
 8001e60:	ade4      	add	r5, sp, #912	; 0x390
 8001e62:	f50d 7e7c 	add.w	lr, sp, #1008	; 0x3f0
 8001e66:	f50d 7852 	add.w	r8, sp, #840	; 0x348
 8001e6a:	f50d 7976 	add.w	r9, sp, #984	; 0x3d8
 8001e6e:	f50d 7a4c 	add.w	sl, sp, #816	; 0x330
 8001e72:	f50d 7c6a 	add.w	ip, sp, #936	; 0x3a8
        {
            Abe[i] ^= De[i];
 8001e76:	e9dc 7600 	ldrd	r7, r6, [ip]
 8001e7a:	681c      	ldr	r4, [r3, #0]
 8001e7c:	4067      	eors	r7, r4
 8001e7e:	685c      	ldr	r4, [r3, #4]
 8001e80:	f843 7b08 	str.w	r7, [r3], #8
 8001e84:	ea84 0b06 	eor.w	fp, r4, r6
            BCa[i] = ROL(Abe[i], 1);
 8001e88:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8001e8c:	9c07      	ldr	r4, [sp, #28]
            Abe[i] ^= De[i];
 8001e8e:	f843 bc04 	str.w	fp, [r3, #-4]
            BCa[i] = ROL(Abe[i], 1);
 8001e92:	ea46 76d7 	orr.w	r6, r6, r7, lsr #31
 8001e96:	007f      	lsls	r7, r7, #1
 8001e98:	ea47 77db 	orr.w	r7, r7, fp, lsr #31
 8001e9c:	e9c4 7600 	strd	r7, r6, [r4]
 8001ea0:	3408      	adds	r4, #8
 8001ea2:	9407      	str	r4, [sp, #28]
            Agi[i] ^= Di[i];
 8001ea4:	9c06      	ldr	r4, [sp, #24]
 8001ea6:	e9d4 7600 	ldrd	r7, r6, [r4]
 8001eaa:	3408      	adds	r4, #8
 8001eac:	9406      	str	r4, [sp, #24]
 8001eae:	6804      	ldr	r4, [r0, #0]
 8001eb0:	4067      	eors	r7, r4
 8001eb2:	6844      	ldr	r4, [r0, #4]
 8001eb4:	f840 7b08 	str.w	r7, [r0], #8
 8001eb8:	ea84 0b06 	eor.w	fp, r4, r6
            BCe[i] = ROL(Agi[i], 6);
 8001ebc:	ea4f 168b 	mov.w	r6, fp, lsl #6
 8001ec0:	ea46 6697 	orr.w	r6, r6, r7, lsr #26
 8001ec4:	01bf      	lsls	r7, r7, #6
 8001ec6:	ea47 679b 	orr.w	r7, r7, fp, lsr #26
 8001eca:	e9ca 7600 	strd	r7, r6, [sl]
            Ako[i] ^= Do[i];
 8001ece:	e9d9 7600 	ldrd	r7, r6, [r9]
 8001ed2:	680c      	ldr	r4, [r1, #0]
            Agi[i] ^= Di[i];
 8001ed4:	f840 bc04 	str.w	fp, [r0, #-4]
            Ako[i] ^= Do[i];
 8001ed8:	4067      	eors	r7, r4
 8001eda:	684c      	ldr	r4, [r1, #4]
 8001edc:	f841 7b08 	str.w	r7, [r1], #8
 8001ee0:	ea84 0b06 	eor.w	fp, r4, r6
            BCi[i] = ROL(Ako[i], 25);
 8001ee4:	ea4f 664b 	mov.w	r6, fp, lsl #25
 8001ee8:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 8001eec:	067f      	lsls	r7, r7, #25
 8001eee:	ea47 17db 	orr.w	r7, r7, fp, lsr #7
 8001ef2:	e9c8 7600 	strd	r7, r6, [r8]
            Amu[i] ^= Du[i];
 8001ef6:	e9de 7600 	ldrd	r7, r6, [lr]
 8001efa:	6814      	ldr	r4, [r2, #0]
            Ako[i] ^= Do[i];
 8001efc:	f841 bc04 	str.w	fp, [r1, #-4]
            Amu[i] ^= Du[i];
 8001f00:	4067      	eors	r7, r4
 8001f02:	6854      	ldr	r4, [r2, #4]
 8001f04:	f842 7b08 	str.w	r7, [r2], #8
 8001f08:	ea84 0b06 	eor.w	fp, r4, r6
            BCo[i] = ROL(Amu[i], 8);
 8001f0c:	ea4f 260b 	mov.w	r6, fp, lsl #8
 8001f10:	9c04      	ldr	r4, [sp, #16]
            Amu[i] ^= Du[i];
 8001f12:	f842 bc04 	str.w	fp, [r2, #-4]
            BCo[i] = ROL(Amu[i], 8);
 8001f16:	ea46 6617 	orr.w	r6, r6, r7, lsr #24
 8001f1a:	023f      	lsls	r7, r7, #8
 8001f1c:	ea47 671b 	orr.w	r7, r7, fp, lsr #24
 8001f20:	e9c4 7600 	strd	r7, r6, [r4]
 8001f24:	3408      	adds	r4, #8
 8001f26:	9404      	str	r4, [sp, #16]
            Asa[i] ^= Da[i];
 8001f28:	9c02      	ldr	r4, [sp, #8]
 8001f2a:	6824      	ldr	r4, [r4, #0]
 8001f2c:	9409      	str	r4, [sp, #36]	; 0x24
 8001f2e:	9c02      	ldr	r4, [sp, #8]
 8001f30:	e9d5 7600 	ldrd	r7, r6, [r5]
 8001f34:	6864      	ldr	r4, [r4, #4]
 8001f36:	940f      	str	r4, [sp, #60]	; 0x3c
 8001f38:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001f3a:	4067      	eors	r7, r4
 8001f3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8001f3e:	ea84 0b06 	eor.w	fp, r4, r6
 8001f42:	9c02      	ldr	r4, [sp, #8]
 8001f44:	f844 7b08 	str.w	r7, [r4], #8
            BCu[i] = ROL(Asa[i], 18);
 8001f48:	ea4f 468b 	mov.w	r6, fp, lsl #18
 8001f4c:	ea46 3697 	orr.w	r6, r6, r7, lsr #14
            Asa[i] ^= Da[i];
 8001f50:	9402      	str	r4, [sp, #8]
 8001f52:	f844 bc04 	str.w	fp, [r4, #-4]
            BCu[i] = ROL(Asa[i], 18);
 8001f56:	04bf      	lsls	r7, r7, #18
 8001f58:	9c01      	ldr	r4, [sp, #4]
 8001f5a:	ea47 379b 	orr.w	r7, r7, fp, lsr #14
 8001f5e:	e9c4 7600 	strd	r7, r6, [r4]
 8001f62:	3408      	adds	r4, #8
 8001f64:	9401      	str	r4, [sp, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001f66:	9c08      	ldr	r4, [sp, #32]
 8001f68:	429c      	cmp	r4, r3
 8001f6a:	f10c 0c08 	add.w	ip, ip, #8
 8001f6e:	f10a 0a08 	add.w	sl, sl, #8
            BCi[i] = ROL(Ako[i], 25);
 8001f72:	f109 0908 	add.w	r9, r9, #8
 8001f76:	f108 0808 	add.w	r8, r8, #8
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001f7a:	f10e 0e08 	add.w	lr, lr, #8
 8001f7e:	f105 0508 	add.w	r5, r5, #8
 8001f82:	f47f af78 	bne.w	8001e76 <KeccakF1600_StatePermute_masked+0x6f2>
        }
        not_mult_xor(Eka, BCe, BCi, BCa);
 8001f86:	abc6      	add	r3, sp, #792	; 0x318
 8001f88:	aad2      	add	r2, sp, #840	; 0x348
 8001f8a:	a9cc      	add	r1, sp, #816	; 0x330
 8001f8c:	f50d 609f 	add.w	r0, sp, #1272	; 0x4f8
 8001f90:	f7ff fbd2 	bl	8001738 <not_mult_xor>
        not_mult_xor(Eke, BCi, BCo, BCe);
 8001f94:	abcc      	add	r3, sp, #816	; 0x330
 8001f96:	aad8      	add	r2, sp, #864	; 0x360
 8001f98:	a9d2      	add	r1, sp, #840	; 0x348
 8001f9a:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
 8001f9e:	f7ff fbcb 	bl	8001738 <not_mult_xor>
        not_mult_xor(Eki, BCo, BCu, BCi);
 8001fa2:	abd2      	add	r3, sp, #840	; 0x348
 8001fa4:	aade      	add	r2, sp, #888	; 0x378
 8001fa6:	a9d8      	add	r1, sp, #864	; 0x360
 8001fa8:	f50d 60a5 	add.w	r0, sp, #1320	; 0x528
 8001fac:	f7ff fbc4 	bl	8001738 <not_mult_xor>
        not_mult_xor(Eko, BCu, BCa, BCo);
 8001fb0:	abd8      	add	r3, sp, #864	; 0x360
 8001fb2:	aac6      	add	r2, sp, #792	; 0x318
 8001fb4:	a9de      	add	r1, sp, #888	; 0x378
 8001fb6:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 8001fba:	f7ff fbbd 	bl	8001738 <not_mult_xor>
        not_mult_xor(Eku, BCa, BCe, BCu);
 8001fbe:	abde      	add	r3, sp, #888	; 0x378
 8001fc0:	aacc      	add	r2, sp, #816	; 0x330
 8001fc2:	a9c6      	add	r1, sp, #792	; 0x318
 8001fc4:	f50d 60ab 	add.w	r0, sp, #1368	; 0x558
 8001fc8:	f7ff fbb6 	bl	8001738 <not_mult_xor>
        //Eka = BCa ^ ((~BCe) & BCi);
        //Eke = BCe ^ ((~BCi) & BCo);
        //Eki = BCi ^ ((~BCo) & BCu);
        //Eko = BCo ^ ((~BCu) & BCa);
        //Eku = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8001fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        not_mult_xor(Eku, BCa, BCe, BCu);
 8001fce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	9308      	str	r3, [sp, #32]
 8001fd4:	abde      	add	r3, sp, #888	; 0x378
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	abd8      	add	r3, sp, #864	; 0x360
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	abcc      	add	r3, sp, #816	; 0x330
 8001fde:	9304      	str	r3, [sp, #16]
 8001fe0:	abc6      	add	r3, sp, #792	; 0x318
 8001fe2:	ade4      	add	r5, sp, #912	; 0x390
 8001fe4:	9307      	str	r3, [sp, #28]
 8001fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fe8:	9506      	str	r5, [sp, #24]
 8001fea:	a872      	add	r0, sp, #456	; 0x1c8
 8001fec:	a996      	add	r1, sp, #600	; 0x258
 8001fee:	aaba      	add	r2, sp, #744	; 0x2e8
 8001ff0:	f50d 7c76 	add.w	ip, sp, #984	; 0x3d8
 8001ff4:	f50d 7870 	add.w	r8, sp, #960	; 0x3c0
 8001ff8:	f50d 7952 	add.w	r9, sp, #840	; 0x348
 8001ffc:	f50d 7a6a 	add.w	sl, sp, #936	; 0x3a8
 8002000:	f50d 7e7c 	add.w	lr, sp, #1008	; 0x3f0
        {
            Abu[i] ^= Du[i];
 8002004:	e9de 7600 	ldrd	r7, r6, [lr]
 8002008:	681d      	ldr	r5, [r3, #0]
 800200a:	406f      	eors	r7, r5
 800200c:	685d      	ldr	r5, [r3, #4]
 800200e:	f843 7b08 	str.w	r7, [r3], #8
 8002012:	ea85 0b06 	eor.w	fp, r5, r6
            BCa[i] = ROL(Abu[i], 27);
 8002016:	ea4f 66cb 	mov.w	r6, fp, lsl #27
 800201a:	9d07      	ldr	r5, [sp, #28]
            Abu[i] ^= Du[i];
 800201c:	f843 bc04 	str.w	fp, [r3, #-4]
            BCa[i] = ROL(Abu[i], 27);
 8002020:	ea46 1657 	orr.w	r6, r6, r7, lsr #5
 8002024:	06ff      	lsls	r7, r7, #27
 8002026:	ea47 175b 	orr.w	r7, r7, fp, lsr #5
 800202a:	e9c5 7600 	strd	r7, r6, [r5]
 800202e:	3508      	adds	r5, #8
 8002030:	9507      	str	r5, [sp, #28]
            Aga[i] ^= Da[i];
 8002032:	9d06      	ldr	r5, [sp, #24]
 8002034:	e9d5 7600 	ldrd	r7, r6, [r5]
 8002038:	3508      	adds	r5, #8
 800203a:	9506      	str	r5, [sp, #24]
 800203c:	6825      	ldr	r5, [r4, #0]
 800203e:	406f      	eors	r7, r5
 8002040:	6865      	ldr	r5, [r4, #4]
 8002042:	f844 7b08 	str.w	r7, [r4], #8
 8002046:	406e      	eors	r6, r5
            BCe[i] = ROL(Aga[i], 36);
 8002048:	ea4f 7b17 	mov.w	fp, r7, lsr #28
 800204c:	9d04      	ldr	r5, [sp, #16]
            Aga[i] ^= Da[i];
 800204e:	f844 6c04 	str.w	r6, [r4, #-4]
            BCe[i] = ROL(Aga[i], 36);
 8002052:	ea4b 1b06 	orr.w	fp, fp, r6, lsl #4
 8002056:	0f36      	lsrs	r6, r6, #28
 8002058:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
 800205c:	e9c5 b600 	strd	fp, r6, [r5]
            Ake[i] ^= De[i];
 8002060:	e9da 7600 	ldrd	r7, r6, [sl]
 8002064:	3508      	adds	r5, #8
 8002066:	9504      	str	r5, [sp, #16]
 8002068:	6805      	ldr	r5, [r0, #0]
 800206a:	406f      	eors	r7, r5
 800206c:	6845      	ldr	r5, [r0, #4]
 800206e:	f840 7b08 	str.w	r7, [r0], #8
 8002072:	ea85 0b06 	eor.w	fp, r5, r6
            BCi[i] = ROL(Ake[i], 10);
 8002076:	ea4f 268b 	mov.w	r6, fp, lsl #10
 800207a:	ea46 5697 	orr.w	r6, r6, r7, lsr #22
 800207e:	02bf      	lsls	r7, r7, #10
 8002080:	ea47 579b 	orr.w	r7, r7, fp, lsr #22
 8002084:	e9c9 7600 	strd	r7, r6, [r9]
            Ami[i] ^= Di[i];
 8002088:	e9d8 7600 	ldrd	r7, r6, [r8]
            Ake[i] ^= De[i];
 800208c:	f840 bc04 	str.w	fp, [r0, #-4]
            Ami[i] ^= Di[i];
 8002090:	680d      	ldr	r5, [r1, #0]
 8002092:	406f      	eors	r7, r5
 8002094:	684d      	ldr	r5, [r1, #4]
 8002096:	f841 7b08 	str.w	r7, [r1], #8
 800209a:	ea85 0b06 	eor.w	fp, r5, r6
            BCo[i] = ROL(Ami[i], 15);
 800209e:	ea4f 36cb 	mov.w	r6, fp, lsl #15
 80020a2:	9d02      	ldr	r5, [sp, #8]
            Ami[i] ^= Di[i];
 80020a4:	f841 bc04 	str.w	fp, [r1, #-4]
            BCo[i] = ROL(Ami[i], 15);
 80020a8:	ea46 4657 	orr.w	r6, r6, r7, lsr #17
 80020ac:	03ff      	lsls	r7, r7, #15
 80020ae:	ea47 475b 	orr.w	r7, r7, fp, lsr #17
 80020b2:	e9c5 7600 	strd	r7, r6, [r5]
            Aso[i] ^= Do[i];
 80020b6:	e9dc 7600 	ldrd	r7, r6, [ip]
 80020ba:	3508      	adds	r5, #8
 80020bc:	9502      	str	r5, [sp, #8]
 80020be:	6815      	ldr	r5, [r2, #0]
 80020c0:	406f      	eors	r7, r5
 80020c2:	6855      	ldr	r5, [r2, #4]
 80020c4:	f842 7b08 	str.w	r7, [r2], #8
 80020c8:	406e      	eors	r6, r5
            BCu[i] = ROL(Aso[i], 56);
 80020ca:	ea4f 2b17 	mov.w	fp, r7, lsr #8
 80020ce:	9d01      	ldr	r5, [sp, #4]
            Aso[i] ^= Do[i];
 80020d0:	f842 6c04 	str.w	r6, [r2, #-4]
            BCu[i] = ROL(Aso[i], 56);
 80020d4:	ea4b 6b06 	orr.w	fp, fp, r6, lsl #24
 80020d8:	0a36      	lsrs	r6, r6, #8
 80020da:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 80020de:	e9c5 b600 	strd	fp, r6, [r5]
 80020e2:	3508      	adds	r5, #8
 80020e4:	9501      	str	r5, [sp, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 80020e6:	9d08      	ldr	r5, [sp, #32]
 80020e8:	429d      	cmp	r5, r3
 80020ea:	f10e 0e08 	add.w	lr, lr, #8
 80020ee:	f10a 0a08 	add.w	sl, sl, #8
 80020f2:	f109 0908 	add.w	r9, r9, #8
 80020f6:	f108 0808 	add.w	r8, r8, #8
 80020fa:	f10c 0c08 	add.w	ip, ip, #8
 80020fe:	d181      	bne.n	8002004 <KeccakF1600_StatePermute_masked+0x880>
        }
        not_mult_xor(Ema, BCe, BCi, BCa);
 8002100:	abc6      	add	r3, sp, #792	; 0x318
 8002102:	aad2      	add	r2, sp, #840	; 0x348
 8002104:	a9cc      	add	r1, sp, #816	; 0x330
 8002106:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
 800210a:	f7ff fb15 	bl	8001738 <not_mult_xor>
        not_mult_xor(Eme, BCi, BCo, BCe);
 800210e:	abcc      	add	r3, sp, #816	; 0x330
 8002110:	aad8      	add	r2, sp, #864	; 0x360
 8002112:	a9d2      	add	r1, sp, #840	; 0x348
 8002114:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
 8002118:	f7ff fb0e 	bl	8001738 <not_mult_xor>
        not_mult_xor(Emi, BCo, BCu, BCi);
 800211c:	abd2      	add	r3, sp, #840	; 0x348
 800211e:	aade      	add	r2, sp, #888	; 0x378
 8002120:	a9d8      	add	r1, sp, #864	; 0x360
 8002122:	f50d 60b4 	add.w	r0, sp, #1440	; 0x5a0
 8002126:	f7ff fb07 	bl	8001738 <not_mult_xor>
        not_mult_xor(Emo, BCu, BCa, BCo);
 800212a:	abd8      	add	r3, sp, #864	; 0x360
 800212c:	aac6      	add	r2, sp, #792	; 0x318
 800212e:	a9de      	add	r1, sp, #888	; 0x378
 8002130:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
 8002134:	f7ff fb00 	bl	8001738 <not_mult_xor>
        not_mult_xor(Emu, BCa, BCe, BCu);
 8002138:	abde      	add	r3, sp, #888	; 0x378
 800213a:	aacc      	add	r2, sp, #816	; 0x330
 800213c:	a9c6      	add	r1, sp, #792	; 0x318
 800213e:	f50d 60ba 	add.w	r0, sp, #1488	; 0x5d0
 8002142:	f7ff faf9 	bl	8001738 <not_mult_xor>
        //Ema = BCa ^ ((~BCe) & BCi);
        //Eme = BCe ^ ((~BCi) & BCo);
        //Emi = BCi ^ ((~BCo) & BCu);
        //Emo = BCo ^ ((~BCu) & BCa);
        //Emu = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002148:	3318      	adds	r3, #24
 800214a:	9307      	str	r3, [sp, #28]
        not_mult_xor(Emu, BCa, BCe, BCu);
 800214c:	abde      	add	r3, sp, #888	; 0x378
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	abd8      	add	r3, sp, #864	; 0x360
 8002152:	9302      	str	r3, [sp, #8]
 8002154:	abc6      	add	r3, sp, #792	; 0x318
 8002156:	acf6      	add	r4, sp, #984	; 0x3d8
 8002158:	9306      	str	r3, [sp, #24]
 800215a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800215c:	9404      	str	r4, [sp, #16]
 800215e:	a860      	add	r0, sp, #384	; 0x180
 8002160:	a984      	add	r1, sp, #528	; 0x210
 8002162:	aaae      	add	r2, sp, #696	; 0x2b8
 8002164:	adea      	add	r5, sp, #936	; 0x3a8
 8002166:	f50d 7e64 	add.w	lr, sp, #912	; 0x390
 800216a:	f50d 7852 	add.w	r8, sp, #840	; 0x348
 800216e:	f50d 797c 	add.w	r9, sp, #1008	; 0x3f0
 8002172:	f50d 7a4c 	add.w	sl, sp, #816	; 0x330
 8002176:	f50d 7c70 	add.w	ip, sp, #960	; 0x3c0
        {
            Abi[i] ^= Di[i];
 800217a:	e9dc 7600 	ldrd	r7, r6, [ip]
 800217e:	681c      	ldr	r4, [r3, #0]
 8002180:	4067      	eors	r7, r4
 8002182:	685c      	ldr	r4, [r3, #4]
 8002184:	f843 7b08 	str.w	r7, [r3], #8
 8002188:	4066      	eors	r6, r4
            BCa[i] = ROL(Abi[i], 62);
 800218a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800218e:	9c06      	ldr	r4, [sp, #24]
            Abi[i] ^= Di[i];
 8002190:	f843 6c04 	str.w	r6, [r3, #-4]
            BCa[i] = ROL(Abi[i], 62);
 8002194:	ea4b 7b86 	orr.w	fp, fp, r6, lsl #30
 8002198:	08b6      	lsrs	r6, r6, #2
 800219a:	ea46 7687 	orr.w	r6, r6, r7, lsl #30
 800219e:	e9c4 b600 	strd	fp, r6, [r4]
 80021a2:	3408      	adds	r4, #8
 80021a4:	9406      	str	r4, [sp, #24]
            Ago[i] ^= Do[i];
 80021a6:	9c04      	ldr	r4, [sp, #16]
 80021a8:	e9d4 7600 	ldrd	r7, r6, [r4]
 80021ac:	3408      	adds	r4, #8
 80021ae:	9404      	str	r4, [sp, #16]
 80021b0:	6804      	ldr	r4, [r0, #0]
 80021b2:	4067      	eors	r7, r4
 80021b4:	6844      	ldr	r4, [r0, #4]
 80021b6:	f840 7b08 	str.w	r7, [r0], #8
 80021ba:	4066      	eors	r6, r4
            BCe[i] = ROL(Ago[i], 55);
 80021bc:	ea4f 2b57 	mov.w	fp, r7, lsr #9
 80021c0:	ea4b 5bc6 	orr.w	fp, fp, r6, lsl #23
            Ago[i] ^= Do[i];
 80021c4:	f840 6c04 	str.w	r6, [r0, #-4]
            BCe[i] = ROL(Ago[i], 55);
 80021c8:	0a76      	lsrs	r6, r6, #9
 80021ca:	ea46 56c7 	orr.w	r6, r6, r7, lsl #23
 80021ce:	e9ca b600 	strd	fp, r6, [sl]
            Aku[i] ^= Du[i];
 80021d2:	e9d9 7600 	ldrd	r7, r6, [r9]
 80021d6:	680c      	ldr	r4, [r1, #0]
 80021d8:	4067      	eors	r7, r4
 80021da:	684c      	ldr	r4, [r1, #4]
 80021dc:	f841 7b08 	str.w	r7, [r1], #8
 80021e0:	4066      	eors	r6, r4
            BCi[i] = ROL(Aku[i], 39);
            Ama[i] ^= Da[i];
 80021e2:	9c03      	ldr	r4, [sp, #12]
            Aku[i] ^= Du[i];
 80021e4:	f841 6c04 	str.w	r6, [r1, #-4]
            Ama[i] ^= Da[i];
 80021e8:	6824      	ldr	r4, [r4, #0]
 80021ea:	9408      	str	r4, [sp, #32]
            BCi[i] = ROL(Aku[i], 39);
 80021ec:	ea4f 6b57 	mov.w	fp, r7, lsr #25
 80021f0:	ea4b 1bc6 	orr.w	fp, fp, r6, lsl #7
            Ama[i] ^= Da[i];
 80021f4:	9c03      	ldr	r4, [sp, #12]
            BCi[i] = ROL(Aku[i], 39);
 80021f6:	0e76      	lsrs	r6, r6, #25
 80021f8:	ea46 16c7 	orr.w	r6, r6, r7, lsl #7
 80021fc:	e9c8 b600 	strd	fp, r6, [r8]
            Ama[i] ^= Da[i];
 8002200:	6864      	ldr	r4, [r4, #4]
 8002202:	9409      	str	r4, [sp, #36]	; 0x24
 8002204:	e9de 7600 	ldrd	r7, r6, [lr]
 8002208:	9c08      	ldr	r4, [sp, #32]
 800220a:	4067      	eors	r7, r4
 800220c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800220e:	4066      	eors	r6, r4
 8002210:	9c03      	ldr	r4, [sp, #12]
 8002212:	f844 7b08 	str.w	r7, [r4], #8
            BCo[i] = ROL(Ama[i], 41);
 8002216:	ea4f 5bd7 	mov.w	fp, r7, lsr #23
 800221a:	ea4b 2b46 	orr.w	fp, fp, r6, lsl #9
            Ama[i] ^= Da[i];
 800221e:	f844 6c04 	str.w	r6, [r4, #-4]
 8002222:	9403      	str	r4, [sp, #12]
            BCo[i] = ROL(Ama[i], 41);
 8002224:	0df6      	lsrs	r6, r6, #23
 8002226:	9c02      	ldr	r4, [sp, #8]
 8002228:	ea46 2647 	orr.w	r6, r6, r7, lsl #9
 800222c:	e9c4 b600 	strd	fp, r6, [r4]
            Ase[i] ^= De[i];
 8002230:	e9d5 7600 	ldrd	r7, r6, [r5]
 8002234:	3408      	adds	r4, #8
 8002236:	9402      	str	r4, [sp, #8]
 8002238:	6814      	ldr	r4, [r2, #0]
 800223a:	4067      	eors	r7, r4
 800223c:	6854      	ldr	r4, [r2, #4]
 800223e:	f842 7b08 	str.w	r7, [r2], #8
 8002242:	ea84 0b06 	eor.w	fp, r4, r6
            BCu[i] = ROL(Ase[i], 2);
 8002246:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800224a:	9c01      	ldr	r4, [sp, #4]
            Ase[i] ^= De[i];
 800224c:	f842 bc04 	str.w	fp, [r2, #-4]
            BCu[i] = ROL(Ase[i], 2);
 8002250:	ea46 7697 	orr.w	r6, r6, r7, lsr #30
 8002254:	00bf      	lsls	r7, r7, #2
 8002256:	ea47 779b 	orr.w	r7, r7, fp, lsr #30
 800225a:	e9c4 7600 	strd	r7, r6, [r4]
 800225e:	3408      	adds	r4, #8
 8002260:	9401      	str	r4, [sp, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002262:	9c07      	ldr	r4, [sp, #28]
 8002264:	429c      	cmp	r4, r3
 8002266:	f10c 0c08 	add.w	ip, ip, #8
 800226a:	f10a 0a08 	add.w	sl, sl, #8
            BCi[i] = ROL(Aku[i], 39);
 800226e:	f109 0908 	add.w	r9, r9, #8
 8002272:	f108 0808 	add.w	r8, r8, #8
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002276:	f10e 0e08 	add.w	lr, lr, #8
 800227a:	f105 0508 	add.w	r5, r5, #8
 800227e:	f47f af7c 	bne.w	800217a <KeccakF1600_StatePermute_masked+0x9f6>
        }
        not_mult_xor(Esa, BCe, BCi, BCa);
 8002282:	abc6      	add	r3, sp, #792	; 0x318
 8002284:	aad2      	add	r2, sp, #840	; 0x348
 8002286:	a9cc      	add	r1, sp, #816	; 0x330
 8002288:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
        not_mult_xor(Ese, BCi, BCo, BCe);
 800228c:	f50d 65c0 	add.w	r5, sp, #1536	; 0x600
        not_mult_xor(Esa, BCe, BCi, BCa);
 8002290:	f7ff fa52 	bl	8001738 <not_mult_xor>
        not_mult_xor(Esi, BCo, BCu, BCi);
 8002294:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
        not_mult_xor(Ese, BCi, BCo, BCe);
 8002298:	abcc      	add	r3, sp, #816	; 0x330
 800229a:	aad8      	add	r2, sp, #864	; 0x360
 800229c:	a9d2      	add	r1, sp, #840	; 0x348
 800229e:	4628      	mov	r0, r5
 80022a0:	f7ff fa4a 	bl	8001738 <not_mult_xor>
        not_mult_xor(Esi, BCo, BCu, BCi);
 80022a4:	abd2      	add	r3, sp, #840	; 0x348
 80022a6:	aade      	add	r2, sp, #888	; 0x378
 80022a8:	a9d8      	add	r1, sp, #864	; 0x360
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff fa44 	bl	8001738 <not_mult_xor>
        not_mult_xor(Eso, BCu, BCa, BCo);
 80022b0:	abd8      	add	r3, sp, #864	; 0x360
 80022b2:	aac6      	add	r2, sp, #792	; 0x318
 80022b4:	a9de      	add	r1, sp, #888	; 0x378
 80022b6:	f50d 60c6 	add.w	r0, sp, #1584	; 0x630
 80022ba:	f7ff fa3d 	bl	8001738 <not_mult_xor>
        not_mult_xor(Esu, BCa, BCe, BCu);
 80022be:	abde      	add	r3, sp, #888	; 0x378
 80022c0:	aacc      	add	r2, sp, #816	; 0x330
 80022c2:	a9c6      	add	r1, sp, #792	; 0x318
 80022c4:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
 80022c8:	f7ff fa36 	bl	8001738 <not_mult_xor>
        //Esa = BCa ^ ((~BCe) & BCi);
        //Ese = BCe ^ ((~BCi) & BCo);
        //Esi = BCi ^ ((~BCo) & BCu);
        //Eso = BCo ^ ((~BCu) & BCa);
        //Esu = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 80022cc:	f50d 6381 	add.w	r3, sp, #1032	; 0x408
 80022d0:	9309      	str	r3, [sp, #36]	; 0x24
 80022d2:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	f50d 63ae 	add.w	r3, sp, #1392	; 0x570
 80022e2:	9304      	str	r3, [sp, #16]
 80022e4:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
 80022ee:	9308      	str	r3, [sp, #32]
 80022f0:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 80022f4:	9307      	str	r3, [sp, #28]
 80022f6:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 80022fa:	9306      	str	r3, [sp, #24]
        not_mult_xor(Esu, BCa, BCe, BCu);
 80022fc:	9b02      	ldr	r3, [sp, #8]
 80022fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8002300:	9b04      	ldr	r3, [sp, #16]
 8002302:	9310      	str	r3, [sp, #64]	; 0x40
 8002304:	9b01      	ldr	r3, [sp, #4]
 8002306:	9311      	str	r3, [sp, #68]	; 0x44
 8002308:	9b03      	ldr	r3, [sp, #12]
 800230a:	9312      	str	r3, [sp, #72]	; 0x48
 800230c:	f50d 6bb7 	add.w	fp, sp, #1464	; 0x5b8
 8002310:	2300      	movs	r3, #0
        {
            //    prepareTheta
            BCa[i] = Eba[i] ^ Ega[i] ^ Eka[i] ^ Ema[i] ^ Esa[i];
            BCe[i] = Ebe[i] ^ Ege[i] ^ Eke[i] ^ Eme[i] ^ Ese[i];
 8002312:	9526      	str	r5, [sp, #152]	; 0x98
            BCi[i] = Ebi[i] ^ Egi[i] ^ Eki[i] ^ Emi[i] ^ Esi[i];
 8002314:	9421      	str	r4, [sp, #132]	; 0x84
            BCa[i] = Eba[i] ^ Ega[i] ^ Eka[i] ^ Ema[i] ^ Esa[i];
 8002316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	9227      	str	r2, [sp, #156]	; 0x9c
 800231c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800231e:	6852      	ldr	r2, [r2, #4]
 8002320:	9228      	str	r2, [sp, #160]	; 0xa0
 8002322:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002324:	e9d2 1e00 	ldrd	r1, lr, [r2]
 8002328:	3208      	adds	r2, #8
 800232a:	9212      	str	r2, [sp, #72]	; 0x48
 800232c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800232e:	e9d2 c600 	ldrd	ip, r6, [r2]
 8002332:	3208      	adds	r2, #8
 8002334:	9211      	str	r2, [sp, #68]	; 0x44
 8002336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002338:	e9d2 7500 	ldrd	r7, r5, [r2]
 800233c:	3208      	adds	r2, #8
 800233e:	9210      	str	r2, [sp, #64]	; 0x40
 8002340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002342:	e9d2 4000 	ldrd	r4, r0, [r2]
 8002346:	3208      	adds	r2, #8
 8002348:	920f      	str	r2, [sp, #60]	; 0x3c
 800234a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800234c:	4051      	eors	r1, r2
 800234e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002350:	ea81 010c 	eor.w	r1, r1, ip
 8002354:	ea8e 0202 	eor.w	r2, lr, r2
 8002358:	4079      	eors	r1, r7
 800235a:	4072      	eors	r2, r6
 800235c:	ea82 0605 	eor.w	r6, r2, r5
 8002360:	ea81 0204 	eor.w	r2, r1, r4
 8002364:	9222      	str	r2, [sp, #136]	; 0x88
 8002366:	ea86 0200 	eor.w	r2, r6, r0
 800236a:	9223      	str	r2, [sp, #140]	; 0x8c
            BCe[i] = Ebe[i] ^ Ege[i] ^ Eke[i] ^ Eme[i] ^ Ese[i];
 800236c:	9a08      	ldr	r2, [sp, #32]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	9229      	str	r2, [sp, #164]	; 0xa4
 8002372:	9a08      	ldr	r2, [sp, #32]
 8002374:	6852      	ldr	r2, [r2, #4]
 8002376:	922a      	str	r2, [sp, #168]	; 0xa8
 8002378:	f50d 6284 	add.w	r2, sp, #1056	; 0x420
 800237c:	441a      	add	r2, r3
 800237e:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
 8002382:	58cf      	ldr	r7, [r1, r3]
 8002384:	6851      	ldr	r1, [r2, #4]
 8002386:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002388:	4057      	eors	r7, r2
 800238a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800238c:	4051      	eors	r1, r2
 800238e:	f50d 62a2 	add.w	r2, sp, #1296	; 0x510
 8002392:	18d0      	adds	r0, r2, r3
 8002394:	58d2      	ldr	r2, [r2, r3]
 8002396:	6840      	ldr	r0, [r0, #4]
 8002398:	4057      	eors	r7, r2
 800239a:	f50d 62b1 	add.w	r2, sp, #1416	; 0x588
 800239e:	4041      	eors	r1, r0
 80023a0:	18d0      	adds	r0, r2, r3
 80023a2:	58d2      	ldr	r2, [r2, r3]
 80023a4:	6840      	ldr	r0, [r0, #4]
 80023a6:	4057      	eors	r7, r2
 80023a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80023aa:	4041      	eors	r1, r0
 80023ac:	18d0      	adds	r0, r2, r3
 80023ae:	58d2      	ldr	r2, [r2, r3]
 80023b0:	6840      	ldr	r0, [r0, #4]
 80023b2:	ea87 0a02 	eor.w	sl, r7, r2
 80023b6:	ea81 0200 	eor.w	r2, r1, r0
 80023ba:	9224      	str	r2, [sp, #144]	; 0x90
            BCi[i] = Ebi[i] ^ Egi[i] ^ Eki[i] ^ Emi[i] ^ Esi[i];
 80023bc:	9a07      	ldr	r2, [sp, #28]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	922b      	str	r2, [sp, #172]	; 0xac
 80023c2:	9a07      	ldr	r2, [sp, #28]
 80023c4:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
 80023c8:	6852      	ldr	r2, [r2, #4]
 80023ca:	922c      	str	r2, [sp, #176]	; 0xb0
 80023cc:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
 80023d0:	58c4      	ldr	r4, [r0, r3]
 80023d2:	18d1      	adds	r1, r2, r3
 80023d4:	f50d 6096 	add.w	r0, sp, #1200	; 0x4b0
 80023d8:	f50d 6296 	add.w	r2, sp, #1200	; 0x4b0
 80023dc:	441a      	add	r2, r3
 80023de:	58c5      	ldr	r5, [r0, r3]
 80023e0:	6850      	ldr	r0, [r2, #4]
 80023e2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80023e4:	6849      	ldr	r1, [r1, #4]
 80023e6:	4065      	eors	r5, r4
 80023e8:	4055      	eors	r5, r2
 80023ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80023ec:	4041      	eors	r1, r0
 80023ee:	4051      	eors	r1, r2
 80023f0:	f50d 62b4 	add.w	r2, sp, #1440	; 0x5a0
 80023f4:	18d0      	adds	r0, r2, r3
 80023f6:	58d2      	ldr	r2, [r2, r3]
 80023f8:	6840      	ldr	r0, [r0, #4]
 80023fa:	4055      	eors	r5, r2
 80023fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80023fe:	4041      	eors	r1, r0
 8002400:	18d0      	adds	r0, r2, r3
 8002402:	58d2      	ldr	r2, [r2, r3]
 8002404:	6840      	ldr	r0, [r0, #4]
 8002406:	4055      	eors	r5, r2
 8002408:	ea81 0200 	eor.w	r2, r1, r0
 800240c:	9225      	str	r2, [sp, #148]	; 0x94
            BCo[i] = Ebo[i] ^ Ego[i] ^ Eko[i] ^ Emo[i] ^ Eso[i];
 800240e:	f50d 6099 	add.w	r0, sp, #1224	; 0x4c8
 8002412:	f50d 628a 	add.w	r2, sp, #1104	; 0x450
 8002416:	18d4      	adds	r4, r2, r3
 8002418:	18c1      	adds	r1, r0, r3
 800241a:	58d2      	ldr	r2, [r2, r3]
 800241c:	6864      	ldr	r4, [r4, #4]
 800241e:	58c0      	ldr	r0, [r0, r3]
 8002420:	6849      	ldr	r1, [r1, #4]
 8002422:	404c      	eors	r4, r1
 8002424:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
 8002428:	4042      	eors	r2, r0
 800242a:	18c8      	adds	r0, r1, r3
 800242c:	58c9      	ldr	r1, [r1, r3]
 800242e:	6840      	ldr	r0, [r0, #4]
 8002430:	ea82 0801 	eor.w	r8, r2, r1
 8002434:	f8db 2000 	ldr.w	r2, [fp]
 8002438:	ea88 0802 	eor.w	r8, r8, r2
 800243c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8002440:	4044      	eors	r4, r0
 8002442:	f50d 61c6 	add.w	r1, sp, #1584	; 0x630
 8002446:	4054      	eors	r4, r2
 8002448:	18ca      	adds	r2, r1, r3
 800244a:	58c9      	ldr	r1, [r1, r3]
 800244c:	6852      	ldr	r2, [r2, #4]
 800244e:	4054      	eors	r4, r2
            BCu[i] = Ebu[i] ^ Egu[i] ^ Eku[i] ^ Emu[i] ^ Esu[i];
 8002450:	9a06      	ldr	r2, [sp, #24]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	922d      	str	r2, [sp, #180]	; 0xb4
 8002456:	9a06      	ldr	r2, [sp, #24]
 8002458:	6852      	ldr	r2, [r2, #4]
 800245a:	922e      	str	r2, [sp, #184]	; 0xb8
 800245c:	f50d 628d 	add.w	r2, sp, #1128	; 0x468
 8002460:	441a      	add	r2, r3
            BCo[i] = Ebo[i] ^ Ego[i] ^ Eko[i] ^ Emo[i] ^ Eso[i];
 8002462:	ea88 0801 	eor.w	r8, r8, r1
            BCu[i] = Ebu[i] ^ Egu[i] ^ Eku[i] ^ Emu[i] ^ Esu[i];
 8002466:	6856      	ldr	r6, [r2, #4]
 8002468:	f50d 619c 	add.w	r1, sp, #1248	; 0x4e0
 800246c:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
 8002470:	f50d 629c 	add.w	r2, sp, #1248	; 0x4e0
 8002474:	4419      	add	r1, r3
 8002476:	58c0      	ldr	r0, [r0, r3]
 8002478:	58d2      	ldr	r2, [r2, r3]
 800247a:	6849      	ldr	r1, [r1, #4]
 800247c:	4042      	eors	r2, r0
 800247e:	f50d 60ab 	add.w	r0, sp, #1368	; 0x558
 8002482:	404e      	eors	r6, r1
 8002484:	18c1      	adds	r1, r0, r3
 8002486:	58c0      	ldr	r0, [r0, r3]
 8002488:	6849      	ldr	r1, [r1, #4]
 800248a:	404e      	eors	r6, r1
 800248c:	f50d 61ba 	add.w	r1, sp, #1488	; 0x5d0
 8002490:	4042      	eors	r2, r0
 8002492:	18c8      	adds	r0, r1, r3
 8002494:	58c9      	ldr	r1, [r1, r3]
 8002496:	6840      	ldr	r0, [r0, #4]
 8002498:	404a      	eors	r2, r1
 800249a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800249c:	404a      	eors	r2, r1
 800249e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80024a0:	4046      	eors	r6, r0
 80024a2:	404e      	eors	r6, r1

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da[i] = BCu[i] ^ ROL(BCe[i], 1);
 80024a4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80024a6:	ea4f 0e4a 	mov.w	lr, sl, lsl #1
 80024aa:	ea4f 0941 	mov.w	r9, r1, lsl #1
 80024ae:	ea4e 7ed1 	orr.w	lr, lr, r1, lsr #31
 80024b2:	a9e4      	add	r1, sp, #912	; 0x390
 80024b4:	ea8e 0e02 	eor.w	lr, lr, r2
 80024b8:	f841 e003 	str.w	lr, [r1, r3]
 80024bc:	18c8      	adds	r0, r1, r3
 80024be:	ea49 79da 	orr.w	r9, r9, sl, lsr #31
            De[i] = BCa[i] ^ ROL(BCi[i], 1);
 80024c2:	9925      	ldr	r1, [sp, #148]	; 0x94
            Da[i] = BCu[i] ^ ROL(BCe[i], 1);
 80024c4:	ea89 0906 	eor.w	r9, r9, r6
            De[i] = BCa[i] ^ ROL(BCi[i], 1);
 80024c8:	ea4f 0c45 	mov.w	ip, r5, lsl #1
            Da[i] = BCu[i] ^ ROL(BCe[i], 1);
 80024cc:	f8c0 9004 	str.w	r9, [r0, #4]
            De[i] = BCa[i] ^ ROL(BCi[i], 1);
 80024d0:	ea4c 7cd1 	orr.w	ip, ip, r1, lsr #31
 80024d4:	0048      	lsls	r0, r1, #1
 80024d6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80024d8:	ea8c 0c01 	eor.w	ip, ip, r1
 80024dc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80024de:	ea40 70d5 	orr.w	r0, r0, r5, lsr #31
 80024e2:	4041      	eors	r1, r0
 80024e4:	912f      	str	r1, [sp, #188]	; 0xbc
 80024e6:	a9ea      	add	r1, sp, #936	; 0x3a8
 80024e8:	18cf      	adds	r7, r1, r3
 80024ea:	f841 c003 	str.w	ip, [r1, r3]
 80024ee:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80024f0:	6079      	str	r1, [r7, #4]
            Di[i] = BCe[i] ^ ROL(BCo[i], 1);
 80024f2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80024f6:	ea47 77d4 	orr.w	r7, r7, r4, lsr #31
 80024fa:	9824      	ldr	r0, [sp, #144]	; 0x90
 80024fc:	ea87 070a 	eor.w	r7, r7, sl
 8002500:	0061      	lsls	r1, r4, #1
 8002502:	f50d 7a70 	add.w	sl, sp, #960	; 0x3c0
 8002506:	ea41 71d8 	orr.w	r1, r1, r8, lsr #31
 800250a:	f84a 7003 	str.w	r7, [sl, r3]
 800250e:	4041      	eors	r1, r0
 8002510:	eb0a 0003 	add.w	r0, sl, r3
            Do[i] = BCi[i] ^ ROL(BCu[i], 1);
 8002514:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8002518:	ea4a 7ad2 	orr.w	sl, sl, r2, lsr #31
 800251c:	0052      	lsls	r2, r2, #1
 800251e:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
 8002522:	4055      	eors	r5, r2
 8002524:	9a25      	ldr	r2, [sp, #148]	; 0x94
            Di[i] = BCe[i] ^ ROL(BCo[i], 1);
 8002526:	6041      	str	r1, [r0, #4]
            Do[i] = BCi[i] ^ ROL(BCu[i], 1);
 8002528:	aef6      	add	r6, sp, #984	; 0x3d8
 800252a:	ea8a 0202 	eor.w	r2, sl, r2
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 800252e:	9823      	ldr	r0, [sp, #140]	; 0x8c
            Do[i] = BCi[i] ^ ROL(BCu[i], 1);
 8002530:	50f5      	str	r5, [r6, r3]
 8002532:	eb06 0a03 	add.w	sl, r6, r3
 8002536:	9224      	str	r2, [sp, #144]	; 0x90
 8002538:	f8ca 2004 	str.w	r2, [sl, #4]
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 800253c:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8002540:	9822      	ldr	r0, [sp, #136]	; 0x88

            Eba[i] ^= Da[i];
            BCa[i] = Eba[i];
            Ege[i] ^= De[i];
 8002542:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 8002544:	ea4a 7ad0 	orr.w	sl, sl, r0, lsr #31
 8002548:	0046      	lsls	r6, r0, #1
 800254a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800254c:	ea46 76d0 	orr.w	r6, r6, r0, lsr #31
            Eba[i] ^= Da[i];
 8002550:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8002552:	ea80 0e0e 	eor.w	lr, r0, lr
 8002556:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8002558:	ea80 0909 	eor.w	r9, r0, r9
 800255c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800255e:	f840 eb08 	str.w	lr, [r0], #8
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 8002562:	ea86 0608 	eor.w	r6, r6, r8
            Eba[i] ^= Da[i];
 8002566:	9009      	str	r0, [sp, #36]	; 0x24
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 8002568:	f50d 787c 	add.w	r8, sp, #1008	; 0x3f0
            Eba[i] ^= Da[i];
 800256c:	f840 9c04 	str.w	r9, [r0, #-4]
            BCa[i] = Eba[i];
 8002570:	a8c6      	add	r0, sp, #792	; 0x318
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 8002572:	f848 6003 	str.w	r6, [r8, r3]
            BCa[i] = Eba[i];
 8002576:	f840 e003 	str.w	lr, [r0, r3]
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 800257a:	ea8a 0404 	eor.w	r4, sl, r4
 800257e:	eb08 0a03 	add.w	sl, r8, r3
            BCa[i] = Eba[i];
 8002582:	eb00 0803 	add.w	r8, r0, r3
            Ege[i] ^= De[i];
 8002586:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8002588:	f8dd e020 	ldr.w	lr, [sp, #32]
            BCa[i] = Eba[i];
 800258c:	f8c8 9004 	str.w	r9, [r8, #4]
            Ege[i] ^= De[i];
 8002590:	ea80 0c0c 	eor.w	ip, r0, ip
 8002594:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8002596:	f84e cb08 	str.w	ip, [lr], #8
 800259a:	4042      	eors	r2, r0
 800259c:	f84e 2c04 	str.w	r2, [lr, #-4]
 80025a0:	f8cd e020 	str.w	lr, [sp, #32]
            BCe[i] = ROL(Ege[i], 44);
 80025a4:	0d10      	lsrs	r0, r2, #20
 80025a6:	f50d 7e4c 	add.w	lr, sp, #816	; 0x330
 80025aa:	eb0e 0803 	add.w	r8, lr, r3
 80025ae:	ea40 300c 	orr.w	r0, r0, ip, lsl #12
 80025b2:	ea4f 5e1c 	mov.w	lr, ip, lsr #20
 80025b6:	f50d 7c4c 	add.w	ip, sp, #816	; 0x330
 80025ba:	ea4e 3e02 	orr.w	lr, lr, r2, lsl #12
 80025be:	f84c e003 	str.w	lr, [ip, r3]
 80025c2:	f8c8 0004 	str.w	r0, [r8, #4]
            Eki[i] ^= Di[i];
 80025c6:	982b      	ldr	r0, [sp, #172]	; 0xac
            Du[i] = BCo[i] ^ ROL(BCa[i], 1);
 80025c8:	f8ca 4004 	str.w	r4, [sl, #4]
            Eki[i] ^= Di[i];
 80025cc:	4047      	eors	r7, r0
 80025ce:	982c      	ldr	r0, [sp, #176]	; 0xb0
            BCi[i] = ROL(Eki[i], 43);
            Emo[i] ^= Do[i];
 80025d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
            Eki[i] ^= Di[i];
 80025d2:	4041      	eors	r1, r0
 80025d4:	9807      	ldr	r0, [sp, #28]
 80025d6:	f840 7b08 	str.w	r7, [r0], #8
 80025da:	f840 1c04 	str.w	r1, [r0, #-4]
 80025de:	9007      	str	r0, [sp, #28]
            BCi[i] = ROL(Eki[i], 43);
 80025e0:	a8d2      	add	r0, sp, #840	; 0x348
 80025e2:	eb00 0c03 	add.w	ip, r0, r3
 80025e6:	0d78      	lsrs	r0, r7, #21
 80025e8:	ea40 20c1 	orr.w	r0, r0, r1, lsl #11
 80025ec:	0d49      	lsrs	r1, r1, #21
 80025ee:	ea41 21c7 	orr.w	r1, r1, r7, lsl #11
 80025f2:	afd2      	add	r7, sp, #840	; 0x348
 80025f4:	50f8      	str	r0, [r7, r3]
 80025f6:	f8cc 1004 	str.w	r1, [ip, #4]
            Emo[i] ^= Do[i];
 80025fa:	f8db 1000 	ldr.w	r1, [fp]
 80025fe:	404d      	eors	r5, r1
 8002600:	f8db 1004 	ldr.w	r1, [fp, #4]
 8002604:	f84b 5b08 	str.w	r5, [fp], #8
 8002608:	404a      	eors	r2, r1
            BCo[i] = ROL(Emo[i], 21);
 800260a:	a9d8      	add	r1, sp, #864	; 0x360
 800260c:	18c8      	adds	r0, r1, r3
 800260e:	0551      	lsls	r1, r2, #21
 8002610:	ea41 21d5 	orr.w	r1, r1, r5, lsr #11
 8002614:	056d      	lsls	r5, r5, #21
 8002616:	ea45 25d2 	orr.w	r5, r5, r2, lsr #11
            Emo[i] ^= Do[i];
 800261a:	f84b 2c04 	str.w	r2, [fp, #-4]
            BCo[i] = ROL(Emo[i], 21);
 800261e:	aad8      	add	r2, sp, #864	; 0x360
 8002620:	50d5      	str	r5, [r2, r3]
            Esu[i] ^= Du[i];
 8002622:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
            BCo[i] = ROL(Emo[i], 21);
 8002624:	6041      	str	r1, [r0, #4]
            Esu[i] ^= Du[i];
 8002626:	4056      	eors	r6, r2
 8002628:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800262a:	4054      	eors	r4, r2
 800262c:	9a06      	ldr	r2, [sp, #24]
 800262e:	f842 6b08 	str.w	r6, [r2], #8
 8002632:	f842 4c04 	str.w	r4, [r2, #-4]
 8002636:	9206      	str	r2, [sp, #24]
            BCu[i] = ROL(Esu[i], 14);
 8002638:	aade      	add	r2, sp, #888	; 0x378
 800263a:	18d1      	adds	r1, r2, r3
 800263c:	03a2      	lsls	r2, r4, #14
 800263e:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8002642:	a8de      	add	r0, sp, #888	; 0x378
 8002644:	03b6      	lsls	r6, r6, #14
 8002646:	ea46 4494 	orr.w	r4, r6, r4, lsr #18
 800264a:	50c4      	str	r4, [r0, r3]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 800264c:	3308      	adds	r3, #8
 800264e:	2b18      	cmp	r3, #24
            BCu[i] = ROL(Esu[i], 14);
 8002650:	604a      	str	r2, [r1, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002652:	f47f ae60 	bne.w	8002316 <KeccakF1600_StatePermute_masked+0xb92>
        }
        not_mult_xor(Aba, BCe, BCi, BCa);
 8002656:	abc6      	add	r3, sp, #792	; 0x318
 8002658:	463a      	mov	r2, r7
 800265a:	a9cc      	add	r1, sp, #816	; 0x330
 800265c:	a830      	add	r0, sp, #192	; 0xc0
 800265e:	f7ff f86b 	bl	8001738 <not_mult_xor>
        Aba[0] ^= (uint64_t)KeccakF_RoundConstants[round + 1];
 8002662:	9905      	ldr	r1, [sp, #20]
 8002664:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0
 8002668:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800266c:	4042      	eors	r2, r0
 800266e:	404b      	eors	r3, r1
 8002670:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
        not_mult_xor(Abe, BCi, BCo, BCe);
 8002674:	4639      	mov	r1, r7
 8002676:	abcc      	add	r3, sp, #816	; 0x330
 8002678:	aad8      	add	r2, sp, #864	; 0x360
 800267a:	a836      	add	r0, sp, #216	; 0xd8
 800267c:	f7ff f85c 	bl	8001738 <not_mult_xor>
        not_mult_xor(Abi, BCo, BCu, BCi);
 8002680:	463b      	mov	r3, r7
 8002682:	aade      	add	r2, sp, #888	; 0x378
 8002684:	a9d8      	add	r1, sp, #864	; 0x360
 8002686:	a83c      	add	r0, sp, #240	; 0xf0
 8002688:	f7ff f856 	bl	8001738 <not_mult_xor>
        not_mult_xor(Abo, BCu, BCa, BCo);
 800268c:	abd8      	add	r3, sp, #864	; 0x360
 800268e:	aac6      	add	r2, sp, #792	; 0x318
 8002690:	a9de      	add	r1, sp, #888	; 0x378
 8002692:	a842      	add	r0, sp, #264	; 0x108
 8002694:	f7ff f850 	bl	8001738 <not_mult_xor>
        not_mult_xor(Abu, BCa, BCe, BCu);
 8002698:	f50d 648d 	add.w	r4, sp, #1128	; 0x468
 800269c:	abde      	add	r3, sp, #888	; 0x378
 800269e:	aacc      	add	r2, sp, #816	; 0x330
 80026a0:	a9c6      	add	r1, sp, #792	; 0x318
 80026a2:	a848      	add	r0, sp, #288	; 0x120
 80026a4:	f7ff f848 	bl	8001738 <not_mult_xor>
        //Aba ^= (uint64_t)KeccakF_RoundConstants[round + 1];
        //Abe = BCe ^ ((~BCi) & BCo);
        //Abi = BCi ^ ((~BCo) & BCu);
        //Abo = BCo ^ ((~BCu) & BCa);
        //Abu = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 80026a8:	940f      	str	r4, [sp, #60]	; 0x3c
        not_mult_xor(Abu, BCa, BCe, BCu);
 80026aa:	acde      	add	r4, sp, #888	; 0x378
 80026ac:	9406      	str	r4, [sp, #24]
 80026ae:	acd8      	add	r4, sp, #864	; 0x360
 80026b0:	9407      	str	r4, [sp, #28]
 80026b2:	acfc      	add	r4, sp, #1008	; 0x3f0
 80026b4:	9408      	str	r4, [sp, #32]
 80026b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80026b8:	acc6      	add	r4, sp, #792	; 0x318
 80026ba:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 80026be:	f50d 609c 	add.w	r0, sp, #1248	; 0x4e0
 80026c2:	f50d 61b1 	add.w	r1, sp, #1416	; 0x588
 80026c6:	adf0      	add	r5, sp, #960	; 0x3c0
 80026c8:	f50d 7e6a 	add.w	lr, sp, #936	; 0x3a8
 80026cc:	46b8      	mov	r8, r7
 80026ce:	f50d 7964 	add.w	r9, sp, #912	; 0x390
 80026d2:	f50d 7a4c 	add.w	sl, sp, #816	; 0x330
 80026d6:	9409      	str	r4, [sp, #36]	; 0x24
 80026d8:	f50d 7c76 	add.w	ip, sp, #984	; 0x3d8
        {
            Ebo[i] ^= Do[i];
 80026dc:	e9dc 7600 	ldrd	r7, r6, [ip]
 80026e0:	681c      	ldr	r4, [r3, #0]
 80026e2:	4067      	eors	r7, r4
 80026e4:	685c      	ldr	r4, [r3, #4]
 80026e6:	f843 7b08 	str.w	r7, [r3], #8
 80026ea:	ea84 0b06 	eor.w	fp, r4, r6
            BCa[i] = ROL(Ebo[i], 28);
 80026ee:	ea4f 760b 	mov.w	r6, fp, lsl #28
 80026f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
            Ebo[i] ^= Do[i];
 80026f4:	f843 bc04 	str.w	fp, [r3, #-4]
            BCa[i] = ROL(Ebo[i], 28);
 80026f8:	ea46 1617 	orr.w	r6, r6, r7, lsr #4
 80026fc:	073f      	lsls	r7, r7, #28
 80026fe:	ea47 171b 	orr.w	r7, r7, fp, lsr #4
 8002702:	e9c4 7600 	strd	r7, r6, [r4]
 8002706:	3408      	adds	r4, #8
 8002708:	9409      	str	r4, [sp, #36]	; 0x24
            Egu[i] ^= Du[i];
 800270a:	9c08      	ldr	r4, [sp, #32]
 800270c:	e9d4 7600 	ldrd	r7, r6, [r4]
 8002710:	3408      	adds	r4, #8
 8002712:	9408      	str	r4, [sp, #32]
 8002714:	6804      	ldr	r4, [r0, #0]
 8002716:	4067      	eors	r7, r4
 8002718:	6844      	ldr	r4, [r0, #4]
 800271a:	f840 7b08 	str.w	r7, [r0], #8
 800271e:	ea84 0b06 	eor.w	fp, r4, r6
            BCe[i] = ROL(Egu[i], 20);
            Eka[i] ^= Da[i];
 8002722:	9c01      	ldr	r4, [sp, #4]
            Egu[i] ^= Du[i];
 8002724:	f840 bc04 	str.w	fp, [r0, #-4]
            Eka[i] ^= Da[i];
 8002728:	6824      	ldr	r4, [r4, #0]
 800272a:	9410      	str	r4, [sp, #64]	; 0x40
            BCe[i] = ROL(Egu[i], 20);
 800272c:	ea4f 560b 	mov.w	r6, fp, lsl #20
 8002730:	ea46 3617 	orr.w	r6, r6, r7, lsr #12
            Eka[i] ^= Da[i];
 8002734:	9c01      	ldr	r4, [sp, #4]
            BCe[i] = ROL(Egu[i], 20);
 8002736:	053f      	lsls	r7, r7, #20
 8002738:	ea47 371b 	orr.w	r7, r7, fp, lsr #12
            Eka[i] ^= Da[i];
 800273c:	6864      	ldr	r4, [r4, #4]
 800273e:	9411      	str	r4, [sp, #68]	; 0x44
            BCe[i] = ROL(Egu[i], 20);
 8002740:	e9ca 7600 	strd	r7, r6, [sl]
            Eka[i] ^= Da[i];
 8002744:	e9d9 7600 	ldrd	r7, r6, [r9]
 8002748:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800274a:	4067      	eors	r7, r4
 800274c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800274e:	ea84 0b06 	eor.w	fp, r4, r6
 8002752:	9c01      	ldr	r4, [sp, #4]
            BCi[i] = ROL(Eka[i], 3);
 8002754:	ea4f 06cb 	mov.w	r6, fp, lsl #3
            Eka[i] ^= Da[i];
 8002758:	f844 7b08 	str.w	r7, [r4], #8
            BCi[i] = ROL(Eka[i], 3);
 800275c:	ea46 7657 	orr.w	r6, r6, r7, lsr #29
 8002760:	00ff      	lsls	r7, r7, #3
 8002762:	ea47 775b 	orr.w	r7, r7, fp, lsr #29
            Eka[i] ^= Da[i];
 8002766:	9401      	str	r4, [sp, #4]
            BCi[i] = ROL(Eka[i], 3);
 8002768:	e9c8 7600 	strd	r7, r6, [r8]
            Eme[i] ^= De[i];
 800276c:	e9de 7600 	ldrd	r7, r6, [lr]
            Eka[i] ^= Da[i];
 8002770:	f844 bc04 	str.w	fp, [r4, #-4]
            Eme[i] ^= De[i];
 8002774:	680c      	ldr	r4, [r1, #0]
 8002776:	4067      	eors	r7, r4
 8002778:	684c      	ldr	r4, [r1, #4]
 800277a:	f841 7b08 	str.w	r7, [r1], #8
 800277e:	4066      	eors	r6, r4
            BCo[i] = ROL(Eme[i], 45);
 8002780:	ea4f 4bd7 	mov.w	fp, r7, lsr #19
 8002784:	9c07      	ldr	r4, [sp, #28]
            Eme[i] ^= De[i];
 8002786:	f841 6c04 	str.w	r6, [r1, #-4]
            BCo[i] = ROL(Eme[i], 45);
 800278a:	ea4b 3b46 	orr.w	fp, fp, r6, lsl #13
 800278e:	0cf6      	lsrs	r6, r6, #19
 8002790:	ea46 3647 	orr.w	r6, r6, r7, lsl #13
 8002794:	e9c4 b600 	strd	fp, r6, [r4]
            Esi[i] ^= Di[i];
 8002798:	e9d5 7600 	ldrd	r7, r6, [r5]
 800279c:	3408      	adds	r4, #8
 800279e:	9407      	str	r4, [sp, #28]
 80027a0:	6814      	ldr	r4, [r2, #0]
 80027a2:	4067      	eors	r7, r4
 80027a4:	6854      	ldr	r4, [r2, #4]
 80027a6:	f842 7b08 	str.w	r7, [r2], #8
 80027aa:	4066      	eors	r6, r4
            BCu[i] = ROL(Esi[i], 61);
 80027ac:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 80027b0:	9c06      	ldr	r4, [sp, #24]
            Esi[i] ^= Di[i];
 80027b2:	f842 6c04 	str.w	r6, [r2, #-4]
            BCu[i] = ROL(Esi[i], 61);
 80027b6:	ea4b 7b46 	orr.w	fp, fp, r6, lsl #29
 80027ba:	08f6      	lsrs	r6, r6, #3
 80027bc:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 80027c0:	e9c4 b600 	strd	fp, r6, [r4]
 80027c4:	3408      	adds	r4, #8
 80027c6:	9406      	str	r4, [sp, #24]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 80027c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80027ca:	429c      	cmp	r4, r3
 80027cc:	f10c 0c08 	add.w	ip, ip, #8
 80027d0:	f10a 0a08 	add.w	sl, sl, #8
            BCi[i] = ROL(Eka[i], 3);
 80027d4:	f109 0908 	add.w	r9, r9, #8
 80027d8:	f108 0808 	add.w	r8, r8, #8
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 80027dc:	f10e 0e08 	add.w	lr, lr, #8
 80027e0:	f105 0508 	add.w	r5, r5, #8
 80027e4:	f47f af7a 	bne.w	80026dc <KeccakF1600_StatePermute_masked+0xf58>
        }
        not_mult_xor(Aga, BCe, BCi, BCa);
 80027e8:	abc6      	add	r3, sp, #792	; 0x318
 80027ea:	aad2      	add	r2, sp, #840	; 0x348
 80027ec:	a9cc      	add	r1, sp, #816	; 0x330
 80027ee:	a84e      	add	r0, sp, #312	; 0x138
 80027f0:	f7fe ffa2 	bl	8001738 <not_mult_xor>
        not_mult_xor(Age, BCi, BCo, BCe);
 80027f4:	abcc      	add	r3, sp, #816	; 0x330
 80027f6:	aad8      	add	r2, sp, #864	; 0x360
 80027f8:	a9d2      	add	r1, sp, #840	; 0x348
 80027fa:	a854      	add	r0, sp, #336	; 0x150
 80027fc:	f7fe ff9c 	bl	8001738 <not_mult_xor>
        not_mult_xor(Agi, BCo, BCu, BCi);
 8002800:	abd2      	add	r3, sp, #840	; 0x348
 8002802:	aade      	add	r2, sp, #888	; 0x378
 8002804:	a9d8      	add	r1, sp, #864	; 0x360
 8002806:	a85a      	add	r0, sp, #360	; 0x168
 8002808:	f7fe ff96 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ago, BCu, BCa, BCo);
 800280c:	abd8      	add	r3, sp, #864	; 0x360
 800280e:	aac6      	add	r2, sp, #792	; 0x318
 8002810:	a9de      	add	r1, sp, #888	; 0x378
 8002812:	a860      	add	r0, sp, #384	; 0x180
 8002814:	f7fe ff90 	bl	8001738 <not_mult_xor>
        not_mult_xor(Agu, BCa, BCe, BCu);
 8002818:	acde      	add	r4, sp, #888	; 0x378
 800281a:	abde      	add	r3, sp, #888	; 0x378
 800281c:	aacc      	add	r2, sp, #816	; 0x330
 800281e:	a9c6      	add	r1, sp, #792	; 0x318
 8002820:	a866      	add	r0, sp, #408	; 0x198
 8002822:	f7fe ff89 	bl	8001738 <not_mult_xor>
 8002826:	9401      	str	r4, [sp, #4]
 8002828:	acd8      	add	r4, sp, #864	; 0x360
 800282a:	9406      	str	r4, [sp, #24]
 800282c:	acf0      	add	r4, sp, #960	; 0x3c0
 800282e:	9407      	str	r4, [sp, #28]
 8002830:	acc6      	add	r4, sp, #792	; 0x318
 8002832:	f50d 6384 	add.w	r3, sp, #1056	; 0x420
 8002836:	f50d 6096 	add.w	r0, sp, #1200	; 0x4b0
 800283a:	f50d 61a8 	add.w	r1, sp, #1344	; 0x540
 800283e:	f50d 62ba 	add.w	r2, sp, #1488	; 0x5d0
 8002842:	ade4      	add	r5, sp, #912	; 0x390
 8002844:	f50d 7e7c 	add.w	lr, sp, #1008	; 0x3f0
 8002848:	f50d 7852 	add.w	r8, sp, #840	; 0x348
 800284c:	f50d 7976 	add.w	r9, sp, #984	; 0x3d8
 8002850:	f50d 7a4c 	add.w	sl, sp, #816	; 0x330
 8002854:	9408      	str	r4, [sp, #32]
 8002856:	f50d 7c6a 	add.w	ip, sp, #936	; 0x3a8
        //Agi = BCi ^ ((~BCo) & BCu);
        //Ago = BCo ^ ((~BCu) & BCa);
        //Agu = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
        {
            Ebe[i] ^= De[i];
 800285a:	e9dc 7600 	ldrd	r7, r6, [ip]
 800285e:	681c      	ldr	r4, [r3, #0]
 8002860:	4067      	eors	r7, r4
 8002862:	685c      	ldr	r4, [r3, #4]
 8002864:	f843 7b08 	str.w	r7, [r3], #8
 8002868:	ea84 0b06 	eor.w	fp, r4, r6
            BCa[i] = ROL(Ebe[i], 1);
 800286c:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8002870:	9c08      	ldr	r4, [sp, #32]
            Ebe[i] ^= De[i];
 8002872:	f843 bc04 	str.w	fp, [r3, #-4]
            BCa[i] = ROL(Ebe[i], 1);
 8002876:	ea46 76d7 	orr.w	r6, r6, r7, lsr #31
 800287a:	007f      	lsls	r7, r7, #1
 800287c:	ea47 77db 	orr.w	r7, r7, fp, lsr #31
 8002880:	e9c4 7600 	strd	r7, r6, [r4]
 8002884:	3408      	adds	r4, #8
 8002886:	9408      	str	r4, [sp, #32]
            Egi[i] ^= Di[i];
 8002888:	9c07      	ldr	r4, [sp, #28]
 800288a:	e9d4 7600 	ldrd	r7, r6, [r4]
 800288e:	3408      	adds	r4, #8
 8002890:	9407      	str	r4, [sp, #28]
 8002892:	6804      	ldr	r4, [r0, #0]
 8002894:	4067      	eors	r7, r4
 8002896:	6844      	ldr	r4, [r0, #4]
 8002898:	f840 7b08 	str.w	r7, [r0], #8
 800289c:	ea84 0b06 	eor.w	fp, r4, r6
            BCe[i] = ROL(Egi[i], 6);
 80028a0:	ea4f 168b 	mov.w	r6, fp, lsl #6
 80028a4:	ea46 6697 	orr.w	r6, r6, r7, lsr #26
 80028a8:	01bf      	lsls	r7, r7, #6
 80028aa:	ea47 679b 	orr.w	r7, r7, fp, lsr #26
 80028ae:	e9ca 7600 	strd	r7, r6, [sl]
            Eko[i] ^= Do[i];
 80028b2:	e9d9 7600 	ldrd	r7, r6, [r9]
 80028b6:	680c      	ldr	r4, [r1, #0]
            Egi[i] ^= Di[i];
 80028b8:	f840 bc04 	str.w	fp, [r0, #-4]
            Eko[i] ^= Do[i];
 80028bc:	4067      	eors	r7, r4
 80028be:	684c      	ldr	r4, [r1, #4]
 80028c0:	f841 7b08 	str.w	r7, [r1], #8
 80028c4:	ea84 0b06 	eor.w	fp, r4, r6
            BCi[i] = ROL(Eko[i], 25);
 80028c8:	ea4f 664b 	mov.w	r6, fp, lsl #25
 80028cc:	ea46 16d7 	orr.w	r6, r6, r7, lsr #7
 80028d0:	067f      	lsls	r7, r7, #25
 80028d2:	ea47 17db 	orr.w	r7, r7, fp, lsr #7
 80028d6:	e9c8 7600 	strd	r7, r6, [r8]
            Emu[i] ^= Du[i];
 80028da:	e9de 7600 	ldrd	r7, r6, [lr]
 80028de:	6814      	ldr	r4, [r2, #0]
            Eko[i] ^= Do[i];
 80028e0:	f841 bc04 	str.w	fp, [r1, #-4]
            Emu[i] ^= Du[i];
 80028e4:	4067      	eors	r7, r4
 80028e6:	6854      	ldr	r4, [r2, #4]
 80028e8:	f842 7b08 	str.w	r7, [r2], #8
 80028ec:	ea84 0b06 	eor.w	fp, r4, r6
            BCo[i] = ROL(Emu[i], 8);
 80028f0:	ea4f 260b 	mov.w	r6, fp, lsl #8
 80028f4:	9c06      	ldr	r4, [sp, #24]
            Emu[i] ^= Du[i];
 80028f6:	f842 bc04 	str.w	fp, [r2, #-4]
            BCo[i] = ROL(Emu[i], 8);
 80028fa:	ea46 6617 	orr.w	r6, r6, r7, lsr #24
 80028fe:	023f      	lsls	r7, r7, #8
 8002900:	ea47 671b 	orr.w	r7, r7, fp, lsr #24
 8002904:	e9c4 7600 	strd	r7, r6, [r4]
 8002908:	3408      	adds	r4, #8
 800290a:	9406      	str	r4, [sp, #24]
            Esa[i] ^= Da[i];
 800290c:	9c02      	ldr	r4, [sp, #8]
 800290e:	6824      	ldr	r4, [r4, #0]
 8002910:	9409      	str	r4, [sp, #36]	; 0x24
 8002912:	9c02      	ldr	r4, [sp, #8]
 8002914:	e9d5 7600 	ldrd	r7, r6, [r5]
 8002918:	6864      	ldr	r4, [r4, #4]
 800291a:	940f      	str	r4, [sp, #60]	; 0x3c
 800291c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800291e:	4067      	eors	r7, r4
 8002920:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8002922:	ea84 0b06 	eor.w	fp, r4, r6
 8002926:	9c02      	ldr	r4, [sp, #8]
 8002928:	f844 7b08 	str.w	r7, [r4], #8
            BCu[i] = ROL(Esa[i], 18);
 800292c:	ea4f 468b 	mov.w	r6, fp, lsl #18
 8002930:	ea46 3697 	orr.w	r6, r6, r7, lsr #14
            Esa[i] ^= Da[i];
 8002934:	9402      	str	r4, [sp, #8]
 8002936:	f844 bc04 	str.w	fp, [r4, #-4]
            BCu[i] = ROL(Esa[i], 18);
 800293a:	04bf      	lsls	r7, r7, #18
 800293c:	9c01      	ldr	r4, [sp, #4]
 800293e:	ea47 379b 	orr.w	r7, r7, fp, lsr #14
 8002942:	e9c4 7600 	strd	r7, r6, [r4]
 8002946:	3408      	adds	r4, #8
 8002948:	9401      	str	r4, [sp, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 800294a:	f50d 6487 	add.w	r4, sp, #1080	; 0x438
 800294e:	429c      	cmp	r4, r3
 8002950:	f10c 0c08 	add.w	ip, ip, #8
 8002954:	f10a 0a08 	add.w	sl, sl, #8
            BCi[i] = ROL(Eko[i], 25);
 8002958:	f109 0908 	add.w	r9, r9, #8
 800295c:	f108 0808 	add.w	r8, r8, #8
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002960:	f10e 0e08 	add.w	lr, lr, #8
 8002964:	f105 0508 	add.w	r5, r5, #8
 8002968:	f47f af77 	bne.w	800285a <KeccakF1600_StatePermute_masked+0x10d6>
        }
        not_mult_xor(Aka, BCe, BCi, BCa);
 800296c:	abc6      	add	r3, sp, #792	; 0x318
 800296e:	aad2      	add	r2, sp, #840	; 0x348
 8002970:	a9cc      	add	r1, sp, #816	; 0x330
 8002972:	a86c      	add	r0, sp, #432	; 0x1b0
 8002974:	f7fe fee0 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ake, BCi, BCo, BCe);
 8002978:	abcc      	add	r3, sp, #816	; 0x330
 800297a:	aad8      	add	r2, sp, #864	; 0x360
 800297c:	a9d2      	add	r1, sp, #840	; 0x348
 800297e:	a872      	add	r0, sp, #456	; 0x1c8
 8002980:	f7fe feda 	bl	8001738 <not_mult_xor>
        not_mult_xor(Aki, BCo, BCu, BCi);
 8002984:	abd2      	add	r3, sp, #840	; 0x348
 8002986:	aade      	add	r2, sp, #888	; 0x378
 8002988:	a9d8      	add	r1, sp, #864	; 0x360
 800298a:	a878      	add	r0, sp, #480	; 0x1e0
 800298c:	f7fe fed4 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ako, BCu, BCa, BCo);
 8002990:	abd8      	add	r3, sp, #864	; 0x360
 8002992:	aac6      	add	r2, sp, #792	; 0x318
 8002994:	a9de      	add	r1, sp, #888	; 0x378
 8002996:	a87e      	add	r0, sp, #504	; 0x1f8
 8002998:	f7fe fece 	bl	8001738 <not_mult_xor>
        not_mult_xor(Aku, BCa, BCe, BCu);
 800299c:	acde      	add	r4, sp, #888	; 0x378
 800299e:	abde      	add	r3, sp, #888	; 0x378
 80029a0:	aacc      	add	r2, sp, #816	; 0x330
 80029a2:	a9c6      	add	r1, sp, #792	; 0x318
 80029a4:	a884      	add	r0, sp, #528	; 0x210
 80029a6:	f7fe fec7 	bl	8001738 <not_mult_xor>
 80029aa:	9401      	str	r4, [sp, #4]
 80029ac:	acd8      	add	r4, sp, #864	; 0x360
 80029ae:	9402      	str	r4, [sp, #8]
 80029b0:	ace4      	add	r4, sp, #912	; 0x390
 80029b2:	9406      	str	r4, [sp, #24]
 80029b4:	acc6      	add	r4, sp, #792	; 0x318
 80029b6:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
 80029ba:	f50d 60a2 	add.w	r0, sp, #1296	; 0x510
 80029be:	f50d 61b4 	add.w	r1, sp, #1440	; 0x5a0
 80029c2:	f50d 62c6 	add.w	r2, sp, #1584	; 0x630
 80029c6:	adf6      	add	r5, sp, #984	; 0x3d8
 80029c8:	f50d 7e70 	add.w	lr, sp, #960	; 0x3c0
 80029cc:	f50d 7852 	add.w	r8, sp, #840	; 0x348
 80029d0:	f50d 796a 	add.w	r9, sp, #936	; 0x3a8
 80029d4:	f50d 7a4c 	add.w	sl, sp, #816	; 0x330
 80029d8:	9407      	str	r4, [sp, #28]
 80029da:	f50d 7c7c 	add.w	ip, sp, #1008	; 0x3f0
        //Aki = BCi ^ ((~BCo) & BCu);
        //Ako = BCo ^ ((~BCu) & BCa);
        //Aku = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
        {
            Ebu[i] ^= Du[i];
 80029de:	e9dc 7600 	ldrd	r7, r6, [ip]
 80029e2:	681c      	ldr	r4, [r3, #0]
 80029e4:	4067      	eors	r7, r4
 80029e6:	685c      	ldr	r4, [r3, #4]
 80029e8:	f843 7b08 	str.w	r7, [r3], #8
 80029ec:	ea84 0b06 	eor.w	fp, r4, r6
            BCa[i] = ROL(Ebu[i], 27);
 80029f0:	ea4f 66cb 	mov.w	r6, fp, lsl #27
 80029f4:	9c07      	ldr	r4, [sp, #28]
            Ebu[i] ^= Du[i];
 80029f6:	f843 bc04 	str.w	fp, [r3, #-4]
            BCa[i] = ROL(Ebu[i], 27);
 80029fa:	ea46 1657 	orr.w	r6, r6, r7, lsr #5
 80029fe:	06ff      	lsls	r7, r7, #27
 8002a00:	ea47 175b 	orr.w	r7, r7, fp, lsr #5
 8002a04:	e9c4 7600 	strd	r7, r6, [r4]
 8002a08:	3408      	adds	r4, #8
 8002a0a:	9407      	str	r4, [sp, #28]
            Ega[i] ^= Da[i];
 8002a0c:	9c03      	ldr	r4, [sp, #12]
 8002a0e:	6824      	ldr	r4, [r4, #0]
 8002a10:	9408      	str	r4, [sp, #32]
 8002a12:	9c03      	ldr	r4, [sp, #12]
 8002a14:	6864      	ldr	r4, [r4, #4]
 8002a16:	9409      	str	r4, [sp, #36]	; 0x24
 8002a18:	9c06      	ldr	r4, [sp, #24]
 8002a1a:	e9d4 7600 	ldrd	r7, r6, [r4]
 8002a1e:	3408      	adds	r4, #8
 8002a20:	9406      	str	r4, [sp, #24]
 8002a22:	9c08      	ldr	r4, [sp, #32]
 8002a24:	4067      	eors	r7, r4
 8002a26:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002a28:	4066      	eors	r6, r4
 8002a2a:	9c03      	ldr	r4, [sp, #12]
 8002a2c:	f844 7b08 	str.w	r7, [r4], #8
            BCe[i] = ROL(Ega[i], 36);
 8002a30:	ea4f 7b17 	mov.w	fp, r7, lsr #28
            Ega[i] ^= Da[i];
 8002a34:	f844 6c04 	str.w	r6, [r4, #-4]
            BCe[i] = ROL(Ega[i], 36);
 8002a38:	ea4b 1b06 	orr.w	fp, fp, r6, lsl #4
 8002a3c:	0f36      	lsrs	r6, r6, #28
 8002a3e:	ea46 1607 	orr.w	r6, r6, r7, lsl #4
 8002a42:	e9ca b600 	strd	fp, r6, [sl]
            Eke[i] ^= De[i];
 8002a46:	e9d9 7600 	ldrd	r7, r6, [r9]
            Ega[i] ^= Da[i];
 8002a4a:	9403      	str	r4, [sp, #12]
            Eke[i] ^= De[i];
 8002a4c:	6804      	ldr	r4, [r0, #0]
 8002a4e:	4067      	eors	r7, r4
 8002a50:	6844      	ldr	r4, [r0, #4]
 8002a52:	f840 7b08 	str.w	r7, [r0], #8
 8002a56:	ea84 0b06 	eor.w	fp, r4, r6
            BCi[i] = ROL(Eke[i], 10);
 8002a5a:	ea4f 268b 	mov.w	r6, fp, lsl #10
 8002a5e:	ea46 5697 	orr.w	r6, r6, r7, lsr #22
 8002a62:	02bf      	lsls	r7, r7, #10
 8002a64:	ea47 579b 	orr.w	r7, r7, fp, lsr #22
 8002a68:	e9c8 7600 	strd	r7, r6, [r8]
            Emi[i] ^= Di[i];
 8002a6c:	e9de 7600 	ldrd	r7, r6, [lr]
 8002a70:	680c      	ldr	r4, [r1, #0]
            Eke[i] ^= De[i];
 8002a72:	f840 bc04 	str.w	fp, [r0, #-4]
            Emi[i] ^= Di[i];
 8002a76:	4067      	eors	r7, r4
 8002a78:	684c      	ldr	r4, [r1, #4]
 8002a7a:	f841 7b08 	str.w	r7, [r1], #8
 8002a7e:	ea84 0b06 	eor.w	fp, r4, r6
            BCo[i] = ROL(Emi[i], 15);
 8002a82:	ea4f 36cb 	mov.w	r6, fp, lsl #15
 8002a86:	9c02      	ldr	r4, [sp, #8]
            Emi[i] ^= Di[i];
 8002a88:	f841 bc04 	str.w	fp, [r1, #-4]
            BCo[i] = ROL(Emi[i], 15);
 8002a8c:	ea46 4657 	orr.w	r6, r6, r7, lsr #17
 8002a90:	03ff      	lsls	r7, r7, #15
 8002a92:	ea47 475b 	orr.w	r7, r7, fp, lsr #17
 8002a96:	e9c4 7600 	strd	r7, r6, [r4]
            Eso[i] ^= Do[i];
 8002a9a:	e9d5 7600 	ldrd	r7, r6, [r5]
 8002a9e:	3408      	adds	r4, #8
 8002aa0:	9402      	str	r4, [sp, #8]
 8002aa2:	6814      	ldr	r4, [r2, #0]
 8002aa4:	4067      	eors	r7, r4
 8002aa6:	6854      	ldr	r4, [r2, #4]
 8002aa8:	f842 7b08 	str.w	r7, [r2], #8
 8002aac:	4066      	eors	r6, r4
            BCu[i] = ROL(Eso[i], 56);
 8002aae:	ea4f 2b17 	mov.w	fp, r7, lsr #8
 8002ab2:	9c01      	ldr	r4, [sp, #4]
            Eso[i] ^= Do[i];
 8002ab4:	f842 6c04 	str.w	r6, [r2, #-4]
            BCu[i] = ROL(Eso[i], 56);
 8002ab8:	ea4b 6b06 	orr.w	fp, fp, r6, lsl #24
 8002abc:	0a36      	lsrs	r6, r6, #8
 8002abe:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 8002ac2:	e9c4 b600 	strd	fp, r6, [r4]
 8002ac6:	3408      	adds	r4, #8
 8002ac8:	9401      	str	r4, [sp, #4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002aca:	f50d 6490 	add.w	r4, sp, #1152	; 0x480
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	f10c 0c08 	add.w	ip, ip, #8
 8002ad4:	f10a 0a08 	add.w	sl, sl, #8
            BCi[i] = ROL(Eke[i], 10);
 8002ad8:	f109 0908 	add.w	r9, r9, #8
 8002adc:	f108 0808 	add.w	r8, r8, #8
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002ae0:	f10e 0e08 	add.w	lr, lr, #8
 8002ae4:	f105 0508 	add.w	r5, r5, #8
 8002ae8:	f47f af79 	bne.w	80029de <KeccakF1600_StatePermute_masked+0x125a>
        }
        not_mult_xor(Ama, BCe, BCi, BCa);
 8002aec:	abc6      	add	r3, sp, #792	; 0x318
 8002aee:	aad2      	add	r2, sp, #840	; 0x348
 8002af0:	a9cc      	add	r1, sp, #816	; 0x330
 8002af2:	a88a      	add	r0, sp, #552	; 0x228
 8002af4:	f7fe fe20 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ame, BCi, BCo, BCe);
 8002af8:	abcc      	add	r3, sp, #816	; 0x330
 8002afa:	aad8      	add	r2, sp, #864	; 0x360
 8002afc:	a9d2      	add	r1, sp, #840	; 0x348
 8002afe:	a890      	add	r0, sp, #576	; 0x240
 8002b00:	f7fe fe1a 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ami, BCo, BCu, BCi);
 8002b04:	abd2      	add	r3, sp, #840	; 0x348
 8002b06:	aade      	add	r2, sp, #888	; 0x378
 8002b08:	a9d8      	add	r1, sp, #864	; 0x360
 8002b0a:	a896      	add	r0, sp, #600	; 0x258
 8002b0c:	f7fe fe14 	bl	8001738 <not_mult_xor>
        not_mult_xor(Amo, BCu, BCa, BCo);
 8002b10:	abd8      	add	r3, sp, #864	; 0x360
 8002b12:	aac6      	add	r2, sp, #792	; 0x318
 8002b14:	a9de      	add	r1, sp, #888	; 0x378
 8002b16:	a89c      	add	r0, sp, #624	; 0x270
 8002b18:	f7fe fe0e 	bl	8001738 <not_mult_xor>
        not_mult_xor(Amu, BCa, BCe, BCu);
 8002b1c:	abde      	add	r3, sp, #888	; 0x378
 8002b1e:	aacc      	add	r2, sp, #816	; 0x330
 8002b20:	a9c6      	add	r1, sp, #792	; 0x318
 8002b22:	a8a2      	add	r0, sp, #648	; 0x288
 8002b24:	f7fe fe08 	bl	8001738 <not_mult_xor>
        //Ama = BCa ^ ((~BCe) & BCi);
        //Ame = BCe ^ ((~BCi) & BCo);
        //Ami = BCi ^ ((~BCo) & BCu);
        //Amo = BCo ^ ((~BCu) & BCa);
        //Amu = BCu ^ ((~BCa) & BCe);
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002b28:	f50d 6387 	add.w	r3, sp, #1080	; 0x438
 8002b2c:	f50d 6099 	add.w	r0, sp, #1224	; 0x4c8
 8002b30:	f50d 61ab 	add.w	r1, sp, #1368	; 0x558
 8002b34:	f50d 62c0 	add.w	r2, sp, #1536	; 0x600
 8002b38:	f50d 6c8a 	add.w	ip, sp, #1104	; 0x450
        {
            Ebi[i] ^= Di[i];
 8002b3c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8002b3e:	685d      	ldr	r5, [r3, #4]
 8002b40:	e9d4 6700 	ldrd	r6, r7, [r4]
 8002b44:	3408      	adds	r4, #8
 8002b46:	941c      	str	r4, [sp, #112]	; 0x70
 8002b48:	681c      	ldr	r4, [r3, #0]
 8002b4a:	4066      	eors	r6, r4
 8002b4c:	f843 6b08 	str.w	r6, [r3], #8
 8002b50:	407d      	eors	r5, r7
            BCa[i] = ROL(Ebi[i], 62);
 8002b52:	08b7      	lsrs	r7, r6, #2
 8002b54:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
            Ebi[i] ^= Di[i];
 8002b56:	f843 5c04 	str.w	r5, [r3, #-4]
            BCa[i] = ROL(Ebi[i], 62);
 8002b5a:	ea47 7785 	orr.w	r7, r7, r5, lsl #30
 8002b5e:	08ad      	lsrs	r5, r5, #2
 8002b60:	ea45 7586 	orr.w	r5, r5, r6, lsl #30
 8002b64:	e9c4 7500 	strd	r7, r5, [r4]
 8002b68:	3408      	adds	r4, #8
 8002b6a:	941b      	str	r4, [sp, #108]	; 0x6c
            Ego[i] ^= Do[i];
 8002b6c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8002b6e:	6845      	ldr	r5, [r0, #4]
 8002b70:	e9d4 6700 	ldrd	r6, r7, [r4]
 8002b74:	3408      	adds	r4, #8
 8002b76:	941a      	str	r4, [sp, #104]	; 0x68
 8002b78:	6804      	ldr	r4, [r0, #0]
 8002b7a:	4066      	eors	r6, r4
 8002b7c:	f840 6b08 	str.w	r6, [r0], #8
 8002b80:	407d      	eors	r5, r7
            BCe[i] = ROL(Ego[i], 55);
 8002b82:	0a77      	lsrs	r7, r6, #9
 8002b84:	9c19      	ldr	r4, [sp, #100]	; 0x64
            Ego[i] ^= Do[i];
 8002b86:	f840 5c04 	str.w	r5, [r0, #-4]
            BCe[i] = ROL(Ego[i], 55);
 8002b8a:	ea47 57c5 	orr.w	r7, r7, r5, lsl #23
 8002b8e:	0a6d      	lsrs	r5, r5, #9
 8002b90:	ea45 55c6 	orr.w	r5, r5, r6, lsl #23
 8002b94:	e9c4 7500 	strd	r7, r5, [r4]
 8002b98:	3408      	adds	r4, #8
 8002b9a:	9419      	str	r4, [sp, #100]	; 0x64
            Eku[i] ^= Du[i];
 8002b9c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8002b9e:	684d      	ldr	r5, [r1, #4]
 8002ba0:	e9d4 6700 	ldrd	r6, r7, [r4]
 8002ba4:	3408      	adds	r4, #8
 8002ba6:	9418      	str	r4, [sp, #96]	; 0x60
 8002ba8:	680c      	ldr	r4, [r1, #0]
 8002baa:	4066      	eors	r6, r4
 8002bac:	f841 6b08 	str.w	r6, [r1], #8
 8002bb0:	407d      	eors	r5, r7
            BCi[i] = ROL(Eku[i], 39);
 8002bb2:	0e77      	lsrs	r7, r6, #25
 8002bb4:	ea47 17c5 	orr.w	r7, r7, r5, lsl #7
            Eku[i] ^= Du[i];
 8002bb8:	f841 5c04 	str.w	r5, [r1, #-4]
            BCi[i] = ROL(Eku[i], 39);
 8002bbc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8002bbe:	0e6d      	lsrs	r5, r5, #25
 8002bc0:	ea45 15c6 	orr.w	r5, r5, r6, lsl #7
 8002bc4:	e9c4 7500 	strd	r7, r5, [r4]
 8002bc8:	3408      	adds	r4, #8
 8002bca:	9417      	str	r4, [sp, #92]	; 0x5c
            Ema[i] ^= Da[i];
 8002bcc:	9c04      	ldr	r4, [sp, #16]
 8002bce:	6824      	ldr	r4, [r4, #0]
 8002bd0:	9401      	str	r4, [sp, #4]
 8002bd2:	9c04      	ldr	r4, [sp, #16]
 8002bd4:	6865      	ldr	r5, [r4, #4]
 8002bd6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8002bd8:	e9d4 6700 	ldrd	r6, r7, [r4]
 8002bdc:	3408      	adds	r4, #8
 8002bde:	9416      	str	r4, [sp, #88]	; 0x58
 8002be0:	9c01      	ldr	r4, [sp, #4]
 8002be2:	4066      	eors	r6, r4
 8002be4:	9c04      	ldr	r4, [sp, #16]
 8002be6:	f844 6b08 	str.w	r6, [r4], #8
 8002bea:	407d      	eors	r5, r7
            BCo[i] = ROL(Ema[i], 41);
 8002bec:	0df7      	lsrs	r7, r6, #23
            Ema[i] ^= Da[i];
 8002bee:	f844 5c04 	str.w	r5, [r4, #-4]
            BCo[i] = ROL(Ema[i], 41);
 8002bf2:	ea47 2745 	orr.w	r7, r7, r5, lsl #9
            Ema[i] ^= Da[i];
 8002bf6:	9404      	str	r4, [sp, #16]
            BCo[i] = ROL(Ema[i], 41);
 8002bf8:	0ded      	lsrs	r5, r5, #23
 8002bfa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002bfc:	ea45 2546 	orr.w	r5, r5, r6, lsl #9
 8002c00:	e9c4 7500 	strd	r7, r5, [r4]
 8002c04:	3408      	adds	r4, #8
 8002c06:	9415      	str	r4, [sp, #84]	; 0x54
            Ese[i] ^= De[i];
 8002c08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8002c0a:	6816      	ldr	r6, [r2, #0]
 8002c0c:	e9d4 7500 	ldrd	r7, r5, [r4]
 8002c10:	3408      	adds	r4, #8
 8002c12:	9414      	str	r4, [sp, #80]	; 0x50
 8002c14:	6854      	ldr	r4, [r2, #4]
 8002c16:	407e      	eors	r6, r7
 8002c18:	ea84 0705 	eor.w	r7, r4, r5
            BCu[i] = ROL(Ese[i], 2);
 8002c1c:	00bd      	lsls	r5, r7, #2
            Ese[i] ^= De[i];
 8002c1e:	f842 6b08 	str.w	r6, [r2], #8
            BCu[i] = ROL(Ese[i], 2);
 8002c22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            Ese[i] ^= De[i];
 8002c24:	f842 7c04 	str.w	r7, [r2, #-4]
            BCu[i] = ROL(Ese[i], 2);
 8002c28:	ea45 7596 	orr.w	r5, r5, r6, lsr #30
 8002c2c:	00b6      	lsls	r6, r6, #2
 8002c2e:	ea46 7697 	orr.w	r6, r6, r7, lsr #30
 8002c32:	e9c4 6500 	strd	r6, r5, [r4]
        for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002c36:	459c      	cmp	ip, r3
 8002c38:	f104 0408 	add.w	r4, r4, #8
 8002c3c:	9413      	str	r4, [sp, #76]	; 0x4c
 8002c3e:	f47f af7d 	bne.w	8002b3c <KeccakF1600_StatePermute_masked+0x13b8>
        }
        not_mult_xor(Asa, BCe, BCi, BCa);
 8002c42:	abc6      	add	r3, sp, #792	; 0x318
 8002c44:	aad2      	add	r2, sp, #840	; 0x348
 8002c46:	a9cc      	add	r1, sp, #816	; 0x330
 8002c48:	a8a8      	add	r0, sp, #672	; 0x2a0
 8002c4a:	f7fe fd75 	bl	8001738 <not_mult_xor>
        not_mult_xor(Ase, BCi, BCo, BCe);
 8002c4e:	abcc      	add	r3, sp, #816	; 0x330
 8002c50:	aad8      	add	r2, sp, #864	; 0x360
 8002c52:	a9d2      	add	r1, sp, #840	; 0x348
 8002c54:	a8ae      	add	r0, sp, #696	; 0x2b8
 8002c56:	f7fe fd6f 	bl	8001738 <not_mult_xor>
        not_mult_xor(Asi, BCo, BCu, BCi);
 8002c5a:	abd2      	add	r3, sp, #840	; 0x348
 8002c5c:	aade      	add	r2, sp, #888	; 0x378
 8002c5e:	a9d8      	add	r1, sp, #864	; 0x360
 8002c60:	a8b4      	add	r0, sp, #720	; 0x2d0
 8002c62:	f7fe fd69 	bl	8001738 <not_mult_xor>
        not_mult_xor(Aso, BCu, BCa, BCo);
 8002c66:	abd8      	add	r3, sp, #864	; 0x360
 8002c68:	aac6      	add	r2, sp, #792	; 0x318
 8002c6a:	a9de      	add	r1, sp, #888	; 0x378
 8002c6c:	a8ba      	add	r0, sp, #744	; 0x2e8
 8002c6e:	f7fe fd63 	bl	8001738 <not_mult_xor>
        not_mult_xor(Asu, BCa, BCe, BCu);
 8002c72:	abde      	add	r3, sp, #888	; 0x378
 8002c74:	aacc      	add	r2, sp, #816	; 0x330
 8002c76:	a9c6      	add	r1, sp, #792	; 0x318
 8002c78:	a8c0      	add	r0, sp, #768	; 0x300
 8002c7a:	f7fe fd5d 	bl	8001738 <not_mult_xor>
    for (round = 0; round < NROUNDS; round += 2)
 8002c7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c80:	3302      	adds	r3, #2
 8002c82:	9320      	str	r3, [sp, #128]	; 0x80
 8002c84:	9b05      	ldr	r3, [sp, #20]
 8002c86:	3310      	adds	r3, #16
 8002c88:	9305      	str	r3, [sp, #20]
 8002c8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c8c:	2b18      	cmp	r3, #24
 8002c8e:	f47e ae31 	bne.w	80018f4 <KeccakF1600_StatePermute_masked+0x170>
 8002c92:	2100      	movs	r1, #0
    }

    for (i = 0; i < (MASKING_ORDER + 1); i++)
    {
        //copyToState(state, A)
        state_masked[ 0+(i*25)] = Aba[i];
 8002c94:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8002c96:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002c9a:	901f      	str	r0, [sp, #124]	; 0x7c
 8002c9c:	9800      	ldr	r0, [sp, #0]
 8002c9e:	e9c0 2300 	strd	r2, r3, [r0]
        state_masked[ 1+(i*25)] = Abe[i];
 8002ca2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002ca4:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002ca8:	900e      	str	r0, [sp, #56]	; 0x38
 8002caa:	9800      	ldr	r0, [sp, #0]
 8002cac:	e9c0 2302 	strd	r2, r3, [r0, #8]
        state_masked[ 2+(i*25)] = Abi[i];
 8002cb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002cb2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002cb6:	900d      	str	r0, [sp, #52]	; 0x34
 8002cb8:	9800      	ldr	r0, [sp, #0]
 8002cba:	e9c0 2304 	strd	r2, r3, [r0, #16]
        state_masked[ 3+(i*25)] = Abo[i];
 8002cbe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002cc0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002cc4:	900c      	str	r0, [sp, #48]	; 0x30
 8002cc6:	9800      	ldr	r0, [sp, #0]
 8002cc8:	e9c0 2306 	strd	r2, r3, [r0, #24]
        state_masked[ 4+(i*25)] = Abu[i];
 8002ccc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002cce:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002cd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8002cd4:	9800      	ldr	r0, [sp, #0]
 8002cd6:	e9c0 2308 	strd	r2, r3, [r0, #32]
        state_masked[ 5+(i*25)] = Aga[i];
 8002cda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cdc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002ce0:	900a      	str	r0, [sp, #40]	; 0x28
 8002ce2:	9800      	ldr	r0, [sp, #0]
 8002ce4:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        state_masked[ 6+(i*25)] = Age[i];
 8002ce8:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002cea:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002cee:	901e      	str	r0, [sp, #120]	; 0x78
 8002cf0:	9800      	ldr	r0, [sp, #0]
 8002cf2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        state_masked[ 7+(i*25)] = Agi[i];
 8002cf6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002cf8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
 8002cfc:	901d      	str	r0, [sp, #116]	; 0x74
 8002cfe:	9800      	ldr	r0, [sp, #0]
 8002d00:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        state_masked[ 8+(i*25)] = Ago[i];
 8002d04:	ab60      	add	r3, sp, #384	; 0x180
 8002d06:	440b      	add	r3, r1
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        state_masked[ 9+(i*25)] = Agu[i];
 8002d10:	ab66      	add	r3, sp, #408	; 0x198
 8002d12:	440b      	add	r3, r1
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
        state_masked[10+(i*25)] = Aka[i];
 8002d1c:	ab6c      	add	r3, sp, #432	; 0x1b0
 8002d1e:	440b      	add	r3, r1
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
        state_masked[11+(i*25)] = Ake[i];
 8002d28:	ab72      	add	r3, sp, #456	; 0x1c8
 8002d2a:	440b      	add	r3, r1
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
        state_masked[12+(i*25)] = Aki[i];
 8002d34:	ab78      	add	r3, sp, #480	; 0x1e0
 8002d36:	440b      	add	r3, r1
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
        state_masked[13+(i*25)] = Ako[i];
 8002d40:	ab7e      	add	r3, sp, #504	; 0x1f8
 8002d42:	440b      	add	r3, r1
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
        state_masked[14+(i*25)] = Aku[i];
 8002d4c:	ab84      	add	r3, sp, #528	; 0x210
 8002d4e:	440b      	add	r3, r1
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
        state_masked[15+(i*25)] = Ama[i];
 8002d58:	ab8a      	add	r3, sp, #552	; 0x228
 8002d5a:	440b      	add	r3, r1
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	e9c0 231e 	strd	r2, r3, [r0, #120]	; 0x78
        state_masked[16+(i*25)] = Ame[i];
 8002d64:	ab90      	add	r3, sp, #576	; 0x240
 8002d66:	440b      	add	r3, r1
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	e9c0 2320 	strd	r2, r3, [r0, #128]	; 0x80
        state_masked[17+(i*25)] = Ami[i];
 8002d70:	ab96      	add	r3, sp, #600	; 0x258
 8002d72:	440b      	add	r3, r1
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	e9c0 2322 	strd	r2, r3, [r0, #136]	; 0x88
        state_masked[18+(i*25)] = Amo[i];
 8002d7c:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
 8002d80:	440b      	add	r3, r1
 8002d82:	e953 23fc 	ldrd	r2, r3, [r3, #-1008]	; 0x3f0
 8002d86:	e9c0 2324 	strd	r2, r3, [r0, #144]	; 0x90
        state_masked[19+(i*25)] = Amu[i];
 8002d8a:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
 8002d8e:	440b      	add	r3, r1
 8002d90:	e953 23f6 	ldrd	r2, r3, [r3, #-984]	; 0x3d8
 8002d94:	e9c0 2326 	strd	r2, r3, [r0, #152]	; 0x98
        state_masked[20+(i*25)] = Asa[i];
 8002d98:	aba8      	add	r3, sp, #672	; 0x2a0
 8002d9a:	440b      	add	r3, r1
 8002d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da0:	e9c0 2328 	strd	r2, r3, [r0, #160]	; 0xa0
        state_masked[21+(i*25)] = Ase[i];
 8002da4:	abae      	add	r3, sp, #696	; 0x2b8
 8002da6:	440b      	add	r3, r1
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	e9c0 232a 	strd	r2, r3, [r0, #168]	; 0xa8
        state_masked[22+(i*25)] = Asi[i];
 8002db0:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
 8002db4:	440b      	add	r3, r1
 8002db6:	e953 23e4 	ldrd	r2, r3, [r3, #-912]	; 0x390
 8002dba:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
        state_masked[23+(i*25)] = Aso[i];
 8002dbe:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
 8002dc2:	440b      	add	r3, r1
 8002dc4:	e953 23de 	ldrd	r2, r3, [r3, #-888]	; 0x378
 8002dc8:	e9c0 232e 	strd	r2, r3, [r0, #184]	; 0xb8
        state_masked[24+(i*25)] = Asu[i];
 8002dcc:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
 8002dd0:	440b      	add	r3, r1
 8002dd2:	e953 23d8 	ldrd	r2, r3, [r3, #-864]	; 0x360
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002dd6:	3108      	adds	r1, #8
        state_masked[24+(i*25)] = Asu[i];
 8002dd8:	e9c0 2330 	strd	r2, r3, [r0, #192]	; 0xc0
    for (i = 0; i < (MASKING_ORDER + 1); i++)
 8002ddc:	4603      	mov	r3, r0
 8002dde:	33c8      	adds	r3, #200	; 0xc8
 8002de0:	2918      	cmp	r1, #24
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f47f af56 	bne.w	8002c94 <KeccakF1600_StatePermute_masked+0x1510>
    }
	return;
}
 8002de8:	f20d 6d64 	addw	sp, sp, #1636	; 0x664
 8002dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002df0 <keccak_squeezeblocks_masked>:
static void keccak_squeezeblocks_masked(uint8_t* out_masked,
                                        size_t nblocks,
                                        uint64_t s_masked[25*(MASKING_ORDER+1)],
                                        unsigned int r,
                                        size_t outlen)
{
 8002df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df4:	b085      	sub	sp, #20
 8002df6:	469a      	mov	sl, r3
    unsigned int i,l,offset;
    if (outlen == 0)
 8002df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
 8002dfa:	4683      	mov	fp, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	4690      	mov	r8, r2
    if (outlen == 0)
 8002e00:	b913      	cbnz	r3, 8002e08 <keccak_squeezeblocks_masked+0x18>
        offset = r * nblocks;
 8002e02:	fb0a f301 	mul.w	r3, sl, r1
 8002e06:	930e      	str	r3, [sp, #56]	; 0x38
    while (nblocks > 0)
    {
        KeccakF1600_StatePermute_masked(s_masked);
        for (l = 0; l < (MASKING_ORDER + 1); l++)
        {
            for (i = 0; i < r / 8; i++)
 8002e08:	ea4f 03da 	mov.w	r3, sl, lsr #3
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	e036      	b.n	8002e7e <keccak_squeezeblocks_masked+0x8e>
        KeccakF1600_StatePermute_masked(s_masked);
 8002e10:	4640      	mov	r0, r8
 8002e12:	f7fe fcb7 	bl	8001784 <KeccakF1600_StatePermute_masked>
 8002e16:	2200      	movs	r2, #0
 8002e18:	4617      	mov	r7, r2
            for (i = 0; i < r / 8; i++)
 8002e1a:	eb08 00c2 	add.w	r0, r8, r2, lsl #3
{
 8002e1e:	463e      	mov	r6, r7
            for (i = 0; i < r / 8; i++)
 8002e20:	2500      	movs	r5, #0
                store64(out_masked + (8 * i) + (l* offset), s_masked[i+(l*25)]);
 8002e22:	6803      	ldr	r3, [r0, #0]
 8002e24:	9303      	str	r3, [sp, #12]
 8002e26:	6843      	ldr	r3, [r0, #4]
 8002e28:	4699      	mov	r9, r3
 8002e2a:	eb0b 0306 	add.w	r3, fp, r6
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	3008      	adds	r0, #8
 8002e32:	2300      	movs	r3, #0
		x[i] = u >> 8 * i;
 8002e34:	9903      	ldr	r1, [sp, #12]
 8002e36:	f1c3 0e20 	rsb	lr, r3, #32
 8002e3a:	f1a3 0c20 	sub.w	ip, r3, #32
 8002e3e:	40d9      	lsrs	r1, r3
 8002e40:	fa09 fe0e 	lsl.w	lr, r9, lr
 8002e44:	ea41 010e 	orr.w	r1, r1, lr
 8002e48:	fa29 fc0c 	lsr.w	ip, r9, ip
 8002e4c:	ea41 010c 	orr.w	r1, r1, ip
 8002e50:	f8dd c004 	ldr.w	ip, [sp, #4]
	for (i = 0; i < 8; i++)
 8002e54:	3308      	adds	r3, #8
		x[i] = u >> 8 * i;
 8002e56:	f80c 1b01 	strb.w	r1, [ip], #1
	for (i = 0; i < 8; i++)
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
		x[i] = u >> 8 * i;
 8002e5c:	46ce      	mov	lr, r9
 8002e5e:	f8cd c004 	str.w	ip, [sp, #4]
	for (i = 0; i < 8; i++)
 8002e62:	d1e7      	bne.n	8002e34 <keccak_squeezeblocks_masked+0x44>
            for (i = 0; i < r / 8; i++)
 8002e64:	9b02      	ldr	r3, [sp, #8]
 8002e66:	3501      	adds	r5, #1
 8002e68:	42ab      	cmp	r3, r5
 8002e6a:	f106 0608 	add.w	r6, r6, #8
 8002e6e:	d8d8      	bhi.n	8002e22 <keccak_squeezeblocks_masked+0x32>
        for (l = 0; l < (MASKING_ORDER + 1); l++)
 8002e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e72:	3219      	adds	r2, #25
 8002e74:	2a4b      	cmp	r2, #75	; 0x4b
 8002e76:	441f      	add	r7, r3
 8002e78:	d1cf      	bne.n	8002e1a <keccak_squeezeblocks_masked+0x2a>
        }
        out_masked += r;
 8002e7a:	44d3      	add	fp, sl
        --nblocks;
 8002e7c:	3c01      	subs	r4, #1
    while (nblocks > 0)
 8002e7e:	2c00      	cmp	r4, #0
 8002e80:	d1c6      	bne.n	8002e10 <keccak_squeezeblocks_masked+0x20>
    }
    return;
}
 8002e82:	b005      	add	sp, #20
 8002e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e88 <keccak_absorb_masked>:
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
    uint8_t t[200*(MASKING_ORDER+1)] = { 0 };
 8002e90:	2700      	movs	r7, #0
{
 8002e92:	4606      	mov	r6, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	9301      	str	r3, [sp, #4]
    uint8_t t[200*(MASKING_ORDER+1)] = { 0 };
 8002e98:	4639      	mov	r1, r7
{
 8002e9a:	f89d 3298 	ldrb.w	r3, [sp, #664]	; 0x298
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	4615      	mov	r5, r2
    uint8_t t[200*(MASKING_ORDER+1)] = { 0 };
 8002ea2:	a807      	add	r0, sp, #28
 8002ea4:	f44f 7215 	mov.w	r2, #596	; 0x254
 8002ea8:	9706      	str	r7, [sp, #24]
 8002eaa:	f000 ff3b 	bl	8003d24 <memset>
            s_masked[i+(25*l)] = 0;
 8002eae:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 ff35 	bl	8003d24 <memset>
 8002eba:	f024 0307 	bic.w	r3, r4, #7
            for (i = 0; i < r / 8; i++)
 8002ebe:	f8dd b004 	ldr.w	fp, [sp, #4]
 8002ec2:	9303      	str	r3, [sp, #12]
    while (mlen >= r) {
 8002ec4:	45a3      	cmp	fp, r4
 8002ec6:	d24e      	bcs.n	8002f66 <keccak_absorb_masked+0xde>
 8002ec8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002ecc:	2700      	movs	r7, #0
 8002ece:	44b1      	add	r9, r6
        t[r - 1] |= 128; //Only in the first share
 8002ed0:	3c01      	subs	r4, #1
			t[i + (200 * l)] = m_masked[i + (l * tmp_mlen)];
 8002ed2:	ab06      	add	r3, sp, #24
 8002ed4:	465a      	mov	r2, fp
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8002edc:	f7fd f974 	bl	80001c8 <memcpy>
        t[i] = p; //Only in the first share
 8002ee0:	aa06      	add	r2, sp, #24
 8002ee2:	9b05      	ldr	r3, [sp, #20]
 8002ee4:	f802 300b 	strb.w	r3, [r2, fp]
        t[r - 1] |= 128; //Only in the first share
 8002ee8:	5d13      	ldrb	r3, [r2, r4]
 8002eea:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8002eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ef2:	5513      	strb	r3, [r2, r4]
        for (i = 0; i < r / 8; i++)
 8002ef4:	eb06 0108 	add.w	r1, r6, r8
 8002ef8:	e066      	b.n	8002fc8 <keccak_absorb_masked+0x140>
	for (i = 0; i < 8; i++)
 8002efa:	19eb      	adds	r3, r5, r7
 8002efc:	9302      	str	r3, [sp, #8]
            for (i = 0; i < r / 8; i++)
 8002efe:	2300      	movs	r3, #0
	uint64_t r = 0;
 8002f00:	4698      	mov	r8, r3
 8002f02:	469e      	mov	lr, r3
		r |= (uint64_t)x[i] << 8 * i;
 8002f04:	9802      	ldr	r0, [sp, #8]
 8002f06:	f810 9b01 	ldrb.w	r9, [r0], #1
 8002f0a:	9002      	str	r0, [sp, #8]
 8002f0c:	f1a3 0a20 	sub.w	sl, r3, #32
 8002f10:	f1c3 0020 	rsb	r0, r3, #32
 8002f14:	fa09 fa0a 	lsl.w	sl, r9, sl
 8002f18:	fa29 f000 	lsr.w	r0, r9, r0
 8002f1c:	fa09 f903 	lsl.w	r9, r9, r3
	for (i = 0; i < 8; i++)
 8002f20:	3308      	adds	r3, #8
		r |= (uint64_t)x[i] << 8 * i;
 8002f22:	ea4a 0000 	orr.w	r0, sl, r0
	for (i = 0; i < 8; i++)
 8002f26:	2b40      	cmp	r3, #64	; 0x40
		r |= (uint64_t)x[i] << 8 * i;
 8002f28:	ea49 0808 	orr.w	r8, r9, r8
 8002f2c:	ea40 0e0e 	orr.w	lr, r0, lr
	for (i = 0; i < 8; i++)
 8002f30:	d1e8      	bne.n	8002f04 <keccak_absorb_masked+0x7c>
                s_masked[i + (l * 25)] ^= load64(m_masked + (8 * i) + (l*tmp_mlen));
 8002f32:	e9d2 0300 	ldrd	r0, r3, [r2]
 8002f36:	ea80 0008 	eor.w	r0, r0, r8
 8002f3a:	f842 0b08 	str.w	r0, [r2], #8
 8002f3e:	ea83 030e 	eor.w	r3, r3, lr
 8002f42:	f842 3c04 	str.w	r3, [r2, #-4]
            for (i = 0; i < r / 8; i++)
 8002f46:	3708      	adds	r7, #8
 8002f48:	9b04      	ldr	r3, [sp, #16]
 8002f4a:	429f      	cmp	r7, r3
 8002f4c:	d1d5      	bne.n	8002efa <keccak_absorb_masked+0x72>
        for (l = 0; l < (MASKING_ORDER + 1); l++)
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	3119      	adds	r1, #25
 8002f52:	294b      	cmp	r1, #75	; 0x4b
 8002f54:	449c      	add	ip, r3
 8002f56:	d108      	bne.n	8002f6a <keccak_absorb_masked+0xe2>
        KeccakF1600_StatePermute_masked(s_masked);
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7fe fc13 	bl	8001784 <KeccakF1600_StatePermute_masked>
        mlen -= r;
 8002f5e:	ebab 0b04 	sub.w	fp, fp, r4
        m_masked += r;
 8002f62:	4425      	add	r5, r4
 8002f64:	e7ae      	b.n	8002ec4 <keccak_absorb_masked+0x3c>
 8002f66:	2100      	movs	r1, #0
 8002f68:	468c      	mov	ip, r1
 8002f6a:	9b03      	ldr	r3, [sp, #12]
 8002f6c:	4463      	add	r3, ip
 8002f6e:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8002f72:	9304      	str	r3, [sp, #16]
	uint64_t r = 0;
 8002f74:	4667      	mov	r7, ip
 8002f76:	e7e7      	b.n	8002f48 <keccak_absorb_masked+0xc0>
	for (i = 0; i < 8; i++)
 8002f78:	ab06      	add	r3, sp, #24
 8002f7a:	4443      	add	r3, r8
 8002f7c:	9302      	str	r3, [sp, #8]
        for (i = 0; i < r / 8; i++)
 8002f7e:	2300      	movs	r3, #0
	uint64_t r = 0;
 8002f80:	469a      	mov	sl, r3
 8002f82:	469e      	mov	lr, r3
		r |= (uint64_t)x[i] << 8 * i;
 8002f84:	9a02      	ldr	r2, [sp, #8]
 8002f86:	f812 cb01 	ldrb.w	ip, [r2], #1
 8002f8a:	9202      	str	r2, [sp, #8]
 8002f8c:	f1c3 0020 	rsb	r0, r3, #32
 8002f90:	f1a3 0220 	sub.w	r2, r3, #32
 8002f94:	fa0c f202 	lsl.w	r2, ip, r2
 8002f98:	fa2c f000 	lsr.w	r0, ip, r0
 8002f9c:	fa0c fc03 	lsl.w	ip, ip, r3
	for (i = 0; i < 8; i++)
 8002fa0:	3308      	adds	r3, #8
		r |= (uint64_t)x[i] << 8 * i;
 8002fa2:	4302      	orrs	r2, r0
	for (i = 0; i < 8; i++)
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
		r |= (uint64_t)x[i] << 8 * i;
 8002fa6:	ea4c 0a0a 	orr.w	sl, ip, sl
 8002faa:	ea42 0e0e 	orr.w	lr, r2, lr
	for (i = 0; i < 8; i++)
 8002fae:	d1e9      	bne.n	8002f84 <keccak_absorb_masked+0xfc>
		s_masked[i + (25 * l)] ^= load64(t + (8 * i) + (200 * l));
 8002fb0:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002fb4:	ea82 020a 	eor.w	r2, r2, sl
 8002fb8:	f841 2b08 	str.w	r2, [r1], #8
 8002fbc:	ea83 030e 	eor.w	r3, r3, lr
 8002fc0:	f841 3c04 	str.w	r3, [r1, #-4]
        for (i = 0; i < r / 8; i++)
 8002fc4:	f108 0808 	add.w	r8, r8, #8
 8002fc8:	4589      	cmp	r9, r1
 8002fca:	d1d5      	bne.n	8002f78 <keccak_absorb_masked+0xf0>
    for (l = 0; l < (MASKING_ORDER + 1); l++)
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	3719      	adds	r7, #25
 8002fd0:	2f4b      	cmp	r7, #75	; 0x4b
 8002fd2:	441d      	add	r5, r3
 8002fd4:	f109 09c8 	add.w	r9, r9, #200	; 0xc8
 8002fd8:	f47f af7b 	bne.w	8002ed2 <keccak_absorb_masked+0x4a>
}
 8002fdc:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8002fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fe4 <shake256_absorb_masked>:
* Arguments:   - keccak_state *s:   pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256_absorb_masked(keccak_state_masked* state_masked, const uint8_t* in_masked, size_t inlen)
{
 8002fe4:	b507      	push	{r0, r1, r2, lr}
 8002fe6:	4613      	mov	r3, r2
    keccak_absorb_masked(state_masked->s_masked, SHAKE256_RATE, in_masked, inlen, 0x1F);
 8002fe8:	221f      	movs	r2, #31
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	460a      	mov	r2, r1
 8002fee:	2188      	movs	r1, #136	; 0x88
 8002ff0:	f7ff ff4a 	bl	8002e88 <keccak_absorb_masked>
}
 8002ff4:	b003      	add	sp, #12
 8002ff6:	f85d fb04 	ldr.w	pc, [sp], #4

08002ffa <shake256_squeezeblocks_masked>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_State *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks_masked(uint8_t* out_masked, size_t nblocks, keccak_state_masked* state_masked, size_t outlen)
{
 8002ffa:	b507      	push	{r0, r1, r2, lr}
    keccak_squeezeblocks_masked(out_masked, nblocks, state_masked->s_masked, SHAKE256_RATE, outlen);
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2388      	movs	r3, #136	; 0x88
 8003000:	f7ff fef6 	bl	8002df0 <keccak_squeezeblocks_masked>
}
 8003004:	b003      	add	sp, #12
 8003006:	f85d fb04 	ldr.w	pc, [sp], #4

0800300a <shake256_masked>:
*              - size_t outlen:     requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen:      length of input in bytes
**************************************************/
void shake256_masked(uint8_t* out_masked, size_t outlen, const uint8_t* in_masked, size_t inlen)
{
 800300a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800300e:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8003012:	460d      	mov	r5, r1
 8003014:	4604      	mov	r4, r0
 8003016:	4611      	mov	r1, r2
    unsigned int i,l;
    size_t tmp_outlen;
    size_t nblocks = outlen / SHAKE256_RATE;
 8003018:	2788      	movs	r7, #136	; 0x88
    uint8_t t_masked[SHAKE256_RATE*(MASKING_ORDER+1)];
    keccak_state_masked state_masked;

    tmp_outlen = outlen;
    shake256_absorb_masked(&state_masked, in_masked, inlen);
 800301a:	461a      	mov	r2, r3
 800301c:	a866      	add	r0, sp, #408	; 0x198
 800301e:	f7ff ffe1 	bl	8002fe4 <shake256_absorb_masked>
    size_t nblocks = outlen / SHAKE256_RATE;
 8003022:	fbb5 f6f7 	udiv	r6, r5, r7
    shake256_squeezeblocks_masked(out_masked, nblocks, &state_masked, tmp_outlen);
 8003026:	462b      	mov	r3, r5
 8003028:	4631      	mov	r1, r6
 800302a:	aa66      	add	r2, sp, #408	; 0x198
 800302c:	4620      	mov	r0, r4
 800302e:	437e      	muls	r6, r7
 8003030:	f7ff ffe3 	bl	8002ffa <shake256_squeezeblocks_masked>
	
    out_masked += nblocks * SHAKE256_RATE;
    outlen -= nblocks * SHAKE256_RATE;

    if (outlen) {
 8003034:	ebb5 0806 	subs.w	r8, r5, r6
 8003038:	d012      	beq.n	8003060 <shake256_masked+0x56>
        shake256_squeezeblocks_masked(t_masked, 1, &state_masked, 0);
 800303a:	2300      	movs	r3, #0
 800303c:	aa66      	add	r2, sp, #408	; 0x198
 800303e:	2101      	movs	r1, #1
 8003040:	4668      	mov	r0, sp
 8003042:	f7ff ffda 	bl	8002ffa <shake256_squeezeblocks_masked>
        for (l = 0; l < (MASKING_ORDER + 1); l++)
 8003046:	4434      	add	r4, r6
 8003048:	2600      	movs	r6, #0
        {
            for (i = 0; i < outlen; i++)
                out_masked[i + (l * tmp_outlen)] = t_masked[i + (l * SHAKE256_RATE)];
 800304a:	466b      	mov	r3, sp
 800304c:	fb07 3106 	mla	r1, r7, r6, r3
 8003050:	4620      	mov	r0, r4
 8003052:	4642      	mov	r2, r8
        for (l = 0; l < (MASKING_ORDER + 1); l++)
 8003054:	3601      	adds	r6, #1
                out_masked[i + (l * tmp_outlen)] = t_masked[i + (l * SHAKE256_RATE)];
 8003056:	f7fd f8b7 	bl	80001c8 <memcpy>
        for (l = 0; l < (MASKING_ORDER + 1); l++)
 800305a:	2e03      	cmp	r6, #3
 800305c:	442c      	add	r4, r5
 800305e:	d1f4      	bne.n	800304a <shake256_masked+0x40>
        }
    }
}
 8003060:	f50d 7d7c 	add.w	sp, sp, #1008	; 0x3f0
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003068 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8003068:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 800306a:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 800306c:	2000      	movs	r0, #0
	while (len--) {
 800306e:	428b      	cmp	r3, r1
 8003070:	d100      	bne.n	8003074 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8003072:	4770      	bx	lr
		crc ^= *buf++;
 8003074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003078:	4050      	eors	r0, r2
 800307a:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800307c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003080:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8003084:	bf18      	it	ne
 8003086:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 800308a:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800308c:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 800308e:	d1f5      	bne.n	800307c <ss_crc+0x14>
 8003090:	e7ed      	b.n	800306e <ss_crc+0x6>

08003092 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8003092:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8003094:	2200      	movs	r2, #0
 8003096:	4604      	mov	r4, r0
	uint8_t i = 1;
 8003098:	2301      	movs	r3, #1
	for (; i < len; i++) {
 800309a:	428b      	cmp	r3, r1
 800309c:	d301      	bcc.n	80030a2 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 800309e:	2000      	movs	r0, #0
 80030a0:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80030a2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80030a6:	b915      	cbnz	r5, 80030ae <stuff_data+0x1c>
			buf[last] = i - last;
 80030a8:	1a9d      	subs	r5, r3, r2
 80030aa:	5485      	strb	r5, [r0, r2]
 80030ac:	461a      	mov	r2, r3
	for (; i < len; i++) {
 80030ae:	3301      	adds	r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e7f2      	b.n	800309a <stuff_data+0x8>

080030b4 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80030b4:	b510      	push	{r4, lr}
	uint8_t next = buf[0]; // 取距离
 80030b6:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00; // 恢复
 80030b8:	2400      	movs	r4, #0
{
 80030ba:	4603      	mov	r3, r0
	buf[0] = 0x00; // 恢复
 80030bc:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0]; // 取距离
 80030be:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 80030c0:	4288      	cmp	r0, r1
 80030c2:	d200      	bcs.n	80030c6 <unstuff_data+0x12>
 80030c4:	b902      	cbnz	r2, 80030c8 <unstuff_data+0x14>
		tmp = buf[next]; // 取距离
		buf[next] = FRAME_BYTE; // 恢复
		next += tmp; // 记录当前位置
	}
	return next;
}
 80030c6:	bd10      	pop	{r4, pc}
		tmp = buf[next]; // 取距离
 80030c8:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE; // 恢复
 80030ca:	541c      	strb	r4, [r3, r0]
		next += tmp; // 记录当前位置
 80030cc:	4410      	add	r0, r2
 80030ce:	b2c0      	uxtb	r0, r0
 80030d0:	e7f6      	b.n	80030c0 <unstuff_data+0xc>

080030d2 <simpleserial_init>:
// This just adds the "v" command for now...
void simpleserial_init()
{
	// simpleserial_addcmd('v', 0, check_version);
 //    simpleserial_addcmd('w', 0, ss_get_commands);
}
 80030d2:	4770      	bx	lr

080030d4 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80030d4:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80030d6:	4d0c      	ldr	r5, [pc, #48]	; (8003108 <simpleserial_addcmd+0x34>)
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	2b7f      	cmp	r3, #127	; 0x7f
 80030dc:	dd04      	ble.n	80030e8 <simpleserial_addcmd+0x14>
		putch('a');
 80030de:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 80030e0:	f000 f97c 	bl	80033dc <putch>
		return 1;
 80030e4:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 80030e8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80030ec:	d301      	bcc.n	80030f2 <simpleserial_addcmd+0x1e>
		putch('b');
 80030ee:	2062      	movs	r0, #98	; 0x62
 80030f0:	e7f6      	b.n	80030e0 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 80030f2:	240c      	movs	r4, #12
 80030f4:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 80030f8:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80030fa:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 80030fc:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8003100:	602b      	str	r3, [r5, #0]
	return 0;
 8003102:	2000      	movs	r0, #0
 8003104:	e7ef      	b.n	80030e6 <simpleserial_addcmd+0x12>
 8003106:	bf00      	nop
 8003108:	10000450 	.word	0x10000450

0800310c <simpleserial_put>:
	simpleserial_put('e', 0x05, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003112:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8003114:	2500      	movs	r5, #0
{
 8003116:	4611      	mov	r1, r2
	data_buf[1] = c;
 8003118:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 800311c:	4622      	mov	r2, r4
 800311e:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8003122:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8003126:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 800312a:	f7fd f84d 	bl	80001c8 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 800312e:	1ca1      	adds	r1, r4, #2
 8003130:	b2c9      	uxtb	r1, r1
 8003132:	f10d 0001 	add.w	r0, sp, #1
 8003136:	f7ff ff97 	bl	8003068 <ss_crc>
 800313a:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 800313e:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8003140:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003142:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8003144:	b2c9      	uxtb	r1, r1
 8003146:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8003148:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 800314c:	f7ff ffa1 	bl	8003092 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8003150:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8003152:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8003156:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8003158:	f000 f940 	bl	80033dc <putch>
	for (int i = 0; i < size + 5; i++) {
 800315c:	42ae      	cmp	r6, r5
 800315e:	daf8      	bge.n	8003152 <simpleserial_put+0x46>
	}
}
 8003160:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	0000      	movs	r0, r0

08003168 <simpleserial_get>:
{
 8003168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	uint8_t err = 0;
 8003170:	2500      	movs	r5, #0
 8003172:	ae02      	add	r6, sp, #8
 8003174:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8003178:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 800317a:	f000 f91d 	bl	80033b8 <getch>
 800317e:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {  //如果data_buf[i] == 0x00
 8003182:	b960      	cbnz	r0, 800319e <simpleserial_get+0x36>
			err = SS_ERR_FRAME_BYTE;
 8003184:	2305      	movs	r3, #5
        err = 7;
 8003186:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x05, &err);
 800318a:	f10d 0207 	add.w	r2, sp, #7
 800318e:	2105      	movs	r1, #5
 8003190:	2065      	movs	r0, #101	; 0x65
 8003192:	f7ff ffbb 	bl	800310c <simpleserial_put>
}
 8003196:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 800319a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 800319e:	3501      	adds	r5, #1
 80031a0:	2d04      	cmp	r5, #4
 80031a2:	d1ea      	bne.n	800317a <simpleserial_get+0x12>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80031a4:	4629      	mov	r1, r5
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7ff ff84 	bl	80030b4 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 80031ac:	4f26      	ldr	r7, [pc, #152]	; (8003248 <simpleserial_get+0xe0>)
		if(commands[c].c == data_buf[1])
 80031ae:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 80031b0:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80031b2:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 80031b4:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 80031b6:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 80031b8:	fa5f f983 	uxtb.w	r9, r3
 80031bc:	4591      	cmp	r9, r2
 80031be:	db02      	blt.n	80031c6 <simpleserial_get+0x5e>
	if (c == num_commands) {
 80031c0:	d107      	bne.n	80031d2 <simpleserial_get+0x6a>
        err = 7;
 80031c2:	2307      	movs	r3, #7
 80031c4:	e7df      	b.n	8003186 <simpleserial_get+0x1e>
		if(commands[c].c == data_buf[1])
 80031c6:	fb00 7609 	mla	r6, r0, r9, r7
 80031ca:	3301      	adds	r3, #1
 80031cc:	7936      	ldrb	r6, [r6, #4]
 80031ce:	428e      	cmp	r6, r1
 80031d0:	d1f2      	bne.n	80031b8 <simpleserial_get+0x50>
	if ((data_buf[3] + 5) < next_frame) {
 80031d2:	78e3      	ldrb	r3, [r4, #3]
 80031d4:	3305      	adds	r3, #5
 80031d6:	4543      	cmp	r3, r8
 80031d8:	da02      	bge.n	80031e0 <simpleserial_get+0x78>
        err = 11;
 80031da:	230b      	movs	r3, #11
 80031dc:	e7d3      	b.n	8003186 <simpleserial_get+0x1e>
 80031de:	4635      	mov	r5, r6
		data_buf[i] = getch();
 80031e0:	f000 f8ea 	bl	80033b8 <getch>
 80031e4:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 80031e6:	b908      	cbnz	r0, 80031ec <simpleserial_get+0x84>
            err = 12;
 80031e8:	230c      	movs	r3, #12
 80031ea:	e7cc      	b.n	8003186 <simpleserial_get+0x1e>
	for (; i < data_buf[3] + 5; i++) {
 80031ec:	78e3      	ldrb	r3, [r4, #3]
 80031ee:	1c6e      	adds	r6, r5, #1
 80031f0:	3304      	adds	r3, #4
 80031f2:	42b3      	cmp	r3, r6
 80031f4:	daf3      	bge.n	80031de <simpleserial_get+0x76>
	data_buf[i] = getch();
 80031f6:	f000 f8df 	bl	80033b8 <getch>
 80031fa:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 80031fc:	b108      	cbz	r0, 8003202 <simpleserial_get+0x9a>
        err = 13;
 80031fe:	230d      	movs	r3, #13
 8003200:	e7c1      	b.n	8003186 <simpleserial_get+0x1e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8003202:	f1c8 0101 	rsb	r1, r8, #1
 8003206:	fa51 f186 	uxtab	r1, r1, r6
 800320a:	b2c9      	uxtb	r1, r1
 800320c:	fa5f fa86 	uxtb.w	sl, r6
 8003210:	eb04 0008 	add.w	r0, r4, r8
 8003214:	f7ff ff4e 	bl	80030b4 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8003218:	f1aa 0102 	sub.w	r1, sl, #2
 800321c:	b2c9      	uxtb	r1, r1
 800321e:	f10d 0009 	add.w	r0, sp, #9
 8003222:	f7ff ff21 	bl	8003068 <ss_crc>
	if (crc != data_buf[i-1]) {
 8003226:	5d63      	ldrb	r3, [r4, r5]
 8003228:	4283      	cmp	r3, r0
 800322a:	d001      	beq.n	8003230 <simpleserial_get+0xc8>
        err = 14;
 800322c:	230e      	movs	r3, #14
 800322e:	e7aa      	b.n	8003186 <simpleserial_get+0x1e>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8003230:	230c      	movs	r3, #12
 8003232:	fb03 7709 	mla	r7, r3, r9, r7
 8003236:	78e2      	ldrb	r2, [r4, #3]
 8003238:	68fd      	ldr	r5, [r7, #12]
 800323a:	78a1      	ldrb	r1, [r4, #2]
 800323c:	7860      	ldrb	r0, [r4, #1]
 800323e:	446b      	add	r3, sp
 8003240:	47a8      	blx	r5
 8003242:	f88d 0007 	strb.w	r0, [sp, #7]
 8003246:	e7a0      	b.n	800318a <simpleserial_get+0x22>
 8003248:	10000450 	.word	0x10000450

0800324c <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 800324c:	b530      	push	{r4, r5, lr}
	//HAL_Init();

#ifdef STM32F4FPU
     /* set CP10 and CP11 Full Access */
     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); // SCB->CPACR |= 0x00f00000;
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <platform_init+0x80>)
 8003250:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
{
 800325c:	b093      	sub	sp, #76	; 0x4c
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800325e:	2203      	movs	r2, #3
 8003260:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003264:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8003268:	2102      	movs	r1, #2
 800326a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800326e:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 8003272:	200c      	movs	r0, #12
 8003274:	23c4      	movs	r3, #196	; 0xc4
 8003276:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 800327a:	2404      	movs	r4, #4
 800327c:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 800327e:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003280:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8003282:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8003286:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003288:	f000 f8c0 	bl	800340c <HAL_RCC_OscConfig>
 800328c:	4604      	mov	r4, r0
 800328e:	b100      	cbz	r0, 8003292 <platform_init+0x46>
        for(;;);
 8003290:	e7fe      	b.n	8003290 <platform_init+0x44>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8003292:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003294:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003298:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800329a:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 800329c:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800329e:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80032a2:	f000 fa53 	bl	800374c <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <platform_init+0x84>)
 80032a8:	9400      	str	r4, [sp, #0]
 80032aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 80032ac:	4809      	ldr	r0, [pc, #36]	; (80032d4 <platform_init+0x88>)
	__HAL_RCC_RNG_CLK_ENABLE();
 80032ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b2:	635a      	str	r2, [r3, #52]	; 0x34
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <platform_init+0x8c>)
 80032c0:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 80032c2:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 80032c4:	f000 fcc6 	bl	8003c54 <HAL_RNG_Init>

}
 80032c8:	b013      	add	sp, #76	; 0x4c
 80032ca:	bd30      	pop	{r4, r5, pc}
 80032cc:	e000ed00 	.word	0xe000ed00
 80032d0:	40023800 	.word	0x40023800
 80032d4:	10000a54 	.word	0x10000a54
 80032d8:	50060800 	.word	0x50060800

080032dc <init_uart>:

void init_uart(void)
{
 80032dc:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
{
 80032e0:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 80032e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80032e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 80032ea:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80032ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 80032f0:	4c15      	ldr	r4, [pc, #84]	; (8003348 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80032f2:	4816      	ldr	r0, [pc, #88]	; (800334c <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 80032f4:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 80032f6:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 80032f8:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 80032fa:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 80032fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032fe:	4313      	orrs	r3, r2
 8003300:	6323      	str	r3, [r4, #48]	; 0x30
 8003302:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003304:	4013      	ands	r3, r2
 8003306:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003308:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 800330a:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800330c:	f000 fab6 	bl	800387c <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8003310:	480f      	ldr	r0, [pc, #60]	; (8003350 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8003312:	4910      	ldr	r1, [pc, #64]	; (8003354 <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 8003314:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 230400;
 8003316:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 800331a:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800331e:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003322:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003324:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003326:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003328:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 800332a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800332c:	f043 0310 	orr.w	r3, r3, #16
 8003330:	6463      	str	r3, [r4, #68]	; 0x44
 8003332:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 800333a:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 800333c:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 800333e:	f000 fb89 	bl	8003a54 <HAL_UART_Init>
}
 8003342:	b009      	add	sp, #36	; 0x24
 8003344:	bd30      	pop	{r4, r5, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000
 8003350:	10000a54 	.word	0x10000a54
 8003354:	40011000 	.word	0x40011000

08003358 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 8003358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800335c:	480d      	ldr	r0, [pc, #52]	; (8003394 <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 800335e:	2100      	movs	r1, #0
 8003360:	9100      	str	r1, [sp, #0]
 8003362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003364:	f042 0201 	orr.w	r2, r2, #1
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 800336c:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800337a:	2301      	movs	r3, #1
 800337c:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003380:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003382:	2302      	movs	r3, #2
 8003384:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003386:	f000 fa79 	bl	800387c <HAL_GPIO_Init>
#endif
}
 800338a:	b007      	add	sp, #28
 800338c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003390:	40023800 	.word	0x40023800
 8003394:	40020000 	.word	0x40020000

08003398 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <trigger_high+0xc>)
 800339a:	2201      	movs	r2, #1
 800339c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a0:	f000 bb52 	b.w	8003a48 <HAL_GPIO_WritePin>
 80033a4:	40020000 	.word	0x40020000

080033a8 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <trigger_low+0xc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033b0:	f000 bb4a 	b.w	8003a48 <HAL_GPIO_WritePin>
 80033b4:	40020000 	.word	0x40020000

080033b8 <getch>:
#endif
}
char getch(void)
{
 80033b8:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 80033ba:	4c07      	ldr	r4, [pc, #28]	; (80033d8 <getch+0x20>)
 80033bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80033c0:	2201      	movs	r2, #1
 80033c2:	f10d 0107 	add.w	r1, sp, #7
 80033c6:	4620      	mov	r0, r4
 80033c8:	f000 fbf7 	bl	8003bba <HAL_UART_Receive>
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d1f5      	bne.n	80033bc <getch+0x4>
	return d;
}
 80033d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80033d4:	b002      	add	sp, #8
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	10000a60 	.word	0x10000a60

080033dc <putch>:

void putch(char c)
{
 80033dc:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80033de:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 80033e2:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80033e6:	2201      	movs	r2, #1
 80033e8:	f10d 0107 	add.w	r1, sp, #7
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <putch+0x1c>)
 80033ee:	f000 fb9f 	bl	8003b30 <HAL_UART_Transmit>
}
 80033f2:	b003      	add	sp, #12
 80033f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80033f8:	10000a60 	.word	0x10000a60

080033fc <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_GetTick+0xc>)
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	1c42      	adds	r2, r0, #1
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	10000af0 	.word	0x10000af0

0800340c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340c:	6803      	ldr	r3, [r0, #0]
{
 800340e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003410:	07de      	lsls	r6, r3, #31
{
 8003412:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003414:	d43b      	bmi.n	800348e <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	680b      	ldr	r3, [r1, #0]
 8003418:	079d      	lsls	r5, r3, #30
 800341a:	f100 808b 	bmi.w	8003534 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341e:	680b      	ldr	r3, [r1, #0]
 8003420:	0718      	lsls	r0, r3, #28
 8003422:	f100 80d6 	bmi.w	80035d2 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003426:	680b      	ldr	r3, [r1, #0]
 8003428:	075a      	lsls	r2, r3, #29
 800342a:	d52a      	bpl.n	8003482 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	2300      	movs	r3, #0
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	4b91      	ldr	r3, [pc, #580]	; (8003678 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003432:	4c92      	ldr	r4, [pc, #584]	; (800367c <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003436:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800344e:	f7ff ffd5 	bl	80033fc <HAL_GetTick>
 8003452:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	05d8      	lsls	r0, r3, #23
 8003458:	f140 80df 	bpl.w	800361a <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	688b      	ldr	r3, [r1, #8]
 800345e:	4c86      	ldr	r4, [pc, #536]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003460:	2b01      	cmp	r3, #1
 8003462:	f040 80e1 	bne.w	8003628 <HAL_RCC_OscConfig+0x21c>
 8003466:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346e:	f7ff ffc5 	bl	80033fc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	4d81      	ldr	r5, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8003474:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800347c:	079a      	lsls	r2, r3, #30
 800347e:	f140 80f4 	bpl.w	800366a <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003482:	698a      	ldr	r2, [r1, #24]
 8003484:	2a00      	cmp	r2, #0
 8003486:	f040 80ff 	bne.w	8003688 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800348a:	2000      	movs	r0, #0
 800348c:	e015      	b.n	80034ba <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	f002 020c 	and.w	r2, r2, #12
 8003496:	2a04      	cmp	r2, #4
 8003498:	d007      	beq.n	80034aa <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a0:	2a08      	cmp	r2, #8
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	0254      	lsls	r4, r2, #9
 80034a8:	d509      	bpl.n	80034be <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034aa:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0398      	lsls	r0, r3, #14
 80034b0:	d5b1      	bpl.n	8003416 <HAL_RCC_OscConfig+0xa>
 80034b2:	684b      	ldr	r3, [r1, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ae      	bne.n	8003416 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
}
 80034ba:	b002      	add	sp, #8
 80034bc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034be:	684a      	ldr	r2, [r1, #4]
 80034c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80034c4:	d112      	bne.n	80034ec <HAL_RCC_OscConfig+0xe0>
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80034ce:	f7ff ff95 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4d69      	ldr	r5, [pc, #420]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d4:	4e6a      	ldr	r6, [pc, #424]	; (8003680 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80034d6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	039a      	lsls	r2, r3, #14
 80034dc:	d49b      	bmi.n	8003416 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034de:	f7ff ff8d 	bl	80033fc <HAL_GetTick>
 80034e2:	1b00      	subs	r0, r0, r4
 80034e4:	42b0      	cmp	r0, r6
 80034e6:	d9f7      	bls.n	80034d8 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80034e8:	2003      	movs	r0, #3
 80034ea:	e7e6      	b.n	80034ba <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	4c62      	ldr	r4, [pc, #392]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_OscConfig+0xfa>
 80034f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003504:	e7e3      	b.n	80034ce <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003512:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003514:	2a00      	cmp	r2, #0
 8003516:	d1da      	bne.n	80034ce <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003518:	f7ff ff70 	bl	80033fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351c:	4e58      	ldr	r6, [pc, #352]	; (8003680 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800351e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	039b      	lsls	r3, r3, #14
 8003524:	f57f af77 	bpl.w	8003416 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7ff ff68 	bl	80033fc <HAL_GetTick>
 800352c:	1b40      	subs	r0, r0, r5
 800352e:	42b0      	cmp	r0, r6
 8003530:	d9f6      	bls.n	8003520 <HAL_RCC_OscConfig+0x114>
 8003532:	e7d9      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	f012 0f0c 	tst.w	r2, #12
 800353c:	d007      	beq.n	800354e <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003544:	2a08      	cmp	r2, #8
 8003546:	d116      	bne.n	8003576 <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	0258      	lsls	r0, r3, #9
 800354c:	d413      	bmi.n	8003576 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	484a      	ldr	r0, [pc, #296]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
 8003550:	6803      	ldr	r3, [r0, #0]
 8003552:	079a      	lsls	r2, r3, #30
 8003554:	d502      	bpl.n	800355c <HAL_RCC_OscConfig+0x150>
 8003556:	68cb      	ldr	r3, [r1, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d1ad      	bne.n	80034b8 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355c:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	23f8      	movs	r3, #248	; 0xf8
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	fab3 f283 	clz	r2, r3
 8003568:	690b      	ldr	r3, [r1, #16]
 800356a:	4093      	lsls	r3, r2
 800356c:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 8003570:	4313      	orrs	r3, r2
 8003572:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003574:	e753      	b.n	800341e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003576:	68ca      	ldr	r2, [r1, #12]
 8003578:	4b42      	ldr	r3, [pc, #264]	; (8003684 <HAL_RCC_OscConfig+0x278>)
 800357a:	b1da      	cbz	r2, 80035b4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003580:	f7ff ff3c 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4c3c      	ldr	r4, [pc, #240]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8003586:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	079b      	lsls	r3, r3, #30
 800358c:	d50c      	bpl.n	80035a8 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	23f8      	movs	r3, #248	; 0xf8
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	fab3 f283 	clz	r2, r3
 800359a:	690b      	ldr	r3, [r1, #16]
 800359c:	4093      	lsls	r3, r2
 800359e:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80035a2:	4313      	orrs	r3, r2
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	e73a      	b.n	800341e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a8:	f7ff ff28 	bl	80033fc <HAL_GetTick>
 80035ac:	1b40      	subs	r0, r0, r5
 80035ae:	2802      	cmp	r0, #2
 80035b0:	d9ea      	bls.n	8003588 <HAL_RCC_OscConfig+0x17c>
 80035b2:	e799      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80035b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80035b6:	f7ff ff21 	bl	80033fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4d2f      	ldr	r5, [pc, #188]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80035bc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	682b      	ldr	r3, [r5, #0]
 80035c0:	079e      	lsls	r6, r3, #30
 80035c2:	f57f af2c 	bpl.w	800341e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff ff19 	bl	80033fc <HAL_GetTick>
 80035ca:	1b00      	subs	r0, r0, r4
 80035cc:	2802      	cmp	r0, #2
 80035ce:	d9f6      	bls.n	80035be <HAL_RCC_OscConfig+0x1b2>
 80035d0:	e78a      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d2:	694a      	ldr	r2, [r1, #20]
 80035d4:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <HAL_RCC_OscConfig+0x278>)
 80035d6:	b182      	cbz	r2, 80035fa <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 80035d8:	2201      	movs	r2, #1
 80035da:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80035de:	f7ff ff0d 	bl	80033fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4d25      	ldr	r5, [pc, #148]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80035e4:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80035e8:	079b      	lsls	r3, r3, #30
 80035ea:	f53f af1c 	bmi.w	8003426 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ee:	f7ff ff05 	bl	80033fc <HAL_GetTick>
 80035f2:	1b00      	subs	r0, r0, r4
 80035f4:	2802      	cmp	r0, #2
 80035f6:	d9f6      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1da>
 80035f8:	e776      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80035fa:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80035fe:	f7ff fefd 	bl	80033fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003602:	4d1d      	ldr	r5, [pc, #116]	; (8003678 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8003604:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003606:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003608:	079e      	lsls	r6, r3, #30
 800360a:	f57f af0c 	bpl.w	8003426 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360e:	f7ff fef5 	bl	80033fc <HAL_GetTick>
 8003612:	1b00      	subs	r0, r0, r4
 8003614:	2802      	cmp	r0, #2
 8003616:	d9f6      	bls.n	8003606 <HAL_RCC_OscConfig+0x1fa>
 8003618:	e766      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7ff feef 	bl	80033fc <HAL_GetTick>
 800361e:	1b40      	subs	r0, r0, r5
 8003620:	2802      	cmp	r0, #2
 8003622:	f67f af17 	bls.w	8003454 <HAL_RCC_OscConfig+0x48>
 8003626:	e75f      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003628:	2b05      	cmp	r3, #5
 800362a:	d104      	bne.n	8003636 <HAL_RCC_OscConfig+0x22a>
 800362c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	6723      	str	r3, [r4, #112]	; 0x70
 8003634:	e717      	b.n	8003466 <HAL_RCC_OscConfig+0x5a>
 8003636:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	6722      	str	r2, [r4, #112]	; 0x70
 800363e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003640:	f022 0204 	bic.w	r2, r2, #4
 8003644:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f af11 	bne.w	800346e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800364c:	f7ff fed6 	bl	80033fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003654:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003656:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003658:	079b      	lsls	r3, r3, #30
 800365a:	f57f af12 	bpl.w	8003482 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365e:	f7ff fecd 	bl	80033fc <HAL_GetTick>
 8003662:	1b40      	subs	r0, r0, r5
 8003664:	42b0      	cmp	r0, r6
 8003666:	d9f6      	bls.n	8003656 <HAL_RCC_OscConfig+0x24a>
 8003668:	e73e      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7ff fec7 	bl	80033fc <HAL_GetTick>
 800366e:	1b00      	subs	r0, r0, r4
 8003670:	42b0      	cmp	r0, r6
 8003672:	f67f af02 	bls.w	800347a <HAL_RCC_OscConfig+0x6e>
 8003676:	e737      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
 8003678:	40023800 	.word	0x40023800
 800367c:	40007000 	.word	0x40007000
 8003680:	05f5e100 	.word	0x05f5e100
 8003684:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003688:	4c2d      	ldr	r4, [pc, #180]	; (8003740 <HAL_RCC_OscConfig+0x334>)
 800368a:	68a3      	ldr	r3, [r4, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	f43f af11 	beq.w	80034b8 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_OscConfig+0x338>)
 8003698:	2a02      	cmp	r2, #2
 800369a:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800369e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	d140      	bne.n	8003724 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 80036a2:	f7ff feab 	bl	80033fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	4e28      	ldr	r6, [pc, #160]	; (8003748 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 80036a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	0198      	lsls	r0, r3, #6
 80036ae:	d433      	bmi.n	8003718 <HAL_RCC_OscConfig+0x30c>
 80036b0:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80036b4:	fa96 f6a6 	rbit	r6, r6
 80036b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036bc:	fab6 f686 	clz	r6, r6
 80036c0:	fa92 f2a2 	rbit	r2, r2
 80036c4:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 80036c8:	fab2 f582 	clz	r5, r2
 80036cc:	fa90 f0a0 	rbit	r0, r0
 80036d0:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80036d8:	40b2      	lsls	r2, r6
 80036da:	4313      	orrs	r3, r2
 80036dc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80036de:	0852      	lsrs	r2, r2, #1
 80036e0:	3a01      	subs	r2, #1
 80036e2:	40aa      	lsls	r2, r5
 80036e4:	4313      	orrs	r3, r2
 80036e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	4d17      	ldr	r5, [pc, #92]	; (8003748 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ea:	fab0 f080 	clz	r0, r0
 80036ee:	fa02 f000 	lsl.w	r0, r2, r0
 80036f2:	4303      	orrs	r3, r0
 80036f4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f8:	4c11      	ldr	r4, [pc, #68]	; (8003740 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 80036fa:	2201      	movs	r2, #1
 80036fc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80036fe:	f7ff fe7d 	bl	80033fc <HAL_GetTick>
 8003702:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	019a      	lsls	r2, r3, #6
 8003708:	f53f aebf 	bmi.w	800348a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370c:	f7ff fe76 	bl	80033fc <HAL_GetTick>
 8003710:	1a40      	subs	r0, r0, r1
 8003712:	42a8      	cmp	r0, r5
 8003714:	d9f6      	bls.n	8003704 <HAL_RCC_OscConfig+0x2f8>
 8003716:	e6e7      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003718:	f7ff fe70 	bl	80033fc <HAL_GetTick>
 800371c:	1b40      	subs	r0, r0, r5
 800371e:	42b0      	cmp	r0, r6
 8003720:	d9c3      	bls.n	80036aa <HAL_RCC_OscConfig+0x29e>
 8003722:	e6e1      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8003724:	f7ff fe6a 	bl	80033fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003728:	4d07      	ldr	r5, [pc, #28]	; (8003748 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 800372a:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	019b      	lsls	r3, r3, #6
 8003730:	f57f aeab 	bpl.w	800348a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7ff fe62 	bl	80033fc <HAL_GetTick>
 8003738:	1a40      	subs	r0, r0, r1
 800373a:	42a8      	cmp	r0, r5
 800373c:	d9f6      	bls.n	800372c <HAL_RCC_OscConfig+0x320>
 800373e:	e6d3      	b.n	80034e8 <HAL_RCC_OscConfig+0xdc>
 8003740:	40023800 	.word	0x40023800
 8003744:	42470000 	.word	0x42470000
 8003748:	001e8480 	.word	0x001e8480

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCC_ClockConfig+0x128>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	f002 020f 	and.w	r2, r2, #15
 8003756:	428a      	cmp	r2, r1
{
 8003758:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800375a:	d31a      	bcc.n	8003792 <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	0790      	lsls	r0, r2, #30
 8003760:	d420      	bmi.n	80037a4 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	07d2      	lsls	r2, r2, #31
 8003764:	d426      	bmi.n	80037b4 <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003766:	4b43      	ldr	r3, [pc, #268]	; (8003874 <HAL_RCC_ClockConfig+0x128>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	f002 020f 	and.w	r2, r2, #15
 800376e:	428a      	cmp	r2, r1
 8003770:	d870      	bhi.n	8003854 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	0743      	lsls	r3, r0, #29
 8003776:	d475      	bmi.n	8003864 <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003778:	f010 0008 	ands.w	r0, r0, #8
 800377c:	d011      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4a3e      	ldr	r2, [pc, #248]	; (8003878 <HAL_RCC_ClockConfig+0x12c>)
 8003780:	6921      	ldr	r1, [r4, #16]
 8003782:	6893      	ldr	r3, [r2, #8]
 8003784:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003788:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800378c:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 800378e:	2000      	movs	r0, #0
 8003790:	e007      	b.n	80037a2 <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	b2ca      	uxtb	r2, r1
 8003794:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	428b      	cmp	r3, r1
 800379e:	d0dd      	beq.n	800375c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
}
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4834      	ldr	r0, [pc, #208]	; (8003878 <HAL_RCC_ClockConfig+0x12c>)
 80037a6:	68a5      	ldr	r5, [r4, #8]
 80037a8:	6883      	ldr	r3, [r0, #8]
 80037aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ae:	432b      	orrs	r3, r5
 80037b0:	6083      	str	r3, [r0, #8]
 80037b2:	e7d6      	b.n	8003762 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b4:	6862      	ldr	r2, [r4, #4]
 80037b6:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_RCC_ClockConfig+0x12c>)
 80037b8:	2a01      	cmp	r2, #1
 80037ba:	d11d      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c2:	d0ed      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c4:	4d2c      	ldr	r5, [pc, #176]	; (8003878 <HAL_RCC_ClockConfig+0x12c>)
 80037c6:	68ab      	ldr	r3, [r5, #8]
 80037c8:	f023 0303 	bic.w	r3, r3, #3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80037d0:	f7ff fe14 	bl	80033fc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d4:	6863      	ldr	r3, [r4, #4]
 80037d6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80037d8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037da:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	d115      	bne.n	800380c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e0:	68ab      	ldr	r3, [r5, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d0bd      	beq.n	8003766 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ea:	f7ff fe07 	bl	80033fc <HAL_GetTick>
 80037ee:	1b80      	subs	r0, r0, r6
 80037f0:	42b8      	cmp	r0, r7
 80037f2:	d9f5      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80037f4:	2003      	movs	r0, #3
 80037f6:	e7d4      	b.n	80037a2 <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f8:	1e90      	subs	r0, r2, #2
 80037fa:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fe:	d802      	bhi.n	8003806 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003800:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003804:	e7dd      	b.n	80037c2 <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	f013 0f02 	tst.w	r3, #2
 800380a:	e7da      	b.n	80037c2 <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380c:	2b02      	cmp	r3, #2
 800380e:	d10a      	bne.n	8003826 <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003810:	68ab      	ldr	r3, [r5, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b08      	cmp	r3, #8
 8003818:	d0a5      	beq.n	8003766 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381a:	f7ff fdef 	bl	80033fc <HAL_GetTick>
 800381e:	1b80      	subs	r0, r0, r6
 8003820:	42b8      	cmp	r0, r7
 8003822:	d9f5      	bls.n	8003810 <HAL_RCC_ClockConfig+0xc4>
 8003824:	e7e6      	b.n	80037f4 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003826:	2b03      	cmp	r3, #3
 8003828:	d10f      	bne.n	800384a <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800382a:	68ab      	ldr	r3, [r5, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d098      	beq.n	8003766 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7ff fde2 	bl	80033fc <HAL_GetTick>
 8003838:	1b80      	subs	r0, r0, r6
 800383a:	42b8      	cmp	r0, r7
 800383c:	d9f5      	bls.n	800382a <HAL_RCC_ClockConfig+0xde>
 800383e:	e7d9      	b.n	80037f4 <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7ff fddc 	bl	80033fc <HAL_GetTick>
 8003844:	1b80      	subs	r0, r0, r6
 8003846:	42b8      	cmp	r0, r7
 8003848:	d8d4      	bhi.n	80037f4 <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800384a:	68ab      	ldr	r3, [r5, #8]
 800384c:	f013 0f0c 	tst.w	r3, #12
 8003850:	d1f6      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf4>
 8003852:	e788      	b.n	8003766 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003854:	b2ca      	uxtb	r2, r1
 8003856:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	428b      	cmp	r3, r1
 8003860:	d19e      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x54>
 8003862:	e786      	b.n	8003772 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003864:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCC_ClockConfig+0x12c>)
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	688a      	ldr	r2, [r1, #8]
 800386a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800386e:	431a      	orrs	r2, r3
 8003870:	608a      	str	r2, [r1, #8]
 8003872:	e781      	b.n	8003778 <HAL_RCC_ClockConfig+0x2c>
 8003874:	40023c00 	.word	0x40023c00
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8003a38 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003884:	4a6d      	ldr	r2, [pc, #436]	; (8003a3c <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003886:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003a40 <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800388a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388c:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 800388e:	2701      	movs	r7, #1
 8003890:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003892:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8003896:	ea37 0404 	bics.w	r4, r7, r4
 800389a:	f040 80b9 	bne.w	8003a10 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800389e:	684c      	ldr	r4, [r1, #4]
 80038a0:	f024 0a10 	bic.w	sl, r4, #16
 80038a4:	f1ba 0f02 	cmp.w	sl, #2
 80038a8:	d116      	bne.n	80038d8 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80038aa:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80038ae:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038b2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80038b6:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80038be:	f04f 0c0f 	mov.w	ip, #15
 80038c2:	fa0c fc0b 	lsl.w	ip, ip, fp
 80038c6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038ca:	690e      	ldr	r6, [r1, #16]
 80038cc:	fa06 f60b 	lsl.w	r6, r6, fp
 80038d0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80038d4:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 80038d8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038dc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80038e0:	f04f 0c03 	mov.w	ip, #3
 80038e4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80038e8:	ea2b 0b0c 	bic.w	fp, fp, ip
 80038ec:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f0:	f004 0c03 	and.w	ip, r4, #3
 80038f4:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038f8:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038fc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003900:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8003904:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003908:	d816      	bhi.n	8003938 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 800390a:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003912:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003916:	fa0a fa0e 	lsl.w	sl, sl, lr
 800391a:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 800391e:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8003922:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003926:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800392a:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 800392e:	fa0c fc03 	lsl.w	ip, ip, r3
 8003932:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8003936:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003938:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800393a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800393c:	688e      	ldr	r6, [r1, #8]
 800393e:	fa06 f60e 	lsl.w	r6, r6, lr
 8003942:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8003944:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003946:	00e6      	lsls	r6, r4, #3
 8003948:	d562      	bpl.n	8003a10 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2600      	movs	r6, #0
 800394c:	9601      	str	r6, [sp, #4]
 800394e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8003952:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003956:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800395a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800395e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8003962:	9701      	str	r7, [sp, #4]
 8003964:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	f023 0703 	bic.w	r7, r3, #3
 800396a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800396e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003972:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003976:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800397a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800397e:	f04f 0c0f 	mov.w	ip, #15
 8003982:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003986:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003a44 <HAL_GPIO_Init+0x1c8>
 800398e:	4550      	cmp	r0, sl
 8003990:	d01d      	beq.n	80039ce <HAL_GPIO_Init+0x152>
 8003992:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003996:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 800399a:	42b0      	cmp	r0, r6
 800399c:	d03f      	beq.n	8003a1e <HAL_GPIO_Init+0x1a2>
 800399e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80039a2:	42b0      	cmp	r0, r6
 80039a4:	d03d      	beq.n	8003a22 <HAL_GPIO_Init+0x1a6>
 80039a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80039aa:	42b0      	cmp	r0, r6
 80039ac:	d03b      	beq.n	8003a26 <HAL_GPIO_Init+0x1aa>
 80039ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80039b2:	42b0      	cmp	r0, r6
 80039b4:	d039      	beq.n	8003a2a <HAL_GPIO_Init+0x1ae>
 80039b6:	4548      	cmp	r0, r9
 80039b8:	d039      	beq.n	8003a2e <HAL_GPIO_Init+0x1b2>
 80039ba:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80039be:	42b0      	cmp	r0, r6
 80039c0:	d037      	beq.n	8003a32 <HAL_GPIO_Init+0x1b6>
 80039c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80039c6:	42b0      	cmp	r0, r6
 80039c8:	bf0c      	ite	eq
 80039ca:	2607      	moveq	r6, #7
 80039cc:	2608      	movne	r6, #8
 80039ce:	fa06 f60e 	lsl.w	r6, r6, lr
 80039d2:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80039d8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80039da:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039dc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80039e0:	bf0c      	ite	eq
 80039e2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80039e4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80039e6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80039e8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ea:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80039ee:	bf0c      	ite	eq
 80039f0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80039f2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80039f4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039f6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80039fc:	bf0c      	ite	eq
 80039fe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003a00:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8003a02:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8003a04:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a06:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8003a08:	bf54      	ite	pl
 8003a0a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003a0c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8003a0e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a10:	3301      	adds	r3, #1
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	f47f af3a 	bne.w	800388c <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8003a18:	b003      	add	sp, #12
 8003a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a1e:	2601      	movs	r6, #1
 8003a20:	e7d5      	b.n	80039ce <HAL_GPIO_Init+0x152>
 8003a22:	2602      	movs	r6, #2
 8003a24:	e7d3      	b.n	80039ce <HAL_GPIO_Init+0x152>
 8003a26:	2603      	movs	r6, #3
 8003a28:	e7d1      	b.n	80039ce <HAL_GPIO_Init+0x152>
 8003a2a:	2604      	movs	r6, #4
 8003a2c:	e7cf      	b.n	80039ce <HAL_GPIO_Init+0x152>
 8003a2e:	2605      	movs	r6, #5
 8003a30:	e7cd      	b.n	80039ce <HAL_GPIO_Init+0x152>
 8003a32:	2606      	movs	r6, #6
 8003a34:	e7cb      	b.n	80039ce <HAL_GPIO_Init+0x152>
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40013c00 	.word	0x40013c00
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40020000 	.word	0x40020000

08003a48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a48:	b10a      	cbz	r2, 8003a4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4a:	6181      	str	r1, [r0, #24]
  }
}
 8003a4c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4e:	0409      	lsls	r1, r1, #16
 8003a50:	e7fb      	b.n	8003a4a <HAL_GPIO_WritePin+0x2>
 8003a52:	0000      	movs	r0, r0

08003a54 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d066      	beq.n	8003b28 <HAL_UART_Init+0xd4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8003a5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003a5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a62:	b90b      	cbnz	r3, 8003a68 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a68:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003a6a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6c:	6905      	ldr	r5, [r0, #16]
 8003a6e:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 8003a70:	2324      	movs	r3, #36	; 0x24
 8003a72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003a76:	68cb      	ldr	r3, [r1, #12]
 8003a78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a7c:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 8003a7e:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003a80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003a84:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003a86:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a88:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 8003a8a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a8c:	432b      	orrs	r3, r5
 8003a8e:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003a90:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a94:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003a96:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a9a:	4323      	orrs	r3, r4
 8003a9c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003a9e:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 8003aa0:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 8003aa2:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8003aa8:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aaa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003aae:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab0:	4a1e      	ldr	r2, [pc, #120]	; (8003b2c <HAL_UART_Init+0xd8>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003ab2:	6843      	ldr	r3, [r0, #4]
 8003ab4:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab8:	d128      	bne.n	8003b0c <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	fbb2 f6f5 	udiv	r6, r2, r5
 8003ac4:	fb05 2216 	mls	r2, r5, r6, r2
 8003ac8:	00d3      	lsls	r3, r2, #3
 8003aca:	3332      	adds	r3, #50	; 0x32
 8003acc:	fbb3 f3f5 	udiv	r3, r3, r5
 8003ad0:	f003 0207 	and.w	r2, r3, #7
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 8003ada:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ade:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ae0:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae2:	690b      	ldr	r3, [r1, #16]
 8003ae4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003ae8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	694b      	ldr	r3, [r1, #20]
 8003aec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003af0:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af2:	68cb      	ldr	r3, [r1, #12]
 8003af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003af8:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 8003afa:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003b00:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003b04:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8003b08:	4618      	mov	r0, r3
}
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b12:	fbb2 f6f5 	udiv	r6, r2, r5
 8003b16:	fb05 2316 	mls	r3, r5, r6, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003b22:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003b26:	e7db      	b.n	8003ae0 <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 8003b28:	2001      	movs	r0, #1
 8003b2a:	e7ee      	b.n	8003b0a <HAL_UART_Init+0xb6>
 8003b2c:	0afb6e90 	.word	0x0afb6e90

08003b30 <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003b30:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d13e      	bne.n	8003bb6 <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8003b38:	2900      	cmp	r1, #0
 8003b3a:	d03a      	beq.n	8003bb2 <HAL_UART_Transmit+0x82>
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d038      	beq.n	8003bb2 <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b40:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d036      	beq.n	8003bb6 <HAL_UART_Transmit+0x86>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b52:	2321      	movs	r3, #33	; 0x21
 8003b54:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003b58:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 8003b5a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b5c:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003b5e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8003b60:	b292      	uxth	r2, r2
 8003b62:	b952      	cbnz	r2, 8003b7a <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	0652      	lsls	r2, r2, #25
 8003b68:	d5fc      	bpl.n	8003b64 <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b70:	2300      	movs	r3, #0
 8003b72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8003b76:	4618      	mov	r0, r3
 8003b78:	4770      	bx	lr
      huart->TxXferCount--;
 8003b7a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b82:	6882      	ldr	r2, [r0, #8]
 8003b84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	0612      	lsls	r2, r2, #24
 8003b8e:	d5fc      	bpl.n	8003b8a <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b90:	880a      	ldrh	r2, [r1, #0]
 8003b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b96:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003b98:	6902      	ldr	r2, [r0, #16]
 8003b9a:	b90a      	cbnz	r2, 8003ba0 <HAL_UART_Transmit+0x70>
          pData +=2U;
 8003b9c:	3102      	adds	r1, #2
 8003b9e:	e7de      	b.n	8003b5e <HAL_UART_Transmit+0x2e>
          pData +=1U;
 8003ba0:	3101      	adds	r1, #1
 8003ba2:	e7dc      	b.n	8003b5e <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	0612      	lsls	r2, r2, #24
 8003ba8:	d5fc      	bpl.n	8003ba4 <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	e7d5      	b.n	8003b5e <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2002      	movs	r0, #2
  }
}
 8003bb8:	4770      	bx	lr

08003bba <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bba:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003bbc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d144      	bne.n	8003c4e <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d040      	beq.n	8003c4a <HAL_UART_Receive+0x90>
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	d03e      	beq.n	8003c4a <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bcc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d03c      	beq.n	8003c4e <HAL_UART_Receive+0x94>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bde:	2322      	movs	r3, #34	; 0x22
 8003be0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8003be4:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003be6:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8003be8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b933      	cbnz	r3, 8003bfc <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8003bf8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003bfa:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 8003bfc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003bfe:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c06:	6883      	ldr	r3, [r0, #8]
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0c:	d111      	bne.n	8003c32 <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003c0e:	6813      	ldr	r3, [r2, #0]
 8003c10:	069c      	lsls	r4, r3, #26
 8003c12:	d5fc      	bpl.n	8003c0e <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003c14:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c16:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003c18:	b933      	cbnz	r3, 8003c28 <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c20:	f823 2b02 	strh.w	r2, [r3], #2
{
 8003c24:	4619      	mov	r1, r3
 8003c26:	e7df      	b.n	8003be8 <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c28:	460b      	mov	r3, r1
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 8003c30:	e7f8      	b.n	8003c24 <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	069b      	lsls	r3, r3, #26
 8003c36:	d5fc      	bpl.n	8003c32 <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003c38:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c3a:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 8003c3c:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003c3e:	b90c      	cbnz	r4, 8003c44 <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c40:	700a      	strb	r2, [r1, #0]
 8003c42:	e7ef      	b.n	8003c24 <HAL_UART_Receive+0x6a>
 8003c44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c48:	e7fa      	b.n	8003c40 <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7d5      	b.n	8003bfa <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 8003c4e:	2002      	movs	r0, #2
 8003c50:	e7d3      	b.n	8003bfa <HAL_UART_Receive+0x40>

08003c52 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8003c52:	4770      	bx	lr

08003c54 <HAL_RNG_Init>:
{ 
 8003c54:	b510      	push	{r4, lr}
  if(hrng == NULL)
 8003c56:	4604      	mov	r4, r0
 8003c58:	b1a8      	cbz	r0, 8003c86 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 8003c5a:	7903      	ldrb	r3, [r0, #4]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d014      	beq.n	8003c8a <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 8003c60:	7943      	ldrb	r3, [r0, #5]
 8003c62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c66:	b913      	cbnz	r3, 8003c6e <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 8003c68:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 8003c6a:	f7ff fff2 	bl	8003c52 <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 8003c6e:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8003c70:	2302      	movs	r3, #2
 8003c72:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8003c74:	6813      	ldr	r3, [r2, #0]
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 8003c7c:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 8003c82:	7120      	strb	r0, [r4, #4]
}
 8003c84:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c86:	2001      	movs	r0, #1
 8003c88:	e7fc      	b.n	8003c84 <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	e7fa      	b.n	8003c84 <HAL_RNG_Init+0x30>
 8003c8e:	0000      	movs	r0, r0

08003c90 <Reset_Handler>:
 8003c90:	2100      	movs	r1, #0
 8003c92:	e003      	b.n	8003c9c <LoopCopyDataInit>

08003c94 <CopyDataInit>:
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <LoopForever+0x2>)
 8003c96:	585b      	ldr	r3, [r3, r1]
 8003c98:	5043      	str	r3, [r0, r1]
 8003c9a:	3104      	adds	r1, #4

08003c9c <LoopCopyDataInit>:
 8003c9c:	480a      	ldr	r0, [pc, #40]	; (8003cc8 <LoopForever+0x6>)
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <LoopForever+0xa>)
 8003ca0:	1842      	adds	r2, r0, r1
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3f6      	bcc.n	8003c94 <CopyDataInit>
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <LoopForever+0xe>)
 8003ca8:	e002      	b.n	8003cb0 <LoopFillZerobss>

08003caa <FillZerobss>:
 8003caa:	2300      	movs	r3, #0
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	3204      	adds	r2, #4

08003cb0 <LoopFillZerobss>:
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <LoopForever+0x12>)
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d3f9      	bcc.n	8003caa <FillZerobss>
 8003cb6:	f3af 8000 	nop.w
 8003cba:	f000 f80f 	bl	8003cdc <__libc_init_array>
 8003cbe:	f7fc fb9b 	bl	80003f8 <main>

08003cc2 <LoopForever>:
 8003cc2:	e7fe      	b.n	8003cc2 <LoopForever>
 8003cc4:	08004088 	.word	0x08004088
 8003cc8:	10000000 	.word	0x10000000
 8003ccc:	10000434 	.word	0x10000434
 8003cd0:	10000434 	.word	0x10000434
 8003cd4:	10000af8 	.word	0x10000af8

08003cd8 <BusFault_Handler>:
 8003cd8:	e7fe      	b.n	8003cd8 <BusFault_Handler>
 8003cda:	0000      	movs	r0, r0

08003cdc <__libc_init_array>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	4e0d      	ldr	r6, [pc, #52]	; (8003d14 <__libc_init_array+0x38>)
 8003ce0:	4d0d      	ldr	r5, [pc, #52]	; (8003d18 <__libc_init_array+0x3c>)
 8003ce2:	1b76      	subs	r6, r6, r5
 8003ce4:	10b6      	asrs	r6, r6, #2
 8003ce6:	d006      	beq.n	8003cf6 <__libc_init_array+0x1a>
 8003ce8:	2400      	movs	r4, #0
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	3401      	adds	r4, #1
 8003cf0:	4798      	blx	r3
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d1f9      	bne.n	8003cea <__libc_init_array+0xe>
 8003cf6:	4e09      	ldr	r6, [pc, #36]	; (8003d1c <__libc_init_array+0x40>)
 8003cf8:	4d09      	ldr	r5, [pc, #36]	; (8003d20 <__libc_init_array+0x44>)
 8003cfa:	1b76      	subs	r6, r6, r5
 8003cfc:	f000 f8f0 	bl	8003ee0 <_init>
 8003d00:	10b6      	asrs	r6, r6, #2
 8003d02:	d006      	beq.n	8003d12 <__libc_init_array+0x36>
 8003d04:	2400      	movs	r4, #0
 8003d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0a:	3401      	adds	r4, #1
 8003d0c:	4798      	blx	r3
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d1f9      	bne.n	8003d06 <__libc_init_array+0x2a>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	0800407c 	.word	0x0800407c
 8003d18:	0800407c 	.word	0x0800407c
 8003d1c:	08004084 	.word	0x08004084
 8003d20:	0800407c 	.word	0x0800407c

08003d24 <memset>:
 8003d24:	0783      	lsls	r3, r0, #30
 8003d26:	b530      	push	{r4, r5, lr}
 8003d28:	d048      	beq.n	8003dbc <memset+0x98>
 8003d2a:	1e54      	subs	r4, r2, #1
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d03f      	beq.n	8003db0 <memset+0x8c>
 8003d30:	b2ca      	uxtb	r2, r1
 8003d32:	4603      	mov	r3, r0
 8003d34:	e001      	b.n	8003d3a <memset+0x16>
 8003d36:	3c01      	subs	r4, #1
 8003d38:	d33a      	bcc.n	8003db0 <memset+0x8c>
 8003d3a:	f803 2b01 	strb.w	r2, [r3], #1
 8003d3e:	079d      	lsls	r5, r3, #30
 8003d40:	d1f9      	bne.n	8003d36 <memset+0x12>
 8003d42:	2c03      	cmp	r4, #3
 8003d44:	d92d      	bls.n	8003da2 <memset+0x7e>
 8003d46:	b2cd      	uxtb	r5, r1
 8003d48:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003d4c:	2c0f      	cmp	r4, #15
 8003d4e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003d52:	d936      	bls.n	8003dc2 <memset+0x9e>
 8003d54:	f1a4 0210 	sub.w	r2, r4, #16
 8003d58:	f022 0c0f 	bic.w	ip, r2, #15
 8003d5c:	f103 0e20 	add.w	lr, r3, #32
 8003d60:	44e6      	add	lr, ip
 8003d62:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8003d66:	f103 0210 	add.w	r2, r3, #16
 8003d6a:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003d6e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003d72:	3210      	adds	r2, #16
 8003d74:	4572      	cmp	r2, lr
 8003d76:	d1f8      	bne.n	8003d6a <memset+0x46>
 8003d78:	f10c 0201 	add.w	r2, ip, #1
 8003d7c:	f014 0f0c 	tst.w	r4, #12
 8003d80:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003d84:	f004 0c0f 	and.w	ip, r4, #15
 8003d88:	d013      	beq.n	8003db2 <memset+0x8e>
 8003d8a:	f1ac 0304 	sub.w	r3, ip, #4
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	3304      	adds	r3, #4
 8003d94:	4413      	add	r3, r2
 8003d96:	f842 5b04 	str.w	r5, [r2], #4
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d1fb      	bne.n	8003d96 <memset+0x72>
 8003d9e:	f00c 0403 	and.w	r4, ip, #3
 8003da2:	b12c      	cbz	r4, 8003db0 <memset+0x8c>
 8003da4:	b2ca      	uxtb	r2, r1
 8003da6:	441c      	add	r4, r3
 8003da8:	f803 2b01 	strb.w	r2, [r3], #1
 8003dac:	429c      	cmp	r4, r3
 8003dae:	d1fb      	bne.n	8003da8 <memset+0x84>
 8003db0:	bd30      	pop	{r4, r5, pc}
 8003db2:	4664      	mov	r4, ip
 8003db4:	4613      	mov	r3, r2
 8003db6:	2c00      	cmp	r4, #0
 8003db8:	d1f4      	bne.n	8003da4 <memset+0x80>
 8003dba:	e7f9      	b.n	8003db0 <memset+0x8c>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4614      	mov	r4, r2
 8003dc0:	e7bf      	b.n	8003d42 <memset+0x1e>
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	46a4      	mov	ip, r4
 8003dc6:	e7e0      	b.n	8003d8a <memset+0x66>

08003dc8 <rand>:
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <rand+0x2c>)
 8003dca:	490b      	ldr	r1, [pc, #44]	; (8003df8 <rand+0x30>)
 8003dcc:	b410      	push	{r4}
 8003dce:	6814      	ldr	r4, [r2, #0]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <rand+0x34>)
 8003dd2:	e9d4 032a 	ldrd	r0, r3, [r4, #168]	; 0xa8
 8003dd6:	fb00 f202 	mul.w	r2, r0, r2
 8003dda:	fb01 2203 	mla	r2, r1, r3, r2
 8003dde:	fba0 0101 	umull	r0, r1, r0, r1
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	eb42 0001 	adc.w	r0, r2, r1
 8003de8:	e9c4 302a 	strd	r3, r0, [r4, #168]	; 0xa8
 8003dec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003df0:	bc10      	pop	{r4}
 8003df2:	4770      	bx	lr
 8003df4:	10000000 	.word	0x10000000
 8003df8:	4c957f2d 	.word	0x4c957f2d
 8003dfc:	5851f42d 	.word	0x5851f42d

08003e00 <register_fini>:
 8003e00:	4b02      	ldr	r3, [pc, #8]	; (8003e0c <register_fini+0xc>)
 8003e02:	b113      	cbz	r3, 8003e0a <register_fini+0xa>
 8003e04:	4802      	ldr	r0, [pc, #8]	; (8003e10 <register_fini+0x10>)
 8003e06:	f000 b805 	b.w	8003e14 <atexit>
 8003e0a:	4770      	bx	lr
 8003e0c:	00000000 	.word	0x00000000
 8003e10:	08003e21 	.word	0x08003e21

08003e14 <atexit>:
 8003e14:	2300      	movs	r3, #0
 8003e16:	4601      	mov	r1, r0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 b81a 	b.w	8003e54 <__register_exitproc>

08003e20 <__libc_fini_array>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <__libc_fini_array+0x24>)
 8003e24:	4d08      	ldr	r5, [pc, #32]	; (8003e48 <__libc_fini_array+0x28>)
 8003e26:	1b5b      	subs	r3, r3, r5
 8003e28:	109c      	asrs	r4, r3, #2
 8003e2a:	d007      	beq.n	8003e3c <__libc_fini_array+0x1c>
 8003e2c:	3b04      	subs	r3, #4
 8003e2e:	441d      	add	r5, r3
 8003e30:	3c01      	subs	r4, #1
 8003e32:	f855 3904 	ldr.w	r3, [r5], #-4
 8003e36:	4798      	blx	r3
 8003e38:	2c00      	cmp	r4, #0
 8003e3a:	d1f9      	bne.n	8003e30 <__libc_fini_array+0x10>
 8003e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e40:	f000 b854 	b.w	8003eec <_fini>
 8003e44:	08004088 	.word	0x08004088
 8003e48:	08004084 	.word	0x08004084

08003e4c <__retarget_lock_acquire_recursive>:
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <__retarget_lock_release_recursive>:
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop

08003e54 <__register_exitproc>:
 8003e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e58:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003ed8 <__register_exitproc+0x84>
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	f8da 0000 	ldr.w	r0, [sl]
 8003e62:	4698      	mov	r8, r3
 8003e64:	460f      	mov	r7, r1
 8003e66:	4691      	mov	r9, r2
 8003e68:	f7ff fff0 	bl	8003e4c <__retarget_lock_acquire_recursive>
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <__register_exitproc+0x88>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8003e74:	b324      	cbz	r4, 8003ec0 <__register_exitproc+0x6c>
 8003e76:	6865      	ldr	r5, [r4, #4]
 8003e78:	2d1f      	cmp	r5, #31
 8003e7a:	dc26      	bgt.n	8003eca <__register_exitproc+0x76>
 8003e7c:	b95e      	cbnz	r6, 8003e96 <__register_exitproc+0x42>
 8003e7e:	1c6b      	adds	r3, r5, #1
 8003e80:	3502      	adds	r5, #2
 8003e82:	f8da 0000 	ldr.w	r0, [sl]
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8003e8c:	f7ff ffe0 	bl	8003e50 <__retarget_lock_release_recursive>
 8003e90:	2000      	movs	r0, #0
 8003e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e96:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8003ea0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8003ea4:	40ab      	lsls	r3, r5
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	2e02      	cmp	r6, #2
 8003eaa:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8003eae:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8003eb2:	d1e4      	bne.n	8003e7e <__register_exitproc+0x2a>
 8003eb4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8003ebe:	e7de      	b.n	8003e7e <__register_exitproc+0x2a>
 8003ec0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8003ec4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8003ec8:	e7d5      	b.n	8003e76 <__register_exitproc+0x22>
 8003eca:	f8da 0000 	ldr.w	r0, [sl]
 8003ece:	f7ff ffbf 	bl	8003e50 <__retarget_lock_release_recursive>
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	e7dc      	b.n	8003e92 <__register_exitproc+0x3e>
 8003ed8:	10000430 	.word	0x10000430
 8003edc:	08004078 	.word	0x08004078

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
