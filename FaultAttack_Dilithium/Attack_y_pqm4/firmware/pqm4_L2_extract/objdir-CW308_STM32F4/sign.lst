   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"sign.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata.str1.1,"aMS",%progbits,1
  16              	.LC0:
  17 0000 45393943 		.ascii	"E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E"
  17      42323138 
  17      31354141 
  17      32463441 
  17      35343735 
  18 0033 31334331 		.ascii	"13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525"
  18      41434143 
  18      33323934 
  18      33314644 
  18      42343536 
  19 0066 42353636 		.ascii	"B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79AD"
  19      44373637 
  19      44463038 
  19      33303142 
  19      45393633 
  20 0099 44374241 		.ascii	"D7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A"
  20      30423636 
  20      44433733 
  20      37413536 
  20      44424333 
  21 00cc 35463344 		.ascii	"5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5"
  21      32423645 
  21      34433744 
  21      31463241 
  21      33423543 
  22 00ff 4400     		.ascii	"D\000"
  23              		.section	.text.crypto_sign_keypair,"ax",%progbits
  24              		.align	1
  25              		.global	crypto_sign_keypair
  26              		.arch armv7e-m
  27              		.syntax unified
  28              		.thumb
  29              		.thumb_func
  30              		.fpu softvfp
  32              	crypto_sign_keypair:
  33              	.LVL0:
  34              	.LFB0:
  35              		.file 1 "sign.c"
   1:sign.c        **** #include <stdint.h>
   2:sign.c        **** #include "params.h"
   3:sign.c        **** #include "sign.h"
   4:sign.c        **** #include "packing.h"
   5:sign.c        **** #include "polyvec.h"
   6:sign.c        **** #include "poly.h"
   7:sign.c        **** #include "randombytes.h"
   8:sign.c        **** #include "symmetric.h"
   9:sign.c        **** #include "smallpoly.h"
  10:sign.c        **** /* #include "fips202.h" */
  11:sign.c        **** /* #include "fips202.c" */
  12:sign.c        **** 
  13:sign.c        **** /*************************************************
  14:sign.c        **** * Name:        crypto_sign_keypair
  15:sign.c        **** *
  16:sign.c        **** * Description: Generates public and private key.
  17:sign.c        **** *
  18:sign.c        **** * Arguments:   - uint8_t *pk: pointer to output public key (allocated
  19:sign.c        **** *                             array of CRYPTO_PUBLICKEYBYTES bytes)
  20:sign.c        **** *              - uint8_t *sk: pointer to output private key (allocated
  21:sign.c        **** *                             array of CRYPTO_SECRETKEYBYTES bytes)
  22:sign.c        **** *
  23:sign.c        **** * Returns 0 (success)
  24:sign.c        **** **************************************************/
  25:sign.c        **** int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
  36              		.loc 1 25 51 view -0
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 37504
  39              		@ frame_needed = 0, uses_anonymous_args = 0
  26:sign.c        ****   uint8_t seedbuf[2*SEEDBYTES + CRHBYTES];
  40              		.loc 1 26 3 view .LVU1
  27:sign.c        ****   uint8_t tr[TRBYTES];
  41              		.loc 1 27 3 view .LVU2
  28:sign.c        ****   const uint8_t *rho, *rhoprime, *key;
  42              		.loc 1 28 3 view .LVU3
  29:sign.c        ****   polyvecl mat[K];
  43              		.loc 1 29 3 view .LVU4
  30:sign.c        ****   polyvecl s1, s1hat;
  44              		.loc 1 30 3 view .LVU5
  31:sign.c        ****   polyveck s2, t1, t0;
  45              		.loc 1 31 3 view .LVU6
  32:sign.c        **** 
  33:sign.c        ****   /* Get randomness for rho, rhoprime and key */
  34:sign.c        ****   //randombytes(seedbuf, SEEDBYTES);
  35:sign.c        ****   char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13
  46              		.loc 1 35 3 view .LVU7
  25:sign.c        ****   uint8_t seedbuf[2*SEEDBYTES + CRHBYTES];
  47              		.loc 1 25 51 is_stmt 0 view .LVU8
  48 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 28
  51              		.cfi_offset 4, -28
  52              		.cfi_offset 5, -24
  53              		.cfi_offset 6, -20
  54              		.cfi_offset 7, -16
  55              		.cfi_offset 8, -12
  56              		.cfi_offset 9, -8
  57              		.cfi_offset 14, -4
  58 0004 ADF5124D 		sub	sp, sp, #37376
  59              	.LCFI1:
  60              		.cfi_def_cfa_offset 37404
  61 0008 A5B0     		sub	sp, sp, #148
  62              	.LCFI2:
  63              		.cfi_def_cfa_offset 37552
  64              		.loc 1 35 8 view .LVU9
  65 000a 4FF48072 		mov	r2, #256
  25:sign.c        ****   uint8_t seedbuf[2*SEEDBYTES + CRHBYTES];
  66              		.loc 1 25 51 view .LVU10
  67 000e 0546     		mov	r5, r0
  68 0010 0E46     		mov	r6, r1
  69              		.loc 1 35 8 view .LVU11
  70 0012 64A8     		add	r0, sp, #400
  71              	.LVL1:
  72              		.loc 1 35 8 view .LVU12
  73 0014 4A49     		ldr	r1, .L9
  74              	.LVL2:
  75              		.loc 1 35 8 view .LVU13
  76 0016 64AC     		add	r4, sp, #400
  77 0018 FFF7FEFF 		bl	memcpy
  78              	.LVL3:
  36:sign.c        **** 	uint8_t cacheintsk[6*SEEDBYTES];
  79              		.loc 1 36 2 is_stmt 1 view .LVU14
  37:sign.c        **** 	for (int i = 0; i <2 * SEEDBYTES; i++)
  80              		.loc 1 37 2 view .LVU15
  81              	.LBB2:
  82              		.loc 1 37 7 view .LVU16
  83              		.loc 1 37 18 view .LVU17
  84 001c A4F1C002 		sub	r2, r4, #192
  85              	.LBE2:
  35:sign.c        **** 	uint8_t cacheintsk[6*SEEDBYTES];
  86              		.loc 1 35 8 is_stmt 0 view .LVU18
  87 0020 1046     		mov	r0, r2
  88              	.LBB3:
  89              		.loc 1 37 11 view .LVU19
  90 0022 0021     		movs	r1, #0
  91              	.LVL4:
  92              	.L4:
  38:sign.c        **** 	{
  39:sign.c        **** 		if (seedbufcha[i] - 'A' >= 0)
  93              		.loc 1 39 3 is_stmt 1 view .LVU20
  94              		.loc 1 39 17 is_stmt 0 view .LVU21
  95 0024 14F8013B 		ldrb	r3, [r4], #1	@ zero_extendqisi2
  96              		.loc 1 39 6 view .LVU22
  97 0028 402B     		cmp	r3, #64
  40:sign.c        **** 			cacheintsk[i] = 10 + seedbufcha[i] - 'A';
  98              		.loc 1 40 4 is_stmt 1 view .LVU23
  99              		.loc 1 40 39 is_stmt 0 view .LVU24
 100 002a 8CBF     		ite	hi
 101 002c 373B     		subhi	r3, r3, #55
  41:sign.c        **** 		else
  42:sign.c        **** 			cacheintsk[i] = seedbufcha[i] - '0';
 102              		.loc 1 42 4 is_stmt 1 view .LVU25
 103              		.loc 1 42 34 is_stmt 0 view .LVU26
 104 002e 303B     		subls	r3, r3, #48
  37:sign.c        **** 	{
 105              		.loc 1 37 37 view .LVU27
 106 0030 0131     		adds	r1, r1, #1
 107              	.LVL5:
 108              		.loc 1 42 34 view .LVU28
 109 0032 DBB2     		uxtb	r3, r3
  37:sign.c        **** 	{
 110              		.loc 1 37 2 view .LVU29
 111 0034 4029     		cmp	r1, #64
 112 0036 00F8013B 		strb	r3, [r0], #1
  37:sign.c        **** 	{
 113              		.loc 1 37 36 is_stmt 1 view .LVU30
 114              	.LVL6:
  37:sign.c        **** 	{
 115              		.loc 1 37 18 view .LVU31
  37:sign.c        **** 	{
 116              		.loc 1 37 2 is_stmt 0 view .LVU32
 117 003a F3D1     		bne	.L4
 118 003c 14A9     		add	r1, sp, #80
 119              	.LVL7:
  37:sign.c        **** 	{
 120              		.loc 1 37 2 view .LVU33
 121              	.LBE3:
 122              	.LBB4:
  43:sign.c        **** 	}
  44:sign.c        **** 	for (int i = 0; i < SEEDBYTES; i++)
 123              		.loc 1 44 11 view .LVU34
 124 003e 0023     		movs	r3, #0
 125 0040 0C46     		mov	r4, r1
 126              	.L5:
 127              	.LVL8:
  45:sign.c        **** 		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 128              		.loc 1 45 3 is_stmt 1 discriminator 3 view .LVU35
 129              		.loc 1 45 37 is_stmt 0 discriminator 3 view .LVU36
 130 0042 1778     		ldrb	r7, [r2]	@ zero_extendqisi2
 131 0044 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
  44:sign.c        **** 		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 132              		.loc 1 44 34 discriminator 3 view .LVU37
 133 0046 0133     		adds	r3, r3, #1
 134              	.LVL9:
 135              		.loc 1 45 37 discriminator 3 view .LVU38
 136 0048 00EB0710 		add	r0, r0, r7, lsl #4
  44:sign.c        **** 		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 137              		.loc 1 44 2 discriminator 3 view .LVU39
 138 004c 202B     		cmp	r3, #32
 139              		.loc 1 45 14 discriminator 3 view .LVU40
 140 004e 01F8010B 		strb	r0, [r1], #1
  44:sign.c        **** 		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 141              		.loc 1 44 33 is_stmt 1 discriminator 3 view .LVU41
 142              	.LVL10:
  44:sign.c        **** 		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 143              		.loc 1 44 18 discriminator 3 view .LVU42
  44:sign.c        **** 		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 144              		.loc 1 44 2 is_stmt 0 discriminator 3 view .LVU43
 145 0052 02F10202 		add	r2, r2, #2
 146 0056 F4D1     		bne	.L5
 147              	.LBE4:
  46:sign.c        ****   
  47:sign.c        ****   //
  48:sign.c        ****   shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 148              		.loc 1 48 3 is_stmt 1 view .LVU44
 149 0058 2246     		mov	r2, r4
 150 005a 2046     		mov	r0, r4
 151 005c 8021     		movs	r1, #128
 152 005e FFF7FEFF 		bl	shake256
 153              	.LVL11:
  49:sign.c        ****   rho = seedbuf;
 154              		.loc 1 49 3 view .LVU45
  50:sign.c        ****   rhoprime = rho + SEEDBYTES;
 155              		.loc 1 50 3 view .LVU46
  51:sign.c        ****   key = rhoprime + CRHBYTES;
 156              		.loc 1 51 3 view .LVU47
  52:sign.c        **** 
  53:sign.c        ****   /* Expand matrix */
  54:sign.c        ****   polyvec_matrix_expand(mat, rho);
 157              		.loc 1 54 3 view .LVU48
 158 0062 0DF5A540 		add	r0, sp, #21120
  55:sign.c        **** 
  56:sign.c        ****   /* Sample short vectors s1 and s2 */
  57:sign.c        ****   polyvecl_uniform_eta(&s1, rhoprime, 0);
 159              		.loc 1 57 3 is_stmt 0 view .LVU49
 160 0066 0DF17009 		add	r9, sp, #112
 161              	.LVL12:
 162              		.loc 1 57 3 view .LVU50
 163 006a A4AF     		add	r7, sp, #656
  54:sign.c        **** 
 164              		.loc 1 54 3 view .LVU51
 165 006c 2146     		mov	r1, r4
 166 006e 1030     		adds	r0, r0, #16
  58:sign.c        ****   polyveck_uniform_eta(&s2, rhoprime, L);
 167              		.loc 1 58 3 view .LVU52
 168 0070 0DF50A58 		add	r8, sp, #8832
  54:sign.c        **** 
 169              		.loc 1 54 3 view .LVU53
 170 0074 FFF7FEFF 		bl	pqcrystals_dilithium_polyvec_matrix_expand
 171              	.LVL13:
  57:sign.c        ****   polyveck_uniform_eta(&s2, rhoprime, L);
 172              		.loc 1 57 3 is_stmt 1 view .LVU54
 173              		.loc 1 58 3 is_stmt 0 view .LVU55
 174 0078 08F11008 		add	r8, r8, #16
  57:sign.c        ****   polyveck_uniform_eta(&s2, rhoprime, L);
 175              		.loc 1 57 3 view .LVU56
 176 007c 4946     		mov	r1, r9
 177 007e 3846     		mov	r0, r7
 178 0080 0022     		movs	r2, #0
 179 0082 FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_uniform_eta
 180              	.LVL14:
 181              		.loc 1 58 3 is_stmt 1 view .LVU57
 182 0086 4946     		mov	r1, r9
 183 0088 4046     		mov	r0, r8
 184 008a 0422     		movs	r2, #4
 185 008c FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_uniform_eta
 186              	.LVL15:
  59:sign.c        **** 
  60:sign.c        ****   /* Matrix-vector multiplication */
  61:sign.c        ****   s1hat = s1;
 187              		.loc 1 61 3 view .LVU58
 188              		.loc 1 61 9 is_stmt 0 view .LVU59
 189 0090 0DF59450 		add	r0, sp, #4736
 190 0094 3946     		mov	r1, r7
 191 0096 4FF48052 		mov	r2, #4096
 192 009a 1030     		adds	r0, r0, #16
 193 009c FFF7FEFF 		bl	memcpy
 194              	.LVL16:
  62:sign.c        ****   polyvecl_ntt(&s1hat);
 195              		.loc 1 62 3 is_stmt 1 view .LVU60
 196 00a0 0DF59450 		add	r0, sp, #4736
 197 00a4 1030     		adds	r0, r0, #16
 198 00a6 FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_ntt
 199              	.LVL17:
  63:sign.c        ****   polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 200              		.loc 1 63 3 view .LVU61
 201 00aa 0DF59452 		add	r2, sp, #4736
 202 00ae 0DF5A541 		add	r1, sp, #21120
 203 00b2 0DF54A50 		add	r0, sp, #12928
 204 00b6 1032     		adds	r2, r2, #16
 205 00b8 1031     		adds	r1, r1, #16
 206 00ba 1030     		adds	r0, r0, #16
 207 00bc FFF7FEFF 		bl	pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery
 208              	.LVL18:
  64:sign.c        ****   polyveck_reduce(&t1);
 209              		.loc 1 64 3 view .LVU62
 210 00c0 0DF54A50 		add	r0, sp, #12928
 211 00c4 1030     		adds	r0, r0, #16
 212 00c6 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_reduce
 213              	.LVL19:
  65:sign.c        ****   polyveck_invntt_tomont(&t1);
 214              		.loc 1 65 3 view .LVU63
 215 00ca 0DF54A50 		add	r0, sp, #12928
 216 00ce 1030     		adds	r0, r0, #16
 217 00d0 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_invntt_tomont
 218              	.LVL20:
  66:sign.c        **** 
  67:sign.c        ****   /* Add error vector s2 */
  68:sign.c        ****   polyveck_add(&t1, &t1, &s2);
 219              		.loc 1 68 3 view .LVU64
 220 00d4 0DF54A51 		add	r1, sp, #12928
 221 00d8 1031     		adds	r1, r1, #16
 222 00da 4246     		mov	r2, r8
 223 00dc 0846     		mov	r0, r1
 224 00de FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_add
 225              	.LVL21:
  69:sign.c        **** 
  70:sign.c        ****   /* Extract t1 and write public key */
  71:sign.c        ****   polyveck_caddq(&t1);
 226              		.loc 1 71 3 view .LVU65
 227 00e2 0DF54A50 		add	r0, sp, #12928
 228 00e6 1030     		adds	r0, r0, #16
 229 00e8 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_caddq
 230              	.LVL22:
  72:sign.c        ****   polyveck_power2round(&t1, &t0, &t1);
 231              		.loc 1 72 3 view .LVU66
 232 00ec 0DF58549 		add	r9, sp, #17024
 233              	.LVL23:
 234              		.loc 1 72 3 is_stmt 0 view .LVU67
 235 00f0 0DF54A52 		add	r2, sp, #12928
 236 00f4 09F11009 		add	r9, r9, #16
 237 00f8 1032     		adds	r2, r2, #16
 238 00fa 4946     		mov	r1, r9
 239 00fc 1046     		mov	r0, r2
 240 00fe FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_power2round
 241              	.LVL24:
  73:sign.c        ****   pack_pk(pk, rho, &t1);
 242              		.loc 1 73 3 is_stmt 1 view .LVU68
 243 0102 0DF54A52 		add	r2, sp, #12928
 244 0106 2146     		mov	r1, r4
 245 0108 2846     		mov	r0, r5
 246 010a 1032     		adds	r2, r2, #16
 247 010c FFF7FEFF 		bl	pqcrystals_dilithium_pack_pk
 248              	.LVL25:
  74:sign.c        **** 
  75:sign.c        ****   /* Compute H(rho, t1) and write secret key */
  76:sign.c        ****   shake256(tr, TRBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 249              		.loc 1 76 3 view .LVU69
 250 0110 2A46     		mov	r2, r5
 251 0112 04A8     		add	r0, sp, #16
 252 0114 4FF4A463 		mov	r3, #1312
 253 0118 4021     		movs	r1, #64
 254 011a FFF7FEFF 		bl	shake256
 255              	.LVL26:
  77:sign.c        ****   pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 256              		.loc 1 77 3 view .LVU70
 257 011e 3046     		mov	r0, r6
 258 0120 CDE90178 		strd	r7, r8, [sp, #4]
 259 0124 CDF80090 		str	r9, [sp]
 260 0128 2CAB     		add	r3, sp, #176
 261              	.LVL27:
 262              		.loc 1 77 3 is_stmt 0 view .LVU71
 263 012a 04AA     		add	r2, sp, #16
 264 012c 2146     		mov	r1, r4
 265 012e FFF7FEFF 		bl	pqcrystals_dilithium_pack_sk
 266              	.LVL28:
  78:sign.c        **** 
  79:sign.c        ****   return 0;
 267              		.loc 1 79 3 is_stmt 1 view .LVU72
  80:sign.c        **** }
 268              		.loc 1 80 1 is_stmt 0 view .LVU73
 269 0132 0020     		movs	r0, #0
 270 0134 0DF5124D 		add	sp, sp, #37376
 271 0138 25B0     		add	sp, sp, #148
 272              	.LCFI3:
 273              		.cfi_def_cfa_offset 28
 274              		@ sp needed
 275 013a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 276              	.LVL29:
 277              	.L10:
 278              		.loc 1 80 1 view .LVU74
 279 013e 00BF     		.align	2
 280              	.L9:
 281 0140 00000000 		.word	.LC0
 282              		.cfi_endproc
 283              	.LFE0:
 285              		.section	.text.test_fun,"ax",%progbits
 286              		.align	1
 287              		.global	test_fun
 288              		.syntax unified
 289              		.thumb
 290              		.thumb_func
 291              		.fpu softvfp
 293              	test_fun:
 294              	.LVL30:
 295              	.LFB1:
  81:sign.c        **** void test_fun(uint8_t *p){
 296              		.loc 1 81 26 is_stmt 1 view -0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 344
 299              		@ frame_needed = 0, uses_anonymous_args = 0
  82:sign.c        **** 	uint8_t buf[136];
 300              		.loc 1 82 2 view .LVU76
  83:sign.c        **** 	size_t len=136;
 301              		.loc 1 83 2 view .LVU77
  84:sign.c        **** 	
  85:sign.c        **** 	uint64_t s_inc[26];
 302              		.loc 1 85 2 view .LVU78
  86:sign.c        **** 	s_inc[25]=0;
 303              		.loc 1 86 2 view .LVU79
  81:sign.c        **** 	uint8_t buf[136];
 304              		.loc 1 81 26 is_stmt 0 view .LVU80
 305 0000 10B5     		push	{r4, lr}
 306              	.LCFI4:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 4, -8
 309              		.cfi_offset 14, -4
 310              		.loc 1 86 11 view .LVU81
 311 0002 0022     		movs	r2, #0
  81:sign.c        **** 	uint8_t buf[136];
 312              		.loc 1 81 26 view .LVU82
 313 0004 D6B0     		sub	sp, sp, #344
 314              	.LCFI5:
 315              		.cfi_def_cfa_offset 352
 316              		.loc 1 86 11 view .LVU83
 317 0006 0023     		movs	r3, #0
 318 0008 CDE95423 		strd	r2, [sp, #336]
  87:sign.c        **** 	s_inc[0]=0xffffffffffffffff;
 319              		.loc 1 87 2 is_stmt 1 view .LVU84
 320              		.loc 1 87 10 is_stmt 0 view .LVU85
 321 000c 4FF0FF32 		mov	r2, #-1
 322 0010 4FF0FF33 		mov	r3, #-1
  81:sign.c        **** 	uint8_t buf[136];
 323              		.loc 1 81 26 view .LVU86
 324 0014 0446     		mov	r4, r0
 325              		.loc 1 87 10 view .LVU87
 326 0016 CDE92223 		strd	r2, [sp, #136]
  88:sign.c        **** 	s_inc[1]=0xffffffffffffffff;
 327              		.loc 1 88 2 is_stmt 1 view .LVU88
 328              		.loc 1 88 10 is_stmt 0 view .LVU89
 329 001a CDE92423 		strd	r2, [sp, #144]
  89:sign.c        **** 	s_inc[2]=0xffffffffffffffff;
 330              		.loc 1 89 2 is_stmt 1 view .LVU90
 331              		.loc 1 89 10 is_stmt 0 view .LVU91
 332 001e CDE92623 		strd	r2, [sp, #152]
  90:sign.c        **** 	s_inc[3]=0xffffffffffffffff;
 333              		.loc 1 90 2 is_stmt 1 view .LVU92
 334              		.loc 1 90 10 is_stmt 0 view .LVU93
 335 0022 CDE92823 		strd	r2, [sp, #160]
  91:sign.c        **** 	s_inc[4]=0xffffffffffffffff;
 336              		.loc 1 91 2 is_stmt 1 view .LVU94
 337              		.loc 1 91 10 is_stmt 0 view .LVU95
 338 0026 CDE92A23 		strd	r2, [sp, #168]
  92:sign.c        **** 	s_inc[5]=0xffffffffffffffff;
 339              		.loc 1 92 2 is_stmt 1 view .LVU96
 340              		.loc 1 92 10 is_stmt 0 view .LVU97
 341 002a CDE92C23 		strd	r2, [sp, #176]
  93:sign.c        **** 	s_inc[6]=0xffffffffffffffff;
 342              		.loc 1 93 2 is_stmt 1 view .LVU98
 343              		.loc 1 93 10 is_stmt 0 view .LVU99
 344 002e CDE92E23 		strd	r2, [sp, #184]
  94:sign.c        **** 	s_inc[7]=0xffffffffffffffff;
 345              		.loc 1 94 2 is_stmt 1 view .LVU100
 346              		.loc 1 94 10 is_stmt 0 view .LVU101
 347 0032 CDE93023 		strd	r2, [sp, #192]
  95:sign.c        **** 	s_inc[8]=0xffffffffffffffff;
 348              		.loc 1 95 2 is_stmt 1 view .LVU102
 349              		.loc 1 95 10 is_stmt 0 view .LVU103
 350 0036 CDE93223 		strd	r2, [sp, #200]
  96:sign.c        **** 	s_inc[9]=0xffffffffffffffff;
 351              		.loc 1 96 2 is_stmt 1 view .LVU104
 352              		.loc 1 96 10 is_stmt 0 view .LVU105
 353 003a CDE93423 		strd	r2, [sp, #208]
  97:sign.c        **** 	s_inc[10]=0xffffffffffffffff;
 354              		.loc 1 97 2 is_stmt 1 view .LVU106
 355              		.loc 1 97 11 is_stmt 0 view .LVU107
 356 003e CDE93623 		strd	r2, [sp, #216]
  98:sign.c        **** 	s_inc[11]=0xffffffffffffffff;
 357              		.loc 1 98 2 is_stmt 1 view .LVU108
 358              		.loc 1 98 11 is_stmt 0 view .LVU109
 359 0042 CDE93823 		strd	r2, [sp, #224]
  99:sign.c        **** 	s_inc[12]=0xffffffffffffffff;
 360              		.loc 1 99 2 is_stmt 1 view .LVU110
 361              		.loc 1 99 11 is_stmt 0 view .LVU111
 362 0046 CDE93A23 		strd	r2, [sp, #232]
 100:sign.c        **** 	s_inc[13]=0xffffffffffffffff;
 363              		.loc 1 100 2 is_stmt 1 view .LVU112
 364              		.loc 1 100 11 is_stmt 0 view .LVU113
 365 004a CDE93C23 		strd	r2, [sp, #240]
 101:sign.c        **** 	s_inc[14]=0xffffffffffffffff;
 366              		.loc 1 101 2 is_stmt 1 view .LVU114
 367              		.loc 1 101 11 is_stmt 0 view .LVU115
 368 004e CDE93E23 		strd	r2, [sp, #248]
 102:sign.c        **** 	s_inc[15]=0xffffffffffffffff;
 369              		.loc 1 102 2 is_stmt 1 view .LVU116
 370              		.loc 1 102 11 is_stmt 0 view .LVU117
 371 0052 CDE94023 		strd	r2, [sp, #256]
 103:sign.c        **** 	s_inc[16]=0xffffffffffffffff;
 372              		.loc 1 103 2 is_stmt 1 view .LVU118
 373              		.loc 1 103 11 is_stmt 0 view .LVU119
 374 0056 CDE94223 		strd	r2, [sp, #264]
 104:sign.c        **** 	s_inc[17]=0xffffffffffffffff;
 375              		.loc 1 104 2 is_stmt 1 view .LVU120
 376              		.loc 1 104 11 is_stmt 0 view .LVU121
 377 005a CDE94423 		strd	r2, [sp, #272]
 105:sign.c        **** 	s_inc[18]=0xffffffffffffffff;
 378              		.loc 1 105 2 is_stmt 1 view .LVU122
 379              		.loc 1 105 11 is_stmt 0 view .LVU123
 380 005e CDE94623 		strd	r2, [sp, #280]
 106:sign.c        **** 	s_inc[19]=0xffffffffffffffff;
 381              		.loc 1 106 2 is_stmt 1 view .LVU124
 382              		.loc 1 106 11 is_stmt 0 view .LVU125
 383 0062 CDE94823 		strd	r2, [sp, #288]
 107:sign.c        **** 	s_inc[20]=0xffffffffffffffff;
 384              		.loc 1 107 2 is_stmt 1 view .LVU126
 385              		.loc 1 107 11 is_stmt 0 view .LVU127
 386 0066 CDE94A23 		strd	r2, [sp, #296]
 108:sign.c        **** 	s_inc[21]=0xffffffffffffffff;
 387              		.loc 1 108 2 is_stmt 1 view .LVU128
 388              		.loc 1 108 11 is_stmt 0 view .LVU129
 389 006a CDE94C23 		strd	r2, [sp, #304]
 109:sign.c        **** 	s_inc[22]=0xffffffffffffffff;
 390              		.loc 1 109 2 is_stmt 1 view .LVU130
 391              		.loc 1 109 11 is_stmt 0 view .LVU131
 392 006e CDE94E23 		strd	r2, [sp, #312]
 110:sign.c        **** 	s_inc[23]=0xffffffffffffffff;
 393              		.loc 1 110 2 is_stmt 1 view .LVU132
 394              		.loc 1 110 11 is_stmt 0 view .LVU133
 395 0072 CDE95023 		strd	r2, [sp, #320]
 111:sign.c        **** 	s_inc[24]=0xffffffffffffffff;
 396              		.loc 1 111 2 is_stmt 1 view .LVU134
 397              		.loc 1 111 11 is_stmt 0 view .LVU135
 398 0076 CDE95223 		strd	r2, [sp, #328]
 112:sign.c        **** 	trigger_high();
 399              		.loc 1 112 2 is_stmt 1 view .LVU136
 400 007a FFF7FEFF 		bl	trigger_high
 401              	.LVL31:
 113:sign.c        **** 	/* uint8_t outlen=137
 114:sign.c        **** 	if(outlen < 136)
 115:sign.c        ****     {
 116:sign.c        ****            len = outlen;
 117:sign.c        ****     }
 118:sign.c        ****     else
 119:sign.c        ****     {
 120:sign.c        ****           len = 136;
 121:sign.c        ****     } */
 122:sign.c        **** 	KeccakF1600_StateExtractBytes(s_inc, buf, 0, len);
 402              		.loc 1 122 2 view .LVU137
 403 007e 8823     		movs	r3, #136
 404 0080 0DEB0300 		add	r0, sp, r3
 405 0084 0022     		movs	r2, #0
 406 0086 6946     		mov	r1, sp
 407 0088 FFF7FEFF 		bl	KeccakF1600_StateExtractBytes
 408              	.LVL32:
 123:sign.c        **** 	trigger_low();
 409              		.loc 1 123 2 view .LVU138
 410 008c FFF7FEFF 		bl	trigger_low
 411              	.LVL33:
 124:sign.c        **** 	
 125:sign.c        **** 	p[0]= buf[0];
 412              		.loc 1 125 2 view .LVU139
 413              		.loc 1 125 6 is_stmt 0 view .LVU140
 414 0090 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 415 0094 2370     		strb	r3, [r4]
 126:sign.c        **** 	p[1]= buf[1];
 416              		.loc 1 126 2 is_stmt 1 view .LVU141
 417              		.loc 1 126 6 is_stmt 0 view .LVU142
 418 0096 9DF80130 		ldrb	r3, [sp, #1]	@ zero_extendqisi2
 419 009a 6370     		strb	r3, [r4, #1]
 127:sign.c        **** 	p[2]= buf[2];
 420              		.loc 1 127 2 is_stmt 1 view .LVU143
 421              		.loc 1 127 6 is_stmt 0 view .LVU144
 422 009c 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 423 00a0 A370     		strb	r3, [r4, #2]
 128:sign.c        **** 	p[3]= buf[3];
 424              		.loc 1 128 2 is_stmt 1 view .LVU145
 425              		.loc 1 128 6 is_stmt 0 view .LVU146
 426 00a2 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 427 00a6 E370     		strb	r3, [r4, #3]
 129:sign.c        **** 	p[4]= buf[4];
 428              		.loc 1 129 2 is_stmt 1 view .LVU147
 429              		.loc 1 129 6 is_stmt 0 view .LVU148
 430 00a8 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 431 00ac 2371     		strb	r3, [r4, #4]
 130:sign.c        **** 	p[5]= buf[5];
 432              		.loc 1 130 2 is_stmt 1 view .LVU149
 433              		.loc 1 130 6 is_stmt 0 view .LVU150
 434 00ae 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 435 00b2 6371     		strb	r3, [r4, #5]
 131:sign.c        **** 	p[6]= buf[6];
 436              		.loc 1 131 2 is_stmt 1 view .LVU151
 437              		.loc 1 131 6 is_stmt 0 view .LVU152
 438 00b4 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 439 00b8 A371     		strb	r3, [r4, #6]
 132:sign.c        **** 	p[7]= buf[7];
 440              		.loc 1 132 2 is_stmt 1 view .LVU153
 441              		.loc 1 132 6 is_stmt 0 view .LVU154
 442 00ba 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 443 00be E371     		strb	r3, [r4, #7]
 133:sign.c        **** }
 444              		.loc 1 133 1 view .LVU155
 445 00c0 56B0     		add	sp, sp, #344
 446              	.LCFI6:
 447              		.cfi_def_cfa_offset 8
 448              		@ sp needed
 449 00c2 10BD     		pop	{r4, pc}
 450              		.loc 1 133 1 view .LVU156
 451              		.cfi_endproc
 452              	.LFE1:
 454              		.section	.text.test_fun2,"ax",%progbits
 455              		.align	1
 456              		.global	test_fun2
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu softvfp
 462              	test_fun2:
 463              	.LVL34:
 464              	.LFB2:
 134:sign.c        **** 
 135:sign.c        **** 
 136:sign.c        **** void test_fun2(uint8_t *p){
 465              		.loc 1 136 27 is_stmt 1 view -0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 18776
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 137:sign.c        **** 	stream256_state state;
 469              		.loc 1 137 2 view .LVU158
 138:sign.c        **** 	uint8_t buf[136*136],seed[64];
 470              		.loc 1 138 2 view .LVU159
 139:sign.c        **** 	size_t len=136;
 471              		.loc 1 139 2 view .LVU160
 140:sign.c        **** 	seed[0]=17;
 472              		.loc 1 140 2 view .LVU161
 141:sign.c        **** 	seed[10]=17;
 473              		.loc 1 141 2 view .LVU162
 142:sign.c        **** 	seed[20]=17;
 474              		.loc 1 142 2 view .LVU163
 143:sign.c        **** 	seed[30]=17;
 475              		.loc 1 143 2 view .LVU164
 144:sign.c        **** 	seed[50]=17;
 476              		.loc 1 144 2 view .LVU165
 145:sign.c        **** 	seed[17]=17;
 477              		.loc 1 145 2 view .LVU166
 146:sign.c        **** 	
 147:sign.c        **** 	for(int i=0; i < 64;i++)
 478              		.loc 1 147 2 view .LVU167
 479              	.LBB5:
 480              		.loc 1 147 6 view .LVU168
 481              		.loc 1 147 15 view .LVU169
 482              	.LBE5:
 136:sign.c        **** 	stream256_state state;
 483              		.loc 1 136 27 is_stmt 0 view .LVU170
 484 0000 10B5     		push	{r4, lr}
 485              	.LCFI7:
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 4, -8
 488              		.cfi_offset 14, -4
 489 0002 ADF5924D 		sub	sp, sp, #18688
 490              	.LCFI8:
 491              		.cfi_def_cfa_offset 18696
 492 0006 96B0     		sub	sp, sp, #88
 493              	.LCFI9:
 494              		.cfi_def_cfa_offset 18784
 136:sign.c        **** 	stream256_state state;
 495              		.loc 1 136 27 view .LVU171
 496 0008 0446     		mov	r4, r0
 497              	.LBB6:
 148:sign.c        **** 		seed[i] = 17;
 498              		.loc 1 148 11 view .LVU172
 499 000a 4022     		movs	r2, #64
 500 000c 1121     		movs	r1, #17
 501 000e 02A8     		add	r0, sp, #8
 502              	.LVL35:
 503              		.loc 1 148 11 view .LVU173
 504 0010 FFF7FEFF 		bl	memset
 505              	.LVL36:
 506              		.loc 1 148 11 view .LVU174
 507              	.LBE6:
 149:sign.c        **** 	/* uint64_t s_inc[26]; */
 150:sign.c        **** 	stream256_init(&state, seed, 0);
 508              		.loc 1 150 2 is_stmt 1 view .LVU175
 509 0014 12AB     		add	r3, sp, #72
 510 0016 1846     		mov	r0, r3
 511 0018 02A9     		add	r1, sp, #8
 512 001a 0022     		movs	r2, #0
 513 001c 0193     		str	r3, [sp, #4]
 514 001e FFF7FEFF 		bl	pqcrystals_dilithium_dilithium_shake256_stream_init
 515              	.LVL37:
 151:sign.c        **** 	buf[0]=17;
 516              		.loc 1 151 2 view .LVU176
 152:sign.c        **** 	buf[1]=17;
 517              		.loc 1 152 2 view .LVU177
 153:sign.c        **** 	buf[2]=17;
 518              		.loc 1 153 2 view .LVU178
 154:sign.c        **** 	buf[3]=17;
 519              		.loc 1 154 2 view .LVU179
 155:sign.c        **** 	buf[4]=17;
 520              		.loc 1 155 2 view .LVU180
 156:sign.c        **** 	buf[5]=17;
 521              		.loc 1 156 2 view .LVU181
 157:sign.c        **** 	buf[6]=17;
 522              		.loc 1 157 2 view .LVU182
 158:sign.c        **** 	buf[7]=17;
 523              		.loc 1 158 2 view .LVU183
 159:sign.c        **** 	for(int ii=0; ii < 136 ;ii++){
 524              		.loc 1 159 2 view .LVU184
 525              	.LBB7:
 526              		.loc 1 159 6 view .LVU185
 527              		.loc 1 159 16 view .LVU186
 160:sign.c        **** 		buf[ii] = 17;
 528              		.loc 1 160 11 is_stmt 0 view .LVU187
 529 0022 8822     		movs	r2, #136
 530 0024 1121     		movs	r1, #17
 531 0026 46A8     		add	r0, sp, #280
 532 0028 FFF7FEFF 		bl	memset
 533              	.LVL38:
 534              		.loc 1 160 11 view .LVU188
 535              	.LBE7:
 161:sign.c        **** 	}
 162:sign.c        **** 	trigger_high();
 536              		.loc 1 162 2 is_stmt 1 view .LVU189
 537 002c FFF7FEFF 		bl	trigger_high
 538              	.LVL39:
 163:sign.c        **** 	stream256_squeezeblocks(buf,136,&state);
 539              		.loc 1 163 2 view .LVU190
 540 0030 019A     		ldr	r2, [sp, #4]
 541 0032 44F64001 		movw	r1, #18496
 542 0036 46A8     		add	r0, sp, #280
 543 0038 FFF7FEFF 		bl	shake256_inc_squeeze
 544              	.LVL40:
 164:sign.c        **** 	trigger_low();
 545              		.loc 1 164 2 view .LVU191
 546 003c FFF7FEFF 		bl	trigger_low
 547              	.LVL41:
 165:sign.c        **** 	
 166:sign.c        **** 	for(int kk=0; kk < 136 ;kk++)
 548              		.loc 1 166 2 view .LVU192
 549              	.LBB8:
 550              		.loc 1 166 6 view .LVU193
 551              		.loc 1 166 16 view .LVU194
 167:sign.c        **** 		p[kk] = buf[kk];
 552              		.loc 1 167 9 is_stmt 0 view .LVU195
 553 0040 8822     		movs	r2, #136
 554 0042 46A9     		add	r1, sp, #280
 555 0044 2046     		mov	r0, r4
 556 0046 FFF7FEFF 		bl	memcpy
 557              	.LVL42:
 558              		.loc 1 167 9 view .LVU196
 559              	.LBE8:
 168:sign.c        **** }
 560              		.loc 1 168 1 view .LVU197
 561 004a 0DF5924D 		add	sp, sp, #18688
 562 004e 16B0     		add	sp, sp, #88
 563              	.LCFI10:
 564              		.cfi_def_cfa_offset 8
 565              		@ sp needed
 566 0050 10BD     		pop	{r4, pc}
 567              		.loc 1 168 1 view .LVU198
 568              		.cfi_endproc
 569              	.LFE2:
 571              		.section	.text.test_fun3,"ax",%progbits
 572              		.align	1
 573              		.global	test_fun3
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 577              		.fpu softvfp
 579              	test_fun3:
 580              	.LVL43:
 581              	.LFB3:
 169:sign.c        **** 
 170:sign.c        **** 
 171:sign.c        **** void test_fun3(uint8_t *p,uint8_t *seed){
 582              		.loc 1 171 41 is_stmt 1 view -0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 18704
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 172:sign.c        **** 	stream256_state state;
 586              		.loc 1 172 2 view .LVU200
 173:sign.c        **** 	uint8_t buf[136*136];
 587              		.loc 1 173 2 view .LVU201
 174:sign.c        **** 	size_t len=136;
 588              		.loc 1 174 2 view .LVU202
 175:sign.c        **** 	
 176:sign.c        **** 	
 177:sign.c        **** 
 178:sign.c        **** 	stream256_init(&state, seed, 0);
 589              		.loc 1 178 2 view .LVU203
 171:sign.c        **** 	stream256_state state;
 590              		.loc 1 171 41 is_stmt 0 view .LVU204
 591 0000 10B5     		push	{r4, lr}
 592              	.LCFI11:
 593              		.cfi_def_cfa_offset 8
 594              		.cfi_offset 4, -8
 595              		.cfi_offset 14, -4
 596 0002 ADF5924D 		sub	sp, sp, #18688
 597              	.LCFI12:
 598              		.cfi_def_cfa_offset 18696
 599 0006 84B0     		sub	sp, sp, #16
 600              	.LCFI13:
 601              		.cfi_def_cfa_offset 18712
 171:sign.c        **** 	stream256_state state;
 602              		.loc 1 171 41 view .LVU205
 603 0008 0446     		mov	r4, r0
 604              		.loc 1 178 2 view .LVU206
 605 000a 0022     		movs	r2, #0
 606 000c 6846     		mov	r0, sp
 607              	.LVL44:
 608              		.loc 1 178 2 view .LVU207
 609 000e FFF7FEFF 		bl	pqcrystals_dilithium_dilithium_shake256_stream_init
 610              	.LVL45:
 179:sign.c        **** 	
 180:sign.c        **** 	for(int ii=0; ii < 136 ;ii++){
 611              		.loc 1 180 2 is_stmt 1 view .LVU208
 612              	.LBB9:
 613              		.loc 1 180 6 view .LVU209
 614              		.loc 1 180 16 view .LVU210
 181:sign.c        **** 		buf[ii] = 17;
 615              		.loc 1 181 11 is_stmt 0 view .LVU211
 616 0012 8822     		movs	r2, #136
 617 0014 1121     		movs	r1, #17
 618 0016 34A8     		add	r0, sp, #208
 619 0018 FFF7FEFF 		bl	memset
 620              	.LVL46:
 621              		.loc 1 181 11 view .LVU212
 622              	.LBE9:
 182:sign.c        **** 	}
 183:sign.c        **** 	trigger_high();
 623              		.loc 1 183 2 is_stmt 1 view .LVU213
 624 001c FFF7FEFF 		bl	trigger_high
 625              	.LVL47:
 184:sign.c        **** 	stream256_squeezeblocks(buf,136,&state);
 626              		.loc 1 184 2 view .LVU214
 627 0020 6A46     		mov	r2, sp
 628 0022 44F64001 		movw	r1, #18496
 629 0026 34A8     		add	r0, sp, #208
 630 0028 FFF7FEFF 		bl	shake256_inc_squeeze
 631              	.LVL48:
 185:sign.c        **** 	trigger_low();
 632              		.loc 1 185 2 view .LVU215
 633 002c FFF7FEFF 		bl	trigger_low
 634              	.LVL49:
 186:sign.c        **** 	
 187:sign.c        **** 	for(int kk=0; kk < 136 ;kk++)
 635              		.loc 1 187 2 view .LVU216
 636              	.LBB10:
 637              		.loc 1 187 6 view .LVU217
 638              		.loc 1 187 16 view .LVU218
 188:sign.c        **** 		p[kk] = buf[kk];
 639              		.loc 1 188 9 is_stmt 0 view .LVU219
 640 0030 8822     		movs	r2, #136
 641 0032 34A9     		add	r1, sp, #208
 642 0034 2046     		mov	r0, r4
 643 0036 FFF7FEFF 		bl	memcpy
 644              	.LVL50:
 645              		.loc 1 188 9 view .LVU220
 646              	.LBE10:
 189:sign.c        **** }
 647              		.loc 1 189 1 view .LVU221
 648 003a 0DF5924D 		add	sp, sp, #18688
 649 003e 04B0     		add	sp, sp, #16
 650              	.LCFI14:
 651              		.cfi_def_cfa_offset 8
 652              		@ sp needed
 653 0040 10BD     		pop	{r4, pc}
 654              		.loc 1 189 1 view .LVU222
 655              		.cfi_endproc
 656              	.LFE3:
 658              		.section	.text.crypto_sign_signature,"ax",%progbits
 659              		.align	1
 660              		.global	crypto_sign_signature
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu softvfp
 666              	crypto_sign_signature:
 667              	.LVL51:
 668              	.LFB4:
 190:sign.c        **** /*************************************************
 191:sign.c        **** * Name:        crypto_sign_signature
 192:sign.c        **** *
 193:sign.c        **** * Description: Computes signature.
 194:sign.c        **** *
 195:sign.c        **** * Arguments:   - uint8_t *sig:   pointer to output signature (of length CRYPTO_BYTES)
 196:sign.c        **** *              - size_t *siglen: pointer to output length of signature
 197:sign.c        **** *              - uint8_t *m:     pointer to message to be signed
 198:sign.c        **** *              - size_t mlen:    length of message
 199:sign.c        **** *              - uint8_t *sk:    pointer to bit-packed secret key
 200:sign.c        **** *
 201:sign.c        **** * Returns 0 (success)
 202:sign.c        **** **************************************************/
 203:sign.c        **** int crypto_sign_signature(uint8_t *sig,
 204:sign.c        ****                           size_t *siglen,
 205:sign.c        ****                           const uint8_t *m,
 206:sign.c        ****                           size_t mlen,
 207:sign.c        ****                           const uint8_t *sk,uint8_t *p)
 208:sign.c        **** {
 669              		.loc 1 208 1 is_stmt 1 view -0
 670              		.cfi_startproc
 671              		@ args = 8, pretend = 0, frame = 48136
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 209:sign.c        ****   uint8_t seedbuf[2 * SEEDBYTES + TRBYTES + RNDBYTES + 2 * CRHBYTES];
 673              		.loc 1 209 3 view .LVU224
 210:sign.c        ****   uint8_t *rho, *tr, *key, *mu, *rhoprime, *rnd;
 674              		.loc 1 210 3 view .LVU225
 211:sign.c        ****   uint16_t nonce = 0;
 675              		.loc 1 211 3 view .LVU226
 212:sign.c        ****   unsigned int n;
 676              		.loc 1 212 3 view .LVU227
 213:sign.c        ****   polyvecl mat[K], y, z;
 677              		.loc 1 213 3 view .LVU228
 214:sign.c        ****   polyveck t0, w1, w0;
 678              		.loc 1 214 3 view .LVU229
 215:sign.c        ****   poly cp;
 679              		.loc 1 215 3 view .LVU230
 216:sign.c        ****   shake256incctx state;
 680              		.loc 1 216 3 view .LVU231
 217:sign.c        **** 
 218:sign.c        ****   smallpoly s1_prime[L];
 681              		.loc 1 218 3 view .LVU232
 219:sign.c        ****   smallpoly s2_prime[K];
 682              		.loc 1 219 3 view .LVU233
 220:sign.c        ****   smallpoly cp_small;
 683              		.loc 1 220 3 view .LVU234
 221:sign.c        ****   smallhalfpoly cp_small_prime;
 684              		.loc 1 221 3 view .LVU235
 222:sign.c        **** 
 223:sign.c        ****   rho = seedbuf;
 685              		.loc 1 223 3 view .LVU236
 208:sign.c        ****   uint8_t seedbuf[2 * SEEDBYTES + TRBYTES + RNDBYTES + 2 * CRHBYTES];
 686              		.loc 1 208 1 is_stmt 0 view .LVU237
 687 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 688              	.LCFI15:
 689              		.cfi_def_cfa_offset 36
 690              		.cfi_offset 4, -36
 691              		.cfi_offset 5, -32
 692              		.cfi_offset 6, -28
 693              		.cfi_offset 7, -24
 694              		.cfi_offset 8, -20
 695              		.cfi_offset 9, -16
 696              		.cfi_offset 10, -12
 697              		.cfi_offset 11, -8
 698              		.cfi_offset 14, -4
 699 0004 ADF53C4D 		sub	sp, sp, #48128
 700              	.LCFI16:
 701              		.cfi_def_cfa_offset 48164
 702 0008 87B0     		sub	sp, sp, #28
 703              	.LCFI17:
 704              		.cfi_def_cfa_offset 48192
 705              	.LVL52:
 224:sign.c        ****   tr = rho + SEEDBYTES;
 706              		.loc 1 224 3 is_stmt 1 view .LVU238
 225:sign.c        ****   key = tr + TRBYTES;
 707              		.loc 1 225 3 view .LVU239
 226:sign.c        ****   rnd = key + SEEDBYTES;
 708              		.loc 1 226 3 view .LVU240
 227:sign.c        ****   mu = rnd + RNDBYTES;
 709              		.loc 1 227 3 view .LVU241
 228:sign.c        ****   rhoprime = mu + CRHBYTES;
 710              		.loc 1 228 3 view .LVU242
 229:sign.c        ****   unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 711              		.loc 1 229 3 view .LVU243
 208:sign.c        ****   uint8_t seedbuf[2 * SEEDBYTES + TRBYTES + RNDBYTES + 2 * CRHBYTES];
 712              		.loc 1 208 1 is_stmt 0 view .LVU244
 713 000a 1E46     		mov	r6, r3
 714              		.loc 1 229 3 view .LVU245
 715 000c 0DF53C43 		add	r3, sp, #48128
 716              	.LVL53:
 717              		.loc 1 229 3 view .LVU246
 718 0010 4033     		adds	r3, r3, #64
 719 0012 0DF5D849 		add	r9, sp, #27648
 720 0016 1B68     		ldr	r3, [r3]
 721 0018 0293     		str	r3, [sp, #8]
 722 001a 0DF5B847 		add	r7, sp, #23552
 723 001e 0DF5AC78 		add	r8, sp, #344
 724              	.LVL54:
 725              		.loc 1 229 3 view .LVU247
 726 0022 09F11809 		add	r9, r9, #24
 727 0026 1837     		adds	r7, r7, #24
 728 0028 0DF53053 		add	r3, sp, #11264
 729 002c 1833     		adds	r3, r3, #24
 208:sign.c        ****   uint8_t seedbuf[2 * SEEDBYTES + TRBYTES + RNDBYTES + 2 * CRHBYTES];
 730              		.loc 1 208 1 view .LVU248
 731 002e 0491     		str	r1, [sp, #16]
 732 0030 1446     		mov	r4, r2
 733              		.loc 1 229 3 view .LVU249
 734 0032 46A9     		add	r1, sp, #280
 735              	.LVL55:
 736              		.loc 1 229 3 view .LVU250
 737 0034 4246     		mov	r2, r8
 738              	.LVL56:
 208:sign.c        ****   uint8_t seedbuf[2 * SEEDBYTES + TRBYTES + RNDBYTES + 2 * CRHBYTES];
 739              		.loc 1 208 1 view .LVU251
 740 0036 0546     		mov	r5, r0
 741              		.loc 1 229 3 view .LVU252
 742 0038 CDF80490 		str	r9, [sp, #4]
 743 003c 3EA8     		add	r0, sp, #248
 744              	.LVL57:
 745              		.loc 1 229 3 view .LVU253
 746 003e 0097     		str	r7, [sp]
 747 0040 FFF7FEFF 		bl	pqcrystals_dilithium_unpack_sk
 748              	.LVL58:
 230:sign.c        **** 
 231:sign.c        ****   /* Compute mu = CRH(tr, msg) */
 232:sign.c        ****   shake256_inc_init(&state);
 749              		.loc 1 232 3 is_stmt 1 view .LVU254
 750 0044 0AA8     		add	r0, sp, #40
 751 0046 FFF7FEFF 		bl	shake256_inc_init
 752              	.LVL59:
 233:sign.c        ****   shake256_inc_absorb(&state, tr, TRBYTES);
 753              		.loc 1 233 3 view .LVU255
 754 004a 4022     		movs	r2, #64
 755 004c 46A9     		add	r1, sp, #280
 756              	.LVL60:
 757              		.loc 1 233 3 is_stmt 0 view .LVU256
 758 004e 0AA8     		add	r0, sp, #40
 759 0050 FFF7FEFF 		bl	shake256_inc_absorb
 760              	.LVL61:
 234:sign.c        ****   shake256_inc_absorb(&state, m, mlen);
 761              		.loc 1 234 3 is_stmt 1 view .LVU257
 762 0054 3246     		mov	r2, r6
 763 0056 2146     		mov	r1, r4
 764 0058 0AA8     		add	r0, sp, #40
 765 005a FFF7FEFF 		bl	shake256_inc_absorb
 766              	.LVL62:
 235:sign.c        ****   shake256_inc_finalize(&state);
 767              		.loc 1 235 3 view .LVU258
 768 005e 0AA8     		add	r0, sp, #40
 769 0060 FFF7FEFF 		bl	shake256_inc_finalize
 770              	.LVL63:
 236:sign.c        ****   shake256_inc_squeeze(mu, CRHBYTES, &state);
 771              		.loc 1 236 3 view .LVU259
 772 0064 0AAA     		add	r2, sp, #40
 773 0066 4021     		movs	r1, #64
 774 0068 66A8     		add	r0, sp, #408
 775              	.LVL64:
 776              		.loc 1 236 3 is_stmt 0 view .LVU260
 777 006a FFF7FEFF 		bl	shake256_inc_squeeze
 778              	.LVL65:
 237:sign.c        **** 
 238:sign.c        ****   for (n = 0; n < RNDBYTES; n++) {
 779              		.loc 1 238 3 is_stmt 1 view .LVU261
 780              		.loc 1 238 15 view .LVU262
 239:sign.c        ****      rnd[n] = 0;
 781              		.loc 1 239 13 is_stmt 0 view .LVU263
 782 006e 2022     		movs	r2, #32
 783 0070 0021     		movs	r1, #0
 784 0072 5EA8     		add	r0, sp, #376
 785              	.LVL66:
 786              		.loc 1 239 13 view .LVU264
 787 0074 FFF7FEFF 		bl	memset
 788              	.LVL67:
 240:sign.c        ****   }
 241:sign.c        ****   
 242:sign.c        ****   shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 789              		.loc 1 242 3 is_stmt 1 view .LVU265
 790 0078 8023     		movs	r3, #128
 791 007a 4246     		mov	r2, r8
 792 007c 4021     		movs	r1, #64
 793 007e 76A8     		add	r0, sp, #472
 794              	.LVL68:
 795              		.loc 1 242 3 is_stmt 0 view .LVU266
 796 0080 FFF7FEFF 		bl	shake256
 797              	.LVL69:
 243:sign.c        ****   
 244:sign.c        ****   /* Expand matrix and transform vectors */
 245:sign.c        ****   polyvec_matrix_expand(mat, rho);
 798              		.loc 1 245 3 is_stmt 1 view .LVU267
 799 0084 0DF5F840 		add	r0, sp, #31744
 800 0088 3EA9     		add	r1, sp, #248
 801              	.LVL70:
 802              		.loc 1 245 3 is_stmt 0 view .LVU268
 803 008a 1830     		adds	r0, r0, #24
 804 008c FFF7FEFF 		bl	pqcrystals_dilithium_polyvec_matrix_expand
 805              	.LVL71:
 246:sign.c        ****   polyvecl_small_ntt(s1_prime);
 806              		.loc 1 246 3 is_stmt 1 view .LVU269
 807 0090 3846     		mov	r0, r7
 808 0092 FFF7FEFF 		bl	polyvecl_small_ntt
 809              	.LVL72:
 247:sign.c        ****   polyveck_small_ntt(s2_prime);
 810              		.loc 1 247 3 view .LVU270
 811 0096 4846     		mov	r0, r9
 812 0098 FFF7FEFF 		bl	polyveck_small_ntt
 813              	.LVL73:
 248:sign.c        **** 
 249:sign.c        ****   polyveck_ntt(&t0);
 814              		.loc 1 249 3 view .LVU271
 815 009c 0DF53050 		add	r0, sp, #11264
 816 00a0 1830     		adds	r0, r0, #24
 817 00a2 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_ntt
 818              	.LVL74:
 250:sign.c        **** 
 251:sign.c        **** rej:
 252:sign.c        ****   /* Sample intermediate vector y */
 253:sign.c        ****   //trigger_high();
 254:sign.c        ****   polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
 255:sign.c        ****   //trigger_low();
 256:sign.c        ****   /* Matrix-vector multiplication */
 257:sign.c        ****   z = y;
 258:sign.c        ****   polyvecl_ntt(&z);
 259:sign.c        ****   polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 260:sign.c        ****   polyveck_reduce(&w1);
 261:sign.c        ****   polyveck_invntt_tomont(&w1);
 262:sign.c        **** 
 263:sign.c        ****   /* Decompose w and call the random oracle */
 264:sign.c        ****   polyveck_caddq(&w1);
 265:sign.c        ****   polyveck_decompose(&w1, &w0, &w1);
 266:sign.c        ****   polyveck_pack_w1(sig, &w1);
 267:sign.c        **** 
 268:sign.c        ****   shake256_inc_init(&state);
 269:sign.c        ****   shake256_inc_absorb(&state, mu, CRHBYTES);
 270:sign.c        ****   shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 271:sign.c        ****   shake256_inc_finalize(&state);
 272:sign.c        ****   shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 273:sign.c        ****   poly_challenge(&cp, sig);
 274:sign.c        ****   
 275:sign.c        ****   poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 276:sign.c        ****   poly_ntt(&cp);
 277:sign.c        **** 
 278:sign.c        ****   /* Compute z, reject if it reveals secret */
 279:sign.c        ****   polyvecl_small_basemul_invntt(&z, &cp_small, &cp_small_prime, s1_prime);
 280:sign.c        **** 
 281:sign.c        ****   polyvecl_add(&z, &z, &y);
 282:sign.c        ****   polyvecl_reduce(&z);
 283:sign.c        ****   if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 284:sign.c        ****     goto rej;
 285:sign.c        **** 
 286:sign.c        **** 
 287:sign.c        ****   /* Write signature */
 288:sign.c        ****   pack_sig_z(sig, &z);
 289:sign.c        ****   unsigned int hint_n = 0;
 290:sign.c        ****   unsigned int hints_written = 0;
 819              		.loc 1 290 16 is_stmt 0 view .LVU272
 820 00a6 09AB     		add	r3, sp, #36
 249:sign.c        **** 
 821              		.loc 1 249 3 view .LVU273
 822 00a8 4FF00008 		mov	r8, #0
 823              	.LVL75:
 824              		.loc 1 290 16 view .LVU274
 825 00ac 0793     		str	r3, [sp, #28]
 826              	.LVL76:
 827              	.L15:
 254:sign.c        ****   //trigger_low();
 828              		.loc 1 254 3 is_stmt 1 view .LVU275
 254:sign.c        ****   //trigger_low();
 829              		.loc 1 254 3 is_stmt 0 view .LVU276
 830 00ae 1FFA88F2 		uxth	r2, r8
 831 00b2 76A9     		add	r1, sp, #472
 832              	.LVL77:
 254:sign.c        ****   //trigger_low();
 833              		.loc 1 254 3 view .LVU277
 834 00b4 0DF61840 		addw	r0, sp, #3096
 835 00b8 FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_uniform_gamma1
 836              	.LVL78:
 257:sign.c        ****   polyvecl_ntt(&z);
 837              		.loc 1 257 3 is_stmt 1 view .LVU278
 257:sign.c        ****   polyvecl_ntt(&z);
 838              		.loc 1 257 5 is_stmt 0 view .LVU279
 839 00bc 0DF5E050 		add	r0, sp, #7168
 840 00c0 4FF48052 		mov	r2, #4096
 841 00c4 0DF61841 		addw	r1, sp, #3096
 842 00c8 1830     		adds	r0, r0, #24
 843 00ca FFF7FEFF 		bl	memcpy
 844              	.LVL79:
 258:sign.c        ****   polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 845              		.loc 1 258 3 is_stmt 1 view .LVU280
 846 00ce 0DF5E050 		add	r0, sp, #7168
 847 00d2 1830     		adds	r0, r0, #24
 848 00d4 FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_ntt
 849              	.LVL80:
 259:sign.c        ****   polyveck_reduce(&w1);
 850              		.loc 1 259 3 view .LVU281
 851 00d8 0DF5E052 		add	r2, sp, #7168
 852 00dc 0DF5F841 		add	r1, sp, #31744
 853 00e0 0DF57050 		add	r0, sp, #15360
 854 00e4 1832     		adds	r2, r2, #24
 855 00e6 1831     		adds	r1, r1, #24
 856 00e8 1830     		adds	r0, r0, #24
 857 00ea FFF7FEFF 		bl	pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery
 858              	.LVL81:
 260:sign.c        ****   polyveck_invntt_tomont(&w1);
 859              		.loc 1 260 3 view .LVU282
 860 00ee 0DF57050 		add	r0, sp, #15360
 861 00f2 1830     		adds	r0, r0, #24
 862 00f4 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_reduce
 863              	.LVL82:
 261:sign.c        **** 
 864              		.loc 1 261 3 view .LVU283
 865 00f8 0DF57050 		add	r0, sp, #15360
 866 00fc 1830     		adds	r0, r0, #24
 867 00fe FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_invntt_tomont
 868              	.LVL83:
 264:sign.c        ****   polyveck_decompose(&w1, &w0, &w1);
 869              		.loc 1 264 3 view .LVU284
 870 0102 0DF57050 		add	r0, sp, #15360
 871 0106 1830     		adds	r0, r0, #24
 872 0108 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_caddq
 873              	.LVL84:
 265:sign.c        ****   polyveck_pack_w1(sig, &w1);
 874              		.loc 1 265 3 view .LVU285
 875 010c 0DF57052 		add	r2, sp, #15360
 876 0110 1832     		adds	r2, r2, #24
 877 0112 0DF59841 		add	r1, sp, #19456
 878 0116 1046     		mov	r0, r2
 879 0118 1831     		adds	r1, r1, #24
 880 011a FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_decompose
 881              	.LVL85:
 266:sign.c        **** 
 882              		.loc 1 266 3 view .LVU286
 883 011e 0DF57051 		add	r1, sp, #15360
 884 0122 1831     		adds	r1, r1, #24
 885 0124 2846     		mov	r0, r5
 886 0126 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_pack_w1
 887              	.LVL86:
 268:sign.c        ****   shake256_inc_absorb(&state, mu, CRHBYTES);
 888              		.loc 1 268 3 view .LVU287
 889 012a 0AA8     		add	r0, sp, #40
 890 012c FFF7FEFF 		bl	shake256_inc_init
 891              	.LVL87:
 269:sign.c        ****   shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 892              		.loc 1 269 3 view .LVU288
 893 0130 4022     		movs	r2, #64
 894 0132 66A9     		add	r1, sp, #408
 895              	.LVL88:
 269:sign.c        ****   shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 896              		.loc 1 269 3 is_stmt 0 view .LVU289
 897 0134 0AA8     		add	r0, sp, #40
 898 0136 FFF7FEFF 		bl	shake256_inc_absorb
 899              	.LVL89:
 270:sign.c        ****   shake256_inc_finalize(&state);
 900              		.loc 1 270 3 is_stmt 1 view .LVU290
 901 013a 4FF44072 		mov	r2, #768
 902 013e 2946     		mov	r1, r5
 903 0140 0AA8     		add	r0, sp, #40
 904 0142 FFF7FEFF 		bl	shake256_inc_absorb
 905              	.LVL90:
 271:sign.c        ****   shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 906              		.loc 1 271 3 view .LVU291
 907 0146 0AA8     		add	r0, sp, #40
 908 0148 FFF7FEFF 		bl	shake256_inc_finalize
 909              	.LVL91:
 272:sign.c        ****   poly_challenge(&cp, sig);
 910              		.loc 1 272 3 view .LVU292
 911 014c 0AAA     		add	r2, sp, #40
 912 014e 2021     		movs	r1, #32
 913 0150 2846     		mov	r0, r5
 914 0152 FFF7FEFF 		bl	shake256_inc_squeeze
 915              	.LVL92:
 273:sign.c        ****   
 916              		.loc 1 273 3 view .LVU293
 275:sign.c        ****   poly_ntt(&cp);
 917              		.loc 1 275 3 is_stmt 0 view .LVU294
 918 0156 0DF5067B 		add	fp, sp, #536
 273:sign.c        ****   
 919              		.loc 1 273 3 view .LVU295
 920 015a 2946     		mov	r1, r5
 921 015c 0DF58360 		add	r0, sp, #1048
 275:sign.c        ****   poly_ntt(&cp);
 922              		.loc 1 275 3 view .LVU296
 923 0160 0DF6180A 		addw	r10, sp, #2072
 273:sign.c        ****   
 924              		.loc 1 273 3 view .LVU297
 925 0164 FFF7FEFF 		bl	pqcrystals_dilithium_poly_challenge
 926              	.LVL93:
 275:sign.c        ****   poly_ntt(&cp);
 927              		.loc 1 275 3 is_stmt 1 view .LVU298
 928 0168 0DF58362 		add	r2, sp, #1048
 929 016c 5946     		mov	r1, fp
 930 016e 5046     		mov	r0, r10
 931 0170 FFF7FEFF 		bl	poly_small_ntt_precomp
 932              	.LVL94:
 276:sign.c        **** 
 933              		.loc 1 276 3 view .LVU299
 934 0174 0DF58360 		add	r0, sp, #1048
 935 0178 FFF7FEFF 		bl	pqcrystals_dilithium_poly_ntt
 936              	.LVL95:
 279:sign.c        **** 
 937              		.loc 1 279 3 view .LVU300
 938 017c 0DF5B843 		add	r3, sp, #23552
 939 0180 0DF5E050 		add	r0, sp, #7168
 940 0184 1833     		adds	r3, r3, #24
 941 0186 5A46     		mov	r2, fp
 942 0188 5146     		mov	r1, r10
 943 018a 1830     		adds	r0, r0, #24
 944 018c FFF7FEFF 		bl	polyvecl_small_basemul_invntt
 945              	.LVL96:
 281:sign.c        ****   polyvecl_reduce(&z);
 946              		.loc 1 281 3 view .LVU301
 947 0190 0DF5E051 		add	r1, sp, #7168
 948 0194 1831     		adds	r1, r1, #24
 949 0196 0846     		mov	r0, r1
 950 0198 0DF61842 		addw	r2, sp, #3096
 951 019c FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_add
 952              	.LVL97:
 282:sign.c        ****   if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 953              		.loc 1 282 3 view .LVU302
 954 01a0 0DF5E050 		add	r0, sp, #7168
 955 01a4 1830     		adds	r0, r0, #24
 956 01a6 FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_reduce
 957              	.LVL98:
 283:sign.c        ****     goto rej;
 958              		.loc 1 283 3 view .LVU303
 283:sign.c        ****     goto rej;
 959              		.loc 1 283 6 is_stmt 0 view .LVU304
 960 01aa 0DF5E050 		add	r0, sp, #7168
 961 01ae 4049     		ldr	r1, .L19
 962 01b0 1830     		adds	r0, r0, #24
 963 01b2 FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_chknorm
 964              	.LVL99:
 283:sign.c        ****     goto rej;
 965              		.loc 1 283 5 view .LVU305
 966 01b6 0446     		mov	r4, r0
 967 01b8 0028     		cmp	r0, #0
 968 01ba 76D1     		bne	.L16
 288:sign.c        ****   unsigned int hint_n = 0;
 969              		.loc 1 288 3 is_stmt 1 view .LVU306
 970 01bc 0DF5E051 		add	r1, sp, #7168
 971 01c0 1831     		adds	r1, r1, #24
 972 01c2 2846     		mov	r0, r5
 973 01c4 FFF7FEFF 		bl	pqcrystals_dilithium_pack_sig_z
 974              	.LVL100:
 289:sign.c        ****   unsigned int hints_written = 0;
 975              		.loc 1 289 3 view .LVU307
 976              		.loc 1 290 3 view .LVU308
 977              		.loc 1 290 16 is_stmt 0 view .LVU309
 978 01c8 079B     		ldr	r3, [sp, #28]
 979              	.LBB11:
 980              	.LBB12:
 291:sign.c        ****   /* Check that subtracting cs2 does not change high bits of w and low bits
 292:sign.c        ****    * do not reveal secret information */
 293:sign.c        ****   for(unsigned int i = 0; i < K; ++i) {
 294:sign.c        ****     poly *tmp = &z.vec[0];
 295:sign.c        ****     poly_small_basemul_invntt(tmp, &cp_small, &cp_small_prime, &s2_prime[i]);
 981              		.loc 1 295 5 view .LVU310
 982 01ca CDE905BA 		strd	fp, r10, [sp, #20]
 983              	.LBE12:
 984              	.LBE11:
 290:sign.c        ****   /* Check that subtracting cs2 does not change high bits of w and low bits
 985              		.loc 1 290 16 view .LVU311
 986 01ce 1C60     		str	r4, [r3]
 293:sign.c        ****     poly *tmp = &z.vec[0];
 987              		.loc 1 293 3 is_stmt 1 view .LVU312
 988              	.LBB15:
 293:sign.c        ****     poly *tmp = &z.vec[0];
 989              		.loc 1 293 7 view .LVU313
 990              	.LVL101:
 293:sign.c        ****     poly *tmp = &z.vec[0];
 991              		.loc 1 293 27 view .LVU314
 293:sign.c        ****     poly *tmp = &z.vec[0];
 992              		.loc 1 293 20 is_stmt 0 view .LVU315
 993 01d0 2646     		mov	r6, r4
 994              	.LBE15:
 289:sign.c        ****   unsigned int hints_written = 0;
 995              		.loc 1 289 16 view .LVU316
 996 01d2 2746     		mov	r7, r4
 997              	.LVL102:
 998              	.L17:
 999              	.LBB16:
 1000              	.LBB13:
 294:sign.c        ****     poly_small_basemul_invntt(tmp, &cp_small, &cp_small_prime, &s2_prime[i]);
 1001              		.loc 1 294 5 is_stmt 1 view .LVU317
 1002              		.loc 1 295 5 view .LVU318
 1003 01d4 0DF5E050 		add	r0, sp, #7168
 1004 01d8 DDE90521 		ldrd	r2, r1, [sp, #20]
 1005 01dc 09EB0403 		add	r3, r9, r4
 1006 01e0 1830     		adds	r0, r0, #24
 1007 01e2 FFF7FEFF 		bl	poly_small_basemul_invntt
 1008              	.LVL103:
 296:sign.c        **** 
 297:sign.c        ****     poly_sub(&w0.vec[i], &w0.vec[i], tmp);
 1009              		.loc 1 297 5 view .LVU319
 1010 01e6 0DF59843 		add	r3, sp, #19456
 1011 01ea 1833     		adds	r3, r3, #24
 1012 01ec 03EB040B 		add	fp, r3, r4
 1013 01f0 0DF5E052 		add	r2, sp, #7168
 1014 01f4 5946     		mov	r1, fp
 1015 01f6 1832     		adds	r2, r2, #24
 1016 01f8 5846     		mov	r0, fp
 1017 01fa FFF7FEFF 		bl	pqcrystals_dilithium_poly_sub
 1018              	.LVL104:
 298:sign.c        ****     poly_reduce(&w0.vec[i]);
 1019              		.loc 1 298 5 view .LVU320
 1020 01fe 5846     		mov	r0, fp
 1021 0200 FFF7FEFF 		bl	pqcrystals_dilithium_poly_reduce
 1022              	.LVL105:
 299:sign.c        ****     if(poly_chknorm(&w0.vec[i], GAMMA2 - BETA))
 1023              		.loc 1 299 5 view .LVU321
 1024              		.loc 1 299 8 is_stmt 0 view .LVU322
 1025 0204 2B49     		ldr	r1, .L19+4
 1026 0206 5846     		mov	r0, fp
 1027 0208 FFF7FEFF 		bl	pqcrystals_dilithium_poly_chknorm
 1028              	.LVL106:
 1029              		.loc 1 299 7 view .LVU323
 1030 020c 0028     		cmp	r0, #0
 1031 020e 4CD1     		bne	.L16
 300:sign.c        ****       goto rej;
 301:sign.c        **** 
 302:sign.c        ****     /* Compute hints for w1 */
 303:sign.c        ****     poly_pointwise_montgomery(tmp, &cp, &t0.vec[i]);
 1032              		.loc 1 303 5 is_stmt 1 view .LVU324
 1033 0210 0DF53053 		add	r3, sp, #11264
 1034 0214 1833     		adds	r3, r3, #24
 1035 0216 0DF5E050 		add	r0, sp, #7168
 1036 021a 1A19     		adds	r2, r3, r4
 1037 021c 0DF58361 		add	r1, sp, #1048
 1038 0220 1830     		adds	r0, r0, #24
 1039 0222 FFF7FEFF 		bl	pqcrystals_dilithium_poly_pointwise_montgomery
 1040              	.LVL107:
 304:sign.c        **** 
 305:sign.c        ****     poly_invntt_tomont(tmp);
 1041              		.loc 1 305 5 view .LVU325
 1042 0226 0DF5E050 		add	r0, sp, #7168
 1043 022a 1830     		adds	r0, r0, #24
 1044 022c FFF7FEFF 		bl	pqcrystals_dilithium_poly_invntt_tomont
 1045              	.LVL108:
 306:sign.c        ****     poly_reduce(tmp);
 1046              		.loc 1 306 5 view .LVU326
 1047 0230 0DF5E050 		add	r0, sp, #7168
 1048 0234 1830     		adds	r0, r0, #24
 1049 0236 FFF7FEFF 		bl	pqcrystals_dilithium_poly_reduce
 1050              	.LVL109:
 307:sign.c        **** 
 308:sign.c        ****     if(poly_chknorm(tmp, GAMMA2))
 1051              		.loc 1 308 5 view .LVU327
 1052              		.loc 1 308 8 is_stmt 0 view .LVU328
 1053 023a 0DF5E050 		add	r0, sp, #7168
 1054 023e 4FF4BA31 		mov	r1, #95232
 1055 0242 1830     		adds	r0, r0, #24
 1056 0244 FFF7FEFF 		bl	pqcrystals_dilithium_poly_chknorm
 1057              	.LVL110:
 1058              		.loc 1 308 7 view .LVU329
 1059 0248 8246     		mov	r10, r0
 1060 024a 70BB     		cbnz	r0, .L16
 309:sign.c        ****       goto rej;
 310:sign.c        ****     poly_add(&w0.vec[i], &w0.vec[i], tmp);
 1061              		.loc 1 310 5 is_stmt 1 view .LVU330
 1062 024c 0DF5E052 		add	r2, sp, #7168
 1063 0250 1832     		adds	r2, r2, #24
 1064 0252 5946     		mov	r1, fp
 1065 0254 5846     		mov	r0, fp
 1066 0256 FFF7FEFF 		bl	pqcrystals_dilithium_poly_add
 1067              	.LVL111:
 311:sign.c        ****     hint_n += poly_make_hint(tmp, &w0.vec[i], &w1.vec[i]);
 1068              		.loc 1 311 5 view .LVU331
 1069              		.loc 1 311 15 is_stmt 0 view .LVU332
 1070 025a 0DF57053 		add	r3, sp, #15360
 1071 025e 1833     		adds	r3, r3, #24
 1072 0260 0DF5E050 		add	r0, sp, #7168
 1073 0264 1A19     		adds	r2, r3, r4
 1074 0266 5946     		mov	r1, fp
 1075 0268 1830     		adds	r0, r0, #24
 1076 026a FFF7FEFF 		bl	pqcrystals_dilithium_poly_make_hint
 1077              	.LVL112:
 1078              		.loc 1 311 12 view .LVU333
 1079 026e 0744     		add	r7, r7, r0
 1080              	.LVL113:
 312:sign.c        ****     if (hint_n > OMEGA) {
 1081              		.loc 1 312 5 is_stmt 1 view .LVU334
 1082              		.loc 1 312 8 is_stmt 0 view .LVU335
 1083 0270 502F     		cmp	r7, #80
 1084 0272 1AD8     		bhi	.L16
 313:sign.c        ****       goto rej;
 314:sign.c        ****     }
 315:sign.c        ****     pack_sig_h(sig, tmp, i, &hints_written);
 1085              		.loc 1 315 5 is_stmt 1 discriminator 2 view .LVU336
 1086 0274 0DF5E051 		add	r1, sp, #7168
 1087 0278 3246     		mov	r2, r6
 1088 027a 09AB     		add	r3, sp, #36
 1089 027c 1831     		adds	r1, r1, #24
 1090 027e 2846     		mov	r0, r5
 1091              	.LBE13:
 293:sign.c        ****     poly *tmp = &z.vec[0];
 1092              		.loc 1 293 34 is_stmt 0 discriminator 2 view .LVU337
 1093 0280 0136     		adds	r6, r6, #1
 1094              	.LVL114:
 1095              	.LBB14:
 1096              		.loc 1 315 5 discriminator 2 view .LVU338
 1097 0282 FFF7FEFF 		bl	pqcrystals_dilithium_pack_sig_h
 1098              	.LVL115:
 1099              		.loc 1 315 5 discriminator 2 view .LVU339
 1100              	.LBE14:
 293:sign.c        ****     poly *tmp = &z.vec[0];
 1101              		.loc 1 293 34 is_stmt 1 discriminator 2 view .LVU340
 293:sign.c        ****     poly *tmp = &z.vec[0];
 1102              		.loc 1 293 27 discriminator 2 view .LVU341
 293:sign.c        ****     poly *tmp = &z.vec[0];
 1103              		.loc 1 293 3 is_stmt 0 discriminator 2 view .LVU342
 1104 0286 042E     		cmp	r6, #4
 1105 0288 04F58064 		add	r4, r4, #1024
 1106 028c A2D1     		bne	.L17
 1107              	.LBE16:
 316:sign.c        ****   }
 317:sign.c        ****   pack_sig_h_zero(sig, &hints_written);
 1108              		.loc 1 317 3 is_stmt 1 view .LVU343
 1109 028e 2846     		mov	r0, r5
 1110 0290 09A9     		add	r1, sp, #36
 1111 0292 FFF7FEFF 		bl	pqcrystals_dilithium_pack_sig_h_zero
 1112              	.LVL116:
 318:sign.c        ****   *siglen = CRYPTO_BYTES;
 1113              		.loc 1 318 3 view .LVU344
 1114              		.loc 1 318 11 is_stmt 0 view .LVU345
 1115 0296 049A     		ldr	r2, [sp, #16]
 1116 0298 40F67413 		movw	r3, #2420
 319:sign.c        ****   return 0;
 320:sign.c        **** }
 1117              		.loc 1 320 1 view .LVU346
 1118 029c 5046     		mov	r0, r10
 318:sign.c        ****   *siglen = CRYPTO_BYTES;
 1119              		.loc 1 318 11 view .LVU347
 1120 029e 1360     		str	r3, [r2]
 319:sign.c        ****   return 0;
 1121              		.loc 1 319 3 is_stmt 1 view .LVU348
 1122              		.loc 1 320 1 is_stmt 0 view .LVU349
 1123 02a0 0DF53C4D 		add	sp, sp, #48128
 1124 02a4 07B0     		add	sp, sp, #28
 1125              	.LCFI18:
 1126              		.cfi_remember_state
 1127              		.cfi_def_cfa_offset 36
 1128              		@ sp needed
 1129 02a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1130              	.LVL117:
 1131              	.L16:
 1132              	.LCFI19:
 1133              		.cfi_restore_state
 1134              		.loc 1 320 1 view .LVU350
 1135 02aa 08F10108 		add	r8, r8, #1
 1136              	.LVL118:
 1137              		.loc 1 320 1 view .LVU351
 1138 02ae FEE6     		b	.L15
 1139              	.L20:
 1140              		.align	2
 1141              	.L19:
 1142 02b0 B2FF0100 		.word	130994
 1143 02b4 B2730100 		.word	95154
 1144              		.cfi_endproc
 1145              	.LFE4:
 1147              		.section	.text.crypto_sign,"ax",%progbits
 1148              		.align	1
 1149              		.global	crypto_sign
 1150              		.syntax unified
 1151              		.thumb
 1152              		.thumb_func
 1153              		.fpu softvfp
 1155              	crypto_sign:
 1156              	.LVL119:
 1157              	.LFB5:
 321:sign.c        **** 
 322:sign.c        **** /*************************************************
 323:sign.c        **** * Name:        crypto_sign
 324:sign.c        **** *
 325:sign.c        **** * Description: Compute signed message.
 326:sign.c        **** *
 327:sign.c        **** * Arguments:   - uint8_t *sm: pointer to output signed message (allocated
 328:sign.c        **** *                             array with CRYPTO_BYTES + mlen bytes),
 329:sign.c        **** *                             can be equal to m
 330:sign.c        **** *              - size_t *smlen: pointer to output length of signed
 331:sign.c        **** *                               message
 332:sign.c        **** *              - const uint8_t *m: pointer to message to be signed
 333:sign.c        **** *              - size_t mlen: length of message
 334:sign.c        **** *              - const uint8_t *sk: pointer to bit-packed secret key
 335:sign.c        **** *
 336:sign.c        **** * Returns 0 (success)
 337:sign.c        **** **************************************************/
 338:sign.c        **** int crypto_sign(uint8_t *sm,
 339:sign.c        ****                 size_t *smlen,
 340:sign.c        ****                 const uint8_t *m,
 341:sign.c        ****                 size_t mlen,
 342:sign.c        ****                 const uint8_t *sk,uint8_t *p)
 343:sign.c        **** {
 1158              		.loc 1 343 1 is_stmt 1 view -0
 1159              		.cfi_startproc
 1160              		@ args = 8, pretend = 0, frame = 0
 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              		.loc 1 343 1 is_stmt 0 view .LVU353
 1163 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1164              	.LCFI20:
 1165              		.cfi_def_cfa_offset 24
 1166              		.cfi_offset 4, -16
 1167              		.cfi_offset 5, -12
 1168              		.cfi_offset 6, -8
 1169              		.cfi_offset 14, -4
 1170              		.loc 1 343 1 view .LVU354
 1171 0002 0D46     		mov	r5, r1
 344:sign.c        ****   size_t i;
 1172              		.loc 1 344 3 is_stmt 1 view .LVU355
 345:sign.c        **** 
 346:sign.c        ****   for(i = 0; i < mlen; ++i)
 1173              		.loc 1 346 3 view .LVU356
 1174              	.LVL120:
 343:sign.c        ****   size_t i;
 1175              		.loc 1 343 1 is_stmt 0 view .LVU357
 1176 0004 1C46     		mov	r4, r3
 1177 0006 D118     		adds	r1, r2, r3
 1178              	.LVL121:
 343:sign.c        ****   size_t i;
 1179              		.loc 1 343 1 view .LVU358
 1180 0008 03F67413 		addw	r3, r3, #2420
 1181              	.LVL122:
 343:sign.c        ****   size_t i;
 1182              		.loc 1 343 1 view .LVU359
 1183 000c 0344     		add	r3, r3, r0
 1184              	.LVL123:
 1185              	.L22:
 1186              		.loc 1 346 14 is_stmt 1 discriminator 1 view .LVU360
 1187              		.loc 1 346 3 is_stmt 0 discriminator 1 view .LVU361
 1188 000e 9142     		cmp	r1, r2
 1189 0010 0FD1     		bne	.L23
 347:sign.c        ****     sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 348:sign.c        ****   crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,p);
 1190              		.loc 1 348 3 is_stmt 1 view .LVU362
 1191 0012 079B     		ldr	r3, [sp, #28]
 1192 0014 0193     		str	r3, [sp, #4]
 1193 0016 069B     		ldr	r3, [sp, #24]
 1194 0018 0093     		str	r3, [sp]
 1195 001a 00F67412 		addw	r2, r0, #2420
 1196              	.LVL124:
 1197              		.loc 1 348 3 is_stmt 0 view .LVU363
 1198 001e 2346     		mov	r3, r4
 1199 0020 2946     		mov	r1, r5
 1200 0022 FFF7FEFF 		bl	crypto_sign_signature
 1201              	.LVL125:
 349:sign.c        ****   *smlen += mlen;
 1202              		.loc 1 349 3 is_stmt 1 view .LVU364
 1203              		.loc 1 349 10 is_stmt 0 view .LVU365
 1204 0026 2B68     		ldr	r3, [r5]
 350:sign.c        ****   return 0;
 351:sign.c        **** }
 1205              		.loc 1 351 1 view .LVU366
 1206 0028 0020     		movs	r0, #0
 349:sign.c        ****   *smlen += mlen;
 1207              		.loc 1 349 10 view .LVU367
 1208 002a 2344     		add	r3, r3, r4
 1209 002c 2B60     		str	r3, [r5]
 350:sign.c        ****   return 0;
 1210              		.loc 1 350 3 is_stmt 1 view .LVU368
 1211              		.loc 1 351 1 is_stmt 0 view .LVU369
 1212 002e 02B0     		add	sp, sp, #8
 1213              	.LCFI21:
 1214              		.cfi_remember_state
 1215              		.cfi_def_cfa_offset 16
 1216              		@ sp needed
 1217 0030 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL126:
 1219              	.L23:
 1220              	.LCFI22:
 1221              		.cfi_restore_state
 347:sign.c        ****   crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,p);
 1222              		.loc 1 347 5 is_stmt 1 discriminator 3 view .LVU370
 347:sign.c        ****   crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,p);
 1223              		.loc 1 347 40 is_stmt 0 discriminator 3 view .LVU371
 1224 0032 11F8016D 		ldrb	r6, [r1, #-1]!	@ zero_extendqisi2
 347:sign.c        ****   crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,p);
 1225              		.loc 1 347 37 discriminator 3 view .LVU372
 1226 0036 03F8016D 		strb	r6, [r3, #-1]!
 346:sign.c        ****     sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 1227              		.loc 1 346 24 is_stmt 1 discriminator 3 view .LVU373
 1228 003a E8E7     		b	.L22
 1229              		.cfi_endproc
 1230              	.LFE5:
 1232              		.section	.text.crypto_sign_verify,"ax",%progbits
 1233              		.align	1
 1234              		.global	crypto_sign_verify
 1235              		.syntax unified
 1236              		.thumb
 1237              		.thumb_func
 1238              		.fpu softvfp
 1240              	crypto_sign_verify:
 1241              	.LVL127:
 1242              	.LFB6:
 352:sign.c        **** 
 353:sign.c        **** /*************************************************
 354:sign.c        **** * Name:        crypto_sign_verify
 355:sign.c        **** *
 356:sign.c        **** * Description: Verifies signature.
 357:sign.c        **** *
 358:sign.c        **** * Arguments:   - uint8_t *m: pointer to input signature
 359:sign.c        **** *              - size_t siglen: length of signature
 360:sign.c        **** *              - const uint8_t *m: pointer to message
 361:sign.c        **** *              - size_t mlen: length of message
 362:sign.c        **** *              - const uint8_t *pk: pointer to bit-packed public key
 363:sign.c        **** *
 364:sign.c        **** * Returns 0 if signature could be verified correctly and -1 otherwise
 365:sign.c        **** **************************************************/
 366:sign.c        **** int crypto_sign_verify(const uint8_t *sig,
 367:sign.c        ****                        size_t siglen,
 368:sign.c        ****                        const uint8_t *m,
 369:sign.c        ****                        size_t mlen,
 370:sign.c        ****                        const uint8_t *pk)
 371:sign.c        **** {
 1243              		.loc 1 371 1 view -0
 1244              		.cfi_startproc
 1245              		@ args = 4, pretend = 0, frame = 34936
 1246              		@ frame_needed = 0, uses_anonymous_args = 0
 372:sign.c        ****   unsigned int i;
 1247              		.loc 1 372 3 view .LVU375
 373:sign.c        ****   uint8_t buf[K*POLYW1_PACKEDBYTES];
 1248              		.loc 1 373 3 view .LVU376
 374:sign.c        ****   uint8_t rho[SEEDBYTES];
 1249              		.loc 1 374 3 view .LVU377
 375:sign.c        ****   uint8_t mu[CRHBYTES];
 1250              		.loc 1 375 3 view .LVU378
 376:sign.c        ****   uint8_t c[CTILDEBYTES];
 1251              		.loc 1 376 3 view .LVU379
 377:sign.c        ****   uint8_t c2[CTILDEBYTES];
 1252              		.loc 1 377 3 view .LVU380
 378:sign.c        ****   poly cp;
 1253              		.loc 1 378 3 view .LVU381
 379:sign.c        ****   polyvecl mat[K], z;
 1254              		.loc 1 379 3 view .LVU382
 380:sign.c        ****   polyveck t1, w1, h;
 1255              		.loc 1 380 3 view .LVU383
 381:sign.c        ****   shake256incctx state;
 1256              		.loc 1 381 3 view .LVU384
 382:sign.c        **** 
 383:sign.c        ****   if(siglen != CRYPTO_BYTES)
 1257              		.loc 1 383 3 view .LVU385
 371:sign.c        ****   unsigned int i;
 1258              		.loc 1 371 1 is_stmt 0 view .LVU386
 1259 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1260              	.LCFI23:
 1261              		.cfi_def_cfa_offset 20
 1262              		.cfi_offset 4, -20
 1263              		.cfi_offset 5, -16
 1264              		.cfi_offset 6, -12
 1265              		.cfi_offset 7, -8
 1266              		.cfi_offset 14, -4
 1267 0002 ADF5084D 		sub	sp, sp, #34816
 1268              	.LCFI24:
 1269              		.cfi_def_cfa_offset 34836
 1270 0006 9FB0     		sub	sp, sp, #124
 1271              	.LCFI25:
 1272              		.cfi_def_cfa_offset 34960
 371:sign.c        ****   unsigned int i;
 1273              		.loc 1 371 1 view .LVU387
 1274 0008 1E46     		mov	r6, r3
 1275 000a 0DF50843 		add	r3, sp, #34816
 1276              	.LVL128:
 371:sign.c        ****   unsigned int i;
 1277              		.loc 1 371 1 view .LVU388
 1278 000e 9033     		adds	r3, r3, #144
 1279 0010 1F68     		ldr	r7, [r3]
 1280              		.loc 1 383 5 view .LVU389
 1281 0012 40F67413 		movw	r3, #2420
 1282 0016 9942     		cmp	r1, r3
 371:sign.c        ****   unsigned int i;
 1283              		.loc 1 371 1 view .LVU390
 1284 0018 0446     		mov	r4, r0
 1285 001a 1546     		mov	r5, r2
 1286              		.loc 1 383 5 view .LVU391
 1287 001c 40F0B780 		bne	.L25
 384:sign.c        ****     return -1;
 385:sign.c        **** 
 386:sign.c        ****   unpack_pk(rho, &t1, pk);
 1288              		.loc 1 386 3 is_stmt 1 view .LVU392
 1289 0020 0DF5C351 		add	r1, sp, #6240
 1290              	.LVL129:
 1291              		.loc 1 386 3 is_stmt 0 view .LVU393
 1292 0024 3A46     		mov	r2, r7
 1293              	.LVL130:
 1294              		.loc 1 386 3 view .LVU394
 1295 0026 1831     		adds	r1, r1, #24
 1296 0028 02A8     		add	r0, sp, #8
 1297              	.LVL131:
 1298              		.loc 1 386 3 view .LVU395
 1299 002a FFF7FEFF 		bl	pqcrystals_dilithium_unpack_pk
 1300              	.LVL132:
 387:sign.c        ****   if(unpack_sig(c, &z, &h, sig))
 1301              		.loc 1 387 3 is_stmt 1 view .LVU396
 1302              		.loc 1 387 6 is_stmt 0 view .LVU397
 1303 002e 0DF56152 		add	r2, sp, #14400
 1304 0032 2346     		mov	r3, r4
 1305 0034 3832     		adds	r2, r2, #56
 1306 0036 0DF67801 		addw	r1, sp, #2168
 1307 003a 0AA8     		add	r0, sp, #40
 1308 003c FFF7FEFF 		bl	pqcrystals_dilithium_unpack_sig
 1309              	.LVL133:
 1310              		.loc 1 387 5 view .LVU398
 1311 0040 0028     		cmp	r0, #0
 1312 0042 40F0A480 		bne	.L25
 388:sign.c        ****     return -1;
 389:sign.c        ****   if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 1313              		.loc 1 389 3 is_stmt 1 view .LVU399
 1314              		.loc 1 389 6 is_stmt 0 view .LVU400
 1315 0046 5349     		ldr	r1, .L29
 1316 0048 0DF67800 		addw	r0, sp, #2168
 1317 004c FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_chknorm
 1318              	.LVL134:
 1319              		.loc 1 389 5 view .LVU401
 1320 0050 0446     		mov	r4, r0
 1321              	.LVL135:
 1322              		.loc 1 389 5 view .LVU402
 1323 0052 0028     		cmp	r0, #0
 1324 0054 40F09B80 		bne	.L25
 390:sign.c        ****     return -1;
 391:sign.c        **** 
 392:sign.c        ****   /* Compute CRH(h(rho, t1), msg) */
 393:sign.c        ****   shake256(mu, CRHBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 1325              		.loc 1 393 3 is_stmt 1 view .LVU403
 1326 0058 4FF4A463 		mov	r3, #1312
 1327 005c 3A46     		mov	r2, r7
 1328 005e 4021     		movs	r1, #64
 1329 0060 1AA8     		add	r0, sp, #104
 1330 0062 FFF7FEFF 		bl	shake256
 1331              	.LVL136:
 394:sign.c        ****   shake256_inc_init(&state);
 1332              		.loc 1 394 3 view .LVU404
 1333 0066 2AA8     		add	r0, sp, #168
 1334 0068 FFF7FEFF 		bl	shake256_inc_init
 1335              	.LVL137:
 395:sign.c        ****   shake256_inc_absorb(&state, mu, CRHBYTES);
 1336              		.loc 1 395 3 view .LVU405
 1337 006c 4022     		movs	r2, #64
 1338 006e 1AA9     		add	r1, sp, #104
 1339 0070 2AA8     		add	r0, sp, #168
 1340 0072 FFF7FEFF 		bl	shake256_inc_absorb
 1341              	.LVL138:
 396:sign.c        ****   shake256_inc_absorb(&state, m, mlen);
 1342              		.loc 1 396 3 view .LVU406
 1343 0076 3246     		mov	r2, r6
 1344 0078 2946     		mov	r1, r5
 1345 007a 2AA8     		add	r0, sp, #168
 1346 007c FFF7FEFF 		bl	shake256_inc_absorb
 1347              	.LVL139:
 397:sign.c        ****   shake256_inc_finalize(&state);
 1348              		.loc 1 397 3 view .LVU407
 1349 0080 2AA8     		add	r0, sp, #168
 1350 0082 FFF7FEFF 		bl	shake256_inc_finalize
 1351              	.LVL140:
 398:sign.c        ****   shake256_inc_squeeze(mu, CRHBYTES, &state);
 1352              		.loc 1 398 3 view .LVU408
 1353 0086 2AAA     		add	r2, sp, #168
 1354 0088 4021     		movs	r1, #64
 1355 008a 1AA8     		add	r0, sp, #104
 1356 008c FFF7FEFF 		bl	shake256_inc_squeeze
 1357              	.LVL141:
 399:sign.c        **** 
 400:sign.c        ****   /* Matrix-vector multiplication; compute Az - c2^dt1 */
 401:sign.c        ****   poly_challenge(&cp, c);
 1358              		.loc 1 401 3 view .LVU409
 1359 0090 0AA9     		add	r1, sp, #40
 1360 0092 0DF58F60 		add	r0, sp, #1144
 1361 0096 FFF7FEFF 		bl	pqcrystals_dilithium_poly_challenge
 1362              	.LVL142:
 402:sign.c        ****   polyvec_matrix_expand(mat, rho);
 1363              		.loc 1 402 3 view .LVU410
 1364 009a 0DF59040 		add	r0, sp, #18432
 1365 009e 02A9     		add	r1, sp, #8
 1366 00a0 7830     		adds	r0, r0, #120
 1367 00a2 FFF7FEFF 		bl	pqcrystals_dilithium_polyvec_matrix_expand
 1368              	.LVL143:
 403:sign.c        **** 
 404:sign.c        ****   polyvecl_ntt(&z);
 1369              		.loc 1 404 3 view .LVU411
 1370 00a6 0DF67800 		addw	r0, sp, #2168
 1371 00aa FFF7FEFF 		bl	pqcrystals_dilithium_polyvecl_ntt
 1372              	.LVL144:
 405:sign.c        ****   polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 1373              		.loc 1 405 3 view .LVU412
 1374 00ae 0DF59041 		add	r1, sp, #18432
 1375 00b2 0DF52150 		add	r0, sp, #10304
 1376 00b6 0DF67802 		addw	r2, sp, #2168
 1377 00ba 7831     		adds	r1, r1, #120
 1378 00bc 3830     		adds	r0, r0, #56
 1379 00be FFF7FEFF 		bl	pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery
 1380              	.LVL145:
 406:sign.c        **** 
 407:sign.c        ****   poly_ntt(&cp);
 1381              		.loc 1 407 3 view .LVU413
 1382 00c2 0DF58F60 		add	r0, sp, #1144
 1383 00c6 FFF7FEFF 		bl	pqcrystals_dilithium_poly_ntt
 1384              	.LVL146:
 408:sign.c        ****   polyveck_shiftl(&t1);
 1385              		.loc 1 408 3 view .LVU414
 1386 00ca 0DF5C350 		add	r0, sp, #6240
 1387 00ce 1830     		adds	r0, r0, #24
 1388 00d0 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_shiftl
 1389              	.LVL147:
 409:sign.c        ****   polyveck_ntt(&t1);
 1390              		.loc 1 409 3 view .LVU415
 1391 00d4 0DF5C350 		add	r0, sp, #6240
 1392 00d8 1830     		adds	r0, r0, #24
 1393 00da FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_ntt
 1394              	.LVL148:
 410:sign.c        ****   polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 1395              		.loc 1 410 3 view .LVU416
 1396 00de 0DF5C352 		add	r2, sp, #6240
 1397 00e2 1832     		adds	r2, r2, #24
 1398 00e4 1046     		mov	r0, r2
 1399 00e6 0DF58F61 		add	r1, sp, #1144
 1400 00ea FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_pointwise_poly_montgomery
 1401              	.LVL149:
 411:sign.c        **** 
 412:sign.c        ****   polyveck_sub(&w1, &w1, &t1);
 1402              		.loc 1 412 3 view .LVU417
 1403 00ee 0DF52151 		add	r1, sp, #10304
 1404 00f2 3831     		adds	r1, r1, #56
 1405 00f4 0DF5C352 		add	r2, sp, #6240
 1406 00f8 0846     		mov	r0, r1
 1407 00fa 1832     		adds	r2, r2, #24
 1408 00fc FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_sub
 1409              	.LVL150:
 413:sign.c        ****   polyveck_reduce(&w1);
 1410              		.loc 1 413 3 view .LVU418
 1411 0100 0DF52150 		add	r0, sp, #10304
 1412 0104 3830     		adds	r0, r0, #56
 1413 0106 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_reduce
 1414              	.LVL151:
 414:sign.c        ****   polyveck_invntt_tomont(&w1);
 1415              		.loc 1 414 3 view .LVU419
 1416 010a 0DF52150 		add	r0, sp, #10304
 1417 010e 3830     		adds	r0, r0, #56
 1418 0110 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_invntt_tomont
 1419              	.LVL152:
 415:sign.c        **** 
 416:sign.c        ****   /* Reconstruct w1 */
 417:sign.c        ****   polyveck_caddq(&w1);
 1420              		.loc 1 417 3 view .LVU420
 1421 0114 0DF52150 		add	r0, sp, #10304
 1422 0118 3830     		adds	r0, r0, #56
 1423 011a FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_caddq
 1424              	.LVL153:
 418:sign.c        ****   polyveck_use_hint(&w1, &w1, &h);
 1425              		.loc 1 418 3 view .LVU421
 1426 011e 0DF52151 		add	r1, sp, #10304
 1427 0122 3831     		adds	r1, r1, #56
 1428 0124 0DF56152 		add	r2, sp, #14400
 1429 0128 3832     		adds	r2, r2, #56
 1430 012a 0846     		mov	r0, r1
 1431 012c FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_use_hint
 1432              	.LVL154:
 419:sign.c        ****   polyveck_pack_w1(buf, &w1);
 1433              		.loc 1 419 3 view .LVU422
 1434 0130 0DF52151 		add	r1, sp, #10304
 1435 0134 3831     		adds	r1, r1, #56
 1436 0136 5EA8     		add	r0, sp, #376
 1437 0138 FFF7FEFF 		bl	pqcrystals_dilithium_polyveck_pack_w1
 1438              	.LVL155:
 420:sign.c        **** 
 421:sign.c        ****   /* Call random oracle and verify challenge */
 422:sign.c        ****   shake256_inc_init(&state);
 1439              		.loc 1 422 3 view .LVU423
 1440 013c 2AA8     		add	r0, sp, #168
 1441 013e FFF7FEFF 		bl	shake256_inc_init
 1442              	.LVL156:
 423:sign.c        ****   shake256_inc_absorb(&state, mu, CRHBYTES);
 1443              		.loc 1 423 3 view .LVU424
 1444 0142 4022     		movs	r2, #64
 1445 0144 1AA9     		add	r1, sp, #104
 1446 0146 2AA8     		add	r0, sp, #168
 1447 0148 FFF7FEFF 		bl	shake256_inc_absorb
 1448              	.LVL157:
 424:sign.c        ****   shake256_inc_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 1449              		.loc 1 424 3 view .LVU425
 1450 014c 4FF44072 		mov	r2, #768
 1451 0150 5EA9     		add	r1, sp, #376
 1452 0152 2AA8     		add	r0, sp, #168
 1453 0154 FFF7FEFF 		bl	shake256_inc_absorb
 1454              	.LVL158:
 425:sign.c        ****   shake256_inc_finalize(&state);
 1455              		.loc 1 425 3 view .LVU426
 1456 0158 2AA8     		add	r0, sp, #168
 1457 015a FFF7FEFF 		bl	shake256_inc_finalize
 1458              	.LVL159:
 426:sign.c        ****   shake256_inc_squeeze(c2, CTILDEBYTES, &state);
 1459              		.loc 1 426 3 view .LVU427
 1460 015e 12AB     		add	r3, sp, #72
 1461 0160 2AAA     		add	r2, sp, #168
 1462 0162 2021     		movs	r1, #32
 1463 0164 1846     		mov	r0, r3
 1464 0166 0193     		str	r3, [sp, #4]
 1465 0168 FFF7FEFF 		bl	shake256_inc_squeeze
 1466              	.LVL160:
 427:sign.c        ****   for(i = 0; i < CTILDEBYTES; ++i)
 1467              		.loc 1 427 3 view .LVU428
 1468              		.loc 1 427 14 view .LVU429
 1469 016c 019A     		ldr	r2, [sp, #4]
 1470 016e 0AAB     		add	r3, sp, #40
 1471              		.loc 1 427 9 is_stmt 0 view .LVU430
 1472 0170 2146     		mov	r1, r4
 1473              	.LVL161:
 1474              	.L26:
 428:sign.c        ****     if(c[i] != c2[i])
 1475              		.loc 1 428 5 is_stmt 1 view .LVU431
 1476              		.loc 1 428 9 is_stmt 0 view .LVU432
 1477 0172 13F8015B 		ldrb	r5, [r3], #1	@ zero_extendqisi2
 1478              		.loc 1 428 18 view .LVU433
 1479 0176 12F8010B 		ldrb	r0, [r2], #1	@ zero_extendqisi2
 1480              		.loc 1 428 7 view .LVU434
 1481 017a 8542     		cmp	r5, r0
 1482 017c 07D1     		bne	.L25
 427:sign.c        ****   for(i = 0; i < CTILDEBYTES; ++i)
 1483              		.loc 1 427 31 is_stmt 1 discriminator 2 view .LVU435
 1484 017e 0131     		adds	r1, r1, #1
 1485              	.LVL162:
 427:sign.c        ****   for(i = 0; i < CTILDEBYTES; ++i)
 1486              		.loc 1 427 14 discriminator 2 view .LVU436
 427:sign.c        ****   for(i = 0; i < CTILDEBYTES; ++i)
 1487              		.loc 1 427 3 is_stmt 0 discriminator 2 view .LVU437
 1488 0180 2029     		cmp	r1, #32
 1489 0182 F6D1     		bne	.L26
 1490              	.LVL163:
 1491              	.L24:
 429:sign.c        ****       return -1;
 430:sign.c        **** 
 431:sign.c        ****   return 0;
 432:sign.c        **** }
 1492              		.loc 1 432 1 view .LVU438
 1493 0184 2046     		mov	r0, r4
 1494 0186 0DF5084D 		add	sp, sp, #34816
 1495 018a 1FB0     		add	sp, sp, #124
 1496              	.LCFI26:
 1497              		.cfi_remember_state
 1498              		.cfi_def_cfa_offset 20
 1499              		@ sp needed
 1500 018c F0BD     		pop	{r4, r5, r6, r7, pc}
 1501              	.LVL164:
 1502              	.L25:
 1503              	.LCFI27:
 1504              		.cfi_restore_state
 384:sign.c        **** 
 1505              		.loc 1 384 12 view .LVU439
 1506 018e 4FF0FF34 		mov	r4, #-1
 1507 0192 F7E7     		b	.L24
 1508              	.L30:
 1509              		.align	2
 1510              	.L29:
 1511 0194 B2FF0100 		.word	130994
 1512              		.cfi_endproc
 1513              	.LFE6:
 1515              		.section	.text.crypto_sign_open,"ax",%progbits
 1516              		.align	1
 1517              		.global	crypto_sign_open
 1518              		.syntax unified
 1519              		.thumb
 1520              		.thumb_func
 1521              		.fpu softvfp
 1523              	crypto_sign_open:
 1524              	.LVL165:
 1525              	.LFB7:
 433:sign.c        **** 
 434:sign.c        **** /*************************************************
 435:sign.c        **** * Name:        crypto_sign_open
 436:sign.c        **** *
 437:sign.c        **** * Description: Verify signed message.
 438:sign.c        **** *
 439:sign.c        **** * Arguments:   - uint8_t *m: pointer to output message (allocated
 440:sign.c        **** *                            array with smlen bytes), can be equal to sm
 441:sign.c        **** *              - size_t *mlen: pointer to output length of message
 442:sign.c        **** *              - const uint8_t *sm: pointer to signed message
 443:sign.c        **** *              - size_t smlen: length of signed message
 444:sign.c        **** *              - const uint8_t *pk: pointer to bit-packed public key
 445:sign.c        **** *
 446:sign.c        **** * Returns 0 if signed message could be verified correctly and -1 otherwise
 447:sign.c        **** **************************************************/
 448:sign.c        **** int crypto_sign_open(uint8_t *m,
 449:sign.c        ****                      size_t *mlen,
 450:sign.c        ****                      const uint8_t *sm,
 451:sign.c        ****                      size_t smlen,
 452:sign.c        ****                      const uint8_t *pk)
 453:sign.c        **** {
 1526              		.loc 1 453 1 is_stmt 1 view -0
 1527              		.cfi_startproc
 1528              		@ args = 4, pretend = 0, frame = 0
 1529              		@ frame_needed = 0, uses_anonymous_args = 0
 454:sign.c        ****   size_t i;
 1530              		.loc 1 454 3 view .LVU441
 455:sign.c        **** 
 456:sign.c        ****   if(smlen < CRYPTO_BYTES)
 1531              		.loc 1 456 3 view .LVU442
 453:sign.c        ****   size_t i;
 1532              		.loc 1 453 1 is_stmt 0 view .LVU443
 1533 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1534              	.LCFI28:
 1535              		.cfi_def_cfa_offset 32
 1536              		.cfi_offset 4, -20
 1537              		.cfi_offset 5, -16
 1538              		.cfi_offset 6, -12
 1539              		.cfi_offset 7, -8
 1540              		.cfi_offset 14, -4
 453:sign.c        ****   size_t i;
 1541              		.loc 1 453 1 view .LVU444
 1542 0002 1D46     		mov	r5, r3
 1543              		.loc 1 456 5 view .LVU445
 1544 0004 40F67313 		movw	r3, #2419
 1545              	.LVL166:
 1546              		.loc 1 456 5 view .LVU446
 1547 0008 9D42     		cmp	r5, r3
 453:sign.c        ****   size_t i;
 1548              		.loc 1 453 1 view .LVU447
 1549 000a 0746     		mov	r7, r0
 1550 000c 0E46     		mov	r6, r1
 1551 000e 1446     		mov	r4, r2
 1552              		.loc 1 456 5 view .LVU448
 1553 0010 19D9     		bls	.L32
 457:sign.c        ****     goto badsig;
 458:sign.c        **** 
 459:sign.c        ****   *mlen = smlen - CRYPTO_BYTES;
 1554              		.loc 1 459 3 is_stmt 1 view .LVU449
 460:sign.c        ****   if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 1555              		.loc 1 460 6 is_stmt 0 view .LVU450
 1556 0012 089A     		ldr	r2, [sp, #32]
 1557              	.LVL167:
 459:sign.c        ****   if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 1558              		.loc 1 459 17 view .LVU451
 1559 0014 A5F67413 		subw	r3, r5, #2420
 459:sign.c        ****   if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 1560              		.loc 1 459 9 view .LVU452
 1561 0018 0B60     		str	r3, [r1]
 1562              		.loc 1 460 3 is_stmt 1 view .LVU453
 1563              		.loc 1 460 6 is_stmt 0 view .LVU454
 1564 001a 2046     		mov	r0, r4
 1565              	.LVL168:
 1566              		.loc 1 460 6 view .LVU455
 1567 001c 0092     		str	r2, [sp]
 1568 001e 40F67411 		movw	r1, #2420
 1569              	.LVL169:
 1570              		.loc 1 460 6 view .LVU456
 1571 0022 04F67412 		addw	r2, r4, #2420
 1572 0026 FFF7FEFF 		bl	crypto_sign_verify
 1573              	.LVL170:
 1574              		.loc 1 460 5 view .LVU457
 1575 002a 60B9     		cbnz	r0, .L32
 1576 002c 04F67314 		addw	r4, r4, #2419
 1577              	.LVL171:
 461:sign.c        ****     goto badsig;
 462:sign.c        ****   else {
 463:sign.c        ****     /* All good, copy msg, return 0 */
 464:sign.c        ****     for(i = 0; i < *mlen; ++i)
 1578              		.loc 1 464 11 view .LVU458
 1579 0030 0346     		mov	r3, r0
 1580              	.LVL172:
 1581              	.L33:
 1582              		.loc 1 464 16 is_stmt 1 discriminator 1 view .LVU459
 1583              		.loc 1 464 5 is_stmt 0 discriminator 1 view .LVU460
 1584 0032 3268     		ldr	r2, [r6]
 1585 0034 9A42     		cmp	r2, r3
 1586 0036 01D8     		bhi	.L34
 1587              	.LVL173:
 1588              	.L31:
 465:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 466:sign.c        ****     return 0;
 467:sign.c        ****   }
 468:sign.c        **** 
 469:sign.c        **** badsig:
 470:sign.c        ****   /* Signature verification failed */
 471:sign.c        ****   *mlen = -1;
 472:sign.c        ****   for(i = 0; i < smlen; ++i)
 473:sign.c        ****     m[i] = 0;
 474:sign.c        **** 
 475:sign.c        ****   return -1;
 476:sign.c        **** }
 1589              		.loc 1 476 1 view .LVU461
 1590 0038 03B0     		add	sp, sp, #12
 1591              	.LCFI29:
 1592              		.cfi_remember_state
 1593              		.cfi_def_cfa_offset 20
 1594              		@ sp needed
 1595 003a F0BD     		pop	{r4, r5, r6, r7, pc}
 1596              	.LVL174:
 1597              	.L34:
 1598              	.LCFI30:
 1599              		.cfi_restore_state
 465:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1600              		.loc 1 465 7 is_stmt 1 discriminator 3 view .LVU462
 465:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1601              		.loc 1 465 16 is_stmt 0 discriminator 3 view .LVU463
 1602 003c 14F8012F 		ldrb	r2, [r4, #1]!	@ zero_extendqisi2
 465:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1603              		.loc 1 465 12 discriminator 3 view .LVU464
 1604 0040 FA54     		strb	r2, [r7, r3]
 464:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1605              		.loc 1 464 27 is_stmt 1 discriminator 3 view .LVU465
 1606 0042 0133     		adds	r3, r3, #1
 1607              	.LVL175:
 464:sign.c        ****       m[i] = sm[CRYPTO_BYTES + i];
 1608              		.loc 1 464 27 is_stmt 0 discriminator 3 view .LVU466
 1609 0044 F5E7     		b	.L33
 1610              	.LVL176:
 1611              	.L32:
 1612              	.LDL1:
 471:sign.c        ****   for(i = 0; i < smlen; ++i)
 1613              		.loc 1 471 3 is_stmt 1 view .LVU467
 471:sign.c        ****   for(i = 0; i < smlen; ++i)
 1614              		.loc 1 471 9 is_stmt 0 view .LVU468
 1615 0046 4FF0FF34 		mov	r4, #-1
 1616              	.LVL177:
 471:sign.c        ****   for(i = 0; i < smlen; ++i)
 1617              		.loc 1 471 9 view .LVU469
 1618 004a 3460     		str	r4, [r6]
 472:sign.c        ****     m[i] = 0;
 1619              		.loc 1 472 3 is_stmt 1 view .LVU470
 1620              	.LVL178:
 473:sign.c        **** 
 1621              		.loc 1 473 10 is_stmt 0 view .LVU471
 1622 004c 2A46     		mov	r2, r5
 1623 004e 0021     		movs	r1, #0
 1624 0050 3846     		mov	r0, r7
 1625 0052 FFF7FEFF 		bl	memset
 1626              	.LVL179:
 475:sign.c        **** }
 1627              		.loc 1 475 10 view .LVU472
 1628 0056 2046     		mov	r0, r4
 1629              	.LVL180:
 475:sign.c        **** }
 1630              		.loc 1 475 10 view .LVU473
 1631 0058 EEE7     		b	.L31
 1632              		.cfi_endproc
 1633              	.LFE7:
 1635              		.text
 1636              	.Letext0:
 1637              		.file 2 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\m
 1638              		.file 3 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\s
 1639              		.file 4 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\lib\\gcc\\arm-none-eabi\\
 1640              		.file 5 "poly.h"
 1641              		.file 6 "polyvec.h"
 1642              		.file 7 "smallpoly.h"
 1643              		.file 8 "fips202.h"
 1644              		.file 9 "symmetric.h"
 1645              		.file 10 "packing.h"
 1646              		.file 11 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 sign.c
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:24     .text.crypto_sign_keypair:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:32     .text.crypto_sign_keypair:00000000 crypto_sign_keypair
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:281    .text.crypto_sign_keypair:00000140 $d
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:286    .text.test_fun:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:293    .text.test_fun:00000000 test_fun
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:455    .text.test_fun2:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:462    .text.test_fun2:00000000 test_fun2
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:572    .text.test_fun3:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:579    .text.test_fun3:00000000 test_fun3
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:659    .text.crypto_sign_signature:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:666    .text.crypto_sign_signature:00000000 crypto_sign_signature
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1142   .text.crypto_sign_signature:000002b0 $d
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1148   .text.crypto_sign:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1155   .text.crypto_sign:00000000 crypto_sign
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1233   .text.crypto_sign_verify:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1240   .text.crypto_sign_verify:00000000 crypto_sign_verify
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1511   .text.crypto_sign_verify:00000194 $d
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1516   .text.crypto_sign_open:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\cciuyrzs.s:1523   .text.crypto_sign_open:00000000 crypto_sign_open

UNDEFINED SYMBOLS
memcpy
shake256
pqcrystals_dilithium_polyvec_matrix_expand
pqcrystals_dilithium_polyvecl_uniform_eta
pqcrystals_dilithium_polyveck_uniform_eta
pqcrystals_dilithium_polyvecl_ntt
pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery
pqcrystals_dilithium_polyveck_reduce
pqcrystals_dilithium_polyveck_invntt_tomont
pqcrystals_dilithium_polyveck_add
pqcrystals_dilithium_polyveck_caddq
pqcrystals_dilithium_polyveck_power2round
pqcrystals_dilithium_pack_pk
pqcrystals_dilithium_pack_sk
trigger_high
KeccakF1600_StateExtractBytes
trigger_low
memset
pqcrystals_dilithium_dilithium_shake256_stream_init
shake256_inc_squeeze
pqcrystals_dilithium_unpack_sk
shake256_inc_init
shake256_inc_absorb
shake256_inc_finalize
polyvecl_small_ntt
polyveck_small_ntt
pqcrystals_dilithium_polyveck_ntt
pqcrystals_dilithium_polyvecl_uniform_gamma1
pqcrystals_dilithium_polyveck_decompose
pqcrystals_dilithium_polyveck_pack_w1
pqcrystals_dilithium_poly_challenge
poly_small_ntt_precomp
pqcrystals_dilithium_poly_ntt
polyvecl_small_basemul_invntt
pqcrystals_dilithium_polyvecl_add
pqcrystals_dilithium_polyvecl_reduce
pqcrystals_dilithium_polyvecl_chknorm
pqcrystals_dilithium_pack_sig_z
poly_small_basemul_invntt
pqcrystals_dilithium_poly_sub
pqcrystals_dilithium_poly_reduce
pqcrystals_dilithium_poly_chknorm
pqcrystals_dilithium_poly_pointwise_montgomery
pqcrystals_dilithium_poly_invntt_tomont
pqcrystals_dilithium_poly_add
pqcrystals_dilithium_poly_make_hint
pqcrystals_dilithium_pack_sig_h
pqcrystals_dilithium_pack_sig_h_zero
pqcrystals_dilithium_unpack_pk
pqcrystals_dilithium_unpack_sig
pqcrystals_dilithium_polyveck_shiftl
pqcrystals_dilithium_polyveck_pointwise_poly_montgomery
pqcrystals_dilithium_polyveck_sub
pqcrystals_dilithium_polyveck_use_hint
