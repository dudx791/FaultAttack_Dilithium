
PQCgenKAT_sign-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c154  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016e8  0800c318  0800c318  0001c318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da00  0800da00  000209b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800da00  0800da00  0001da00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da08  0800da08  000209b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800da08  0800da08  0001da08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b0  20000000  0800da14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200009b0  0800e3c4  000209b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200010bc  0800e3c4  000210bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000209b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c821  00000000  00000000  000209de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2c  00000000  00000000  0002d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009784  00000000  00000000  0002f12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  000388af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000920  00000000  00000000  00038f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000806c  00000000  00000000  000398bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002a00  00000000  00000000  0004192b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0004432b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  00044378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000023b8  00000000  00000000  00046fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000036d  00000000  00000000  00049378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200009b0 	.word	0x200009b0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c2fc 	.word	0x0800c2fc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200009b4 	.word	0x200009b4
 80001fc:	0800c2fc 	.word	0x0800c2fc

08000200 <__asm_point_mul_257_16>:
 8000200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000204:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8000208:	f50e 7c80 	add.w	ip, lr, #256	; 0x100

0800020c <_point_mul_16_loop>:
 800020c:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8000210:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8000214:	f8de 9004 	ldr.w	r9, [lr, #4]
 8000218:	f8d1 5004 	ldr.w	r5, [r1, #4]
 800021c:	f851 4b10 	ldr.w	r4, [r1], #16
 8000220:	f85e 6b08 	ldr.w	r6, [lr], #8
 8000224:	fb14 fa26 	smultb	sl, r4, r6
 8000228:	fb5a fb12 	smmulr	fp, sl, r2
 800022c:	fb0b aa13 	mls	sl, fp, r3, sl
 8000230:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 8000234:	f1c6 0600 	rsb	r6, r6, #0
 8000238:	fb15 fa26 	smultb	sl, r5, r6
 800023c:	fb5a fb12 	smmulr	fp, sl, r2
 8000240:	fb0b aa13 	mls	sl, fp, r3, sl
 8000244:	eac5 450a 	pkhbt	r5, r5, sl, lsl #16
 8000248:	f8c0 5004 	str.w	r5, [r0, #4]
 800024c:	f840 4b08 	str.w	r4, [r0], #8
 8000250:	fb17 fa29 	smultb	sl, r7, r9
 8000254:	fb5a fb12 	smmulr	fp, sl, r2
 8000258:	fb0b aa13 	mls	sl, fp, r3, sl
 800025c:	eac7 470a 	pkhbt	r7, r7, sl, lsl #16
 8000260:	f1c9 0900 	rsb	r9, r9, #0
 8000264:	fb18 fa29 	smultb	sl, r8, r9
 8000268:	fb5a fb12 	smmulr	fp, sl, r2
 800026c:	fb0b aa13 	mls	sl, fp, r3, sl
 8000270:	eac8 480a 	pkhbt	r8, r8, sl, lsl #16
 8000274:	f8c0 8004 	str.w	r8, [r0, #4]
 8000278:	f840 7b08 	str.w	r7, [r0], #8
 800027c:	ebbe 0f0c 	cmp.w	lr, ip
 8000280:	f47f afc4 	bne.w	800020c <_point_mul_16_loop>
 8000284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000288 <__asm_asymmetric_mul_257_16>:
 8000288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800028c:	f500 6c80 	add.w	ip, r0, #1024	; 0x400

08000290 <_asymmetric_mul_16_loop>:
 8000290:	f8d1 7004 	ldr.w	r7, [r1, #4]
 8000294:	f851 4b08 	ldr.w	r4, [r1], #8
 8000298:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800029c:	f852 5b08 	ldr.w	r5, [r2], #8
 80002a0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80002a4:	f853 6b08 	ldr.w	r6, [r3], #8
 80002a8:	fb24 fa06 	smuad	sl, r4, r6
 80002ac:	fb24 fb15 	smuadx	fp, r4, r5
 80002b0:	f8c0 b004 	str.w	fp, [r0, #4]
 80002b4:	f840 ab08 	str.w	sl, [r0], #8
 80002b8:	fb27 fa09 	smuad	sl, r7, r9
 80002bc:	fb27 fb18 	smuadx	fp, r7, r8
 80002c0:	f8c0 b004 	str.w	fp, [r0, #4]
 80002c4:	f840 ab08 	str.w	sl, [r0], #8
 80002c8:	ebb0 0f0c 	cmp.w	r0, ip
 80002cc:	f47f afe0 	bne.w	8000290 <_asymmetric_mul_16_loop>
 80002d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d4 <__asm_fnt_257>:
 80002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d8:	ed2d 8a0c 	vpush	{s16-s27}
 80002dc:	ee0d 1a90 	vmov	s27, r1
 80002e0:	f100 0c80 	add.w	ip, r0, #128	; 0x80

080002e4 <_fnt_0_1_2>:
 80002e4:	f8d0 4000 	ldr.w	r4, [r0]
 80002e8:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80002ec:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 80002f0:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
 80002f4:	f8d0 8200 	ldr.w	r8, [r0, #512]	; 0x200
 80002f8:	f8d0 9280 	ldr.w	r9, [r0, #640]	; 0x280
 80002fc:	f8d0 a300 	ldr.w	sl, [r0, #768]	; 0x300
 8000300:	f8d0 b380 	ldr.w	fp, [r0, #896]	; 0x380
 8000304:	eb04 1408 	add.w	r4, r4, r8, lsl #4
 8000308:	eba4 1848 	sub.w	r8, r4, r8, lsl #5
 800030c:	eb05 1509 	add.w	r5, r5, r9, lsl #4
 8000310:	eba5 1949 	sub.w	r9, r5, r9, lsl #5
 8000314:	eb06 160a 	add.w	r6, r6, sl, lsl #4
 8000318:	eba6 1a4a 	sub.w	sl, r6, sl, lsl #5
 800031c:	eb07 170b 	add.w	r7, r7, fp, lsl #4
 8000320:	eba7 1b4b 	sub.w	fp, r7, fp, lsl #5
 8000324:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8000328:	eba4 06c6 	sub.w	r6, r4, r6, lsl #3
 800032c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8000330:	eba5 07c7 	sub.w	r7, r5, r7, lsl #3
 8000334:	eb08 188a 	add.w	r8, r8, sl, lsl #6
 8000338:	eba8 1aca 	sub.w	sl, r8, sl, lsl #7
 800033c:	eb09 198b 	add.w	r9, r9, fp, lsl #6
 8000340:	eba9 1bcb 	sub.w	fp, r9, fp, lsl #7
 8000344:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8000348:	eba4 0585 	sub.w	r5, r4, r5, lsl #2
 800034c:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8000350:	eba6 1787 	sub.w	r7, r6, r7, lsl #6
 8000354:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 8000358:	eba8 1909 	sub.w	r9, r8, r9, lsl #4
 800035c:	eb0a 1acb 	add.w	sl, sl, fp, lsl #7
 8000360:	ebaa 2b0b 	sub.w	fp, sl, fp, lsl #8
 8000364:	f8c0 8200 	str.w	r8, [r0, #512]	; 0x200
 8000368:	f8c0 9280 	str.w	r9, [r0, #640]	; 0x280
 800036c:	f8c0 a300 	str.w	sl, [r0, #768]	; 0x300
 8000370:	f8c0 b380 	str.w	fp, [r0, #896]	; 0x380
 8000374:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 8000378:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 800037c:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
 8000380:	f840 4b04 	str.w	r4, [r0], #4
 8000384:	ebb0 0f0c 	cmp.w	r0, ip
 8000388:	f47f afac 	bne.w	80002e4 <_fnt_0_1_2>
 800038c:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8000390:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8000394:	ee0c ca90 	vmov	s25, ip

08000398 <_fnt_3_4_5_6>:
 8000398:	ee1d 1a90 	vmov	r1, s27
 800039c:	ecb1 1a0f 	vldmia	r1!, {s2-s16}
 80003a0:	ee0d 1a90 	vmov	s27, r1
 80003a4:	f8d0 4008 	ldr.w	r4, [r0, #8]
 80003a8:	f8d0 5018 	ldr.w	r5, [r0, #24]
 80003ac:	f8d0 6028 	ldr.w	r6, [r0, #40]	; 0x28
 80003b0:	f8d0 7038 	ldr.w	r7, [r0, #56]	; 0x38
 80003b4:	f8d0 8048 	ldr.w	r8, [r0, #72]	; 0x48
 80003b8:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
 80003bc:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 80003c0:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 80003c4:	ee11 ea10 	vmov	lr, s2
 80003c8:	fb08 410e 	mla	r1, r8, lr, r4
 80003cc:	fb08 481e 	mls	r8, r8, lr, r4
 80003d0:	fb09 540e 	mla	r4, r9, lr, r5
 80003d4:	fb09 591e 	mls	r9, r9, lr, r5
 80003d8:	fb0a 650e 	mla	r5, sl, lr, r6
 80003dc:	fb0a 6a1e 	mls	sl, sl, lr, r6
 80003e0:	fb0b 760e 	mla	r6, fp, lr, r7
 80003e4:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80003e8:	fb51 f712 	smmulr	r7, r1, r2
 80003ec:	fb07 1113 	mls	r1, r7, r3, r1
 80003f0:	fb54 f712 	smmulr	r7, r4, r2
 80003f4:	fb07 4413 	mls	r4, r7, r3, r4
 80003f8:	fb55 f712 	smmulr	r7, r5, r2
 80003fc:	fb07 5513 	mls	r5, r7, r3, r5
 8000400:	fb56 f712 	smmulr	r7, r6, r2
 8000404:	fb07 6613 	mls	r6, r7, r3, r6
 8000408:	fb58 f712 	smmulr	r7, r8, r2
 800040c:	fb07 8813 	mls	r8, r7, r3, r8
 8000410:	fb59 f712 	smmulr	r7, r9, r2
 8000414:	fb07 9913 	mls	r9, r7, r3, r9
 8000418:	fb5a f712 	smmulr	r7, sl, r2
 800041c:	fb07 aa13 	mls	sl, r7, r3, sl
 8000420:	fb5b f712 	smmulr	r7, fp, r2
 8000424:	fb07 bb13 	mls	fp, r7, r3, fp
 8000428:	ee11 ea90 	vmov	lr, s3
 800042c:	fb05 1c0e 	mla	ip, r5, lr, r1
 8000430:	fb05 171e 	mls	r7, r5, lr, r1
 8000434:	fb06 410e 	mla	r1, r6, lr, r4
 8000438:	fb06 441e 	mls	r4, r6, lr, r4
 800043c:	ee12 ea10 	vmov	lr, s4
 8000440:	fb0a 860e 	mla	r6, sl, lr, r8
 8000444:	fb0a 851e 	mls	r5, sl, lr, r8
 8000448:	fb0b 9a0e 	mla	sl, fp, lr, r9
 800044c:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000450:	ee13 ea90 	vmov	lr, s7
 8000454:	fb0a 680e 	mla	r8, sl, lr, r6
 8000458:	fb0a 691e 	mls	r9, sl, lr, r6
 800045c:	ee14 ea10 	vmov	lr, s8
 8000460:	fb0b 5a0e 	mla	sl, fp, lr, r5
 8000464:	fb0b 5b1e 	mls	fp, fp, lr, r5
 8000468:	ee13 ea10 	vmov	lr, s6
 800046c:	fb04 760e 	mla	r6, r4, lr, r7
 8000470:	fb04 771e 	mls	r7, r4, lr, r7
 8000474:	ee12 ea90 	vmov	lr, s5
 8000478:	fb01 c40e 	mla	r4, r1, lr, ip
 800047c:	fb01 c51e 	mls	r5, r1, lr, ip
 8000480:	ec45 4a38 	vmov	s17, s18, r4, r5
 8000484:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000488:	ec49 8a3a 	vmov	s21, s22, r8, r9
 800048c:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000490:	f8d0 4000 	ldr.w	r4, [r0]
 8000494:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8000498:	f8d0 6020 	ldr.w	r6, [r0, #32]
 800049c:	f8d0 7030 	ldr.w	r7, [r0, #48]	; 0x30
 80004a0:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 80004a4:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 80004a8:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
 80004ac:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
 80004b0:	ee11 ea10 	vmov	lr, s2
 80004b4:	fb08 410e 	mla	r1, r8, lr, r4
 80004b8:	fb08 481e 	mls	r8, r8, lr, r4
 80004bc:	fb09 540e 	mla	r4, r9, lr, r5
 80004c0:	fb09 591e 	mls	r9, r9, lr, r5
 80004c4:	fb0a 650e 	mla	r5, sl, lr, r6
 80004c8:	fb0a 6a1e 	mls	sl, sl, lr, r6
 80004cc:	fb0b 760e 	mla	r6, fp, lr, r7
 80004d0:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80004d4:	fb51 f712 	smmulr	r7, r1, r2
 80004d8:	fb07 1113 	mls	r1, r7, r3, r1
 80004dc:	fb54 f712 	smmulr	r7, r4, r2
 80004e0:	fb07 4413 	mls	r4, r7, r3, r4
 80004e4:	fb55 f712 	smmulr	r7, r5, r2
 80004e8:	fb07 5513 	mls	r5, r7, r3, r5
 80004ec:	fb56 f712 	smmulr	r7, r6, r2
 80004f0:	fb07 6613 	mls	r6, r7, r3, r6
 80004f4:	fb58 f712 	smmulr	r7, r8, r2
 80004f8:	fb07 8813 	mls	r8, r7, r3, r8
 80004fc:	fb59 f712 	smmulr	r7, r9, r2
 8000500:	fb07 9913 	mls	r9, r7, r3, r9
 8000504:	fb5a f712 	smmulr	r7, sl, r2
 8000508:	fb07 aa13 	mls	sl, r7, r3, sl
 800050c:	fb5b f712 	smmulr	r7, fp, r2
 8000510:	fb07 bb13 	mls	fp, r7, r3, fp
 8000514:	ee11 ea90 	vmov	lr, s3
 8000518:	fb05 1c0e 	mla	ip, r5, lr, r1
 800051c:	fb05 171e 	mls	r7, r5, lr, r1
 8000520:	fb06 410e 	mla	r1, r6, lr, r4
 8000524:	fb06 441e 	mls	r4, r6, lr, r4
 8000528:	ee12 ea10 	vmov	lr, s4
 800052c:	fb0a 860e 	mla	r6, sl, lr, r8
 8000530:	fb0a 851e 	mls	r5, sl, lr, r8
 8000534:	fb0b 9a0e 	mla	sl, fp, lr, r9
 8000538:	fb0b 9b1e 	mls	fp, fp, lr, r9
 800053c:	ee13 ea90 	vmov	lr, s7
 8000540:	fb0a 680e 	mla	r8, sl, lr, r6
 8000544:	fb0a 691e 	mls	r9, sl, lr, r6
 8000548:	ee14 ea10 	vmov	lr, s8
 800054c:	fb0b 5a0e 	mla	sl, fp, lr, r5
 8000550:	fb0b 5b1e 	mls	fp, fp, lr, r5
 8000554:	ee13 ea10 	vmov	lr, s6
 8000558:	fb04 760e 	mla	r6, r4, lr, r7
 800055c:	fb04 771e 	mls	r7, r4, lr, r7
 8000560:	ee12 ea90 	vmov	lr, s5
 8000564:	fb01 c40e 	mla	r4, r1, lr, ip
 8000568:	fb01 c51e 	mls	r5, r1, lr, ip
 800056c:	ee19 ca10 	vmov	ip, s18
 8000570:	ee15 ea10 	vmov	lr, s10
 8000574:	fb0c 510e 	mla	r1, ip, lr, r5
 8000578:	fb0c 5c1e 	mls	ip, ip, lr, r5
 800057c:	fb51 fe12 	smmulr	lr, r1, r2
 8000580:	fb0e 1113 	mls	r1, lr, r3, r1
 8000584:	fb5c fe12 	smmulr	lr, ip, r2
 8000588:	fb0e cc13 	mls	ip, lr, r3, ip
 800058c:	f8c0 c018 	str.w	ip, [r0, #24]
 8000590:	f8c0 1010 	str.w	r1, [r0, #16]
 8000594:	ee19 ca90 	vmov	ip, s19
 8000598:	ee15 ea90 	vmov	lr, s11
 800059c:	fb0c 610e 	mla	r1, ip, lr, r6
 80005a0:	fb0c 6c1e 	mls	ip, ip, lr, r6
 80005a4:	fb51 fe12 	smmulr	lr, r1, r2
 80005a8:	fb0e 1113 	mls	r1, lr, r3, r1
 80005ac:	fb5c fe12 	smmulr	lr, ip, r2
 80005b0:	fb0e cc13 	mls	ip, lr, r3, ip
 80005b4:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 80005b8:	f8c0 1020 	str.w	r1, [r0, #32]
 80005bc:	ee1a ca10 	vmov	ip, s20
 80005c0:	ee16 ea10 	vmov	lr, s12
 80005c4:	fb0c 710e 	mla	r1, ip, lr, r7
 80005c8:	fb0c 7c1e 	mls	ip, ip, lr, r7
 80005cc:	fb51 fe12 	smmulr	lr, r1, r2
 80005d0:	fb0e 1113 	mls	r1, lr, r3, r1
 80005d4:	fb5c fe12 	smmulr	lr, ip, r2
 80005d8:	fb0e cc13 	mls	ip, lr, r3, ip
 80005dc:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 80005e0:	f8c0 1030 	str.w	r1, [r0, #48]	; 0x30
 80005e4:	ee1a ca90 	vmov	ip, s21
 80005e8:	ee16 ea90 	vmov	lr, s13
 80005ec:	fb0c 810e 	mla	r1, ip, lr, r8
 80005f0:	fb0c 8c1e 	mls	ip, ip, lr, r8
 80005f4:	fb51 fe12 	smmulr	lr, r1, r2
 80005f8:	fb0e 1113 	mls	r1, lr, r3, r1
 80005fc:	fb5c fe12 	smmulr	lr, ip, r2
 8000600:	fb0e cc13 	mls	ip, lr, r3, ip
 8000604:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 8000608:	f8c0 1040 	str.w	r1, [r0, #64]	; 0x40
 800060c:	ee1b ca10 	vmov	ip, s22
 8000610:	ee17 ea10 	vmov	lr, s14
 8000614:	fb0c 910e 	mla	r1, ip, lr, r9
 8000618:	fb0c 9c1e 	mls	ip, ip, lr, r9
 800061c:	fb51 fe12 	smmulr	lr, r1, r2
 8000620:	fb0e 1113 	mls	r1, lr, r3, r1
 8000624:	fb5c fe12 	smmulr	lr, ip, r2
 8000628:	fb0e cc13 	mls	ip, lr, r3, ip
 800062c:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
 8000630:	f8c0 1050 	str.w	r1, [r0, #80]	; 0x50
 8000634:	ee1b ca90 	vmov	ip, s23
 8000638:	ee17 ea90 	vmov	lr, s15
 800063c:	fb0c a10e 	mla	r1, ip, lr, sl
 8000640:	fb0c ac1e 	mls	ip, ip, lr, sl
 8000644:	fb51 fe12 	smmulr	lr, r1, r2
 8000648:	fb0e 1113 	mls	r1, lr, r3, r1
 800064c:	fb5c fe12 	smmulr	lr, ip, r2
 8000650:	fb0e cc13 	mls	ip, lr, r3, ip
 8000654:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
 8000658:	f8c0 1060 	str.w	r1, [r0, #96]	; 0x60
 800065c:	ee1c ca10 	vmov	ip, s24
 8000660:	ee18 ea10 	vmov	lr, s16
 8000664:	fb0c b10e 	mla	r1, ip, lr, fp
 8000668:	fb0c bc1e 	mls	ip, ip, lr, fp
 800066c:	fb51 fe12 	smmulr	lr, r1, r2
 8000670:	fb0e 1113 	mls	r1, lr, r3, r1
 8000674:	fb5c fe12 	smmulr	lr, ip, r2
 8000678:	fb0e cc13 	mls	ip, lr, r3, ip
 800067c:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
 8000680:	f8c0 1070 	str.w	r1, [r0, #112]	; 0x70
 8000684:	ee18 ca90 	vmov	ip, s17
 8000688:	ee14 ea90 	vmov	lr, s9
 800068c:	fb0c 410e 	mla	r1, ip, lr, r4
 8000690:	fb0c 4c1e 	mls	ip, ip, lr, r4
 8000694:	fb51 fe12 	smmulr	lr, r1, r2
 8000698:	fb0e 1113 	mls	r1, lr, r3, r1
 800069c:	fb5c fe12 	smmulr	lr, ip, r2
 80006a0:	fb0e cc13 	mls	ip, lr, r3, ip
 80006a4:	f8c0 c008 	str.w	ip, [r0, #8]
 80006a8:	f840 1b04 	str.w	r1, [r0], #4
 80006ac:	f8d0 4008 	ldr.w	r4, [r0, #8]
 80006b0:	f8d0 5018 	ldr.w	r5, [r0, #24]
 80006b4:	f8d0 6028 	ldr.w	r6, [r0, #40]	; 0x28
 80006b8:	f8d0 7038 	ldr.w	r7, [r0, #56]	; 0x38
 80006bc:	f8d0 8048 	ldr.w	r8, [r0, #72]	; 0x48
 80006c0:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
 80006c4:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 80006c8:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 80006cc:	ee11 ea10 	vmov	lr, s2
 80006d0:	fb08 410e 	mla	r1, r8, lr, r4
 80006d4:	fb08 481e 	mls	r8, r8, lr, r4
 80006d8:	fb09 540e 	mla	r4, r9, lr, r5
 80006dc:	fb09 591e 	mls	r9, r9, lr, r5
 80006e0:	fb0a 650e 	mla	r5, sl, lr, r6
 80006e4:	fb0a 6a1e 	mls	sl, sl, lr, r6
 80006e8:	fb0b 760e 	mla	r6, fp, lr, r7
 80006ec:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80006f0:	fb51 f712 	smmulr	r7, r1, r2
 80006f4:	fb07 1113 	mls	r1, r7, r3, r1
 80006f8:	fb54 f712 	smmulr	r7, r4, r2
 80006fc:	fb07 4413 	mls	r4, r7, r3, r4
 8000700:	fb55 f712 	smmulr	r7, r5, r2
 8000704:	fb07 5513 	mls	r5, r7, r3, r5
 8000708:	fb56 f712 	smmulr	r7, r6, r2
 800070c:	fb07 6613 	mls	r6, r7, r3, r6
 8000710:	fb58 f712 	smmulr	r7, r8, r2
 8000714:	fb07 8813 	mls	r8, r7, r3, r8
 8000718:	fb59 f712 	smmulr	r7, r9, r2
 800071c:	fb07 9913 	mls	r9, r7, r3, r9
 8000720:	fb5a f712 	smmulr	r7, sl, r2
 8000724:	fb07 aa13 	mls	sl, r7, r3, sl
 8000728:	fb5b f712 	smmulr	r7, fp, r2
 800072c:	fb07 bb13 	mls	fp, r7, r3, fp
 8000730:	ee11 ea90 	vmov	lr, s3
 8000734:	fb05 1c0e 	mla	ip, r5, lr, r1
 8000738:	fb05 171e 	mls	r7, r5, lr, r1
 800073c:	fb06 410e 	mla	r1, r6, lr, r4
 8000740:	fb06 441e 	mls	r4, r6, lr, r4
 8000744:	ee12 ea10 	vmov	lr, s4
 8000748:	fb0a 860e 	mla	r6, sl, lr, r8
 800074c:	fb0a 851e 	mls	r5, sl, lr, r8
 8000750:	fb0b 9a0e 	mla	sl, fp, lr, r9
 8000754:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000758:	ee13 ea90 	vmov	lr, s7
 800075c:	fb0a 680e 	mla	r8, sl, lr, r6
 8000760:	fb0a 691e 	mls	r9, sl, lr, r6
 8000764:	ee14 ea10 	vmov	lr, s8
 8000768:	fb0b 5a0e 	mla	sl, fp, lr, r5
 800076c:	fb0b 5b1e 	mls	fp, fp, lr, r5
 8000770:	ee13 ea10 	vmov	lr, s6
 8000774:	fb04 760e 	mla	r6, r4, lr, r7
 8000778:	fb04 771e 	mls	r7, r4, lr, r7
 800077c:	ee12 ea90 	vmov	lr, s5
 8000780:	fb01 c40e 	mla	r4, r1, lr, ip
 8000784:	fb01 c51e 	mls	r5, r1, lr, ip
 8000788:	ec45 4a38 	vmov	s17, s18, r4, r5
 800078c:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000790:	ec49 8a3a 	vmov	s21, s22, r8, r9
 8000794:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000798:	f8d0 4000 	ldr.w	r4, [r0]
 800079c:	f8d0 5010 	ldr.w	r5, [r0, #16]
 80007a0:	f8d0 6020 	ldr.w	r6, [r0, #32]
 80007a4:	f8d0 7030 	ldr.w	r7, [r0, #48]	; 0x30
 80007a8:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 80007ac:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 80007b0:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
 80007b4:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
 80007b8:	ee11 ea10 	vmov	lr, s2
 80007bc:	fb08 410e 	mla	r1, r8, lr, r4
 80007c0:	fb08 481e 	mls	r8, r8, lr, r4
 80007c4:	fb09 540e 	mla	r4, r9, lr, r5
 80007c8:	fb09 591e 	mls	r9, r9, lr, r5
 80007cc:	fb0a 650e 	mla	r5, sl, lr, r6
 80007d0:	fb0a 6a1e 	mls	sl, sl, lr, r6
 80007d4:	fb0b 760e 	mla	r6, fp, lr, r7
 80007d8:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80007dc:	fb51 f712 	smmulr	r7, r1, r2
 80007e0:	fb07 1113 	mls	r1, r7, r3, r1
 80007e4:	fb54 f712 	smmulr	r7, r4, r2
 80007e8:	fb07 4413 	mls	r4, r7, r3, r4
 80007ec:	fb55 f712 	smmulr	r7, r5, r2
 80007f0:	fb07 5513 	mls	r5, r7, r3, r5
 80007f4:	fb56 f712 	smmulr	r7, r6, r2
 80007f8:	fb07 6613 	mls	r6, r7, r3, r6
 80007fc:	fb58 f712 	smmulr	r7, r8, r2
 8000800:	fb07 8813 	mls	r8, r7, r3, r8
 8000804:	fb59 f712 	smmulr	r7, r9, r2
 8000808:	fb07 9913 	mls	r9, r7, r3, r9
 800080c:	fb5a f712 	smmulr	r7, sl, r2
 8000810:	fb07 aa13 	mls	sl, r7, r3, sl
 8000814:	fb5b f712 	smmulr	r7, fp, r2
 8000818:	fb07 bb13 	mls	fp, r7, r3, fp
 800081c:	ee11 ea90 	vmov	lr, s3
 8000820:	fb05 1c0e 	mla	ip, r5, lr, r1
 8000824:	fb05 171e 	mls	r7, r5, lr, r1
 8000828:	fb06 410e 	mla	r1, r6, lr, r4
 800082c:	fb06 441e 	mls	r4, r6, lr, r4
 8000830:	ee12 ea10 	vmov	lr, s4
 8000834:	fb0a 860e 	mla	r6, sl, lr, r8
 8000838:	fb0a 851e 	mls	r5, sl, lr, r8
 800083c:	fb0b 9a0e 	mla	sl, fp, lr, r9
 8000840:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000844:	ee13 ea90 	vmov	lr, s7
 8000848:	fb0a 680e 	mla	r8, sl, lr, r6
 800084c:	fb0a 691e 	mls	r9, sl, lr, r6
 8000850:	ee14 ea10 	vmov	lr, s8
 8000854:	fb0b 5a0e 	mla	sl, fp, lr, r5
 8000858:	fb0b 5b1e 	mls	fp, fp, lr, r5
 800085c:	ee13 ea10 	vmov	lr, s6
 8000860:	fb04 760e 	mla	r6, r4, lr, r7
 8000864:	fb04 771e 	mls	r7, r4, lr, r7
 8000868:	ee12 ea90 	vmov	lr, s5
 800086c:	fb01 c40e 	mla	r4, r1, lr, ip
 8000870:	fb01 c51e 	mls	r5, r1, lr, ip
 8000874:	ee19 ca10 	vmov	ip, s18
 8000878:	ee15 ea10 	vmov	lr, s10
 800087c:	fb0c 510e 	mla	r1, ip, lr, r5
 8000880:	fb0c 5c1e 	mls	ip, ip, lr, r5
 8000884:	fb51 fe12 	smmulr	lr, r1, r2
 8000888:	fb0e 1113 	mls	r1, lr, r3, r1
 800088c:	fb5c fe12 	smmulr	lr, ip, r2
 8000890:	fb0e cc13 	mls	ip, lr, r3, ip
 8000894:	f8c0 c018 	str.w	ip, [r0, #24]
 8000898:	f8c0 1010 	str.w	r1, [r0, #16]
 800089c:	ee19 ca90 	vmov	ip, s19
 80008a0:	ee15 ea90 	vmov	lr, s11
 80008a4:	fb0c 610e 	mla	r1, ip, lr, r6
 80008a8:	fb0c 6c1e 	mls	ip, ip, lr, r6
 80008ac:	fb51 fe12 	smmulr	lr, r1, r2
 80008b0:	fb0e 1113 	mls	r1, lr, r3, r1
 80008b4:	fb5c fe12 	smmulr	lr, ip, r2
 80008b8:	fb0e cc13 	mls	ip, lr, r3, ip
 80008bc:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 80008c0:	f8c0 1020 	str.w	r1, [r0, #32]
 80008c4:	ee1a ca10 	vmov	ip, s20
 80008c8:	ee16 ea10 	vmov	lr, s12
 80008cc:	fb0c 710e 	mla	r1, ip, lr, r7
 80008d0:	fb0c 7c1e 	mls	ip, ip, lr, r7
 80008d4:	fb51 fe12 	smmulr	lr, r1, r2
 80008d8:	fb0e 1113 	mls	r1, lr, r3, r1
 80008dc:	fb5c fe12 	smmulr	lr, ip, r2
 80008e0:	fb0e cc13 	mls	ip, lr, r3, ip
 80008e4:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 80008e8:	f8c0 1030 	str.w	r1, [r0, #48]	; 0x30
 80008ec:	ee1a ca90 	vmov	ip, s21
 80008f0:	ee16 ea90 	vmov	lr, s13
 80008f4:	fb0c 810e 	mla	r1, ip, lr, r8
 80008f8:	fb0c 8c1e 	mls	ip, ip, lr, r8
 80008fc:	fb51 fe12 	smmulr	lr, r1, r2
 8000900:	fb0e 1113 	mls	r1, lr, r3, r1
 8000904:	fb5c fe12 	smmulr	lr, ip, r2
 8000908:	fb0e cc13 	mls	ip, lr, r3, ip
 800090c:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 8000910:	f8c0 1040 	str.w	r1, [r0, #64]	; 0x40
 8000914:	ee1b ca10 	vmov	ip, s22
 8000918:	ee17 ea10 	vmov	lr, s14
 800091c:	fb0c 910e 	mla	r1, ip, lr, r9
 8000920:	fb0c 9c1e 	mls	ip, ip, lr, r9
 8000924:	fb51 fe12 	smmulr	lr, r1, r2
 8000928:	fb0e 1113 	mls	r1, lr, r3, r1
 800092c:	fb5c fe12 	smmulr	lr, ip, r2
 8000930:	fb0e cc13 	mls	ip, lr, r3, ip
 8000934:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
 8000938:	f8c0 1050 	str.w	r1, [r0, #80]	; 0x50
 800093c:	ee1b ca90 	vmov	ip, s23
 8000940:	ee17 ea90 	vmov	lr, s15
 8000944:	fb0c a10e 	mla	r1, ip, lr, sl
 8000948:	fb0c ac1e 	mls	ip, ip, lr, sl
 800094c:	fb51 fe12 	smmulr	lr, r1, r2
 8000950:	fb0e 1113 	mls	r1, lr, r3, r1
 8000954:	fb5c fe12 	smmulr	lr, ip, r2
 8000958:	fb0e cc13 	mls	ip, lr, r3, ip
 800095c:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
 8000960:	f8c0 1060 	str.w	r1, [r0, #96]	; 0x60
 8000964:	ee1c ca10 	vmov	ip, s24
 8000968:	ee18 ea10 	vmov	lr, s16
 800096c:	fb0c b10e 	mla	r1, ip, lr, fp
 8000970:	fb0c bc1e 	mls	ip, ip, lr, fp
 8000974:	fb51 fe12 	smmulr	lr, r1, r2
 8000978:	fb0e 1113 	mls	r1, lr, r3, r1
 800097c:	fb5c fe12 	smmulr	lr, ip, r2
 8000980:	fb0e cc13 	mls	ip, lr, r3, ip
 8000984:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
 8000988:	f8c0 1070 	str.w	r1, [r0, #112]	; 0x70
 800098c:	ee18 ca90 	vmov	ip, s17
 8000990:	ee14 ea90 	vmov	lr, s9
 8000994:	fb0c 410e 	mla	r1, ip, lr, r4
 8000998:	fb0c 4c1e 	mls	ip, ip, lr, r4
 800099c:	fb51 fe12 	smmulr	lr, r1, r2
 80009a0:	fb0e 1113 	mls	r1, lr, r3, r1
 80009a4:	fb5c fe12 	smmulr	lr, ip, r2
 80009a8:	fb0e cc13 	mls	ip, lr, r3, ip
 80009ac:	f8c0 c008 	str.w	ip, [r0, #8]
 80009b0:	f840 1b04 	str.w	r1, [r0], #4
 80009b4:	f100 0078 	add.w	r0, r0, #120	; 0x78
 80009b8:	ee1c ca90 	vmov	ip, s25
 80009bc:	ebb0 0f0c 	cmp.w	r0, ip
 80009c0:	f47f acea 	bne.w	8000398 <_fnt_3_4_5_6>
 80009c4:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 80009c8:	ea4f 0100 	mov.w	r1, r0

080009cc <_fnt_to_16_bit>:
 80009cc:	f8d0 3004 	ldr.w	r3, [r0, #4]
 80009d0:	f8d0 4008 	ldr.w	r4, [r0, #8]
 80009d4:	f8d0 500c 	ldr.w	r5, [r0, #12]
 80009d8:	f8d0 6010 	ldr.w	r6, [r0, #16]
 80009dc:	f8d0 7014 	ldr.w	r7, [r0, #20]
 80009e0:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80009e4:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80009e8:	f850 2b20 	ldr.w	r2, [r0], #32
 80009ec:	f8a1 3002 	strh.w	r3, [r1, #2]
 80009f0:	f8a1 4004 	strh.w	r4, [r1, #4]
 80009f4:	f8a1 5006 	strh.w	r5, [r1, #6]
 80009f8:	f8a1 6008 	strh.w	r6, [r1, #8]
 80009fc:	f8a1 700a 	strh.w	r7, [r1, #10]
 8000a00:	f8a1 800c 	strh.w	r8, [r1, #12]
 8000a04:	f8a1 900e 	strh.w	r9, [r1, #14]
 8000a08:	f821 2b10 	strh.w	r2, [r1], #16
 8000a0c:	ebb0 0f0c 	cmp.w	r0, ip
 8000a10:	f47f afdc 	bne.w	80009cc <_fnt_to_16_bit>
 8000a14:	ecbd 8a0c 	vpop	{s16-s27}
 8000a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a1c <__asm_ifnt_257>:
 8000a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a20:	ed2d 8a09 	vpush	{s16-s24}
 8000a24:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8000a28:	ee00 ca90 	vmov	s1, ip

08000a2c <_ifnt_7_6_5_4>:
 8000a2c:	ecb1 1a0f 	vldmia	r1!, {s2-s16}
 8000a30:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 8000a34:	f8d0 5048 	ldr.w	r5, [r0, #72]	; 0x48
 8000a38:	f8d0 6050 	ldr.w	r6, [r0, #80]	; 0x50
 8000a3c:	f8d0 7058 	ldr.w	r7, [r0, #88]	; 0x58
 8000a40:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8000a44:	f8d0 9068 	ldr.w	r9, [r0, #104]	; 0x68
 8000a48:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
 8000a4c:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8000a50:	442c      	add	r4, r5
 8000a52:	443e      	add	r6, r7
 8000a54:	44c8      	add	r8, r9
 8000a56:	44da      	add	sl, fp
 8000a58:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000a5c:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000a60:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000a64:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000a68:	ee13 ea10 	vmov	lr, s6
 8000a6c:	fb05 f50e 	mul.w	r5, r5, lr
 8000a70:	ee14 ea10 	vmov	lr, s8
 8000a74:	fb09 f90e 	mul.w	r9, r9, lr
 8000a78:	4434      	add	r4, r6
 8000a7a:	44d0      	add	r8, sl
 8000a7c:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000a80:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000a84:	ee13 ea90 	vmov	lr, s7
 8000a88:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000a8c:	fb07 571e 	mls	r7, r7, lr, r5
 8000a90:	ee14 ea90 	vmov	lr, s9
 8000a94:	fb0b 950e 	mla	r5, fp, lr, r9
 8000a98:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000a9c:	ee16 ea10 	vmov	lr, s12
 8000aa0:	fb06 f60e 	mul.w	r6, r6, lr
 8000aa4:	fb07 f70e 	mul.w	r7, r7, lr
 8000aa8:	ee16 ea90 	vmov	lr, s13
 8000aac:	fb0a fa0e 	mul.w	sl, sl, lr
 8000ab0:	fb0b fb0e 	mul.w	fp, fp, lr
 8000ab4:	fb54 fe12 	smmulr	lr, r4, r2
 8000ab8:	fb0e 4413 	mls	r4, lr, r3, r4
 8000abc:	fb5c fe12 	smmulr	lr, ip, r2
 8000ac0:	fb0e cc13 	mls	ip, lr, r3, ip
 8000ac4:	fb56 fe12 	smmulr	lr, r6, r2
 8000ac8:	fb0e 6613 	mls	r6, lr, r3, r6
 8000acc:	fb57 fe12 	smmulr	lr, r7, r2
 8000ad0:	fb0e 7713 	mls	r7, lr, r3, r7
 8000ad4:	fb58 fe12 	smmulr	lr, r8, r2
 8000ad8:	fb0e 8813 	mls	r8, lr, r3, r8
 8000adc:	fb55 fe12 	smmulr	lr, r5, r2
 8000ae0:	fb0e 5513 	mls	r5, lr, r3, r5
 8000ae4:	fb5a fe12 	smmulr	lr, sl, r2
 8000ae8:	fb0e aa13 	mls	sl, lr, r3, sl
 8000aec:	fb5b fe12 	smmulr	lr, fp, r2
 8000af0:	fb0e bb13 	mls	fp, lr, r3, fp
 8000af4:	4444      	add	r4, r8
 8000af6:	4456      	add	r6, sl
 8000af8:	44ac      	add	ip, r5
 8000afa:	445f      	add	r7, fp
 8000afc:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000b00:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000b04:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000b08:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000b0c:	ec4c 4a38 	vmov	s17, s18, r4, ip
 8000b10:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000b14:	ec45 8a3a 	vmov	s21, s22, r8, r5
 8000b18:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000b1c:	f8d0 4000 	ldr.w	r4, [r0]
 8000b20:	f8d0 5008 	ldr.w	r5, [r0, #8]
 8000b24:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8000b28:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000b2c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8000b30:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
 8000b34:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8000b38:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8000b3c:	442c      	add	r4, r5
 8000b3e:	443e      	add	r6, r7
 8000b40:	44c8      	add	r8, r9
 8000b42:	44da      	add	sl, fp
 8000b44:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000b48:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000b4c:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000b50:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000b54:	ee11 ea10 	vmov	lr, s2
 8000b58:	fb05 f50e 	mul.w	r5, r5, lr
 8000b5c:	ee12 ea10 	vmov	lr, s4
 8000b60:	fb09 f90e 	mul.w	r9, r9, lr
 8000b64:	4434      	add	r4, r6
 8000b66:	44d0      	add	r8, sl
 8000b68:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000b6c:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000b70:	ee11 ea90 	vmov	lr, s3
 8000b74:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000b78:	fb07 571e 	mls	r7, r7, lr, r5
 8000b7c:	ee12 ea90 	vmov	lr, s5
 8000b80:	fb0b 950e 	mla	r5, fp, lr, r9
 8000b84:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000b88:	ee15 ea10 	vmov	lr, s10
 8000b8c:	fb06 f60e 	mul.w	r6, r6, lr
 8000b90:	fb07 f70e 	mul.w	r7, r7, lr
 8000b94:	ee15 ea90 	vmov	lr, s11
 8000b98:	fb0a fa0e 	mul.w	sl, sl, lr
 8000b9c:	fb0b fb0e 	mul.w	fp, fp, lr
 8000ba0:	fb54 fe12 	smmulr	lr, r4, r2
 8000ba4:	fb0e 4413 	mls	r4, lr, r3, r4
 8000ba8:	fb5c fe12 	smmulr	lr, ip, r2
 8000bac:	fb0e cc13 	mls	ip, lr, r3, ip
 8000bb0:	fb56 fe12 	smmulr	lr, r6, r2
 8000bb4:	fb0e 6613 	mls	r6, lr, r3, r6
 8000bb8:	fb57 fe12 	smmulr	lr, r7, r2
 8000bbc:	fb0e 7713 	mls	r7, lr, r3, r7
 8000bc0:	fb58 fe12 	smmulr	lr, r8, r2
 8000bc4:	fb0e 8813 	mls	r8, lr, r3, r8
 8000bc8:	fb55 fe12 	smmulr	lr, r5, r2
 8000bcc:	fb0e 5513 	mls	r5, lr, r3, r5
 8000bd0:	fb5a fe12 	smmulr	lr, sl, r2
 8000bd4:	fb0e aa13 	mls	sl, lr, r3, sl
 8000bd8:	fb5b fe12 	smmulr	lr, fp, r2
 8000bdc:	fb0e bb13 	mls	fp, lr, r3, fp
 8000be0:	4444      	add	r4, r8
 8000be2:	4456      	add	r6, sl
 8000be4:	44ac      	add	ip, r5
 8000be6:	445f      	add	r7, fp
 8000be8:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000bec:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000bf0:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000bf4:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000bf8:	ee17 ea10 	vmov	lr, s14
 8000bfc:	fb08 f80e 	mul.w	r8, r8, lr
 8000c00:	fb05 f50e 	mul.w	r5, r5, lr
 8000c04:	fb0a fa0e 	mul.w	sl, sl, lr
 8000c08:	fb0b fb0e 	mul.w	fp, fp, lr
 8000c0c:	ee18 ea10 	vmov	lr, s16
 8000c10:	ee19 9a10 	vmov	r9, s18
 8000c14:	eb0c 0c09 	add.w	ip, ip, r9
 8000c18:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8000c1c:	fb0e f909 	mul.w	r9, lr, r9
 8000c20:	f8c0 c008 	str.w	ip, [r0, #8]
 8000c24:	f8c0 9048 	str.w	r9, [r0, #72]	; 0x48
 8000c28:	ee19 9a90 	vmov	r9, s19
 8000c2c:	eb06 0609 	add.w	r6, r6, r9
 8000c30:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8000c34:	fb0e f909 	mul.w	r9, lr, r9
 8000c38:	f8c0 6010 	str.w	r6, [r0, #16]
 8000c3c:	f8c0 9050 	str.w	r9, [r0, #80]	; 0x50
 8000c40:	ee1a 9a10 	vmov	r9, s20
 8000c44:	eb07 0709 	add.w	r7, r7, r9
 8000c48:	eba7 0949 	sub.w	r9, r7, r9, lsl #1
 8000c4c:	fb0e f909 	mul.w	r9, lr, r9
 8000c50:	f8c0 7018 	str.w	r7, [r0, #24]
 8000c54:	f8c0 9058 	str.w	r9, [r0, #88]	; 0x58
 8000c58:	ee17 ca90 	vmov	ip, s15
 8000c5c:	ee1a 9a90 	vmov	r9, s21
 8000c60:	fb0c 8609 	mla	r6, ip, r9, r8
 8000c64:	fb0c 8919 	mls	r9, ip, r9, r8
 8000c68:	fb0e f909 	mul.w	r9, lr, r9
 8000c6c:	f8c0 6020 	str.w	r6, [r0, #32]
 8000c70:	f8c0 9060 	str.w	r9, [r0, #96]	; 0x60
 8000c74:	ee1b 9a10 	vmov	r9, s22
 8000c78:	fb0c 5609 	mla	r6, ip, r9, r5
 8000c7c:	fb0c 5919 	mls	r9, ip, r9, r5
 8000c80:	fb0e f909 	mul.w	r9, lr, r9
 8000c84:	f8c0 6028 	str.w	r6, [r0, #40]	; 0x28
 8000c88:	f8c0 9068 	str.w	r9, [r0, #104]	; 0x68
 8000c8c:	ee1b 9a90 	vmov	r9, s23
 8000c90:	fb0c a609 	mla	r6, ip, r9, sl
 8000c94:	fb0c a919 	mls	r9, ip, r9, sl
 8000c98:	fb0e f909 	mul.w	r9, lr, r9
 8000c9c:	f8c0 6030 	str.w	r6, [r0, #48]	; 0x30
 8000ca0:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
 8000ca4:	ee1c 9a10 	vmov	r9, s24
 8000ca8:	fb0c b609 	mla	r6, ip, r9, fp
 8000cac:	fb0c b919 	mls	r9, ip, r9, fp
 8000cb0:	fb0e f909 	mul.w	r9, lr, r9
 8000cb4:	f8c0 6038 	str.w	r6, [r0, #56]	; 0x38
 8000cb8:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
 8000cbc:	ee18 9a90 	vmov	r9, s17
 8000cc0:	eb04 0409 	add.w	r4, r4, r9
 8000cc4:	eba4 0949 	sub.w	r9, r4, r9, lsl #1
 8000cc8:	fb0e f909 	mul.w	r9, lr, r9
 8000ccc:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
 8000cd0:	f840 4b04 	str.w	r4, [r0], #4
 8000cd4:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 8000cd8:	f8d0 5048 	ldr.w	r5, [r0, #72]	; 0x48
 8000cdc:	f8d0 6050 	ldr.w	r6, [r0, #80]	; 0x50
 8000ce0:	f8d0 7058 	ldr.w	r7, [r0, #88]	; 0x58
 8000ce4:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8000ce8:	f8d0 9068 	ldr.w	r9, [r0, #104]	; 0x68
 8000cec:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
 8000cf0:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8000cf4:	442c      	add	r4, r5
 8000cf6:	443e      	add	r6, r7
 8000cf8:	44c8      	add	r8, r9
 8000cfa:	44da      	add	sl, fp
 8000cfc:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000d00:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000d04:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000d08:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000d0c:	ee13 ea10 	vmov	lr, s6
 8000d10:	fb05 f50e 	mul.w	r5, r5, lr
 8000d14:	ee14 ea10 	vmov	lr, s8
 8000d18:	fb09 f90e 	mul.w	r9, r9, lr
 8000d1c:	4434      	add	r4, r6
 8000d1e:	44d0      	add	r8, sl
 8000d20:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000d24:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000d28:	ee13 ea90 	vmov	lr, s7
 8000d2c:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000d30:	fb07 571e 	mls	r7, r7, lr, r5
 8000d34:	ee14 ea90 	vmov	lr, s9
 8000d38:	fb0b 950e 	mla	r5, fp, lr, r9
 8000d3c:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000d40:	ee16 ea10 	vmov	lr, s12
 8000d44:	fb06 f60e 	mul.w	r6, r6, lr
 8000d48:	fb07 f70e 	mul.w	r7, r7, lr
 8000d4c:	ee16 ea90 	vmov	lr, s13
 8000d50:	fb0a fa0e 	mul.w	sl, sl, lr
 8000d54:	fb0b fb0e 	mul.w	fp, fp, lr
 8000d58:	fb54 fe12 	smmulr	lr, r4, r2
 8000d5c:	fb0e 4413 	mls	r4, lr, r3, r4
 8000d60:	fb5c fe12 	smmulr	lr, ip, r2
 8000d64:	fb0e cc13 	mls	ip, lr, r3, ip
 8000d68:	fb56 fe12 	smmulr	lr, r6, r2
 8000d6c:	fb0e 6613 	mls	r6, lr, r3, r6
 8000d70:	fb57 fe12 	smmulr	lr, r7, r2
 8000d74:	fb0e 7713 	mls	r7, lr, r3, r7
 8000d78:	fb58 fe12 	smmulr	lr, r8, r2
 8000d7c:	fb0e 8813 	mls	r8, lr, r3, r8
 8000d80:	fb55 fe12 	smmulr	lr, r5, r2
 8000d84:	fb0e 5513 	mls	r5, lr, r3, r5
 8000d88:	fb5a fe12 	smmulr	lr, sl, r2
 8000d8c:	fb0e aa13 	mls	sl, lr, r3, sl
 8000d90:	fb5b fe12 	smmulr	lr, fp, r2
 8000d94:	fb0e bb13 	mls	fp, lr, r3, fp
 8000d98:	4444      	add	r4, r8
 8000d9a:	4456      	add	r6, sl
 8000d9c:	44ac      	add	ip, r5
 8000d9e:	445f      	add	r7, fp
 8000da0:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000da4:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000da8:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000dac:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000db0:	ec4c 4a38 	vmov	s17, s18, r4, ip
 8000db4:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000db8:	ec45 8a3a 	vmov	s21, s22, r8, r5
 8000dbc:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000dc0:	f8d0 4000 	ldr.w	r4, [r0]
 8000dc4:	f8d0 5008 	ldr.w	r5, [r0, #8]
 8000dc8:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8000dcc:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000dd0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8000dd4:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
 8000dd8:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8000ddc:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8000de0:	442c      	add	r4, r5
 8000de2:	443e      	add	r6, r7
 8000de4:	44c8      	add	r8, r9
 8000de6:	44da      	add	sl, fp
 8000de8:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000dec:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000df0:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000df4:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000df8:	ee11 ea10 	vmov	lr, s2
 8000dfc:	fb05 f50e 	mul.w	r5, r5, lr
 8000e00:	ee12 ea10 	vmov	lr, s4
 8000e04:	fb09 f90e 	mul.w	r9, r9, lr
 8000e08:	4434      	add	r4, r6
 8000e0a:	44d0      	add	r8, sl
 8000e0c:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000e10:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000e14:	ee11 ea90 	vmov	lr, s3
 8000e18:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000e1c:	fb07 571e 	mls	r7, r7, lr, r5
 8000e20:	ee12 ea90 	vmov	lr, s5
 8000e24:	fb0b 950e 	mla	r5, fp, lr, r9
 8000e28:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000e2c:	ee15 ea10 	vmov	lr, s10
 8000e30:	fb06 f60e 	mul.w	r6, r6, lr
 8000e34:	fb07 f70e 	mul.w	r7, r7, lr
 8000e38:	ee15 ea90 	vmov	lr, s11
 8000e3c:	fb0a fa0e 	mul.w	sl, sl, lr
 8000e40:	fb0b fb0e 	mul.w	fp, fp, lr
 8000e44:	fb54 fe12 	smmulr	lr, r4, r2
 8000e48:	fb0e 4413 	mls	r4, lr, r3, r4
 8000e4c:	fb5c fe12 	smmulr	lr, ip, r2
 8000e50:	fb0e cc13 	mls	ip, lr, r3, ip
 8000e54:	fb56 fe12 	smmulr	lr, r6, r2
 8000e58:	fb0e 6613 	mls	r6, lr, r3, r6
 8000e5c:	fb57 fe12 	smmulr	lr, r7, r2
 8000e60:	fb0e 7713 	mls	r7, lr, r3, r7
 8000e64:	fb58 fe12 	smmulr	lr, r8, r2
 8000e68:	fb0e 8813 	mls	r8, lr, r3, r8
 8000e6c:	fb55 fe12 	smmulr	lr, r5, r2
 8000e70:	fb0e 5513 	mls	r5, lr, r3, r5
 8000e74:	fb5a fe12 	smmulr	lr, sl, r2
 8000e78:	fb0e aa13 	mls	sl, lr, r3, sl
 8000e7c:	fb5b fe12 	smmulr	lr, fp, r2
 8000e80:	fb0e bb13 	mls	fp, lr, r3, fp
 8000e84:	4444      	add	r4, r8
 8000e86:	4456      	add	r6, sl
 8000e88:	44ac      	add	ip, r5
 8000e8a:	445f      	add	r7, fp
 8000e8c:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000e90:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000e94:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000e98:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000e9c:	ee17 ea10 	vmov	lr, s14
 8000ea0:	fb08 f80e 	mul.w	r8, r8, lr
 8000ea4:	fb05 f50e 	mul.w	r5, r5, lr
 8000ea8:	fb0a fa0e 	mul.w	sl, sl, lr
 8000eac:	fb0b fb0e 	mul.w	fp, fp, lr
 8000eb0:	ee18 ea10 	vmov	lr, s16
 8000eb4:	ee19 9a10 	vmov	r9, s18
 8000eb8:	eb0c 0c09 	add.w	ip, ip, r9
 8000ebc:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8000ec0:	fb0e f909 	mul.w	r9, lr, r9
 8000ec4:	f8c0 c008 	str.w	ip, [r0, #8]
 8000ec8:	f8c0 9048 	str.w	r9, [r0, #72]	; 0x48
 8000ecc:	ee19 9a90 	vmov	r9, s19
 8000ed0:	eb06 0609 	add.w	r6, r6, r9
 8000ed4:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8000ed8:	fb0e f909 	mul.w	r9, lr, r9
 8000edc:	f8c0 6010 	str.w	r6, [r0, #16]
 8000ee0:	f8c0 9050 	str.w	r9, [r0, #80]	; 0x50
 8000ee4:	ee1a 9a10 	vmov	r9, s20
 8000ee8:	eb07 0709 	add.w	r7, r7, r9
 8000eec:	eba7 0949 	sub.w	r9, r7, r9, lsl #1
 8000ef0:	fb0e f909 	mul.w	r9, lr, r9
 8000ef4:	f8c0 7018 	str.w	r7, [r0, #24]
 8000ef8:	f8c0 9058 	str.w	r9, [r0, #88]	; 0x58
 8000efc:	ee17 ca90 	vmov	ip, s15
 8000f00:	ee1a 9a90 	vmov	r9, s21
 8000f04:	fb0c 8609 	mla	r6, ip, r9, r8
 8000f08:	fb0c 8919 	mls	r9, ip, r9, r8
 8000f0c:	fb0e f909 	mul.w	r9, lr, r9
 8000f10:	f8c0 6020 	str.w	r6, [r0, #32]
 8000f14:	f8c0 9060 	str.w	r9, [r0, #96]	; 0x60
 8000f18:	ee1b 9a10 	vmov	r9, s22
 8000f1c:	fb0c 5609 	mla	r6, ip, r9, r5
 8000f20:	fb0c 5919 	mls	r9, ip, r9, r5
 8000f24:	fb0e f909 	mul.w	r9, lr, r9
 8000f28:	f8c0 6028 	str.w	r6, [r0, #40]	; 0x28
 8000f2c:	f8c0 9068 	str.w	r9, [r0, #104]	; 0x68
 8000f30:	ee1b 9a90 	vmov	r9, s23
 8000f34:	fb0c a609 	mla	r6, ip, r9, sl
 8000f38:	fb0c a919 	mls	r9, ip, r9, sl
 8000f3c:	fb0e f909 	mul.w	r9, lr, r9
 8000f40:	f8c0 6030 	str.w	r6, [r0, #48]	; 0x30
 8000f44:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
 8000f48:	ee1c 9a10 	vmov	r9, s24
 8000f4c:	fb0c b609 	mla	r6, ip, r9, fp
 8000f50:	fb0c b919 	mls	r9, ip, r9, fp
 8000f54:	fb0e f909 	mul.w	r9, lr, r9
 8000f58:	f8c0 6038 	str.w	r6, [r0, #56]	; 0x38
 8000f5c:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
 8000f60:	ee18 9a90 	vmov	r9, s17
 8000f64:	eb04 0409 	add.w	r4, r4, r9
 8000f68:	eba4 0949 	sub.w	r9, r4, r9, lsl #1
 8000f6c:	fb0e f909 	mul.w	r9, lr, r9
 8000f70:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
 8000f74:	f840 4b7c 	str.w	r4, [r0], #124
 8000f78:	ee10 ca90 	vmov	ip, s1
 8000f7c:	ebb0 0f0c 	cmp.w	r0, ip
 8000f80:	f47f ad54 	bne.w	8000a2c <_ifnt_7_6_5_4>
 8000f84:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000f88:	f04f 0e00 	mov.w	lr, #0
 8000f8c:	f100 0180 	add.w	r1, r0, #128	; 0x80

08000f90 <_ifnt_0_1_2>:
 8000f90:	f8d0 4000 	ldr.w	r4, [r0]
 8000f94:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8000f98:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 8000f9c:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
 8000fa0:	f8d0 8200 	ldr.w	r8, [r0, #512]	; 0x200
 8000fa4:	f8d0 9280 	ldr.w	r9, [r0, #640]	; 0x280
 8000fa8:	f8d0 a300 	ldr.w	sl, [r0, #768]	; 0x300
 8000fac:	f8d0 b380 	ldr.w	fp, [r0, #896]	; 0x380
 8000fb0:	442c      	add	r4, r5
 8000fb2:	443e      	add	r6, r7
 8000fb4:	44c8      	add	r8, r9
 8000fb6:	44da      	add	sl, fp
 8000fb8:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000fbc:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000fc0:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000fc4:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000fc8:	4434      	add	r4, r6
 8000fca:	44d0      	add	r8, sl
 8000fcc:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000fd0:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000fd4:	eba5 1507 	sub.w	r5, r5, r7, lsl #4
 8000fd8:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 8000fdc:	eba9 190b 	sub.w	r9, r9, fp, lsl #4
 8000fe0:	eb09 1b4b 	add.w	fp, r9, fp, lsl #5
 8000fe4:	eb04 0408 	add.w	r4, r4, r8
 8000fe8:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000fec:	fb59 fc12 	smmulr	ip, r9, r2
 8000ff0:	fb0c 9913 	mls	r9, ip, r3, r9
 8000ff4:	eba5 1589 	sub.w	r5, r5, r9, lsl #6
 8000ff8:	eb05 19c9 	add.w	r9, r5, r9, lsl #7
 8000ffc:	eba6 160a 	sub.w	r6, r6, sl, lsl #4
 8001000:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8001004:	eba7 078b 	sub.w	r7, r7, fp, lsl #2
 8001008:	eb07 0bcb 	add.w	fp, r7, fp, lsl #3
 800100c:	fb56 fc12 	smmulr	ip, r6, r2
 8001010:	fb0c 6613 	mls	r6, ip, r3, r6
 8001014:	fb57 fc12 	smmulr	ip, r7, r2
 8001018:	fb0c 7713 	mls	r7, ip, r3, r7
 800101c:	ebae 0444 	sub.w	r4, lr, r4, lsl #1
 8001020:	f1c5 0500 	rsb	r5, r5, #0
 8001024:	ea4f 16c6 	mov.w	r6, r6, lsl #7
 8001028:	ea4f 1787 	mov.w	r7, r7, lsl #6
 800102c:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001030:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001034:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001038:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800103c:	fb54 fc12 	smmulr	ip, r4, r2
 8001040:	fb0c 4413 	mls	r4, ip, r3, r4
 8001044:	fb55 fc12 	smmulr	ip, r5, r2
 8001048:	fb0c 5513 	mls	r5, ip, r3, r5
 800104c:	fb56 fc12 	smmulr	ip, r6, r2
 8001050:	fb0c 6613 	mls	r6, ip, r3, r6
 8001054:	fb57 fc12 	smmulr	ip, r7, r2
 8001058:	fb0c 7713 	mls	r7, ip, r3, r7
 800105c:	fb58 fc12 	smmulr	ip, r8, r2
 8001060:	fb0c 8813 	mls	r8, ip, r3, r8
 8001064:	fb59 fc12 	smmulr	ip, r9, r2
 8001068:	fb0c 9913 	mls	r9, ip, r3, r9
 800106c:	fb5a fc12 	smmulr	ip, sl, r2
 8001070:	fb0c aa13 	mls	sl, ip, r3, sl
 8001074:	fb5b fc12 	smmulr	ip, fp, r2
 8001078:	fb0c bb13 	mls	fp, ip, r3, fp
 800107c:	f8c0 8200 	str.w	r8, [r0, #512]	; 0x200
 8001080:	f8c0 9280 	str.w	r9, [r0, #640]	; 0x280
 8001084:	f8c0 a300 	str.w	sl, [r0, #768]	; 0x300
 8001088:	f8c0 b380 	str.w	fp, [r0, #896]	; 0x380
 800108c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 8001090:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8001094:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
 8001098:	f840 4b04 	str.w	r4, [r0], #4
 800109c:	f8d0 4000 	ldr.w	r4, [r0]
 80010a0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80010a4:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 80010a8:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
 80010ac:	f8d0 8200 	ldr.w	r8, [r0, #512]	; 0x200
 80010b0:	f8d0 9280 	ldr.w	r9, [r0, #640]	; 0x280
 80010b4:	f8d0 a300 	ldr.w	sl, [r0, #768]	; 0x300
 80010b8:	f8d0 b380 	ldr.w	fp, [r0, #896]	; 0x380
 80010bc:	442c      	add	r4, r5
 80010be:	443e      	add	r6, r7
 80010c0:	44c8      	add	r8, r9
 80010c2:	44da      	add	sl, fp
 80010c4:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 80010c8:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 80010cc:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 80010d0:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 80010d4:	4434      	add	r4, r6
 80010d6:	44d0      	add	r8, sl
 80010d8:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 80010dc:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 80010e0:	eba5 1507 	sub.w	r5, r5, r7, lsl #4
 80010e4:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 80010e8:	eba9 190b 	sub.w	r9, r9, fp, lsl #4
 80010ec:	eb09 1b4b 	add.w	fp, r9, fp, lsl #5
 80010f0:	eb04 0408 	add.w	r4, r4, r8
 80010f4:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 80010f8:	fb59 fc12 	smmulr	ip, r9, r2
 80010fc:	fb0c 9913 	mls	r9, ip, r3, r9
 8001100:	eba5 1589 	sub.w	r5, r5, r9, lsl #6
 8001104:	eb05 19c9 	add.w	r9, r5, r9, lsl #7
 8001108:	eba6 160a 	sub.w	r6, r6, sl, lsl #4
 800110c:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8001110:	eba7 078b 	sub.w	r7, r7, fp, lsl #2
 8001114:	eb07 0bcb 	add.w	fp, r7, fp, lsl #3
 8001118:	fb56 fc12 	smmulr	ip, r6, r2
 800111c:	fb0c 6613 	mls	r6, ip, r3, r6
 8001120:	fb57 fc12 	smmulr	ip, r7, r2
 8001124:	fb0c 7713 	mls	r7, ip, r3, r7
 8001128:	ebae 0444 	sub.w	r4, lr, r4, lsl #1
 800112c:	f1c5 0500 	rsb	r5, r5, #0
 8001130:	ea4f 16c6 	mov.w	r6, r6, lsl #7
 8001134:	ea4f 1787 	mov.w	r7, r7, lsl #6
 8001138:	ea4f 1848 	mov.w	r8, r8, lsl #5
 800113c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001140:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001144:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001148:	fb54 fc12 	smmulr	ip, r4, r2
 800114c:	fb0c 4413 	mls	r4, ip, r3, r4
 8001150:	fb55 fc12 	smmulr	ip, r5, r2
 8001154:	fb0c 5513 	mls	r5, ip, r3, r5
 8001158:	fb56 fc12 	smmulr	ip, r6, r2
 800115c:	fb0c 6613 	mls	r6, ip, r3, r6
 8001160:	fb57 fc12 	smmulr	ip, r7, r2
 8001164:	fb0c 7713 	mls	r7, ip, r3, r7
 8001168:	fb58 fc12 	smmulr	ip, r8, r2
 800116c:	fb0c 8813 	mls	r8, ip, r3, r8
 8001170:	fb59 fc12 	smmulr	ip, r9, r2
 8001174:	fb0c 9913 	mls	r9, ip, r3, r9
 8001178:	fb5a fc12 	smmulr	ip, sl, r2
 800117c:	fb0c aa13 	mls	sl, ip, r3, sl
 8001180:	fb5b fc12 	smmulr	ip, fp, r2
 8001184:	fb0c bb13 	mls	fp, ip, r3, fp
 8001188:	f8c0 8200 	str.w	r8, [r0, #512]	; 0x200
 800118c:	f8c0 9280 	str.w	r9, [r0, #640]	; 0x280
 8001190:	f8c0 a300 	str.w	sl, [r0, #768]	; 0x300
 8001194:	f8c0 b380 	str.w	fp, [r0, #896]	; 0x380
 8001198:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 800119c:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 80011a0:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
 80011a4:	f840 4b04 	str.w	r4, [r0], #4
 80011a8:	ebb0 0f01 	cmp.w	r0, r1
 80011ac:	f47f aef0 	bne.w	8000f90 <_ifnt_0_1_2>
 80011b0:	ecbd 8a09 	vpop	{s16-s24}
 80011b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b8:	fb20 0000 	smlad	r0, r0, r0, r0

080011bc <pqcrystals_dilithium_ntt>:
 80011bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c0:	f8df 29f0 	ldr.w	r2, [pc, #2544]	; 8001bb4 <inv_ntt_asm_smull_qinv>
 80011c4:	f8df 39f0 	ldr.w	r3, [pc, #2544]	; 8001bb8 <inv_ntt_asm_smull_q>
 80011c8:	f8df 15b4 	ldr.w	r1, [pc, #1460]	; 8001780 <pqcrystals_dilithium_ntt+0x5c4>
 80011cc:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 80011d0:	ee00 1a10 	vmov	s0, r1
 80011d4:	f100 0a80 	add.w	sl, r0, #128	; 0x80
 80011d8:	ee04 aa90 	vmov	s9, sl
 80011dc:	f8d0 5000 	ldr.w	r5, [r0]
 80011e0:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80011e4:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80011e8:	f8d0 8180 	ldr.w	r8, [r0, #384]	; 0x180
 80011ec:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 80011f0:	f8d0 b280 	ldr.w	fp, [r0, #640]	; 0x280
 80011f4:	f8d0 c300 	ldr.w	ip, [r0, #768]	; 0x300
 80011f8:	f8d0 e380 	ldr.w	lr, [r0, #896]	; 0x380
 80011fc:	ee11 1a10 	vmov	r1, s2
 8001200:	fb84 9401 	smull	r9, r4, r4, r1
 8001204:	fb09 fa02 	mul.w	sl, r9, r2
 8001208:	fbca 9403 	smlal	r9, r4, sl, r3
 800120c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001210:	fb09 fa02 	mul.w	sl, r9, r2
 8001214:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001218:	fb8c 9c01 	smull	r9, ip, ip, r1
 800121c:	fb09 fa02 	mul.w	sl, r9, r2
 8001220:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001224:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001228:	fb09 fa02 	mul.w	sl, r9, r2
 800122c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001230:	4425      	add	r5, r4
 8001232:	445e      	add	r6, fp
 8001234:	4467      	add	r7, ip
 8001236:	44f0      	add	r8, lr
 8001238:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800123c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001240:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001244:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001248:	ee11 1a90 	vmov	r1, s3
 800124c:	fb87 9701 	smull	r9, r7, r7, r1
 8001250:	fb09 fa02 	mul.w	sl, r9, r2
 8001254:	fbca 9703 	smlal	r9, r7, sl, r3
 8001258:	fb88 9801 	smull	r9, r8, r8, r1
 800125c:	fb09 fa02 	mul.w	sl, r9, r2
 8001260:	fbca 9803 	smlal	r9, r8, sl, r3
 8001264:	ee12 1a10 	vmov	r1, s4
 8001268:	fb8c 9c01 	smull	r9, ip, ip, r1
 800126c:	fb09 fa02 	mul.w	sl, r9, r2
 8001270:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001274:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001278:	fb09 fa02 	mul.w	sl, r9, r2
 800127c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001280:	443d      	add	r5, r7
 8001282:	4446      	add	r6, r8
 8001284:	4464      	add	r4, ip
 8001286:	44f3      	add	fp, lr
 8001288:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800128c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001290:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001294:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001298:	ee12 1a90 	vmov	r1, s5
 800129c:	fb86 9601 	smull	r9, r6, r6, r1
 80012a0:	fb09 fa02 	mul.w	sl, r9, r2
 80012a4:	fbca 9603 	smlal	r9, r6, sl, r3
 80012a8:	ee13 1a10 	vmov	r1, s6
 80012ac:	fb88 9801 	smull	r9, r8, r8, r1
 80012b0:	fb09 fa02 	mul.w	sl, r9, r2
 80012b4:	fbca 9803 	smlal	r9, r8, sl, r3
 80012b8:	ee13 1a90 	vmov	r1, s7
 80012bc:	fb8b 9b01 	smull	r9, fp, fp, r1
 80012c0:	fb09 fa02 	mul.w	sl, r9, r2
 80012c4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80012c8:	ee14 1a10 	vmov	r1, s8
 80012cc:	fb8e 9e01 	smull	r9, lr, lr, r1
 80012d0:	fb09 fa02 	mul.w	sl, r9, r2
 80012d4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80012d8:	4435      	add	r5, r6
 80012da:	4447      	add	r7, r8
 80012dc:	445c      	add	r4, fp
 80012de:	44f4      	add	ip, lr
 80012e0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80012e4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80012e8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80012ec:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80012f0:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 80012f4:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
 80012f8:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
 80012fc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 8001300:	f8c0 b280 	str.w	fp, [r0, #640]	; 0x280
 8001304:	f8c0 c300 	str.w	ip, [r0, #768]	; 0x300
 8001308:	f8c0 e380 	str.w	lr, [r0, #896]	; 0x380
 800130c:	f840 5b04 	str.w	r5, [r0], #4
 8001310:	f8d0 5000 	ldr.w	r5, [r0]
 8001314:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8001318:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 800131c:	f8d0 8180 	ldr.w	r8, [r0, #384]	; 0x180
 8001320:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8001324:	f8d0 b280 	ldr.w	fp, [r0, #640]	; 0x280
 8001328:	f8d0 c300 	ldr.w	ip, [r0, #768]	; 0x300
 800132c:	f8d0 e380 	ldr.w	lr, [r0, #896]	; 0x380
 8001330:	ee11 1a10 	vmov	r1, s2
 8001334:	fb84 9401 	smull	r9, r4, r4, r1
 8001338:	fb09 fa02 	mul.w	sl, r9, r2
 800133c:	fbca 9403 	smlal	r9, r4, sl, r3
 8001340:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001344:	fb09 fa02 	mul.w	sl, r9, r2
 8001348:	fbca 9b03 	smlal	r9, fp, sl, r3
 800134c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001350:	fb09 fa02 	mul.w	sl, r9, r2
 8001354:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001358:	fb8e 9e01 	smull	r9, lr, lr, r1
 800135c:	fb09 fa02 	mul.w	sl, r9, r2
 8001360:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001364:	4425      	add	r5, r4
 8001366:	445e      	add	r6, fp
 8001368:	4467      	add	r7, ip
 800136a:	44f0      	add	r8, lr
 800136c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001370:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001374:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001378:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800137c:	ee11 1a90 	vmov	r1, s3
 8001380:	fb87 9701 	smull	r9, r7, r7, r1
 8001384:	fb09 fa02 	mul.w	sl, r9, r2
 8001388:	fbca 9703 	smlal	r9, r7, sl, r3
 800138c:	fb88 9801 	smull	r9, r8, r8, r1
 8001390:	fb09 fa02 	mul.w	sl, r9, r2
 8001394:	fbca 9803 	smlal	r9, r8, sl, r3
 8001398:	ee12 1a10 	vmov	r1, s4
 800139c:	fb8c 9c01 	smull	r9, ip, ip, r1
 80013a0:	fb09 fa02 	mul.w	sl, r9, r2
 80013a4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80013a8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80013ac:	fb09 fa02 	mul.w	sl, r9, r2
 80013b0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80013b4:	443d      	add	r5, r7
 80013b6:	4446      	add	r6, r8
 80013b8:	4464      	add	r4, ip
 80013ba:	44f3      	add	fp, lr
 80013bc:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80013c0:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80013c4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80013c8:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80013cc:	ee12 1a90 	vmov	r1, s5
 80013d0:	fb86 9601 	smull	r9, r6, r6, r1
 80013d4:	fb09 fa02 	mul.w	sl, r9, r2
 80013d8:	fbca 9603 	smlal	r9, r6, sl, r3
 80013dc:	ee13 1a10 	vmov	r1, s6
 80013e0:	fb88 9801 	smull	r9, r8, r8, r1
 80013e4:	fb09 fa02 	mul.w	sl, r9, r2
 80013e8:	fbca 9803 	smlal	r9, r8, sl, r3
 80013ec:	ee13 1a90 	vmov	r1, s7
 80013f0:	fb8b 9b01 	smull	r9, fp, fp, r1
 80013f4:	fb09 fa02 	mul.w	sl, r9, r2
 80013f8:	fbca 9b03 	smlal	r9, fp, sl, r3
 80013fc:	ee14 1a10 	vmov	r1, s8
 8001400:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001404:	fb09 fa02 	mul.w	sl, r9, r2
 8001408:	fbca 9e03 	smlal	r9, lr, sl, r3
 800140c:	4435      	add	r5, r6
 800140e:	4447      	add	r7, r8
 8001410:	445c      	add	r4, fp
 8001412:	44f4      	add	ip, lr
 8001414:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001418:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800141c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8001420:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8001424:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8001428:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
 800142c:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
 8001430:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 8001434:	f8c0 b280 	str.w	fp, [r0, #640]	; 0x280
 8001438:	f8c0 c300 	str.w	ip, [r0, #768]	; 0x300
 800143c:	f8c0 e380 	str.w	lr, [r0, #896]	; 0x380
 8001440:	f840 5b04 	str.w	r5, [r0], #4
 8001444:	ee14 aa90 	vmov	sl, s9
 8001448:	ebb0 0f0a 	cmp.w	r0, sl
 800144c:	f47f aec6 	bne.w	80011dc <pqcrystals_dilithium_ntt+0x20>
 8001450:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8001454:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8001458:	ee04 aa90 	vmov	s9, sl
 800145c:	f100 0a10 	add.w	sl, r0, #16
 8001460:	ee05 aa10 	vmov	s10, sl
 8001464:	ee10 1a10 	vmov	r1, s0
 8001468:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 800146c:	ee00 1a10 	vmov	s0, r1
 8001470:	f8d0 5000 	ldr.w	r5, [r0]
 8001474:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8001478:	f8d0 7020 	ldr.w	r7, [r0, #32]
 800147c:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 8001480:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 8001484:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
 8001488:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 800148c:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
 8001490:	ee11 1a10 	vmov	r1, s2
 8001494:	fb84 9401 	smull	r9, r4, r4, r1
 8001498:	fb09 fa02 	mul.w	sl, r9, r2
 800149c:	fbca 9403 	smlal	r9, r4, sl, r3
 80014a0:	fb8b 9b01 	smull	r9, fp, fp, r1
 80014a4:	fb09 fa02 	mul.w	sl, r9, r2
 80014a8:	fbca 9b03 	smlal	r9, fp, sl, r3
 80014ac:	fb8c 9c01 	smull	r9, ip, ip, r1
 80014b0:	fb09 fa02 	mul.w	sl, r9, r2
 80014b4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80014b8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80014bc:	fb09 fa02 	mul.w	sl, r9, r2
 80014c0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80014c4:	4425      	add	r5, r4
 80014c6:	445e      	add	r6, fp
 80014c8:	4467      	add	r7, ip
 80014ca:	44f0      	add	r8, lr
 80014cc:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80014d0:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80014d4:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80014d8:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80014dc:	ee11 1a90 	vmov	r1, s3
 80014e0:	fb87 9701 	smull	r9, r7, r7, r1
 80014e4:	fb09 fa02 	mul.w	sl, r9, r2
 80014e8:	fbca 9703 	smlal	r9, r7, sl, r3
 80014ec:	fb88 9801 	smull	r9, r8, r8, r1
 80014f0:	fb09 fa02 	mul.w	sl, r9, r2
 80014f4:	fbca 9803 	smlal	r9, r8, sl, r3
 80014f8:	ee12 1a10 	vmov	r1, s4
 80014fc:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001500:	fb09 fa02 	mul.w	sl, r9, r2
 8001504:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001508:	fb8e 9e01 	smull	r9, lr, lr, r1
 800150c:	fb09 fa02 	mul.w	sl, r9, r2
 8001510:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001514:	443d      	add	r5, r7
 8001516:	4446      	add	r6, r8
 8001518:	4464      	add	r4, ip
 800151a:	44f3      	add	fp, lr
 800151c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001520:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001524:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001528:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 800152c:	ee12 1a90 	vmov	r1, s5
 8001530:	fb86 9601 	smull	r9, r6, r6, r1
 8001534:	fb09 fa02 	mul.w	sl, r9, r2
 8001538:	fbca 9603 	smlal	r9, r6, sl, r3
 800153c:	ee13 1a10 	vmov	r1, s6
 8001540:	fb88 9801 	smull	r9, r8, r8, r1
 8001544:	fb09 fa02 	mul.w	sl, r9, r2
 8001548:	fbca 9803 	smlal	r9, r8, sl, r3
 800154c:	ee13 1a90 	vmov	r1, s7
 8001550:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001554:	fb09 fa02 	mul.w	sl, r9, r2
 8001558:	fbca 9b03 	smlal	r9, fp, sl, r3
 800155c:	ee14 1a10 	vmov	r1, s8
 8001560:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001564:	fb09 fa02 	mul.w	sl, r9, r2
 8001568:	fbca 9e03 	smlal	r9, lr, sl, r3
 800156c:	4435      	add	r5, r6
 800156e:	4447      	add	r7, r8
 8001570:	445c      	add	r4, fp
 8001572:	44f4      	add	ip, lr
 8001574:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001578:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800157c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8001580:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8001584:	f8c0 6010 	str.w	r6, [r0, #16]
 8001588:	f8c0 7020 	str.w	r7, [r0, #32]
 800158c:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 8001590:	f8c0 4040 	str.w	r4, [r0, #64]	; 0x40
 8001594:	f8c0 b050 	str.w	fp, [r0, #80]	; 0x50
 8001598:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 800159c:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
 80015a0:	f840 5b04 	str.w	r5, [r0], #4
 80015a4:	f8d0 5000 	ldr.w	r5, [r0]
 80015a8:	f8d0 6010 	ldr.w	r6, [r0, #16]
 80015ac:	f8d0 7020 	ldr.w	r7, [r0, #32]
 80015b0:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 80015b4:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 80015b8:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
 80015bc:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 80015c0:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
 80015c4:	ee11 1a10 	vmov	r1, s2
 80015c8:	fb84 9401 	smull	r9, r4, r4, r1
 80015cc:	fb09 fa02 	mul.w	sl, r9, r2
 80015d0:	fbca 9403 	smlal	r9, r4, sl, r3
 80015d4:	fb8b 9b01 	smull	r9, fp, fp, r1
 80015d8:	fb09 fa02 	mul.w	sl, r9, r2
 80015dc:	fbca 9b03 	smlal	r9, fp, sl, r3
 80015e0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80015e4:	fb09 fa02 	mul.w	sl, r9, r2
 80015e8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80015ec:	fb8e 9e01 	smull	r9, lr, lr, r1
 80015f0:	fb09 fa02 	mul.w	sl, r9, r2
 80015f4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80015f8:	4425      	add	r5, r4
 80015fa:	445e      	add	r6, fp
 80015fc:	4467      	add	r7, ip
 80015fe:	44f0      	add	r8, lr
 8001600:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001604:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001608:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 800160c:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001610:	ee11 1a90 	vmov	r1, s3
 8001614:	fb87 9701 	smull	r9, r7, r7, r1
 8001618:	fb09 fa02 	mul.w	sl, r9, r2
 800161c:	fbca 9703 	smlal	r9, r7, sl, r3
 8001620:	fb88 9801 	smull	r9, r8, r8, r1
 8001624:	fb09 fa02 	mul.w	sl, r9, r2
 8001628:	fbca 9803 	smlal	r9, r8, sl, r3
 800162c:	ee12 1a10 	vmov	r1, s4
 8001630:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001634:	fb09 fa02 	mul.w	sl, r9, r2
 8001638:	fbca 9c03 	smlal	r9, ip, sl, r3
 800163c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001640:	fb09 fa02 	mul.w	sl, r9, r2
 8001644:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001648:	443d      	add	r5, r7
 800164a:	4446      	add	r6, r8
 800164c:	4464      	add	r4, ip
 800164e:	44f3      	add	fp, lr
 8001650:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001654:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001658:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 800165c:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001660:	ee12 1a90 	vmov	r1, s5
 8001664:	fb86 9601 	smull	r9, r6, r6, r1
 8001668:	fb09 fa02 	mul.w	sl, r9, r2
 800166c:	fbca 9603 	smlal	r9, r6, sl, r3
 8001670:	ee13 1a10 	vmov	r1, s6
 8001674:	fb88 9801 	smull	r9, r8, r8, r1
 8001678:	fb09 fa02 	mul.w	sl, r9, r2
 800167c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001680:	ee13 1a90 	vmov	r1, s7
 8001684:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001688:	fb09 fa02 	mul.w	sl, r9, r2
 800168c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001690:	ee14 1a10 	vmov	r1, s8
 8001694:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001698:	fb09 fa02 	mul.w	sl, r9, r2
 800169c:	fbca 9e03 	smlal	r9, lr, sl, r3
 80016a0:	4435      	add	r5, r6
 80016a2:	4447      	add	r7, r8
 80016a4:	445c      	add	r4, fp
 80016a6:	44f4      	add	ip, lr
 80016a8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80016ac:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80016b0:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80016b4:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80016b8:	f8c0 6010 	str.w	r6, [r0, #16]
 80016bc:	f8c0 7020 	str.w	r7, [r0, #32]
 80016c0:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 80016c4:	f8c0 4040 	str.w	r4, [r0, #64]	; 0x40
 80016c8:	f8c0 b050 	str.w	fp, [r0, #80]	; 0x50
 80016cc:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 80016d0:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
 80016d4:	f840 5b04 	str.w	r5, [r0], #4
 80016d8:	ee15 aa10 	vmov	sl, s10
 80016dc:	ebb0 0f0a 	cmp.w	r0, sl
 80016e0:	f47f aec6 	bne.w	8001470 <pqcrystals_dilithium_ntt+0x2b4>
 80016e4:	f100 0070 	add.w	r0, r0, #112	; 0x70
 80016e8:	ee14 aa90 	vmov	sl, s9
 80016ec:	ebb0 0f0a 	cmp.w	r0, sl
 80016f0:	f47f aeb4 	bne.w	800145c <pqcrystals_dilithium_ntt+0x2a0>
 80016f4:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 80016f8:	ee10 1a10 	vmov	r1, s0
 80016fc:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001700:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001704:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001708:	f851 bb0c 	ldr.w	fp, [r1], #12
 800170c:	f8d0 5000 	ldr.w	r5, [r0]
 8001710:	f8d0 6004 	ldr.w	r6, [r0, #4]
 8001714:	f8d0 7008 	ldr.w	r7, [r0, #8]
 8001718:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800171c:	fb87 970b 	smull	r9, r7, r7, fp
 8001720:	fb09 fa02 	mul.w	sl, r9, r2
 8001724:	fbca 9703 	smlal	r9, r7, sl, r3
 8001728:	fb88 980b 	smull	r9, r8, r8, fp
 800172c:	fb09 fa02 	mul.w	sl, r9, r2
 8001730:	fbca 9803 	smlal	r9, r8, sl, r3
 8001734:	443d      	add	r5, r7
 8001736:	4446      	add	r6, r8
 8001738:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800173c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001740:	fb86 960c 	smull	r9, r6, r6, ip
 8001744:	fb09 fa02 	mul.w	sl, r9, r2
 8001748:	fbca 9603 	smlal	r9, r6, sl, r3
 800174c:	fb88 980e 	smull	r9, r8, r8, lr
 8001750:	fb09 fa02 	mul.w	sl, r9, r2
 8001754:	fbca 9803 	smlal	r9, r8, sl, r3
 8001758:	4435      	add	r5, r6
 800175a:	4447      	add	r7, r8
 800175c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001760:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001764:	f8c0 6004 	str.w	r6, [r0, #4]
 8001768:	f8c0 7008 	str.w	r7, [r0, #8]
 800176c:	f8c0 800c 	str.w	r8, [r0, #12]
 8001770:	f840 5b10 	str.w	r5, [r0], #16
 8001774:	ebb4 0f00 	cmp.w	r4, r0
 8001778:	f47f afc2 	bne.w	8001700 <pqcrystals_dilithium_ntt+0x544>
 800177c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001780:	0800c7d8 	.word	0x0800c7d8

08001784 <pqcrystals_dilithium_invntt_tomont>:
 8001784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001788:	f8df 2428 	ldr.w	r2, [pc, #1064]	; 8001bb4 <inv_ntt_asm_smull_qinv>
 800178c:	f8df 3428 	ldr.w	r3, [pc, #1064]	; 8001bb8 <inv_ntt_asm_smull_q>
 8001790:	f8df 1428 	ldr.w	r1, [pc, #1064]	; 8001bbc <inv_ntt_asm_smull_q+0x4>
 8001794:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001798:	ee00 1a10 	vmov	s0, r1
 800179c:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 80017a0:	ee04 aa90 	vmov	s9, sl
 80017a4:	f8d0 4010 	ldr.w	r4, [r0, #16]
 80017a8:	f8d0 6014 	ldr.w	r6, [r0, #20]
 80017ac:	f8d0 c018 	ldr.w	ip, [r0, #24]
 80017b0:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80017b4:	4434      	add	r4, r6
 80017b6:	44c4      	add	ip, r8
 80017b8:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 80017bc:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 80017c0:	eb04 040c 	add.w	r4, r4, ip
 80017c4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80017c8:	ee13 9a10 	vmov	r9, s6
 80017cc:	ee14 aa10 	vmov	sl, s8
 80017d0:	fb86 5b09 	smull	r5, fp, r6, r9
 80017d4:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 80017d8:	fb05 f102 	mul.w	r1, r5, r2
 80017dc:	fbc1 5b03 	smlal	r5, fp, r1, r3
 80017e0:	fb86 7e0a 	smull	r7, lr, r6, sl
 80017e4:	fbc8 7e09 	smlal	r7, lr, r8, r9
 80017e8:	fb07 f102 	mul.w	r1, r7, r2
 80017ec:	fbc1 7e03 	smlal	r7, lr, r1, r3
 80017f0:	f8d0 5000 	ldr.w	r5, [r0]
 80017f4:	f8d0 6004 	ldr.w	r6, [r0, #4]
 80017f8:	f8d0 7008 	ldr.w	r7, [r0, #8]
 80017fc:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8001800:	4435      	add	r5, r6
 8001802:	4447      	add	r7, r8
 8001804:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001808:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800180c:	ee12 1a10 	vmov	r1, s4
 8001810:	fb88 9801 	smull	r9, r8, r8, r1
 8001814:	fb09 fa02 	mul.w	sl, r9, r2
 8001818:	fbca 9803 	smlal	r9, r8, sl, r3
 800181c:	443d      	add	r5, r7
 800181e:	4446      	add	r6, r8
 8001820:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001824:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001828:	fb8c 9c01 	smull	r9, ip, ip, r1
 800182c:	fb09 fa02 	mul.w	sl, r9, r2
 8001830:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001834:	4425      	add	r5, r4
 8001836:	445e      	add	r6, fp
 8001838:	4467      	add	r7, ip
 800183a:	44f0      	add	r8, lr
 800183c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001840:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001844:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001848:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800184c:	f8c0 6004 	str.w	r6, [r0, #4]
 8001850:	f8c0 7008 	str.w	r7, [r0, #8]
 8001854:	f8c0 800c 	str.w	r8, [r0, #12]
 8001858:	f8c0 4010 	str.w	r4, [r0, #16]
 800185c:	f8c0 b014 	str.w	fp, [r0, #20]
 8001860:	f8c0 c018 	str.w	ip, [r0, #24]
 8001864:	f8c0 e01c 	str.w	lr, [r0, #28]
 8001868:	f840 5b20 	str.w	r5, [r0], #32
 800186c:	ee14 aa90 	vmov	sl, s9
 8001870:	ebb0 0f0a 	cmp.w	r0, sl
 8001874:	f47f af96 	bne.w	80017a4 <pqcrystals_dilithium_invntt_tomont+0x20>
 8001878:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 800187c:	f240 0a04 	movw	sl, #4
 8001880:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8001884:	ee05 aa10 	vmov	s10, sl
 8001888:	ee10 1a10 	vmov	r1, s0
 800188c:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001890:	ee00 1a10 	vmov	s0, r1
 8001894:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 8001898:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 800189c:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	; 0xc0
 80018a0:	f8d0 80e0 	ldr.w	r8, [r0, #224]	; 0xe0
 80018a4:	4434      	add	r4, r6
 80018a6:	44c4      	add	ip, r8
 80018a8:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 80018ac:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 80018b0:	eb04 040c 	add.w	r4, r4, ip
 80018b4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80018b8:	ee13 9a10 	vmov	r9, s6
 80018bc:	ee14 aa10 	vmov	sl, s8
 80018c0:	fb86 5b09 	smull	r5, fp, r6, r9
 80018c4:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 80018c8:	fb05 f102 	mul.w	r1, r5, r2
 80018cc:	fbc1 5b03 	smlal	r5, fp, r1, r3
 80018d0:	fb86 7e0a 	smull	r7, lr, r6, sl
 80018d4:	fbc8 7e09 	smlal	r7, lr, r8, r9
 80018d8:	fb07 f102 	mul.w	r1, r7, r2
 80018dc:	fbc1 7e03 	smlal	r7, lr, r1, r3
 80018e0:	f8d0 5000 	ldr.w	r5, [r0]
 80018e4:	f8d0 6020 	ldr.w	r6, [r0, #32]
 80018e8:	f8d0 7040 	ldr.w	r7, [r0, #64]	; 0x40
 80018ec:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 80018f0:	4435      	add	r5, r6
 80018f2:	4447      	add	r7, r8
 80018f4:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80018f8:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80018fc:	ee12 1a10 	vmov	r1, s4
 8001900:	fb88 9801 	smull	r9, r8, r8, r1
 8001904:	fb09 fa02 	mul.w	sl, r9, r2
 8001908:	fbca 9803 	smlal	r9, r8, sl, r3
 800190c:	443d      	add	r5, r7
 800190e:	4446      	add	r6, r8
 8001910:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001914:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001918:	fb8c 9c01 	smull	r9, ip, ip, r1
 800191c:	fb09 fa02 	mul.w	sl, r9, r2
 8001920:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001924:	4425      	add	r5, r4
 8001926:	445e      	add	r6, fp
 8001928:	4467      	add	r7, ip
 800192a:	44f0      	add	r8, lr
 800192c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001930:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001934:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001938:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800193c:	f8c0 6020 	str.w	r6, [r0, #32]
 8001940:	f8c0 7040 	str.w	r7, [r0, #64]	; 0x40
 8001944:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
 8001948:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800194c:	f8c0 b0a0 	str.w	fp, [r0, #160]	; 0xa0
 8001950:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 8001954:	f8c0 e0e0 	str.w	lr, [r0, #224]	; 0xe0
 8001958:	f8c0 5000 	str.w	r5, [r0]
 800195c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001960:	ee15 aa10 	vmov	sl, s10
 8001964:	ebba 0f00 	cmp.w	sl, r0
 8001968:	f47f af94 	bne.w	8001894 <pqcrystals_dilithium_invntt_tomont+0x110>
 800196c:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
 8001970:	f100 0a1c 	add.w	sl, r0, #28
 8001974:	ee04 aa90 	vmov	s9, sl
 8001978:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 800197c:	ee05 aa10 	vmov	s10, sl
 8001980:	ee10 1a10 	vmov	r1, s0
 8001984:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001988:	ee00 1a10 	vmov	s0, r1
 800198c:	f8d0 5000 	ldr.w	r5, [r0]
 8001990:	f8d0 6020 	ldr.w	r6, [r0, #32]
 8001994:	f8d0 7040 	ldr.w	r7, [r0, #64]	; 0x40
 8001998:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 800199c:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 80019a0:	f8d0 b0a0 	ldr.w	fp, [r0, #160]	; 0xa0
 80019a4:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	; 0xc0
 80019a8:	f8d0 e0e0 	ldr.w	lr, [r0, #224]	; 0xe0
 80019ac:	ee11 1a10 	vmov	r1, s2
 80019b0:	fb86 9601 	smull	r9, r6, r6, r1
 80019b4:	fb09 fa02 	mul.w	sl, r9, r2
 80019b8:	fbca 9603 	smlal	r9, r6, sl, r3
 80019bc:	fb88 9801 	smull	r9, r8, r8, r1
 80019c0:	fb09 fa02 	mul.w	sl, r9, r2
 80019c4:	fbca 9803 	smlal	r9, r8, sl, r3
 80019c8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80019cc:	fb09 fa02 	mul.w	sl, r9, r2
 80019d0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80019d4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80019d8:	fb09 fa02 	mul.w	sl, r9, r2
 80019dc:	fbca 9e03 	smlal	r9, lr, sl, r3
 80019e0:	4435      	add	r5, r6
 80019e2:	4447      	add	r7, r8
 80019e4:	445c      	add	r4, fp
 80019e6:	44f4      	add	ip, lr
 80019e8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80019ec:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80019f0:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80019f4:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80019f8:	ee11 1a90 	vmov	r1, s3
 80019fc:	fb87 9701 	smull	r9, r7, r7, r1
 8001a00:	fb09 fa02 	mul.w	sl, r9, r2
 8001a04:	fbca 9703 	smlal	r9, r7, sl, r3
 8001a08:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001a0c:	fb09 fa02 	mul.w	sl, r9, r2
 8001a10:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001a14:	ee12 1a10 	vmov	r1, s4
 8001a18:	fb88 9801 	smull	r9, r8, r8, r1
 8001a1c:	fb09 fa02 	mul.w	sl, r9, r2
 8001a20:	fbca 9803 	smlal	r9, r8, sl, r3
 8001a24:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001a28:	fb09 fa02 	mul.w	sl, r9, r2
 8001a2c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001a30:	443d      	add	r5, r7
 8001a32:	4446      	add	r6, r8
 8001a34:	4464      	add	r4, ip
 8001a36:	44f3      	add	fp, lr
 8001a38:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001a3c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001a40:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001a44:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001a48:	ee12 1a90 	vmov	r1, s5
 8001a4c:	fb84 9401 	smull	r9, r4, r4, r1
 8001a50:	fb09 fa02 	mul.w	sl, r9, r2
 8001a54:	fbca 9403 	smlal	r9, r4, sl, r3
 8001a58:	ee13 1a10 	vmov	r1, s6
 8001a5c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001a60:	fb09 fa02 	mul.w	sl, r9, r2
 8001a64:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001a68:	ee13 1a90 	vmov	r1, s7
 8001a6c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001a70:	fb09 fa02 	mul.w	sl, r9, r2
 8001a74:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001a78:	ee14 1a10 	vmov	r1, s8
 8001a7c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001a80:	fb09 fa02 	mul.w	sl, r9, r2
 8001a84:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001a88:	4425      	add	r5, r4
 8001a8a:	445e      	add	r6, fp
 8001a8c:	4467      	add	r7, ip
 8001a8e:	44f0      	add	r8, lr
 8001a90:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001a94:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001a98:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001a9c:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001aa0:	f8c0 6020 	str.w	r6, [r0, #32]
 8001aa4:	f8c0 7040 	str.w	r7, [r0, #64]	; 0x40
 8001aa8:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
 8001aac:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8001ab0:	f8c0 b0a0 	str.w	fp, [r0, #160]	; 0xa0
 8001ab4:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 8001ab8:	f8c0 e0e0 	str.w	lr, [r0, #224]	; 0xe0
 8001abc:	f8c0 5000 	str.w	r5, [r0]
 8001ac0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001ac4:	ee15 aa10 	vmov	sl, s10
 8001ac8:	ebb0 0f0a 	cmp.w	r0, sl
 8001acc:	f47f af5e 	bne.w	800198c <pqcrystals_dilithium_invntt_tomont+0x208>
 8001ad0:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
 8001ad4:	ee14 aa90 	vmov	sl, s9
 8001ad8:	ebba 0f00 	cmp.w	sl, r0
 8001adc:	f47f af4c 	bne.w	8001978 <pqcrystals_dilithium_invntt_tomont+0x1f4>
 8001ae0:	f1a0 0020 	sub.w	r0, r0, #32
 8001ae4:	ee10 1a10 	vmov	r1, s0
 8001ae8:	f500 7480 	add.w	r4, r0, #256	; 0x100
 8001aec:	ee04 4a90 	vmov	s9, r4
 8001af0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001af4:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001af8:	f851 bb0c 	ldr.w	fp, [r1], #12
 8001afc:	f8d0 5000 	ldr.w	r5, [r0]
 8001b00:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 8001b04:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8001b08:	f8d0 8300 	ldr.w	r8, [r0, #768]	; 0x300
 8001b0c:	fb86 960b 	smull	r9, r6, r6, fp
 8001b10:	fb09 fa02 	mul.w	sl, r9, r2
 8001b14:	fbca 9603 	smlal	r9, r6, sl, r3
 8001b18:	fb88 980b 	smull	r9, r8, r8, fp
 8001b1c:	fb09 fa02 	mul.w	sl, r9, r2
 8001b20:	fbca 9803 	smlal	r9, r8, sl, r3
 8001b24:	4435      	add	r5, r6
 8001b26:	4447      	add	r7, r8
 8001b28:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001b2c:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001b30:	fb87 970c 	smull	r9, r7, r7, ip
 8001b34:	fb09 fa02 	mul.w	sl, r9, r2
 8001b38:	fbca 9703 	smlal	r9, r7, sl, r3
 8001b3c:	fb88 980e 	smull	r9, r8, r8, lr
 8001b40:	fb09 fa02 	mul.w	sl, r9, r2
 8001b44:	fbca 9803 	smlal	r9, r8, sl, r3
 8001b48:	443d      	add	r5, r7
 8001b4a:	4446      	add	r6, r8
 8001b4c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001b50:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001b54:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001b58:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001b5c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8001b60:	f851 4b10 	ldr.w	r4, [r1], #16
 8001b64:	fb85 9504 	smull	r9, r5, r5, r4
 8001b68:	fb09 fa02 	mul.w	sl, r9, r2
 8001b6c:	fbca 9503 	smlal	r9, r5, sl, r3
 8001b70:	fb86 960c 	smull	r9, r6, r6, ip
 8001b74:	fb09 fa02 	mul.w	sl, r9, r2
 8001b78:	fbca 9603 	smlal	r9, r6, sl, r3
 8001b7c:	fb87 970e 	smull	r9, r7, r7, lr
 8001b80:	fb09 fa02 	mul.w	sl, r9, r2
 8001b84:	fbca 9703 	smlal	r9, r7, sl, r3
 8001b88:	fb88 980b 	smull	r9, r8, r8, fp
 8001b8c:	fb09 fa02 	mul.w	sl, r9, r2
 8001b90:	fbca 9803 	smlal	r9, r8, sl, r3
 8001b94:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8001b98:	f8c0 7200 	str.w	r7, [r0, #512]	; 0x200
 8001b9c:	f8c0 8300 	str.w	r8, [r0, #768]	; 0x300
 8001ba0:	f840 5b04 	str.w	r5, [r0], #4
 8001ba4:	ee14 4a90 	vmov	r4, s9
 8001ba8:	ebb4 0f00 	cmp.w	r4, r0
 8001bac:	f47f afa0 	bne.w	8001af0 <pqcrystals_dilithium_invntt_tomont+0x36c>
 8001bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bb4 <inv_ntt_asm_smull_qinv>:
 8001bb4:	fc7fdfff 	.word	0xfc7fdfff

08001bb8 <inv_ntt_asm_smull_q>:
 8001bb8:	007fe001 	.word	0x007fe001
 8001bbc:	0800cbd4 	.word	0x0800cbd4

08001bc0 <pqcrystals_dilithium_asm_pointwise_montgomery>:
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001bc8:	f6cf 437f 	movt	r3, #64639	; 0xfc7f
 8001bcc:	f24e 0401 	movw	r4, #57345	; 0xe001
 8001bd0:	f2c0 047f 	movt	r4, #127	; 0x7f
 8001bd4:	f240 0c55 	movw	ip, #85	; 0x55
 8001bd8:	f8d1 6004 	ldr.w	r6, [r1, #4]
 8001bdc:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8001be0:	f851 5b0c 	ldr.w	r5, [r1], #12
 8001be4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8001be8:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001bec:	f852 8b0c 	ldr.w	r8, [r2], #12
 8001bf0:	fb85 5e08 	smull	r5, lr, r5, r8
 8001bf4:	fb05 f803 	mul.w	r8, r5, r3
 8001bf8:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001bfc:	f840 eb04 	str.w	lr, [r0], #4
 8001c00:	fb86 6e09 	smull	r6, lr, r6, r9
 8001c04:	fb06 f903 	mul.w	r9, r6, r3
 8001c08:	fbc9 6e04 	smlal	r6, lr, r9, r4
 8001c0c:	f840 eb04 	str.w	lr, [r0], #4
 8001c10:	fb87 7e0a 	smull	r7, lr, r7, sl
 8001c14:	fb07 fa03 	mul.w	sl, r7, r3
 8001c18:	fbca 7e04 	smlal	r7, lr, sl, r4
 8001c1c:	f840 eb04 	str.w	lr, [r0], #4
 8001c20:	f1bc 0c01 	subs.w	ip, ip, #1
 8001c24:	f47f afd8 	bne.w	8001bd8 <pqcrystals_dilithium_asm_pointwise_montgomery+0x18>
 8001c28:	f8d1 5000 	ldr.w	r5, [r1]
 8001c2c:	f8d2 8000 	ldr.w	r8, [r2]
 8001c30:	fb85 5e08 	smull	r5, lr, r5, r8
 8001c34:	fb05 f803 	mul.w	r8, r5, r3
 8001c38:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001c3c:	f8c0 e000 	str.w	lr, [r0]
 8001c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c44 <pqcrystals_dilithium_asm_pointwise_acc_montgomery>:
 8001c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c48:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001c4c:	f6cf 437f 	movt	r3, #64639	; 0xfc7f
 8001c50:	f24e 0401 	movw	r4, #57345	; 0xe001
 8001c54:	f2c0 047f 	movt	r4, #127	; 0x7f
 8001c58:	f240 0c55 	movw	ip, #85	; 0x55
 8001c5c:	f8d1 6004 	ldr.w	r6, [r1, #4]
 8001c60:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8001c64:	f851 5b0c 	ldr.w	r5, [r1], #12
 8001c68:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8001c6c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001c70:	f852 8b0c 	ldr.w	r8, [r2], #12
 8001c74:	fb85 5e08 	smull	r5, lr, r5, r8
 8001c78:	fb05 f803 	mul.w	r8, r5, r3
 8001c7c:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001c80:	fb86 6509 	smull	r6, r5, r6, r9
 8001c84:	fb06 f903 	mul.w	r9, r6, r3
 8001c88:	fbc9 6504 	smlal	r6, r5, r9, r4
 8001c8c:	fb87 760a 	smull	r7, r6, r7, sl
 8001c90:	fb07 fa03 	mul.w	sl, r7, r3
 8001c94:	fbca 7604 	smlal	r7, r6, sl, r4
 8001c98:	f8d0 8000 	ldr.w	r8, [r0]
 8001c9c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001ca0:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001ca4:	eb0e 0e08 	add.w	lr, lr, r8
 8001ca8:	f840 eb0c 	str.w	lr, [r0], #12
 8001cac:	eb05 0509 	add.w	r5, r5, r9
 8001cb0:	f840 5c08 	str.w	r5, [r0, #-8]
 8001cb4:	eb06 060a 	add.w	r6, r6, sl
 8001cb8:	f840 6c04 	str.w	r6, [r0, #-4]
 8001cbc:	f1bc 0c01 	subs.w	ip, ip, #1
 8001cc0:	f47f afcc 	bne.w	8001c5c <pqcrystals_dilithium_asm_pointwise_acc_montgomery+0x18>
 8001cc4:	f8d1 5000 	ldr.w	r5, [r1]
 8001cc8:	f8d2 8000 	ldr.w	r8, [r2]
 8001ccc:	f8d0 6000 	ldr.w	r6, [r0]
 8001cd0:	fb85 5e08 	smull	r5, lr, r5, r8
 8001cd4:	fb05 f803 	mul.w	r8, r5, r3
 8001cd8:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001cdc:	eb0e 0e06 	add.w	lr, lr, r6
 8001ce0:	f8c0 e000 	str.w	lr, [r0]
 8001ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ce8 <pqcrystals_dilithium_asm_reduce32>:
 8001ce8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001cec:	f24e 0c01 	movw	ip, #57345	; 0xe001
 8001cf0:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8001cf4:	f240 0a20 	movw	sl, #32
 8001cf8:	f8d0 1000 	ldr.w	r1, [r0]
 8001cfc:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8001d00:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8001d04:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8001d08:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8001d0c:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001d10:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8001d14:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001d18:	f501 0980 	add.w	r9, r1, #4194304	; 0x400000
 8001d1c:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d20:	fb09 111c 	mls	r1, r9, ip, r1
 8001d24:	f502 0980 	add.w	r9, r2, #4194304	; 0x400000
 8001d28:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d2c:	fb09 221c 	mls	r2, r9, ip, r2
 8001d30:	f503 0980 	add.w	r9, r3, #4194304	; 0x400000
 8001d34:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d38:	fb09 331c 	mls	r3, r9, ip, r3
 8001d3c:	f504 0980 	add.w	r9, r4, #4194304	; 0x400000
 8001d40:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d44:	fb09 441c 	mls	r4, r9, ip, r4
 8001d48:	f505 0980 	add.w	r9, r5, #4194304	; 0x400000
 8001d4c:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d50:	fb09 551c 	mls	r5, r9, ip, r5
 8001d54:	f506 0980 	add.w	r9, r6, #4194304	; 0x400000
 8001d58:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d5c:	fb09 661c 	mls	r6, r9, ip, r6
 8001d60:	f507 0980 	add.w	r9, r7, #4194304	; 0x400000
 8001d64:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d68:	fb09 771c 	mls	r7, r9, ip, r7
 8001d6c:	f508 0980 	add.w	r9, r8, #4194304	; 0x400000
 8001d70:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d74:	fb09 881c 	mls	r8, r9, ip, r8
 8001d78:	f8c0 2004 	str.w	r2, [r0, #4]
 8001d7c:	f8c0 3008 	str.w	r3, [r0, #8]
 8001d80:	f8c0 400c 	str.w	r4, [r0, #12]
 8001d84:	f8c0 5010 	str.w	r5, [r0, #16]
 8001d88:	f8c0 6014 	str.w	r6, [r0, #20]
 8001d8c:	f8c0 7018 	str.w	r7, [r0, #24]
 8001d90:	f8c0 801c 	str.w	r8, [r0, #28]
 8001d94:	f840 1b20 	str.w	r1, [r0], #32
 8001d98:	f1ba 0a01 	subs.w	sl, sl, #1
 8001d9c:	f47f afac 	bne.w	8001cf8 <pqcrystals_dilithium_asm_reduce32+0x10>
 8001da0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop

08001da8 <pqcrystals_dilithium_small_asm_reduce32_central>:
 8001da8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001dac:	f643 09ed 	movw	r9, #14573	; 0x38ed
 8001db0:	f2c0 0955 	movt	r9, #85	; 0x55
 8001db4:	f240 3a01 	movw	sl, #769	; 0x301
 8001db8:	f240 0c20 	movw	ip, #32
 8001dbc:	f8d0 1000 	ldr.w	r1, [r0]
 8001dc0:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8001dc4:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8001dc8:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8001dcc:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8001dd0:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001dd4:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8001dd8:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001ddc:	fb51 fb19 	smmulr	fp, r1, r9
 8001de0:	fb0b 111a 	mls	r1, fp, sl, r1
 8001de4:	fb52 fb19 	smmulr	fp, r2, r9
 8001de8:	fb0b 221a 	mls	r2, fp, sl, r2
 8001dec:	fb53 fb19 	smmulr	fp, r3, r9
 8001df0:	fb0b 331a 	mls	r3, fp, sl, r3
 8001df4:	fb54 fb19 	smmulr	fp, r4, r9
 8001df8:	fb0b 441a 	mls	r4, fp, sl, r4
 8001dfc:	fb55 fb19 	smmulr	fp, r5, r9
 8001e00:	fb0b 551a 	mls	r5, fp, sl, r5
 8001e04:	fb56 fb19 	smmulr	fp, r6, r9
 8001e08:	fb0b 661a 	mls	r6, fp, sl, r6
 8001e0c:	fb57 fb19 	smmulr	fp, r7, r9
 8001e10:	fb0b 771a 	mls	r7, fp, sl, r7
 8001e14:	fb58 fb19 	smmulr	fp, r8, r9
 8001e18:	fb0b 881a 	mls	r8, fp, sl, r8
 8001e1c:	f8c0 2004 	str.w	r2, [r0, #4]
 8001e20:	f8c0 3008 	str.w	r3, [r0, #8]
 8001e24:	f8c0 400c 	str.w	r4, [r0, #12]
 8001e28:	f8c0 5010 	str.w	r5, [r0, #16]
 8001e2c:	f8c0 6014 	str.w	r6, [r0, #20]
 8001e30:	f8c0 7018 	str.w	r7, [r0, #24]
 8001e34:	f8c0 801c 	str.w	r8, [r0, #28]
 8001e38:	f840 1b20 	str.w	r1, [r0], #32
 8001e3c:	f1bc 0c01 	subs.w	ip, ip, #1
 8001e40:	f47f afbc 	bne.w	8001dbc <pqcrystals_dilithium_small_asm_reduce32_central+0x14>
 8001e44:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08001e48 <pqcrystals_dilithium_asm_caddq>:
 8001e48:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001e4c:	f24e 0c01 	movw	ip, #57345	; 0xe001
 8001e50:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8001e54:	f240 0a20 	movw	sl, #32
 8001e58:	f8d0 1000 	ldr.w	r1, [r0]
 8001e5c:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8001e60:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8001e64:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8001e68:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8001e6c:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001e70:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8001e74:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001e78:	ea0c 79e1 	and.w	r9, ip, r1, asr #31
 8001e7c:	4449      	add	r1, r9
 8001e7e:	ea0c 79e2 	and.w	r9, ip, r2, asr #31
 8001e82:	444a      	add	r2, r9
 8001e84:	ea0c 79e3 	and.w	r9, ip, r3, asr #31
 8001e88:	444b      	add	r3, r9
 8001e8a:	ea0c 79e4 	and.w	r9, ip, r4, asr #31
 8001e8e:	444c      	add	r4, r9
 8001e90:	ea0c 79e5 	and.w	r9, ip, r5, asr #31
 8001e94:	444d      	add	r5, r9
 8001e96:	ea0c 79e6 	and.w	r9, ip, r6, asr #31
 8001e9a:	444e      	add	r6, r9
 8001e9c:	ea0c 79e7 	and.w	r9, ip, r7, asr #31
 8001ea0:	444f      	add	r7, r9
 8001ea2:	ea0c 79e8 	and.w	r9, ip, r8, asr #31
 8001ea6:	44c8      	add	r8, r9
 8001ea8:	f8c0 2004 	str.w	r2, [r0, #4]
 8001eac:	f8c0 3008 	str.w	r3, [r0, #8]
 8001eb0:	f8c0 400c 	str.w	r4, [r0, #12]
 8001eb4:	f8c0 5010 	str.w	r5, [r0, #16]
 8001eb8:	f8c0 6014 	str.w	r6, [r0, #20]
 8001ebc:	f8c0 7018 	str.w	r7, [r0, #24]
 8001ec0:	f8c0 801c 	str.w	r8, [r0, #28]
 8001ec4:	f840 1b20 	str.w	r1, [r0], #32
 8001ec8:	f1ba 0a01 	subs.w	sl, sl, #1
 8001ecc:	f47f afc4 	bne.w	8001e58 <pqcrystals_dilithium_asm_caddq+0x10>
 8001ed0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop

08001ed8 <pqcrystals_dilithium_asm_rej_uniform>:
 8001ed8:	e92d 0070 	stmdb	sp!, {r4, r5, r6}
 8001edc:	f84d 1d04 	str.w	r1, [sp, #-4]!
 8001ee0:	f24e 0c00 	movw	ip, #57344	; 0xe000
 8001ee4:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8001ee8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8001eec:	eb02 0303 	add.w	r3, r2, r3
 8001ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8001ef4:	ebb3 0f02 	cmp.w	r3, r2
 8001ef8:	f340 800a 	ble.w	8001f10 <end>
 8001efc:	f852 5b03 	ldr.w	r5, [r2], #3
 8001f00:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8001f04:	4565      	cmp	r5, ip
 8001f06:	bfd8      	it	le
 8001f08:	f840 5b04 	strle.w	r5, [r0], #4
 8001f0c:	42b0      	cmp	r0, r6
 8001f0e:	d1f1      	bne.n	8001ef4 <pqcrystals_dilithium_asm_rej_uniform+0x1c>

08001f10 <end>:
 8001f10:	f85d 5b04 	ldr.w	r5, [sp], #4
 8001f14:	eba6 0000 	sub.w	r0, r6, r0
 8001f18:	eba5 0090 	sub.w	r0, r5, r0, lsr #2
 8001f1c:	e8bd 0070 	ldmia.w	sp!, {r4, r5, r6}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop

08001f24 <memcpy>:
 8001f24:	4684      	mov	ip, r0
 8001f26:	ea41 0300 	orr.w	r3, r1, r0
 8001f2a:	f013 0303 	ands.w	r3, r3, #3
 8001f2e:	d16d      	bne.n	800200c <memcpy+0xe8>
 8001f30:	3a40      	subs	r2, #64	; 0x40
 8001f32:	d341      	bcc.n	8001fb8 <memcpy+0x94>
 8001f34:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f38:	f840 3b04 	str.w	r3, [r0], #4
 8001f3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f40:	f840 3b04 	str.w	r3, [r0], #4
 8001f44:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f48:	f840 3b04 	str.w	r3, [r0], #4
 8001f4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f50:	f840 3b04 	str.w	r3, [r0], #4
 8001f54:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f58:	f840 3b04 	str.w	r3, [r0], #4
 8001f5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f60:	f840 3b04 	str.w	r3, [r0], #4
 8001f64:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f68:	f840 3b04 	str.w	r3, [r0], #4
 8001f6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f70:	f840 3b04 	str.w	r3, [r0], #4
 8001f74:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f78:	f840 3b04 	str.w	r3, [r0], #4
 8001f7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f80:	f840 3b04 	str.w	r3, [r0], #4
 8001f84:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f88:	f840 3b04 	str.w	r3, [r0], #4
 8001f8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f90:	f840 3b04 	str.w	r3, [r0], #4
 8001f94:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f98:	f840 3b04 	str.w	r3, [r0], #4
 8001f9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fa0:	f840 3b04 	str.w	r3, [r0], #4
 8001fa4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fa8:	f840 3b04 	str.w	r3, [r0], #4
 8001fac:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fb0:	f840 3b04 	str.w	r3, [r0], #4
 8001fb4:	3a40      	subs	r2, #64	; 0x40
 8001fb6:	d2bd      	bcs.n	8001f34 <memcpy+0x10>
 8001fb8:	3230      	adds	r2, #48	; 0x30
 8001fba:	d311      	bcc.n	8001fe0 <memcpy+0xbc>
 8001fbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fc0:	f840 3b04 	str.w	r3, [r0], #4
 8001fc4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fc8:	f840 3b04 	str.w	r3, [r0], #4
 8001fcc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fd0:	f840 3b04 	str.w	r3, [r0], #4
 8001fd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fd8:	f840 3b04 	str.w	r3, [r0], #4
 8001fdc:	3a10      	subs	r2, #16
 8001fde:	d2ed      	bcs.n	8001fbc <memcpy+0x98>
 8001fe0:	320c      	adds	r2, #12
 8001fe2:	d305      	bcc.n	8001ff0 <memcpy+0xcc>
 8001fe4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fe8:	f840 3b04 	str.w	r3, [r0], #4
 8001fec:	3a04      	subs	r2, #4
 8001fee:	d2f9      	bcs.n	8001fe4 <memcpy+0xc0>
 8001ff0:	3204      	adds	r2, #4
 8001ff2:	d008      	beq.n	8002006 <memcpy+0xe2>
 8001ff4:	07d2      	lsls	r2, r2, #31
 8001ff6:	bf1c      	itt	ne
 8001ff8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001ffc:	f800 3b01 	strbne.w	r3, [r0], #1
 8002000:	d301      	bcc.n	8002006 <memcpy+0xe2>
 8002002:	880b      	ldrh	r3, [r1, #0]
 8002004:	8003      	strh	r3, [r0, #0]
 8002006:	4660      	mov	r0, ip
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2a08      	cmp	r2, #8
 800200e:	d313      	bcc.n	8002038 <memcpy+0x114>
 8002010:	078b      	lsls	r3, r1, #30
 8002012:	d08d      	beq.n	8001f30 <memcpy+0xc>
 8002014:	f010 0303 	ands.w	r3, r0, #3
 8002018:	d08a      	beq.n	8001f30 <memcpy+0xc>
 800201a:	f1c3 0304 	rsb	r3, r3, #4
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	07db      	lsls	r3, r3, #31
 8002022:	bf1c      	itt	ne
 8002024:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002028:	f800 3b01 	strbne.w	r3, [r0], #1
 800202c:	d380      	bcc.n	8001f30 <memcpy+0xc>
 800202e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002032:	f820 3b02 	strh.w	r3, [r0], #2
 8002036:	e77b      	b.n	8001f30 <memcpy+0xc>
 8002038:	3a04      	subs	r2, #4
 800203a:	d3d9      	bcc.n	8001ff0 <memcpy+0xcc>
 800203c:	3a01      	subs	r2, #1
 800203e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002042:	f800 3b01 	strb.w	r3, [r0], #1
 8002046:	d2f9      	bcs.n	800203c <memcpy+0x118>
 8002048:	780b      	ldrb	r3, [r1, #0]
 800204a:	7003      	strb	r3, [r0, #0]
 800204c:	784b      	ldrb	r3, [r1, #1]
 800204e:	7043      	strb	r3, [r0, #1]
 8002050:	788b      	ldrb	r3, [r1, #2]
 8002052:	7083      	strb	r3, [r0, #2]
 8002054:	4660      	mov	r0, ip
 8002056:	4770      	bx	lr
 8002058:	0000      	movs	r0, r0
 800205a:	0000      	movs	r0, r0
 800205c:	0000      	movs	r0, r0
 800205e:	0000      	movs	r0, r0
 8002060:	0000      	movs	r0, r0
 8002062:	0000      	movs	r0, r0
 8002064:	0000      	movs	r0, r0
 8002066:	0000      	movs	r0, r0
 8002068:	0000      	movs	r0, r0
 800206a:	0000      	movs	r0, r0
 800206c:	0000      	movs	r0, r0
 800206e:	0000      	movs	r0, r0
 8002070:	0000      	movs	r0, r0
 8002072:	0000      	movs	r0, r0
 8002074:	0000      	movs	r0, r0
 8002076:	0000      	movs	r0, r0
 8002078:	0000      	movs	r0, r0
 800207a:	0000      	movs	r0, r0
 800207c:	0000      	movs	r0, r0
 800207e:	0000      	movs	r0, r0

08002080 <strlen>:
 8002080:	f890 f000 	pld	[r0]
 8002084:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8002088:	f020 0107 	bic.w	r1, r0, #7
 800208c:	f06f 0c00 	mvn.w	ip, #0
 8002090:	f010 0407 	ands.w	r4, r0, #7
 8002094:	f891 f020 	pld	[r1, #32]
 8002098:	f040 8049 	bne.w	800212e <strlen+0xae>
 800209c:	f04f 0400 	mov.w	r4, #0
 80020a0:	f06f 0007 	mvn.w	r0, #7
 80020a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80020a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80020ac:	f100 0008 	add.w	r0, r0, #8
 80020b0:	fa82 f24c 	uadd8	r2, r2, ip
 80020b4:	faa4 f28c 	sel	r2, r4, ip
 80020b8:	fa83 f34c 	uadd8	r3, r3, ip
 80020bc:	faa2 f38c 	sel	r3, r2, ip
 80020c0:	bb4b      	cbnz	r3, 8002116 <strlen+0x96>
 80020c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80020c6:	fa82 f24c 	uadd8	r2, r2, ip
 80020ca:	f100 0008 	add.w	r0, r0, #8
 80020ce:	faa4 f28c 	sel	r2, r4, ip
 80020d2:	fa83 f34c 	uadd8	r3, r3, ip
 80020d6:	faa2 f38c 	sel	r3, r2, ip
 80020da:	b9e3      	cbnz	r3, 8002116 <strlen+0x96>
 80020dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80020e0:	fa82 f24c 	uadd8	r2, r2, ip
 80020e4:	f100 0008 	add.w	r0, r0, #8
 80020e8:	faa4 f28c 	sel	r2, r4, ip
 80020ec:	fa83 f34c 	uadd8	r3, r3, ip
 80020f0:	faa2 f38c 	sel	r3, r2, ip
 80020f4:	b97b      	cbnz	r3, 8002116 <strlen+0x96>
 80020f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80020fa:	f101 0120 	add.w	r1, r1, #32
 80020fe:	fa82 f24c 	uadd8	r2, r2, ip
 8002102:	f100 0008 	add.w	r0, r0, #8
 8002106:	faa4 f28c 	sel	r2, r4, ip
 800210a:	fa83 f34c 	uadd8	r3, r3, ip
 800210e:	faa2 f38c 	sel	r3, r2, ip
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0c6      	beq.n	80020a4 <strlen+0x24>
 8002116:	2a00      	cmp	r2, #0
 8002118:	bf04      	itt	eq
 800211a:	3004      	addeq	r0, #4
 800211c:	461a      	moveq	r2, r3
 800211e:	ba12      	rev	r2, r2
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8002128:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800212c:	4770      	bx	lr
 800212e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002132:	f004 0503 	and.w	r5, r4, #3
 8002136:	f1c4 0000 	rsb	r0, r4, #0
 800213a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800213e:	f014 0f04 	tst.w	r4, #4
 8002142:	f891 f040 	pld	[r1, #64]	; 0x40
 8002146:	fa0c f505 	lsl.w	r5, ip, r5
 800214a:	ea62 0205 	orn	r2, r2, r5
 800214e:	bf1c      	itt	ne
 8002150:	ea63 0305 	ornne	r3, r3, r5
 8002154:	4662      	movne	r2, ip
 8002156:	f04f 0400 	mov.w	r4, #0
 800215a:	e7a9      	b.n	80020b0 <strlen+0x30>
 800215c:	0000      	movs	r0, r0
 800215e:	0000      	movs	r0, r0

08002160 <memchr>:
 8002160:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002164:	2a10      	cmp	r2, #16
 8002166:	db2b      	blt.n	80021c0 <memchr+0x60>
 8002168:	f010 0f07 	tst.w	r0, #7
 800216c:	d008      	beq.n	8002180 <memchr+0x20>
 800216e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002172:	3a01      	subs	r2, #1
 8002174:	428b      	cmp	r3, r1
 8002176:	d02d      	beq.n	80021d4 <memchr+0x74>
 8002178:	f010 0f07 	tst.w	r0, #7
 800217c:	b342      	cbz	r2, 80021d0 <memchr+0x70>
 800217e:	d1f6      	bne.n	800216e <memchr+0xe>
 8002180:	b4f0      	push	{r4, r5, r6, r7}
 8002182:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002186:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800218a:	f022 0407 	bic.w	r4, r2, #7
 800218e:	f07f 0700 	mvns.w	r7, #0
 8002192:	2300      	movs	r3, #0
 8002194:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002198:	3c08      	subs	r4, #8
 800219a:	ea85 0501 	eor.w	r5, r5, r1
 800219e:	ea86 0601 	eor.w	r6, r6, r1
 80021a2:	fa85 f547 	uadd8	r5, r5, r7
 80021a6:	faa3 f587 	sel	r5, r3, r7
 80021aa:	fa86 f647 	uadd8	r6, r6, r7
 80021ae:	faa5 f687 	sel	r6, r5, r7
 80021b2:	b98e      	cbnz	r6, 80021d8 <memchr+0x78>
 80021b4:	d1ee      	bne.n	8002194 <memchr+0x34>
 80021b6:	bcf0      	pop	{r4, r5, r6, r7}
 80021b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80021bc:	f002 0207 	and.w	r2, r2, #7
 80021c0:	b132      	cbz	r2, 80021d0 <memchr+0x70>
 80021c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80021c6:	3a01      	subs	r2, #1
 80021c8:	ea83 0301 	eor.w	r3, r3, r1
 80021cc:	b113      	cbz	r3, 80021d4 <memchr+0x74>
 80021ce:	d1f8      	bne.n	80021c2 <memchr+0x62>
 80021d0:	2000      	movs	r0, #0
 80021d2:	4770      	bx	lr
 80021d4:	3801      	subs	r0, #1
 80021d6:	4770      	bx	lr
 80021d8:	2d00      	cmp	r5, #0
 80021da:	bf06      	itte	eq
 80021dc:	4635      	moveq	r5, r6
 80021de:	3803      	subeq	r0, #3
 80021e0:	3807      	subne	r0, #7
 80021e2:	f015 0f01 	tst.w	r5, #1
 80021e6:	d107      	bne.n	80021f8 <memchr+0x98>
 80021e8:	3001      	adds	r0, #1
 80021ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80021ee:	bf02      	ittt	eq
 80021f0:	3001      	addeq	r0, #1
 80021f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80021f6:	3001      	addeq	r0, #1
 80021f8:	bcf0      	pop	{r4, r5, r6, r7}
 80021fa:	3801      	subs	r0, #1
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <__aeabi_drsub>:
 8002200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002204:	e002      	b.n	800220c <__adddf3>
 8002206:	bf00      	nop

08002208 <__aeabi_dsub>:
 8002208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800220c <__adddf3>:
 800220c:	b530      	push	{r4, r5, lr}
 800220e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002216:	ea94 0f05 	teq	r4, r5
 800221a:	bf08      	it	eq
 800221c:	ea90 0f02 	teqeq	r0, r2
 8002220:	bf1f      	itttt	ne
 8002222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800222a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800222e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002232:	f000 80e2 	beq.w	80023fa <__adddf3+0x1ee>
 8002236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800223a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800223e:	bfb8      	it	lt
 8002240:	426d      	neglt	r5, r5
 8002242:	dd0c      	ble.n	800225e <__adddf3+0x52>
 8002244:	442c      	add	r4, r5
 8002246:	ea80 0202 	eor.w	r2, r0, r2
 800224a:	ea81 0303 	eor.w	r3, r1, r3
 800224e:	ea82 0000 	eor.w	r0, r2, r0
 8002252:	ea83 0101 	eor.w	r1, r3, r1
 8002256:	ea80 0202 	eor.w	r2, r0, r2
 800225a:	ea81 0303 	eor.w	r3, r1, r3
 800225e:	2d36      	cmp	r5, #54	; 0x36
 8002260:	bf88      	it	hi
 8002262:	bd30      	pophi	{r4, r5, pc}
 8002264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800226c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002274:	d002      	beq.n	800227c <__adddf3+0x70>
 8002276:	4240      	negs	r0, r0
 8002278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800227c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002288:	d002      	beq.n	8002290 <__adddf3+0x84>
 800228a:	4252      	negs	r2, r2
 800228c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002290:	ea94 0f05 	teq	r4, r5
 8002294:	f000 80a7 	beq.w	80023e6 <__adddf3+0x1da>
 8002298:	f1a4 0401 	sub.w	r4, r4, #1
 800229c:	f1d5 0e20 	rsbs	lr, r5, #32
 80022a0:	db0d      	blt.n	80022be <__adddf3+0xb2>
 80022a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80022a6:	fa22 f205 	lsr.w	r2, r2, r5
 80022aa:	1880      	adds	r0, r0, r2
 80022ac:	f141 0100 	adc.w	r1, r1, #0
 80022b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80022b4:	1880      	adds	r0, r0, r2
 80022b6:	fa43 f305 	asr.w	r3, r3, r5
 80022ba:	4159      	adcs	r1, r3
 80022bc:	e00e      	b.n	80022dc <__adddf3+0xd0>
 80022be:	f1a5 0520 	sub.w	r5, r5, #32
 80022c2:	f10e 0e20 	add.w	lr, lr, #32
 80022c6:	2a01      	cmp	r2, #1
 80022c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80022cc:	bf28      	it	cs
 80022ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80022d2:	fa43 f305 	asr.w	r3, r3, r5
 80022d6:	18c0      	adds	r0, r0, r3
 80022d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80022dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80022e0:	d507      	bpl.n	80022f2 <__adddf3+0xe6>
 80022e2:	f04f 0e00 	mov.w	lr, #0
 80022e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80022ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80022ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80022f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80022f6:	d31b      	bcc.n	8002330 <__adddf3+0x124>
 80022f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80022fc:	d30c      	bcc.n	8002318 <__adddf3+0x10c>
 80022fe:	0849      	lsrs	r1, r1, #1
 8002300:	ea5f 0030 	movs.w	r0, r0, rrx
 8002304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002308:	f104 0401 	add.w	r4, r4, #1
 800230c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002314:	f080 809a 	bcs.w	800244c <__adddf3+0x240>
 8002318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800231c:	bf08      	it	eq
 800231e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002322:	f150 0000 	adcs.w	r0, r0, #0
 8002326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800232a:	ea41 0105 	orr.w	r1, r1, r5
 800232e:	bd30      	pop	{r4, r5, pc}
 8002330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002334:	4140      	adcs	r0, r0
 8002336:	eb41 0101 	adc.w	r1, r1, r1
 800233a:	3c01      	subs	r4, #1
 800233c:	bf28      	it	cs
 800233e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8002342:	d2e9      	bcs.n	8002318 <__adddf3+0x10c>
 8002344:	f091 0f00 	teq	r1, #0
 8002348:	bf04      	itt	eq
 800234a:	4601      	moveq	r1, r0
 800234c:	2000      	moveq	r0, #0
 800234e:	fab1 f381 	clz	r3, r1
 8002352:	bf08      	it	eq
 8002354:	3320      	addeq	r3, #32
 8002356:	f1a3 030b 	sub.w	r3, r3, #11
 800235a:	f1b3 0220 	subs.w	r2, r3, #32
 800235e:	da0c      	bge.n	800237a <__adddf3+0x16e>
 8002360:	320c      	adds	r2, #12
 8002362:	dd08      	ble.n	8002376 <__adddf3+0x16a>
 8002364:	f102 0c14 	add.w	ip, r2, #20
 8002368:	f1c2 020c 	rsb	r2, r2, #12
 800236c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002370:	fa21 f102 	lsr.w	r1, r1, r2
 8002374:	e00c      	b.n	8002390 <__adddf3+0x184>
 8002376:	f102 0214 	add.w	r2, r2, #20
 800237a:	bfd8      	it	le
 800237c:	f1c2 0c20 	rsble	ip, r2, #32
 8002380:	fa01 f102 	lsl.w	r1, r1, r2
 8002384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002388:	bfdc      	itt	le
 800238a:	ea41 010c 	orrle.w	r1, r1, ip
 800238e:	4090      	lslle	r0, r2
 8002390:	1ae4      	subs	r4, r4, r3
 8002392:	bfa2      	ittt	ge
 8002394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002398:	4329      	orrge	r1, r5
 800239a:	bd30      	popge	{r4, r5, pc}
 800239c:	ea6f 0404 	mvn.w	r4, r4
 80023a0:	3c1f      	subs	r4, #31
 80023a2:	da1c      	bge.n	80023de <__adddf3+0x1d2>
 80023a4:	340c      	adds	r4, #12
 80023a6:	dc0e      	bgt.n	80023c6 <__adddf3+0x1ba>
 80023a8:	f104 0414 	add.w	r4, r4, #20
 80023ac:	f1c4 0220 	rsb	r2, r4, #32
 80023b0:	fa20 f004 	lsr.w	r0, r0, r4
 80023b4:	fa01 f302 	lsl.w	r3, r1, r2
 80023b8:	ea40 0003 	orr.w	r0, r0, r3
 80023bc:	fa21 f304 	lsr.w	r3, r1, r4
 80023c0:	ea45 0103 	orr.w	r1, r5, r3
 80023c4:	bd30      	pop	{r4, r5, pc}
 80023c6:	f1c4 040c 	rsb	r4, r4, #12
 80023ca:	f1c4 0220 	rsb	r2, r4, #32
 80023ce:	fa20 f002 	lsr.w	r0, r0, r2
 80023d2:	fa01 f304 	lsl.w	r3, r1, r4
 80023d6:	ea40 0003 	orr.w	r0, r0, r3
 80023da:	4629      	mov	r1, r5
 80023dc:	bd30      	pop	{r4, r5, pc}
 80023de:	fa21 f004 	lsr.w	r0, r1, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	bd30      	pop	{r4, r5, pc}
 80023e6:	f094 0f00 	teq	r4, #0
 80023ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80023ee:	bf06      	itte	eq
 80023f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80023f4:	3401      	addeq	r4, #1
 80023f6:	3d01      	subne	r5, #1
 80023f8:	e74e      	b.n	8002298 <__adddf3+0x8c>
 80023fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80023fe:	bf18      	it	ne
 8002400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002404:	d029      	beq.n	800245a <__adddf3+0x24e>
 8002406:	ea94 0f05 	teq	r4, r5
 800240a:	bf08      	it	eq
 800240c:	ea90 0f02 	teqeq	r0, r2
 8002410:	d005      	beq.n	800241e <__adddf3+0x212>
 8002412:	ea54 0c00 	orrs.w	ip, r4, r0
 8002416:	bf04      	itt	eq
 8002418:	4619      	moveq	r1, r3
 800241a:	4610      	moveq	r0, r2
 800241c:	bd30      	pop	{r4, r5, pc}
 800241e:	ea91 0f03 	teq	r1, r3
 8002422:	bf1e      	ittt	ne
 8002424:	2100      	movne	r1, #0
 8002426:	2000      	movne	r0, #0
 8002428:	bd30      	popne	{r4, r5, pc}
 800242a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800242e:	d105      	bne.n	800243c <__adddf3+0x230>
 8002430:	0040      	lsls	r0, r0, #1
 8002432:	4149      	adcs	r1, r1
 8002434:	bf28      	it	cs
 8002436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800243a:	bd30      	pop	{r4, r5, pc}
 800243c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002440:	bf3c      	itt	cc
 8002442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002446:	bd30      	popcc	{r4, r5, pc}
 8002448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800244c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002454:	f04f 0000 	mov.w	r0, #0
 8002458:	bd30      	pop	{r4, r5, pc}
 800245a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800245e:	bf1a      	itte	ne
 8002460:	4619      	movne	r1, r3
 8002462:	4610      	movne	r0, r2
 8002464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002468:	bf1c      	itt	ne
 800246a:	460b      	movne	r3, r1
 800246c:	4602      	movne	r2, r0
 800246e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002472:	bf06      	itte	eq
 8002474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002478:	ea91 0f03 	teqeq	r1, r3
 800247c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002480:	bd30      	pop	{r4, r5, pc}
 8002482:	bf00      	nop

08002484 <__aeabi_ui2d>:
 8002484:	f090 0f00 	teq	r0, #0
 8002488:	bf04      	itt	eq
 800248a:	2100      	moveq	r1, #0
 800248c:	4770      	bxeq	lr
 800248e:	b530      	push	{r4, r5, lr}
 8002490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002498:	f04f 0500 	mov.w	r5, #0
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	e750      	b.n	8002344 <__adddf3+0x138>
 80024a2:	bf00      	nop

080024a4 <__aeabi_i2d>:
 80024a4:	f090 0f00 	teq	r0, #0
 80024a8:	bf04      	itt	eq
 80024aa:	2100      	moveq	r1, #0
 80024ac:	4770      	bxeq	lr
 80024ae:	b530      	push	{r4, r5, lr}
 80024b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80024b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80024b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80024bc:	bf48      	it	mi
 80024be:	4240      	negmi	r0, r0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	e73e      	b.n	8002344 <__adddf3+0x138>
 80024c6:	bf00      	nop

080024c8 <__aeabi_f2d>:
 80024c8:	0042      	lsls	r2, r0, #1
 80024ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80024ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80024d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80024d6:	bf1f      	itttt	ne
 80024d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80024dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80024e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80024e4:	4770      	bxne	lr
 80024e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80024ea:	bf08      	it	eq
 80024ec:	4770      	bxeq	lr
 80024ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80024f2:	bf04      	itt	eq
 80024f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80024f8:	4770      	bxeq	lr
 80024fa:	b530      	push	{r4, r5, lr}
 80024fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002508:	e71c      	b.n	8002344 <__adddf3+0x138>
 800250a:	bf00      	nop

0800250c <__aeabi_ul2d>:
 800250c:	ea50 0201 	orrs.w	r2, r0, r1
 8002510:	bf08      	it	eq
 8002512:	4770      	bxeq	lr
 8002514:	b530      	push	{r4, r5, lr}
 8002516:	f04f 0500 	mov.w	r5, #0
 800251a:	e00a      	b.n	8002532 <__aeabi_l2d+0x16>

0800251c <__aeabi_l2d>:
 800251c:	ea50 0201 	orrs.w	r2, r0, r1
 8002520:	bf08      	it	eq
 8002522:	4770      	bxeq	lr
 8002524:	b530      	push	{r4, r5, lr}
 8002526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800252a:	d502      	bpl.n	8002532 <__aeabi_l2d+0x16>
 800252c:	4240      	negs	r0, r0
 800252e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800253a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800253e:	f43f aed8 	beq.w	80022f2 <__adddf3+0xe6>
 8002542:	f04f 0203 	mov.w	r2, #3
 8002546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800254a:	bf18      	it	ne
 800254c:	3203      	addne	r2, #3
 800254e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002552:	bf18      	it	ne
 8002554:	3203      	addne	r2, #3
 8002556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800255a:	f1c2 0320 	rsb	r3, r2, #32
 800255e:	fa00 fc03 	lsl.w	ip, r0, r3
 8002562:	fa20 f002 	lsr.w	r0, r0, r2
 8002566:	fa01 fe03 	lsl.w	lr, r1, r3
 800256a:	ea40 000e 	orr.w	r0, r0, lr
 800256e:	fa21 f102 	lsr.w	r1, r1, r2
 8002572:	4414      	add	r4, r2
 8002574:	e6bd      	b.n	80022f2 <__adddf3+0xe6>
 8002576:	bf00      	nop

08002578 <__aeabi_dmul>:
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800257e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002586:	bf1d      	ittte	ne
 8002588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800258c:	ea94 0f0c 	teqne	r4, ip
 8002590:	ea95 0f0c 	teqne	r5, ip
 8002594:	f000 f8de 	bleq	8002754 <__aeabi_dmul+0x1dc>
 8002598:	442c      	add	r4, r5
 800259a:	ea81 0603 	eor.w	r6, r1, r3
 800259e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80025a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80025a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80025aa:	bf18      	it	ne
 80025ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80025b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80025b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b8:	d038      	beq.n	800262c <__aeabi_dmul+0xb4>
 80025ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80025be:	f04f 0500 	mov.w	r5, #0
 80025c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80025c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80025ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80025ce:	f04f 0600 	mov.w	r6, #0
 80025d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80025d6:	f09c 0f00 	teq	ip, #0
 80025da:	bf18      	it	ne
 80025dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80025e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80025e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80025e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80025ec:	d204      	bcs.n	80025f8 <__aeabi_dmul+0x80>
 80025ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80025f2:	416d      	adcs	r5, r5
 80025f4:	eb46 0606 	adc.w	r6, r6, r6
 80025f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80025fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800260c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002610:	bf88      	it	hi
 8002612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002616:	d81e      	bhi.n	8002656 <__aeabi_dmul+0xde>
 8002618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800261c:	bf08      	it	eq
 800261e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002622:	f150 0000 	adcs.w	r0, r0, #0
 8002626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800262a:	bd70      	pop	{r4, r5, r6, pc}
 800262c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002630:	ea46 0101 	orr.w	r1, r6, r1
 8002634:	ea40 0002 	orr.w	r0, r0, r2
 8002638:	ea81 0103 	eor.w	r1, r1, r3
 800263c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002640:	bfc2      	ittt	gt
 8002642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800264a:	bd70      	popgt	{r4, r5, r6, pc}
 800264c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002650:	f04f 0e00 	mov.w	lr, #0
 8002654:	3c01      	subs	r4, #1
 8002656:	f300 80ab 	bgt.w	80027b0 <__aeabi_dmul+0x238>
 800265a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800265e:	bfde      	ittt	le
 8002660:	2000      	movle	r0, #0
 8002662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002666:	bd70      	pople	{r4, r5, r6, pc}
 8002668:	f1c4 0400 	rsb	r4, r4, #0
 800266c:	3c20      	subs	r4, #32
 800266e:	da35      	bge.n	80026dc <__aeabi_dmul+0x164>
 8002670:	340c      	adds	r4, #12
 8002672:	dc1b      	bgt.n	80026ac <__aeabi_dmul+0x134>
 8002674:	f104 0414 	add.w	r4, r4, #20
 8002678:	f1c4 0520 	rsb	r5, r4, #32
 800267c:	fa00 f305 	lsl.w	r3, r0, r5
 8002680:	fa20 f004 	lsr.w	r0, r0, r4
 8002684:	fa01 f205 	lsl.w	r2, r1, r5
 8002688:	ea40 0002 	orr.w	r0, r0, r2
 800268c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002698:	fa21 f604 	lsr.w	r6, r1, r4
 800269c:	eb42 0106 	adc.w	r1, r2, r6
 80026a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80026a4:	bf08      	it	eq
 80026a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	f1c4 040c 	rsb	r4, r4, #12
 80026b0:	f1c4 0520 	rsb	r5, r4, #32
 80026b4:	fa00 f304 	lsl.w	r3, r0, r4
 80026b8:	fa20 f005 	lsr.w	r0, r0, r5
 80026bc:	fa01 f204 	lsl.w	r2, r1, r4
 80026c0:	ea40 0002 	orr.w	r0, r0, r2
 80026c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80026c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80026cc:	f141 0100 	adc.w	r1, r1, #0
 80026d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80026d4:	bf08      	it	eq
 80026d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	f1c4 0520 	rsb	r5, r4, #32
 80026e0:	fa00 f205 	lsl.w	r2, r0, r5
 80026e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80026e8:	fa20 f304 	lsr.w	r3, r0, r4
 80026ec:	fa01 f205 	lsl.w	r2, r1, r5
 80026f0:	ea43 0302 	orr.w	r3, r3, r2
 80026f4:	fa21 f004 	lsr.w	r0, r1, r4
 80026f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80026fc:	fa21 f204 	lsr.w	r2, r1, r4
 8002700:	ea20 0002 	bic.w	r0, r0, r2
 8002704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800270c:	bf08      	it	eq
 800270e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	f094 0f00 	teq	r4, #0
 8002718:	d10f      	bne.n	800273a <__aeabi_dmul+0x1c2>
 800271a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800271e:	0040      	lsls	r0, r0, #1
 8002720:	eb41 0101 	adc.w	r1, r1, r1
 8002724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002728:	bf08      	it	eq
 800272a:	3c01      	subeq	r4, #1
 800272c:	d0f7      	beq.n	800271e <__aeabi_dmul+0x1a6>
 800272e:	ea41 0106 	orr.w	r1, r1, r6
 8002732:	f095 0f00 	teq	r5, #0
 8002736:	bf18      	it	ne
 8002738:	4770      	bxne	lr
 800273a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800273e:	0052      	lsls	r2, r2, #1
 8002740:	eb43 0303 	adc.w	r3, r3, r3
 8002744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002748:	bf08      	it	eq
 800274a:	3d01      	subeq	r5, #1
 800274c:	d0f7      	beq.n	800273e <__aeabi_dmul+0x1c6>
 800274e:	ea43 0306 	orr.w	r3, r3, r6
 8002752:	4770      	bx	lr
 8002754:	ea94 0f0c 	teq	r4, ip
 8002758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800275c:	bf18      	it	ne
 800275e:	ea95 0f0c 	teqne	r5, ip
 8002762:	d00c      	beq.n	800277e <__aeabi_dmul+0x206>
 8002764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002768:	bf18      	it	ne
 800276a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800276e:	d1d1      	bne.n	8002714 <__aeabi_dmul+0x19c>
 8002770:	ea81 0103 	eor.w	r1, r1, r3
 8002774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002778:	f04f 0000 	mov.w	r0, #0
 800277c:	bd70      	pop	{r4, r5, r6, pc}
 800277e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002782:	bf06      	itte	eq
 8002784:	4610      	moveq	r0, r2
 8002786:	4619      	moveq	r1, r3
 8002788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800278c:	d019      	beq.n	80027c2 <__aeabi_dmul+0x24a>
 800278e:	ea94 0f0c 	teq	r4, ip
 8002792:	d102      	bne.n	800279a <__aeabi_dmul+0x222>
 8002794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002798:	d113      	bne.n	80027c2 <__aeabi_dmul+0x24a>
 800279a:	ea95 0f0c 	teq	r5, ip
 800279e:	d105      	bne.n	80027ac <__aeabi_dmul+0x234>
 80027a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80027a4:	bf1c      	itt	ne
 80027a6:	4610      	movne	r0, r2
 80027a8:	4619      	movne	r1, r3
 80027aa:	d10a      	bne.n	80027c2 <__aeabi_dmul+0x24a>
 80027ac:	ea81 0103 	eor.w	r1, r1, r3
 80027b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80027b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80027b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
 80027c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80027c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80027ca:	bd70      	pop	{r4, r5, r6, pc}

080027cc <__aeabi_ddiv>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80027d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80027d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80027da:	bf1d      	ittte	ne
 80027dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80027e0:	ea94 0f0c 	teqne	r4, ip
 80027e4:	ea95 0f0c 	teqne	r5, ip
 80027e8:	f000 f8a7 	bleq	800293a <__aeabi_ddiv+0x16e>
 80027ec:	eba4 0405 	sub.w	r4, r4, r5
 80027f0:	ea81 0e03 	eor.w	lr, r1, r3
 80027f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80027f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80027fc:	f000 8088 	beq.w	8002910 <__aeabi_ddiv+0x144>
 8002800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800280c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800281c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002824:	429d      	cmp	r5, r3
 8002826:	bf08      	it	eq
 8002828:	4296      	cmpeq	r6, r2
 800282a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800282e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002832:	d202      	bcs.n	800283a <__aeabi_ddiv+0x6e>
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	ea4f 0232 	mov.w	r2, r2, rrx
 800283a:	1ab6      	subs	r6, r6, r2
 800283c:	eb65 0503 	sbc.w	r5, r5, r3
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	ea4f 0232 	mov.w	r2, r2, rrx
 8002846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800284a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800284e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002856:	bf22      	ittt	cs
 8002858:	1ab6      	subcs	r6, r6, r2
 800285a:	4675      	movcs	r5, lr
 800285c:	ea40 000c 	orrcs.w	r0, r0, ip
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	ea4f 0232 	mov.w	r2, r2, rrx
 8002866:	ebb6 0e02 	subs.w	lr, r6, r2
 800286a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800286e:	bf22      	ittt	cs
 8002870:	1ab6      	subcs	r6, r6, r2
 8002872:	4675      	movcs	r5, lr
 8002874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002878:	085b      	lsrs	r3, r3, #1
 800287a:	ea4f 0232 	mov.w	r2, r2, rrx
 800287e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002886:	bf22      	ittt	cs
 8002888:	1ab6      	subcs	r6, r6, r2
 800288a:	4675      	movcs	r5, lr
 800288c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	ea4f 0232 	mov.w	r2, r2, rrx
 8002896:	ebb6 0e02 	subs.w	lr, r6, r2
 800289a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800289e:	bf22      	ittt	cs
 80028a0:	1ab6      	subcs	r6, r6, r2
 80028a2:	4675      	movcs	r5, lr
 80028a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80028a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80028ac:	d018      	beq.n	80028e0 <__aeabi_ddiv+0x114>
 80028ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80028b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80028b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80028ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80028be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80028c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80028c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80028ca:	d1c0      	bne.n	800284e <__aeabi_ddiv+0x82>
 80028cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80028d0:	d10b      	bne.n	80028ea <__aeabi_ddiv+0x11e>
 80028d2:	ea41 0100 	orr.w	r1, r1, r0
 80028d6:	f04f 0000 	mov.w	r0, #0
 80028da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80028de:	e7b6      	b.n	800284e <__aeabi_ddiv+0x82>
 80028e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80028e4:	bf04      	itt	eq
 80028e6:	4301      	orreq	r1, r0
 80028e8:	2000      	moveq	r0, #0
 80028ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80028ee:	bf88      	it	hi
 80028f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80028f4:	f63f aeaf 	bhi.w	8002656 <__aeabi_dmul+0xde>
 80028f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80028fc:	bf04      	itt	eq
 80028fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002906:	f150 0000 	adcs.w	r0, r0, #0
 800290a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800291c:	bfc2      	ittt	gt
 800291e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002926:	bd70      	popgt	{r4, r5, r6, pc}
 8002928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800292c:	f04f 0e00 	mov.w	lr, #0
 8002930:	3c01      	subs	r4, #1
 8002932:	e690      	b.n	8002656 <__aeabi_dmul+0xde>
 8002934:	ea45 0e06 	orr.w	lr, r5, r6
 8002938:	e68d      	b.n	8002656 <__aeabi_dmul+0xde>
 800293a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800293e:	ea94 0f0c 	teq	r4, ip
 8002942:	bf08      	it	eq
 8002944:	ea95 0f0c 	teqeq	r5, ip
 8002948:	f43f af3b 	beq.w	80027c2 <__aeabi_dmul+0x24a>
 800294c:	ea94 0f0c 	teq	r4, ip
 8002950:	d10a      	bne.n	8002968 <__aeabi_ddiv+0x19c>
 8002952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002956:	f47f af34 	bne.w	80027c2 <__aeabi_dmul+0x24a>
 800295a:	ea95 0f0c 	teq	r5, ip
 800295e:	f47f af25 	bne.w	80027ac <__aeabi_dmul+0x234>
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	e72c      	b.n	80027c2 <__aeabi_dmul+0x24a>
 8002968:	ea95 0f0c 	teq	r5, ip
 800296c:	d106      	bne.n	800297c <__aeabi_ddiv+0x1b0>
 800296e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002972:	f43f aefd 	beq.w	8002770 <__aeabi_dmul+0x1f8>
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	e722      	b.n	80027c2 <__aeabi_dmul+0x24a>
 800297c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002980:	bf18      	it	ne
 8002982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002986:	f47f aec5 	bne.w	8002714 <__aeabi_dmul+0x19c>
 800298a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800298e:	f47f af0d 	bne.w	80027ac <__aeabi_dmul+0x234>
 8002992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002996:	f47f aeeb 	bne.w	8002770 <__aeabi_dmul+0x1f8>
 800299a:	e712      	b.n	80027c2 <__aeabi_dmul+0x24a>

0800299c <__gedf2>:
 800299c:	f04f 3cff 	mov.w	ip, #4294967295
 80029a0:	e006      	b.n	80029b0 <__cmpdf2+0x4>
 80029a2:	bf00      	nop

080029a4 <__ledf2>:
 80029a4:	f04f 0c01 	mov.w	ip, #1
 80029a8:	e002      	b.n	80029b0 <__cmpdf2+0x4>
 80029aa:	bf00      	nop

080029ac <__cmpdf2>:
 80029ac:	f04f 0c01 	mov.w	ip, #1
 80029b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80029b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80029b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80029bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80029c0:	bf18      	it	ne
 80029c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80029c6:	d01b      	beq.n	8002a00 <__cmpdf2+0x54>
 80029c8:	b001      	add	sp, #4
 80029ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80029ce:	bf0c      	ite	eq
 80029d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80029d4:	ea91 0f03 	teqne	r1, r3
 80029d8:	bf02      	ittt	eq
 80029da:	ea90 0f02 	teqeq	r0, r2
 80029de:	2000      	moveq	r0, #0
 80029e0:	4770      	bxeq	lr
 80029e2:	f110 0f00 	cmn.w	r0, #0
 80029e6:	ea91 0f03 	teq	r1, r3
 80029ea:	bf58      	it	pl
 80029ec:	4299      	cmppl	r1, r3
 80029ee:	bf08      	it	eq
 80029f0:	4290      	cmpeq	r0, r2
 80029f2:	bf2c      	ite	cs
 80029f4:	17d8      	asrcs	r0, r3, #31
 80029f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80029fa:	f040 0001 	orr.w	r0, r0, #1
 80029fe:	4770      	bx	lr
 8002a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002a08:	d102      	bne.n	8002a10 <__cmpdf2+0x64>
 8002a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002a0e:	d107      	bne.n	8002a20 <__cmpdf2+0x74>
 8002a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002a18:	d1d6      	bne.n	80029c8 <__cmpdf2+0x1c>
 8002a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002a1e:	d0d3      	beq.n	80029c8 <__cmpdf2+0x1c>
 8002a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop

08002a28 <__aeabi_cdrcmple>:
 8002a28:	4684      	mov	ip, r0
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4662      	mov	r2, ip
 8002a2e:	468c      	mov	ip, r1
 8002a30:	4619      	mov	r1, r3
 8002a32:	4663      	mov	r3, ip
 8002a34:	e000      	b.n	8002a38 <__aeabi_cdcmpeq>
 8002a36:	bf00      	nop

08002a38 <__aeabi_cdcmpeq>:
 8002a38:	b501      	push	{r0, lr}
 8002a3a:	f7ff ffb7 	bl	80029ac <__cmpdf2>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	bf48      	it	mi
 8002a42:	f110 0f00 	cmnmi.w	r0, #0
 8002a46:	bd01      	pop	{r0, pc}

08002a48 <__aeabi_dcmpeq>:
 8002a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a4c:	f7ff fff4 	bl	8002a38 <__aeabi_cdcmpeq>
 8002a50:	bf0c      	ite	eq
 8002a52:	2001      	moveq	r0, #1
 8002a54:	2000      	movne	r0, #0
 8002a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a5a:	bf00      	nop

08002a5c <__aeabi_dcmplt>:
 8002a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a60:	f7ff ffea 	bl	8002a38 <__aeabi_cdcmpeq>
 8002a64:	bf34      	ite	cc
 8002a66:	2001      	movcc	r0, #1
 8002a68:	2000      	movcs	r0, #0
 8002a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a6e:	bf00      	nop

08002a70 <__aeabi_dcmple>:
 8002a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a74:	f7ff ffe0 	bl	8002a38 <__aeabi_cdcmpeq>
 8002a78:	bf94      	ite	ls
 8002a7a:	2001      	movls	r0, #1
 8002a7c:	2000      	movhi	r0, #0
 8002a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a82:	bf00      	nop

08002a84 <__aeabi_dcmpge>:
 8002a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a88:	f7ff ffce 	bl	8002a28 <__aeabi_cdrcmple>
 8002a8c:	bf94      	ite	ls
 8002a8e:	2001      	movls	r0, #1
 8002a90:	2000      	movhi	r0, #0
 8002a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8002a96:	bf00      	nop

08002a98 <__aeabi_dcmpgt>:
 8002a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002a9c:	f7ff ffc4 	bl	8002a28 <__aeabi_cdrcmple>
 8002aa0:	bf34      	ite	cc
 8002aa2:	2001      	movcc	r0, #1
 8002aa4:	2000      	movcs	r0, #0
 8002aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8002aaa:	bf00      	nop

08002aac <__aeabi_dcmpun>:
 8002aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ab4:	d102      	bne.n	8002abc <__aeabi_dcmpun+0x10>
 8002ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002aba:	d10a      	bne.n	8002ad2 <__aeabi_dcmpun+0x26>
 8002abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002ac4:	d102      	bne.n	8002acc <__aeabi_dcmpun+0x20>
 8002ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002aca:	d102      	bne.n	8002ad2 <__aeabi_dcmpun+0x26>
 8002acc:	f04f 0000 	mov.w	r0, #0
 8002ad0:	4770      	bx	lr
 8002ad2:	f04f 0001 	mov.w	r0, #1
 8002ad6:	4770      	bx	lr

08002ad8 <__aeabi_d2iz>:
 8002ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002ae0:	d215      	bcs.n	8002b0e <__aeabi_d2iz+0x36>
 8002ae2:	d511      	bpl.n	8002b08 <__aeabi_d2iz+0x30>
 8002ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002aec:	d912      	bls.n	8002b14 <__aeabi_d2iz+0x3c>
 8002aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002afe:	fa23 f002 	lsr.w	r0, r3, r2
 8002b02:	bf18      	it	ne
 8002b04:	4240      	negne	r0, r0
 8002b06:	4770      	bx	lr
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	4770      	bx	lr
 8002b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002b12:	d105      	bne.n	8002b20 <__aeabi_d2iz+0x48>
 8002b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002b18:	bf08      	it	eq
 8002b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002b1e:	4770      	bx	lr
 8002b20:	f04f 0000 	mov.w	r0, #0
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <__aeabi_uldivmod>:
 8002b28:	b953      	cbnz	r3, 8002b40 <__aeabi_uldivmod+0x18>
 8002b2a:	b94a      	cbnz	r2, 8002b40 <__aeabi_uldivmod+0x18>
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf08      	it	eq
 8002b30:	2800      	cmpeq	r0, #0
 8002b32:	bf1c      	itt	ne
 8002b34:	f04f 31ff 	movne.w	r1, #4294967295
 8002b38:	f04f 30ff 	movne.w	r0, #4294967295
 8002b3c:	f000 b974 	b.w	8002e28 <__aeabi_idiv0>
 8002b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8002b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002b48:	f000 f806 	bl	8002b58 <__udivmoddi4>
 8002b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b54:	b004      	add	sp, #16
 8002b56:	4770      	bx	lr

08002b58 <__udivmoddi4>:
 8002b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b5c:	9e08      	ldr	r6, [sp, #32]
 8002b5e:	460d      	mov	r5, r1
 8002b60:	4604      	mov	r4, r0
 8002b62:	4688      	mov	r8, r1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d14d      	bne.n	8002c04 <__udivmoddi4+0xac>
 8002b68:	428a      	cmp	r2, r1
 8002b6a:	4694      	mov	ip, r2
 8002b6c:	d968      	bls.n	8002c40 <__udivmoddi4+0xe8>
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b152      	cbz	r2, 8002b8a <__udivmoddi4+0x32>
 8002b74:	fa01 f302 	lsl.w	r3, r1, r2
 8002b78:	f1c2 0120 	rsb	r1, r2, #32
 8002b7c:	fa20 f101 	lsr.w	r1, r0, r1
 8002b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8002b84:	ea41 0803 	orr.w	r8, r1, r3
 8002b88:	4094      	lsls	r4, r2
 8002b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8002b8e:	0c21      	lsrs	r1, r4, #16
 8002b90:	fbb8 fef5 	udiv	lr, r8, r5
 8002b94:	fa1f f78c 	uxth.w	r7, ip
 8002b98:	fb05 831e 	mls	r3, r5, lr, r8
 8002b9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002ba0:	fb0e f107 	mul.w	r1, lr, r7
 8002ba4:	4299      	cmp	r1, r3
 8002ba6:	d90b      	bls.n	8002bc0 <__udivmoddi4+0x68>
 8002ba8:	eb1c 0303 	adds.w	r3, ip, r3
 8002bac:	f10e 30ff 	add.w	r0, lr, #4294967295
 8002bb0:	f080 811e 	bcs.w	8002df0 <__udivmoddi4+0x298>
 8002bb4:	4299      	cmp	r1, r3
 8002bb6:	f240 811b 	bls.w	8002df0 <__udivmoddi4+0x298>
 8002bba:	f1ae 0e02 	sub.w	lr, lr, #2
 8002bbe:	4463      	add	r3, ip
 8002bc0:	1a5b      	subs	r3, r3, r1
 8002bc2:	b2a4      	uxth	r4, r4
 8002bc4:	fbb3 f0f5 	udiv	r0, r3, r5
 8002bc8:	fb05 3310 	mls	r3, r5, r0, r3
 8002bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002bd0:	fb00 f707 	mul.w	r7, r0, r7
 8002bd4:	42a7      	cmp	r7, r4
 8002bd6:	d90a      	bls.n	8002bee <__udivmoddi4+0x96>
 8002bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8002bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002be0:	f080 8108 	bcs.w	8002df4 <__udivmoddi4+0x29c>
 8002be4:	42a7      	cmp	r7, r4
 8002be6:	f240 8105 	bls.w	8002df4 <__udivmoddi4+0x29c>
 8002bea:	4464      	add	r4, ip
 8002bec:	3802      	subs	r0, #2
 8002bee:	1be4      	subs	r4, r4, r7
 8002bf0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	b11e      	cbz	r6, 8002c00 <__udivmoddi4+0xa8>
 8002bf8:	40d4      	lsrs	r4, r2
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e9c6 4300 	strd	r4, r3, [r6]
 8002c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c04:	428b      	cmp	r3, r1
 8002c06:	d908      	bls.n	8002c1a <__udivmoddi4+0xc2>
 8002c08:	2e00      	cmp	r6, #0
 8002c0a:	f000 80ee 	beq.w	8002dea <__udivmoddi4+0x292>
 8002c0e:	2100      	movs	r1, #0
 8002c10:	e9c6 0500 	strd	r0, r5, [r6]
 8002c14:	4608      	mov	r0, r1
 8002c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1a:	fab3 f183 	clz	r1, r3
 8002c1e:	2900      	cmp	r1, #0
 8002c20:	d14a      	bne.n	8002cb8 <__udivmoddi4+0x160>
 8002c22:	42ab      	cmp	r3, r5
 8002c24:	d302      	bcc.n	8002c2c <__udivmoddi4+0xd4>
 8002c26:	4282      	cmp	r2, r0
 8002c28:	f200 80f9 	bhi.w	8002e1e <__udivmoddi4+0x2c6>
 8002c2c:	1a84      	subs	r4, r0, r2
 8002c2e:	eb65 0303 	sbc.w	r3, r5, r3
 8002c32:	2001      	movs	r0, #1
 8002c34:	4698      	mov	r8, r3
 8002c36:	2e00      	cmp	r6, #0
 8002c38:	d0e2      	beq.n	8002c00 <__udivmoddi4+0xa8>
 8002c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8002c3e:	e7df      	b.n	8002c00 <__udivmoddi4+0xa8>
 8002c40:	b902      	cbnz	r2, 8002c44 <__udivmoddi4+0xec>
 8002c42:	deff      	udf	#255	; 0xff
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	f040 8091 	bne.w	8002d70 <__udivmoddi4+0x218>
 8002c4e:	eba1 050c 	sub.w	r5, r1, ip
 8002c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002c56:	fa1f fe8c 	uxth.w	lr, ip
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fbb5 f3f7 	udiv	r3, r5, r7
 8002c60:	fb07 5013 	mls	r0, r7, r3, r5
 8002c64:	0c25      	lsrs	r5, r4, #16
 8002c66:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002c6a:	fb0e f003 	mul.w	r0, lr, r3
 8002c6e:	42a8      	cmp	r0, r5
 8002c70:	d908      	bls.n	8002c84 <__udivmoddi4+0x12c>
 8002c72:	eb1c 0505 	adds.w	r5, ip, r5
 8002c76:	f103 38ff 	add.w	r8, r3, #4294967295
 8002c7a:	d202      	bcs.n	8002c82 <__udivmoddi4+0x12a>
 8002c7c:	42a8      	cmp	r0, r5
 8002c7e:	f200 80cb 	bhi.w	8002e18 <__udivmoddi4+0x2c0>
 8002c82:	4643      	mov	r3, r8
 8002c84:	1a2d      	subs	r5, r5, r0
 8002c86:	b2a4      	uxth	r4, r4
 8002c88:	fbb5 f0f7 	udiv	r0, r5, r7
 8002c8c:	fb07 5510 	mls	r5, r7, r0, r5
 8002c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8002c94:	fb0e fe00 	mul.w	lr, lr, r0
 8002c98:	45a6      	cmp	lr, r4
 8002c9a:	d908      	bls.n	8002cae <__udivmoddi4+0x156>
 8002c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8002ca0:	f100 35ff 	add.w	r5, r0, #4294967295
 8002ca4:	d202      	bcs.n	8002cac <__udivmoddi4+0x154>
 8002ca6:	45a6      	cmp	lr, r4
 8002ca8:	f200 80bb 	bhi.w	8002e22 <__udivmoddi4+0x2ca>
 8002cac:	4628      	mov	r0, r5
 8002cae:	eba4 040e 	sub.w	r4, r4, lr
 8002cb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002cb6:	e79e      	b.n	8002bf6 <__udivmoddi4+0x9e>
 8002cb8:	f1c1 0720 	rsb	r7, r1, #32
 8002cbc:	408b      	lsls	r3, r1
 8002cbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8002cc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8002cc6:	fa20 f407 	lsr.w	r4, r0, r7
 8002cca:	fa05 f301 	lsl.w	r3, r5, r1
 8002cce:	431c      	orrs	r4, r3
 8002cd0:	40fd      	lsrs	r5, r7
 8002cd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002cd6:	fa00 f301 	lsl.w	r3, r0, r1
 8002cda:	fbb5 f8f9 	udiv	r8, r5, r9
 8002cde:	0c20      	lsrs	r0, r4, #16
 8002ce0:	fa1f fe8c 	uxth.w	lr, ip
 8002ce4:	fb09 5518 	mls	r5, r9, r8, r5
 8002ce8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002cec:	fb08 f00e 	mul.w	r0, r8, lr
 8002cf0:	42a8      	cmp	r0, r5
 8002cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8002cf6:	d90b      	bls.n	8002d10 <__udivmoddi4+0x1b8>
 8002cf8:	eb1c 0505 	adds.w	r5, ip, r5
 8002cfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8002d00:	f080 8088 	bcs.w	8002e14 <__udivmoddi4+0x2bc>
 8002d04:	42a8      	cmp	r0, r5
 8002d06:	f240 8085 	bls.w	8002e14 <__udivmoddi4+0x2bc>
 8002d0a:	f1a8 0802 	sub.w	r8, r8, #2
 8002d0e:	4465      	add	r5, ip
 8002d10:	1a2d      	subs	r5, r5, r0
 8002d12:	b2a4      	uxth	r4, r4
 8002d14:	fbb5 f0f9 	udiv	r0, r5, r9
 8002d18:	fb09 5510 	mls	r5, r9, r0, r5
 8002d1c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8002d20:	fb00 fe0e 	mul.w	lr, r0, lr
 8002d24:	45ae      	cmp	lr, r5
 8002d26:	d908      	bls.n	8002d3a <__udivmoddi4+0x1e2>
 8002d28:	eb1c 0505 	adds.w	r5, ip, r5
 8002d2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8002d30:	d26c      	bcs.n	8002e0c <__udivmoddi4+0x2b4>
 8002d32:	45ae      	cmp	lr, r5
 8002d34:	d96a      	bls.n	8002e0c <__udivmoddi4+0x2b4>
 8002d36:	3802      	subs	r0, #2
 8002d38:	4465      	add	r5, ip
 8002d3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002d3e:	fba0 9402 	umull	r9, r4, r0, r2
 8002d42:	eba5 050e 	sub.w	r5, r5, lr
 8002d46:	42a5      	cmp	r5, r4
 8002d48:	46c8      	mov	r8, r9
 8002d4a:	46a6      	mov	lr, r4
 8002d4c:	d356      	bcc.n	8002dfc <__udivmoddi4+0x2a4>
 8002d4e:	d053      	beq.n	8002df8 <__udivmoddi4+0x2a0>
 8002d50:	b15e      	cbz	r6, 8002d6a <__udivmoddi4+0x212>
 8002d52:	ebb3 0208 	subs.w	r2, r3, r8
 8002d56:	eb65 050e 	sbc.w	r5, r5, lr
 8002d5a:	fa05 f707 	lsl.w	r7, r5, r7
 8002d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8002d62:	40cd      	lsrs	r5, r1
 8002d64:	431f      	orrs	r7, r3
 8002d66:	e9c6 7500 	strd	r7, r5, [r6]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d70:	f1c2 0320 	rsb	r3, r2, #32
 8002d74:	fa20 f103 	lsr.w	r1, r0, r3
 8002d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d7c:	fa25 f303 	lsr.w	r3, r5, r3
 8002d80:	4095      	lsls	r5, r2
 8002d82:	430d      	orrs	r5, r1
 8002d84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002d88:	fa1f fe8c 	uxth.w	lr, ip
 8002d8c:	fbb3 f1f7 	udiv	r1, r3, r7
 8002d90:	fb07 3011 	mls	r0, r7, r1, r3
 8002d94:	0c2b      	lsrs	r3, r5, #16
 8002d96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002d9a:	fb01 f00e 	mul.w	r0, r1, lr
 8002d9e:	4298      	cmp	r0, r3
 8002da0:	fa04 f402 	lsl.w	r4, r4, r2
 8002da4:	d908      	bls.n	8002db8 <__udivmoddi4+0x260>
 8002da6:	eb1c 0303 	adds.w	r3, ip, r3
 8002daa:	f101 38ff 	add.w	r8, r1, #4294967295
 8002dae:	d22f      	bcs.n	8002e10 <__udivmoddi4+0x2b8>
 8002db0:	4298      	cmp	r0, r3
 8002db2:	d92d      	bls.n	8002e10 <__udivmoddi4+0x2b8>
 8002db4:	3902      	subs	r1, #2
 8002db6:	4463      	add	r3, ip
 8002db8:	1a1b      	subs	r3, r3, r0
 8002dba:	b2ad      	uxth	r5, r5
 8002dbc:	fbb3 f0f7 	udiv	r0, r3, r7
 8002dc0:	fb07 3310 	mls	r3, r7, r0, r3
 8002dc4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8002dc8:	fb00 f30e 	mul.w	r3, r0, lr
 8002dcc:	42ab      	cmp	r3, r5
 8002dce:	d908      	bls.n	8002de2 <__udivmoddi4+0x28a>
 8002dd0:	eb1c 0505 	adds.w	r5, ip, r5
 8002dd4:	f100 38ff 	add.w	r8, r0, #4294967295
 8002dd8:	d216      	bcs.n	8002e08 <__udivmoddi4+0x2b0>
 8002dda:	42ab      	cmp	r3, r5
 8002ddc:	d914      	bls.n	8002e08 <__udivmoddi4+0x2b0>
 8002dde:	3802      	subs	r0, #2
 8002de0:	4465      	add	r5, ip
 8002de2:	1aed      	subs	r5, r5, r3
 8002de4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002de8:	e738      	b.n	8002c5c <__udivmoddi4+0x104>
 8002dea:	4631      	mov	r1, r6
 8002dec:	4630      	mov	r0, r6
 8002dee:	e707      	b.n	8002c00 <__udivmoddi4+0xa8>
 8002df0:	4686      	mov	lr, r0
 8002df2:	e6e5      	b.n	8002bc0 <__udivmoddi4+0x68>
 8002df4:	4618      	mov	r0, r3
 8002df6:	e6fa      	b.n	8002bee <__udivmoddi4+0x96>
 8002df8:	454b      	cmp	r3, r9
 8002dfa:	d2a9      	bcs.n	8002d50 <__udivmoddi4+0x1f8>
 8002dfc:	ebb9 0802 	subs.w	r8, r9, r2
 8002e00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8002e04:	3801      	subs	r0, #1
 8002e06:	e7a3      	b.n	8002d50 <__udivmoddi4+0x1f8>
 8002e08:	4640      	mov	r0, r8
 8002e0a:	e7ea      	b.n	8002de2 <__udivmoddi4+0x28a>
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	e794      	b.n	8002d3a <__udivmoddi4+0x1e2>
 8002e10:	4641      	mov	r1, r8
 8002e12:	e7d1      	b.n	8002db8 <__udivmoddi4+0x260>
 8002e14:	46d0      	mov	r8, sl
 8002e16:	e77b      	b.n	8002d10 <__udivmoddi4+0x1b8>
 8002e18:	3b02      	subs	r3, #2
 8002e1a:	4465      	add	r5, ip
 8002e1c:	e732      	b.n	8002c84 <__udivmoddi4+0x12c>
 8002e1e:	4608      	mov	r0, r1
 8002e20:	e709      	b.n	8002c36 <__udivmoddi4+0xde>
 8002e22:	4464      	add	r4, ip
 8002e24:	3802      	subs	r0, #2
 8002e26:	e742      	b.n	8002cae <__udivmoddi4+0x156>

08002e28 <__aeabi_idiv0>:
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop

08002e2c <dilithium1>:
uint8_t smbuf_chunk_14(uint8_t *p, uint8_t len);
// uint8_t test_chunk_6(uint8_t *p, uint8_t len);*/


uint8_t dilithium1(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p)
{
 8002e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e30:	f6ad 7da8 	subw	sp, sp, #4008	; 0xfa8
 8002e34:	461c      	mov	r4, r3
 8002e36:	a904      	add	r1, sp, #16
    mlen = 33*(0+1);

    char c[16];
   	unsigned int i=0;
	unsigned int j=0,k=0;
    for	(i=0;i<16;i++){
 8002e38:	2300      	movs	r3, #0
	if (i<10)
 8002e3a:	2b09      	cmp	r3, #9
        c[i] = '0' +i;
 8002e3c:	bf94      	ite	ls
 8002e3e:	f103 0230 	addls.w	r2, r3, #48	; 0x30
	else
        c[i] = 'A' + i-10;
 8002e42:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
    for	(i=0;i<16;i++){
 8002e46:	3301      	adds	r3, #1
        c[i] = 'A' + i-10;
 8002e48:	b2d2      	uxtb	r2, r2
    for	(i=0;i<16;i++){
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	f801 2b01 	strb.w	r2, [r1], #1
 8002e50:	d1f3      	bne.n	8002e3a <dilithium1+0xe>
	}
    //给消息赋值
    //改動1開始，原來只有底下被注釋的一行
    char mstr[66] = "35DFB0A4D19D9A123C95D2C3F0201F92D62BAD8254FC32CE3750C64212B6044FDF";
    for(int i=0; i < 66;i++){
        mstr[i] = p[i];
 8002e52:	2242      	movs	r2, #66	; 0x42
 8002e54:	4621      	mov	r1, r4
 8002e56:	a811      	add	r0, sp, #68	; 0x44
 8002e58:	f7ff f864 	bl	8001f24 <memcpy>
    }
    //改動1結束

   for(int i=0; i < 180;i++){
         p[i]=0;
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	22b4      	movs	r2, #180	; 0xb4
 8002e60:	4620      	mov	r0, r4
 8002e62:	f003 fd5b 	bl	800691c <memset>
 8002e66:	ab08      	add	r3, sp, #32
 8002e68:	a911      	add	r1, sp, #68	; 0x44
   // for(int i=0; i < 66;i++){
   //     p[90+i] = mstr[i];
   // }

    //改動2，注釋了以下
    for(i=0,j=0;i<66;i++,j++){
 8002e6a:	f04f 0800 	mov.w	r8, #0
 8002e6e:	461e      	mov	r6, r3
	msg[j] = 0;
	for(k=0; c[k] != mstr[i] ;k++);
 8002e70:	780d      	ldrb	r5, [r1, #0]
 8002e72:	a804      	add	r0, sp, #16
 8002e74:	2200      	movs	r2, #0
 8002e76:	e000      	b.n	8002e7a <dilithium1+0x4e>
 8002e78:	3201      	adds	r2, #1
 8002e7a:	f810 7b01 	ldrb.w	r7, [r0], #1
 8002e7e:	42af      	cmp	r7, r5
 8002e80:	d1fa      	bne.n	8002e78 <dilithium1+0x4c>
	msg[j] += k*16;
 8002e82:	0112      	lsls	r2, r2, #4
	i+=1;
	for(k=0; c[k] != mstr[i] ;k++);
 8002e84:	784f      	ldrb	r7, [r1, #1]
	msg[j] += k*16;
 8002e86:	b2d2      	uxtb	r2, r2
	for(k=0; c[k] != mstr[i] ;k++);
 8002e88:	ad04      	add	r5, sp, #16
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f815 cb01 	ldrb.w	ip, [r5], #1
 8002e90:	45bc      	cmp	ip, r7
 8002e92:	d157      	bne.n	8002f44 <dilithium1+0x118>
    for(i=0,j=0;i<66;i++,j++){
 8002e94:	f108 0801 	add.w	r8, r8, #1
	msg[j] += k;
 8002e98:	4402      	add	r2, r0
    for(i=0,j=0;i<66;i++,j++){
 8002e9a:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
	msg[j] += k;
 8002e9e:	f803 2b01 	strb.w	r2, [r3], #1
    for(i=0,j=0;i<66;i++,j++){
 8002ea2:	f101 0102 	add.w	r1, r1, #2
 8002ea6:	d1e3      	bne.n	8002e70 <dilithium1+0x44>

    // p[87] = 33;
    // p[86] = 33;
    
    // p[13] = ETA;
    m1 = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	f640 1095 	movw	r0, #2453	; 0x995
 8002eae:	f003 f9e3 	bl	8006278 <calloc>
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 8002eb2:	2101      	movs	r1, #1
    m1 = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 8002eb4:	4605      	mov	r5, r0
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 8002eb6:	f640 1095 	movw	r0, #2453	; 0x995
 8002eba:	f003 f9dd 	bl	8006278 <calloc>
        
    crypto_sign_keypair(pk,sk);
 8002ebe:	f50d 6ab5 	add.w	sl, sp, #1448	; 0x5a8
 8002ec2:	f10d 0988 	add.w	r9, sp, #136	; 0x88
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 8002ec6:	4607      	mov	r7, r0
    crypto_sign_keypair(pk,sk);
 8002ec8:	4651      	mov	r1, sl
 8002eca:	4648      	mov	r0, r9
 8002ecc:	f000 f894 	bl	8002ff8 <crypto_sign_keypair>
	


	//crypto_sign是簽名函數,生成的簽名消息為sm
    
    if ( (ret_val = crypto_sign(sm, &smlen, msg, mlen, sk)) != 0) {
 8002ed0:	f8cd a000 	str.w	sl, [sp]
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	4632      	mov	r2, r6
 8002ed8:	a902      	add	r1, sp, #8
 8002eda:	4638      	mov	r0, r7
 8002edc:	f000 fa8e 	bl	80033fc <crypto_sign>
 8002ee0:	b2c0      	uxtb	r0, r0
 8002ee2:	bb88      	cbnz	r0, 8002f48 <dilithium1+0x11c>

        
	//函數crypto_sign_open用於驗證簽名，如果簽名成功返回0，簽名驗證失敗返回-1
        // ret_val = crypto_sign_open(msg, &mlen1, sm, smlen, pk);
        // simpleserial_put('r', 1, ret_val);
    if ((ret_val =  crypto_sign_open(m1, &mlen1, sm, smlen, pk)) != 0) {
 8002ee4:	9b02      	ldr	r3, [sp, #8]
 8002ee6:	f8cd 9000 	str.w	r9, [sp]
 8002eea:	463a      	mov	r2, r7
 8002eec:	a903      	add	r1, sp, #12
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f000 fb6c 	bl	80035cc <crypto_sign_open>
 8002ef4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8002ef8:	d12f      	bne.n	8002f5a <dilithium1+0x12e>
        }
        p[31] = ret_val;
    }

   
    if ( mlen != mlen1 ) {
 8002efa:	9903      	ldr	r1, [sp, #12]
 8002efc:	2921      	cmp	r1, #33	; 0x21
 8002efe:	d137      	bne.n	8002f70 <dilithium1+0x144>
        for(int x=0; x <10;x++){
           p[x] +=3;
        }
    }
        
    if ( memcmp(msg, m1, mlen) ) {
 8002f00:	2221      	movs	r2, #33	; 0x21
 8002f02:	4629      	mov	r1, r5
 8002f04:	4630      	mov	r0, r6
 8002f06:	f003 fcd5 	bl	80068b4 <memcmp>
 8002f0a:	b158      	cbz	r0, 8002f24 <dilithium1+0xf8>
        printf("crypto_sign_open returned bad 'm' value\n");
 8002f0c:	481f      	ldr	r0, [pc, #124]	; (8002f8c <dilithium1+0x160>)
 8002f0e:	f003 fdc5 	bl	8006a9c <puts>
        for(int x=0; x <10;x++){
 8002f12:	1e63      	subs	r3, r4, #1
 8002f14:	f104 0109 	add.w	r1, r4, #9
            p[x] +=5;
 8002f18:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002f1c:	3205      	adds	r2, #5
        for(int x=0; x <10;x++){
 8002f1e:	4299      	cmp	r1, r3
            p[x] +=5;
 8002f20:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <10;x++){
 8002f22:	d1f9      	bne.n	8002f18 <dilithium1+0xec>
    // for(int x=0; x <16;x++){
    //         p[x] +=1;
    //     }
        // p[25] = DILITHIUM_MODE;
    
        free(m1);
 8002f24:	4628      	mov	r0, r5
 8002f26:	f003 fa0d 	bl	8006344 <free>
        // free(sm);
        free(m);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f003 fa0a 	bl	8006344 <free>
    simpleserial_put('r', 180, p);
 8002f30:	4622      	mov	r2, r4
 8002f32:	21b4      	movs	r1, #180	; 0xb4
 8002f34:	2072      	movs	r0, #114	; 0x72
 8002f36:	f001 fc23 	bl	8004780 <simpleserial_put>
   return 0x00;
}
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f60d 7da8 	addw	sp, sp, #4008	; 0xfa8
 8002f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(k=0; c[k] != mstr[i] ;k++);
 8002f44:	3001      	adds	r0, #1
 8002f46:	e7a1      	b.n	8002e8c <dilithium1+0x60>
 8002f48:	1e63      	subs	r3, r4, #1
 8002f4a:	1da1      	adds	r1, r4, #6
            p[x] +=20;
 8002f4c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002f50:	3214      	adds	r2, #20
        for(int x=0; x <7;x++){
 8002f52:	4299      	cmp	r1, r3
            p[x] +=20;
 8002f54:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <7;x++){
 8002f56:	d1f9      	bne.n	8002f4c <dilithium1+0x120>
 8002f58:	e7c4      	b.n	8002ee4 <dilithium1+0xb8>
 8002f5a:	1e63      	subs	r3, r4, #1
 8002f5c:	f104 0109 	add.w	r1, r4, #9
            p[x] +=2;
 8002f60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002f64:	3202      	adds	r2, #2
        for(int x=0; x <10;x++){
 8002f66:	4299      	cmp	r1, r3
            p[x] +=2;
 8002f68:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <10;x++){
 8002f6a:	d1f9      	bne.n	8002f60 <dilithium1+0x134>
        p[31] = ret_val;
 8002f6c:	77e0      	strb	r0, [r4, #31]
 8002f6e:	e7c4      	b.n	8002efa <dilithium1+0xce>
        printf("crypto_sign_open returned bad 'mlen': Got <%llu>, expected <%llu>\n", mlen1, mlen);
 8002f70:	4807      	ldr	r0, [pc, #28]	; (8002f90 <dilithium1+0x164>)
 8002f72:	2221      	movs	r2, #33	; 0x21
 8002f74:	f003 fd30 	bl	80069d8 <printf>
        for(int x=0; x <10;x++){
 8002f78:	1e63      	subs	r3, r4, #1
 8002f7a:	f104 0109 	add.w	r1, r4, #9
           p[x] +=3;
 8002f7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002f82:	3203      	adds	r2, #3
        for(int x=0; x <10;x++){
 8002f84:	4299      	cmp	r1, r3
           p[x] +=3;
 8002f86:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <10;x++){
 8002f88:	d1f9      	bne.n	8002f7e <dilithium1+0x152>
 8002f8a:	e7b9      	b.n	8002f00 <dilithium1+0xd4>
 8002f8c:	0800d4d3 	.word	0x0800d4d3
 8002f90:	0800d490 	.word	0x0800d490

08002f94 <main>:
// {
//      simpleserial_put('r',20, array);
//      return 0x00;
// }
注釋2結束*/
int main(void){
 8002f94:	b508      	push	{r3, lr}

    platform_init();
 8002f96:	f001 fc97 	bl	80048c8 <platform_init>
    init_uart();
 8002f9a:	f001 fcdd 	bl	8004958 <init_uart>

    trigger_setup();
 8002f9e:	f001 fd19 	bl	80049d4 <trigger_setup>
    
    /* Device reset detected */
    putch('r');
 8002fa2:	2072      	movs	r0, #114	; 0x72
 8002fa4:	f001 fd58 	bl	8004a58 <putch>
    putch('R');
 8002fa8:	2052      	movs	r0, #82	; 0x52
 8002faa:	f001 fd55 	bl	8004a58 <putch>
    putch('E');
 8002fae:	2045      	movs	r0, #69	; 0x45
 8002fb0:	f001 fd52 	bl	8004a58 <putch>
    putch('S');
 8002fb4:	2053      	movs	r0, #83	; 0x53
 8002fb6:	f001 fd4f 	bl	8004a58 <putch>
    putch('E');
 8002fba:	2045      	movs	r0, #69	; 0x45
 8002fbc:	f001 fd4c 	bl	8004a58 <putch>
    putch('T');
 8002fc0:	2054      	movs	r0, #84	; 0x54
 8002fc2:	f001 fd49 	bl	8004a58 <putch>
    putch(' ');
 8002fc6:	2020      	movs	r0, #32
 8002fc8:	f001 fd46 	bl	8004a58 <putch>
    putch(' ');
 8002fcc:	2020      	movs	r0, #32
 8002fce:	f001 fd43 	bl	8004a58 <putch>
    putch(' ');
 8002fd2:	2020      	movs	r0, #32
 8002fd4:	f001 fd40 	bl	8004a58 <putch>
    putch('\n');
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f001 fd3d 	bl	8004a58 <putch>
    
    simpleserial_init();
 8002fde:	f001 fbb2 	bl	8004746 <simpleserial_init>
    //simpleserial_addcmd('A', 16, enc_password);
    
    simpleserial_addcmd('3', 180, dilithium1);
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <main+0x60>)
 8002fe4:	21b4      	movs	r1, #180	; 0xb4
 8002fe6:	2033      	movs	r0, #51	; 0x33
 8002fe8:	f001 fbae 	bl	8004748 <simpleserial_addcmd>
    simpleserial_addcmd('N',0,smbuf_chunk_14);

   注釋3結束*/
    
    while(1)
        simpleserial_get();
 8002fec:	f001 fbf6 	bl	80047dc <simpleserial_get>
    while(1)
 8002ff0:	e7fc      	b.n	8002fec <main+0x58>
 8002ff2:	bf00      	nop
 8002ff4:	08002e2d 	.word	0x08002e2d

08002ff8 <crypto_sign_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8002ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ffc:	f5ad 4d12 	sub.w	sp, sp, #37376	; 0x9200
 8003000:	b0a5      	sub	sp, #148	; 0x94
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  //randombytes(seedbuf, SEEDBYTES);
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 8003002:	f44f 7280 	mov.w	r2, #256	; 0x100
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8003006:	4605      	mov	r5, r0
 8003008:	460e      	mov	r6, r1
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 800300a:	a864      	add	r0, sp, #400	; 0x190
 800300c:	494a      	ldr	r1, [pc, #296]	; (8003138 <crypto_sign_keypair+0x140>)
 800300e:	ac64      	add	r4, sp, #400	; 0x190
 8003010:	f7fe ff88 	bl	8001f24 <memcpy>
	uint8_t cacheintsk[6*SEEDBYTES];
	for (int i = 0; i <2 * SEEDBYTES; i++)
 8003014:	f1a4 02c0 	sub.w	r2, r4, #192	; 0xc0
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 8003018:	4610      	mov	r0, r2
	for (int i = 0; i <2 * SEEDBYTES; i++)
 800301a:	2100      	movs	r1, #0
	{
		if (seedbufcha[i] - 'A' >= 0)
 800301c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003020:	2b40      	cmp	r3, #64	; 0x40
			cacheintsk[i] = 10 + seedbufcha[i] - 'A';
 8003022:	bf8c      	ite	hi
 8003024:	3b37      	subhi	r3, #55	; 0x37
		else
			cacheintsk[i] = seedbufcha[i] - '0';
 8003026:	3b30      	subls	r3, #48	; 0x30
	for (int i = 0; i <2 * SEEDBYTES; i++)
 8003028:	3101      	adds	r1, #1
			cacheintsk[i] = seedbufcha[i] - '0';
 800302a:	b2db      	uxtb	r3, r3
	for (int i = 0; i <2 * SEEDBYTES; i++)
 800302c:	2940      	cmp	r1, #64	; 0x40
 800302e:	f800 3b01 	strb.w	r3, [r0], #1
 8003032:	d1f3      	bne.n	800301c <crypto_sign_keypair+0x24>
 8003034:	a914      	add	r1, sp, #80	; 0x50
	}
	for (int i = 0; i < SEEDBYTES; i++)
 8003036:	2300      	movs	r3, #0
 8003038:	460c      	mov	r4, r1
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 800303a:	7817      	ldrb	r7, [r2, #0]
 800303c:	7850      	ldrb	r0, [r2, #1]
	for (int i = 0; i < SEEDBYTES; i++)
 800303e:	3301      	adds	r3, #1
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 8003040:	eb00 1007 	add.w	r0, r0, r7, lsl #4
	for (int i = 0; i < SEEDBYTES; i++)
 8003044:	2b20      	cmp	r3, #32
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 8003046:	f801 0b01 	strb.w	r0, [r1], #1
	for (int i = 0; i < SEEDBYTES; i++)
 800304a:	f102 0202 	add.w	r2, r2, #2
 800304e:	d1f4      	bne.n	800303a <crypto_sign_keypair+0x42>
  
  //
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 8003050:	4622      	mov	r2, r4
 8003052:	4620      	mov	r0, r4
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	f001 fb25 	bl	80046a4 <shake256>
  rho = seedbuf;
  rhoprime = rho + SEEDBYTES;
  key = rhoprime + CRHBYTES;

  /* Expand matrix */
  polyvec_matrix_expand(mat, rho);
 800305a:	f50d 40a5 	add.w	r0, sp, #21120	; 0x5280

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 800305e:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8003062:	afa4      	add	r7, sp, #656	; 0x290
  polyvec_matrix_expand(mat, rho);
 8003064:	4621      	mov	r1, r4
 8003066:	3010      	adds	r0, #16
  polyveck_uniform_eta(&s2, rhoprime, L);
 8003068:	f50d 580a 	add.w	r8, sp, #8832	; 0x2280
  polyvec_matrix_expand(mat, rho);
 800306c:	f000 ffab 	bl	8003fc6 <pqcrystals_dilithium_polyvec_matrix_expand>
  polyveck_uniform_eta(&s2, rhoprime, L);
 8003070:	f108 0810 	add.w	r8, r8, #16
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 8003074:	4649      	mov	r1, r9
 8003076:	4638      	mov	r0, r7
 8003078:	2200      	movs	r2, #0
 800307a:	f000 ffbd 	bl	8003ff8 <pqcrystals_dilithium_polyvecl_uniform_eta>
  polyveck_uniform_eta(&s2, rhoprime, L);
 800307e:	4649      	mov	r1, r9
 8003080:	4640      	mov	r0, r8
 8003082:	2204      	movs	r2, #4
 8003084:	f001 f843 	bl	800410e <pqcrystals_dilithium_polyveck_uniform_eta>

  /* Matrix-vector multiplication */
  s1hat = s1;
 8003088:	f50d 5094 	add.w	r0, sp, #4736	; 0x1280
 800308c:	4639      	mov	r1, r7
 800308e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003092:	3010      	adds	r0, #16
 8003094:	f7fe ff46 	bl	8001f24 <memcpy>
  polyvecl_ntt(&s1hat);
 8003098:	f50d 5094 	add.w	r0, sp, #4736	; 0x1280
 800309c:	3010      	adds	r0, #16
 800309e:	f000 ffee 	bl	800407e <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 80030a2:	f50d 5294 	add.w	r2, sp, #4736	; 0x1280
 80030a6:	f50d 41a5 	add.w	r1, sp, #21120	; 0x5280
 80030aa:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 80030ae:	3210      	adds	r2, #16
 80030b0:	3110      	adds	r1, #16
 80030b2:	3010      	adds	r0, #16
 80030b4:	f001 f808 	bl	80040c8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&t1);
 80030b8:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 80030bc:	3010      	adds	r0, #16
 80030be:	f001 f836 	bl	800412e <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&t1);
 80030c2:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 80030c6:	3010      	adds	r0, #16
 80030c8:	f001 f899 	bl	80041fe <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
 80030cc:	f50d 514a 	add.w	r1, sp, #12928	; 0x3280
 80030d0:	3110      	adds	r1, #16
 80030d2:	4642      	mov	r2, r8
 80030d4:	4608      	mov	r0, r1
 80030d6:	f001 f84e 	bl	8004176 <pqcrystals_dilithium_polyveck_add>

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 80030da:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 80030de:	3010      	adds	r0, #16
 80030e0:	f001 f837 	bl	8004152 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 80030e4:	f50d 4985 	add.w	r9, sp, #17024	; 0x4280
 80030e8:	f50d 524a 	add.w	r2, sp, #12928	; 0x3280
 80030ec:	f109 0910 	add.w	r9, r9, #16
 80030f0:	3210      	adds	r2, #16
 80030f2:	4649      	mov	r1, r9
 80030f4:	4610      	mov	r0, r2
 80030f6:	f001 f8a4 	bl	8004242 <pqcrystals_dilithium_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 80030fa:	f50d 524a 	add.w	r2, sp, #12928	; 0x3280
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	3210      	adds	r2, #16
 8003104:	f000 fa8f 	bl	8003626 <pqcrystals_dilithium_pack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, TRBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 8003108:	462a      	mov	r2, r5
 800310a:	a804      	add	r0, sp, #16
 800310c:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8003110:	2140      	movs	r1, #64	; 0x40
 8003112:	f001 fac7 	bl	80046a4 <shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 8003116:	4630      	mov	r0, r6
 8003118:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800311c:	f8cd 9000 	str.w	r9, [sp]
 8003120:	ab2c      	add	r3, sp, #176	; 0xb0
 8003122:	aa04      	add	r2, sp, #16
 8003124:	4621      	mov	r1, r4
 8003126:	f000 fab4 	bl	8003692 <pqcrystals_dilithium_pack_sk>

  return 0;
}
 800312a:	2000      	movs	r0, #0
 800312c:	f50d 4d12 	add.w	sp, sp, #37376	; 0x9200
 8003130:	b025      	add	sp, #148	; 0x94
 8003132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003136:	bf00      	nop
 8003138:	0800d4fb 	.word	0x0800d4fb

0800313c <crypto_sign_signature>:
int crypto_sign_signature(uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk)
{
 800313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003140:	f5ad 4d3c 	sub.w	sp, sp, #48128	; 0xbc00
 8003144:	b087      	sub	sp, #28
 8003146:	461e      	mov	r6, r3
  tr = rho + SEEDBYTES;
  key = tr + TRBYTES;
  rnd = key + SEEDBYTES;
  mu = rnd + RNDBYTES;
  rhoprime = mu + CRHBYTES;
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 8003148:	f50d 433c 	add.w	r3, sp, #48128	; 0xbc00
 800314c:	3340      	adds	r3, #64	; 0x40
 800314e:	f50d 49d8 	add.w	r9, sp, #27648	; 0x6c00
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	9302      	str	r3, [sp, #8]
 8003156:	f50d 47b8 	add.w	r7, sp, #23552	; 0x5c00
 800315a:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 800315e:	f109 0918 	add.w	r9, r9, #24
 8003162:	3718      	adds	r7, #24
 8003164:	f50d 5330 	add.w	r3, sp, #11264	; 0x2c00
 8003168:	3318      	adds	r3, #24
{
 800316a:	9104      	str	r1, [sp, #16]
 800316c:	4614      	mov	r4, r2
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 800316e:	a946      	add	r1, sp, #280	; 0x118
 8003170:	4642      	mov	r2, r8
{
 8003172:	4605      	mov	r5, r0
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 8003174:	f8cd 9004 	str.w	r9, [sp, #4]
 8003178:	a83e      	add	r0, sp, #248	; 0xf8
 800317a:	9700      	str	r7, [sp, #0]
 800317c:	f000 fad0 	bl	8003720 <pqcrystals_dilithium_unpack_sk>

  /* Compute mu = CRH(tr, msg) */
  shake256_inc_init(&state);
 8003180:	a80a      	add	r0, sp, #40	; 0x28
 8003182:	f001 fa81 	bl	8004688 <shake256_inc_init>
  shake256_inc_absorb(&state, tr, TRBYTES);
 8003186:	2240      	movs	r2, #64	; 0x40
 8003188:	a946      	add	r1, sp, #280	; 0x118
 800318a:	a80a      	add	r0, sp, #40	; 0x28
 800318c:	f001 fa7e 	bl	800468c <shake256_inc_absorb>
  shake256_inc_absorb(&state, m, mlen);
 8003190:	4632      	mov	r2, r6
 8003192:	4621      	mov	r1, r4
 8003194:	a80a      	add	r0, sp, #40	; 0x28
 8003196:	f001 fa79 	bl	800468c <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 800319a:	a80a      	add	r0, sp, #40	; 0x28
 800319c:	f001 fa7b 	bl	8004696 <shake256_inc_finalize>
  shake256_inc_squeeze(mu, CRHBYTES, &state);
 80031a0:	aa0a      	add	r2, sp, #40	; 0x28
 80031a2:	2140      	movs	r1, #64	; 0x40
 80031a4:	a866      	add	r0, sp, #408	; 0x198
 80031a6:	f001 fa7a 	bl	800469e <shake256_inc_squeeze>

  for (n = 0; n < RNDBYTES; n++) {
     rnd[n] = 0;
 80031aa:	2220      	movs	r2, #32
 80031ac:	2100      	movs	r1, #0
 80031ae:	a85e      	add	r0, sp, #376	; 0x178
 80031b0:	f003 fbb4 	bl	800691c <memset>
  }
  trigger_high();
 80031b4:	f001 fc2e 	bl	8004a14 <trigger_high>
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	4642      	mov	r2, r8
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	a876      	add	r0, sp, #472	; 0x1d8
 80031c0:	f001 fa70 	bl	80046a4 <shake256>
  trigger_low();
 80031c4:	f001 fc2e 	bl	8004a24 <trigger_low>
  /* Expand matrix and transform vectors */
  polyvec_matrix_expand(mat, rho);
 80031c8:	f50d 40f8 	add.w	r0, sp, #31744	; 0x7c00
 80031cc:	a93e      	add	r1, sp, #248	; 0xf8
 80031ce:	3018      	adds	r0, #24
 80031d0:	f000 fef9 	bl	8003fc6 <pqcrystals_dilithium_polyvec_matrix_expand>
  polyvecl_small_ntt(s1_prime);
 80031d4:	4638      	mov	r0, r7
 80031d6:	f001 f91b 	bl	8004410 <polyvecl_small_ntt>
  polyveck_small_ntt(s2_prime);
 80031da:	4648      	mov	r0, r9
 80031dc:	f001 f92c 	bl	8004438 <polyveck_small_ntt>

  polyveck_ntt(&t0);
 80031e0:	f50d 5030 	add.w	r0, sp, #11264	; 0x2c00
 80031e4:	3018      	adds	r0, #24
 80031e6:	f000 fff8 	bl	80041da <pqcrystals_dilithium_polyveck_ntt>


  /* Write signature */
  pack_sig_z(sig, &z);
  unsigned int hint_n = 0;
  unsigned int hints_written = 0;
 80031ea:	ab09      	add	r3, sp, #36	; 0x24
  polyveck_ntt(&t0);
 80031ec:	f04f 0800 	mov.w	r8, #0
  unsigned int hints_written = 0;
 80031f0:	9307      	str	r3, [sp, #28]
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
 80031f2:	fa1f f288 	uxth.w	r2, r8
 80031f6:	a976      	add	r1, sp, #472	; 0x1d8
 80031f8:	f60d 4018 	addw	r0, sp, #3096	; 0xc18
 80031fc:	f000 ff0c 	bl	8004018 <pqcrystals_dilithium_polyvecl_uniform_gamma1>
  z = y;
 8003200:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8003204:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003208:	f60d 4118 	addw	r1, sp, #3096	; 0xc18
 800320c:	3018      	adds	r0, #24
 800320e:	f7fe fe89 	bl	8001f24 <memcpy>
  polyvecl_ntt(&z);
 8003212:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8003216:	3018      	adds	r0, #24
 8003218:	f000 ff31 	bl	800407e <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 800321c:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 8003220:	f50d 41f8 	add.w	r1, sp, #31744	; 0x7c00
 8003224:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 8003228:	3218      	adds	r2, #24
 800322a:	3118      	adds	r1, #24
 800322c:	3018      	adds	r0, #24
 800322e:	f000 ff4b 	bl	80040c8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 8003232:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 8003236:	3018      	adds	r0, #24
 8003238:	f000 ff79 	bl	800412e <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 800323c:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 8003240:	3018      	adds	r0, #24
 8003242:	f000 ffdc 	bl	80041fe <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
 8003246:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 800324a:	3018      	adds	r0, #24
 800324c:	f000 ff81 	bl	8004152 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 8003250:	f50d 5270 	add.w	r2, sp, #15360	; 0x3c00
 8003254:	3218      	adds	r2, #24
 8003256:	f50d 4198 	add.w	r1, sp, #19456	; 0x4c00
 800325a:	4610      	mov	r0, r2
 800325c:	3118      	adds	r1, #24
 800325e:	f001 f800 	bl	8004262 <pqcrystals_dilithium_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 8003262:	f50d 5170 	add.w	r1, sp, #15360	; 0x3c00
 8003266:	3118      	adds	r1, #24
 8003268:	4628      	mov	r0, r5
 800326a:	f001 f81a 	bl	80042a2 <pqcrystals_dilithium_polyveck_pack_w1>
  shake256_inc_init(&state);
 800326e:	a80a      	add	r0, sp, #40	; 0x28
 8003270:	f001 fa0a 	bl	8004688 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	a966      	add	r1, sp, #408	; 0x198
 8003278:	a80a      	add	r0, sp, #40	; 0x28
 800327a:	f001 fa07 	bl	800468c <shake256_inc_absorb>
  shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 800327e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003282:	4629      	mov	r1, r5
 8003284:	a80a      	add	r0, sp, #40	; 0x28
 8003286:	f001 fa01 	bl	800468c <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 800328a:	a80a      	add	r0, sp, #40	; 0x28
 800328c:	f001 fa03 	bl	8004696 <shake256_inc_finalize>
  shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 8003290:	aa0a      	add	r2, sp, #40	; 0x28
 8003292:	2120      	movs	r1, #32
 8003294:	4628      	mov	r0, r5
 8003296:	f001 fa02 	bl	800469e <shake256_inc_squeeze>
  poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 800329a:	f50d 7b06 	add.w	fp, sp, #536	; 0x218
  poly_challenge(&cp, sig);
 800329e:	4629      	mov	r1, r5
 80032a0:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
  poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 80032a4:	f60d 0a18 	addw	sl, sp, #2072	; 0x818
  poly_challenge(&cp, sig);
 80032a8:	f000 fc3d 	bl	8003b26 <pqcrystals_dilithium_poly_challenge>
  poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 80032ac:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 80032b0:	4659      	mov	r1, fp
 80032b2:	4650      	mov	r0, sl
 80032b4:	f001 f888 	bl	80043c8 <poly_small_ntt_precomp>
  poly_ntt(&cp);
 80032b8:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
 80032bc:	f000 fb65 	bl	800398a <pqcrystals_dilithium_poly_ntt>
  polyvecl_small_basemul_invntt(&z, &cp_small, &cp_small_prime, s1_prime);
 80032c0:	f50d 43b8 	add.w	r3, sp, #23552	; 0x5c00
 80032c4:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80032c8:	3318      	adds	r3, #24
 80032ca:	465a      	mov	r2, fp
 80032cc:	4651      	mov	r1, sl
 80032ce:	3018      	adds	r0, #24
 80032d0:	f001 f8c8 	bl	8004464 <polyvecl_small_basemul_invntt>
  polyvecl_add(&z, &z, &y);
 80032d4:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80032d8:	3118      	adds	r1, #24
 80032da:	4608      	mov	r0, r1
 80032dc:	f60d 4218 	addw	r2, sp, #3096	; 0xc18
 80032e0:	f000 febd 	bl	800405e <pqcrystals_dilithium_polyvecl_add>
  polyvecl_reduce(&z);
 80032e4:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80032e8:	3018      	adds	r0, #24
 80032ea:	f000 fea6 	bl	800403a <pqcrystals_dilithium_polyvecl_reduce>
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 80032ee:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80032f2:	4940      	ldr	r1, [pc, #256]	; (80033f4 <crypto_sign_signature+0x2b8>)
 80032f4:	3018      	adds	r0, #24
 80032f6:	f000 fef9 	bl	80040ec <pqcrystals_dilithium_polyvecl_chknorm>
 80032fa:	4604      	mov	r4, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d176      	bne.n	80033ee <crypto_sign_signature+0x2b2>
  pack_sig_z(sig, &z);
 8003300:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 8003304:	3118      	adds	r1, #24
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fa52 	bl	80037b0 <pqcrystals_dilithium_pack_sig_z>
  unsigned int hints_written = 0;
 800330c:	9b07      	ldr	r3, [sp, #28]
  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  for(unsigned int i = 0; i < K; ++i) {
    poly *tmp = &z.vec[0];
    poly_small_basemul_invntt(tmp, &cp_small, &cp_small_prime, &s2_prime[i]);
 800330e:	e9cd ba05 	strd	fp, sl, [sp, #20]
  unsigned int hints_written = 0;
 8003312:	601c      	str	r4, [r3, #0]
  for(unsigned int i = 0; i < K; ++i) {
 8003314:	4626      	mov	r6, r4
  unsigned int hint_n = 0;
 8003316:	4627      	mov	r7, r4
    poly_small_basemul_invntt(tmp, &cp_small, &cp_small_prime, &s2_prime[i]);
 8003318:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 800331c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8003320:	eb09 0304 	add.w	r3, r9, r4
 8003324:	3018      	adds	r0, #24
 8003326:	f001 f889 	bl	800443c <poly_small_basemul_invntt>

    poly_sub(&w0.vec[i], &w0.vec[i], tmp);
 800332a:	f50d 4398 	add.w	r3, sp, #19456	; 0x4c00
 800332e:	3318      	adds	r3, #24
 8003330:	eb03 0b04 	add.w	fp, r3, r4
 8003334:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 8003338:	4659      	mov	r1, fp
 800333a:	3218      	adds	r2, #24
 800333c:	4658      	mov	r0, fp
 800333e:	f000 fb0c 	bl	800395a <pqcrystals_dilithium_poly_sub>
    poly_reduce(&w0.vec[i]);
 8003342:	4658      	mov	r0, fp
 8003344:	f000 faf7 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
    if(poly_chknorm(&w0.vec[i], GAMMA2 - BETA))
 8003348:	492b      	ldr	r1, [pc, #172]	; (80033f8 <crypto_sign_signature+0x2bc>)
 800334a:	4658      	mov	r0, fp
 800334c:	f000 fb6c 	bl	8003a28 <pqcrystals_dilithium_poly_chknorm>
 8003350:	2800      	cmp	r0, #0
 8003352:	d14c      	bne.n	80033ee <crypto_sign_signature+0x2b2>
      goto rej;

    /* Compute hints for w1 */
    poly_pointwise_montgomery(tmp, &cp, &t0.vec[i]);
 8003354:	f50d 5330 	add.w	r3, sp, #11264	; 0x2c00
 8003358:	3318      	adds	r3, #24
 800335a:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 800335e:	191a      	adds	r2, r3, r4
 8003360:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
 8003364:	3018      	adds	r0, #24
 8003366:	f000 fb14 	bl	8003992 <pqcrystals_dilithium_poly_pointwise_montgomery>

    poly_invntt_tomont(tmp);
 800336a:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 800336e:	3018      	adds	r0, #24
 8003370:	f000 fb0d 	bl	800398e <pqcrystals_dilithium_poly_invntt_tomont>
    poly_reduce(tmp);
 8003374:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8003378:	3018      	adds	r0, #24
 800337a:	f000 fadc 	bl	8003936 <pqcrystals_dilithium_poly_reduce>

    if(poly_chknorm(tmp, GAMMA2))
 800337e:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8003382:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 8003386:	3018      	adds	r0, #24
 8003388:	f000 fb4e 	bl	8003a28 <pqcrystals_dilithium_poly_chknorm>
 800338c:	4682      	mov	sl, r0
 800338e:	bb70      	cbnz	r0, 80033ee <crypto_sign_signature+0x2b2>
      goto rej;
    poly_add(&w0.vec[i], &w0.vec[i], tmp);
 8003390:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 8003394:	3218      	adds	r2, #24
 8003396:	4659      	mov	r1, fp
 8003398:	4658      	mov	r0, fp
 800339a:	f000 fad0 	bl	800393e <pqcrystals_dilithium_poly_add>
    hint_n += poly_make_hint(tmp, &w0.vec[i], &w1.vec[i]);
 800339e:	f50d 5370 	add.w	r3, sp, #15360	; 0x3c00
 80033a2:	3318      	adds	r3, #24
 80033a4:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80033a8:	191a      	adds	r2, r3, r4
 80033aa:	4659      	mov	r1, fp
 80033ac:	3018      	adds	r0, #24
 80033ae:	f000 fb12 	bl	80039d6 <pqcrystals_dilithium_poly_make_hint>
 80033b2:	4407      	add	r7, r0
    if (hint_n > OMEGA) {
 80033b4:	2f50      	cmp	r7, #80	; 0x50
 80033b6:	d81a      	bhi.n	80033ee <crypto_sign_signature+0x2b2>
      goto rej;
    }
    pack_sig_h(sig, tmp, i, &hints_written);
 80033b8:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80033bc:	4632      	mov	r2, r6
 80033be:	ab09      	add	r3, sp, #36	; 0x24
 80033c0:	3118      	adds	r1, #24
 80033c2:	4628      	mov	r0, r5
  for(unsigned int i = 0; i < K; ++i) {
 80033c4:	3601      	adds	r6, #1
    pack_sig_h(sig, tmp, i, &hints_written);
 80033c6:	f000 fa04 	bl	80037d2 <pqcrystals_dilithium_pack_sig_h>
  for(unsigned int i = 0; i < K; ++i) {
 80033ca:	2e04      	cmp	r6, #4
 80033cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033d0:	d1a2      	bne.n	8003318 <crypto_sign_signature+0x1dc>
  }
  pack_sig_h_zero(sig, &hints_written);
 80033d2:	4628      	mov	r0, r5
 80033d4:	a909      	add	r1, sp, #36	; 0x24
 80033d6:	f000 fa11 	bl	80037fc <pqcrystals_dilithium_pack_sig_h_zero>
  *siglen = CRYPTO_BYTES;
 80033da:	9a04      	ldr	r2, [sp, #16]
 80033dc:	f640 1374 	movw	r3, #2420	; 0x974
  return 0;
}
 80033e0:	4650      	mov	r0, sl
  *siglen = CRYPTO_BYTES;
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	f50d 4d3c 	add.w	sp, sp, #48128	; 0xbc00
 80033e8:	b007      	add	sp, #28
 80033ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ee:	f108 0801 	add.w	r8, r8, #1
 80033f2:	e6fe      	b.n	80031f2 <crypto_sign_signature+0xb6>
 80033f4:	0001ffb2 	.word	0x0001ffb2
 80033f8:	000173b2 	.word	0x000173b2

080033fc <crypto_sign>:
int crypto_sign(uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk)
{
 80033fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033fe:	460d      	mov	r5, r1
 8003400:	461c      	mov	r4, r3
 8003402:	18d1      	adds	r1, r2, r3
 8003404:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8003408:	4403      	add	r3, r0
  size_t i;

  for(i = 0; i < mlen; ++i)
 800340a:	4291      	cmp	r1, r2
 800340c:	d10d      	bne.n	800342a <crypto_sign+0x2e>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk);
 800340e:	9b06      	ldr	r3, [sp, #24]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	f600 1274 	addw	r2, r0, #2420	; 0x974
 8003416:	4623      	mov	r3, r4
 8003418:	4629      	mov	r1, r5
 800341a:	f7ff fe8f 	bl	800313c <crypto_sign_signature>
  *smlen += mlen;
 800341e:	682b      	ldr	r3, [r5, #0]
  return 0;
}
 8003420:	2000      	movs	r0, #0
  *smlen += mlen;
 8003422:	4423      	add	r3, r4
 8003424:	602b      	str	r3, [r5, #0]
}
 8003426:	b002      	add	sp, #8
 8003428:	bd70      	pop	{r4, r5, r6, pc}
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 800342a:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
 800342e:	f803 6d01 	strb.w	r6, [r3, #-1]!
  for(i = 0; i < mlen; ++i)
 8003432:	e7ea      	b.n	800340a <crypto_sign+0xe>

08003434 <crypto_sign_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	f5ad 4d08 	sub.w	sp, sp, #34816	; 0x8800
 800343a:	b09f      	sub	sp, #124	; 0x7c
 800343c:	461e      	mov	r6, r3
 800343e:	f50d 4308 	add.w	r3, sp, #34816	; 0x8800
 8003442:	3390      	adds	r3, #144	; 0x90
 8003444:	681f      	ldr	r7, [r3, #0]
  poly cp;
  polyvecl mat[K], z;
  polyveck t1, w1, h;
  shake256incctx state;

  if(siglen != CRYPTO_BYTES)
 8003446:	f640 1374 	movw	r3, #2420	; 0x974
 800344a:	4299      	cmp	r1, r3
{
 800344c:	4604      	mov	r4, r0
 800344e:	4615      	mov	r5, r2
  if(siglen != CRYPTO_BYTES)
 8003450:	f040 80b7 	bne.w	80035c2 <crypto_sign_verify+0x18e>
    return -1;

  unpack_pk(rho, &t1, pk);
 8003454:	f50d 51c3 	add.w	r1, sp, #6240	; 0x1860
 8003458:	463a      	mov	r2, r7
 800345a:	3118      	adds	r1, #24
 800345c:	a802      	add	r0, sp, #8
 800345e:	f000 f8fd 	bl	800365c <pqcrystals_dilithium_unpack_pk>
  if(unpack_sig(c, &z, &h, sig))
 8003462:	f50d 5261 	add.w	r2, sp, #14400	; 0x3840
 8003466:	4623      	mov	r3, r4
 8003468:	3238      	adds	r2, #56	; 0x38
 800346a:	f60d 0178 	addw	r1, sp, #2168	; 0x878
 800346e:	a80a      	add	r0, sp, #40	; 0x28
 8003470:	f000 f9d0 	bl	8003814 <pqcrystals_dilithium_unpack_sig>
 8003474:	2800      	cmp	r0, #0
 8003476:	f040 80a4 	bne.w	80035c2 <crypto_sign_verify+0x18e>
    return -1;
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 800347a:	4953      	ldr	r1, [pc, #332]	; (80035c8 <crypto_sign_verify+0x194>)
 800347c:	f60d 0078 	addw	r0, sp, #2168	; 0x878
 8003480:	f000 fe34 	bl	80040ec <pqcrystals_dilithium_polyvecl_chknorm>
 8003484:	4604      	mov	r4, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	f040 809b 	bne.w	80035c2 <crypto_sign_verify+0x18e>
    return -1;

  /* Compute CRH(h(rho, t1), msg) */
  shake256(mu, CRHBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 800348c:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8003490:	463a      	mov	r2, r7
 8003492:	2140      	movs	r1, #64	; 0x40
 8003494:	a81a      	add	r0, sp, #104	; 0x68
 8003496:	f001 f905 	bl	80046a4 <shake256>
  shake256_inc_init(&state);
 800349a:	a82a      	add	r0, sp, #168	; 0xa8
 800349c:	f001 f8f4 	bl	8004688 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	a91a      	add	r1, sp, #104	; 0x68
 80034a4:	a82a      	add	r0, sp, #168	; 0xa8
 80034a6:	f001 f8f1 	bl	800468c <shake256_inc_absorb>
  shake256_inc_absorb(&state, m, mlen);
 80034aa:	4632      	mov	r2, r6
 80034ac:	4629      	mov	r1, r5
 80034ae:	a82a      	add	r0, sp, #168	; 0xa8
 80034b0:	f001 f8ec 	bl	800468c <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 80034b4:	a82a      	add	r0, sp, #168	; 0xa8
 80034b6:	f001 f8ee 	bl	8004696 <shake256_inc_finalize>
  shake256_inc_squeeze(mu, CRHBYTES, &state);
 80034ba:	aa2a      	add	r2, sp, #168	; 0xa8
 80034bc:	2140      	movs	r1, #64	; 0x40
 80034be:	a81a      	add	r0, sp, #104	; 0x68
 80034c0:	f001 f8ed 	bl	800469e <shake256_inc_squeeze>

  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge(&cp, c);
 80034c4:	a90a      	add	r1, sp, #40	; 0x28
 80034c6:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
 80034ca:	f000 fb2c 	bl	8003b26 <pqcrystals_dilithium_poly_challenge>
  polyvec_matrix_expand(mat, rho);
 80034ce:	f50d 4090 	add.w	r0, sp, #18432	; 0x4800
 80034d2:	a902      	add	r1, sp, #8
 80034d4:	3078      	adds	r0, #120	; 0x78
 80034d6:	f000 fd76 	bl	8003fc6 <pqcrystals_dilithium_polyvec_matrix_expand>

  polyvecl_ntt(&z);
 80034da:	f60d 0078 	addw	r0, sp, #2168	; 0x878
 80034de:	f000 fdce 	bl	800407e <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 80034e2:	f50d 4190 	add.w	r1, sp, #18432	; 0x4800
 80034e6:	f50d 5021 	add.w	r0, sp, #10304	; 0x2840
 80034ea:	f60d 0278 	addw	r2, sp, #2168	; 0x878
 80034ee:	3178      	adds	r1, #120	; 0x78
 80034f0:	3038      	adds	r0, #56	; 0x38
 80034f2:	f000 fde9 	bl	80040c8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>

  poly_ntt(&cp);
 80034f6:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
 80034fa:	f000 fa46 	bl	800398a <pqcrystals_dilithium_poly_ntt>
  polyveck_shiftl(&t1);
 80034fe:	f50d 50c3 	add.w	r0, sp, #6240	; 0x1860
 8003502:	3018      	adds	r0, #24
 8003504:	f000 fe57 	bl	80041b6 <pqcrystals_dilithium_polyveck_shiftl>
  polyveck_ntt(&t1);
 8003508:	f50d 50c3 	add.w	r0, sp, #6240	; 0x1860
 800350c:	3018      	adds	r0, #24
 800350e:	f000 fe64 	bl	80041da <pqcrystals_dilithium_polyveck_ntt>
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 8003512:	f50d 52c3 	add.w	r2, sp, #6240	; 0x1860
 8003516:	3218      	adds	r2, #24
 8003518:	4610      	mov	r0, r2
 800351a:	f50d 618f 	add.w	r1, sp, #1144	; 0x478
 800351e:	f000 fe80 	bl	8004222 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>

  polyveck_sub(&w1, &w1, &t1);
 8003522:	f50d 5121 	add.w	r1, sp, #10304	; 0x2840
 8003526:	3138      	adds	r1, #56	; 0x38
 8003528:	f50d 52c3 	add.w	r2, sp, #6240	; 0x1860
 800352c:	4608      	mov	r0, r1
 800352e:	3218      	adds	r2, #24
 8003530:	f000 fe31 	bl	8004196 <pqcrystals_dilithium_polyveck_sub>
  polyveck_reduce(&w1);
 8003534:	f50d 5021 	add.w	r0, sp, #10304	; 0x2840
 8003538:	3038      	adds	r0, #56	; 0x38
 800353a:	f000 fdf8 	bl	800412e <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 800353e:	f50d 5021 	add.w	r0, sp, #10304	; 0x2840
 8003542:	3038      	adds	r0, #56	; 0x38
 8003544:	f000 fe5b 	bl	80041fe <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
 8003548:	f50d 5021 	add.w	r0, sp, #10304	; 0x2840
 800354c:	3038      	adds	r0, #56	; 0x38
 800354e:	f000 fe00 	bl	8004152 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_use_hint(&w1, &w1, &h);
 8003552:	f50d 5121 	add.w	r1, sp, #10304	; 0x2840
 8003556:	3138      	adds	r1, #56	; 0x38
 8003558:	f50d 5261 	add.w	r2, sp, #14400	; 0x3840
 800355c:	3238      	adds	r2, #56	; 0x38
 800355e:	4608      	mov	r0, r1
 8003560:	f000 fe8f 	bl	8004282 <pqcrystals_dilithium_polyveck_use_hint>
  polyveck_pack_w1(buf, &w1);
 8003564:	f50d 5121 	add.w	r1, sp, #10304	; 0x2840
 8003568:	3138      	adds	r1, #56	; 0x38
 800356a:	a85e      	add	r0, sp, #376	; 0x178
 800356c:	f000 fe99 	bl	80042a2 <pqcrystals_dilithium_polyveck_pack_w1>

  /* Call random oracle and verify challenge */
  shake256_inc_init(&state);
 8003570:	a82a      	add	r0, sp, #168	; 0xa8
 8003572:	f001 f889 	bl	8004688 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	a91a      	add	r1, sp, #104	; 0x68
 800357a:	a82a      	add	r0, sp, #168	; 0xa8
 800357c:	f001 f886 	bl	800468c <shake256_inc_absorb>
  shake256_inc_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 8003580:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003584:	a95e      	add	r1, sp, #376	; 0x178
 8003586:	a82a      	add	r0, sp, #168	; 0xa8
 8003588:	f001 f880 	bl	800468c <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 800358c:	a82a      	add	r0, sp, #168	; 0xa8
 800358e:	f001 f882 	bl	8004696 <shake256_inc_finalize>
  shake256_inc_squeeze(c2, CTILDEBYTES, &state);
 8003592:	ab12      	add	r3, sp, #72	; 0x48
 8003594:	aa2a      	add	r2, sp, #168	; 0xa8
 8003596:	2120      	movs	r1, #32
 8003598:	4618      	mov	r0, r3
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	f001 f87f 	bl	800469e <shake256_inc_squeeze>
  for(i = 0; i < CTILDEBYTES; ++i)
 80035a0:	9a01      	ldr	r2, [sp, #4]
 80035a2:	ab0a      	add	r3, sp, #40	; 0x28
 80035a4:	4621      	mov	r1, r4
    if(c[i] != c2[i])
 80035a6:	f813 5b01 	ldrb.w	r5, [r3], #1
 80035aa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80035ae:	4285      	cmp	r5, r0
 80035b0:	d107      	bne.n	80035c2 <crypto_sign_verify+0x18e>
  for(i = 0; i < CTILDEBYTES; ++i)
 80035b2:	3101      	adds	r1, #1
 80035b4:	2920      	cmp	r1, #32
 80035b6:	d1f6      	bne.n	80035a6 <crypto_sign_verify+0x172>
      return -1;

  return 0;
}
 80035b8:	4620      	mov	r0, r4
 80035ba:	f50d 4d08 	add.w	sp, sp, #34816	; 0x8800
 80035be:	b01f      	add	sp, #124	; 0x7c
 80035c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return -1;
 80035c2:	f04f 34ff 	mov.w	r4, #4294967295
 80035c6:	e7f7      	b.n	80035b8 <crypto_sign_verify+0x184>
 80035c8:	0001ffb2 	.word	0x0001ffb2

080035cc <crypto_sign_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 80035cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035ce:	461d      	mov	r5, r3
  size_t i;

  if(smlen < CRYPTO_BYTES)
 80035d0:	f640 1373 	movw	r3, #2419	; 0x973
 80035d4:	429d      	cmp	r5, r3
{
 80035d6:	4607      	mov	r7, r0
 80035d8:	460e      	mov	r6, r1
 80035da:	4614      	mov	r4, r2
  if(smlen < CRYPTO_BYTES)
 80035dc:	d919      	bls.n	8003612 <crypto_sign_open+0x46>
    goto badsig;

  *mlen = smlen - CRYPTO_BYTES;
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 80035de:	9a08      	ldr	r2, [sp, #32]
  *mlen = smlen - CRYPTO_BYTES;
 80035e0:	f6a5 1374 	subw	r3, r5, #2420	; 0x974
 80035e4:	600b      	str	r3, [r1, #0]
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 80035e6:	4620      	mov	r0, r4
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	f640 1174 	movw	r1, #2420	; 0x974
 80035ee:	f604 1274 	addw	r2, r4, #2420	; 0x974
 80035f2:	f7ff ff1f 	bl	8003434 <crypto_sign_verify>
 80035f6:	b960      	cbnz	r0, 8003612 <crypto_sign_open+0x46>
 80035f8:	f604 1473 	addw	r4, r4, #2419	; 0x973
    goto badsig;
  else {
    /* All good, copy msg, return 0 */
    for(i = 0; i < *mlen; ++i)
 80035fc:	4603      	mov	r3, r0
 80035fe:	6832      	ldr	r2, [r6, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d801      	bhi.n	8003608 <crypto_sign_open+0x3c>
  *mlen = -1;
  for(i = 0; i < smlen; ++i)
    m[i] = 0;

  return -1;
}
 8003604:	b003      	add	sp, #12
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
      m[i] = sm[CRYPTO_BYTES + i];
 8003608:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800360c:	54fa      	strb	r2, [r7, r3]
    for(i = 0; i < *mlen; ++i)
 800360e:	3301      	adds	r3, #1
 8003610:	e7f5      	b.n	80035fe <crypto_sign_open+0x32>
  *mlen = -1;
 8003612:	f04f 34ff 	mov.w	r4, #4294967295
 8003616:	6034      	str	r4, [r6, #0]
    m[i] = 0;
 8003618:	462a      	mov	r2, r5
 800361a:	2100      	movs	r1, #0
 800361c:	4638      	mov	r0, r7
 800361e:	f003 f97d 	bl	800691c <memset>
  return -1;
 8003622:	4620      	mov	r0, r4
 8003624:	e7ee      	b.n	8003604 <crypto_sign_open+0x38>

08003626 <pqcrystals_dilithium_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 8003626:	b570      	push	{r4, r5, r6, lr}
 8003628:	4603      	mov	r3, r0
 800362a:	4615      	mov	r5, r2
 800362c:	3801      	subs	r0, #1
 800362e:	1e4a      	subs	r2, r1, #1
 8003630:	311f      	adds	r1, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = rho[i];
 8003632:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8003636:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 800363a:	428a      	cmp	r2, r1
 800363c:	d1f9      	bne.n	8003632 <pqcrystals_dilithium_pack_pk+0xc>
 800363e:	f103 0620 	add.w	r6, r3, #32
 8003642:	f503 64a4 	add.w	r4, r3, #1312	; 0x520
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 8003646:	4629      	mov	r1, r5
 8003648:	4630      	mov	r0, r6
  for(i = 0; i < K; ++i)
 800364a:	f506 76a0 	add.w	r6, r6, #320	; 0x140
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 800364e:	f000 fb05 	bl	8003c5c <pqcrystals_dilithium_polyt1_pack>
  for(i = 0; i < K; ++i)
 8003652:	42a6      	cmp	r6, r4
 8003654:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003658:	d1f5      	bne.n	8003646 <pqcrystals_dilithium_pack_pk+0x20>
}
 800365a:	bd70      	pop	{r4, r5, r6, pc}

0800365c <pqcrystals_dilithium_unpack_pk>:
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void unpack_pk(uint8_t rho[SEEDBYTES],
               polyveck *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	1e53      	subs	r3, r2, #1
 8003660:	460d      	mov	r5, r1
 8003662:	3801      	subs	r0, #1
 8003664:	f102 011f 	add.w	r1, r2, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = pk[i];
 8003668:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800366c:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8003670:	428b      	cmp	r3, r1
 8003672:	d1f9      	bne.n	8003668 <pqcrystals_dilithium_unpack_pk+0xc>
 8003674:	f102 0620 	add.w	r6, r2, #32
 8003678:	f502 64a4 	add.w	r4, r2, #1312	; 0x520
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
  for(i = 0; i < K; ++i)
 8003680:	f506 76a0 	add.w	r6, r6, #320	; 0x140
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
 8003684:	f000 fb0a 	bl	8003c9c <pqcrystals_dilithium_polyt1_unpack>
  for(i = 0; i < K; ++i)
 8003688:	42a6      	cmp	r6, r4
 800368a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800368e:	d1f5      	bne.n	800367c <pqcrystals_dilithium_unpack_pk+0x20>
}
 8003690:	bd70      	pop	{r4, r5, r6, pc}

08003692 <pqcrystals_dilithium_pack_sk>:
             const uint8_t tr[TRBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
 8003692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003694:	4605      	mov	r5, r0
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8003696:	1e6c      	subs	r4, r5, #1
 8003698:	1e48      	subs	r0, r1, #1
 800369a:	311f      	adds	r1, #31
    sk[i] = rho[i];
 800369c:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 80036a0:	f804 6f01 	strb.w	r6, [r4, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80036a4:	4288      	cmp	r0, r1
 80036a6:	d1f9      	bne.n	800369c <pqcrystals_dilithium_pack_sk+0xa>
 80036a8:	1e59      	subs	r1, r3, #1
 80036aa:	f105 001f 	add.w	r0, r5, #31
 80036ae:	331f      	adds	r3, #31
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
 80036b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80036b4:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80036b8:	4299      	cmp	r1, r3
 80036ba:	d1f9      	bne.n	80036b0 <pqcrystals_dilithium_pack_sk+0x1e>
  sk += SEEDBYTES;

  for(i = 0; i < TRBYTES; ++i)
 80036bc:	1e53      	subs	r3, r2, #1
 80036be:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80036c2:	323f      	adds	r2, #63	; 0x3f
    sk[i] = tr[i];
 80036c4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80036c8:	f801 0f01 	strb.w	r0, [r1, #1]!
  for(i = 0; i < TRBYTES; ++i)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d1f9      	bne.n	80036c4 <pqcrystals_dilithium_pack_sk+0x32>
  sk += TRBYTES;

  for(i = 0; i < L; ++i)
 80036d0:	9e07      	ldr	r6, [sp, #28]
 80036d2:	f105 0480 	add.w	r4, r5, #128	; 0x80
 80036d6:	f505 7700 	add.w	r7, r5, #512	; 0x200
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 80036da:	4631      	mov	r1, r6
 80036dc:	4620      	mov	r0, r4
  for(i = 0; i < L; ++i)
 80036de:	3460      	adds	r4, #96	; 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 80036e0:	f000 fa7a 	bl	8003bd8 <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < L; ++i)
 80036e4:	42bc      	cmp	r4, r7
 80036e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80036ea:	d1f6      	bne.n	80036da <pqcrystals_dilithium_pack_sk+0x48>
  sk += L*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
 80036ec:	9e08      	ldr	r6, [sp, #32]
 80036ee:	f505 7760 	add.w	r7, r5, #896	; 0x380
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 80036f2:	4631      	mov	r1, r6
 80036f4:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 80036f6:	3460      	adds	r4, #96	; 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 80036f8:	f000 fa6e 	bl	8003bd8 <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < K; ++i)
 80036fc:	42bc      	cmp	r4, r7
 80036fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003702:	d1f6      	bne.n	80036f2 <pqcrystals_dilithium_pack_sk+0x60>
  sk += K*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
 8003704:	9e06      	ldr	r6, [sp, #24]
 8003706:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 800370a:	4631      	mov	r1, r6
 800370c:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 800370e:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 8003712:	f000 fae9 	bl	8003ce8 <pqcrystals_dilithium_polyt0_pack>
  for(i = 0; i < K; ++i)
 8003716:	42ac      	cmp	r4, r5
 8003718:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800371c:	d1f5      	bne.n	800370a <pqcrystals_dilithium_pack_sk+0x78>
}
 800371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003720 <pqcrystals_dilithium_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               smallpoly s1[L],
               smallpoly s2[K],
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 8003720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003724:	9d08      	ldr	r5, [sp, #32]
 8003726:	461e      	mov	r6, r3
 8003728:	1e6c      	subs	r4, r5, #1
 800372a:	3801      	subs	r0, #1
 800372c:	f105 031f 	add.w	r3, r5, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = sk[i];
 8003730:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8003734:	f800 7f01 	strb.w	r7, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8003738:	429c      	cmp	r4, r3
 800373a:	d1f9      	bne.n	8003730 <pqcrystals_dilithium_unpack_sk+0x10>
 800373c:	3a01      	subs	r2, #1
 800373e:	f105 033f 	add.w	r3, r5, #63	; 0x3f
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
 8003742:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003746:	f802 0f01 	strb.w	r0, [r2, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 800374a:	429c      	cmp	r4, r3
 800374c:	d1f9      	bne.n	8003742 <pqcrystals_dilithium_unpack_sk+0x22>
  sk += SEEDBYTES;

  for(i = 0; i < TRBYTES; ++i)
 800374e:	3901      	subs	r1, #1
 8003750:	f105 037f 	add.w	r3, r5, #127	; 0x7f
    tr[i] = sk[i];
 8003754:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8003758:	f801 2f01 	strb.w	r2, [r1, #1]!
  for(i = 0; i < TRBYTES; ++i)
 800375c:	429c      	cmp	r4, r3
 800375e:	d1f9      	bne.n	8003754 <pqcrystals_dilithium_unpack_sk+0x34>
  sk += TRBYTES;

  for(i=0; i < L; ++i)
 8003760:	9f06      	ldr	r7, [sp, #24]
 8003762:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8003766:	f505 7800 	add.w	r8, r5, #512	; 0x200
    small_polyeta_unpack(&s1[i], sk + i*POLYETA_PACKEDBYTES);
 800376a:	4621      	mov	r1, r4
 800376c:	4638      	mov	r0, r7
  for(i=0; i < L; ++i)
 800376e:	3460      	adds	r4, #96	; 0x60
    small_polyeta_unpack(&s1[i], sk + i*POLYETA_PACKEDBYTES);
 8003770:	f000 fe8d 	bl	800448e <small_polyeta_unpack>
  for(i=0; i < L; ++i)
 8003774:	4544      	cmp	r4, r8
 8003776:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800377a:	d1f6      	bne.n	800376a <pqcrystals_dilithium_unpack_sk+0x4a>
  sk += L*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
 800377c:	9f07      	ldr	r7, [sp, #28]
 800377e:	f505 7860 	add.w	r8, r5, #896	; 0x380
    small_polyeta_unpack(&s2[i], sk + i*POLYETA_PACKEDBYTES);
 8003782:	4621      	mov	r1, r4
 8003784:	4638      	mov	r0, r7
  for(i=0; i < K; ++i)
 8003786:	3460      	adds	r4, #96	; 0x60
    small_polyeta_unpack(&s2[i], sk + i*POLYETA_PACKEDBYTES);
 8003788:	f000 fe81 	bl	800448e <small_polyeta_unpack>
  for(i=0; i < K; ++i)
 800378c:	4544      	cmp	r4, r8
 800378e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003792:	d1f6      	bne.n	8003782 <pqcrystals_dilithium_unpack_sk+0x62>
  sk += K*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
 8003794:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8003798:	4621      	mov	r1, r4
 800379a:	4630      	mov	r0, r6
  for(i=0; i < K; ++i)
 800379c:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 80037a0:	f000 faf0 	bl	8003d84 <pqcrystals_dilithium_polyt0_unpack>
  for(i=0; i < K; ++i)
 80037a4:	42ac      	cmp	r4, r5
 80037a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80037aa:	d1f5      	bne.n	8003798 <pqcrystals_dilithium_unpack_sk+0x78>
}
 80037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080037b0 <pqcrystals_dilithium_pack_sig_z>:
  sig += CTILDEBYTES;
}

void pack_sig_z(uint8_t sig[CRYPTO_BYTES],
              const polyvecl *z)
{
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	f100 0620 	add.w	r6, r0, #32
 80037b6:	460d      	mov	r5, r1
 80037b8:	f500 6412 	add.w	r4, r0, #2336	; 0x920
  unsigned int i;
  sig += CTILDEBYTES;
  for(i = 0; i < L; ++i)
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 80037bc:	4629      	mov	r1, r5
 80037be:	4630      	mov	r0, r6
  for(i = 0; i < L; ++i)
 80037c0:	f506 7610 	add.w	r6, r6, #576	; 0x240
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 80037c4:	f000 fb5d 	bl	8003e82 <pqcrystals_dilithium_polyz_pack>
  for(i = 0; i < L; ++i)
 80037c8:	42a6      	cmp	r6, r4
 80037ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80037ce:	d1f5      	bne.n	80037bc <pqcrystals_dilithium_pack_sig_z+0xc>
}
 80037d0:	bd70      	pop	{r4, r5, r6, pc}

080037d2 <pqcrystals_dilithium_pack_sig_h>:

void pack_sig_h(unsigned char sig[CRYPTO_BYTES],
                const poly *h_elem,
                const unsigned int idx,
                unsigned int *hints_written)
{
 80037d2:	b530      	push	{r4, r5, lr}
  sig += CTILDEBYTES;
  sig += L*POLYZ_PACKEDBYTES;
 80037d4:	f500 6012 	add.w	r0, r0, #2336	; 0x920

  // Encode h
  for (unsigned int j = 0; j < N; j++) {
 80037d8:	2400      	movs	r4, #0
      if (h_elem->coeffs[j] != 0) {
 80037da:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 80037de:	b125      	cbz	r5, 80037ea <pqcrystals_dilithium_pack_sig_h+0x18>
          sig[*hints_written] = (uint8_t)j;
 80037e0:	681d      	ldr	r5, [r3, #0]
 80037e2:	5544      	strb	r4, [r0, r5]
          (*hints_written)++;
 80037e4:	681d      	ldr	r5, [r3, #0]
 80037e6:	3501      	adds	r5, #1
 80037e8:	601d      	str	r5, [r3, #0]
  for (unsigned int j = 0; j < N; j++) {
 80037ea:	3401      	adds	r4, #1
 80037ec:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80037f0:	d1f3      	bne.n	80037da <pqcrystals_dilithium_pack_sig_h+0x8>
      }
  }
  sig[OMEGA + idx] = (uint8_t)*hints_written;
 80037f2:	4410      	add	r0, r2
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 80037fa:	bd30      	pop	{r4, r5, pc}

080037fc <pqcrystals_dilithium_pack_sig_h_zero>:

void pack_sig_h_zero(unsigned char sig[CRYPTO_BYTES],
                unsigned int *hints_written) {
    sig += CTILDEBYTES;
    sig += L * POLYZ_PACKEDBYTES;
 80037fc:	f500 6012 	add.w	r0, r0, #2336	; 0x920
    while (*hints_written < OMEGA) {
        sig[*hints_written] = 0;
 8003800:	2200      	movs	r2, #0
    while (*hints_written < OMEGA) {
 8003802:	680b      	ldr	r3, [r1, #0]
 8003804:	2b4f      	cmp	r3, #79	; 0x4f
 8003806:	d900      	bls.n	800380a <pqcrystals_dilithium_pack_sig_h_zero+0xe>
        (*hints_written)++;
    }
}
 8003808:	4770      	bx	lr
        sig[*hints_written] = 0;
 800380a:	54c2      	strb	r2, [r0, r3]
        (*hints_written)++;
 800380c:	680b      	ldr	r3, [r1, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	600b      	str	r3, [r1, #0]
 8003812:	e7f6      	b.n	8003802 <pqcrystals_dilithium_pack_sig_h_zero+0x6>

08003814 <pqcrystals_dilithium_unpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[CTILDEBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
 8003814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003818:	461c      	mov	r4, r3
 800381a:	4617      	mov	r7, r2
 800381c:	460d      	mov	r5, r1
 800381e:	3b01      	subs	r3, #1
 8003820:	3801      	subs	r0, #1
 8003822:	f104 021f 	add.w	r2, r4, #31
  unsigned int i, j, k;

  for(i = 0; i < CTILDEBYTES; ++i)
    c[i] = sig[i];
 8003826:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800382a:	f800 1f01 	strb.w	r1, [r0, #1]!
  for(i = 0; i < CTILDEBYTES; ++i)
 800382e:	4293      	cmp	r3, r2
 8003830:	d1f9      	bne.n	8003826 <pqcrystals_dilithium_unpack_sig+0x12>
 8003832:	f104 0620 	add.w	r6, r4, #32
 8003836:	f504 6812 	add.w	r8, r4, #2336	; 0x920
  sig += CTILDEBYTES;

  for(i = 0; i < L; ++i)
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
 800383a:	4631      	mov	r1, r6
 800383c:	4628      	mov	r0, r5
  for(i = 0; i < L; ++i)
 800383e:	f506 7610 	add.w	r6, r6, #576	; 0x240
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES);
 8003842:	f000 fb4a 	bl	8003eda <pqcrystals_dilithium_polyz_unpack>
  for(i = 0; i < L; ++i)
 8003846:	4546      	cmp	r6, r8
 8003848:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800384c:	d1f5      	bne.n	800383a <pqcrystals_dilithium_unpack_sig+0x26>
  sig += L*POLYZ_PACKEDBYTES;

  /* Decode h */
  k = 0;
 800384e:	2500      	movs	r5, #0
 8003850:	f604 196f 	addw	r9, r4, #2415	; 0x96f
  for(i = 0; i < K; ++i) {
 8003854:	462e      	mov	r6, r5
      return 1;

    for(j = k; j < sig[OMEGA + i]; ++j) {
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
      h->vec[i].coeffs[sig[j]] = 1;
 8003856:	f04f 0a01 	mov.w	sl, #1
      h->vec[i].coeffs[j] = 0;
 800385a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385e:	2100      	movs	r1, #0
 8003860:	eb07 2086 	add.w	r0, r7, r6, lsl #10
 8003864:	f003 f85a 	bl	800691c <memset>
    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
 8003868:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800386c:	42ab      	cmp	r3, r5
 800386e:	d202      	bcs.n	8003876 <pqcrystals_dilithium_unpack_sig+0x62>
      return 1;
 8003870:	2001      	movs	r0, #1
  for(j = k; j < OMEGA; ++j)
    if(sig[j])
      return 1;

  return 0;
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
 8003876:	2b50      	cmp	r3, #80	; 0x50
 8003878:	d8fa      	bhi.n	8003870 <pqcrystals_dilithium_unpack_sig+0x5c>
 800387a:	f605 111f 	addw	r1, r5, #2335	; 0x91f
 800387e:	4421      	add	r1, r4
 8003880:	462a      	mov	r2, r5
      h->vec[i].coeffs[sig[j]] = 1;
 8003882:	0230      	lsls	r0, r6, #8
    for(j = k; j < sig[OMEGA + i]; ++j) {
 8003884:	f899 3000 	ldrb.w	r3, [r9]
 8003888:	4293      	cmp	r3, r2
 800388a:	d804      	bhi.n	8003896 <pqcrystals_dilithium_unpack_sig+0x82>
  for(i = 0; i < K; ++i) {
 800388c:	3601      	adds	r6, #1
 800388e:	2e04      	cmp	r6, #4
 8003890:	d014      	beq.n	80038bc <pqcrystals_dilithium_unpack_sig+0xa8>
    for(j = k; j < sig[OMEGA + i]; ++j) {
 8003892:	461d      	mov	r5, r3
 8003894:	e7e1      	b.n	800385a <pqcrystals_dilithium_unpack_sig+0x46>
      if(j > k && sig[j] <= sig[j-1]) return 1;
 8003896:	42aa      	cmp	r2, r5
 8003898:	d904      	bls.n	80038a4 <pqcrystals_dilithium_unpack_sig+0x90>
 800389a:	f891 c000 	ldrb.w	ip, [r1]
 800389e:	784b      	ldrb	r3, [r1, #1]
 80038a0:	459c      	cmp	ip, r3
 80038a2:	d2e5      	bcs.n	8003870 <pqcrystals_dilithium_unpack_sig+0x5c>
      h->vec[i].coeffs[sig[j]] = 1;
 80038a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80038a8:	4403      	add	r3, r0
    for(j = k; j < sig[OMEGA + i]; ++j) {
 80038aa:	3201      	adds	r2, #1
      h->vec[i].coeffs[sig[j]] = 1;
 80038ac:	f847 a023 	str.w	sl, [r7, r3, lsl #2]
    for(j = k; j < sig[OMEGA + i]; ++j) {
 80038b0:	e7e8      	b.n	8003884 <pqcrystals_dilithium_unpack_sig+0x70>
    if(sig[j])
 80038b2:	f818 2003 	ldrb.w	r2, [r8, r3]
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	d1da      	bne.n	8003870 <pqcrystals_dilithium_unpack_sig+0x5c>
  for(j = k; j < OMEGA; ++j)
 80038ba:	3301      	adds	r3, #1
 80038bc:	2b4f      	cmp	r3, #79	; 0x4f
 80038be:	d9f8      	bls.n	80038b2 <pqcrystals_dilithium_unpack_sig+0x9e>
  return 0;
 80038c0:	2000      	movs	r0, #0
 80038c2:	e7d6      	b.n	8003872 <pqcrystals_dilithium_unpack_sig+0x5e>

080038c4 <rej_eta.constprop.0>:
*              - unsigned int buflen: length of array of random bytes
*
* Returns number of sampled coefficients. Can be smaller than len if not enough
* random bytes were given.
**************************************************/
static unsigned int rej_eta(int32_t *a,
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(t0 < 15) {
      t0 = t0 - (205*t0 >> 10)*5;
      a[ctr++] = 2 - t0;
    }
    if(t1 < 15 && ctr < len) {
      t1 = t1 - (205*t1 >> 10)*5;
 80038c6:	f04f 0ccd 	mov.w	ip, #205	; 0xcd
static unsigned int rej_eta(int32_t *a,
 80038ca:	4606      	mov	r6, r0
  while(ctr < len && pos < buflen) {
 80038cc:	1e57      	subs	r7, r2, #1
 80038ce:	f102 0487 	add.w	r4, r2, #135	; 0x87
  ctr = pos = 0;
 80038d2:	2000      	movs	r0, #0
    t0 = buf[pos] & 0x0F;
 80038d4:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80038d8:	f003 0e0f 	and.w	lr, r3, #15
    if(t0 < 15) {
 80038dc:	f1be 0f0f 	cmp.w	lr, #15
    t1 = buf[pos++] >> 4;
 80038e0:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if(t0 < 15) {
 80038e4:	d023      	beq.n	800392e <rej_eta.constprop.0+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 80038e6:	fb1e f20c 	smulbb	r2, lr, ip
 80038ea:	0a92      	lsrs	r2, r2, #10
 80038ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      a[ctr++] = 2 - t0;
 80038f0:	f1ce 0e02 	rsb	lr, lr, #2
 80038f4:	4472      	add	r2, lr
    if(t1 < 15 && ctr < len) {
 80038f6:	2b0f      	cmp	r3, #15
      a[ctr++] = 2 - t0;
 80038f8:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 80038fc:	f100 0501 	add.w	r5, r0, #1
    if(t1 < 15 && ctr < len) {
 8003900:	d011      	beq.n	8003926 <rej_eta.constprop.0+0x62>
 8003902:	428d      	cmp	r5, r1
 8003904:	d211      	bcs.n	800392a <rej_eta.constprop.0+0x66>
      t1 = t1 - (205*t1 >> 10)*5;
 8003906:	fb13 f20c 	smulbb	r2, r3, ip
 800390a:	0a92      	lsrs	r2, r2, #10
 800390c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      a[ctr++] = 2 - t1;
 8003910:	f1c3 0302 	rsb	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
 800391a:	1c68      	adds	r0, r5, #1
  while(ctr < len && pos < buflen) {
 800391c:	4281      	cmp	r1, r0
 800391e:	d901      	bls.n	8003924 <rej_eta.constprop.0+0x60>
 8003920:	42a7      	cmp	r7, r4
 8003922:	d1d7      	bne.n	80038d4 <rej_eta.constprop.0+0x10>
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
}
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}
      a[ctr++] = 2 - t0;
 8003926:	4628      	mov	r0, r5
 8003928:	e7f8      	b.n	800391c <rej_eta.constprop.0+0x58>
 800392a:	4628      	mov	r0, r5
  return ctr;
 800392c:	e7fa      	b.n	8003924 <rej_eta.constprop.0+0x60>
    if(t1 < 15 && ctr < len) {
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d0f4      	beq.n	800391c <rej_eta.constprop.0+0x58>
 8003932:	4605      	mov	r5, r0
 8003934:	e7e7      	b.n	8003906 <rej_eta.constprop.0+0x42>

08003936 <pqcrystals_dilithium_poly_reduce>:
  asm_reduce32(a->coeffs);
 8003936:	f7fe b9d7 	b.w	8001ce8 <pqcrystals_dilithium_asm_reduce32>

0800393a <pqcrystals_dilithium_poly_caddq>:
  asm_caddq(a->coeffs);
 800393a:	f7fe ba85 	b.w	8001e48 <pqcrystals_dilithium_asm_caddq>

0800393e <pqcrystals_dilithium_poly_add>:
void poly_add(poly *c, const poly *a, const poly *b)  {
 800393e:	b530      	push	{r4, r5, lr}
  for(i = 0; i < N; ++i)
 8003940:	2300      	movs	r3, #0
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8003942:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003946:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800394a:	442c      	add	r4, r5
 800394c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for(i = 0; i < N; ++i)
 8003950:	3301      	adds	r3, #1
 8003952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003956:	d1f4      	bne.n	8003942 <pqcrystals_dilithium_poly_add+0x4>
}
 8003958:	bd30      	pop	{r4, r5, pc}

0800395a <pqcrystals_dilithium_poly_sub>:
void poly_sub(poly *c, const poly *a, const poly *b) {
 800395a:	b530      	push	{r4, r5, lr}
  for(i = 0; i < N; ++i)
 800395c:	2300      	movs	r3, #0
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 800395e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003962:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003966:	1b64      	subs	r4, r4, r5
 8003968:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for(i = 0; i < N; ++i)
 800396c:	3301      	adds	r3, #1
 800396e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003972:	d1f4      	bne.n	800395e <pqcrystals_dilithium_poly_sub+0x4>
}
 8003974:	bd30      	pop	{r4, r5, pc}

08003976 <pqcrystals_dilithium_poly_shiftl>:
  for(i = 0; i < N; ++i)
 8003976:	1f03      	subs	r3, r0, #4
 8003978:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
    a->coeffs[i] <<= D;
 800397c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8003980:	0352      	lsls	r2, r2, #13
  for(i = 0; i < N; ++i)
 8003982:	4283      	cmp	r3, r0
    a->coeffs[i] <<= D;
 8003984:	601a      	str	r2, [r3, #0]
  for(i = 0; i < N; ++i)
 8003986:	d1f9      	bne.n	800397c <pqcrystals_dilithium_poly_shiftl+0x6>
}
 8003988:	4770      	bx	lr

0800398a <pqcrystals_dilithium_poly_ntt>:
  ntt(a->coeffs);
 800398a:	f7fd bc17 	b.w	80011bc <pqcrystals_dilithium_ntt>

0800398e <pqcrystals_dilithium_poly_invntt_tomont>:
  invntt_tomont(a->coeffs);
 800398e:	f7fd bef9 	b.w	8001784 <pqcrystals_dilithium_invntt_tomont>

08003992 <pqcrystals_dilithium_poly_pointwise_montgomery>:
  asm_pointwise_montgomery(c->coeffs, a->coeffs, b->coeffs);
 8003992:	f7fe b915 	b.w	8001bc0 <pqcrystals_dilithium_asm_pointwise_montgomery>

08003996 <pqcrystals_dilithium_poly_pointwise_acc_montgomery>:
  asm_pointwise_acc_montgomery(c->coeffs, a->coeffs, b->coeffs);
 8003996:	f7fe b955 	b.w	8001c44 <pqcrystals_dilithium_asm_pointwise_acc_montgomery>

0800399a <pqcrystals_dilithium_poly_power2round>:
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 800399a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399c:	4605      	mov	r5, r0
 800399e:	460e      	mov	r6, r1
 80039a0:	4617      	mov	r7, r2
 80039a2:	2400      	movs	r4, #0
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 80039a4:	5939      	ldr	r1, [r7, r4]
 80039a6:	1930      	adds	r0, r6, r4
 80039a8:	f000 fc8a 	bl	80042c0 <pqcrystals_dilithium_power2round>
 80039ac:	5128      	str	r0, [r5, r4]
  for(i = 0; i < N; ++i)
 80039ae:	3404      	adds	r4, #4
 80039b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80039b4:	d1f6      	bne.n	80039a4 <pqcrystals_dilithium_poly_power2round+0xa>
}
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039b8 <pqcrystals_dilithium_poly_decompose>:
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	4605      	mov	r5, r0
 80039bc:	460e      	mov	r6, r1
 80039be:	4617      	mov	r7, r2
 80039c0:	2400      	movs	r4, #0
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 80039c2:	5939      	ldr	r1, [r7, r4]
 80039c4:	1930      	adds	r0, r6, r4
 80039c6:	f000 fc85 	bl	80042d4 <pqcrystals_dilithium_decompose>
 80039ca:	5128      	str	r0, [r5, r4]
  for(i = 0; i < N; ++i)
 80039cc:	3404      	adds	r4, #4
 80039ce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80039d2:	d1f6      	bne.n	80039c2 <pqcrystals_dilithium_poly_decompose+0xa>
}
 80039d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039d6 <pqcrystals_dilithium_poly_make_hint>:
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 80039d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int i, s = 0;
 80039da:	2500      	movs	r5, #0
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 80039dc:	4606      	mov	r6, r0
 80039de:	460f      	mov	r7, r1
 80039e0:	4690      	mov	r8, r2
  for(i = 0; i < N; ++i) {
 80039e2:	462c      	mov	r4, r5
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 80039e4:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 80039e8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80039ec:	f000 fc94 	bl	8004318 <pqcrystals_dilithium_make_hint>
 80039f0:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for(i = 0; i < N; ++i) {
 80039f4:	3401      	adds	r4, #1
 80039f6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    s += h->coeffs[i];
 80039fa:	4405      	add	r5, r0
  for(i = 0; i < N; ++i) {
 80039fc:	d1f2      	bne.n	80039e4 <pqcrystals_dilithium_poly_make_hint+0xe>
}
 80039fe:	4628      	mov	r0, r5
 8003a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a04 <pqcrystals_dilithium_poly_use_hint>:
void poly_use_hint(poly *b, const poly *a, const poly *h) {
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	4605      	mov	r5, r0
 8003a08:	460e      	mov	r6, r1
 8003a0a:	4617      	mov	r7, r2
  for(i = 0; i < N; ++i)
 8003a0c:	2400      	movs	r4, #0
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 8003a0e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8003a12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a16:	f000 fc8f 	bl	8004338 <pqcrystals_dilithium_use_hint>
 8003a1a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for(i = 0; i < N; ++i)
 8003a1e:	3401      	adds	r4, #1
 8003a20:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003a24:	d1f3      	bne.n	8003a0e <pqcrystals_dilithium_poly_use_hint+0xa>
}
 8003a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a28 <pqcrystals_dilithium_poly_chknorm>:
  if(B > (Q-1)/8)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <pqcrystals_dilithium_poly_chknorm+0x2c>)
 8003a2a:	4299      	cmp	r1, r3
int poly_chknorm(const poly *a, int32_t B) {
 8003a2c:	b510      	push	{r4, lr}
  if(B > (Q-1)/8)
 8003a2e:	dc0e      	bgt.n	8003a4e <pqcrystals_dilithium_poly_chknorm+0x26>
 8003a30:	1f02      	subs	r2, r0, #4
 8003a32:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
    t = a->coeffs[i] >> 31;
 8003a36:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8003a3a:	17dc      	asrs	r4, r3, #31
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 8003a3c:	ea04 0443 	and.w	r4, r4, r3, lsl #1
 8003a40:	1b1b      	subs	r3, r3, r4
    if(t >= B) {
 8003a42:	4299      	cmp	r1, r3
 8003a44:	dd03      	ble.n	8003a4e <pqcrystals_dilithium_poly_chknorm+0x26>
  for(i = 0; i < N; ++i) {
 8003a46:	4282      	cmp	r2, r0
 8003a48:	d1f5      	bne.n	8003a36 <pqcrystals_dilithium_poly_chknorm+0xe>
  return 0;
 8003a4a:	2000      	movs	r0, #0
}
 8003a4c:	bd10      	pop	{r4, pc}
    return 1;
 8003a4e:	2001      	movs	r0, #1
 8003a50:	e7fc      	b.n	8003a4c <pqcrystals_dilithium_poly_chknorm+0x24>
 8003a52:	bf00      	nop
 8003a54:	000ffc00 	.word	0x000ffc00

08003a58 <pqcrystals_dilithium_poly_uniform>:
{
 8003a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8003a60:	4607      	mov	r7, r0
  stream128_init(&state, seed, nonce);
 8003a62:	4668      	mov	r0, sp
 8003a64:	f000 fc7e 	bl	8004364 <pqcrystals_dilithium_dilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8003a68:	466a      	mov	r2, sp
 8003a6a:	f44f 7152 	mov.w	r1, #840	; 0x348
 8003a6e:	a835      	add	r0, sp, #212	; 0xd4
 8003a70:	f000 fe07 	bl	8004682 <shake128_inc_squeeze>
  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 8003a74:	f44f 7352 	mov.w	r3, #840	; 0x348
 8003a78:	aa35      	add	r2, sp, #212	; 0xd4
 8003a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f7fe fa2a 	bl	8001ed8 <pqcrystals_dilithium_asm_rej_uniform>
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 8003a84:	f44f 7552 	mov.w	r5, #840	; 0x348
  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 8003a88:	4604      	mov	r4, r0
    off = buflen % 3;
 8003a8a:	f04f 0803 	mov.w	r8, #3
  while(ctr < N) {
 8003a8e:	2cff      	cmp	r4, #255	; 0xff
 8003a90:	d903      	bls.n	8003a9a <pqcrystals_dilithium_poly_uniform+0x42>
}
 8003a92:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 8003a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = buflen % 3;
 8003a9a:	fbb5 f2f8 	udiv	r2, r5, r8
 8003a9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003aa2:	1aa9      	subs	r1, r5, r2
    for(i = 0; i < off; ++i)
 8003aa4:	ab35      	add	r3, sp, #212	; 0xd4
 8003aa6:	2600      	movs	r6, #0
      buf[i] = buf[buflen - off + i];
 8003aa8:	1b52      	subs	r2, r2, r5
    for(i = 0; i < off; ++i)
 8003aaa:	428e      	cmp	r6, r1
 8003aac:	d111      	bne.n	8003ad2 <pqcrystals_dilithium_poly_uniform+0x7a>
    stream128_squeezeblocks(buf + off, 1, &state);
 8003aae:	ab35      	add	r3, sp, #212	; 0xd4
 8003ab0:	1998      	adds	r0, r3, r6
 8003ab2:	466a      	mov	r2, sp
 8003ab4:	21a8      	movs	r1, #168	; 0xa8
    buflen = STREAM128_BLOCKBYTES + off;
 8003ab6:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
    stream128_squeezeblocks(buf + off, 1, &state);
 8003aba:	f000 fde2 	bl	8004682 <shake128_inc_squeeze>
    ctr += asm_rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 8003abe:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 8003ac2:	eb07 0084 	add.w	r0, r7, r4, lsl #2
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	aa35      	add	r2, sp, #212	; 0xd4
 8003aca:	f7fe fa05 	bl	8001ed8 <pqcrystals_dilithium_asm_rej_uniform>
 8003ace:	4404      	add	r4, r0
 8003ad0:	e7dd      	b.n	8003a8e <pqcrystals_dilithium_poly_uniform+0x36>
      buf[i] = buf[buflen - off + i];
 8003ad2:	18e8      	adds	r0, r5, r3
    for(i = 0; i < off; ++i)
 8003ad4:	3601      	adds	r6, #1
      buf[i] = buf[buflen - off + i];
 8003ad6:	5c80      	ldrb	r0, [r0, r2]
 8003ad8:	f803 0b01 	strb.w	r0, [r3], #1
    for(i = 0; i < off; ++i)
 8003adc:	e7e5      	b.n	8003aaa <pqcrystals_dilithium_poly_uniform+0x52>

08003ade <pqcrystals_dilithium_poly_uniform_eta>:
#elif ETA == 4
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
        const uint8_t seed[CRHBYTES],
        uint16_t nonce) {
 8003ade:	b530      	push	{r4, r5, lr}
 8003ae0:	b0d7      	sub	sp, #348	; 0x15c
 8003ae2:	4605      	mov	r5, r0
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8003ae4:	a822      	add	r0, sp, #136	; 0x88
 8003ae6:	f000 fc56 	bl	8004396 <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8003aea:	aa22      	add	r2, sp, #136	; 0x88
 8003aec:	2188      	movs	r1, #136	; 0x88
 8003aee:	4668      	mov	r0, sp
 8003af0:	f000 fdd5 	bl	800469e <shake256_inc_squeeze>

  ctr = rej_eta(a->coeffs, N, buf, buflen);
 8003af4:	466a      	mov	r2, sp
 8003af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003afa:	4628      	mov	r0, r5
 8003afc:	f7ff fee2 	bl	80038c4 <rej_eta.constprop.0>
 8003b00:	4604      	mov	r4, r0

  while(ctr < N) {
 8003b02:	2cff      	cmp	r4, #255	; 0xff
 8003b04:	d901      	bls.n	8003b0a <pqcrystals_dilithium_poly_uniform_eta+0x2c>
    stream256_squeezeblocks(buf, 1, &state);
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
  }
}
 8003b06:	b057      	add	sp, #348	; 0x15c
 8003b08:	bd30      	pop	{r4, r5, pc}
    stream256_squeezeblocks(buf, 1, &state);
 8003b0a:	aa22      	add	r2, sp, #136	; 0x88
 8003b0c:	2188      	movs	r1, #136	; 0x88
 8003b0e:	4668      	mov	r0, sp
 8003b10:	f000 fdc5 	bl	800469e <shake256_inc_squeeze>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 8003b14:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 8003b18:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 8003b1c:	466a      	mov	r2, sp
 8003b1e:	f7ff fed1 	bl	80038c4 <rej_eta.constprop.0>
 8003b22:	4404      	add	r4, r0
 8003b24:	e7ed      	b.n	8003b02 <pqcrystals_dilithium_poly_uniform_eta+0x24>

08003b26 <pqcrystals_dilithium_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8003b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b28:	b0d7      	sub	sp, #348	; 0x15c
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4605      	mov	r5, r0
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  shake256incctx state;

  shake256_inc_init(&state);
 8003b2e:	a822      	add	r0, sp, #136	; 0x88
 8003b30:	f000 fdaa 	bl	8004688 <shake256_inc_init>
  shake256_inc_absorb(&state, seed, SEEDBYTES);
 8003b34:	4621      	mov	r1, r4
 8003b36:	2220      	movs	r2, #32
 8003b38:	a822      	add	r0, sp, #136	; 0x88
 8003b3a:	f000 fda7 	bl	800468c <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 8003b3e:	a822      	add	r0, sp, #136	; 0x88
 8003b40:	f000 fda9 	bl	8004696 <shake256_inc_finalize>
  shake256_inc_squeezeblocks(buf, 1, &state);
 8003b44:	aa22      	add	r2, sp, #136	; 0x88
 8003b46:	2188      	movs	r1, #136	; 0x88
 8003b48:	4668      	mov	r0, sp
 8003b4a:	f000 fda8 	bl	800469e <shake256_inc_squeeze>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	466e      	mov	r6, sp

  signs = 0;
 8003b52:	461c      	mov	r4, r3
 8003b54:	461f      	mov	r7, r3
  for(i = 0; i < 8; ++i)
    signs |= (uint64_t)buf[i] << 8*i;
 8003b56:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003b5a:	f1a3 0220 	sub.w	r2, r3, #32
 8003b5e:	f1c3 0020 	rsb	r0, r3, #32
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	fa21 f000 	lsr.w	r0, r1, r0
 8003b6a:	4099      	lsls	r1, r3
  for(i = 0; i < 8; ++i)
 8003b6c:	3308      	adds	r3, #8
    signs |= (uint64_t)buf[i] << 8*i;
 8003b6e:	4302      	orrs	r2, r0
  for(i = 0; i < 8; ++i)
 8003b70:	2b40      	cmp	r3, #64	; 0x40
    signs |= (uint64_t)buf[i] << 8*i;
 8003b72:	ea44 0401 	orr.w	r4, r4, r1
 8003b76:	ea47 0702 	orr.w	r7, r7, r2
  for(i = 0; i < 8; ++i)
 8003b7a:	d1ec      	bne.n	8003b56 <pqcrystals_dilithium_poly_challenge+0x30>
  pos = 8;

  for(i = 0; i < N; ++i)
    c->coeffs[i] = 0;
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b82:	4628      	mov	r0, r5
 8003b84:	f002 feca 	bl	800691c <memset>
  for(i = N-TAU; i < N; ++i) {
 8003b88:	26d9      	movs	r6, #217	; 0xd9
  pos = 8;
 8003b8a:	2108      	movs	r1, #8
    do {
      if(pos >= SHAKE256_RATE) {
 8003b8c:	2987      	cmp	r1, #135	; 0x87
 8003b8e:	d921      	bls.n	8003bd4 <pqcrystals_dilithium_poly_challenge+0xae>
        shake256_inc_squeezeblocks(buf, 1, &state);
 8003b90:	aa22      	add	r2, sp, #136	; 0x88
 8003b92:	2188      	movs	r1, #136	; 0x88
 8003b94:	4668      	mov	r0, sp
 8003b96:	f000 fd82 	bl	800469e <shake256_inc_squeeze>
        pos = 0;
 8003b9a:	2300      	movs	r3, #0
      }

      b = buf[pos++];
 8003b9c:	f81d 2003 	ldrb.w	r2, [sp, r3]
    } while(b > i);
 8003ba0:	42b2      	cmp	r2, r6
      b = buf[pos++];
 8003ba2:	f103 0101 	add.w	r1, r3, #1
    } while(b > i);
 8003ba6:	d8f1      	bhi.n	8003b8c <pqcrystals_dilithium_poly_challenge+0x66>

    c->coeffs[i] = c->coeffs[b];
 8003ba8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8003bac:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8003bb0:	f004 0301 	and.w	r3, r4, #1
 8003bb4:	005b      	lsls	r3, r3, #1
  for(i = N-TAU; i < N; ++i) {
 8003bb6:	3601      	adds	r6, #1
    c->coeffs[b] = 1 - 2*(signs & 1);
 8003bb8:	f1c3 0301 	rsb	r3, r3, #1
    signs >>= 1;
 8003bbc:	0864      	lsrs	r4, r4, #1
  for(i = N-TAU; i < N; ++i) {
 8003bbe:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    signs >>= 1;
 8003bc2:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
    c->coeffs[b] = 1 - 2*(signs & 1);
 8003bc6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    signs >>= 1;
 8003bca:	ea4f 0757 	mov.w	r7, r7, lsr #1
  for(i = N-TAU; i < N; ++i) {
 8003bce:	d1dd      	bne.n	8003b8c <pqcrystals_dilithium_poly_challenge+0x66>
  }
}
 8003bd0:	b057      	add	sp, #348	; 0x15c
 8003bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	e7e1      	b.n	8003b9c <pqcrystals_dilithium_poly_challenge+0x76>

08003bd8 <pqcrystals_dilithium_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 8003bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bdc:	f501 6580 	add.w	r5, r1, #1024	; 0x400

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    t[0] = ETA - a->coeffs[8*i+0];
    t[1] = ETA - a->coeffs[8*i+1];
    t[2] = ETA - a->coeffs[8*i+2];
 8003be0:	688b      	ldr	r3, [r1, #8]
    t[3] = ETA - a->coeffs[8*i+3];
    t[4] = ETA - a->coeffs[8*i+4];
    t[5] = ETA - a->coeffs[8*i+5];
 8003be2:	694c      	ldr	r4, [r1, #20]
    t[1] = ETA - a->coeffs[8*i+1];
 8003be4:	684f      	ldr	r7, [r1, #4]
    t[6] = ETA - a->coeffs[8*i+6];
    t[7] = ETA - a->coeffs[8*i+7];
 8003be6:	69ca      	ldr	r2, [r1, #28]
    t[6] = ETA - a->coeffs[8*i+6];
 8003be8:	698e      	ldr	r6, [r1, #24]
    t[2] = ETA - a->coeffs[8*i+2];
 8003bea:	f1c3 0302 	rsb	r3, r3, #2
 8003bee:	fa5f fc83 	uxtb.w	ip, r3
    t[3] = ETA - a->coeffs[8*i+3];
 8003bf2:	68cb      	ldr	r3, [r1, #12]
 8003bf4:	f1c3 0302 	rsb	r3, r3, #2
 8003bf8:	fa5f fe83 	uxtb.w	lr, r3
    t[4] = ETA - a->coeffs[8*i+4];
 8003bfc:	690b      	ldr	r3, [r1, #16]
 8003bfe:	f1c3 0302 	rsb	r3, r3, #2
 8003c02:	b2db      	uxtb	r3, r3

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8003c04:	011b      	lsls	r3, r3, #4
    t[1] = ETA - a->coeffs[8*i+1];
 8003c06:	f1c7 0702 	rsb	r7, r7, #2
    t[5] = ETA - a->coeffs[8*i+5];
 8003c0a:	f1c4 0402 	rsb	r4, r4, #2
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8003c0e:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8003c12:	fa5f f887 	uxtb.w	r8, r7
    t[5] = ETA - a->coeffs[8*i+5];
 8003c16:	b2e4      	uxtb	r4, r4
    t[7] = ETA - a->coeffs[8*i+7];
 8003c18:	f1c2 0202 	rsb	r2, r2, #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8003c1c:	ea4f 178c 	mov.w	r7, ip, lsl #6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8003c20:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8003c24:	ea47 07c8 	orr.w	r7, r7, r8, lsl #3
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8003c28:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
    t[0] = ETA - a->coeffs[8*i+0];
 8003c2c:	f851 8b20 	ldr.w	r8, [r1], #32
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8003c30:	7043      	strb	r3, [r0, #1]
    t[6] = ETA - a->coeffs[8*i+6];
 8003c32:	f1c6 0602 	rsb	r6, r6, #2
    t[7] = ETA - a->coeffs[8*i+7];
 8003c36:	b2d2      	uxtb	r2, r2
    t[6] = ETA - a->coeffs[8*i+6];
 8003c38:	b2f6      	uxtb	r6, r6
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8003c3a:	0153      	lsls	r3, r2, #5
    t[0] = ETA - a->coeffs[8*i+0];
 8003c3c:	f1c8 0802 	rsb	r8, r8, #2
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8003c40:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8003c44:	ea47 0708 	orr.w	r7, r7, r8
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8003c48:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  for(i = 0; i < N/8; ++i) {
 8003c4c:	428d      	cmp	r5, r1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8003c4e:	7007      	strb	r7, [r0, #0]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8003c50:	7083      	strb	r3, [r0, #2]
  for(i = 0; i < N/8; ++i) {
 8003c52:	f100 0003 	add.w	r0, r0, #3
 8003c56:	d1c3      	bne.n	8003be0 <pqcrystals_dilithium_polyeta_pack+0x8>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c5c <pqcrystals_dilithium_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	f501 6280 	add.w	r2, r1, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8003c62:	680b      	ldr	r3, [r1, #0]
 8003c64:	7003      	strb	r3, [r0, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8003c66:	e9d1 4300 	ldrd	r4, r3, [r1]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8003c70:	7043      	strb	r3, [r0, #1]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8003c72:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 8003c7c:	7083      	strb	r3, [r0, #2]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 8003c7e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8003c82:	019b      	lsls	r3, r3, #6
 8003c84:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 8003c88:	70c3      	strb	r3, [r0, #3]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8003c8a:	68cb      	ldr	r3, [r1, #12]
  for(i = 0; i < N/4; ++i) {
 8003c8c:	3110      	adds	r1, #16
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8003c8e:	109b      	asrs	r3, r3, #2
  for(i = 0; i < N/4; ++i) {
 8003c90:	4291      	cmp	r1, r2
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8003c92:	7103      	strb	r3, [r0, #4]
  for(i = 0; i < N/4; ++i) {
 8003c94:	f100 0005 	add.w	r0, r0, #5
 8003c98:	d1e3      	bne.n	8003c62 <pqcrystals_dilithium_polyt1_pack+0x6>
  }

  DBENCH_STOP(*tpack);
}
 8003c9a:	bd10      	pop	{r4, pc}

08003c9c <pqcrystals_dilithium_polyt1_unpack>:
*              Output coefficients are standard representatives.
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	f501 72a0 	add.w	r2, r1, #320	; 0x140
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 8003ca2:	784c      	ldrb	r4, [r1, #1]
 8003ca4:	780b      	ldrb	r3, [r1, #0]
 8003ca6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cae:	6003      	str	r3, [r0, #0]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 8003cb0:	788b      	ldrb	r3, [r1, #2]
 8003cb2:	784c      	ldrb	r4, [r1, #1]
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
 8003cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cbe:	6043      	str	r3, [r0, #4]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 8003cc0:	78cb      	ldrb	r3, [r1, #3]
 8003cc2:	788c      	ldrb	r4, [r1, #2]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	ea43 1314 	orr.w	r3, r3, r4, lsr #4
 8003cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cce:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 8003cd0:	790b      	ldrb	r3, [r1, #4]
 8003cd2:	78cc      	ldrb	r4, [r1, #3]
 8003cd4:	009b      	lsls	r3, r3, #2
  for(i = 0; i < N/4; ++i) {
 8003cd6:	3105      	adds	r1, #5
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 8003cd8:	ea43 1394 	orr.w	r3, r3, r4, lsr #6
  for(i = 0; i < N/4; ++i) {
 8003cdc:	428a      	cmp	r2, r1
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 8003cde:	60c3      	str	r3, [r0, #12]
  for(i = 0; i < N/4; ++i) {
 8003ce0:	f100 0010 	add.w	r0, r0, #16
 8003ce4:	d1dd      	bne.n	8003ca2 <pqcrystals_dilithium_polyt1_unpack+0x6>
  }

  DBENCH_STOP(*tpack);
}
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <pqcrystals_dilithium_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8003ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cec:	f500 7cd0 	add.w	ip, r0, #416	; 0x1a0
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8003cf0:	694d      	ldr	r5, [r1, #20]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8003cf2:	684c      	ldr	r4, [r1, #4]
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8003cf4:	680f      	ldr	r7, [r1, #0]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8003cf6:	688e      	ldr	r6, [r1, #8]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8003cf8:	68ca      	ldr	r2, [r1, #12]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8003cfa:	690b      	ldr	r3, [r1, #16]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8003cfc:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8003d00:	f5c5 5880 	rsb	r8, r5, #4096	; 0x1000
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8003d04:	698d      	ldr	r5, [r1, #24]
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8003d06:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];

    r[13*i+ 0]  =  t[0];
    r[13*i+ 1]  =  t[0] >>  8;
    r[13*i+ 1] |=  t[1] <<  5;
 8003d0a:	ea4f 1944 	mov.w	r9, r4, lsl #5
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8003d0e:	f5c5 5e80 	rsb	lr, r5, #4096	; 0x1000
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 8003d12:	69cd      	ldr	r5, [r1, #28]
    r[13*i+ 0]  =  t[0];
 8003d14:	7007      	strb	r7, [r0, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 8003d16:	ea49 2717 	orr.w	r7, r9, r7, lsr #8
 8003d1a:	7047      	strb	r7, [r0, #1]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8003d1c:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
    r[13*i+ 2]  =  t[1] >>  3;
 8003d20:	08e7      	lsrs	r7, r4, #3
 8003d22:	7087      	strb	r7, [r0, #2]
    r[13*i+ 3]  =  t[1] >> 11;
    r[13*i+ 3] |=  t[2] <<  2;
 8003d24:	00b7      	lsls	r7, r6, #2
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8003d26:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
    r[13*i+ 3] |=  t[2] <<  2;
 8003d2a:	ea47 24d4 	orr.w	r4, r7, r4, lsr #11
 8003d2e:	70c4      	strb	r4, [r0, #3]
    r[13*i+ 4]  =  t[2] >>  6;
    r[13*i+ 4] |=  t[3] <<  7;
 8003d30:	01d4      	lsls	r4, r2, #7
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8003d32:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    r[13*i+ 4] |=  t[3] <<  7;
 8003d36:	ea44 1696 	orr.w	r6, r4, r6, lsr #6
    r[13*i+ 5]  =  t[3] >>  1;
 8003d3a:	0854      	lsrs	r4, r2, #1
 8003d3c:	7144      	strb	r4, [r0, #5]
    r[13*i+ 6]  =  t[3] >>  9;
    r[13*i+ 6] |=  t[4] <<  4;
 8003d3e:	011c      	lsls	r4, r3, #4
 8003d40:	ea44 2252 	orr.w	r2, r4, r2, lsr #9
 8003d44:	7182      	strb	r2, [r0, #6]
    r[13*i+ 7]  =  t[4] >>  4;
 8003d46:	091a      	lsrs	r2, r3, #4
 8003d48:	71c2      	strb	r2, [r0, #7]
    r[13*i+ 8]  =  t[4] >> 12;
    r[13*i+ 8] |=  t[5] <<  1;
 8003d4a:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8003d4e:	ea42 3313 	orr.w	r3, r2, r3, lsr #12
 8003d52:	7203      	strb	r3, [r0, #8]
    r[13*i+ 9]  =  t[5] >>  7;
    r[13*i+ 9] |=  t[6] <<  6;
 8003d54:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003d58:	ea43 13d8 	orr.w	r3, r3, r8, lsr #7
 8003d5c:	7243      	strb	r3, [r0, #9]
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 8003d5e:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
    r[13*i+10]  =  t[6] >>  2;
 8003d62:	ea4f 039e 	mov.w	r3, lr, lsr #2
 8003d66:	7283      	strb	r3, [r0, #10]
    r[13*i+11]  =  t[6] >> 10;
    r[13*i+11] |=  t[7] <<  3;
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 239e 	orr.w	r3, r3, lr, lsr #10
    r[13*i+12]  =  t[7] >>  5;
 8003d6e:	096d      	lsrs	r5, r5, #5
    r[13*i+ 4] |=  t[3] <<  7;
 8003d70:	7106      	strb	r6, [r0, #4]
    r[13*i+11] |=  t[7] <<  3;
 8003d72:	72c3      	strb	r3, [r0, #11]
    r[13*i+12]  =  t[7] >>  5;
 8003d74:	7305      	strb	r5, [r0, #12]
  for(i = 0; i < N/8; ++i) {
 8003d76:	300d      	adds	r0, #13
 8003d78:	4584      	cmp	ip, r0
 8003d7a:	f101 0120 	add.w	r1, r1, #32
 8003d7e:	d1b7      	bne.n	8003cf0 <pqcrystals_dilithium_polyt0_pack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 8003d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003d84 <pqcrystals_dilithium_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 8003d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d88:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0]  = a[13*i+0];
 8003d8c:	780f      	ldrb	r7, [r1, #0]
 8003d8e:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 8003d90:	784b      	ldrb	r3, [r1, #1]
 8003d92:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    r->coeffs[8*i+0] &= 0x1FFF;
 8003d96:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8003d9a:	6007      	str	r7, [r0, #0]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8003d9c:	784d      	ldrb	r5, [r1, #1]
 8003d9e:	096d      	lsrs	r5, r5, #5
 8003da0:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 8003da2:	788b      	ldrb	r3, [r1, #2]
 8003da4:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 8003da8:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 8003daa:	78cb      	ldrb	r3, [r1, #3]
 8003dac:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
    r->coeffs[8*i+1] &= 0x1FFF;
 8003db0:	f3c5 050c 	ubfx	r5, r5, #0, #13
 8003db4:	6045      	str	r5, [r0, #4]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 8003db6:	78ce      	ldrb	r6, [r1, #3]
 8003db8:	08b6      	lsrs	r6, r6, #2
 8003dba:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 8003dbc:	790b      	ldrb	r3, [r1, #4]
 8003dbe:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
    r->coeffs[8*i+2] &= 0x1FFF;
 8003dc2:	f3c6 060c 	ubfx	r6, r6, #0, #13
 8003dc6:	6086      	str	r6, [r0, #8]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8003dc8:	790c      	ldrb	r4, [r1, #4]
 8003dca:	09e4      	lsrs	r4, r4, #7
 8003dcc:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8003dce:	794b      	ldrb	r3, [r1, #5]
 8003dd0:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8003dd4:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 8003dd6:	798b      	ldrb	r3, [r1, #6]
 8003dd8:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
    r->coeffs[8*i+3] &= 0x1FFF;
 8003ddc:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8003de0:	60c4      	str	r4, [r0, #12]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 8003de2:	798a      	ldrb	r2, [r1, #6]
 8003de4:	0912      	lsrs	r2, r2, #4
 8003de6:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8003de8:	79cb      	ldrb	r3, [r1, #7]
 8003dea:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8003dee:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8003df0:	7a0b      	ldrb	r3, [r1, #8]
 8003df2:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    r->coeffs[8*i+4] &= 0x1FFF;
 8003df6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003dfa:	6102      	str	r2, [r0, #16]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8003dfc:	7a0b      	ldrb	r3, [r1, #8]
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 8003e02:	f891 e009 	ldrb.w	lr, [r1, #9]
 8003e06:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
    r->coeffs[8*i+5] &= 0x1FFF;
 8003e0a:	f3c3 0e0c 	ubfx	lr, r3, #0, #13
 8003e0e:	f8c0 e014 	str.w	lr, [r0, #20]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8003e12:	7a4b      	ldrb	r3, [r1, #9]
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8003e18:	f891 800a 	ldrb.w	r8, [r1, #10]
 8003e1c:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
 8003e20:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8003e22:	f891 800b 	ldrb.w	r8, [r1, #11]
 8003e26:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
    r->coeffs[8*i+6] &= 0x1FFF;
 8003e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e2e:	6183      	str	r3, [r0, #24]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8003e30:	f891 800b 	ldrb.w	r8, [r1, #11]
 8003e34:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8003e38:	f8c0 801c 	str.w	r8, [r0, #28]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8003e3c:	f891 900c 	ldrb.w	r9, [r1, #12]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8003e40:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8003e44:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8003e48:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8003e4c:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8003e4e:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8003e50:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8003e54:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8003e58:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8003e5c:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8003e60:	f5ce 5280 	rsb	r2, lr, #4096	; 0x1000
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8003e64:	f5c8 5380 	rsb	r3, r8, #4096	; 0x1000
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8003e68:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8003e6a:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8003e6c:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8003e6e:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8003e70:	6142      	str	r2, [r0, #20]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8003e72:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < N/8; ++i) {
 8003e74:	3020      	adds	r0, #32
 8003e76:	4560      	cmp	r0, ip
 8003e78:	f101 010d 	add.w	r1, r1, #13
 8003e7c:	d186      	bne.n	8003d8c <pqcrystals_dilithium_polyt0_unpack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 8003e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003e82 <pqcrystals_dilithium_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 8003e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e84:	f500 7610 	add.w	r6, r0, #576	; 0x240
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8003e88:	680d      	ldr	r5, [r1, #0]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8003e8a:	684c      	ldr	r4, [r1, #4]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8003e8c:	688a      	ldr	r2, [r1, #8]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8003e8e:	68cb      	ldr	r3, [r1, #12]
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8003e90:	f5c5 3500 	rsb	r5, r5, #131072	; 0x20000
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8003e94:	f5c4 3400 	rsb	r4, r4, #131072	; 0x20000

    r[9*i+0]  = t[0];
    r[9*i+1]  = t[0] >> 8;
 8003e98:	0a2f      	lsrs	r7, r5, #8
 8003e9a:	7047      	strb	r7, [r0, #1]
    r[9*i+2]  = t[0] >> 16;
    r[9*i+2] |= t[1] << 2;
 8003e9c:	00a7      	lsls	r7, r4, #2
    r[9*i+0]  = t[0];
 8003e9e:	7005      	strb	r5, [r0, #0]
    r[9*i+2] |= t[1] << 2;
 8003ea0:	ea47 4515 	orr.w	r5, r7, r5, lsr #16
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8003ea4:	f5c2 3200 	rsb	r2, r2, #131072	; 0x20000
    r[9*i+2] |= t[1] << 2;
 8003ea8:	7085      	strb	r5, [r0, #2]
    r[9*i+3]  = t[1] >> 6;
 8003eaa:	09a5      	lsrs	r5, r4, #6
 8003eac:	70c5      	strb	r5, [r0, #3]
    r[9*i+4]  = t[1] >> 14;
    r[9*i+4] |= t[2] << 4;
 8003eae:	0115      	lsls	r5, r2, #4
 8003eb0:	ea45 3494 	orr.w	r4, r5, r4, lsr #14
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8003eb4:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
    r[9*i+4] |= t[2] << 4;
 8003eb8:	7104      	strb	r4, [r0, #4]
    r[9*i+5]  = t[2] >> 4;
 8003eba:	0914      	lsrs	r4, r2, #4
 8003ebc:	7144      	strb	r4, [r0, #5]
    r[9*i+6]  = t[2] >> 12;
    r[9*i+6] |= t[3] << 6;
 8003ebe:	019c      	lsls	r4, r3, #6
 8003ec0:	ea44 3212 	orr.w	r2, r4, r2, lsr #12
 8003ec4:	7182      	strb	r2, [r0, #6]
    r[9*i+7]  = t[3] >> 2;
 8003ec6:	089a      	lsrs	r2, r3, #2
    r[9*i+8]  = t[3] >> 10;
 8003ec8:	0a9b      	lsrs	r3, r3, #10
    r[9*i+7]  = t[3] >> 2;
 8003eca:	71c2      	strb	r2, [r0, #7]
    r[9*i+8]  = t[3] >> 10;
 8003ecc:	7203      	strb	r3, [r0, #8]
  for(i = 0; i < N/4; ++i) {
 8003ece:	3009      	adds	r0, #9
 8003ed0:	4286      	cmp	r6, r0
 8003ed2:	f101 0110 	add.w	r1, r1, #16
 8003ed6:	d1d7      	bne.n	8003e88 <pqcrystals_dilithium_polyz_pack+0x6>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eda <pqcrystals_dilithium_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8003eda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003edc:	f500 6680 	add.w	r6, r0, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
    r->coeffs[4*i+0]  = a[9*i+0];
 8003ee0:	780c      	ldrb	r4, [r1, #0]
 8003ee2:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8003ee4:	784b      	ldrb	r3, [r1, #1]
 8003ee6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8003eea:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8003eec:	788b      	ldrb	r3, [r1, #2]
 8003eee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    r->coeffs[4*i+0] &= 0x3FFFF;
 8003ef2:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003ef6:	6004      	str	r4, [r0, #0]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8003ef8:	788a      	ldrb	r2, [r1, #2]
 8003efa:	0892      	lsrs	r2, r2, #2
 8003efc:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8003efe:	78cb      	ldrb	r3, [r1, #3]
 8003f00:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8003f04:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8003f06:	790b      	ldrb	r3, [r1, #4]
 8003f08:	ea42 3283 	orr.w	r2, r2, r3, lsl #14
    r->coeffs[4*i+1] &= 0x3FFFF;
 8003f0c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8003f10:	6042      	str	r2, [r0, #4]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 8003f12:	790b      	ldrb	r3, [r1, #4]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 8003f18:	794d      	ldrb	r5, [r1, #5]
 8003f1a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003f1e:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 8003f20:	798d      	ldrb	r5, [r1, #6]
 8003f22:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    r->coeffs[4*i+2] &= 0x3FFFF;
 8003f26:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003f2a:	6083      	str	r3, [r0, #8]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8003f2c:	798d      	ldrb	r5, [r1, #6]
 8003f2e:	09ad      	lsrs	r5, r5, #6
 8003f30:	60c5      	str	r5, [r0, #12]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 8003f32:	79cf      	ldrb	r7, [r1, #7]
 8003f34:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 8003f38:	60c5      	str	r5, [r0, #12]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 8003f3a:	7a0f      	ldrb	r7, [r1, #8]
 8003f3c:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
    r->coeffs[4*i+3] &= 0x3FFFF;

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 8003f40:	f5c4 3400 	rsb	r4, r4, #131072	; 0x20000
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8003f44:	f5c2 3200 	rsb	r2, r2, #131072	; 0x20000
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8003f48:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 8003f4c:	f5c5 3500 	rsb	r5, r5, #131072	; 0x20000
    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 8003f50:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8003f52:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8003f54:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 8003f56:	60c5      	str	r5, [r0, #12]
  for(i = 0; i < N/4; ++i) {
 8003f58:	3010      	adds	r0, #16
 8003f5a:	42b0      	cmp	r0, r6
 8003f5c:	f101 0109 	add.w	r1, r1, #9
 8003f60:	d1be      	bne.n	8003ee0 <pqcrystals_dilithium_polyz_unpack+0x6>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f64 <pqcrystals_dilithium_poly_uniform_gamma1>:
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8003f6a:	4604      	mov	r4, r0
  stream256_init(&state, seed, nonce);
 8003f6c:	4668      	mov	r0, sp
 8003f6e:	f000 fa12 	bl	8004396 <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8003f72:	466a      	mov	r2, sp
 8003f74:	a834      	add	r0, sp, #208	; 0xd0
 8003f76:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8003f7a:	f000 fb90 	bl	800469e <shake256_inc_squeeze>
  polyz_unpack(a, buf);
 8003f7e:	a934      	add	r1, sp, #208	; 0xd0
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7ff ffaa 	bl	8003eda <pqcrystals_dilithium_polyz_unpack>
}
 8003f86:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <pqcrystals_dilithium_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q-1)/88
  for(i = 0; i < N/4; ++i) {
    r[3*i+0]  = a->coeffs[4*i+0];
 8003f92:	680b      	ldr	r3, [r1, #0]
 8003f94:	7003      	strb	r3, [r0, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 8003f96:	684c      	ldr	r4, [r1, #4]
 8003f98:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8003f9c:	7003      	strb	r3, [r0, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8003f9e:	684b      	ldr	r3, [r1, #4]
 8003fa0:	109b      	asrs	r3, r3, #2
 8003fa2:	7043      	strb	r3, [r0, #1]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8003fa4:	688c      	ldr	r4, [r1, #8]
 8003fa6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003faa:	7043      	strb	r3, [r0, #1]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 8003fac:	688b      	ldr	r3, [r1, #8]
 8003fae:	111b      	asrs	r3, r3, #4
 8003fb0:	7083      	strb	r3, [r0, #2]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8003fb2:	68cc      	ldr	r4, [r1, #12]
 8003fb4:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8003fb8:	7083      	strb	r3, [r0, #2]
  for(i = 0; i < N/4; ++i) {
 8003fba:	3003      	adds	r0, #3
 8003fbc:	4290      	cmp	r0, r2
 8003fbe:	f101 0110 	add.w	r1, r1, #16
 8003fc2:	d1e6      	bne.n	8003f92 <pqcrystals_dilithium_polyw1_pack+0x6>
  for(i = 0; i < N/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 8003fc4:	bd10      	pop	{r4, pc}

08003fc6 <pqcrystals_dilithium_polyvec_matrix_expand>:
*              sampling on the output stream of SHAKE128(rho|j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8003fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fca:	4606      	mov	r6, r0
 8003fcc:	4688      	mov	r8, r1
  unsigned int i, j;

  for(i = 0; i < K; ++i)
 8003fce:	2500      	movs	r5, #0
    for(j = 0; j < L; ++j)
 8003fd0:	022f      	lsls	r7, r5, #8
 8003fd2:	b2bf      	uxth	r7, r7
 8003fd4:	eb06 3905 	add.w	r9, r6, r5, lsl #12
 8003fd8:	2400      	movs	r4, #0
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8003fda:	193a      	adds	r2, r7, r4
 8003fdc:	eb09 2084 	add.w	r0, r9, r4, lsl #10
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	4641      	mov	r1, r8
    for(j = 0; j < L; ++j)
 8003fe4:	3401      	adds	r4, #1
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8003fe6:	f7ff fd37 	bl	8003a58 <pqcrystals_dilithium_poly_uniform>
    for(j = 0; j < L; ++j)
 8003fea:	2c04      	cmp	r4, #4
 8003fec:	d1f5      	bne.n	8003fda <pqcrystals_dilithium_polyvec_matrix_expand+0x14>
  for(i = 0; i < K; ++i)
 8003fee:	3501      	adds	r5, #1
 8003ff0:	2d04      	cmp	r5, #4
 8003ff2:	d1ed      	bne.n	8003fd0 <pqcrystals_dilithium_polyvec_matrix_expand+0xa>
}
 8003ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ff8 <pqcrystals_dilithium_polyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8003ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	460e      	mov	r6, r1
 8003ffe:	4617      	mov	r7, r2
  unsigned int i;

  for(i = 0; i < L; ++i)
 8004000:	2400      	movs	r4, #0
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8004002:	193a      	adds	r2, r7, r4
 8004004:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 8004008:	b292      	uxth	r2, r2
 800400a:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 800400c:	3401      	adds	r4, #1
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 800400e:	f7ff fd66 	bl	8003ade <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < L; ++i)
 8004012:	2c04      	cmp	r4, #4
 8004014:	d1f5      	bne.n	8004002 <pqcrystals_dilithium_polyvecl_uniform_eta+0xa>
}
 8004016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004018 <pqcrystals_dilithium_polyvecl_uniform_gamma1>:

void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 800401a:	0095      	lsls	r5, r2, #2
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 800401c:	4606      	mov	r6, r0
 800401e:	460f      	mov	r7, r1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8004020:	b2ad      	uxth	r5, r5
  for(i = 0; i < L; ++i)
 8004022:	2400      	movs	r4, #0
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8004024:	192a      	adds	r2, r5, r4
 8004026:	eb06 2084 	add.w	r0, r6, r4, lsl #10
 800402a:	b292      	uxth	r2, r2
 800402c:	4639      	mov	r1, r7
  for(i = 0; i < L; ++i)
 800402e:	3401      	adds	r4, #1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8004030:	f7ff ff98 	bl	8003f64 <pqcrystals_dilithium_poly_uniform_gamma1>
  for(i = 0; i < L; ++i)
 8004034:	2c04      	cmp	r4, #4
 8004036:	d1f5      	bne.n	8004024 <pqcrystals_dilithium_polyvecl_uniform_gamma1+0xc>
}
 8004038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800403a <pqcrystals_dilithium_polyvecl_reduce>:

void polyvecl_reduce(polyvecl *v) {
 800403a:	b510      	push	{r4, lr}
 800403c:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_reduce(&v->vec[i]);
 800403e:	f7ff fc7a 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
 8004042:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8004046:	f7ff fc76 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
 800404a:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800404e:	f7ff fc72 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
 8004052:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8004056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&v->vec[i]);
 800405a:	f7ff bc6c 	b.w	8003936 <pqcrystals_dilithium_poly_reduce>

0800405e <pqcrystals_dilithium_polyvecl_add>:
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
 800405e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004060:	4605      	mov	r5, r0
 8004062:	460e      	mov	r6, r1
 8004064:	4617      	mov	r7, r2
 8004066:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8004068:	193a      	adds	r2, r7, r4
 800406a:	1931      	adds	r1, r6, r4
 800406c:	1928      	adds	r0, r5, r4
  for(i = 0; i < L; ++i)
 800406e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8004072:	f7ff fc64 	bl	800393e <pqcrystals_dilithium_poly_add>
  for(i = 0; i < L; ++i)
 8004076:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800407a:	d1f5      	bne.n	8004068 <pqcrystals_dilithium_polyvecl_add+0xa>
}
 800407c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800407e <pqcrystals_dilithium_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void polyvecl_ntt(polyvecl *v) {
 800407e:	b510      	push	{r4, lr}
 8004080:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_ntt(&v->vec[i]);
 8004082:	f7ff fc82 	bl	800398a <pqcrystals_dilithium_poly_ntt>
 8004086:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800408a:	f7ff fc7e 	bl	800398a <pqcrystals_dilithium_poly_ntt>
 800408e:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8004092:	f7ff fc7a 	bl	800398a <pqcrystals_dilithium_poly_ntt>
 8004096:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 800409a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&v->vec[i]);
 800409e:	f7ff bc74 	b.w	800398a <pqcrystals_dilithium_poly_ntt>

080040a2 <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void polyvecl_pointwise_acc_montgomery(poly *w,
                                       const polyvecl *u,
                                       const polyvecl *v)
{
 80040a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a4:	4605      	mov	r5, r0
 80040a6:	460e      	mov	r6, r1
 80040a8:	4617      	mov	r7, r2
  unsigned int i;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 80040aa:	f7ff fc72 	bl	8003992 <pqcrystals_dilithium_poly_pointwise_montgomery>
 80040ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  for(i = 1; i < L; ++i) {
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 80040b2:	193a      	adds	r2, r7, r4
 80040b4:	1931      	adds	r1, r6, r4
 80040b6:	4628      	mov	r0, r5
  for(i = 1; i < L; ++i) {
 80040b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 80040bc:	f7ff fc6b 	bl	8003996 <pqcrystals_dilithium_poly_pointwise_acc_montgomery>
  for(i = 1; i < L; ++i) {
 80040c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80040c4:	d1f5      	bne.n	80040b2 <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery+0x10>
  }
}
 80040c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040c8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>:
void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	4616      	mov	r6, r2
 80040cc:	4604      	mov	r4, r0
 80040ce:	460d      	mov	r5, r1
 80040d0:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80040d4:	4629      	mov	r1, r5
 80040d6:	4620      	mov	r0, r4
 80040d8:	4632      	mov	r2, r6
  for(i = 0; i < K; ++i)
 80040da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80040de:	f7ff ffe0 	bl	80040a2 <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery>
  for(i = 0; i < K; ++i)
 80040e2:	42bc      	cmp	r4, r7
 80040e4:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 80040e8:	d1f4      	bne.n	80040d4 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery+0xc>
}
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080040ec <pqcrystals_dilithium_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	460d      	mov	r5, r1
 80040f0:	4604      	mov	r4, r0
 80040f2:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  unsigned int i;

  for(i = 0; i < L; ++i)
    if(poly_chknorm(&v->vec[i], bound))
 80040f6:	4629      	mov	r1, r5
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7ff fc95 	bl	8003a28 <pqcrystals_dilithium_poly_chknorm>
 80040fe:	b920      	cbnz	r0, 800410a <pqcrystals_dilithium_polyvecl_chknorm+0x1e>
  for(i = 0; i < L; ++i)
 8004100:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004104:	42b4      	cmp	r4, r6
 8004106:	d1f6      	bne.n	80040f6 <pqcrystals_dilithium_polyvecl_chknorm+0xa>
      return 1;

  return 0;
}
 8004108:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 800410a:	2001      	movs	r0, #1
 800410c:	e7fc      	b.n	8004108 <pqcrystals_dilithium_polyvecl_chknorm+0x1c>

0800410e <pqcrystals_dilithium_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 800410e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004110:	4605      	mov	r5, r0
 8004112:	460e      	mov	r6, r1
 8004114:	4617      	mov	r7, r2
  unsigned int i;

  for(i = 0; i < K; ++i)
 8004116:	2400      	movs	r4, #0
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8004118:	193a      	adds	r2, r7, r4
 800411a:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 800411e:	b292      	uxth	r2, r2
 8004120:	4631      	mov	r1, r6
  for(i = 0; i < K; ++i)
 8004122:	3401      	adds	r4, #1
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8004124:	f7ff fcdb 	bl	8003ade <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < K; ++i)
 8004128:	2c04      	cmp	r4, #4
 800412a:	d1f5      	bne.n	8004118 <pqcrystals_dilithium_polyveck_uniform_eta+0xa>
}
 800412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800412e <pqcrystals_dilithium_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_reduce(&v->vec[i]);
 8004132:	f7ff fc00 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
 8004136:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800413a:	f7ff fbfc 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
 800413e:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8004142:	f7ff fbf8 	bl	8003936 <pqcrystals_dilithium_poly_reduce>
 8004146:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 800414a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&v->vec[i]);
 800414e:	f7ff bbf2 	b.w	8003936 <pqcrystals_dilithium_poly_reduce>

08004152 <pqcrystals_dilithium_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8004152:	b510      	push	{r4, lr}
 8004154:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_caddq(&v->vec[i]);
 8004156:	f7ff fbf0 	bl	800393a <pqcrystals_dilithium_poly_caddq>
 800415a:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800415e:	f7ff fbec 	bl	800393a <pqcrystals_dilithium_poly_caddq>
 8004162:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8004166:	f7ff fbe8 	bl	800393a <pqcrystals_dilithium_poly_caddq>
 800416a:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 800416e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_caddq(&v->vec[i]);
 8004172:	f7ff bbe2 	b.w	800393a <pqcrystals_dilithium_poly_caddq>

08004176 <pqcrystals_dilithium_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8004176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004178:	4605      	mov	r5, r0
 800417a:	460e      	mov	r6, r1
 800417c:	4617      	mov	r7, r2
 800417e:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8004180:	193a      	adds	r2, r7, r4
 8004182:	1931      	adds	r1, r6, r4
 8004184:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8004186:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 800418a:	f7ff fbd8 	bl	800393e <pqcrystals_dilithium_poly_add>
  for(i = 0; i < K; ++i)
 800418e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004192:	d1f5      	bne.n	8004180 <pqcrystals_dilithium_polyveck_add+0xa>
}
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004196 <pqcrystals_dilithium_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8004196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004198:	4605      	mov	r5, r0
 800419a:	460e      	mov	r6, r1
 800419c:	4617      	mov	r7, r2
 800419e:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 80041a0:	193a      	adds	r2, r7, r4
 80041a2:	1931      	adds	r1, r6, r4
 80041a4:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 80041a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 80041aa:	f7ff fbd6 	bl	800395a <pqcrystals_dilithium_poly_sub>
  for(i = 0; i < K; ++i)
 80041ae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80041b2:	d1f5      	bne.n	80041a0 <pqcrystals_dilithium_polyveck_sub+0xa>
}
 80041b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041b6 <pqcrystals_dilithium_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_shiftl(polyveck *v) {
 80041b6:	b510      	push	{r4, lr}
 80041b8:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_shiftl(&v->vec[i]);
 80041ba:	f7ff fbdc 	bl	8003976 <pqcrystals_dilithium_poly_shiftl>
 80041be:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80041c2:	f7ff fbd8 	bl	8003976 <pqcrystals_dilithium_poly_shiftl>
 80041c6:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80041ca:	f7ff fbd4 	bl	8003976 <pqcrystals_dilithium_poly_shiftl>
 80041ce:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 80041d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_shiftl(&v->vec[i]);
 80041d6:	f7ff bbce 	b.w	8003976 <pqcrystals_dilithium_poly_shiftl>

080041da <pqcrystals_dilithium_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 80041da:	b510      	push	{r4, lr}
 80041dc:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_ntt(&v->vec[i]);
 80041de:	f7ff fbd4 	bl	800398a <pqcrystals_dilithium_poly_ntt>
 80041e2:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80041e6:	f7ff fbd0 	bl	800398a <pqcrystals_dilithium_poly_ntt>
 80041ea:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80041ee:	f7ff fbcc 	bl	800398a <pqcrystals_dilithium_poly_ntt>
 80041f2:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 80041f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&v->vec[i]);
 80041fa:	f7ff bbc6 	b.w	800398a <pqcrystals_dilithium_poly_ntt>

080041fe <pqcrystals_dilithium_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 80041fe:	b510      	push	{r4, lr}
 8004200:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_invntt_tomont(&v->vec[i]);
 8004202:	f7ff fbc4 	bl	800398e <pqcrystals_dilithium_poly_invntt_tomont>
 8004206:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800420a:	f7ff fbc0 	bl	800398e <pqcrystals_dilithium_poly_invntt_tomont>
 800420e:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8004212:	f7ff fbbc 	bl	800398e <pqcrystals_dilithium_poly_invntt_tomont>
 8004216:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 800421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_invntt_tomont(&v->vec[i]);
 800421e:	f7ff bbb6 	b.w	800398e <pqcrystals_dilithium_poly_invntt_tomont>

08004222 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>:


void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8004222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004224:	4605      	mov	r5, r0
 8004226:	460e      	mov	r6, r1
 8004228:	4617      	mov	r7, r2
 800422a:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 800422c:	193a      	adds	r2, r7, r4
 800422e:	1928      	adds	r0, r5, r4
 8004230:	4631      	mov	r1, r6
  for(i = 0; i < K; ++i)
 8004232:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8004236:	f7ff fbac 	bl	8003992 <pqcrystals_dilithium_poly_pointwise_montgomery>
  for(i = 0; i < K; ++i)
 800423a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800423e:	d1f5      	bne.n	800422c <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery+0xa>
}
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004242 <pqcrystals_dilithium_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8004242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004244:	4605      	mov	r5, r0
 8004246:	460e      	mov	r6, r1
 8004248:	4617      	mov	r7, r2
 800424a:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800424c:	193a      	adds	r2, r7, r4
 800424e:	1931      	adds	r1, r6, r4
 8004250:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8004252:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8004256:	f7ff fba0 	bl	800399a <pqcrystals_dilithium_poly_power2round>
  for(i = 0; i < K; ++i)
 800425a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800425e:	d1f5      	bne.n	800424c <pqcrystals_dilithium_polyveck_power2round+0xa>
}
 8004260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004262 <pqcrystals_dilithium_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8004262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004264:	4605      	mov	r5, r0
 8004266:	460e      	mov	r6, r1
 8004268:	4617      	mov	r7, r2
 800426a:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800426c:	193a      	adds	r2, r7, r4
 800426e:	1931      	adds	r1, r6, r4
 8004270:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8004272:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8004276:	f7ff fb9f 	bl	80039b8 <pqcrystals_dilithium_poly_decompose>
  for(i = 0; i < K; ++i)
 800427a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800427e:	d1f5      	bne.n	800426c <pqcrystals_dilithium_polyveck_decompose+0xa>
}
 8004280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004282 <pqcrystals_dilithium_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
 8004282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004284:	4605      	mov	r5, r0
 8004286:	460e      	mov	r6, r1
 8004288:	4617      	mov	r7, r2
 800428a:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 800428c:	193a      	adds	r2, r7, r4
 800428e:	1931      	adds	r1, r6, r4
 8004290:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8004292:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 8004296:	f7ff fbb5 	bl	8003a04 <pqcrystals_dilithium_poly_use_hint>
  for(i = 0; i < K; ++i)
 800429a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800429e:	d1f5      	bne.n	800428c <pqcrystals_dilithium_polyveck_use_hint+0xa>
}
 80042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080042a2 <pqcrystals_dilithium_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 80042a2:	b570      	push	{r4, r5, r6, lr}
 80042a4:	4604      	mov	r4, r0
 80042a6:	460d      	mov	r5, r1
 80042a8:	f500 7640 	add.w	r6, r0, #768	; 0x300
  unsigned int i;

  for(i = 0; i < K; ++i)
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 80042ac:	4629      	mov	r1, r5
 80042ae:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 80042b0:	34c0      	adds	r4, #192	; 0xc0
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 80042b2:	f7ff fe6b 	bl	8003f8c <pqcrystals_dilithium_polyw1_pack>
  for(i = 0; i < K; ++i)
 80042b6:	42b4      	cmp	r4, r6
 80042b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042bc:	d1f6      	bne.n	80042ac <pqcrystals_dilithium_polyveck_pack_w1+0xa>
}
 80042be:	bd70      	pop	{r4, r5, r6, pc}

080042c0 <pqcrystals_dilithium_power2round>:
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 80042c0:	f601 72ff 	addw	r2, r1, #4095	; 0xfff
  *a0 = a - (a1 << D);
 80042c4:	f422 53ff 	bic.w	r3, r2, #8160	; 0x1fe0
 80042c8:	f023 031f 	bic.w	r3, r3, #31
 80042cc:	1ac9      	subs	r1, r1, r3
 80042ce:	6001      	str	r1, [r0, #0]
  return a1;
}
 80042d0:	1350      	asrs	r0, r2, #13
 80042d2:	4770      	bx	lr

080042d4 <pqcrystals_dilithium_decompose>:
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
  int32_t a1;

  a1  = (a + 127) >> 7;
 80042d4:	f101 037f 	add.w	r3, r1, #127	; 0x7f
#if GAMMA2 == (Q-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 80042d8:	f642 420b 	movw	r2, #11275	; 0x2c0b
  a1  = (a + 127) >> 7;
 80042dc:	11db      	asrs	r3, r3, #7
  a1  = (a1*11275 + (1 << 23)) >> 24;
 80042de:	4353      	muls	r3, r2
 80042e0:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80042e4:	161b      	asrs	r3, r3, #24
  a1 ^= ((43 - a1) >> 31) & a1;
 80042e6:	f1c3 022b 	rsb	r2, r3, #43	; 0x2b
 80042ea:	17d2      	asrs	r2, r2, #31
 80042ec:	ea23 0302 	bic.w	r3, r3, r2
#endif

  *a0  = a - a1*2*GAMMA2;
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <pqcrystals_dilithium_decompose+0x3c>)
int32_t decompose(int32_t *a0, int32_t a) {
 80042f2:	b510      	push	{r4, lr}
  *a0  = a - a1*2*GAMMA2;
 80042f4:	fb02 1103 	mla	r1, r2, r3, r1
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 80042f8:	f5c1 147f 	rsb	r4, r1, #4177920	; 0x3fc000
 80042fc:	4a05      	ldr	r2, [pc, #20]	; (8004314 <pqcrystals_dilithium_decompose+0x40>)
 80042fe:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 8004302:	ea02 72e4 	and.w	r2, r2, r4, asr #31
 8004306:	1a89      	subs	r1, r1, r2
 8004308:	6001      	str	r1, [r0, #0]
  return a1;
}
 800430a:	4618      	mov	r0, r3
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	fffd1800 	.word	0xfffd1800
 8004314:	007fe001 	.word	0x007fe001

08004318 <pqcrystals_dilithium_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
 8004318:	f500 33ba 	add.w	r3, r0, #95232	; 0x17400
 800431c:	f5b3 3f3a 	cmp.w	r3, #190464	; 0x2e800
 8004320:	d806      	bhi.n	8004330 <pqcrystals_dilithium_make_hint+0x18>
 8004322:	f510 3fba 	cmn.w	r0, #95232	; 0x17400
 8004326:	d105      	bne.n	8004334 <pqcrystals_dilithium_make_hint+0x1c>
 8004328:	1e08      	subs	r0, r1, #0
 800432a:	bf18      	it	ne
 800432c:	2001      	movne	r0, #1
 800432e:	4770      	bx	lr
    return 1;
 8004330:	2001      	movs	r0, #1
 8004332:	4770      	bx	lr

  return 0;
 8004334:	2000      	movs	r0, #0
}
 8004336:	4770      	bx	lr

08004338 <pqcrystals_dilithium_use_hint>:
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 8004338:	b513      	push	{r0, r1, r4, lr}
 800433a:	460c      	mov	r4, r1
  int32_t a0, a1;

  a1 = decompose(&a0, a);
 800433c:	4601      	mov	r1, r0
 800433e:	a801      	add	r0, sp, #4
 8004340:	f7ff ffc8 	bl	80042d4 <pqcrystals_dilithium_decompose>
  if(hint == 0)
 8004344:	b12c      	cbz	r4, 8004352 <pqcrystals_dilithium_use_hint+0x1a>
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q-1)/88
  if(a0 > 0)
 8004346:	9b01      	ldr	r3, [sp, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	dd04      	ble.n	8004356 <pqcrystals_dilithium_use_hint+0x1e>
    return (a1 == 43) ?  0 : a1 + 1;
 800434c:	282b      	cmp	r0, #43	; 0x2b
 800434e:	d005      	beq.n	800435c <pqcrystals_dilithium_use_hint+0x24>
 8004350:	3001      	adds	r0, #1
  else
    return (a1 ==  0) ? 43 : a1 - 1;
#endif
}
 8004352:	b002      	add	sp, #8
 8004354:	bd10      	pop	{r4, pc}
    return (a1 ==  0) ? 43 : a1 - 1;
 8004356:	b118      	cbz	r0, 8004360 <pqcrystals_dilithium_use_hint+0x28>
 8004358:	3801      	subs	r0, #1
 800435a:	e7fa      	b.n	8004352 <pqcrystals_dilithium_use_hint+0x1a>
    return (a1 == 43) ?  0 : a1 + 1;
 800435c:	2000      	movs	r0, #0
 800435e:	e7f8      	b.n	8004352 <pqcrystals_dilithium_use_hint+0x1a>
    return (a1 ==  0) ? 43 : a1 - 1;
 8004360:	202b      	movs	r0, #43	; 0x2b
 8004362:	e7f6      	b.n	8004352 <pqcrystals_dilithium_use_hint+0x1a>

08004364 <pqcrystals_dilithium_dilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
 8004364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004366:	4604      	mov	r4, r0
 8004368:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 800436a:	f88d 2004 	strb.w	r2, [sp, #4]
  t[1] = nonce >> 8;
 800436e:	0a12      	lsrs	r2, r2, #8
 8004370:	f88d 2005 	strb.w	r2, [sp, #5]

  shake128_inc_init(state);
 8004374:	f000 f97a 	bl	800466c <shake128_inc_init>
  shake128_inc_absorb(state, seed, SEEDBYTES);
 8004378:	4629      	mov	r1, r5
 800437a:	4620      	mov	r0, r4
 800437c:	2220      	movs	r2, #32
 800437e:	f000 f977 	bl	8004670 <shake128_inc_absorb>
  shake128_inc_absorb(state, t, 2);
 8004382:	2202      	movs	r2, #2
 8004384:	a901      	add	r1, sp, #4
 8004386:	4620      	mov	r0, r4
 8004388:	f000 f972 	bl	8004670 <shake128_inc_absorb>
  shake128_inc_finalize(state);
 800438c:	4620      	mov	r0, r4
 800438e:	f000 f974 	bl	800467a <shake128_inc_finalize>
}
 8004392:	b003      	add	sp, #12
 8004394:	bd30      	pop	{r4, r5, pc}

08004396 <pqcrystals_dilithium_dilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
 8004396:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004398:	4604      	mov	r4, r0
 800439a:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 800439c:	f88d 2004 	strb.w	r2, [sp, #4]
  t[1] = nonce >> 8;
 80043a0:	0a12      	lsrs	r2, r2, #8
 80043a2:	f88d 2005 	strb.w	r2, [sp, #5]

  shake256_inc_init(state);
 80043a6:	f000 f96f 	bl	8004688 <shake256_inc_init>
  shake256_inc_absorb(state, seed, CRHBYTES);
 80043aa:	4629      	mov	r1, r5
 80043ac:	4620      	mov	r0, r4
 80043ae:	2240      	movs	r2, #64	; 0x40
 80043b0:	f000 f96c 	bl	800468c <shake256_inc_absorb>
  shake256_inc_absorb(state, t, 2);
 80043b4:	2202      	movs	r2, #2
 80043b6:	a901      	add	r1, sp, #4
 80043b8:	4620      	mov	r0, r4
 80043ba:	f000 f967 	bl	800468c <shake256_inc_absorb>
  shake256_inc_finalize(state);
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 f969 	bl	8004696 <shake256_inc_finalize>
}
 80043c4:	b003      	add	sp, #12
 80043c6:	bd30      	pop	{r4, r5, pc}

080043c8 <poly_small_ntt_precomp>:
#include "smallpoly.h"
#include "smallntt.h"

void poly_small_ntt_precomp(smallpoly *out, smallhalfpoly *out2, poly *in) {
 80043c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  for (int i = 0; i < N; i++)
 80043ca:	2300      	movs	r3, #0
void poly_small_ntt_precomp(smallpoly *out, smallhalfpoly *out2, poly *in) {
 80043cc:	4604      	mov	r4, r0
 80043ce:	460d      	mov	r5, r1
  {
    out->coeffs[i] = in->coeffs[i];
 80043d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043d4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  for (int i = 0; i < N; i++)
 80043d8:	3301      	adds	r3, #1
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d1f7      	bne.n	80043d0 <poly_small_ntt_precomp+0x8>
  }
  small_ntt(out->coeffs);
 80043e0:	4620      	mov	r0, r4
 80043e2:	4909      	ldr	r1, [pc, #36]	; (8004408 <poly_small_ntt_precomp+0x40>)
 80043e4:	f240 1301 	movw	r3, #257	; 0x101
 80043e8:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80043ec:	f7fb ff72 	bl	80002d4 <__asm_fnt_257>
  small_point_mul(out2->coeffs, out->coeffs);
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <poly_small_ntt_precomp+0x44>)
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80043f8:	f240 1301 	movw	r3, #257	; 0x101
 80043fc:	4621      	mov	r1, r4
 80043fe:	4628      	mov	r0, r5
 8004400:	f7fb fefe 	bl	8000200 <__asm_point_mul_257_16>
}
 8004404:	b003      	add	sp, #12
 8004406:	bd30      	pop	{r4, r5, pc}
 8004408:	0800c318 	.word	0x0800c318
 800440c:	0800c4f8 	.word	0x0800c4f8

08004410 <polyvecl_small_ntt>:


void polyvecl_small_ntt(smallpoly v[L]) {
 8004410:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for(i = 0; i < L; ++i)
    small_ntt(v[i].coeffs);
 8004412:	4e08      	ldr	r6, [pc, #32]	; (8004434 <polyvecl_small_ntt+0x24>)
void polyvecl_small_ntt(smallpoly v[L]) {
 8004414:	4604      	mov	r4, r0
 8004416:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
    small_ntt(v[i].coeffs);
 800441a:	4620      	mov	r0, r4
 800441c:	f240 1301 	movw	r3, #257	; 0x101
 8004420:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8004424:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 8004426:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    small_ntt(v[i].coeffs);
 800442a:	f7fb ff53 	bl	80002d4 <__asm_fnt_257>
  for(i = 0; i < L; ++i)
 800442e:	42ac      	cmp	r4, r5
 8004430:	d1f3      	bne.n	800441a <polyvecl_small_ntt+0xa>
}
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	0800c318 	.word	0x0800c318

08004438 <polyveck_small_ntt>:
 8004438:	f7ff bfea 	b.w	8004410 <polyvecl_small_ntt>

0800443c <poly_small_basemul_invntt>:
    small_ntt(v[i].coeffs);
}



void poly_small_basemul_invntt(poly *r, const smallpoly *a, const smallhalfpoly *aprime, const smallpoly *b){
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	460d      	mov	r5, r1
 8004440:	4604      	mov	r4, r0
 8004442:	4619      	mov	r1, r3
    // re-use the buffer
    smallpoly *tmp = (smallpoly *)r;
    small_asymmetric_mul(tmp->coeffs, b->coeffs, a->coeffs, aprime->coeffs);
 8004444:	4613      	mov	r3, r2
 8004446:	462a      	mov	r2, r5
 8004448:	f7fb ff1e 	bl	8000288 <__asm_asymmetric_mul_257_16>
    small_invntt_tomont(tmp->coeffs);
 800444c:	4620      	mov	r0, r4
 800444e:	4904      	ldr	r1, [pc, #16]	; (8004460 <poly_small_basemul_invntt+0x24>)
    // buffer is the same, so we neeed to be careful
    for(j=N-1;j>=0;j--){
        r->coeffs[j] = tmp->coeffs[j];
    }
    #endif
}
 8004450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    small_invntt_tomont(tmp->coeffs);
 8004454:	f240 1301 	movw	r3, #257	; 0x101
 8004458:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 800445c:	f7fc bade 	b.w	8000a1c <__asm_ifnt_257>
 8004460:	0800c5f8 	.word	0x0800c5f8

08004464 <polyvecl_small_basemul_invntt>:

void polyvecl_small_basemul_invntt(polyvecl *r, const smallpoly *a, const smallhalfpoly *aprime, const smallpoly b[L]){
 8004464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004468:	4605      	mov	r5, r0
 800446a:	460e      	mov	r6, r1
 800446c:	4617      	mov	r7, r2
 800446e:	4698      	mov	r8, r3
 8004470:	2400      	movs	r4, #0
    unsigned int i;
    for(i=0;i<L;i++){
        poly_small_basemul_invntt(&r->vec[i], a, aprime, &b[i]);
 8004472:	eb08 0304 	add.w	r3, r8, r4
 8004476:	1928      	adds	r0, r5, r4
 8004478:	463a      	mov	r2, r7
 800447a:	4631      	mov	r1, r6
    for(i=0;i<L;i++){
 800447c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        poly_small_basemul_invntt(&r->vec[i], a, aprime, &b[i]);
 8004480:	f7ff ffdc 	bl	800443c <poly_small_basemul_invntt>
    for(i=0;i<L;i++){
 8004484:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004488:	d1f3      	bne.n	8004472 <polyvecl_small_basemul_invntt+0xe>
    }
}
 800448a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800448e <small_polyeta_unpack>:

void small_polyeta_unpack(smallpoly *r, const uint8_t *a) {
 800448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004492:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  unsigned int i;

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 8004496:	780f      	ldrb	r7, [r1, #0]
 8004498:	f007 0707 	and.w	r7, r7, #7
 800449c:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 800449e:	780e      	ldrb	r6, [r1, #0]
 80044a0:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 80044a4:	6046      	str	r6, [r0, #4]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 80044a6:	784b      	ldrb	r3, [r1, #1]
 80044a8:	780a      	ldrb	r2, [r1, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 80044b0:	f003 0207 	and.w	r2, r3, #7
 80044b4:	6082      	str	r2, [r0, #8]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 80044b6:	f891 e001 	ldrb.w	lr, [r1, #1]
 80044ba:	f3ce 0e42 	ubfx	lr, lr, #1, #3
 80044be:	f8c0 e00c 	str.w	lr, [r0, #12]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 80044c2:	f891 c001 	ldrb.w	ip, [r1, #1]
 80044c6:	f3cc 1c02 	ubfx	ip, ip, #4, #3
 80044ca:	f8c0 c010 	str.w	ip, [r0, #16]
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 80044ce:	788b      	ldrb	r3, [r1, #2]
 80044d0:	784c      	ldrb	r4, [r1, #1]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	ea43 13d4 	orr.w	r3, r3, r4, lsr #7
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 80044de:	788c      	ldrb	r4, [r1, #2]
 80044e0:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80044e4:	6184      	str	r4, [r0, #24]
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 80044e6:	f891 8002 	ldrb.w	r8, [r1, #2]

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 80044ea:	f1c2 0202 	rsb	r2, r2, #2
 80044ee:	6082      	str	r2, [r0, #8]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80044f0:	f1c3 0302 	rsb	r3, r3, #2
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 80044f4:	f1ce 0202 	rsb	r2, lr, #2
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 80044f8:	ea4f 1858 	mov.w	r8, r8, lsr #5
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 80044fc:	60c2      	str	r2, [r0, #12]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80044fe:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 8004500:	f1c7 0702 	rsb	r7, r7, #2
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8004504:	f1c6 0602 	rsb	r6, r6, #2
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 8004508:	f1cc 0202 	rsb	r2, ip, #2
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 800450c:	f1c4 0402 	rsb	r4, r4, #2
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 8004510:	f1c8 0302 	rsb	r3, r8, #2
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 8004514:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8004516:	6046      	str	r6, [r0, #4]
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 8004518:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 800451a:	6184      	str	r4, [r0, #24]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 800451c:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < N/8; ++i) {
 800451e:	3020      	adds	r0, #32
 8004520:	42a8      	cmp	r0, r5
 8004522:	f101 0103 	add.w	r1, r1, #3
 8004526:	d1b6      	bne.n	8004496 <small_polyeta_unpack+0x8>
    r->coeffs[2*i+1] = a[i] >> 4;
    r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif
}
 8004528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800452c <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 800452c:	b510      	push	{r4, lr}
    size_t i;

    for (i = 0; i < 25; ++i) {
        s_inc[i] = 0;
 800452e:	22c8      	movs	r2, #200	; 0xc8
 8004530:	2100      	movs	r1, #0
static void keccak_inc_init(uint64_t *s_inc) {
 8004532:	4604      	mov	r4, r0
        s_inc[i] = 0;
 8004534:	f002 f9f2 	bl	800691c <memset>
    }
    s_inc[25] = 0;
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 8004540:	bd10      	pop	{r4, pc}

08004542 <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8004542:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004544:	f88d 2007 	strb.w	r2, [sp, #7]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    if(s_inc[25] == r-1){
 8004548:	e9d0 2332 	ldrd	r2, r3, [r0, #200]	; 0xc8
 800454c:	1e4d      	subs	r5, r1, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf08      	it	eq
 8004552:	42aa      	cmpeq	r2, r5
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8004554:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 8004556:	d110      	bne.n	800457a <keccak_inc_finalize+0x38>
      p |= 128;
 8004558:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800455c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004560:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8004564:	f10d 0107 	add.w	r1, sp, #7
 8004568:	2301      	movs	r3, #1
    } else {
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
      p = 128;
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 800456a:	f000 ff0a 	bl	8005382 <KeccakF1600_StateXORBytes>
    }
    s_inc[25] = 0;
 800456e:	2200      	movs	r2, #0
 8004570:	2300      	movs	r3, #0
 8004572:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 8004576:	b003      	add	sp, #12
 8004578:	bd30      	pop	{r4, r5, pc}
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 800457a:	2301      	movs	r3, #1
 800457c:	f10d 0107 	add.w	r1, sp, #7
 8004580:	f000 feff 	bl	8005382 <KeccakF1600_StateXORBytes>
      p = 128;
 8004584:	2380      	movs	r3, #128	; 0x80
 8004586:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 800458a:	462a      	mov	r2, r5
 800458c:	2301      	movs	r3, #1
 800458e:	f10d 0107 	add.w	r1, sp, #7
 8004592:	4620      	mov	r0, r4
 8004594:	e7e9      	b.n	800456a <keccak_inc_finalize+0x28>

08004596 <keccak_inc_absorb>:
                              size_t mlen) {
 8004596:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	460f      	mov	r7, r1
 800459e:	4616      	mov	r6, r2
 80045a0:	461d      	mov	r5, r3
        s_inc[25] = 0;
 80045a2:	f04f 0800 	mov.w	r8, #0
 80045a6:	f04f 0900 	mov.w	r9, #0
    while (mlen + s_inc[25] >= r) {
 80045aa:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 80045ae:	18a9      	adds	r1, r5, r2
 80045b0:	f143 0300 	adc.w	r3, r3, #0
 80045b4:	42b9      	cmp	r1, r7
 80045b6:	f173 0300 	sbcs.w	r3, r3, #0
 80045ba:	d20d      	bcs.n	80045d8 <keccak_inc_absorb+0x42>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 80045bc:	462b      	mov	r3, r5
 80045be:	4631      	mov	r1, r6
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 fede 	bl	8005382 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 80045c6:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 80045ca:	195b      	adds	r3, r3, r5
 80045cc:	f142 0200 	adc.w	r2, r2, #0
 80045d0:	e9c4 3232 	strd	r3, r2, [r4, #200]	; 0xc8
}
 80045d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 80045d8:	1abb      	subs	r3, r7, r2
 80045da:	4631      	mov	r1, r6
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 fed0 	bl	8005382 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 80045e2:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
        KeccakF1600_StatePermute(s_inc);
 80045e6:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 80045e8:	1bda      	subs	r2, r3, r7
        s_inc[25] = 0;
 80045ea:	e9c4 8932 	strd	r8, r9, [r4, #200]	; 0xc8
        m += r - s_inc[25];
 80045ee:	1afb      	subs	r3, r7, r3
        mlen -= (size_t)(r - s_inc[25]);
 80045f0:	4415      	add	r5, r2
        m += r - s_inc[25];
 80045f2:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 80045f4:	f000 feec 	bl	80053d0 <KeccakF1600_StatePermute>
 80045f8:	e7d7      	b.n	80045aa <keccak_inc_absorb+0x14>

080045fa <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 80045fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fe:	4614      	mov	r4, r2
 8004600:	4698      	mov	r8, r3
    size_t len;
    if(outlen < s_inc[25])
 8004602:	e9d2 2332 	ldrd	r2, r3, [r2, #200]	; 0xc8
                               uint64_t *s_inc, uint32_t r) {
 8004606:	460d      	mov	r5, r1
    if(outlen < s_inc[25])
 8004608:	4291      	cmp	r1, r2
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	eb71 0303 	sbcs.w	r3, r1, r3
    {
        len = outlen;
    }
    else
    {
        len = s_inc[25];
 8004612:	bf2c      	ite	cs
 8004614:	4616      	movcs	r6, r2
        len = outlen;
 8004616:	462e      	movcc	r6, r5
                               uint64_t *s_inc, uint32_t r) {
 8004618:	4607      	mov	r7, r0
    }

    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800461a:	4633      	mov	r3, r6
 800461c:	eba8 0202 	sub.w	r2, r8, r2
 8004620:	4601      	mov	r1, r0
 8004622:	4620      	mov	r0, r4
 8004624:	f000 fe8c 	bl	8005340 <KeccakF1600_StateExtractBytes>
    h += len;
    outlen -= len;
    s_inc[25] -= len;
 8004628:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 800462c:	1b9b      	subs	r3, r3, r6
 800462e:	f162 0200 	sbc.w	r2, r2, #0
 8004632:	e9c4 3232 	strd	r3, r2, [r4, #200]	; 0xc8
    h += len;
 8004636:	4437      	add	r7, r6
    outlen -= len;
 8004638:	1bad      	subs	r5, r5, r6
        }
        else
        {
            len = r;
        }
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 800463a:	f04f 0900 	mov.w	r9, #0
    while (outlen > 0) {
 800463e:	b90d      	cbnz	r5, 8004644 <keccak_inc_squeeze+0x4a>
        h += len;
        outlen -= len;
        s_inc[25] = r - len;
    }
}
 8004640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KeccakF1600_StatePermute(s_inc);
 8004644:	4620      	mov	r0, r4
 8004646:	f000 fec3 	bl	80053d0 <KeccakF1600_StatePermute>
        if(outlen < r)
 800464a:	4545      	cmp	r5, r8
 800464c:	462e      	mov	r6, r5
 800464e:	bf28      	it	cs
 8004650:	4646      	movcs	r6, r8
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8004652:	4633      	mov	r3, r6
 8004654:	4639      	mov	r1, r7
 8004656:	2200      	movs	r2, #0
 8004658:	4620      	mov	r0, r4
        h += len;
 800465a:	4437      	add	r7, r6
        outlen -= len;
 800465c:	1bad      	subs	r5, r5, r6
        s_inc[25] = r - len;
 800465e:	eba8 0606 	sub.w	r6, r8, r6
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8004662:	f000 fe6d 	bl	8005340 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8004666:	e9c4 6932 	strd	r6, r9, [r4, #200]	; 0xc8
 800466a:	e7e8      	b.n	800463e <keccak_inc_squeeze+0x44>

0800466c <shake128_inc_init>:

void shake128_inc_init(shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 800466c:	f7ff bf5e 	b.w	800452c <keccak_inc_init>

08004670 <shake128_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 8004670:	4613      	mov	r3, r2
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 8004672:	460a      	mov	r2, r1
 8004674:	21a8      	movs	r1, #168	; 0xa8
 8004676:	f7ff bf8e 	b.w	8004596 <keccak_inc_absorb>

0800467a <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 800467a:	221f      	movs	r2, #31
 800467c:	21a8      	movs	r1, #168	; 0xa8
 800467e:	f7ff bf60 	b.w	8004542 <keccak_inc_finalize>

08004682 <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 8004682:	23a8      	movs	r3, #168	; 0xa8
 8004684:	f7ff bfb9 	b.w	80045fa <keccak_inc_squeeze>

08004688 <shake256_inc_init>:

void shake256_inc_init(shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 8004688:	f7ff bf50 	b.w	800452c <keccak_inc_init>

0800468c <shake256_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 800468c:	4613      	mov	r3, r2
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 800468e:	460a      	mov	r2, r1
 8004690:	2188      	movs	r1, #136	; 0x88
 8004692:	f7ff bf80 	b.w	8004596 <keccak_inc_absorb>

08004696 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8004696:	221f      	movs	r2, #31
 8004698:	2188      	movs	r1, #136	; 0x88
 800469a:	f7ff bf52 	b.w	8004542 <keccak_inc_finalize>

0800469e <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 800469e:	2388      	movs	r3, #136	; 0x88
 80046a0:	f7ff bfab 	b.w	80045fa <keccak_inc_squeeze>

080046a4 <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 80046a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a6:	b0b5      	sub	sp, #212	; 0xd4
 80046a8:	4604      	mov	r4, r0
 80046aa:	4616      	mov	r6, r2
 80046ac:	461f      	mov	r7, r3
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
  shake256incctx state;

  keccak_inc_init(state.ctx);
 80046ae:	4668      	mov	r0, sp
{
 80046b0:	460d      	mov	r5, r1
  keccak_inc_init(state.ctx);
 80046b2:	f7ff ff3b 	bl	800452c <keccak_inc_init>

  /* Absorb input */
  keccak_inc_absorb(state.ctx, SHAKE256_RATE, input, inlen);
 80046b6:	463b      	mov	r3, r7
 80046b8:	4632      	mov	r2, r6
 80046ba:	4668      	mov	r0, sp
 80046bc:	2188      	movs	r1, #136	; 0x88
 80046be:	f7ff ff6a 	bl	8004596 <keccak_inc_absorb>
  keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x1F);
 80046c2:	4668      	mov	r0, sp
 80046c4:	221f      	movs	r2, #31
 80046c6:	2188      	movs	r1, #136	; 0x88
 80046c8:	f7ff ff3b 	bl	8004542 <keccak_inc_finalize>

  /* Squeeze output */
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 80046cc:	2388      	movs	r3, #136	; 0x88
 80046ce:	466a      	mov	r2, sp
 80046d0:	4629      	mov	r1, r5
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff ff91 	bl	80045fa <keccak_inc_squeeze>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80046d8:	b035      	add	sp, #212	; 0xd4
 80046da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046dc <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 80046dc:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80046de:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 80046e0:	2000      	movs	r0, #0
	while (len--) {
 80046e2:	428b      	cmp	r3, r1
 80046e4:	d100      	bne.n	80046e8 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 80046e6:	4770      	bx	lr
		crc ^= *buf++;
 80046e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ec:	4050      	eors	r0, r2
 80046ee:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80046f0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80046f4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80046f8:	bf18      	it	ne
 80046fa:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 80046fe:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8004700:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8004702:	d1f5      	bne.n	80046f0 <ss_crc+0x14>
 8004704:	e7ed      	b.n	80046e2 <ss_crc+0x6>

08004706 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8004706:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8004708:	2200      	movs	r2, #0
 800470a:	4604      	mov	r4, r0
	uint8_t i = 1;
 800470c:	2301      	movs	r3, #1
	for (; i < len; i++) {
 800470e:	428b      	cmp	r3, r1
 8004710:	d301      	bcc.n	8004716 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8004712:	2000      	movs	r0, #0
 8004714:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8004716:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800471a:	b915      	cbnz	r5, 8004722 <stuff_data+0x1c>
			buf[last] = i - last;
 800471c:	1a9d      	subs	r5, r3, r2
 800471e:	5485      	strb	r5, [r0, r2]
 8004720:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8004722:	3301      	adds	r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e7f2      	b.n	800470e <stuff_data+0x8>

08004728 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8004728:	b510      	push	{r4, lr}
	uint8_t next = buf[0]; // 取距离
 800472a:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00; // 恢复
 800472c:	2400      	movs	r4, #0
{
 800472e:	4603      	mov	r3, r0
	buf[0] = 0x00; // 恢复
 8004730:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0]; // 取距离
 8004732:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8004734:	4288      	cmp	r0, r1
 8004736:	d200      	bcs.n	800473a <unstuff_data+0x12>
 8004738:	b902      	cbnz	r2, 800473c <unstuff_data+0x14>
		tmp = buf[next]; // 取距离
		buf[next] = FRAME_BYTE; // 恢复
		next += tmp; // 记录当前位置
	}
	return next;
}
 800473a:	bd10      	pop	{r4, pc}
		tmp = buf[next]; // 取距离
 800473c:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE; // 恢复
 800473e:	541c      	strb	r4, [r3, r0]
		next += tmp; // 记录当前位置
 8004740:	4410      	add	r0, r2
 8004742:	b2c0      	uxtb	r0, r0
 8004744:	e7f6      	b.n	8004734 <unstuff_data+0xc>

08004746 <simpleserial_init>:
// This just adds the "v" command for now...
void simpleserial_init()
{
	// simpleserial_addcmd('v', 0, check_version);
 //    simpleserial_addcmd('w', 0, ss_get_commands);
}
 8004746:	4770      	bx	lr

08004748 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8004748:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 800474a:	4d0c      	ldr	r5, [pc, #48]	; (800477c <simpleserial_addcmd+0x34>)
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	2b7f      	cmp	r3, #127	; 0x7f
 8004750:	dd04      	ble.n	800475c <simpleserial_addcmd+0x14>
		putch('a');
 8004752:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8004754:	f000 f980 	bl	8004a58 <putch>
		return 1;
 8004758:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 800475a:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 800475c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004760:	d301      	bcc.n	8004766 <simpleserial_addcmd+0x1e>
		putch('b');
 8004762:	2062      	movs	r0, #98	; 0x62
 8004764:	e7f6      	b.n	8004754 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8004766:	240c      	movs	r4, #12
 8004768:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 800476c:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 800476e:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8004770:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8004774:	602b      	str	r3, [r5, #0]
	return 0;
 8004776:	2000      	movs	r0, #0
 8004778:	e7ef      	b.n	800475a <simpleserial_addcmd+0x12>
 800477a:	bf00      	nop
 800477c:	200009cc 	.word	0x200009cc

08004780 <simpleserial_put>:
	simpleserial_put('e', 0x05, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004786:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8004788:	2500      	movs	r5, #0
{
 800478a:	4611      	mov	r1, r2
	data_buf[1] = c;
 800478c:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8004790:	4622      	mov	r2, r4
 8004792:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8004796:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 800479a:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 800479e:	f7fd fbc1 	bl	8001f24 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80047a2:	1ca1      	adds	r1, r4, #2
 80047a4:	b2c9      	uxtb	r1, r1
 80047a6:	f10d 0001 	add.w	r0, sp, #1
 80047aa:	f7ff ff97 	bl	80046dc <ss_crc>
 80047ae:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 80047b2:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80047b4:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80047b6:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 80047b8:	b2c9      	uxtb	r1, r1
 80047ba:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 80047bc:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 80047c0:	f7ff ffa1 	bl	8004706 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 80047c4:	466c      	mov	r4, sp
		putch(data_buf[i]);
 80047c6:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 80047ca:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80047cc:	f000 f944 	bl	8004a58 <putch>
	for (int i = 0; i < size + 5; i++) {
 80047d0:	42ae      	cmp	r6, r5
 80047d2:	daf8      	bge.n	80047c6 <simpleserial_put+0x46>
	}
}
 80047d4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
 80047da:	0000      	movs	r0, r0

080047dc <simpleserial_get>:
{
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	uint8_t err = 0;
 80047e4:	2500      	movs	r5, #0
 80047e6:	ae02      	add	r6, sp, #8
 80047e8:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80047ec:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80047ee:	f000 f921 	bl	8004a34 <getch>
 80047f2:	b2c0      	uxtb	r0, r0
 80047f4:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {  //如果data_buf[i] == 0x00
 80047f8:	b960      	cbnz	r0, 8004814 <simpleserial_get+0x38>
			err = SS_ERR_FRAME_BYTE;
 80047fa:	2305      	movs	r3, #5
        err = 7;
 80047fc:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x05, &err);
 8004800:	f10d 0207 	add.w	r2, sp, #7
 8004804:	2105      	movs	r1, #5
 8004806:	2065      	movs	r0, #101	; 0x65
 8004808:	f7ff ffba 	bl	8004780 <simpleserial_put>
}
 800480c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8004810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8004814:	3501      	adds	r5, #1
 8004816:	2d04      	cmp	r5, #4
 8004818:	d1e9      	bne.n	80047ee <simpleserial_get+0x12>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 800481a:	4629      	mov	r1, r5
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff ff83 	bl	8004728 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8004822:	4f28      	ldr	r7, [pc, #160]	; (80048c4 <simpleserial_get+0xe8>)
		if(commands[c].c == data_buf[1])
 8004824:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8004826:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8004828:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 800482a:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 800482c:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 800482e:	fa5f f983 	uxtb.w	r9, r3
 8004832:	4591      	cmp	r9, r2
 8004834:	db02      	blt.n	800483c <simpleserial_get+0x60>
	if (c == num_commands) {
 8004836:	d107      	bne.n	8004848 <simpleserial_get+0x6c>
        err = 7;
 8004838:	2307      	movs	r3, #7
 800483a:	e7df      	b.n	80047fc <simpleserial_get+0x20>
		if(commands[c].c == data_buf[1])
 800483c:	fb00 7609 	mla	r6, r0, r9, r7
 8004840:	3301      	adds	r3, #1
 8004842:	7936      	ldrb	r6, [r6, #4]
 8004844:	428e      	cmp	r6, r1
 8004846:	d1f2      	bne.n	800482e <simpleserial_get+0x52>
	if ((data_buf[3] + 5) < next_frame) {
 8004848:	78e3      	ldrb	r3, [r4, #3]
 800484a:	3305      	adds	r3, #5
 800484c:	4543      	cmp	r3, r8
 800484e:	da02      	bge.n	8004856 <simpleserial_get+0x7a>
        err = 11;
 8004850:	230b      	movs	r3, #11
 8004852:	e7d3      	b.n	80047fc <simpleserial_get+0x20>
 8004854:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8004856:	f000 f8ed 	bl	8004a34 <getch>
 800485a:	b2c0      	uxtb	r0, r0
 800485c:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 800485e:	b908      	cbnz	r0, 8004864 <simpleserial_get+0x88>
            err = 12;
 8004860:	230c      	movs	r3, #12
 8004862:	e7cb      	b.n	80047fc <simpleserial_get+0x20>
	for (; i < data_buf[3] + 5; i++) {
 8004864:	78e3      	ldrb	r3, [r4, #3]
 8004866:	1c6e      	adds	r6, r5, #1
 8004868:	3304      	adds	r3, #4
 800486a:	42b3      	cmp	r3, r6
 800486c:	daf2      	bge.n	8004854 <simpleserial_get+0x78>
	data_buf[i] = getch();
 800486e:	f000 f8e1 	bl	8004a34 <getch>
 8004872:	b2c0      	uxtb	r0, r0
 8004874:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8004876:	b108      	cbz	r0, 800487c <simpleserial_get+0xa0>
        err = 13;
 8004878:	230d      	movs	r3, #13
 800487a:	e7bf      	b.n	80047fc <simpleserial_get+0x20>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 800487c:	f1c8 0101 	rsb	r1, r8, #1
 8004880:	fa51 f186 	uxtab	r1, r1, r6
 8004884:	b2c9      	uxtb	r1, r1
 8004886:	fa5f fa86 	uxtb.w	sl, r6
 800488a:	eb04 0008 	add.w	r0, r4, r8
 800488e:	f7ff ff4b 	bl	8004728 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8004892:	f1aa 0102 	sub.w	r1, sl, #2
 8004896:	b2c9      	uxtb	r1, r1
 8004898:	f10d 0009 	add.w	r0, sp, #9
 800489c:	f7ff ff1e 	bl	80046dc <ss_crc>
	if (crc != data_buf[i-1]) {
 80048a0:	5d63      	ldrb	r3, [r4, r5]
 80048a2:	4283      	cmp	r3, r0
 80048a4:	d001      	beq.n	80048aa <simpleserial_get+0xce>
        err = 14;
 80048a6:	230e      	movs	r3, #14
 80048a8:	e7a8      	b.n	80047fc <simpleserial_get+0x20>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80048aa:	230c      	movs	r3, #12
 80048ac:	fb03 7709 	mla	r7, r3, r9, r7
 80048b0:	78e2      	ldrb	r2, [r4, #3]
 80048b2:	68fd      	ldr	r5, [r7, #12]
 80048b4:	78a1      	ldrb	r1, [r4, #2]
 80048b6:	7860      	ldrb	r0, [r4, #1]
 80048b8:	446b      	add	r3, sp
 80048ba:	47a8      	blx	r5
 80048bc:	f88d 0007 	strb.w	r0, [sp, #7]
 80048c0:	e79e      	b.n	8004800 <simpleserial_get+0x24>
 80048c2:	bf00      	nop
 80048c4:	200009cc 	.word	0x200009cc

080048c8 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 80048c8:	b530      	push	{r4, r5, lr}
	//HAL_Init();

#ifdef STM32F4FPU
     /* set CP10 and CP11 Full Access */
     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); // SCB->CPACR |= 0x00f00000;
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <platform_init+0x80>)
 80048cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
{
 80048d8:	b093      	sub	sp, #76	; 0x4c
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80048da:	2203      	movs	r2, #3
 80048dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80048e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80048e4:	2102      	movs	r1, #2
 80048e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048ea:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 80048ee:	200c      	movs	r0, #12
 80048f0:	23c4      	movs	r3, #196	; 0xc4
 80048f2:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80048f6:	2404      	movs	r4, #4
 80048f8:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 80048fa:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80048fc:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80048fe:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8004902:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004904:	f000 f8c0 	bl	8004a88 <HAL_RCC_OscConfig>
 8004908:	4604      	mov	r4, r0
 800490a:	b100      	cbz	r0, 800490e <platform_init+0x46>
        for(;;);
 800490c:	e7fe      	b.n	800490c <platform_init+0x44>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 800490e:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004910:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004914:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004916:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8004918:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800491a:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 800491e:	f000 fa53 	bl	8004dc8 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <platform_init+0x84>)
 8004924:	9400      	str	r4, [sp, #0]
 8004926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 8004928:	4809      	ldr	r0, [pc, #36]	; (8004950 <platform_init+0x88>)
	__HAL_RCC_RNG_CLK_ENABLE();
 800492a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800492e:	635a      	str	r2, [r3, #52]	; 0x34
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <platform_init+0x8c>)
 800493c:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 800493e:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 8004940:	f000 fce1 	bl	8005306 <HAL_RNG_Init>

}
 8004944:	b013      	add	sp, #76	; 0x4c
 8004946:	bd30      	pop	{r4, r5, pc}
 8004948:	e000ed00 	.word	0xe000ed00
 800494c:	40023800 	.word	0x40023800
 8004950:	20000fd0 	.word	0x20000fd0
 8004954:	50060800 	.word	0x50060800

08004958 <init_uart>:

void init_uart(void)
{
 8004958:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800495a:	2302      	movs	r3, #2
{
 800495c:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800495e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004962:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 8004966:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004968:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 800496c:	4c15      	ldr	r4, [pc, #84]	; (80049c4 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800496e:	4816      	ldr	r0, [pc, #88]	; (80049c8 <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 8004970:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 8004972:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 8004974:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8004976:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8004978:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800497a:	4313      	orrs	r3, r2
 800497c:	6323      	str	r3, [r4, #48]	; 0x30
 800497e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004980:	4013      	ands	r3, r2
 8004982:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004984:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 8004986:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004988:	f000 fab6 	bl	8004ef8 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 800498c:	480f      	ldr	r0, [pc, #60]	; (80049cc <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 800498e:	4910      	ldr	r1, [pc, #64]	; (80049d0 <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 8004990:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 230400;
 8004992:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8004996:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800499a:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800499e:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80049a0:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80049a2:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80049a4:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 80049a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049a8:	f043 0310 	orr.w	r3, r3, #16
 80049ac:	6463      	str	r3, [r4, #68]	; 0x44
 80049ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 80049b6:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 80049b8:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 80049ba:	f000 fb89 	bl	80050d0 <HAL_UART_Init>
}
 80049be:	b009      	add	sp, #36	; 0x24
 80049c0:	bd30      	pop	{r4, r5, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	20000fd0 	.word	0x20000fd0
 80049d0:	40011000 	.word	0x40011000

080049d4 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80049d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 80049da:	2100      	movs	r1, #0
 80049dc:	9100      	str	r1, [sp, #0]
 80049de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 80049e8:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80049f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049f6:	2301      	movs	r3, #1
 80049f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80049fc:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80049fe:	2302      	movs	r3, #2
 8004a00:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004a02:	f000 fa79 	bl	8004ef8 <HAL_GPIO_Init>
#endif
}
 8004a06:	b007      	add	sp, #28
 8004a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40020000 	.word	0x40020000

08004a14 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <trigger_high+0xc>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a1c:	f000 bb52 	b.w	80050c4 <HAL_GPIO_WritePin>
 8004a20:	40020000 	.word	0x40020000

08004a24 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8004a24:	4802      	ldr	r0, [pc, #8]	; (8004a30 <trigger_low+0xc>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a2c:	f000 bb4a 	b.w	80050c4 <HAL_GPIO_WritePin>
 8004a30:	40020000 	.word	0x40020000

08004a34 <getch>:
#endif
}
char getch(void)
{
 8004a34:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8004a36:	4c07      	ldr	r4, [pc, #28]	; (8004a54 <getch+0x20>)
 8004a38:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f10d 0107 	add.w	r1, sp, #7
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 fbf7 	bl	8005236 <HAL_UART_Receive>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d1f5      	bne.n	8004a38 <getch+0x4>
	return d;
}
 8004a4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004a50:	b002      	add	sp, #8
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	20000fdc 	.word	0x20000fdc

08004a58 <putch>:

void putch(char c)
{
 8004a58:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004a5a:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 8004a5e:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8004a62:	2201      	movs	r2, #1
 8004a64:	f10d 0107 	add.w	r1, sp, #7
 8004a68:	4802      	ldr	r0, [pc, #8]	; (8004a74 <putch+0x1c>)
 8004a6a:	f000 fb9f 	bl	80051ac <HAL_UART_Transmit>
}
 8004a6e:	b003      	add	sp, #12
 8004a70:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a74:	20000fdc 	.word	0x20000fdc

08004a78 <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8004a78:	4b02      	ldr	r3, [pc, #8]	; (8004a84 <HAL_GetTick+0xc>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	1c42      	adds	r2, r0, #1
 8004a7e:	601a      	str	r2, [r3, #0]
}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000106c 	.word	0x2000106c

08004a88 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a88:	6803      	ldr	r3, [r0, #0]
{
 8004a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8c:	07de      	lsls	r6, r3, #31
{
 8004a8e:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a90:	d43b      	bmi.n	8004b0a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	680b      	ldr	r3, [r1, #0]
 8004a94:	079d      	lsls	r5, r3, #30
 8004a96:	f100 808b 	bmi.w	8004bb0 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	0718      	lsls	r0, r3, #28
 8004a9e:	f100 80d6 	bmi.w	8004c4e <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa2:	680b      	ldr	r3, [r1, #0]
 8004aa4:	075a      	lsls	r2, r3, #29
 8004aa6:	d52a      	bpl.n	8004afe <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	4b91      	ldr	r3, [pc, #580]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004aae:	4c92      	ldr	r4, [pc, #584]	; (8004cf8 <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8004aca:	f7ff ffd5 	bl	8004a78 <HAL_GetTick>
 8004ace:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	05d8      	lsls	r0, r3, #23
 8004ad4:	f140 80df 	bpl.w	8004c96 <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad8:	688b      	ldr	r3, [r1, #8]
 8004ada:	4c86      	ldr	r4, [pc, #536]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	f040 80e1 	bne.w	8004ca4 <HAL_RCC_OscConfig+0x21c>
 8004ae2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aea:	f7ff ffc5 	bl	8004a78 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aee:	4d81      	ldr	r5, [pc, #516]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8004af0:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004af8:	079a      	lsls	r2, r3, #30
 8004afa:	f140 80f4 	bpl.w	8004ce6 <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004afe:	698a      	ldr	r2, [r1, #24]
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	f040 80ff 	bne.w	8004d04 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004b06:	2000      	movs	r0, #0
 8004b08:	e015      	b.n	8004b36 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0a:	4b7a      	ldr	r3, [pc, #488]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	f002 020c 	and.w	r2, r2, #12
 8004b12:	2a04      	cmp	r2, #4
 8004b14:	d007      	beq.n	8004b26 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1c:	2a08      	cmp	r2, #8
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	0254      	lsls	r4, r2, #9
 8004b24:	d509      	bpl.n	8004b3a <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b26:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0398      	lsls	r0, r3, #14
 8004b2c:	d5b1      	bpl.n	8004a92 <HAL_RCC_OscConfig+0xa>
 8004b2e:	684b      	ldr	r3, [r1, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ae      	bne.n	8004a92 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8004b34:	2001      	movs	r0, #1
}
 8004b36:	b002      	add	sp, #8
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b3a:	684a      	ldr	r2, [r1, #4]
 8004b3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0xe0>
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b4a:	f7ff ff95 	bl	8004a78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4e:	4d69      	ldr	r5, [pc, #420]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b50:	4e6a      	ldr	r6, [pc, #424]	; (8004cfc <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8004b52:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	039a      	lsls	r2, r3, #14
 8004b58:	d49b      	bmi.n	8004a92 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b5a:	f7ff ff8d 	bl	8004a78 <HAL_GetTick>
 8004b5e:	1b00      	subs	r0, r0, r4
 8004b60:	42b0      	cmp	r0, r6
 8004b62:	d9f7      	bls.n	8004b54 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004b64:	2003      	movs	r0, #3
 8004b66:	e7e6      	b.n	8004b36 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	4c62      	ldr	r4, [pc, #392]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_OscConfig+0xfa>
 8004b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b80:	e7e3      	b.n	8004b4a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b90:	2a00      	cmp	r2, #0
 8004b92:	d1da      	bne.n	8004b4a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004b94:	f7ff ff70 	bl	8004a78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b98:	4e58      	ldr	r6, [pc, #352]	; (8004cfc <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8004b9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	039b      	lsls	r3, r3, #14
 8004ba0:	f57f af77 	bpl.w	8004a92 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7ff ff68 	bl	8004a78 <HAL_GetTick>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	42b0      	cmp	r0, r6
 8004bac:	d9f6      	bls.n	8004b9c <HAL_RCC_OscConfig+0x114>
 8004bae:	e7d9      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb0:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	f012 0f0c 	tst.w	r2, #12
 8004bb8:	d007      	beq.n	8004bca <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc0:	2a08      	cmp	r2, #8
 8004bc2:	d116      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0258      	lsls	r0, r3, #9
 8004bc8:	d413      	bmi.n	8004bf2 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bca:	484a      	ldr	r0, [pc, #296]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	6803      	ldr	r3, [r0, #0]
 8004bce:	079a      	lsls	r2, r3, #30
 8004bd0:	d502      	bpl.n	8004bd8 <HAL_RCC_OscConfig+0x150>
 8004bd2:	68cb      	ldr	r3, [r1, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d1ad      	bne.n	8004b34 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd8:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bda:	23f8      	movs	r3, #248	; 0xf8
 8004bdc:	fa93 f3a3 	rbit	r3, r3
 8004be0:	fab3 f283 	clz	r2, r3
 8004be4:	690b      	ldr	r3, [r1, #16]
 8004be6:	4093      	lsls	r3, r2
 8004be8:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 8004bec:	4313      	orrs	r3, r2
 8004bee:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf0:	e753      	b.n	8004a9a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bf2:	68ca      	ldr	r2, [r1, #12]
 8004bf4:	4b42      	ldr	r3, [pc, #264]	; (8004d00 <HAL_RCC_OscConfig+0x278>)
 8004bf6:	b1da      	cbz	r2, 8004c30 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004bfc:	f7ff ff3c 	bl	8004a78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	4c3c      	ldr	r4, [pc, #240]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8004c02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	079b      	lsls	r3, r3, #30
 8004c08:	d50c      	bpl.n	8004c24 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	23f8      	movs	r3, #248	; 0xf8
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	fab3 f283 	clz	r2, r3
 8004c16:	690b      	ldr	r3, [r1, #16]
 8004c18:	4093      	lsls	r3, r2
 8004c1a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	e73a      	b.n	8004a9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c24:	f7ff ff28 	bl	8004a78 <HAL_GetTick>
 8004c28:	1b40      	subs	r0, r0, r5
 8004c2a:	2802      	cmp	r0, #2
 8004c2c:	d9ea      	bls.n	8004c04 <HAL_RCC_OscConfig+0x17c>
 8004c2e:	e799      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8004c30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c32:	f7ff ff21 	bl	8004a78 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c36:	4d2f      	ldr	r5, [pc, #188]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8004c38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	079e      	lsls	r6, r3, #30
 8004c3e:	f57f af2c 	bpl.w	8004a9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c42:	f7ff ff19 	bl	8004a78 <HAL_GetTick>
 8004c46:	1b00      	subs	r0, r0, r4
 8004c48:	2802      	cmp	r0, #2
 8004c4a:	d9f6      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1b2>
 8004c4c:	e78a      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c4e:	694a      	ldr	r2, [r1, #20]
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <HAL_RCC_OscConfig+0x278>)
 8004c52:	b182      	cbz	r2, 8004c76 <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 8004c54:	2201      	movs	r2, #1
 8004c56:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004c5a:	f7ff ff0d 	bl	8004a78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	4d25      	ldr	r5, [pc, #148]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8004c60:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004c64:	079b      	lsls	r3, r3, #30
 8004c66:	f53f af1c 	bmi.w	8004aa2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6a:	f7ff ff05 	bl	8004a78 <HAL_GetTick>
 8004c6e:	1b00      	subs	r0, r0, r4
 8004c70:	2802      	cmp	r0, #2
 8004c72:	d9f6      	bls.n	8004c62 <HAL_RCC_OscConfig+0x1da>
 8004c74:	e776      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8004c76:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004c7a:	f7ff fefd 	bl	8004a78 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7e:	4d1d      	ldr	r5, [pc, #116]	; (8004cf4 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8004c80:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c82:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004c84:	079e      	lsls	r6, r3, #30
 8004c86:	f57f af0c 	bpl.w	8004aa2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8a:	f7ff fef5 	bl	8004a78 <HAL_GetTick>
 8004c8e:	1b00      	subs	r0, r0, r4
 8004c90:	2802      	cmp	r0, #2
 8004c92:	d9f6      	bls.n	8004c82 <HAL_RCC_OscConfig+0x1fa>
 8004c94:	e766      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c96:	f7ff feef 	bl	8004a78 <HAL_GetTick>
 8004c9a:	1b40      	subs	r0, r0, r5
 8004c9c:	2802      	cmp	r0, #2
 8004c9e:	f67f af17 	bls.w	8004ad0 <HAL_RCC_OscConfig+0x48>
 8004ca2:	e75f      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d104      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x22a>
 8004ca8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	6723      	str	r3, [r4, #112]	; 0x70
 8004cb0:	e717      	b.n	8004ae2 <HAL_RCC_OscConfig+0x5a>
 8004cb2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	6722      	str	r2, [r4, #112]	; 0x70
 8004cba:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004cbc:	f022 0204 	bic.w	r2, r2, #4
 8004cc0:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f47f af11 	bne.w	8004aea <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8004cc8:	f7ff fed6 	bl	8004a78 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004cd0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004cd4:	079b      	lsls	r3, r3, #30
 8004cd6:	f57f af12 	bpl.w	8004afe <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7ff fecd 	bl	8004a78 <HAL_GetTick>
 8004cde:	1b40      	subs	r0, r0, r5
 8004ce0:	42b0      	cmp	r0, r6
 8004ce2:	d9f6      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x24a>
 8004ce4:	e73e      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7ff fec7 	bl	8004a78 <HAL_GetTick>
 8004cea:	1b00      	subs	r0, r0, r4
 8004cec:	42b0      	cmp	r0, r6
 8004cee:	f67f af02 	bls.w	8004af6 <HAL_RCC_OscConfig+0x6e>
 8004cf2:	e737      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	05f5e100 	.word	0x05f5e100
 8004d00:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d04:	4c2d      	ldr	r4, [pc, #180]	; (8004dbc <HAL_RCC_OscConfig+0x334>)
 8004d06:	68a3      	ldr	r3, [r4, #8]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	f43f af11 	beq.w	8004b34 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d12:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <HAL_RCC_OscConfig+0x338>)
 8004d14:	2a02      	cmp	r2, #2
 8004d16:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1c:	d140      	bne.n	8004da0 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 8004d1e:	f7ff feab 	bl	8004a78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d22:	4e28      	ldr	r6, [pc, #160]	; (8004dc4 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8004d24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	0198      	lsls	r0, r3, #6
 8004d2a:	d433      	bmi.n	8004d94 <HAL_RCC_OscConfig+0x30c>
 8004d2c:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8004d30:	fa96 f6a6 	rbit	r6, r6
 8004d34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d38:	fab6 f686 	clz	r6, r6
 8004d3c:	fa92 f2a2 	rbit	r2, r2
 8004d40:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8004d44:	fab2 f582 	clz	r5, r2
 8004d48:	fa90 f0a0 	rbit	r0, r0
 8004d4c:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8004d54:	40b2      	lsls	r2, r6
 8004d56:	4313      	orrs	r3, r2
 8004d58:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004d5a:	0852      	lsrs	r2, r2, #1
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	40aa      	lsls	r2, r5
 8004d60:	4313      	orrs	r3, r2
 8004d62:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d64:	4d17      	ldr	r5, [pc, #92]	; (8004dc4 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d66:	fab0 f080 	clz	r0, r0
 8004d6a:	fa02 f000 	lsl.w	r0, r2, r0
 8004d6e:	4303      	orrs	r3, r0
 8004d70:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d74:	4c11      	ldr	r4, [pc, #68]	; (8004dbc <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 8004d76:	2201      	movs	r2, #1
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004d7a:	f7ff fe7d 	bl	8004a78 <HAL_GetTick>
 8004d7e:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	019a      	lsls	r2, r3, #6
 8004d84:	f53f aebf 	bmi.w	8004b06 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d88:	f7ff fe76 	bl	8004a78 <HAL_GetTick>
 8004d8c:	1a40      	subs	r0, r0, r1
 8004d8e:	42a8      	cmp	r0, r5
 8004d90:	d9f6      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
 8004d92:	e6e7      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7ff fe70 	bl	8004a78 <HAL_GetTick>
 8004d98:	1b40      	subs	r0, r0, r5
 8004d9a:	42b0      	cmp	r0, r6
 8004d9c:	d9c3      	bls.n	8004d26 <HAL_RCC_OscConfig+0x29e>
 8004d9e:	e6e1      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8004da0:	f7ff fe6a 	bl	8004a78 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da4:	4d07      	ldr	r5, [pc, #28]	; (8004dc4 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8004da6:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	019b      	lsls	r3, r3, #6
 8004dac:	f57f aeab 	bpl.w	8004b06 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db0:	f7ff fe62 	bl	8004a78 <HAL_GetTick>
 8004db4:	1a40      	subs	r0, r0, r1
 8004db6:	42a8      	cmp	r0, r5
 8004db8:	d9f6      	bls.n	8004da8 <HAL_RCC_OscConfig+0x320>
 8004dba:	e6d3      	b.n	8004b64 <HAL_RCC_OscConfig+0xdc>
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	42470000 	.word	0x42470000
 8004dc4:	001e8480 	.word	0x001e8480

08004dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004dca:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <HAL_RCC_ClockConfig+0x128>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	f002 020f 	and.w	r2, r2, #15
 8004dd2:	428a      	cmp	r2, r1
{
 8004dd4:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004dd6:	d31a      	bcc.n	8004e0e <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	0790      	lsls	r0, r2, #30
 8004ddc:	d420      	bmi.n	8004e20 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dde:	07d2      	lsls	r2, r2, #31
 8004de0:	d426      	bmi.n	8004e30 <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004de2:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_RCC_ClockConfig+0x128>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f002 020f 	and.w	r2, r2, #15
 8004dea:	428a      	cmp	r2, r1
 8004dec:	d870      	bhi.n	8004ed0 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dee:	6820      	ldr	r0, [r4, #0]
 8004df0:	0743      	lsls	r3, r0, #29
 8004df2:	d475      	bmi.n	8004ee0 <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	f010 0008 	ands.w	r0, r0, #8
 8004df8:	d011      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfa:	4a3e      	ldr	r2, [pc, #248]	; (8004ef4 <HAL_RCC_ClockConfig+0x12c>)
 8004dfc:	6921      	ldr	r1, [r4, #16]
 8004dfe:	6893      	ldr	r3, [r2, #8]
 8004e00:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e04:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e08:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e007      	b.n	8004e1e <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	b2ca      	uxtb	r2, r1
 8004e10:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 030f 	and.w	r3, r3, #15
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	d0dd      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8004e1c:	2001      	movs	r0, #1
}
 8004e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e20:	4834      	ldr	r0, [pc, #208]	; (8004ef4 <HAL_RCC_ClockConfig+0x12c>)
 8004e22:	68a5      	ldr	r5, [r4, #8]
 8004e24:	6883      	ldr	r3, [r0, #8]
 8004e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2a:	432b      	orrs	r3, r5
 8004e2c:	6083      	str	r3, [r0, #8]
 8004e2e:	e7d6      	b.n	8004dde <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e30:	6862      	ldr	r2, [r4, #4]
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <HAL_RCC_ClockConfig+0x12c>)
 8004e34:	2a01      	cmp	r2, #1
 8004e36:	d11d      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	d0ed      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e40:	4d2c      	ldr	r5, [pc, #176]	; (8004ef4 <HAL_RCC_ClockConfig+0x12c>)
 8004e42:	68ab      	ldr	r3, [r5, #8]
 8004e44:	f023 0303 	bic.w	r3, r3, #3
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8004e4c:	f7ff fe14 	bl	8004a78 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8004e54:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e56:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5a:	d115      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e5c:	68ab      	ldr	r3, [r5, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d0bd      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e66:	f7ff fe07 	bl	8004a78 <HAL_GetTick>
 8004e6a:	1b80      	subs	r0, r0, r6
 8004e6c:	42b8      	cmp	r0, r7
 8004e6e:	d9f5      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8004e70:	2003      	movs	r0, #3
 8004e72:	e7d4      	b.n	8004e1e <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e74:	1e90      	subs	r0, r2, #2
 8004e76:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e78:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e7a:	d802      	bhi.n	8004e82 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e80:	e7dd      	b.n	8004e3e <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e82:	f013 0f02 	tst.w	r3, #2
 8004e86:	e7da      	b.n	8004e3e <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d10a      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8c:	68ab      	ldr	r3, [r5, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d0a5      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e96:	f7ff fdef 	bl	8004a78 <HAL_GetTick>
 8004e9a:	1b80      	subs	r0, r0, r6
 8004e9c:	42b8      	cmp	r0, r7
 8004e9e:	d9f5      	bls.n	8004e8c <HAL_RCC_ClockConfig+0xc4>
 8004ea0:	e7e6      	b.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004ea6:	68ab      	ldr	r3, [r5, #8]
 8004ea8:	f003 030c 	and.w	r3, r3, #12
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d098      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb0:	f7ff fde2 	bl	8004a78 <HAL_GetTick>
 8004eb4:	1b80      	subs	r0, r0, r6
 8004eb6:	42b8      	cmp	r0, r7
 8004eb8:	d9f5      	bls.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
 8004eba:	e7d9      	b.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7ff fddc 	bl	8004a78 <HAL_GetTick>
 8004ec0:	1b80      	subs	r0, r0, r6
 8004ec2:	42b8      	cmp	r0, r7
 8004ec4:	d8d4      	bhi.n	8004e70 <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec6:	68ab      	ldr	r3, [r5, #8]
 8004ec8:	f013 0f0c 	tst.w	r3, #12
 8004ecc:	d1f6      	bne.n	8004ebc <HAL_RCC_ClockConfig+0xf4>
 8004ece:	e788      	b.n	8004de2 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed0:	b2ca      	uxtb	r2, r1
 8004ed2:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	428b      	cmp	r3, r1
 8004edc:	d19e      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x54>
 8004ede:	e786      	b.n	8004dee <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4904      	ldr	r1, [pc, #16]	; (8004ef4 <HAL_RCC_ClockConfig+0x12c>)
 8004ee2:	68e3      	ldr	r3, [r4, #12]
 8004ee4:	688a      	ldr	r2, [r1, #8]
 8004ee6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004eea:	431a      	orrs	r2, r3
 8004eec:	608a      	str	r2, [r1, #8]
 8004eee:	e781      	b.n	8004df4 <HAL_RCC_ClockConfig+0x2c>
 8004ef0:	40023c00 	.word	0x40023c00
 8004ef4:	40023800 	.word	0x40023800

08004ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004efc:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 80050b4 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f00:	4a6d      	ldr	r2, [pc, #436]	; (80050b8 <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f02:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80050bc <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f06:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f08:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8004f0a:	2701      	movs	r7, #1
 8004f0c:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f0e:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8004f12:	ea37 0404 	bics.w	r4, r7, r4
 8004f16:	f040 80b9 	bne.w	800508c <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f1a:	684c      	ldr	r4, [r1, #4]
 8004f1c:	f024 0a10 	bic.w	sl, r4, #16
 8004f20:	f1ba 0f02 	cmp.w	sl, #2
 8004f24:	d116      	bne.n	8004f54 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8004f26:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004f2a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f2e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004f32:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f36:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004f3a:	f04f 0c0f 	mov.w	ip, #15
 8004f3e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8004f42:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f46:	690e      	ldr	r6, [r1, #16]
 8004f48:	fa06 f60b 	lsl.w	r6, r6, fp
 8004f4c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8004f50:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8004f54:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f58:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004f5c:	f04f 0c03 	mov.w	ip, #3
 8004f60:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004f64:	ea2b 0b0c 	bic.w	fp, fp, ip
 8004f68:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f6c:	f004 0c03 	and.w	ip, r4, #3
 8004f70:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f74:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f78:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f7c:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8004f80:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f84:	d816      	bhi.n	8004fb4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8004f86:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f8a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f8e:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f92:	fa0a fa0e 	lsl.w	sl, sl, lr
 8004f96:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8004f9a:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8004f9e:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fa2:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fa6:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8004faa:	fa0c fc03 	lsl.w	ip, ip, r3
 8004fae:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8004fb2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004fb4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fb6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fb8:	688e      	ldr	r6, [r1, #8]
 8004fba:	fa06 f60e 	lsl.w	r6, r6, lr
 8004fbe:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8004fc0:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fc2:	00e6      	lsls	r6, r4, #3
 8004fc4:	d562      	bpl.n	800508c <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc6:	2600      	movs	r6, #0
 8004fc8:	9601      	str	r6, [sp, #4]
 8004fca:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8004fce:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8004fd2:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8004fd6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8004fda:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8004fde:	9701      	str	r7, [sp, #4]
 8004fe0:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004fe2:	f023 0703 	bic.w	r7, r3, #3
 8004fe6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8004fea:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fee:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ff2:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ff6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004ffa:	f04f 0c0f 	mov.w	ip, #15
 8004ffe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005002:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005006:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80050c0 <HAL_GPIO_Init+0x1c8>
 800500a:	4550      	cmp	r0, sl
 800500c:	d01d      	beq.n	800504a <HAL_GPIO_Init+0x152>
 800500e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005012:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 8005016:	42b0      	cmp	r0, r6
 8005018:	d03f      	beq.n	800509a <HAL_GPIO_Init+0x1a2>
 800501a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800501e:	42b0      	cmp	r0, r6
 8005020:	d03d      	beq.n	800509e <HAL_GPIO_Init+0x1a6>
 8005022:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005026:	42b0      	cmp	r0, r6
 8005028:	d03b      	beq.n	80050a2 <HAL_GPIO_Init+0x1aa>
 800502a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800502e:	42b0      	cmp	r0, r6
 8005030:	d039      	beq.n	80050a6 <HAL_GPIO_Init+0x1ae>
 8005032:	4548      	cmp	r0, r9
 8005034:	d039      	beq.n	80050aa <HAL_GPIO_Init+0x1b2>
 8005036:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800503a:	42b0      	cmp	r0, r6
 800503c:	d037      	beq.n	80050ae <HAL_GPIO_Init+0x1b6>
 800503e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005042:	42b0      	cmp	r0, r6
 8005044:	bf0c      	ite	eq
 8005046:	2607      	moveq	r6, #7
 8005048:	2608      	movne	r6, #8
 800504a:	fa06 f60e 	lsl.w	r6, r6, lr
 800504e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005052:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8005054:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005056:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005058:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800505c:	bf0c      	ite	eq
 800505e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8005060:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8005062:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8005064:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005066:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800506a:	bf0c      	ite	eq
 800506c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800506e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8005070:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005072:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005074:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8005078:	bf0c      	ite	eq
 800507a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800507c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800507e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8005080:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005082:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8005084:	bf54      	ite	pl
 8005086:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8005088:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800508a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800508c:	3301      	adds	r3, #1
 800508e:	2b10      	cmp	r3, #16
 8005090:	f47f af3a 	bne.w	8004f08 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8005094:	b003      	add	sp, #12
 8005096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800509a:	2601      	movs	r6, #1
 800509c:	e7d5      	b.n	800504a <HAL_GPIO_Init+0x152>
 800509e:	2602      	movs	r6, #2
 80050a0:	e7d3      	b.n	800504a <HAL_GPIO_Init+0x152>
 80050a2:	2603      	movs	r6, #3
 80050a4:	e7d1      	b.n	800504a <HAL_GPIO_Init+0x152>
 80050a6:	2604      	movs	r6, #4
 80050a8:	e7cf      	b.n	800504a <HAL_GPIO_Init+0x152>
 80050aa:	2605      	movs	r6, #5
 80050ac:	e7cd      	b.n	800504a <HAL_GPIO_Init+0x152>
 80050ae:	2606      	movs	r6, #6
 80050b0:	e7cb      	b.n	800504a <HAL_GPIO_Init+0x152>
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40013c00 	.word	0x40013c00
 80050bc:	40021400 	.word	0x40021400
 80050c0:	40020000 	.word	0x40020000

080050c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c4:	b10a      	cbz	r2, 80050ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050c6:	6181      	str	r1, [r0, #24]
  }
}
 80050c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ca:	0409      	lsls	r1, r1, #16
 80050cc:	e7fb      	b.n	80050c6 <HAL_GPIO_WritePin+0x2>
 80050ce:	0000      	movs	r0, r0

080050d0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d066      	beq.n	80051a4 <HAL_UART_Init+0xd4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 80050d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80050da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050de:	b90b      	cbnz	r3, 80050e4 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050e4:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80050e6:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050e8:	6905      	ldr	r5, [r0, #16]
 80050ea:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	2324      	movs	r3, #36	; 0x24
 80050ee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80050f2:	68cb      	ldr	r3, [r1, #12]
 80050f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f8:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 80050fa:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80050fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005100:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8005102:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005104:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 8005106:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005108:	432b      	orrs	r3, r5
 800510a:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800510c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005110:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005112:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005116:	4323      	orrs	r3, r4
 8005118:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800511a:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 800511c:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 800511e:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8005120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8005124:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005126:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800512a:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_UART_Init+0xd8>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800512e:	6843      	ldr	r3, [r0, #4]
 8005130:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005134:	d128      	bne.n	8005188 <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	fbb2 f2f3 	udiv	r2, r2, r3
 800513c:	fbb2 f6f5 	udiv	r6, r2, r5
 8005140:	fb05 2216 	mls	r2, r5, r6, r2
 8005144:	00d3      	lsls	r3, r2, #3
 8005146:	3332      	adds	r3, #50	; 0x32
 8005148:	fbb3 f3f5 	udiv	r3, r3, r5
 800514c:	f003 0207 	and.w	r2, r3, #7
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 8005156:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800515a:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800515c:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	690b      	ldr	r3, [r1, #16]
 8005160:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005164:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005166:	694b      	ldr	r3, [r1, #20]
 8005168:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800516c:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516e:	68cb      	ldr	r3, [r1, #12]
 8005170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005174:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 8005176:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	2300      	movs	r3, #0
 800517a:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800517c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005180:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8005184:	4618      	mov	r0, r3
}
 8005186:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	fbb2 f2f3 	udiv	r2, r2, r3
 800518e:	fbb2 f6f5 	udiv	r6, r2, r5
 8005192:	fb05 2316 	mls	r3, r5, r6, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	3332      	adds	r3, #50	; 0x32
 800519a:	fbb3 f3f5 	udiv	r3, r3, r5
 800519e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80051a2:	e7db      	b.n	800515c <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 80051a4:	2001      	movs	r0, #1
 80051a6:	e7ee      	b.n	8005186 <HAL_UART_Init+0xb6>
 80051a8:	0afb6e90 	.word	0x0afb6e90

080051ac <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80051ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d13e      	bne.n	8005232 <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 80051b4:	2900      	cmp	r1, #0
 80051b6:	d03a      	beq.n	800522e <HAL_UART_Transmit+0x82>
 80051b8:	2a00      	cmp	r2, #0
 80051ba:	d038      	beq.n	800522e <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d036      	beq.n	8005232 <HAL_UART_Transmit+0x86>
 80051c4:	2301      	movs	r3, #1
 80051c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ce:	2321      	movs	r3, #33	; 0x21
 80051d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80051d4:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 80051d6:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d8:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80051da:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80051dc:	b292      	uxth	r2, r2
 80051de:	b952      	cbnz	r2, 80051f6 <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	0652      	lsls	r2, r2, #25
 80051e4:	d5fc      	bpl.n	80051e0 <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80051e6:	2320      	movs	r3, #32
 80051e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051ec:	2300      	movs	r3, #0
 80051ee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 80051f2:	4618      	mov	r0, r3
 80051f4:	4770      	bx	lr
      huart->TxXferCount--;
 80051f6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80051f8:	3a01      	subs	r2, #1
 80051fa:	b292      	uxth	r2, r2
 80051fc:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051fe:	6882      	ldr	r2, [r0, #8]
 8005200:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005204:	d10c      	bne.n	8005220 <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	0612      	lsls	r2, r2, #24
 800520a:	d5fc      	bpl.n	8005206 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800520c:	880a      	ldrh	r2, [r1, #0]
 800520e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005212:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005214:	6902      	ldr	r2, [r0, #16]
 8005216:	b90a      	cbnz	r2, 800521c <HAL_UART_Transmit+0x70>
          pData +=2U;
 8005218:	3102      	adds	r1, #2
 800521a:	e7de      	b.n	80051da <HAL_UART_Transmit+0x2e>
          pData +=1U;
 800521c:	3101      	adds	r1, #1
 800521e:	e7dc      	b.n	80051da <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	0612      	lsls	r2, r2, #24
 8005224:	d5fc      	bpl.n	8005220 <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	e7d5      	b.n	80051da <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 800522e:	2001      	movs	r0, #1
 8005230:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005232:	2002      	movs	r0, #2
  }
}
 8005234:	4770      	bx	lr

08005236 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005236:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8005238:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800523c:	2b20      	cmp	r3, #32
 800523e:	d144      	bne.n	80052ca <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 8005240:	2900      	cmp	r1, #0
 8005242:	d040      	beq.n	80052c6 <HAL_UART_Receive+0x90>
 8005244:	2a00      	cmp	r2, #0
 8005246:	d03e      	beq.n	80052c6 <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005248:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800524c:	2b01      	cmp	r3, #1
 800524e:	d03c      	beq.n	80052ca <HAL_UART_Receive+0x94>
 8005250:	2301      	movs	r3, #1
 8005252:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005256:	2300      	movs	r3, #0
 8005258:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800525a:	2322      	movs	r3, #34	; 0x22
 800525c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8005260:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005262:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8005264:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005266:	b29b      	uxth	r3, r3
 8005268:	b933      	cbnz	r3, 8005278 <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800526a:	2220      	movs	r2, #32
 800526c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005270:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8005274:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005276:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 8005278:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800527a:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 800527c:	3b01      	subs	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005282:	6883      	ldr	r3, [r0, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d111      	bne.n	80052ae <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800528a:	6813      	ldr	r3, [r2, #0]
 800528c:	069c      	lsls	r4, r3, #26
 800528e:	d5fc      	bpl.n	800528a <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005290:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005292:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005294:	b933      	cbnz	r3, 80052a4 <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005296:	460b      	mov	r3, r1
 8005298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529c:	f823 2b02 	strh.w	r2, [r3], #2
{
 80052a0:	4619      	mov	r1, r3
 80052a2:	e7df      	b.n	8005264 <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80052a4:	460b      	mov	r3, r1
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 80052ac:	e7f8      	b.n	80052a0 <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	069b      	lsls	r3, r3, #26
 80052b2:	d5fc      	bpl.n	80052ae <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80052b4:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052b6:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 80052b8:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 80052ba:	b90c      	cbnz	r4, 80052c0 <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052bc:	700a      	strb	r2, [r1, #0]
 80052be:	e7ef      	b.n	80052a0 <HAL_UART_Receive+0x6a>
 80052c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052c4:	e7fa      	b.n	80052bc <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 80052c6:	2001      	movs	r0, #1
 80052c8:	e7d5      	b.n	8005276 <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 80052ca:	2002      	movs	r0, #2
 80052cc:	e7d3      	b.n	8005276 <HAL_UART_Receive+0x40>
 80052ce:	0000      	movs	r0, r0

080052d0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <_sbrk+0x2c>)
 80052d2:	6811      	ldr	r1, [r2, #0]
{
 80052d4:	b508      	push	{r3, lr}
 80052d6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80052d8:	b909      	cbnz	r1, 80052de <_sbrk+0xe>
		heap_end = &end;
 80052da:	4909      	ldr	r1, [pc, #36]	; (8005300 <_sbrk+0x30>)
 80052dc:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80052de:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80052e0:	4669      	mov	r1, sp
 80052e2:	4403      	add	r3, r0
 80052e4:	428b      	cmp	r3, r1
 80052e6:	d906      	bls.n	80052f6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80052e8:	f001 f802 	bl	80062f0 <__errno>
 80052ec:	230c      	movs	r3, #12
 80052ee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80052f4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80052f6:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80052f8:	e7fc      	b.n	80052f4 <_sbrk+0x24>
 80052fa:	bf00      	nop
 80052fc:	20001070 	.word	0x20001070
 8005300:	200010c0 	.word	0x200010c0

08005304 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8005304:	4770      	bx	lr

08005306 <HAL_RNG_Init>:
{ 
 8005306:	b510      	push	{r4, lr}
  if(hrng == NULL)
 8005308:	4604      	mov	r4, r0
 800530a:	b1a8      	cbz	r0, 8005338 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 800530c:	7903      	ldrb	r3, [r0, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d014      	beq.n	800533c <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 8005312:	7943      	ldrb	r3, [r0, #5]
 8005314:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005318:	b913      	cbnz	r3, 8005320 <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 800531a:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 800531c:	f7ff fff2 	bl	8005304 <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 8005320:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8005326:	6813      	ldr	r3, [r2, #0]
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 800532e:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8005330:	2301      	movs	r3, #1
 8005332:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 8005334:	7120      	strb	r0, [r4, #4]
}
 8005336:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005338:	2001      	movs	r0, #1
 800533a:	e7fc      	b.n	8005336 <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 800533c:	2002      	movs	r0, #2
 800533e:	e7fa      	b.n	8005336 <HAL_RNG_Init+0x30>

08005340 <KeccakF1600_StateExtractBytes>:
    (uint64_t)0x0000000080000001ULL,
    (uint64_t)0x8000000080008008ULL
};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 8005340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005342:	440b      	add	r3, r1
 8005344:	1a52      	subs	r2, r2, r1
    unsigned int i;
    for(i=0;i<length;i++)
 8005346:	4299      	cmp	r1, r3
 8005348:	d100      	bne.n	800534c <KeccakF1600_StateExtractBytes+0xc>
    {
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
    }
}
 800534a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
 800534c:	1854      	adds	r4, r2, r1
 800534e:	f024 0607 	bic.w	r6, r4, #7
 8005352:	08e5      	lsrs	r5, r4, #3
 8005354:	4406      	add	r6, r0
 8005356:	f004 0407 	and.w	r4, r4, #7
 800535a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800535e:	f850 5035 	ldr.w	r5, [r0, r5, lsl #3]
 8005362:	00e4      	lsls	r4, r4, #3
 8005364:	f1c4 0720 	rsb	r7, r4, #32
 8005368:	f1a4 0620 	sub.w	r6, r4, #32
 800536c:	fa0c f707 	lsl.w	r7, ip, r7
 8005370:	fa25 f404 	lsr.w	r4, r5, r4
 8005374:	433c      	orrs	r4, r7
 8005376:	fa2c f606 	lsr.w	r6, ip, r6
 800537a:	4334      	orrs	r4, r6
 800537c:	f801 4b01 	strb.w	r4, [r1], #1
    for(i=0;i<length;i++)
 8005380:	e7e1      	b.n	8005346 <KeccakF1600_StateExtractBytes+0x6>

08005382 <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 8005382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005384:	440b      	add	r3, r1
 8005386:	1a52      	subs	r2, r2, r1
    unsigned int i;
    for(i = 0; i < length; i++)
 8005388:	4299      	cmp	r1, r3
 800538a:	d100      	bne.n	800538e <KeccakF1600_StateXORBytes+0xc>
    {
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
    }
}
 800538c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 800538e:	1854      	adds	r4, r2, r1
 8005390:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8005394:	f024 0707 	bic.w	r7, r4, #7
 8005398:	f004 0407 	and.w	r4, r4, #7
 800539c:	f811 6b01 	ldrb.w	r6, [r1], #1
 80053a0:	00e4      	lsls	r4, r4, #3
 80053a2:	f1a4 0520 	sub.w	r5, r4, #32
 80053a6:	f1c4 0e20 	rsb	lr, r4, #32
 80053aa:	4407      	add	r7, r0
 80053ac:	fa06 f505 	lsl.w	r5, r6, r5
 80053b0:	fa26 fe0e 	lsr.w	lr, r6, lr
 80053b4:	fa06 f404 	lsl.w	r4, r6, r4
 80053b8:	f850 603c 	ldr.w	r6, [r0, ip, lsl #3]
 80053bc:	4074      	eors	r4, r6
 80053be:	687e      	ldr	r6, [r7, #4]
 80053c0:	f840 403c 	str.w	r4, [r0, ip, lsl #3]
 80053c4:	ea45 050e 	orr.w	r5, r5, lr
 80053c8:	4075      	eors	r5, r6
 80053ca:	607d      	str	r5, [r7, #4]
    for(i = 0; i < length; i++)
 80053cc:	e7dc      	b.n	8005388 <KeccakF1600_StateXORBytes+0x6>
 80053ce:	0000      	movs	r0, r0

080053d0 <KeccakF1600_StatePermute>:

void KeccakF1600_StatePermute(uint64_t * state)
{
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	b0bf      	sub	sp, #252	; 0xfc
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 80053d6:	6803      	ldr	r3, [r0, #0]
 80053d8:	930c      	str	r3, [sp, #48]	; 0x30
 80053da:	6843      	ldr	r3, [r0, #4]
 80053dc:	930d      	str	r3, [sp, #52]	; 0x34
        Abe = state[ 1];
 80053de:	6883      	ldr	r3, [r0, #8]
 80053e0:	930e      	str	r3, [sp, #56]	; 0x38
 80053e2:	68c3      	ldr	r3, [r0, #12]
 80053e4:	930f      	str	r3, [sp, #60]	; 0x3c
        Abi = state[ 2];
 80053e6:	6903      	ldr	r3, [r0, #16]
 80053e8:	9310      	str	r3, [sp, #64]	; 0x40
 80053ea:	6943      	ldr	r3, [r0, #20]
 80053ec:	9311      	str	r3, [sp, #68]	; 0x44
        Abo = state[ 3];
 80053ee:	6983      	ldr	r3, [r0, #24]
 80053f0:	9312      	str	r3, [sp, #72]	; 0x48
 80053f2:	69c3      	ldr	r3, [r0, #28]
 80053f4:	9313      	str	r3, [sp, #76]	; 0x4c
        Abu = state[ 4];
 80053f6:	6a03      	ldr	r3, [r0, #32]
 80053f8:	9314      	str	r3, [sp, #80]	; 0x50
 80053fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053fc:	9315      	str	r3, [sp, #84]	; 0x54
        Aga = state[ 5];
 80053fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005400:	9316      	str	r3, [sp, #88]	; 0x58
 8005402:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005404:	9317      	str	r3, [sp, #92]	; 0x5c
        Age = state[ 6];
 8005406:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005408:	9318      	str	r3, [sp, #96]	; 0x60
 800540a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800540c:	9319      	str	r3, [sp, #100]	; 0x64
        Agi = state[ 7];
 800540e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005410:	931a      	str	r3, [sp, #104]	; 0x68
 8005412:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005414:	931b      	str	r3, [sp, #108]	; 0x6c
        Ago = state[ 8];
 8005416:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005418:	931c      	str	r3, [sp, #112]	; 0x70
 800541a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800541c:	931d      	str	r3, [sp, #116]	; 0x74
        Agu = state[ 9];
 800541e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005420:	931e      	str	r3, [sp, #120]	; 0x78
 8005422:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005424:	931f      	str	r3, [sp, #124]	; 0x7c
        Aka = state[10];
 8005426:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005428:	9320      	str	r3, [sp, #128]	; 0x80
 800542a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800542c:	9321      	str	r3, [sp, #132]	; 0x84
        Ake = state[11];
 800542e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005430:	9322      	str	r3, [sp, #136]	; 0x88
 8005432:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005434:	9323      	str	r3, [sp, #140]	; 0x8c
        Aki = state[12];
 8005436:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005438:	9324      	str	r3, [sp, #144]	; 0x90
 800543a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800543c:	9325      	str	r3, [sp, #148]	; 0x94
        Ako = state[13];
 800543e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005440:	9326      	str	r3, [sp, #152]	; 0x98
 8005442:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005444:	9327      	str	r3, [sp, #156]	; 0x9c
        Aku = state[14];
 8005446:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005448:	9328      	str	r3, [sp, #160]	; 0xa0
 800544a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800544c:	9329      	str	r3, [sp, #164]	; 0xa4
        Ama = state[15];
 800544e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005450:	932a      	str	r3, [sp, #168]	; 0xa8
 8005452:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005454:	932b      	str	r3, [sp, #172]	; 0xac
        Ame = state[16];
 8005456:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800545a:	932c      	str	r3, [sp, #176]	; 0xb0
 800545c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005460:	932d      	str	r3, [sp, #180]	; 0xb4
        Ami = state[17];
 8005462:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005466:	932e      	str	r3, [sp, #184]	; 0xb8
 8005468:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800546c:	932f      	str	r3, [sp, #188]	; 0xbc
        Amo = state[18];
 800546e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8005472:	9330      	str	r3, [sp, #192]	; 0xc0
 8005474:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8005478:	9331      	str	r3, [sp, #196]	; 0xc4
        Amu = state[19];
 800547a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 800547e:	9332      	str	r3, [sp, #200]	; 0xc8
 8005480:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8005484:	9333      	str	r3, [sp, #204]	; 0xcc
        Asa = state[20];
 8005486:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800548a:	930b      	str	r3, [sp, #44]	; 0x2c
 800548c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005490:	9334      	str	r3, [sp, #208]	; 0xd0
        Ase = state[21];
 8005492:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8005496:	9335      	str	r3, [sp, #212]	; 0xd4
 8005498:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 800549c:	9336      	str	r3, [sp, #216]	; 0xd8
        Asi = state[22];
 800549e:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 80054a2:	9337      	str	r3, [sp, #220]	; 0xdc
 80054a4:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80054a8:	9338      	str	r3, [sp, #224]	; 0xe0
        Aso = state[23];
 80054aa:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 80054ae:	9339      	str	r3, [sp, #228]	; 0xe4
 80054b0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80054b4:	933a      	str	r3, [sp, #232]	; 0xe8
        Asu = state[24];
 80054b6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80054ba:	933b      	str	r3, [sp, #236]	; 0xec
 80054bc:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4

        for( round = 0; round < NROUNDS; round += 2 )
 80054c0:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <KeccakF1600_StatePermute+0xf8>)
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	e002      	b.n	80054cc <KeccakF1600_StatePermute+0xfc>
 80054c6:	bf00      	nop
 80054c8:	0800d3d0 	.word	0x0800d3d0
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 80054cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80054ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80054d2:	4053      	eors	r3, r2
 80054d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054d6:	ea82 0501 	eor.w	r5, r2, r1
 80054da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054dc:	4053      	eors	r3, r2
 80054de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054e0:	4055      	eors	r5, r2
 80054e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80054e4:	4053      	eors	r3, r2
 80054e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80054e8:	4055      	eors	r5, r2
 80054ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ec:	4053      	eors	r3, r2
 80054ee:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80054f0:	9309      	str	r3, [sp, #36]	; 0x24
 80054f2:	4055      	eors	r5, r2
            BCe = Abe^Age^Ake^Ame^Ase;
 80054f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80054f8:	ea83 0902 	eor.w	r9, r3, r2
 80054fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054fe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005500:	ea83 0802 	eor.w	r8, r3, r2
 8005504:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = Abi^Agi^Aki^Ami^Asi;
 8005506:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            BCe = Abe^Age^Ake^Ame^Ase;
 8005508:	ea89 0903 	eor.w	r9, r9, r3
 800550c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800550e:	ea88 0803 	eor.w	r8, r8, r3
 8005512:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005514:	ea89 0903 	eor.w	r9, r9, r3
 8005518:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800551a:	ea88 0803 	eor.w	r8, r8, r3
 800551e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8005520:	ea89 0903 	eor.w	r9, r9, r3
 8005524:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8005526:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 800552a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800552c:	ea83 0c02 	eor.w	ip, r3, r2
 8005530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005532:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005534:	ea83 0702 	eor.w	r7, r3, r2
 8005538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800553a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800553c:	ea8c 0c03 	eor.w	ip, ip, r3
 8005540:	4057      	eors	r7, r2
 8005542:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005544:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8005546:	ea8c 0c03 	eor.w	ip, ip, r3
 800554a:	4057      	eors	r7, r2
 800554c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800554e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8005550:	ea8c 0c03 	eor.w	ip, ip, r3
 8005554:	4057      	eors	r7, r2
            BCo = Abo^Ago^Ako^Amo^Aso;
 8005556:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005558:	9a1c      	ldr	r2, [sp, #112]	; 0x70
            BCu = Abu^Agu^Aku^Amu^Asu;
 800555a:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
            BCo = Abo^Ago^Ako^Amo^Aso;
 800555e:	ea83 0402 	eor.w	r4, r3, r2
 8005562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005564:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005566:	ea83 0102 	eor.w	r1, r3, r2
 800556a:	9a26      	ldr	r2, [sp, #152]	; 0x98
            BCu = Abu^Agu^Aku^Amu^Asu;
 800556c:	9b14      	ldr	r3, [sp, #80]	; 0x50
            BCo = Abo^Ago^Ako^Amo^Aso;
 800556e:	4054      	eors	r4, r2
 8005570:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8005572:	4051      	eors	r1, r2
 8005574:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8005576:	4054      	eors	r4, r2
 8005578:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800557a:	4051      	eors	r1, r2
 800557c:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800557e:	4054      	eors	r4, r2
 8005580:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8005582:	4051      	eors	r1, r2
            BCu = Abu^Agu^Aku^Amu^Asu;
 8005584:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005586:	405a      	eors	r2, r3
 8005588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800558a:	ea83 0e0e 	eor.w	lr, r3, lr
 800558e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005590:	405a      	eors	r2, r3
 8005592:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005594:	ea8e 0e03 	eor.w	lr, lr, r3
 8005598:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800559a:	405a      	eors	r2, r3
 800559c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800559e:	ea8e 0e03 	eor.w	lr, lr, r3
 80055a2:	9b3b      	ldr	r3, [sp, #236]	; 0xec

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 80055a4:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 80055a8:	405a      	eors	r2, r3
            Da = BCu^ROL(BCe, 1);
 80055aa:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 80055ae:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 80055b2:	ea8e 0e06 	eor.w	lr, lr, r6
            Da = BCu^ROL(BCe, 1);
 80055b6:	ea8b 0302 	eor.w	r3, fp, r2
 80055ba:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 80055be:	9302      	str	r3, [sp, #8]
 80055c0:	ea8a 030e 	eor.w	r3, sl, lr
 80055c4:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 80055c6:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 80055ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055cc:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
 80055d0:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80055d4:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 80055d8:	ea8b 0303 	eor.w	r3, fp, r3
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	ea8a 0305 	eor.w	r3, sl, r5
            Di = BCe^ROL(BCo, 1);
 80055e2:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 80055e6:	ea4a 7ad4 	orr.w	sl, sl, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 80055ea:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 80055ec:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 80055f0:	ea4f 084e 	mov.w	r8, lr, lsl #1
 80055f4:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 80055f8:	0052      	lsls	r2, r2, #1
 80055fa:	ea42 72de 	orr.w	r2, r2, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 80055fe:	9306      	str	r3, [sp, #24]
            Do = BCi^ROL(BCu, 1);
 8005600:	ea82 030c 	eor.w	r3, r2, ip
 8005604:	9307      	str	r3, [sp, #28]
 8005606:	ea88 0307 	eor.w	r3, r8, r7
 800560a:	9308      	str	r3, [sp, #32]
            Du = BCo^ROL(BCa, 1);
 800560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560e:	006a      	lsls	r2, r5, #1
 8005610:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
 800561a:	4063      	eors	r3, r4
 800561c:	9309      	str	r3, [sp, #36]	; 0x24
 800561e:	ea82 0301 	eor.w	r3, r2, r1
            Di = BCe^ROL(BCo, 1);
 8005622:	ea4f 0b44 	mov.w	fp, r4, lsl #1

            Aba ^= Da;
 8005626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            Du = BCo^ROL(BCa, 1);
 8005628:	930a      	str	r3, [sp, #40]	; 0x28
            Aba ^= Da;
 800562a:	9b02      	ldr	r3, [sp, #8]
            Di = BCe^ROL(BCo, 1);
 800562c:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 8005630:	ea8b 0b09 	eor.w	fp, fp, r9
            Aba ^= Da;
 8005634:	ea83 0902 	eor.w	r9, r3, r2
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
 800563c:	9906      	ldr	r1, [sp, #24]
 800563e:	9c25      	ldr	r4, [sp, #148]	; 0x94
            BCi = ROL(Aki, 43);
            Amo ^= Do;
 8005640:	9f31      	ldr	r7, [sp, #196]	; 0xc4
            Aba ^= Da;
 8005642:	ea83 0a02 	eor.w	sl, r3, r2
            Age ^= De;
 8005646:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005648:	9b04      	ldr	r3, [sp, #16]
 800564a:	ea83 0e02 	eor.w	lr, r3, r2
 800564e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	ea83 0c02 	eor.w	ip, r3, r2
            Aki ^= Di;
 8005656:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005658:	ea8b 0202 	eor.w	r2, fp, r2
 800565c:	404c      	eors	r4, r1
            BCi = ROL(Aki, 43);
 800565e:	ea4f 5852 	mov.w	r8, r2, lsr #21
 8005662:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 8005666:	0d64      	lsrs	r4, r4, #21
 8005668:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
            Amo ^= Do;
 800566c:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800566e:	9a07      	ldr	r2, [sp, #28]
 8005670:	4051      	eors	r1, r2
 8005672:	9a08      	ldr	r2, [sp, #32]
            BCe = ROL(Age, 44);
 8005674:	ea4f 551e 	mov.w	r5, lr, lsr #20
 8005678:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
            Amo ^= Do;
 800567c:	407a      	eors	r2, r7
            BCe = ROL(Age, 44);
 800567e:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 8005682:	ea4c 330e 	orr.w	r3, ip, lr, lsl #12
            BCo = ROL(Amo, 21);
 8005686:	ea4f 5e42 	mov.w	lr, r2, lsl #21
 800568a:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 800568e:	0549      	lsls	r1, r1, #21
 8005690:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
            Asu ^= Du;
 8005694:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 8005696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005698:	4057      	eors	r7, r2
 800569a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569c:	4056      	eors	r6, r2
            BCu = ROL(Asu, 14);
 800569e:	03ba      	lsls	r2, r7, #14
 80056a0:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 80056a4:	ea4f 3c86 	mov.w	ip, r6, lsl #14
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80056a8:	9e01      	ldr	r6, [sp, #4]
            BCu = ROL(Asu, 14);
 80056aa:	ea4c 4c97 	orr.w	ip, ip, r7, lsr #18
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80056ae:	e9d6 7600 	ldrd	r7, r6, [r6]
 80056b2:	ea8a 0606 	eor.w	r6, sl, r6
 80056b6:	960d      	str	r6, [sp, #52]	; 0x34
 80056b8:	ea89 0707 	eor.w	r7, r9, r7
 80056bc:	ea28 0605 	bic.w	r6, r8, r5
 80056c0:	407e      	eors	r6, r7
 80056c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80056c4:	960c      	str	r6, [sp, #48]	; 0x30
 80056c6:	ea24 0603 	bic.w	r6, r4, r3
 80056ca:	4077      	eors	r7, r6
            Ebe =   BCe ^((~BCi)&  BCo );
 80056cc:	ea2e 0604 	bic.w	r6, lr, r4
 80056d0:	405e      	eors	r6, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80056d2:	970d      	str	r7, [sp, #52]	; 0x34
            Ebe =   BCe ^((~BCi)&  BCo );
 80056d4:	ea21 0708 	bic.w	r7, r1, r8
 80056d8:	406f      	eors	r7, r5
 80056da:	9625      	str	r6, [sp, #148]	; 0x94
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );
 80056dc:	ea25 0509 	bic.w	r5, r5, r9
            Ebi =   BCi ^((~BCo)&  BCu );
 80056e0:	ea2c 060e 	bic.w	r6, ip, lr
            Ebu =   BCu ^((~BCa)&  BCe );
 80056e4:	ea23 030a 	bic.w	r3, r3, sl
            Ebi =   BCi ^((~BCo)&  BCu );
 80056e8:	4074      	eors	r4, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 80056ea:	ea83 030c 	eor.w	r3, r3, ip
            Ebo =   BCo ^((~BCu)&  BCa );
 80056ee:	ea29 0602 	bic.w	r6, r9, r2
            Ebe =   BCe ^((~BCi)&  BCo );
 80056f2:	9724      	str	r7, [sp, #144]	; 0x90
            Ebi =   BCi ^((~BCo)&  BCu );
 80056f4:	ea22 0701 	bic.w	r7, r2, r1
            Ebu =   BCu ^((~BCa)&  BCe );
 80056f8:	406a      	eors	r2, r5
            Ebo =   BCo ^((~BCu)&  BCa );
 80056fa:	4071      	eors	r1, r6
            Ebi =   BCi ^((~BCo)&  BCu );
 80056fc:	943c      	str	r4, [sp, #240]	; 0xf0
            Ebu =   BCu ^((~BCa)&  BCe );
 80056fe:	9230      	str	r2, [sp, #192]	; 0xc0
            Ebo =   BCo ^((~BCu)&  BCa );
 8005700:	ea2a 040c 	bic.w	r4, sl, ip

            Abo ^= Do;
 8005704:	9a12      	ldr	r2, [sp, #72]	; 0x48
            Ebu =   BCu ^((~BCa)&  BCe );
 8005706:	9331      	str	r3, [sp, #196]	; 0xc4
            Abo ^= Do;
 8005708:	9b07      	ldr	r3, [sp, #28]
            Ebo =   BCo ^((~BCu)&  BCa );
 800570a:	9118      	str	r1, [sp, #96]	; 0x60
            Ebi =   BCi ^((~BCo)&  BCu );
 800570c:	ea87 0708 	eor.w	r7, r7, r8
            Ebo =   BCo ^((~BCu)&  BCa );
 8005710:	ea84 010e 	eor.w	r1, r4, lr
            Abo ^= Do;
 8005714:	405a      	eors	r2, r3
            Ebi =   BCi ^((~BCo)&  BCu );
 8005716:	973b      	str	r7, [sp, #236]	; 0xec
            Ebo =   BCo ^((~BCu)&  BCa );
 8005718:	9119      	str	r1, [sp, #100]	; 0x64
            Abo ^= Do;
 800571a:	9b08      	ldr	r3, [sp, #32]
 800571c:	9913      	ldr	r1, [sp, #76]	; 0x4c
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
            Aka ^= Da;
 800571e:	9c21      	ldr	r4, [sp, #132]	; 0x84
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
 8005720:	9f38      	ldr	r7, [sp, #224]	; 0xe0
            Abo ^= Do;
 8005722:	4059      	eors	r1, r3
            BCa = ROL(Abo, 28);
 8005724:	ea4f 7c01 	mov.w	ip, r1, lsl #28
 8005728:	ea4c 1c12 	orr.w	ip, ip, r2, lsr #4
 800572c:	0712      	lsls	r2, r2, #28
 800572e:	ea42 1e11 	orr.w	lr, r2, r1, lsr #4
            Agu ^= Du;
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
            Aka ^= Da;
 8005736:	9920      	ldr	r1, [sp, #128]	; 0x80
            Agu ^= Du;
 8005738:	ea83 0802 	eor.w	r8, r3, r2
 800573c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800573e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005740:	ea83 0602 	eor.w	r6, r3, r2
            Aka ^= Da;
 8005744:	9a02      	ldr	r2, [sp, #8]
 8005746:	404a      	eors	r2, r1
 8005748:	9903      	ldr	r1, [sp, #12]
 800574a:	404c      	eors	r4, r1
            BCi = ROL(Aka,  3);
 800574c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005750:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8005754:	00d2      	lsls	r2, r2, #3
 8005756:	ea42 7454 	orr.w	r4, r2, r4, lsr #29
            Ame ^= De;
 800575a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800575c:	9a04      	ldr	r2, [sp, #16]
            BCe = ROL(Agu, 20);
 800575e:	0535      	lsls	r5, r6, #20
 8005760:	ea45 3518 	orr.w	r5, r5, r8, lsr #12
 8005764:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8005768:	ea48 3316 	orr.w	r3, r8, r6, lsr #12
            Ame ^= De;
 800576c:	4051      	eors	r1, r2
 800576e:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8005770:	9a05      	ldr	r2, [sp, #20]
            BCo = ROL(Ame, 45);
 8005772:	ea4f 48d1 	mov.w	r8, r1, lsr #19
            Ame ^= De;
 8005776:	4072      	eors	r2, r6
            BCo = ROL(Ame, 45);
 8005778:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 800577c:	0cd2      	lsrs	r2, r2, #19
 800577e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
            Asi ^= Di;
 8005782:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8005784:	ea8b 0601 	eor.w	r6, fp, r1
 8005788:	9906      	ldr	r1, [sp, #24]
 800578a:	4079      	eors	r1, r7
            BCu = ROL(Asi, 61);
 800578c:	08f7      	lsrs	r7, r6, #3
 800578e:	ea47 7741 	orr.w	r7, r7, r1, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 8005792:	ea24 0a03 	bic.w	sl, r4, r3
            BCu = ROL(Asi, 61);
 8005796:	08c9      	lsrs	r1, r1, #3
 8005798:	ea41 7146 	orr.w	r1, r1, r6, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 800579c:	ea8a 0a0e 	eor.w	sl, sl, lr
 80057a0:	ea29 0605 	bic.w	r6, r9, r5
 80057a4:	ea86 060c 	eor.w	r6, r6, ip
 80057a8:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
            Ege =   BCe ^((~BCi)&  BCo );
 80057ac:	ea28 0a04 	bic.w	sl, r8, r4
 80057b0:	ea8a 0a03 	eor.w	sl, sl, r3
            Ega =   BCa ^((~BCe)&  BCi );
 80057b4:	962d      	str	r6, [sp, #180]	; 0xb4
            Ege =   BCe ^((~BCi)&  BCo );
 80057b6:	ea22 0609 	bic.w	r6, r2, r9
 80057ba:	406e      	eors	r6, r5
 80057bc:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
            Egi =   BCi ^((~BCo)&  BCu );
 80057c0:	ea27 0a08 	bic.w	sl, r7, r8
 80057c4:	ea8a 0404 	eor.w	r4, sl, r4
            Ege =   BCe ^((~BCi)&  BCo );
 80057c8:	9613      	str	r6, [sp, #76]	; 0x4c
            Egi =   BCi ^((~BCo)&  BCu );
 80057ca:	ea21 0602 	bic.w	r6, r1, r2
 80057ce:	9420      	str	r4, [sp, #128]	; 0x80
 80057d0:	ea86 0409 	eor.w	r4, r6, r9
            Ego =   BCo ^((~BCu)&  BCa );
 80057d4:	ea2e 0607 	bic.w	r6, lr, r7
            Egu =   BCu ^((~BCa)&  BCe );
 80057d8:	ea23 0e0e 	bic.w	lr, r3, lr
 80057dc:	ea8e 0307 	eor.w	r3, lr, r7
 80057e0:	ea25 050c 	bic.w	r5, r5, ip
            Egi =   BCi ^((~BCo)&  BCu );
 80057e4:	9421      	str	r4, [sp, #132]	; 0x84
            Ego =   BCo ^((~BCu)&  BCa );
 80057e6:	ea2c 0401 	bic.w	r4, ip, r1
 80057ea:	4062      	eors	r2, r4
            Egu =   BCu ^((~BCa)&  BCe );
 80057ec:	931e      	str	r3, [sp, #120]	; 0x78
 80057ee:	ea85 0301 	eor.w	r3, r5, r1
            Ego =   BCo ^((~BCu)&  BCa );
 80057f2:	9238      	str	r2, [sp, #224]	; 0xe0
            Egu =   BCu ^((~BCa)&  BCe );
 80057f4:	931f      	str	r3, [sp, #124]	; 0x7c

            Abe ^= De;
 80057f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057f8:	9b04      	ldr	r3, [sp, #16]
 80057fa:	ea83 0902 	eor.w	r9, r3, r2
 80057fe:	9b05      	ldr	r3, [sp, #20]
 8005800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005802:	ea83 0502 	eor.w	r5, r3, r2
            BCa = ROL(Abe,  1);
            Agi ^= Di;
 8005806:	9b1a      	ldr	r3, [sp, #104]	; 0x68
            Ego =   BCo ^((~BCu)&  BCa );
 8005808:	ea86 0608 	eor.w	r6, r6, r8
            Agi ^= Di;
 800580c:	ea8b 0203 	eor.w	r2, fp, r3
            Ego =   BCo ^((~BCu)&  BCa );
 8005810:	9637      	str	r6, [sp, #220]	; 0xdc
            Agi ^= Di;
 8005812:	9b06      	ldr	r3, [sp, #24]
 8005814:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005816:	ea83 0701 	eor.w	r7, r3, r1
            BCe = ROL(Agi,  6);
 800581a:	01be      	lsls	r6, r7, #6
 800581c:	ea46 6692 	orr.w	r6, r6, r2, lsr #26
 8005820:	0192      	lsls	r2, r2, #6
 8005822:	ea42 6397 	orr.w	r3, r2, r7, lsr #26
            Ako ^= Do;
 8005826:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005828:	9a07      	ldr	r2, [sp, #28]
 800582a:	ea82 0701 	eor.w	r7, r2, r1
 800582e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005830:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Abe,  1);
 8005832:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8005836:	ea4c 7cd9 	orr.w	ip, ip, r9, lsr #31
            Ako ^= Do;
 800583a:	404a      	eors	r2, r1
            BCa = ROL(Abe,  1);
 800583c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            BCi = ROL(Ako, 25);
 8005840:	0679      	lsls	r1, r7, #25
            BCa = ROL(Abe,  1);
 8005842:	ea49 74d5 	orr.w	r4, r9, r5, lsr #31
            BCi = ROL(Ako, 25);
 8005846:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
            Amu ^= Du;
 800584a:	9d32      	ldr	r5, [sp, #200]	; 0xc8
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 800584c:	f8dd 90d0 	ldr.w	r9, [sp, #208]	; 0xd0
            BCi = ROL(Ako, 25);
 8005850:	ea4f 6842 	mov.w	r8, r2, lsl #25
            Amu ^= Du;
 8005854:	9a09      	ldr	r2, [sp, #36]	; 0x24
            BCi = ROL(Ako, 25);
 8005856:	ea48 18d7 	orr.w	r8, r8, r7, lsr #7
            Amu ^= Du;
 800585a:	4055      	eors	r5, r2
 800585c:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 800585e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005860:	407a      	eors	r2, r7
            BCo = ROL(Amu,  8);
 8005862:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 8005866:	ea4e 6e15 	orr.w	lr, lr, r5, lsr #24
 800586a:	022d      	lsls	r5, r5, #8
 800586c:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
            Asa ^= Da;
 8005870:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005872:	9a02      	ldr	r2, [sp, #8]
 8005874:	407a      	eors	r2, r7
 8005876:	9f03      	ldr	r7, [sp, #12]
 8005878:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Asa, 18);
 800587c:	ea4f 4789 	mov.w	r7, r9, lsl #18
 8005880:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 8005884:	ea21 0a03 	bic.w	sl, r1, r3
            BCu = ROL(Asa, 18);
 8005888:	0492      	lsls	r2, r2, #18
 800588a:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 800588e:	ea8a 0a04 	eor.w	sl, sl, r4
 8005892:	ea28 0906 	bic.w	r9, r8, r6
 8005896:	ea89 090c 	eor.w	r9, r9, ip
 800589a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
            Eke =   BCe ^((~BCi)&  BCo );
 800589e:	ea25 0a01 	bic.w	sl, r5, r1
 80058a2:	ea8a 0a03 	eor.w	sl, sl, r3
            Eka =   BCa ^((~BCe)&  BCi );
 80058a6:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
 80058aa:	ea23 0304 	bic.w	r3, r3, r4
            Eke =   BCe ^((~BCi)&  BCo );
 80058ae:	ea2e 0908 	bic.w	r9, lr, r8
 80058b2:	ea89 0906 	eor.w	r9, r9, r6
            Eku =   BCu ^((~BCa)&  BCe );
 80058b6:	4053      	eors	r3, r2
 80058b8:	ea26 060c 	bic.w	r6, r6, ip
            Eke =   BCe ^((~BCi)&  BCo );
 80058bc:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
            Eki =   BCi ^((~BCo)&  BCu );
 80058c0:	ea22 0a05 	bic.w	sl, r2, r5
 80058c4:	ea8a 0101 	eor.w	r1, sl, r1
            Eke =   BCe ^((~BCi)&  BCo );
 80058c8:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
            Eku =   BCu ^((~BCa)&  BCe );
 80058cc:	9334      	str	r3, [sp, #208]	; 0xd0
            Eki =   BCi ^((~BCo)&  BCu );
 80058ce:	ea27 090e 	bic.w	r9, r7, lr
            Eku =   BCu ^((~BCa)&  BCe );
 80058d2:	ea86 0307 	eor.w	r3, r6, r7
            Eki =   BCi ^((~BCo)&  BCu );
 80058d6:	910e      	str	r1, [sp, #56]	; 0x38
            Eku =   BCu ^((~BCa)&  BCe );
 80058d8:	933d      	str	r3, [sp, #244]	; 0xf4
            Eki =   BCi ^((~BCo)&  BCu );
 80058da:	ea89 0108 	eor.w	r1, r9, r8

            Abu ^= Du;
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
            Eki =   BCi ^((~BCo)&  BCu );
 80058e0:	910f      	str	r1, [sp, #60]	; 0x3c
            Eko =   BCo ^((~BCu)&  BCa );
 80058e2:	ea24 0802 	bic.w	r8, r4, r2
            Abu ^= Du;
 80058e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
            Eko =   BCo ^((~BCu)&  BCa );
 80058e8:	ea2c 0107 	bic.w	r1, ip, r7
            Abu ^= Du;
 80058ec:	ea83 0702 	eor.w	r7, r3, r2
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058f4:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Abu, 27);
            Aga ^= Da;
 80058f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058fa:	9b02      	ldr	r3, [sp, #8]
            Eko =   BCo ^((~BCu)&  BCa );
 80058fc:	ea81 010e 	eor.w	r1, r1, lr
            Aga ^= Da;
 8005900:	4053      	eors	r3, r2
            Eko =   BCo ^((~BCu)&  BCa );
 8005902:	9127      	str	r1, [sp, #156]	; 0x9c
            Aga ^= Da;
 8005904:	9a03      	ldr	r2, [sp, #12]
 8005906:	9917      	ldr	r1, [sp, #92]	; 0x5c
            BCa = ROL(Abu, 27);
 8005908:	ea4f 6ec6 	mov.w	lr, r6, lsl #27
 800590c:	ea4e 1e57 	orr.w	lr, lr, r7, lsr #5
 8005910:	06ff      	lsls	r7, r7, #27
 8005912:	ea47 1c56 	orr.w	ip, r7, r6, lsr #5
            Aga ^= Da;
 8005916:	4051      	eors	r1, r2
            BCe = ROL(Aga, 36);
 8005918:	0f1e      	lsrs	r6, r3, #28
 800591a:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 800591e:	ea88 0505 	eor.w	r5, r8, r5
            BCe = ROL(Aga, 36);
 8005922:	0f09      	lsrs	r1, r1, #28
 8005924:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 8005928:	9526      	str	r5, [sp, #152]	; 0x98
            Ake ^= De;
 800592a:	9b04      	ldr	r3, [sp, #16]
 800592c:	9a22      	ldr	r2, [sp, #136]	; 0x88
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
 800592e:	9f39      	ldr	r7, [sp, #228]	; 0xe4
            Ake ^= De;
 8005930:	ea83 0402 	eor.w	r4, r3, r2
 8005934:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005936:	9b05      	ldr	r3, [sp, #20]
 8005938:	ea83 0502 	eor.w	r5, r3, r2
            BCi = ROL(Ake, 10);
 800593c:	ea4f 2885 	mov.w	r8, r5, lsl #10
 8005940:	ea48 5894 	orr.w	r8, r8, r4, lsr #22
 8005944:	02a4      	lsls	r4, r4, #10
 8005946:	ea44 5595 	orr.w	r5, r4, r5, lsr #22
            Ami ^= Di;
 800594a:	9a06      	ldr	r2, [sp, #24]
 800594c:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 800594e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005950:	4054      	eors	r4, r2
 8005952:	ea8b 0303 	eor.w	r3, fp, r3
            BCo = ROL(Ami, 15);
 8005956:	03e2      	lsls	r2, r4, #15
 8005958:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 800595c:	03db      	lsls	r3, r3, #15
 800595e:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
            Aso ^= Do;
 8005962:	9c07      	ldr	r4, [sp, #28]
 8005964:	ea84 0907 	eor.w	r9, r4, r7
 8005968:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 800596a:	9c08      	ldr	r4, [sp, #32]
 800596c:	407c      	eors	r4, r7
            BCu = ROL(Aso, 56);
 800596e:	ea4f 2719 	mov.w	r7, r9, lsr #8
 8005972:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8005976:	ea25 0a06 	bic.w	sl, r5, r6
            BCu = ROL(Aso, 56);
 800597a:	0a24      	lsrs	r4, r4, #8
 800597c:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8005980:	ea8a 0a0c 	eor.w	sl, sl, ip
 8005984:	ea28 0901 	bic.w	r9, r8, r1
 8005988:	ea89 090e 	eor.w	r9, r9, lr
 800598c:	f8cd a0e4 	str.w	sl, [sp, #228]	; 0xe4
            Eme =   BCe ^((~BCi)&  BCo );
 8005990:	ea23 0a05 	bic.w	sl, r3, r5
 8005994:	ea8a 0a06 	eor.w	sl, sl, r6
            Ema =   BCa ^((~BCe)&  BCi );
 8005998:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
            Eme =   BCe ^((~BCi)&  BCo );
 800599c:	ea22 0908 	bic.w	r9, r2, r8
 80059a0:	ea89 0901 	eor.w	r9, r9, r1
 80059a4:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
            Emi =   BCi ^((~BCo)&  BCu );
 80059a8:	ea27 0a03 	bic.w	sl, r7, r3
 80059ac:	ea8a 0505 	eor.w	r5, sl, r5
            Eme =   BCe ^((~BCi)&  BCo );
 80059b0:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
            Emi =   BCi ^((~BCo)&  BCu );
 80059b4:	ea24 0902 	bic.w	r9, r4, r2
 80059b8:	952e      	str	r5, [sp, #184]	; 0xb8
 80059ba:	ea89 0508 	eor.w	r5, r9, r8
            Emo =   BCo ^((~BCu)&  BCa );
 80059be:	ea2c 0807 	bic.w	r8, ip, r7
 80059c2:	ea88 0303 	eor.w	r3, r8, r3
            Emi =   BCi ^((~BCo)&  BCu );
 80059c6:	952f      	str	r5, [sp, #188]	; 0xbc
            Emo =   BCo ^((~BCu)&  BCa );
 80059c8:	ea2e 0504 	bic.w	r5, lr, r4
            Emu =   BCu ^((~BCa)&  BCe );
 80059cc:	ea26 0c0c 	bic.w	ip, r6, ip
            Emo =   BCo ^((~BCu)&  BCa );
 80059d0:	9314      	str	r3, [sp, #80]	; 0x50
 80059d2:	ea85 0302 	eor.w	r3, r5, r2
            Emu =   BCu ^((~BCa)&  BCe );
 80059d6:	ea21 010e 	bic.w	r1, r1, lr
            Emo =   BCo ^((~BCu)&  BCa );
 80059da:	9315      	str	r3, [sp, #84]	; 0x54
            Emu =   BCu ^((~BCa)&  BCe );
 80059dc:	ea8c 0307 	eor.w	r3, ip, r7
 80059e0:	9322      	str	r3, [sp, #136]	; 0x88
 80059e2:	ea81 0304 	eor.w	r3, r1, r4
 80059e6:	9323      	str	r3, [sp, #140]	; 0x8c

            Abi ^= Di;
 80059e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059ec:	ea8b 0903 	eor.w	r9, fp, r3
 80059f0:	9b06      	ldr	r3, [sp, #24]
 80059f2:	ea83 0a02 	eor.w	sl, r3, r2
            BCa = ROL(Abi, 62);
            Ago ^= Do;
 80059f6:	9b07      	ldr	r3, [sp, #28]
 80059f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80059fa:	ea83 0c02 	eor.w	ip, r3, r2
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005a02:	ea83 0702 	eor.w	r7, r3, r2
            BCe = ROL(Ago, 55);
            Aku ^= Du;
 8005a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a08:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005a0a:	ea83 0402 	eor.w	r4, r3, r2
 8005a0e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a12:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Aku, 39);
            Ama ^= Da;
 8005a16:	9b02      	ldr	r3, [sp, #8]
 8005a18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            BCa = ROL(Abi, 62);
 8005a1a:	ea4f 0699 	mov.w	r6, r9, lsr #2
            Ama ^= Da;
 8005a1e:	ea83 0b02 	eor.w	fp, r3, r2
            BCe = ROL(Ago, 55);
 8005a22:	ea4f 2e5c 	mov.w	lr, ip, lsr #9
            Ama ^= Da;
 8005a26:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005a28:	9b03      	ldr	r3, [sp, #12]
            BCa = ROL(Abi, 62);
 8005a2a:	ea46 768a 	orr.w	r6, r6, sl, lsl #30
            BCe = ROL(Ago, 55);
 8005a2e:	ea4e 5ec7 	orr.w	lr, lr, r7, lsl #23
            BCa = ROL(Abi, 62);
 8005a32:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
            BCe = ROL(Ago, 55);
 8005a36:	0a7f      	lsrs	r7, r7, #9
 8005a38:	ea47 55cc 	orr.w	r5, r7, ip, lsl #23
            BCa = ROL(Abi, 62);
 8005a3c:	ea4a 7989 	orr.w	r9, sl, r9, lsl #30
            BCi = ROL(Aku, 39);
 8005a40:	ea4f 6c54 	mov.w	ip, r4, lsr #25
            Ama ^= Da;
 8005a44:	ea83 0a02 	eor.w	sl, r3, r2
            BCo = ROL(Ama, 41);
            Ase ^= De;
 8005a48:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8005a4a:	9b04      	ldr	r3, [sp, #16]
            BCi = ROL(Aku, 39);
 8005a4c:	ea4c 1cc1 	orr.w	ip, ip, r1, lsl #7
            BCo = ROL(Ama, 41);
 8005a50:	ea4f 57da 	mov.w	r7, sl, lsr #23
            BCi = ROL(Aku, 39);
 8005a54:	0e49      	lsrs	r1, r1, #25
 8005a56:	ea41 18c4 	orr.w	r8, r1, r4, lsl #7
            BCo = ROL(Ama, 41);
 8005a5a:	ea47 274b 	orr.w	r7, r7, fp, lsl #9
 8005a5e:	ea4f 51db 	mov.w	r1, fp, lsr #23
            Ase ^= De;
 8005a62:	ea83 0b02 	eor.w	fp, r3, r2
 8005a66:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8005a68:	9b05      	ldr	r3, [sp, #20]
            BCo = ROL(Ama, 41);
 8005a6a:	ea41 214a 	orr.w	r1, r1, sl, lsl #9
            Ase ^= De;
 8005a6e:	ea83 0a02 	eor.w	sl, r3, r2
            BCu = ROL(Ase,  2);
 8005a72:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005a76:	ea43 729a 	orr.w	r2, r3, sl, lsr #30
            Esa =   BCa ^((~BCe)&  BCi );
 8005a7a:	ea28 0305 	bic.w	r3, r8, r5
 8005a7e:	ea83 0309 	eor.w	r3, r3, r9
            BCu = ROL(Ase,  2);
 8005a82:	ea4f 048a 	mov.w	r4, sl, lsl #2
            Esa =   BCa ^((~BCe)&  BCi );
 8005a86:	ea2c 0a0e 	bic.w	sl, ip, lr
 8005a8a:	ea8a 0a06 	eor.w	sl, sl, r6
 8005a8e:	9329      	str	r3, [sp, #164]	; 0xa4
            Ese =   BCe ^((~BCi)&  BCo );
 8005a90:	ea21 030c 	bic.w	r3, r1, ip
            Esa =   BCa ^((~BCe)&  BCi );
 8005a94:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
            Ese =   BCe ^((~BCi)&  BCo );
 8005a98:	ea83 030e 	eor.w	r3, r3, lr
 8005a9c:	ea27 0a08 	bic.w	sl, r7, r8
            BCu = ROL(Ase,  2);
 8005aa0:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
            Ese =   BCe ^((~BCi)&  BCo );
 8005aa4:	9335      	str	r3, [sp, #212]	; 0xd4
 8005aa6:	ea8a 0305 	eor.w	r3, sl, r5
 8005aaa:	9336      	str	r3, [sp, #216]	; 0xd8
            Esi =   BCi ^((~BCo)&  BCu );
 8005aac:	ea24 0307 	bic.w	r3, r4, r7
 8005ab0:	ea83 0308 	eor.w	r3, r3, r8
 8005ab4:	931d      	str	r3, [sp, #116]	; 0x74
            Eso =   BCo ^((~BCu)&  BCa );
 8005ab6:	ea29 0304 	bic.w	r3, r9, r4
 8005aba:	407b      	eors	r3, r7
 8005abc:	932b      	str	r3, [sp, #172]	; 0xac
            Esu =   BCu ^((~BCa)&  BCe );
 8005abe:	ea2e 0306 	bic.w	r3, lr, r6
            Esi =   BCi ^((~BCo)&  BCu );
 8005ac2:	ea22 0a01 	bic.w	sl, r2, r1
            Esu =   BCu ^((~BCa)&  BCe );
 8005ac6:	ea25 0909 	bic.w	r9, r5, r9
 8005aca:	4053      	eors	r3, r2
            Esi =   BCi ^((~BCo)&  BCu );
 8005acc:	ea8a 0c0c 	eor.w	ip, sl, ip
            Esu =   BCu ^((~BCa)&  BCe );
 8005ad0:	9310      	str	r3, [sp, #64]	; 0x40
 8005ad2:	ea89 0304 	eor.w	r3, r9, r4
            Esi =   BCi ^((~BCo)&  BCu );
 8005ad6:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
            Esu =   BCu ^((~BCa)&  BCe );
 8005ada:	9311      	str	r3, [sp, #68]	; 0x44
            Eso =   BCo ^((~BCu)&  BCa );
 8005adc:	ea26 0c02 	bic.w	ip, r6, r2

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8005ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ae2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            Eso =   BCo ^((~BCu)&  BCa );
 8005ae4:	ea8c 0101 	eor.w	r1, ip, r1
 8005ae8:	912a      	str	r1, [sp, #168]	; 0xa8
            BCa = Eba^Ega^Eka^Ema^Esa;
 8005aea:	405a      	eors	r2, r3
 8005aec:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8005aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af0:	ea83 0601 	eor.w	r6, r3, r1
 8005af4:	991a      	ldr	r1, [sp, #104]	; 0x68
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8005af6:	9b24      	ldr	r3, [sp, #144]	; 0x90
            BCa = Eba^Ega^Eka^Ema^Esa;
 8005af8:	404a      	eors	r2, r1
 8005afa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005afc:	404e      	eors	r6, r1
 8005afe:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8005b00:	404a      	eors	r2, r1
 8005b02:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8005b04:	404e      	eors	r6, r1
 8005b06:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8005b08:	404a      	eors	r2, r1
 8005b0a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005b0c:	404e      	eors	r6, r1
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8005b0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b10:	ea83 0901 	eor.w	r9, r3, r1
 8005b14:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005b16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005b18:	ea83 0801 	eor.w	r8, r3, r1
 8005b1c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8005b1e:	9920      	ldr	r1, [sp, #128]	; 0x80
            BCo = Ebo^Ego^Eko^Emo^Eso;
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005b20:	f8dd e0f4 	ldr.w	lr, [sp, #244]	; 0xf4
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8005b24:	ea89 0903 	eor.w	r9, r9, r3
 8005b28:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8005b2a:	ea88 0803 	eor.w	r8, r8, r3
 8005b2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b30:	ea89 0903 	eor.w	r9, r9, r3
 8005b34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b36:	ea88 0803 	eor.w	r8, r8, r3
 8005b3a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8005b3c:	ea89 0903 	eor.w	r9, r9, r3
 8005b40:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8005b42:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8005b46:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8005b48:	ea83 0c01 	eor.w	ip, r3, r1
 8005b4c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8005b4e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8005b50:	ea83 0701 	eor.w	r7, r3, r1
 8005b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b58:	ea8c 0c03 	eor.w	ip, ip, r3
 8005b5c:	404f      	eors	r7, r1
 8005b5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8005b60:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8005b62:	ea8c 0c03 	eor.w	ip, ip, r3
 8005b66:	404f      	eors	r7, r1
 8005b68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005b6a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005b6c:	ea8c 0c03 	eor.w	ip, ip, r3
 8005b70:	404f      	eors	r7, r1
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8005b72:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005b74:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8005b76:	ea83 0501 	eor.w	r5, r3, r1
 8005b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b7c:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8005b7e:	ea83 0401 	eor.w	r4, r3, r1
 8005b82:	9926      	ldr	r1, [sp, #152]	; 0x98
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005b84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8005b86:	404d      	eors	r5, r1
 8005b88:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8005b8a:	404c      	eors	r4, r1
 8005b8c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005b8e:	404d      	eors	r5, r1
 8005b90:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005b92:	404c      	eors	r4, r1
 8005b94:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8005b96:	404d      	eors	r5, r1
 8005b98:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005b9a:	404c      	eors	r4, r1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005b9c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8005b9e:	4059      	eors	r1, r3
 8005ba0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ba2:	ea83 0e0e 	eor.w	lr, r3, lr
 8005ba6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005ba8:	4059      	eors	r1, r3
 8005baa:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005bac:	ea8e 0e03 	eor.w	lr, lr, r3
 8005bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb2:	4059      	eors	r1, r3
 8005bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bb6:	ea8e 0e03 	eor.w	lr, lr, r3
 8005bba:	9b10      	ldr	r3, [sp, #64]	; 0x40

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8005bbc:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005bc0:	4059      	eors	r1, r3
 8005bc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
            Da = BCu^ROL(BCe, 1);
 8005bc4:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8005bc8:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005bcc:	ea8e 0e03 	eor.w	lr, lr, r3
            Da = BCu^ROL(BCe, 1);
 8005bd0:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 8005bd4:	ea8b 0301 	eor.w	r3, fp, r1
            De = BCa^ROL(BCi, 1);
 8005bd8:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
            Da = BCu^ROL(BCe, 1);
 8005bdc:	9302      	str	r3, [sp, #8]
            De = BCa^ROL(BCi, 1);
 8005bde:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
            Da = BCu^ROL(BCe, 1);
 8005be2:	ea8a 030e 	eor.w	r3, sl, lr
            De = BCa^ROL(BCi, 1);
 8005be6:	ea4f 0a47 	mov.w	sl, r7, lsl #1
            Da = BCu^ROL(BCe, 1);
 8005bea:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 8005bec:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8005bf0:	ea8b 0302 	eor.w	r3, fp, r2
            Di = BCe^ROL(BCo, 1);
 8005bf4:	ea4f 0b45 	mov.w	fp, r5, lsl #1
            De = BCa^ROL(BCi, 1);
 8005bf8:	9304      	str	r3, [sp, #16]
            Di = BCe^ROL(BCo, 1);
 8005bfa:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 8005bfe:	ea8a 0306 	eor.w	r3, sl, r6
            Di = BCe^ROL(BCo, 1);
 8005c02:	ea4f 0a44 	mov.w	sl, r4, lsl #1
            De = BCa^ROL(BCi, 1);
 8005c06:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 8005c08:	ea4a 7ad5 	orr.w	sl, sl, r5, lsr #31
 8005c0c:	ea8b 0309 	eor.w	r3, fp, r9
 8005c10:	9306      	str	r3, [sp, #24]
 8005c12:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 8005c16:	ea4f 084e 	mov.w	r8, lr, lsl #1
 8005c1a:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 8005c1e:	0049      	lsls	r1, r1, #1
 8005c20:	ea41 71de 	orr.w	r1, r1, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 8005c24:	9307      	str	r3, [sp, #28]
            Do = BCi^ROL(BCu, 1);
 8005c26:	ea81 030c 	eor.w	r3, r1, ip
 8005c2a:	9308      	str	r3, [sp, #32]
 8005c2c:	ea88 0307 	eor.w	r3, r8, r7
            Du = BCo^ROL(BCa, 1);
 8005c30:	0077      	lsls	r7, r6, #1
 8005c32:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 8005c36:	0052      	lsls	r2, r2, #1
 8005c38:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
            Do = BCi^ROL(BCu, 1);
 8005c3c:	9309      	str	r3, [sp, #36]	; 0x24
            Du = BCo^ROL(BCa, 1);
 8005c3e:	ea82 0305 	eor.w	r3, r2, r5
 8005c42:	930a      	str	r3, [sp, #40]	; 0x28
 8005c44:	ea87 0304 	eor.w	r3, r7, r4

            Eba ^= Da;
 8005c48:	9a02      	ldr	r2, [sp, #8]
            Du = BCo^ROL(BCa, 1);
 8005c4a:	930b      	str	r3, [sp, #44]	; 0x2c
            Eba ^= Da;
 8005c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c4e:	ea83 0702 	eor.w	r7, r3, r2
 8005c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c54:	9a03      	ldr	r2, [sp, #12]
 8005c56:	ea83 0b02 	eor.w	fp, r3, r2
            BCa = Eba;
            Ege ^= De;
 8005c5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c5c:	9a04      	ldr	r2, [sp, #16]
 8005c5e:	ea83 0a02 	eor.w	sl, r3, r2
 8005c62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c64:	9a05      	ldr	r2, [sp, #20]
            BCe = ROL(Ege, 44);
 8005c66:	ea4f 541a 	mov.w	r4, sl, lsr #20
            Ege ^= De;
 8005c6a:	ea83 0602 	eor.w	r6, r3, r2
            Eki ^= Di;
 8005c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c70:	9a06      	ldr	r2, [sp, #24]
            BCe = ROL(Ege, 44);
 8005c72:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
 8005c76:	0d36      	lsrs	r6, r6, #20
 8005c78:	ea46 360a 	orr.w	r6, r6, sl, lsl #12
            Eki ^= Di;
 8005c7c:	ea83 0a02 	eor.w	sl, r3, r2
 8005c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c82:	9a07      	ldr	r2, [sp, #28]
 8005c84:	ea83 0902 	eor.w	r9, r3, r2
            BCi = ROL(Eki, 43);
            Emo ^= Do;
 8005c88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c8a:	9a08      	ldr	r2, [sp, #32]
 8005c8c:	ea83 0c02 	eor.w	ip, r3, r2
 8005c90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c94:	ea83 0502 	eor.w	r5, r3, r2
            BCo = ROL(Emo, 21);
 8005c98:	ea4f 524c 	mov.w	r2, ip, lsl #21
 8005c9c:	ea42 22d5 	orr.w	r2, r2, r5, lsr #11
            Esu ^= Du;
 8005ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            BCo = ROL(Emo, 21);
 8005ca2:	ea4f 5e45 	mov.w	lr, r5, lsl #21
            Esu ^= Du;
 8005ca6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ca8:	405d      	eors	r5, r3
            BCo = ROL(Emo, 21);
 8005caa:	ea4e 2edc 	orr.w	lr, lr, ip, lsr #11
            Esu ^= Du;
 8005cae:	462b      	mov	r3, r5
 8005cb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005cb2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8005cb6:	ea85 050c 	eor.w	r5, r5, ip
            BCu = ROL(Esu, 14);
 8005cba:	ea4f 3c85 	mov.w	ip, r5, lsl #14
 8005cbe:	ea4c 4c93 	orr.w	ip, ip, r3, lsr #18
 8005cc2:	039b      	lsls	r3, r3, #14
 8005cc4:	ea43 4395 	orr.w	r3, r3, r5, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005cc8:	9d01      	ldr	r5, [sp, #4]
 8005cca:	68ad      	ldr	r5, [r5, #8]
 8005ccc:	950c      	str	r5, [sp, #48]	; 0x30
 8005cce:	9d01      	ldr	r5, [sp, #4]
            BCi = ROL(Eki, 43);
 8005cd0:	ea4f 585a 	mov.w	r8, sl, lsr #21
 8005cd4:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005cd8:	68ed      	ldr	r5, [r5, #12]
            BCi = ROL(Eki, 43);
 8005cda:	ea4f 5959 	mov.w	r9, r9, lsr #21
 8005cde:	ea49 21ca 	orr.w	r1, r9, sl, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005ce2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8005ce6:	ea28 0a04 	bic.w	sl, r8, r4
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005cea:	ea8b 0505 	eor.w	r5, fp, r5
 8005cee:	950d      	str	r5, [sp, #52]	; 0x34
 8005cf0:	ea87 0909 	eor.w	r9, r7, r9
            Aba =   BCa ^((~BCe)&  BCi );
 8005cf4:	4655      	mov	r5, sl
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005cf6:	ea89 0905 	eor.w	r9, r9, r5
 8005cfa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005cfc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8005d00:	ea21 0a06 	bic.w	sl, r1, r6
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005d04:	ea85 050a 	eor.w	r5, r5, sl
 8005d08:	950d      	str	r5, [sp, #52]	; 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 8005d0a:	ea2e 0501 	bic.w	r5, lr, r1
 8005d0e:	4075      	eors	r5, r6
 8005d10:	ea22 0908 	bic.w	r9, r2, r8
 8005d14:	950f      	str	r5, [sp, #60]	; 0x3c
            Abi =   BCi ^((~BCo)&  BCu );
 8005d16:	ea2c 050e 	bic.w	r5, ip, lr
            Abe =   BCe ^((~BCi)&  BCo );
 8005d1a:	ea89 0904 	eor.w	r9, r9, r4
            Abi =   BCi ^((~BCo)&  BCu );
 8005d1e:	4069      	eors	r1, r5
            Abo =   BCo ^((~BCu)&  BCa );
 8005d20:	ea27 0503 	bic.w	r5, r7, r3
            Abu =   BCu ^((~BCa)&  BCe );
 8005d24:	ea24 0707 	bic.w	r7, r4, r7
 8005d28:	ea26 060b 	bic.w	r6, r6, fp
            Abe =   BCe ^((~BCi)&  BCo );
 8005d2c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
            Abi =   BCi ^((~BCo)&  BCu );
 8005d30:	9111      	str	r1, [sp, #68]	; 0x44
 8005d32:	ea23 0902 	bic.w	r9, r3, r2
            Abo =   BCo ^((~BCu)&  BCa );
 8005d36:	ea2b 010c 	bic.w	r1, fp, ip
 8005d3a:	406a      	eors	r2, r5
            Abu =   BCu ^((~BCa)&  BCe );
 8005d3c:	407b      	eors	r3, r7
            Abo =   BCo ^((~BCu)&  BCa );
 8005d3e:	9212      	str	r2, [sp, #72]	; 0x48
            Abu =   BCu ^((~BCa)&  BCe );
 8005d40:	9314      	str	r3, [sp, #80]	; 0x50
            Abo =   BCo ^((~BCu)&  BCa );
 8005d42:	ea81 020e 	eor.w	r2, r1, lr
            Abu =   BCu ^((~BCa)&  BCe );
 8005d46:	ea86 030c 	eor.w	r3, r6, ip
            Abo =   BCo ^((~BCu)&  BCa );
 8005d4a:	9213      	str	r2, [sp, #76]	; 0x4c
            Abu =   BCu ^((~BCa)&  BCe );
 8005d4c:	9315      	str	r3, [sp, #84]	; 0x54

            Ebo ^= Do;
 8005d4e:	9a08      	ldr	r2, [sp, #32]
 8005d50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005d52:	ea83 0102 	eor.w	r1, r3, r2
 8005d56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d5a:	ea83 0e02 	eor.w	lr, r3, r2
            BCa = ROL(Ebo, 28);
 8005d5e:	ea4f 7b0e 	mov.w	fp, lr, lsl #28
            Egu ^= Du;
 8005d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            BCa = ROL(Ebo, 28);
 8005d66:	ea4b 1b11 	orr.w	fp, fp, r1, lsr #4
 8005d6a:	0709      	lsls	r1, r1, #28
 8005d6c:	ea41 141e 	orr.w	r4, r1, lr, lsr #4
            Egu ^= Du;
 8005d70:	ea83 0e02 	eor.w	lr, r3, r2
 8005d74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d78:	ea83 0502 	eor.w	r5, r3, r2
            BCe = ROL(Egu, 20);
            Eka ^= Da;
 8005d7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005d7e:	9a02      	ldr	r2, [sp, #8]
            BCe = ROL(Egu, 20);
 8005d80:	052e      	lsls	r6, r5, #20
            Eka ^= Da;
 8005d82:	ea83 0a02 	eor.w	sl, r3, r2
 8005d86:	9a03      	ldr	r2, [sp, #12]
 8005d88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            BCe = ROL(Egu, 20);
 8005d8a:	ea46 361e 	orr.w	r6, r6, lr, lsr #12
            Abi =   BCi ^((~BCo)&  BCu );
 8005d8e:	ea89 0808 	eor.w	r8, r9, r8
            BCe = ROL(Egu, 20);
 8005d92:	ea4f 5e0e 	mov.w	lr, lr, lsl #20
 8005d96:	ea4e 3115 	orr.w	r1, lr, r5, lsr #12
            Eka ^= Da;
 8005d9a:	ea83 0902 	eor.w	r9, r3, r2
            Abi =   BCi ^((~BCo)&  BCu );
 8005d9e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
            BCi = ROL(Eka, 3);
            Eme ^= De;
 8005da2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005da4:	9d04      	ldr	r5, [sp, #16]
 8005da6:	f8dd c014 	ldr.w	ip, [sp, #20]
            BCo = ROL(Eme, 45);
            Esi ^= Di;
 8005daa:	f8dd e01c 	ldr.w	lr, [sp, #28]
            Eme ^= De;
 8005dae:	406b      	eors	r3, r5
            BCi = ROL(Eka, 3);
 8005db0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
            Eme ^= De;
 8005db4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
            BCi = ROL(Eka, 3);
 8005db6:	ea47 775a 	orr.w	r7, r7, sl, lsr #29
 8005dba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005dbe:	ea4a 7259 	orr.w	r2, sl, r9, lsr #29
            Eme ^= De;
 8005dc2:	ea85 090c 	eor.w	r9, r5, ip
            BCo = ROL(Eme, 45);
 8005dc6:	0cdd      	lsrs	r5, r3, #19
 8005dc8:	ea45 3549 	orr.w	r5, r5, r9, lsl #13
 8005dcc:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8005dd0:	ea49 3a43 	orr.w	sl, r9, r3, lsl #13
            Esi ^= Di;
 8005dd4:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005dd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005dda:	ea83 0c0c 	eor.w	ip, r3, ip
 8005dde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            BCu = ROL(Esi, 61);
 8005de0:	ea4f 08dc 	mov.w	r8, ip, lsr #3
            Esi ^= Di;
 8005de4:	ea83 030e 	eor.w	r3, r3, lr
            BCu = ROL(Esi, 61);
 8005de8:	ea48 7843 	orr.w	r8, r8, r3, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8005dec:	ea22 0e01 	bic.w	lr, r2, r1
            BCu = ROL(Esi, 61);
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	ea43 734c 	orr.w	r3, r3, ip, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8005df6:	ea8e 0e04 	eor.w	lr, lr, r4
 8005dfa:	ea27 0c06 	bic.w	ip, r7, r6
 8005dfe:	ea8c 0c0b 	eor.w	ip, ip, fp
 8005e02:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
            Age =   BCe ^((~BCi)&  BCo );
 8005e06:	ea25 0e02 	bic.w	lr, r5, r2
 8005e0a:	ea8e 0e01 	eor.w	lr, lr, r1
            Aga =   BCa ^((~BCe)&  BCi );
 8005e0e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
            Age =   BCe ^((~BCi)&  BCo );
 8005e12:	ea2a 0c07 	bic.w	ip, sl, r7
 8005e16:	ea8c 0c06 	eor.w	ip, ip, r6
 8005e1a:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
            Agi =   BCi ^((~BCo)&  BCu );
 8005e1e:	ea28 0e05 	bic.w	lr, r8, r5
 8005e22:	ea8e 0202 	eor.w	r2, lr, r2
            Age =   BCe ^((~BCi)&  BCo );
 8005e26:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
            Agi =   BCi ^((~BCo)&  BCu );
 8005e2a:	ea23 0c0a 	bic.w	ip, r3, sl
 8005e2e:	921a      	str	r2, [sp, #104]	; 0x68
 8005e30:	ea8c 0207 	eor.w	r2, ip, r7
 8005e34:	921b      	str	r2, [sp, #108]	; 0x6c
            Ago =   BCo ^((~BCu)&  BCa );
 8005e36:	ea2b 0203 	bic.w	r2, fp, r3
 8005e3a:	ea82 020a 	eor.w	r2, r2, sl
            Agu =   BCu ^((~BCa)&  BCe );
 8005e3e:	ea21 0104 	bic.w	r1, r1, r4
 8005e42:	ea26 060b 	bic.w	r6, r6, fp
 8005e46:	4073      	eors	r3, r6
            Ago =   BCo ^((~BCu)&  BCa );
 8005e48:	921d      	str	r2, [sp, #116]	; 0x74
            Agu =   BCu ^((~BCa)&  BCe );
 8005e4a:	ea81 0208 	eor.w	r2, r1, r8
 8005e4e:	921e      	str	r2, [sp, #120]	; 0x78
 8005e50:	931f      	str	r3, [sp, #124]	; 0x7c

            Ebe ^= De;
 8005e52:	9a04      	ldr	r2, [sp, #16]
 8005e54:	9b24      	ldr	r3, [sp, #144]	; 0x90
            Ago =   BCo ^((~BCu)&  BCa );
 8005e56:	ea24 0708 	bic.w	r7, r4, r8
 8005e5a:	407d      	eors	r5, r7
            Ebe ^= De;
 8005e5c:	ea83 0702 	eor.w	r7, r3, r2
 8005e60:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005e62:	9a05      	ldr	r2, [sp, #20]
            Ago =   BCo ^((~BCu)&  BCa );
 8005e64:	951c      	str	r5, [sp, #112]	; 0x70
            Ebe ^= De;
 8005e66:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
 8005e6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005e6c:	9a06      	ldr	r2, [sp, #24]
            BCa = ROL(Ebe, 1);
 8005e6e:	ea4f 0846 	mov.w	r8, r6, lsl #1
            Egi ^= Di;
 8005e72:	ea83 0402 	eor.w	r4, r3, r2
 8005e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e78:	9a07      	ldr	r2, [sp, #28]
            BCa = ROL(Ebe, 1);
 8005e7a:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 8005e7e:	007f      	lsls	r7, r7, #1
 8005e80:	ea47 7bd6 	orr.w	fp, r7, r6, lsr #31
            Egi ^= Di;
 8005e84:	ea83 0602 	eor.w	r6, r3, r2
            BCe = ROL(Egi, 6);
            Eko ^= Do;
 8005e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e8a:	9a08      	ldr	r2, [sp, #32]
 8005e8c:	ea83 0502 	eor.w	r5, r3, r2
 8005e90:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e94:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Eko, 25);
 8005e98:	066a      	lsls	r2, r5, #25
 8005e9a:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
            Emu ^= Du;
 8005e9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = ROL(Eko, 25);
 8005ea0:	ea4f 6a41 	mov.w	sl, r1, lsl #25
            Emu ^= Du;
 8005ea4:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCe = ROL(Egi, 6);
 8005ea6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
            Emu ^= Du;
 8005eaa:	ea83 0701 	eor.w	r7, r3, r1
 8005eae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCe = ROL(Egi, 6);
 8005eb2:	ea4c 6c94 	orr.w	ip, ip, r4, lsr #26
 8005eb6:	01a4      	lsls	r4, r4, #6
 8005eb8:	ea44 6996 	orr.w	r9, r4, r6, lsr #26
            Emu ^= Du;
 8005ebc:	ea83 0401 	eor.w	r4, r3, r1
            BCo = ROL(Emu, 8);
 8005ec0:	0221      	lsls	r1, r4, #8
 8005ec2:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
 8005ec6:	023f      	lsls	r7, r7, #8
 8005ec8:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
            Esa ^= Da;
 8005ecc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ece:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eko, 25);
 8005ed0:	ea4a 1ad5 	orr.w	sl, sl, r5, lsr #7
            Esa ^= Da;
 8005ed4:	4063      	eors	r3, r4
 8005ed6:	9d03      	ldr	r5, [sp, #12]
 8005ed8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005eda:	406c      	eors	r4, r5
            BCu = ROL(Esa, 18);
 8005edc:	ea4f 4e84 	mov.w	lr, r4, lsl #18
 8005ee0:	ea4e 3e93 	orr.w	lr, lr, r3, lsr #14
 8005ee4:	049b      	lsls	r3, r3, #18
 8005ee6:	ea43 3394 	orr.w	r3, r3, r4, lsr #14
            Aka =   BCa ^((~BCe)&  BCi );
 8005eea:	ea2a 040c 	bic.w	r4, sl, ip
 8005eee:	ea22 0509 	bic.w	r5, r2, r9
 8005ef2:	ea84 0408 	eor.w	r4, r4, r8
 8005ef6:	ea85 050b 	eor.w	r5, r5, fp
 8005efa:	9421      	str	r4, [sp, #132]	; 0x84
            Ake =   BCe ^((~BCi)&  BCo );
 8005efc:	ea27 0402 	bic.w	r4, r7, r2
 8005f00:	ea84 0409 	eor.w	r4, r4, r9
            Aka =   BCa ^((~BCe)&  BCi );
 8005f04:	9520      	str	r5, [sp, #128]	; 0x80
            Ake =   BCe ^((~BCi)&  BCo );
 8005f06:	ea21 050a 	bic.w	r5, r1, sl
 8005f0a:	9422      	str	r4, [sp, #136]	; 0x88
 8005f0c:	ea85 040c 	eor.w	r4, r5, ip
            Aki =   BCi ^((~BCo)&  BCu );
 8005f10:	ea23 0507 	bic.w	r5, r3, r7
 8005f14:	406a      	eors	r2, r5
            Ake =   BCe ^((~BCi)&  BCo );
 8005f16:	9423      	str	r4, [sp, #140]	; 0x8c
            Aki =   BCi ^((~BCo)&  BCu );
 8005f18:	ea2e 0401 	bic.w	r4, lr, r1
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
 8005f1c:	ea29 090b 	bic.w	r9, r9, fp
            Aki =   BCi ^((~BCo)&  BCu );
 8005f20:	9224      	str	r2, [sp, #144]	; 0x90
 8005f22:	ea84 020a 	eor.w	r2, r4, sl
            Aku =   BCu ^((~BCa)&  BCe );
 8005f26:	ea2c 0c08 	bic.w	ip, ip, r8
            Ako =   BCo ^((~BCu)&  BCa );
 8005f2a:	ea2b 0403 	bic.w	r4, fp, r3
            Aki =   BCi ^((~BCo)&  BCu );
 8005f2e:	9225      	str	r2, [sp, #148]	; 0x94
            Aku =   BCu ^((~BCa)&  BCe );
 8005f30:	ea89 0303 	eor.w	r3, r9, r3
            Ako =   BCo ^((~BCu)&  BCa );
 8005f34:	ea28 020e 	bic.w	r2, r8, lr
 8005f38:	404a      	eors	r2, r1
            Aku =   BCu ^((~BCa)&  BCe );
 8005f3a:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f3c:	ea8c 030e 	eor.w	r3, ip, lr
            Ako =   BCo ^((~BCu)&  BCa );
 8005f40:	9227      	str	r2, [sp, #156]	; 0x9c
            Aku =   BCu ^((~BCa)&  BCe );
 8005f42:	9329      	str	r3, [sp, #164]	; 0xa4

            Ebu ^= Du;
 8005f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
            Eke ^= De;
 8005f48:	9905      	ldr	r1, [sp, #20]
            Ebu ^= Du;
 8005f4a:	ea83 0502 	eor.w	r5, r3, r2
 8005f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f50:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005f52:	4053      	eors	r3, r2
            BCa = ROL(Ebu, 27);
 8005f54:	ea4f 6bc3 	mov.w	fp, r3, lsl #27
 8005f58:	ea4b 1b55 	orr.w	fp, fp, r5, lsr #5
 8005f5c:	06ed      	lsls	r5, r5, #27
 8005f5e:	ea45 1c53 	orr.w	ip, r5, r3, lsr #5
            Ega ^= Da;
 8005f62:	9a02      	ldr	r2, [sp, #8]
 8005f64:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005f66:	ea83 0a02 	eor.w	sl, r3, r2
 8005f6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8005f6c:	9a03      	ldr	r2, [sp, #12]
 8005f6e:	ea83 0602 	eor.w	r6, r3, r2
            Eke ^= De;
 8005f72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8005f74:	9a04      	ldr	r2, [sp, #16]
 8005f76:	405a      	eors	r2, r3
 8005f78:	9b33      	ldr	r3, [sp, #204]	; 0xcc
            BCe = ROL(Ega, 36);
 8005f7a:	ea4f 7e1a 	mov.w	lr, sl, lsr #28
 8005f7e:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
            Eke ^= De;
 8005f82:	ea83 0901 	eor.w	r9, r3, r1
            BCe = ROL(Ega, 36);
 8005f86:	0f36      	lsrs	r6, r6, #28
 8005f88:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
            BCi = ROL(Eke, 10);
 8005f8c:	ea4f 2a89 	mov.w	sl, r9, lsl #10
 8005f90:	ea4a 5a92 	orr.w	sl, sl, r2, lsr #22
            Emi ^= Di;
 8005f94:	9906      	ldr	r1, [sp, #24]
            BCi = ROL(Eke, 10);
 8005f96:	0293      	lsls	r3, r2, #10
            Emi ^= Di;
 8005f98:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8005f9a:	ea82 0501 	eor.w	r5, r2, r1
 8005f9e:	9907      	ldr	r1, [sp, #28]
 8005fa0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            BCi = ROL(Eke, 10);
 8005fa2:	ea43 5399 	orr.w	r3, r3, r9, lsr #22
            Ako =   BCo ^((~BCu)&  BCa );
 8005fa6:	407c      	eors	r4, r7
            Emi ^= Di;
 8005fa8:	ea82 0901 	eor.w	r9, r2, r1
            Ako =   BCo ^((~BCu)&  BCa );
 8005fac:	9426      	str	r4, [sp, #152]	; 0x98
            BCo = ROL(Emi, 15);
            Eso ^= Do;
 8005fae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005fb0:	9908      	ldr	r1, [sp, #32]
            BCo = ROL(Emi, 15);
 8005fb2:	ea4f 34c9 	mov.w	r4, r9, lsl #15
 8005fb6:	ea44 4455 	orr.w	r4, r4, r5, lsr #17
 8005fba:	03ed      	lsls	r5, r5, #15
 8005fbc:	ea45 4859 	orr.w	r8, r5, r9, lsr #17
            Eso ^= Do;
 8005fc0:	4051      	eors	r1, r2
 8005fc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005fc4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            BCu = ROL(Eso, 56);
 8005fc6:	ea4f 2911 	mov.w	r9, r1, lsr #8
            Eso ^= Do;
 8005fca:	ea82 0705 	eor.w	r7, r2, r5
            BCu = ROL(Eso, 56);
 8005fce:	ea49 6907 	orr.w	r9, r9, r7, lsl #24
 8005fd2:	0a3f      	lsrs	r7, r7, #8
 8005fd4:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
            Ama =   BCa ^((~BCe)&  BCi );
 8005fd8:	ea23 010e 	bic.w	r1, r3, lr
 8005fdc:	ea2a 0206 	bic.w	r2, sl, r6
 8005fe0:	ea81 010c 	eor.w	r1, r1, ip
 8005fe4:	ea82 020b 	eor.w	r2, r2, fp
 8005fe8:	912a      	str	r1, [sp, #168]	; 0xa8
            Ame =   BCe ^((~BCi)&  BCo );
 8005fea:	ea28 0103 	bic.w	r1, r8, r3
 8005fee:	ea81 010e 	eor.w	r1, r1, lr
            Ama =   BCa ^((~BCe)&  BCi );
 8005ff2:	922b      	str	r2, [sp, #172]	; 0xac
            Ame =   BCe ^((~BCi)&  BCo );
 8005ff4:	ea24 020a 	bic.w	r2, r4, sl
 8005ff8:	4072      	eors	r2, r6
 8005ffa:	912c      	str	r1, [sp, #176]	; 0xb0
            Ami =   BCi ^((~BCo)&  BCu );
 8005ffc:	ea29 0108 	bic.w	r1, r9, r8
 8006000:	404b      	eors	r3, r1
            Ame =   BCe ^((~BCi)&  BCo );
 8006002:	922d      	str	r2, [sp, #180]	; 0xb4
            Ami =   BCi ^((~BCo)&  BCu );
 8006004:	ea27 0204 	bic.w	r2, r7, r4
            Amo =   BCo ^((~BCu)&  BCa );
 8006008:	ea2c 0109 	bic.w	r1, ip, r9
            Ami =   BCi ^((~BCo)&  BCu );
 800600c:	932e      	str	r3, [sp, #184]	; 0xb8
 800600e:	ea82 030a 	eor.w	r3, r2, sl
 8006012:	932f      	str	r3, [sp, #188]	; 0xbc
            Amo =   BCo ^((~BCu)&  BCa );
 8006014:	ea2b 0207 	bic.w	r2, fp, r7
 8006018:	ea81 0308 	eor.w	r3, r1, r8
            Amu =   BCu ^((~BCa)&  BCe );
 800601c:	ea2e 0c0c 	bic.w	ip, lr, ip
            Amo =   BCo ^((~BCu)&  BCa );
 8006020:	9330      	str	r3, [sp, #192]	; 0xc0
 8006022:	ea82 0304 	eor.w	r3, r2, r4
            Amu =   BCu ^((~BCa)&  BCe );
 8006026:	ea26 060b 	bic.w	r6, r6, fp
            Amo =   BCo ^((~BCu)&  BCa );
 800602a:	9331      	str	r3, [sp, #196]	; 0xc4
            Amu =   BCu ^((~BCa)&  BCe );
 800602c:	ea8c 0309 	eor.w	r3, ip, r9
 8006030:	9332      	str	r3, [sp, #200]	; 0xc8
 8006032:	ea86 0307 	eor.w	r3, r6, r7

            Ebi ^= Di;
 8006036:	9a06      	ldr	r2, [sp, #24]
            Amu =   BCu ^((~BCa)&  BCe );
 8006038:	9333      	str	r3, [sp, #204]	; 0xcc
            Ebi ^= Di;
 800603a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
 800603c:	9908      	ldr	r1, [sp, #32]
            Ebi ^= Di;
 800603e:	ea83 0902 	eor.w	r9, r3, r2
 8006042:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8006044:	9a07      	ldr	r2, [sp, #28]
 8006046:	ea83 0802 	eor.w	r8, r3, r2
            Ego ^= Do;
 800604a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
            BCa = ROL(Ebi, 62);
 800604c:	ea4f 0c99 	mov.w	ip, r9, lsr #2
            Ego ^= Do;
 8006050:	ea82 0601 	eor.w	r6, r2, r1
 8006054:	9a38      	ldr	r2, [sp, #224]	; 0xe0
            BCe = ROL(Ego, 55);
            Eku ^= Du;
 8006056:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCa = ROL(Ebi, 62);
 8006058:	ea4c 7c88 	orr.w	ip, ip, r8, lsl #30
 800605c:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8006060:	ea48 7389 	orr.w	r3, r8, r9, lsl #30
            Ego ^= Do;
 8006064:	ea82 0805 	eor.w	r8, r2, r5
            Eku ^= Du;
 8006068:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800606a:	ea82 0501 	eor.w	r5, r2, r1
 800606e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8006070:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCi = ROL(Eku, 39);
 8006072:	ea4f 6b55 	mov.w	fp, r5, lsr #25
            Eku ^= Du;
 8006076:	ea82 0401 	eor.w	r4, r2, r1
            BCi = ROL(Eku, 39);
 800607a:	ea4b 1bc4 	orr.w	fp, fp, r4, lsl #7
            Ema ^= Da;
 800607e:	9a39      	ldr	r2, [sp, #228]	; 0xe4
            BCi = ROL(Eku, 39);
 8006080:	0e61      	lsrs	r1, r4, #25
            Ema ^= Da;
 8006082:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eku, 39);
 8006084:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
            Ema ^= Da;
 8006088:	4062      	eors	r2, r4
 800608a:	9d03      	ldr	r5, [sp, #12]
 800608c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800608e:	ea84 0a05 	eor.w	sl, r4, r5
            BCo = ROL(Ema, 41);
 8006092:	ea4f 54da 	mov.w	r4, sl, lsr #23
 8006096:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
            Ese ^= De;
 800609a:	9d04      	ldr	r5, [sp, #16]
            BCo = ROL(Ema, 41);
 800609c:	0dd7      	lsrs	r7, r2, #23
            Ese ^= De;
 800609e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80060a0:	ea82 0905 	eor.w	r9, r2, r5
 80060a4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80060a6:	9d05      	ldr	r5, [sp, #20]
            BCe = ROL(Ego, 55);
 80060a8:	ea4f 2e56 	mov.w	lr, r6, lsr #9
 80060ac:	ea4e 5ec8 	orr.w	lr, lr, r8, lsl #23
            BCo = ROL(Ema, 41);
 80060b0:	ea47 274a 	orr.w	r7, r7, sl, lsl #9
            BCe = ROL(Ego, 55);
 80060b4:	ea4f 2858 	mov.w	r8, r8, lsr #9
            Ese ^= De;
 80060b8:	ea82 0a05 	eor.w	sl, r2, r5
            BCe = ROL(Ego, 55);
 80060bc:	ea48 58c6 	orr.w	r8, r8, r6, lsl #23
            BCu = ROL(Ese, 2);
 80060c0:	ea4f 068a 	mov.w	r6, sl, lsl #2
 80060c4:	ea46 7599 	orr.w	r5, r6, r9, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 80060c8:	ea2b 020e 	bic.w	r2, fp, lr
            BCu = ROL(Ese, 2);
 80060cc:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80060d0:	ea49 7a9a 	orr.w	sl, r9, sl, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 80060d4:	ea82 020c 	eor.w	r2, r2, ip
 80060d8:	ea21 0908 	bic.w	r9, r1, r8
 80060dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80060de:	ea89 0203 	eor.w	r2, r9, r3
 80060e2:	9234      	str	r2, [sp, #208]	; 0xd0
            Ase =   BCe ^((~BCi)&  BCo );
 80060e4:	ea27 060b 	bic.w	r6, r7, fp
 80060e8:	ea24 0201 	bic.w	r2, r4, r1
 80060ec:	ea86 060e 	eor.w	r6, r6, lr
 80060f0:	ea82 0208 	eor.w	r2, r2, r8
 80060f4:	9635      	str	r6, [sp, #212]	; 0xd4
 80060f6:	9236      	str	r2, [sp, #216]	; 0xd8
            Asi =   BCi ^((~BCo)&  BCu );
 80060f8:	ea2a 0607 	bic.w	r6, sl, r7
 80060fc:	ea25 0204 	bic.w	r2, r5, r4
 8006100:	404a      	eors	r2, r1
 8006102:	ea86 060b 	eor.w	r6, r6, fp
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
 8006106:	ea2e 0e0c 	bic.w	lr, lr, ip
            Asi =   BCi ^((~BCo)&  BCu );
 800610a:	9637      	str	r6, [sp, #220]	; 0xdc
 800610c:	9238      	str	r2, [sp, #224]	; 0xe0
            Asu =   BCu ^((~BCa)&  BCe );
 800610e:	ea28 0603 	bic.w	r6, r8, r3
            Aso =   BCo ^((~BCu)&  BCa );
 8006112:	ea23 0205 	bic.w	r2, r3, r5
            Asu =   BCu ^((~BCa)&  BCe );
 8006116:	ea8e 030a 	eor.w	r3, lr, sl
 800611a:	933b      	str	r3, [sp, #236]	; 0xec
        for( round = 0; round < NROUNDS; round += 2 )
 800611c:	9b01      	ldr	r3, [sp, #4]
 800611e:	3310      	adds	r3, #16
            Aso =   BCo ^((~BCu)&  BCa );
 8006120:	4062      	eors	r2, r4
        for( round = 0; round < NROUNDS; round += 2 )
 8006122:	9301      	str	r3, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 8006124:	923a      	str	r2, [sp, #232]	; 0xe8
        for( round = 0; round < NROUNDS; round += 2 )
 8006126:	4b40      	ldr	r3, [pc, #256]	; (8006228 <KeccakF1600_StatePermute+0xe58>)
 8006128:	9a01      	ldr	r2, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 800612a:	ea2c 090a 	bic.w	r9, ip, sl
 800612e:	ea89 0107 	eor.w	r1, r9, r7
        for( round = 0; round < NROUNDS; round += 2 )
 8006132:	4293      	cmp	r3, r2
            Aso =   BCo ^((~BCu)&  BCa );
 8006134:	9139      	str	r1, [sp, #228]	; 0xe4
            Asu =   BCu ^((~BCa)&  BCe );
 8006136:	ea86 0605 	eor.w	r6, r6, r5
        for( round = 0; round < NROUNDS; round += 2 )
 800613a:	f47f a9c7 	bne.w	80054cc <KeccakF1600_StatePermute+0xfc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 800613e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006140:	6003      	str	r3, [r0, #0]
 8006142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006144:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 8006146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006148:	6083      	str	r3, [r0, #8]
 800614a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800614c:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 800614e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006150:	6103      	str	r3, [r0, #16]
 8006152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006154:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 8006156:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006158:	6183      	str	r3, [r0, #24]
 800615a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800615c:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 800615e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006160:	6203      	str	r3, [r0, #32]
 8006162:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006164:	6243      	str	r3, [r0, #36]	; 0x24
        state[ 5] = Aga;
 8006166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006168:	6283      	str	r3, [r0, #40]	; 0x28
 800616a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800616c:	62c3      	str	r3, [r0, #44]	; 0x2c
        state[ 6] = Age;
 800616e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006170:	6303      	str	r3, [r0, #48]	; 0x30
 8006172:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006174:	6343      	str	r3, [r0, #52]	; 0x34
        state[ 7] = Agi;
 8006176:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006178:	6383      	str	r3, [r0, #56]	; 0x38
 800617a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800617c:	63c3      	str	r3, [r0, #60]	; 0x3c
        state[ 8] = Ago;
 800617e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006180:	6403      	str	r3, [r0, #64]	; 0x40
 8006182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006184:	6443      	str	r3, [r0, #68]	; 0x44
        state[ 9] = Agu;
 8006186:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006188:	6483      	str	r3, [r0, #72]	; 0x48
 800618a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800618c:	64c3      	str	r3, [r0, #76]	; 0x4c
        state[10] = Aka;
 800618e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006190:	6503      	str	r3, [r0, #80]	; 0x50
 8006192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006194:	6543      	str	r3, [r0, #84]	; 0x54
        state[11] = Ake;
 8006196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006198:	6583      	str	r3, [r0, #88]	; 0x58
 800619a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800619c:	65c3      	str	r3, [r0, #92]	; 0x5c
        state[12] = Aki;
 800619e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80061a0:	6603      	str	r3, [r0, #96]	; 0x60
 80061a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80061a4:	6643      	str	r3, [r0, #100]	; 0x64
        state[13] = Ako;
 80061a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061a8:	6683      	str	r3, [r0, #104]	; 0x68
 80061aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80061ac:	66c3      	str	r3, [r0, #108]	; 0x6c
        state[14] = Aku;
 80061ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80061b0:	6703      	str	r3, [r0, #112]	; 0x70
 80061b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80061b4:	6743      	str	r3, [r0, #116]	; 0x74
        state[15] = Ama;
 80061b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80061b8:	6783      	str	r3, [r0, #120]	; 0x78
 80061ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80061bc:	67c3      	str	r3, [r0, #124]	; 0x7c
        state[16] = Ame;
 80061be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80061c0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 80061c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80061c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
        state[17] = Ami;
 80061ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80061cc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80061d0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80061d2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        state[18] = Amo;
 80061d6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80061d8:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80061dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80061de:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
        state[19] = Amu;
 80061e2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80061e4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 80061e8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80061ea:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        state[20] = Asa;
 80061ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 80061f4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80061f6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
        state[21] = Ase;
 80061fa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80061fc:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8006200:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8006202:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
        state[22] = Asi;
 8006206:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8006208:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 800620c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800620e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        state[23] = Aso;
 8006212:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8006214:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
        state[24] = Asu;
 8006218:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        state[23] = Aso;
 800621a:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
        state[24] = Asu;
 800621e:	e9c0 3630 	strd	r3, r6, [r0, #192]	; 0xc0

        #undef    round
}
 8006222:	b03f      	add	sp, #252	; 0xfc
 8006224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	0800d490 	.word	0x0800d490

0800622c <Reset_Handler>:
 800622c:	2100      	movs	r1, #0
 800622e:	e003      	b.n	8006238 <LoopCopyDataInit>

08006230 <CopyDataInit>:
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <LoopForever+0x2>)
 8006232:	585b      	ldr	r3, [r3, r1]
 8006234:	5043      	str	r3, [r0, r1]
 8006236:	3104      	adds	r1, #4

08006238 <LoopCopyDataInit>:
 8006238:	480a      	ldr	r0, [pc, #40]	; (8006264 <LoopForever+0x6>)
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <LoopForever+0xa>)
 800623c:	1842      	adds	r2, r0, r1
 800623e:	429a      	cmp	r2, r3
 8006240:	d3f6      	bcc.n	8006230 <CopyDataInit>
 8006242:	4a0a      	ldr	r2, [pc, #40]	; (800626c <LoopForever+0xe>)
 8006244:	e002      	b.n	800624c <LoopFillZerobss>

08006246 <FillZerobss>:
 8006246:	2300      	movs	r3, #0
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	3204      	adds	r2, #4

0800624c <LoopFillZerobss>:
 800624c:	4b08      	ldr	r3, [pc, #32]	; (8006270 <LoopForever+0x12>)
 800624e:	429a      	cmp	r2, r3
 8006250:	d3f9      	bcc.n	8006246 <FillZerobss>
 8006252:	f3af 8000 	nop.w
 8006256:	f000 f851 	bl	80062fc <__libc_init_array>
 800625a:	f7fc fe9b 	bl	8002f94 <main>

0800625e <LoopForever>:
 800625e:	e7fe      	b.n	800625e <LoopForever>
 8006260:	0800da14 	.word	0x0800da14
 8006264:	20000000 	.word	0x20000000
 8006268:	200009b0 	.word	0x200009b0
 800626c:	200009b0 	.word	0x200009b0
 8006270:	200010bc 	.word	0x200010bc

08006274 <BusFault_Handler>:
 8006274:	e7fe      	b.n	8006274 <BusFault_Handler>
 8006276:	0000      	movs	r0, r0

08006278 <calloc>:
 8006278:	b410      	push	{r4}
 800627a:	4c04      	ldr	r4, [pc, #16]	; (800628c <calloc+0x14>)
 800627c:	4603      	mov	r3, r0
 800627e:	460a      	mov	r2, r1
 8006280:	6820      	ldr	r0, [r4, #0]
 8006282:	bc10      	pop	{r4}
 8006284:	4619      	mov	r1, r3
 8006286:	f000 b803 	b.w	8006290 <_calloc_r>
 800628a:	bf00      	nop
 800628c:	20000000 	.word	0x20000000

08006290 <_calloc_r>:
 8006290:	b510      	push	{r4, lr}
 8006292:	fb02 f101 	mul.w	r1, r2, r1
 8006296:	f000 f85d 	bl	8006354 <_malloc_r>
 800629a:	4604      	mov	r4, r0
 800629c:	b168      	cbz	r0, 80062ba <_calloc_r+0x2a>
 800629e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80062a2:	f022 0203 	bic.w	r2, r2, #3
 80062a6:	3a04      	subs	r2, #4
 80062a8:	2a24      	cmp	r2, #36	; 0x24
 80062aa:	d818      	bhi.n	80062de <_calloc_r+0x4e>
 80062ac:	2a13      	cmp	r2, #19
 80062ae:	d806      	bhi.n	80062be <_calloc_r+0x2e>
 80062b0:	4602      	mov	r2, r0
 80062b2:	2300      	movs	r3, #0
 80062b4:	e9c2 3300 	strd	r3, r3, [r2]
 80062b8:	6093      	str	r3, [r2, #8]
 80062ba:	4620      	mov	r0, r4
 80062bc:	bd10      	pop	{r4, pc}
 80062be:	2300      	movs	r3, #0
 80062c0:	2a1b      	cmp	r2, #27
 80062c2:	e9c0 3300 	strd	r3, r3, [r0]
 80062c6:	d90f      	bls.n	80062e8 <_calloc_r+0x58>
 80062c8:	2a24      	cmp	r2, #36	; 0x24
 80062ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80062ce:	bf11      	iteee	ne
 80062d0:	f100 0210 	addne.w	r2, r0, #16
 80062d4:	6103      	streq	r3, [r0, #16]
 80062d6:	f100 0218 	addeq.w	r2, r0, #24
 80062da:	6143      	streq	r3, [r0, #20]
 80062dc:	e7e9      	b.n	80062b2 <_calloc_r+0x22>
 80062de:	2100      	movs	r1, #0
 80062e0:	f000 fb1c 	bl	800691c <memset>
 80062e4:	4620      	mov	r0, r4
 80062e6:	bd10      	pop	{r4, pc}
 80062e8:	f100 0208 	add.w	r2, r0, #8
 80062ec:	e7e1      	b.n	80062b2 <_calloc_r+0x22>
 80062ee:	bf00      	nop

080062f0 <__errno>:
 80062f0:	4b01      	ldr	r3, [pc, #4]	; (80062f8 <__errno+0x8>)
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000000 	.word	0x20000000

080062fc <__libc_init_array>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4e0d      	ldr	r6, [pc, #52]	; (8006334 <__libc_init_array+0x38>)
 8006300:	4d0d      	ldr	r5, [pc, #52]	; (8006338 <__libc_init_array+0x3c>)
 8006302:	1b76      	subs	r6, r6, r5
 8006304:	10b6      	asrs	r6, r6, #2
 8006306:	d006      	beq.n	8006316 <__libc_init_array+0x1a>
 8006308:	2400      	movs	r4, #0
 800630a:	f855 3b04 	ldr.w	r3, [r5], #4
 800630e:	3401      	adds	r4, #1
 8006310:	4798      	blx	r3
 8006312:	42a6      	cmp	r6, r4
 8006314:	d1f9      	bne.n	800630a <__libc_init_array+0xe>
 8006316:	4e09      	ldr	r6, [pc, #36]	; (800633c <__libc_init_array+0x40>)
 8006318:	4d09      	ldr	r5, [pc, #36]	; (8006340 <__libc_init_array+0x44>)
 800631a:	1b76      	subs	r6, r6, r5
 800631c:	f005 ffee 	bl	800c2fc <_init>
 8006320:	10b6      	asrs	r6, r6, #2
 8006322:	d006      	beq.n	8006332 <__libc_init_array+0x36>
 8006324:	2400      	movs	r4, #0
 8006326:	f855 3b04 	ldr.w	r3, [r5], #4
 800632a:	3401      	adds	r4, #1
 800632c:	4798      	blx	r3
 800632e:	42a6      	cmp	r6, r4
 8006330:	d1f9      	bne.n	8006326 <__libc_init_array+0x2a>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	0800da08 	.word	0x0800da08
 8006338:	0800da08 	.word	0x0800da08
 800633c:	0800da10 	.word	0x0800da10
 8006340:	0800da08 	.word	0x0800da08

08006344 <free>:
 8006344:	4b02      	ldr	r3, [pc, #8]	; (8006350 <free+0xc>)
 8006346:	4601      	mov	r1, r0
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	f003 bb97 	b.w	8009a7c <_free_r>
 800634e:	bf00      	nop
 8006350:	20000000 	.word	0x20000000

08006354 <_malloc_r>:
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	f101 060b 	add.w	r6, r1, #11
 800635c:	2e16      	cmp	r6, #22
 800635e:	b083      	sub	sp, #12
 8006360:	4604      	mov	r4, r0
 8006362:	d824      	bhi.n	80063ae <_malloc_r+0x5a>
 8006364:	2910      	cmp	r1, #16
 8006366:	f200 80ba 	bhi.w	80064de <_malloc_r+0x18a>
 800636a:	f000 fb29 	bl	80069c0 <__malloc_lock>
 800636e:	2610      	movs	r6, #16
 8006370:	2218      	movs	r2, #24
 8006372:	2002      	movs	r0, #2
 8006374:	4fb5      	ldr	r7, [pc, #724]	; (800664c <_malloc_r+0x2f8>)
 8006376:	443a      	add	r2, r7
 8006378:	f1a2 0108 	sub.w	r1, r2, #8
 800637c:	6853      	ldr	r3, [r2, #4]
 800637e:	428b      	cmp	r3, r1
 8006380:	f000 80ba 	beq.w	80064f8 <_malloc_r+0x1a4>
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68d9      	ldr	r1, [r3, #12]
 8006388:	f022 0203 	bic.w	r2, r2, #3
 800638c:	441a      	add	r2, r3
 800638e:	689d      	ldr	r5, [r3, #8]
 8006390:	60e9      	str	r1, [r5, #12]
 8006392:	608d      	str	r5, [r1, #8]
 8006394:	6851      	ldr	r1, [r2, #4]
 8006396:	f041 0101 	orr.w	r1, r1, #1
 800639a:	4620      	mov	r0, r4
 800639c:	6051      	str	r1, [r2, #4]
 800639e:	f103 0508 	add.w	r5, r3, #8
 80063a2:	f000 fb13 	bl	80069cc <__malloc_unlock>
 80063a6:	4628      	mov	r0, r5
 80063a8:	b003      	add	sp, #12
 80063aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ae:	f036 0607 	bics.w	r6, r6, #7
 80063b2:	f100 8094 	bmi.w	80064de <_malloc_r+0x18a>
 80063b6:	42b1      	cmp	r1, r6
 80063b8:	f200 8091 	bhi.w	80064de <_malloc_r+0x18a>
 80063bc:	f000 fb00 	bl	80069c0 <__malloc_lock>
 80063c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 80063c4:	f0c0 819a 	bcc.w	80066fc <_malloc_r+0x3a8>
 80063c8:	0a73      	lsrs	r3, r6, #9
 80063ca:	f000 808f 	beq.w	80064ec <_malloc_r+0x198>
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	f200 816f 	bhi.w	80066b2 <_malloc_r+0x35e>
 80063d4:	09b3      	lsrs	r3, r6, #6
 80063d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80063da:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80063de:	00c3      	lsls	r3, r0, #3
 80063e0:	4f9a      	ldr	r7, [pc, #616]	; (800664c <_malloc_r+0x2f8>)
 80063e2:	443b      	add	r3, r7
 80063e4:	f1a3 0508 	sub.w	r5, r3, #8
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	429d      	cmp	r5, r3
 80063ec:	d106      	bne.n	80063fc <_malloc_r+0xa8>
 80063ee:	e00c      	b.n	800640a <_malloc_r+0xb6>
 80063f0:	2900      	cmp	r1, #0
 80063f2:	f280 8127 	bge.w	8006644 <_malloc_r+0x2f0>
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	429d      	cmp	r5, r3
 80063fa:	d006      	beq.n	800640a <_malloc_r+0xb6>
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	f022 0203 	bic.w	r2, r2, #3
 8006402:	1b91      	subs	r1, r2, r6
 8006404:	290f      	cmp	r1, #15
 8006406:	ddf3      	ble.n	80063f0 <_malloc_r+0x9c>
 8006408:	4660      	mov	r0, ip
 800640a:	693d      	ldr	r5, [r7, #16]
 800640c:	f8df c240 	ldr.w	ip, [pc, #576]	; 8006650 <_malloc_r+0x2fc>
 8006410:	4565      	cmp	r5, ip
 8006412:	d07c      	beq.n	800650e <_malloc_r+0x1ba>
 8006414:	686a      	ldr	r2, [r5, #4]
 8006416:	f022 0203 	bic.w	r2, r2, #3
 800641a:	1b93      	subs	r3, r2, r6
 800641c:	2b0f      	cmp	r3, #15
 800641e:	f300 817b 	bgt.w	8006718 <_malloc_r+0x3c4>
 8006422:	2b00      	cmp	r3, #0
 8006424:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8006428:	f280 816c 	bge.w	8006704 <_malloc_r+0x3b0>
 800642c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006430:	f080 811a 	bcs.w	8006668 <_malloc_r+0x314>
 8006434:	08d3      	lsrs	r3, r2, #3
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	3301      	adds	r3, #1
 800643a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800643e:	2201      	movs	r2, #1
 8006440:	fa02 f20e 	lsl.w	r2, r2, lr
 8006444:	430a      	orrs	r2, r1
 8006446:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 800644a:	f8c5 e008 	str.w	lr, [r5, #8]
 800644e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8006452:	3908      	subs	r1, #8
 8006454:	60e9      	str	r1, [r5, #12]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800645c:	f8ce 500c 	str.w	r5, [lr, #12]
 8006460:	1083      	asrs	r3, r0, #2
 8006462:	2101      	movs	r1, #1
 8006464:	4099      	lsls	r1, r3
 8006466:	4291      	cmp	r1, r2
 8006468:	d857      	bhi.n	800651a <_malloc_r+0x1c6>
 800646a:	4211      	tst	r1, r2
 800646c:	d106      	bne.n	800647c <_malloc_r+0x128>
 800646e:	f020 0003 	bic.w	r0, r0, #3
 8006472:	0049      	lsls	r1, r1, #1
 8006474:	4211      	tst	r1, r2
 8006476:	f100 0004 	add.w	r0, r0, #4
 800647a:	d0fa      	beq.n	8006472 <_malloc_r+0x11e>
 800647c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8006480:	464d      	mov	r5, r9
 8006482:	4686      	mov	lr, r0
 8006484:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006488:	4545      	cmp	r5, r8
 800648a:	d108      	bne.n	800649e <_malloc_r+0x14a>
 800648c:	e11d      	b.n	80066ca <_malloc_r+0x376>
 800648e:	2b00      	cmp	r3, #0
 8006490:	f280 8124 	bge.w	80066dc <_malloc_r+0x388>
 8006494:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8006498:	4545      	cmp	r5, r8
 800649a:	f000 8116 	beq.w	80066ca <_malloc_r+0x376>
 800649e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80064a2:	f022 0203 	bic.w	r2, r2, #3
 80064a6:	1b93      	subs	r3, r2, r6
 80064a8:	2b0f      	cmp	r3, #15
 80064aa:	ddf0      	ble.n	800648e <_malloc_r+0x13a>
 80064ac:	4620      	mov	r0, r4
 80064ae:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 80064b2:	eb08 0106 	add.w	r1, r8, r6
 80064b6:	f046 0601 	orr.w	r6, r6, #1
 80064ba:	f8c8 6004 	str.w	r6, [r8, #4]
 80064be:	60ec      	str	r4, [r5, #12]
 80064c0:	60a5      	str	r5, [r4, #8]
 80064c2:	f043 0401 	orr.w	r4, r3, #1
 80064c6:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80064ca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80064ce:	604c      	str	r4, [r1, #4]
 80064d0:	f848 3002 	str.w	r3, [r8, r2]
 80064d4:	f000 fa7a 	bl	80069cc <__malloc_unlock>
 80064d8:	f108 0508 	add.w	r5, r8, #8
 80064dc:	e002      	b.n	80064e4 <_malloc_r+0x190>
 80064de:	230c      	movs	r3, #12
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	2500      	movs	r5, #0
 80064e4:	4628      	mov	r0, r5
 80064e6:	b003      	add	sp, #12
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f0:	2040      	movs	r0, #64	; 0x40
 80064f2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80064f6:	e773      	b.n	80063e0 <_malloc_r+0x8c>
 80064f8:	68d3      	ldr	r3, [r2, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	bf08      	it	eq
 80064fe:	3002      	addeq	r0, #2
 8006500:	f47f af40 	bne.w	8006384 <_malloc_r+0x30>
 8006504:	693d      	ldr	r5, [r7, #16]
 8006506:	f8df c148 	ldr.w	ip, [pc, #328]	; 8006650 <_malloc_r+0x2fc>
 800650a:	4565      	cmp	r5, ip
 800650c:	d182      	bne.n	8006414 <_malloc_r+0xc0>
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	1083      	asrs	r3, r0, #2
 8006512:	2101      	movs	r1, #1
 8006514:	4099      	lsls	r1, r3
 8006516:	4291      	cmp	r1, r2
 8006518:	d9a7      	bls.n	800646a <_malloc_r+0x116>
 800651a:	68bd      	ldr	r5, [r7, #8]
 800651c:	686b      	ldr	r3, [r5, #4]
 800651e:	f023 0903 	bic.w	r9, r3, #3
 8006522:	454e      	cmp	r6, r9
 8006524:	d803      	bhi.n	800652e <_malloc_r+0x1da>
 8006526:	eba9 0306 	sub.w	r3, r9, r6
 800652a:	2b0f      	cmp	r3, #15
 800652c:	dc7a      	bgt.n	8006624 <_malloc_r+0x2d0>
 800652e:	f8df b124 	ldr.w	fp, [pc, #292]	; 8006654 <_malloc_r+0x300>
 8006532:	4b49      	ldr	r3, [pc, #292]	; (8006658 <_malloc_r+0x304>)
 8006534:	f8db 2000 	ldr.w	r2, [fp]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3201      	adds	r2, #1
 800653c:	4433      	add	r3, r6
 800653e:	eb05 0a09 	add.w	sl, r5, r9
 8006542:	f000 8133 	beq.w	80067ac <_malloc_r+0x458>
 8006546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654a:	330f      	adds	r3, #15
 800654c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 8006550:	f028 080f 	bic.w	r8, r8, #15
 8006554:	4641      	mov	r1, r8
 8006556:	4620      	mov	r0, r4
 8006558:	f000 faa8 	bl	8006aac <_sbrk_r>
 800655c:	1c41      	adds	r1, r0, #1
 800655e:	4602      	mov	r2, r0
 8006560:	f000 80f3 	beq.w	800674a <_malloc_r+0x3f6>
 8006564:	4582      	cmp	sl, r0
 8006566:	f200 80ee 	bhi.w	8006746 <_malloc_r+0x3f2>
 800656a:	4b3c      	ldr	r3, [pc, #240]	; (800665c <_malloc_r+0x308>)
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	4441      	add	r1, r8
 8006570:	6019      	str	r1, [r3, #0]
 8006572:	4608      	mov	r0, r1
 8006574:	f000 814e 	beq.w	8006814 <_malloc_r+0x4c0>
 8006578:	f8db 1000 	ldr.w	r1, [fp]
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	3101      	adds	r1, #1
 8006580:	bf1b      	ittet	ne
 8006582:	eba2 0a0a 	subne.w	sl, r2, sl
 8006586:	4450      	addne	r0, sl
 8006588:	f8cb 2000 	streq.w	r2, [fp]
 800658c:	6018      	strne	r0, [r3, #0]
 800658e:	f012 0b07 	ands.w	fp, r2, #7
 8006592:	f000 8117 	beq.w	80067c4 <_malloc_r+0x470>
 8006596:	f1cb 0108 	rsb	r1, fp, #8
 800659a:	440a      	add	r2, r1
 800659c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 80065a0:	4490      	add	r8, r2
 80065a2:	3108      	adds	r1, #8
 80065a4:	eba1 0108 	sub.w	r1, r1, r8
 80065a8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80065ac:	4651      	mov	r1, sl
 80065ae:	4620      	mov	r0, r4
 80065b0:	9200      	str	r2, [sp, #0]
 80065b2:	f000 fa7b 	bl	8006aac <_sbrk_r>
 80065b6:	1c42      	adds	r2, r0, #1
 80065b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065bc:	f000 814f 	beq.w	800685e <_malloc_r+0x50a>
 80065c0:	1a80      	subs	r0, r0, r2
 80065c2:	eb00 080a 	add.w	r8, r0, sl
 80065c6:	6819      	ldr	r1, [r3, #0]
 80065c8:	60ba      	str	r2, [r7, #8]
 80065ca:	f048 0001 	orr.w	r0, r8, #1
 80065ce:	4451      	add	r1, sl
 80065d0:	42bd      	cmp	r5, r7
 80065d2:	6050      	str	r0, [r2, #4]
 80065d4:	6019      	str	r1, [r3, #0]
 80065d6:	f000 8129 	beq.w	800682c <_malloc_r+0x4d8>
 80065da:	f1b9 0f0f 	cmp.w	r9, #15
 80065de:	f240 8127 	bls.w	8006830 <_malloc_r+0x4dc>
 80065e2:	6868      	ldr	r0, [r5, #4]
 80065e4:	f1a9 0c0c 	sub.w	ip, r9, #12
 80065e8:	f02c 0c07 	bic.w	ip, ip, #7
 80065ec:	f000 0001 	and.w	r0, r0, #1
 80065f0:	ea40 000c 	orr.w	r0, r0, ip
 80065f4:	6068      	str	r0, [r5, #4]
 80065f6:	f04f 0e05 	mov.w	lr, #5
 80065fa:	eb05 000c 	add.w	r0, r5, ip
 80065fe:	f1bc 0f0f 	cmp.w	ip, #15
 8006602:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8006606:	f200 8132 	bhi.w	800686e <_malloc_r+0x51a>
 800660a:	6850      	ldr	r0, [r2, #4]
 800660c:	4615      	mov	r5, r2
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <_malloc_r+0x30c>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	428a      	cmp	r2, r1
 8006614:	bf38      	it	cc
 8006616:	6019      	strcc	r1, [r3, #0]
 8006618:	4b12      	ldr	r3, [pc, #72]	; (8006664 <_malloc_r+0x310>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	428a      	cmp	r2, r1
 800661e:	bf38      	it	cc
 8006620:	6019      	strcc	r1, [r3, #0]
 8006622:	e094      	b.n	800674e <_malloc_r+0x3fa>
 8006624:	19aa      	adds	r2, r5, r6
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	f046 0601 	orr.w	r6, r6, #1
 800662e:	606e      	str	r6, [r5, #4]
 8006630:	4620      	mov	r0, r4
 8006632:	60ba      	str	r2, [r7, #8]
 8006634:	6053      	str	r3, [r2, #4]
 8006636:	f000 f9c9 	bl	80069cc <__malloc_unlock>
 800663a:	3508      	adds	r5, #8
 800663c:	4628      	mov	r0, r5
 800663e:	b003      	add	sp, #12
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	68d9      	ldr	r1, [r3, #12]
 8006646:	441a      	add	r2, r3
 8006648:	e6a1      	b.n	800638e <_malloc_r+0x3a>
 800664a:	bf00      	nop
 800664c:	20000430 	.word	0x20000430
 8006650:	20000438 	.word	0x20000438
 8006654:	20000838 	.word	0x20000838
 8006658:	200010a4 	.word	0x200010a4
 800665c:	20001074 	.word	0x20001074
 8006660:	2000109c 	.word	0x2000109c
 8006664:	200010a0 	.word	0x200010a0
 8006668:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 800666c:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8006670:	d363      	bcc.n	800673a <_malloc_r+0x3e6>
 8006672:	2b14      	cmp	r3, #20
 8006674:	f200 80b7 	bhi.w	80067e6 <_malloc_r+0x492>
 8006678:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 800667c:	00c9      	lsls	r1, r1, #3
 800667e:	335b      	adds	r3, #91	; 0x5b
 8006680:	eb07 0e01 	add.w	lr, r7, r1
 8006684:	5879      	ldr	r1, [r7, r1]
 8006686:	f1ae 0e08 	sub.w	lr, lr, #8
 800668a:	458e      	cmp	lr, r1
 800668c:	f000 8091 	beq.w	80067b2 <_malloc_r+0x45e>
 8006690:	684b      	ldr	r3, [r1, #4]
 8006692:	f023 0303 	bic.w	r3, r3, #3
 8006696:	4293      	cmp	r3, r2
 8006698:	d902      	bls.n	80066a0 <_malloc_r+0x34c>
 800669a:	6889      	ldr	r1, [r1, #8]
 800669c:	458e      	cmp	lr, r1
 800669e:	d1f7      	bne.n	8006690 <_malloc_r+0x33c>
 80066a0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 80066aa:	f8ce 5008 	str.w	r5, [lr, #8]
 80066ae:	60cd      	str	r5, [r1, #12]
 80066b0:	e6d6      	b.n	8006460 <_malloc_r+0x10c>
 80066b2:	2b14      	cmp	r3, #20
 80066b4:	d959      	bls.n	800676a <_malloc_r+0x416>
 80066b6:	2b54      	cmp	r3, #84	; 0x54
 80066b8:	f200 809d 	bhi.w	80067f6 <_malloc_r+0x4a2>
 80066bc:	0b33      	lsrs	r3, r6, #12
 80066be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80066c2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80066c6:	00c3      	lsls	r3, r0, #3
 80066c8:	e68a      	b.n	80063e0 <_malloc_r+0x8c>
 80066ca:	f10e 0e01 	add.w	lr, lr, #1
 80066ce:	f01e 0f03 	tst.w	lr, #3
 80066d2:	f105 0508 	add.w	r5, r5, #8
 80066d6:	f47f aed5 	bne.w	8006484 <_malloc_r+0x130>
 80066da:	e051      	b.n	8006780 <_malloc_r+0x42c>
 80066dc:	4442      	add	r2, r8
 80066de:	4645      	mov	r5, r8
 80066e0:	6853      	ldr	r3, [r2, #4]
 80066e2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6053      	str	r3, [r2, #4]
 80066ec:	f855 3f08 	ldr.w	r3, [r5, #8]!
 80066f0:	4620      	mov	r0, r4
 80066f2:	60d9      	str	r1, [r3, #12]
 80066f4:	608b      	str	r3, [r1, #8]
 80066f6:	f000 f969 	bl	80069cc <__malloc_unlock>
 80066fa:	e6f3      	b.n	80064e4 <_malloc_r+0x190>
 80066fc:	08f0      	lsrs	r0, r6, #3
 80066fe:	f106 0208 	add.w	r2, r6, #8
 8006702:	e637      	b.n	8006374 <_malloc_r+0x20>
 8006704:	442a      	add	r2, r5
 8006706:	4620      	mov	r0, r4
 8006708:	6853      	ldr	r3, [r2, #4]
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6053      	str	r3, [r2, #4]
 8006710:	3508      	adds	r5, #8
 8006712:	f000 f95b 	bl	80069cc <__malloc_unlock>
 8006716:	e6e5      	b.n	80064e4 <_malloc_r+0x190>
 8006718:	19a9      	adds	r1, r5, r6
 800671a:	4620      	mov	r0, r4
 800671c:	f046 0601 	orr.w	r6, r6, #1
 8006720:	f043 0401 	orr.w	r4, r3, #1
 8006724:	606e      	str	r6, [r5, #4]
 8006726:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800672a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800672e:	604c      	str	r4, [r1, #4]
 8006730:	50ab      	str	r3, [r5, r2]
 8006732:	f000 f94b 	bl	80069cc <__malloc_unlock>
 8006736:	3508      	adds	r5, #8
 8006738:	e6d4      	b.n	80064e4 <_malloc_r+0x190>
 800673a:	0993      	lsrs	r3, r2, #6
 800673c:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8006740:	00c9      	lsls	r1, r1, #3
 8006742:	3338      	adds	r3, #56	; 0x38
 8006744:	e79c      	b.n	8006680 <_malloc_r+0x32c>
 8006746:	42bd      	cmp	r5, r7
 8006748:	d05f      	beq.n	800680a <_malloc_r+0x4b6>
 800674a:	68bd      	ldr	r5, [r7, #8]
 800674c:	6868      	ldr	r0, [r5, #4]
 800674e:	f020 0803 	bic.w	r8, r0, #3
 8006752:	4546      	cmp	r6, r8
 8006754:	eba8 0306 	sub.w	r3, r8, r6
 8006758:	d802      	bhi.n	8006760 <_malloc_r+0x40c>
 800675a:	2b0f      	cmp	r3, #15
 800675c:	f73f af62 	bgt.w	8006624 <_malloc_r+0x2d0>
 8006760:	4620      	mov	r0, r4
 8006762:	f000 f933 	bl	80069cc <__malloc_unlock>
 8006766:	2500      	movs	r5, #0
 8006768:	e6bc      	b.n	80064e4 <_malloc_r+0x190>
 800676a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800676e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8006772:	00c3      	lsls	r3, r0, #3
 8006774:	e634      	b.n	80063e0 <_malloc_r+0x8c>
 8006776:	f859 3908 	ldr.w	r3, [r9], #-8
 800677a:	454b      	cmp	r3, r9
 800677c:	f040 8096 	bne.w	80068ac <_malloc_r+0x558>
 8006780:	f010 0f03 	tst.w	r0, #3
 8006784:	f100 30ff 	add.w	r0, r0, #4294967295
 8006788:	d1f5      	bne.n	8006776 <_malloc_r+0x422>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	ea23 0301 	bic.w	r3, r3, r1
 8006790:	607b      	str	r3, [r7, #4]
 8006792:	0049      	lsls	r1, r1, #1
 8006794:	4299      	cmp	r1, r3
 8006796:	f63f aec0 	bhi.w	800651a <_malloc_r+0x1c6>
 800679a:	b919      	cbnz	r1, 80067a4 <_malloc_r+0x450>
 800679c:	e6bd      	b.n	800651a <_malloc_r+0x1c6>
 800679e:	0049      	lsls	r1, r1, #1
 80067a0:	f10e 0e04 	add.w	lr, lr, #4
 80067a4:	4219      	tst	r1, r3
 80067a6:	d0fa      	beq.n	800679e <_malloc_r+0x44a>
 80067a8:	4670      	mov	r0, lr
 80067aa:	e667      	b.n	800647c <_malloc_r+0x128>
 80067ac:	f103 0810 	add.w	r8, r3, #16
 80067b0:	e6d0      	b.n	8006554 <_malloc_r+0x200>
 80067b2:	109a      	asrs	r2, r3, #2
 80067b4:	f04f 0801 	mov.w	r8, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	fa08 f202 	lsl.w	r2, r8, r2
 80067be:	431a      	orrs	r2, r3
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	e770      	b.n	80066a6 <_malloc_r+0x352>
 80067c4:	eb02 0108 	add.w	r1, r2, r8
 80067c8:	4249      	negs	r1, r1
 80067ca:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80067ce:	4651      	mov	r1, sl
 80067d0:	4620      	mov	r0, r4
 80067d2:	9200      	str	r2, [sp, #0]
 80067d4:	f000 f96a 	bl	8006aac <_sbrk_r>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067de:	f47f aeef 	bne.w	80065c0 <_malloc_r+0x26c>
 80067e2:	46da      	mov	sl, fp
 80067e4:	e6ef      	b.n	80065c6 <_malloc_r+0x272>
 80067e6:	2b54      	cmp	r3, #84	; 0x54
 80067e8:	d825      	bhi.n	8006836 <_malloc_r+0x4e2>
 80067ea:	0b13      	lsrs	r3, r2, #12
 80067ec:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 80067f0:	00c9      	lsls	r1, r1, #3
 80067f2:	336e      	adds	r3, #110	; 0x6e
 80067f4:	e744      	b.n	8006680 <_malloc_r+0x32c>
 80067f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80067fa:	d825      	bhi.n	8006848 <_malloc_r+0x4f4>
 80067fc:	0bf3      	lsrs	r3, r6, #15
 80067fe:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8006802:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8006806:	00c3      	lsls	r3, r0, #3
 8006808:	e5ea      	b.n	80063e0 <_malloc_r+0x8c>
 800680a:	4b29      	ldr	r3, [pc, #164]	; (80068b0 <_malloc_r+0x55c>)
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	4440      	add	r0, r8
 8006810:	6018      	str	r0, [r3, #0]
 8006812:	e6b1      	b.n	8006578 <_malloc_r+0x224>
 8006814:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 8006818:	f1bc 0f00 	cmp.w	ip, #0
 800681c:	f47f aeac 	bne.w	8006578 <_malloc_r+0x224>
 8006820:	68bd      	ldr	r5, [r7, #8]
 8006822:	44c8      	add	r8, r9
 8006824:	f048 0001 	orr.w	r0, r8, #1
 8006828:	6068      	str	r0, [r5, #4]
 800682a:	e6f0      	b.n	800660e <_malloc_r+0x2ba>
 800682c:	4615      	mov	r5, r2
 800682e:	e6ee      	b.n	800660e <_malloc_r+0x2ba>
 8006830:	2301      	movs	r3, #1
 8006832:	6053      	str	r3, [r2, #4]
 8006834:	e794      	b.n	8006760 <_malloc_r+0x40c>
 8006836:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800683a:	d823      	bhi.n	8006884 <_malloc_r+0x530>
 800683c:	0bd3      	lsrs	r3, r2, #15
 800683e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006842:	00c9      	lsls	r1, r1, #3
 8006844:	3377      	adds	r3, #119	; 0x77
 8006846:	e71b      	b.n	8006680 <_malloc_r+0x32c>
 8006848:	f240 5254 	movw	r2, #1364	; 0x554
 800684c:	4293      	cmp	r3, r2
 800684e:	d823      	bhi.n	8006898 <_malloc_r+0x544>
 8006850:	0cb3      	lsrs	r3, r6, #18
 8006852:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8006856:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 800685a:	00c3      	lsls	r3, r0, #3
 800685c:	e5c0      	b.n	80063e0 <_malloc_r+0x8c>
 800685e:	f1ab 0b08 	sub.w	fp, fp, #8
 8006862:	44d8      	add	r8, fp
 8006864:	eba8 0802 	sub.w	r8, r8, r2
 8006868:	f04f 0a00 	mov.w	sl, #0
 800686c:	e6ab      	b.n	80065c6 <_malloc_r+0x272>
 800686e:	f105 0108 	add.w	r1, r5, #8
 8006872:	4620      	mov	r0, r4
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	f003 f901 	bl	8009a7c <_free_r>
 800687a:	68bd      	ldr	r5, [r7, #8]
 800687c:	9b00      	ldr	r3, [sp, #0]
 800687e:	6868      	ldr	r0, [r5, #4]
 8006880:	6819      	ldr	r1, [r3, #0]
 8006882:	e6c4      	b.n	800660e <_malloc_r+0x2ba>
 8006884:	f240 5154 	movw	r1, #1364	; 0x554
 8006888:	428b      	cmp	r3, r1
 800688a:	d80b      	bhi.n	80068a4 <_malloc_r+0x550>
 800688c:	0c93      	lsrs	r3, r2, #18
 800688e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8006892:	00c9      	lsls	r1, r1, #3
 8006894:	337c      	adds	r3, #124	; 0x7c
 8006896:	e6f3      	b.n	8006680 <_malloc_r+0x32c>
 8006898:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800689c:	207f      	movs	r0, #127	; 0x7f
 800689e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80068a2:	e59d      	b.n	80063e0 <_malloc_r+0x8c>
 80068a4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80068a8:	237e      	movs	r3, #126	; 0x7e
 80068aa:	e6e9      	b.n	8006680 <_malloc_r+0x32c>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	e770      	b.n	8006792 <_malloc_r+0x43e>
 80068b0:	20001074 	.word	0x20001074

080068b4 <memcmp>:
 80068b4:	2a03      	cmp	r2, #3
 80068b6:	b510      	push	{r4, lr}
 80068b8:	d917      	bls.n	80068ea <memcmp+0x36>
 80068ba:	ea40 0c01 	orr.w	ip, r0, r1
 80068be:	f01c 0f03 	tst.w	ip, #3
 80068c2:	4604      	mov	r4, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	d123      	bne.n	8006910 <memcmp+0x5c>
 80068c8:	4619      	mov	r1, r3
 80068ca:	4620      	mov	r0, r4
 80068cc:	f8d1 e000 	ldr.w	lr, [r1]
 80068d0:	f8d0 c000 	ldr.w	ip, [r0]
 80068d4:	45f4      	cmp	ip, lr
 80068d6:	f104 0404 	add.w	r4, r4, #4
 80068da:	f103 0304 	add.w	r3, r3, #4
 80068de:	d117      	bne.n	8006910 <memcmp+0x5c>
 80068e0:	3a04      	subs	r2, #4
 80068e2:	2a03      	cmp	r2, #3
 80068e4:	4620      	mov	r0, r4
 80068e6:	4619      	mov	r1, r3
 80068e8:	d8ee      	bhi.n	80068c8 <memcmp+0x14>
 80068ea:	1e54      	subs	r4, r2, #1
 80068ec:	b1a2      	cbz	r2, 8006918 <memcmp+0x64>
 80068ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80068f2:	3901      	subs	r1, #1
 80068f4:	e001      	b.n	80068fa <memcmp+0x46>
 80068f6:	18c3      	adds	r3, r0, r3
 80068f8:	d00c      	beq.n	8006914 <memcmp+0x60>
 80068fa:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80068fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006902:	4596      	cmp	lr, r2
 8006904:	eba4 030c 	sub.w	r3, r4, ip
 8006908:	d0f5      	beq.n	80068f6 <memcmp+0x42>
 800690a:	ebae 0002 	sub.w	r0, lr, r2
 800690e:	bd10      	pop	{r4, pc}
 8006910:	1e54      	subs	r4, r2, #1
 8006912:	e7ec      	b.n	80068ee <memcmp+0x3a>
 8006914:	4618      	mov	r0, r3
 8006916:	bd10      	pop	{r4, pc}
 8006918:	4610      	mov	r0, r2
 800691a:	bd10      	pop	{r4, pc}

0800691c <memset>:
 800691c:	0783      	lsls	r3, r0, #30
 800691e:	b530      	push	{r4, r5, lr}
 8006920:	d048      	beq.n	80069b4 <memset+0x98>
 8006922:	1e54      	subs	r4, r2, #1
 8006924:	2a00      	cmp	r2, #0
 8006926:	d03f      	beq.n	80069a8 <memset+0x8c>
 8006928:	b2ca      	uxtb	r2, r1
 800692a:	4603      	mov	r3, r0
 800692c:	e001      	b.n	8006932 <memset+0x16>
 800692e:	3c01      	subs	r4, #1
 8006930:	d33a      	bcc.n	80069a8 <memset+0x8c>
 8006932:	f803 2b01 	strb.w	r2, [r3], #1
 8006936:	079d      	lsls	r5, r3, #30
 8006938:	d1f9      	bne.n	800692e <memset+0x12>
 800693a:	2c03      	cmp	r4, #3
 800693c:	d92d      	bls.n	800699a <memset+0x7e>
 800693e:	b2cd      	uxtb	r5, r1
 8006940:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006944:	2c0f      	cmp	r4, #15
 8006946:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800694a:	d936      	bls.n	80069ba <memset+0x9e>
 800694c:	f1a4 0210 	sub.w	r2, r4, #16
 8006950:	f022 0c0f 	bic.w	ip, r2, #15
 8006954:	f103 0e20 	add.w	lr, r3, #32
 8006958:	44e6      	add	lr, ip
 800695a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800695e:	f103 0210 	add.w	r2, r3, #16
 8006962:	e942 5504 	strd	r5, r5, [r2, #-16]
 8006966:	e942 5502 	strd	r5, r5, [r2, #-8]
 800696a:	3210      	adds	r2, #16
 800696c:	4572      	cmp	r2, lr
 800696e:	d1f8      	bne.n	8006962 <memset+0x46>
 8006970:	f10c 0201 	add.w	r2, ip, #1
 8006974:	f014 0f0c 	tst.w	r4, #12
 8006978:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800697c:	f004 0c0f 	and.w	ip, r4, #15
 8006980:	d013      	beq.n	80069aa <memset+0x8e>
 8006982:	f1ac 0304 	sub.w	r3, ip, #4
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	3304      	adds	r3, #4
 800698c:	4413      	add	r3, r2
 800698e:	f842 5b04 	str.w	r5, [r2], #4
 8006992:	4293      	cmp	r3, r2
 8006994:	d1fb      	bne.n	800698e <memset+0x72>
 8006996:	f00c 0403 	and.w	r4, ip, #3
 800699a:	b12c      	cbz	r4, 80069a8 <memset+0x8c>
 800699c:	b2ca      	uxtb	r2, r1
 800699e:	441c      	add	r4, r3
 80069a0:	f803 2b01 	strb.w	r2, [r3], #1
 80069a4:	429c      	cmp	r4, r3
 80069a6:	d1fb      	bne.n	80069a0 <memset+0x84>
 80069a8:	bd30      	pop	{r4, r5, pc}
 80069aa:	4664      	mov	r4, ip
 80069ac:	4613      	mov	r3, r2
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	d1f4      	bne.n	800699c <memset+0x80>
 80069b2:	e7f9      	b.n	80069a8 <memset+0x8c>
 80069b4:	4603      	mov	r3, r0
 80069b6:	4614      	mov	r4, r2
 80069b8:	e7bf      	b.n	800693a <memset+0x1e>
 80069ba:	461a      	mov	r2, r3
 80069bc:	46a4      	mov	ip, r4
 80069be:	e7e0      	b.n	8006982 <memset+0x66>

080069c0 <__malloc_lock>:
 80069c0:	4801      	ldr	r0, [pc, #4]	; (80069c8 <__malloc_lock+0x8>)
 80069c2:	f003 bb01 	b.w	8009fc8 <__retarget_lock_acquire_recursive>
 80069c6:	bf00      	nop
 80069c8:	200010ac 	.word	0x200010ac

080069cc <__malloc_unlock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__malloc_unlock+0x8>)
 80069ce:	f003 bafd 	b.w	8009fcc <__retarget_lock_release_recursive>
 80069d2:	bf00      	nop
 80069d4:	200010ac 	.word	0x200010ac

080069d8 <printf>:
 80069d8:	b40f      	push	{r0, r1, r2, r3}
 80069da:	b500      	push	{lr}
 80069dc:	4907      	ldr	r1, [pc, #28]	; (80069fc <printf+0x24>)
 80069de:	b083      	sub	sp, #12
 80069e0:	ab04      	add	r3, sp, #16
 80069e2:	6808      	ldr	r0, [r1, #0]
 80069e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e8:	6881      	ldr	r1, [r0, #8]
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	f000 f870 	bl	8006ad0 <_vfprintf_r>
 80069f0:	b003      	add	sp, #12
 80069f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f6:	b004      	add	sp, #16
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000000 	.word	0x20000000

08006a00 <_puts_r>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	b088      	sub	sp, #32
 8006a06:	4608      	mov	r0, r1
 8006a08:	460c      	mov	r4, r1
 8006a0a:	f7fb fb39 	bl	8002080 <strlen>
 8006a0e:	4e22      	ldr	r6, [pc, #136]	; (8006a98 <_puts_r+0x98>)
 8006a10:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006a12:	9005      	str	r0, [sp, #20]
 8006a14:	2101      	movs	r1, #1
 8006a16:	1843      	adds	r3, r0, r1
 8006a18:	e9cd 6106 	strd	r6, r1, [sp, #24]
 8006a1c:	a804      	add	r0, sp, #16
 8006a1e:	2102      	movs	r1, #2
 8006a20:	9404      	str	r4, [sp, #16]
 8006a22:	9303      	str	r3, [sp, #12]
 8006a24:	68ac      	ldr	r4, [r5, #8]
 8006a26:	9001      	str	r0, [sp, #4]
 8006a28:	9102      	str	r1, [sp, #8]
 8006a2a:	b322      	cbz	r2, 8006a76 <_puts_r+0x76>
 8006a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2e:	f013 0f01 	tst.w	r3, #1
 8006a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	d101      	bne.n	8006a3e <_puts_r+0x3e>
 8006a3a:	0598      	lsls	r0, r3, #22
 8006a3c:	d525      	bpl.n	8006a8a <_puts_r+0x8a>
 8006a3e:	0491      	lsls	r1, r2, #18
 8006a40:	d406      	bmi.n	8006a50 <_puts_r+0x50>
 8006a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	6662      	str	r2, [r4, #100]	; 0x64
 8006a50:	4628      	mov	r0, r5
 8006a52:	aa01      	add	r2, sp, #4
 8006a54:	4621      	mov	r1, r4
 8006a56:	f003 f917 	bl	8009c88 <__sfvwrite_r>
 8006a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bf14      	ite	ne
 8006a60:	f04f 35ff 	movne.w	r5, #4294967295
 8006a64:	250a      	moveq	r5, #10
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d402      	bmi.n	8006a70 <_puts_r+0x70>
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	059b      	lsls	r3, r3, #22
 8006a6e:	d506      	bpl.n	8006a7e <_puts_r+0x7e>
 8006a70:	4628      	mov	r0, r5
 8006a72:	b008      	add	sp, #32
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
 8006a76:	4628      	mov	r0, r5
 8006a78:	f002 ff08 	bl	800988c <__sinit>
 8006a7c:	e7d6      	b.n	8006a2c <_puts_r+0x2c>
 8006a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a80:	f003 faa4 	bl	8009fcc <__retarget_lock_release_recursive>
 8006a84:	4628      	mov	r0, r5
 8006a86:	b008      	add	sp, #32
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8c:	f003 fa9c 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 8006a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	e7d2      	b.n	8006a3e <_puts_r+0x3e>
 8006a98:	0800d600 	.word	0x0800d600

08006a9c <puts>:
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <puts+0xc>)
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	f7ff bfad 	b.w	8006a00 <_puts_r>
 8006aa6:	bf00      	nop
 8006aa8:	20000000 	.word	0x20000000

08006aac <_sbrk_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	4d07      	ldr	r5, [pc, #28]	; (8006acc <_sbrk_r+0x20>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	602a      	str	r2, [r5, #0]
 8006ab8:	f7fe fc0a 	bl	80052d0 <_sbrk>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d000      	beq.n	8006ac2 <_sbrk_r+0x16>
 8006ac0:	bd38      	pop	{r3, r4, r5, pc}
 8006ac2:	682b      	ldr	r3, [r5, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0fb      	beq.n	8006ac0 <_sbrk_r+0x14>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	200010b8 	.word	0x200010b8

08006ad0 <_vfprintf_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	b0d5      	sub	sp, #340	; 0x154
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	9107      	str	r1, [sp, #28]
 8006ada:	4691      	mov	r9, r2
 8006adc:	4605      	mov	r5, r0
 8006ade:	9009      	str	r0, [sp, #36]	; 0x24
 8006ae0:	f003 fa6a 	bl	8009fb8 <_localeconv_r>
 8006ae4:	6802      	ldr	r2, [r0, #0]
 8006ae6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ae8:	4610      	mov	r0, r2
 8006aea:	940e      	str	r4, [sp, #56]	; 0x38
 8006aec:	f7fb fac8 	bl	8002080 <strlen>
 8006af0:	9016      	str	r0, [sp, #88]	; 0x58
 8006af2:	b11d      	cbz	r5, 8006afc <_vfprintf_r+0x2c>
 8006af4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 822a 	beq.w	8006f50 <_vfprintf_r+0x480>
 8006afc:	9a07      	ldr	r2, [sp, #28]
 8006afe:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006b00:	07dd      	lsls	r5, r3, #31
 8006b02:	f140 8138 	bpl.w	8006d76 <_vfprintf_r+0x2a6>
 8006b06:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8006b0a:	b291      	uxth	r1, r2
 8006b0c:	048f      	lsls	r7, r1, #18
 8006b0e:	d409      	bmi.n	8006b24 <_vfprintf_r+0x54>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b16:	819a      	strh	r2, [r3, #12]
 8006b18:	b291      	uxth	r1, r2
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b22:	6653      	str	r3, [r2, #100]	; 0x64
 8006b24:	070e      	lsls	r6, r1, #28
 8006b26:	f140 80cb 	bpl.w	8006cc0 <_vfprintf_r+0x1f0>
 8006b2a:	9b07      	ldr	r3, [sp, #28]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80c6 	beq.w	8006cc0 <_vfprintf_r+0x1f0>
 8006b34:	f001 031a 	and.w	r3, r1, #26
 8006b38:	2b0a      	cmp	r3, #10
 8006b3a:	f000 80cf 	beq.w	8006cdc <_vfprintf_r+0x20c>
 8006b3e:	2400      	movs	r4, #0
 8006b40:	ab2b      	add	r3, sp, #172	; 0xac
 8006b42:	464d      	mov	r5, r9
 8006b44:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
 8006b48:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8006b4c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8006b50:	9412      	str	r4, [sp, #72]	; 0x48
 8006b52:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b54:	4698      	mov	r8, r3
 8006b56:	9418      	str	r4, [sp, #96]	; 0x60
 8006b58:	2300      	movs	r3, #0
 8006b5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b5c:	2400      	movs	r4, #0
 8006b5e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8006b62:	782b      	ldrb	r3, [r5, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 819d 	beq.w	8006ea4 <_vfprintf_r+0x3d4>
 8006b6a:	46aa      	mov	sl, r5
 8006b6c:	e004      	b.n	8006b78 <_vfprintf_r+0xa8>
 8006b6e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80c7 	beq.w	8006d06 <_vfprintf_r+0x236>
 8006b78:	2b25      	cmp	r3, #37	; 0x25
 8006b7a:	d1f8      	bne.n	8006b6e <_vfprintf_r+0x9e>
 8006b7c:	ebba 0605 	subs.w	r6, sl, r5
 8006b80:	f040 80c5 	bne.w	8006d0e <_vfprintf_r+0x23e>
 8006b84:	f89a 3000 	ldrb.w	r3, [sl]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 818b 	beq.w	8006ea4 <_vfprintf_r+0x3d4>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8006b98:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8006b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ba2:	9208      	str	r2, [sp, #32]
 8006ba4:	461f      	mov	r7, r3
 8006ba6:	242b      	movs	r4, #43	; 0x2b
 8006ba8:	f04f 0920 	mov.w	r9, #32
 8006bac:	f10a 0a01 	add.w	sl, sl, #1
 8006bb0:	f1a6 0320 	sub.w	r3, r6, #32
 8006bb4:	2b5a      	cmp	r3, #90	; 0x5a
 8006bb6:	f200 80ed 	bhi.w	8006d94 <_vfprintf_r+0x2c4>
 8006bba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006bbe:	02eb      	.short	0x02eb
 8006bc0:	00eb00eb 	.word	0x00eb00eb
 8006bc4:	00eb02e6 	.word	0x00eb02e6
 8006bc8:	00eb00eb 	.word	0x00eb00eb
 8006bcc:	00eb006a 	.word	0x00eb006a
 8006bd0:	025c00eb 	.word	0x025c00eb
 8006bd4:	00eb0280 	.word	0x00eb0280
 8006bd8:	028a0267 	.word	0x028a0267
 8006bdc:	028500eb 	.word	0x028500eb
 8006be0:	005b005b 	.word	0x005b005b
 8006be4:	005b005b 	.word	0x005b005b
 8006be8:	005b005b 	.word	0x005b005b
 8006bec:	005b005b 	.word	0x005b005b
 8006bf0:	00eb005b 	.word	0x00eb005b
 8006bf4:	00eb00eb 	.word	0x00eb00eb
 8006bf8:	00eb00eb 	.word	0x00eb00eb
 8006bfc:	00eb00eb 	.word	0x00eb00eb
 8006c00:	00eb017a 	.word	0x00eb017a
 8006c04:	01d201f8 	.word	0x01d201f8
 8006c08:	017a017a 	.word	0x017a017a
 8006c0c:	00eb017a 	.word	0x00eb017a
 8006c10:	00eb00eb 	.word	0x00eb00eb
 8006c14:	02e100eb 	.word	0x02e100eb
 8006c18:	00eb00eb 	.word	0x00eb00eb
 8006c1c:	00eb022d 	.word	0x00eb022d
 8006c20:	00eb00eb 	.word	0x00eb00eb
 8006c24:	00eb0202 	.word	0x00eb0202
 8006c28:	00eb02a4 	.word	0x00eb02a4
 8006c2c:	078300eb 	.word	0x078300eb
 8006c30:	00eb00eb 	.word	0x00eb00eb
 8006c34:	00eb00eb 	.word	0x00eb00eb
 8006c38:	00eb00eb 	.word	0x00eb00eb
 8006c3c:	00eb00eb 	.word	0x00eb00eb
 8006c40:	00eb017a 	.word	0x00eb017a
 8006c44:	01d401f8 	.word	0x01d401f8
 8006c48:	017a017a 	.word	0x017a017a
 8006c4c:	02c7017a 	.word	0x02c7017a
 8006c50:	01cd01d4 	.word	0x01cd01d4
 8006c54:	02d400eb 	.word	0x02d400eb
 8006c58:	026c00eb 	.word	0x026c00eb
 8006c5c:	02b5022f 	.word	0x02b5022f
 8006c60:	00eb01cd 	.word	0x00eb01cd
 8006c64:	007e0202 	.word	0x007e0202
 8006c68:	00eb0780 	.word	0x00eb0780
 8006c6c:	076100eb 	.word	0x076100eb
 8006c70:	007e00eb 	.word	0x007e00eb
 8006c74:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8006c7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006c82:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006c86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006c8a:	2b09      	cmp	r3, #9
 8006c8c:	d9f5      	bls.n	8006c7a <_vfprintf_r+0x1aa>
 8006c8e:	920a      	str	r2, [sp, #40]	; 0x28
 8006c90:	e78e      	b.n	8006bb0 <_vfprintf_r+0xe0>
 8006c92:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006c96:	4658      	mov	r0, fp
 8006c98:	f003 f98e 	bl	8009fb8 <_localeconv_r>
 8006c9c:	6843      	ldr	r3, [r0, #4]
 8006c9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fb f9ed 	bl	8002080 <strlen>
 8006ca6:	901c      	str	r0, [sp, #112]	; 0x70
 8006ca8:	4606      	mov	r6, r0
 8006caa:	4658      	mov	r0, fp
 8006cac:	f003 f984 	bl	8009fb8 <_localeconv_r>
 8006cb0:	6883      	ldr	r3, [r0, #8]
 8006cb2:	9319      	str	r3, [sp, #100]	; 0x64
 8006cb4:	2e00      	cmp	r6, #0
 8006cb6:	f040 86cd 	bne.w	8007a54 <_vfprintf_r+0xf84>
 8006cba:	f89a 6000 	ldrb.w	r6, [sl]
 8006cbe:	e775      	b.n	8006bac <_vfprintf_r+0xdc>
 8006cc0:	9d07      	ldr	r5, [sp, #28]
 8006cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f001 fcad 	bl	8008624 <__swsetup_r>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f041 831c 	bne.w	8008308 <_vfprintf_r+0x1838>
 8006cd0:	89a9      	ldrh	r1, [r5, #12]
 8006cd2:	f001 031a 	and.w	r3, r1, #26
 8006cd6:	2b0a      	cmp	r3, #10
 8006cd8:	f47f af31 	bne.w	8006b3e <_vfprintf_r+0x6e>
 8006cdc:	9a07      	ldr	r2, [sp, #28]
 8006cde:	f9b2 300e 	ldrsh.w	r3, [r2, #14]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f6ff af2b 	blt.w	8006b3e <_vfprintf_r+0x6e>
 8006ce8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006cea:	07d8      	lsls	r0, r3, #31
 8006cec:	d402      	bmi.n	8006cf4 <_vfprintf_r+0x224>
 8006cee:	0589      	lsls	r1, r1, #22
 8006cf0:	f141 813b 	bpl.w	8007f6a <_vfprintf_r+0x149a>
 8006cf4:	9907      	ldr	r1, [sp, #28]
 8006cf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	464a      	mov	r2, r9
 8006cfc:	b055      	add	sp, #340	; 0x154
 8006cfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d02:	f001 bc4f 	b.w	80085a4 <__sbprintf>
 8006d06:	ebba 0605 	subs.w	r6, sl, r5
 8006d0a:	f000 80cb 	beq.w	8006ea4 <_vfprintf_r+0x3d4>
 8006d0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006d10:	4433      	add	r3, r6
 8006d12:	932a      	str	r3, [sp, #168]	; 0xa8
 8006d14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006d16:	3301      	adds	r3, #1
 8006d18:	2b07      	cmp	r3, #7
 8006d1a:	e9c8 5600 	strd	r5, r6, [r8]
 8006d1e:	9329      	str	r3, [sp, #164]	; 0xa4
 8006d20:	dc05      	bgt.n	8006d2e <_vfprintf_r+0x25e>
 8006d22:	f108 0808 	add.w	r8, r8, #8
 8006d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d28:	4433      	add	r3, r6
 8006d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2c:	e72a      	b.n	8006b84 <_vfprintf_r+0xb4>
 8006d2e:	9907      	ldr	r1, [sp, #28]
 8006d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d32:	aa28      	add	r2, sp, #160	; 0xa0
 8006d34:	f004 f8ba 	bl	800aeac <__sprint_r>
 8006d38:	b980      	cbnz	r0, 8006d5c <_vfprintf_r+0x28c>
 8006d3a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006d3e:	e7f2      	b.n	8006d26 <_vfprintf_r+0x256>
 8006d40:	9907      	ldr	r1, [sp, #28]
 8006d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d44:	aa28      	add	r2, sp, #160	; 0xa0
 8006d46:	f004 f8b1 	bl	800aeac <__sprint_r>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	f000 809b 	beq.w	8006e86 <_vfprintf_r+0x3b6>
 8006d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d52:	b11b      	cbz	r3, 8006d5c <_vfprintf_r+0x28c>
 8006d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d56:	4619      	mov	r1, r3
 8006d58:	f002 fe90 	bl	8009a7c <_free_r>
 8006d5c:	9a07      	ldr	r2, [sp, #28]
 8006d5e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8006d60:	07d9      	lsls	r1, r3, #31
 8006d62:	f140 80ea 	bpl.w	8006f3a <_vfprintf_r+0x46a>
 8006d66:	8993      	ldrh	r3, [r2, #12]
 8006d68:	065b      	lsls	r3, r3, #25
 8006d6a:	f101 82d9 	bmi.w	8008320 <_vfprintf_r+0x1850>
 8006d6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d70:	b055      	add	sp, #340	; 0x154
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	9b07      	ldr	r3, [sp, #28]
 8006d78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8006d7c:	0590      	lsls	r0, r2, #22
 8006d7e:	b291      	uxth	r1, r2
 8006d80:	f53f aec4 	bmi.w	8006b0c <_vfprintf_r+0x3c>
 8006d84:	461d      	mov	r5, r3
 8006d86:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006d88:	f003 f91e 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 8006d8c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
 8006d90:	b291      	uxth	r1, r2
 8006d92:	e6bb      	b.n	8006b0c <_vfprintf_r+0x3c>
 8006d94:	2e00      	cmp	r6, #0
 8006d96:	f000 8085 	beq.w	8006ea4 <_vfprintf_r+0x3d4>
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
 8006da0:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8006da4:	2301      	movs	r3, #1
 8006da6:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	9208      	str	r2, [sp, #32]
 8006dae:	920f      	str	r2, [sp, #60]	; 0x3c
 8006db0:	9213      	str	r2, [sp, #76]	; 0x4c
 8006db2:	9210      	str	r2, [sp, #64]	; 0x40
 8006db4:	ad3b      	add	r5, sp, #236	; 0xec
 8006db6:	f017 0302 	ands.w	r3, r7, #2
 8006dba:	d002      	beq.n	8006dc2 <_vfprintf_r+0x2f2>
 8006dbc:	9906      	ldr	r1, [sp, #24]
 8006dbe:	3102      	adds	r1, #2
 8006dc0:	9106      	str	r1, [sp, #24]
 8006dc2:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
 8006dc6:	d107      	bne.n	8006dd8 <_vfprintf_r+0x308>
 8006dc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dca:	9806      	ldr	r0, [sp, #24]
 8006dcc:	eba1 0900 	sub.w	r9, r1, r0
 8006dd0:	f1b9 0f00 	cmp.w	r9, #0
 8006dd4:	f300 8370 	bgt.w	80074b8 <_vfprintf_r+0x9e8>
 8006dd8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8006dda:	b18a      	cbz	r2, 8006e00 <_vfprintf_r+0x330>
 8006ddc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006dde:	f10d 0183 	add.w	r1, sp, #131	; 0x83
 8006de2:	3201      	adds	r2, #1
 8006de4:	3401      	adds	r4, #1
 8006de6:	f8c8 1000 	str.w	r1, [r8]
 8006dea:	2a07      	cmp	r2, #7
 8006dec:	f04f 0101 	mov.w	r1, #1
 8006df0:	942a      	str	r4, [sp, #168]	; 0xa8
 8006df2:	9229      	str	r2, [sp, #164]	; 0xa4
 8006df4:	f8c8 1004 	str.w	r1, [r8, #4]
 8006df8:	f300 83b6 	bgt.w	8007568 <_vfprintf_r+0xa98>
 8006dfc:	f108 0808 	add.w	r8, r8, #8
 8006e00:	b183      	cbz	r3, 8006e24 <_vfprintf_r+0x354>
 8006e02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e04:	aa21      	add	r2, sp, #132	; 0x84
 8006e06:	3301      	adds	r3, #1
 8006e08:	3402      	adds	r4, #2
 8006e0a:	f8c8 2000 	str.w	r2, [r8]
 8006e0e:	2b07      	cmp	r3, #7
 8006e10:	f04f 0202 	mov.w	r2, #2
 8006e14:	942a      	str	r4, [sp, #168]	; 0xa8
 8006e16:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e18:	f8c8 2004 	str.w	r2, [r8, #4]
 8006e1c:	f300 83b2 	bgt.w	8007584 <_vfprintf_r+0xab4>
 8006e20:	f108 0808 	add.w	r8, r8, #8
 8006e24:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8006e28:	f000 8269 	beq.w	80072fe <_vfprintf_r+0x82e>
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e30:	eba3 0b02 	sub.w	fp, r3, r2
 8006e34:	f1bb 0f00 	cmp.w	fp, #0
 8006e38:	f300 82aa 	bgt.w	8007390 <_vfprintf_r+0x8c0>
 8006e3c:	05fb      	lsls	r3, r7, #23
 8006e3e:	f100 8200 	bmi.w	8007242 <_vfprintf_r+0x772>
 8006e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e44:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e48:	441c      	add	r4, r3
 8006e4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8006e4c:	f8c8 5000 	str.w	r5, [r8]
 8006e50:	3301      	adds	r3, #1
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	942a      	str	r4, [sp, #168]	; 0xa8
 8006e56:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e58:	f300 8322 	bgt.w	80074a0 <_vfprintf_r+0x9d0>
 8006e5c:	f108 0808 	add.w	r8, r8, #8
 8006e60:	0778      	lsls	r0, r7, #29
 8006e62:	d505      	bpl.n	8006e70 <_vfprintf_r+0x3a0>
 8006e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e66:	9a06      	ldr	r2, [sp, #24]
 8006e68:	1a9d      	subs	r5, r3, r2
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	f300 8396 	bgt.w	800759c <_vfprintf_r+0xacc>
 8006e70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e74:	9906      	ldr	r1, [sp, #24]
 8006e76:	428a      	cmp	r2, r1
 8006e78:	bfac      	ite	ge
 8006e7a:	189b      	addge	r3, r3, r2
 8006e7c:	185b      	addlt	r3, r3, r1
 8006e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	f47f af5d 	bne.w	8006d40 <_vfprintf_r+0x270>
 8006e86:	2300      	movs	r3, #0
 8006e88:	9329      	str	r3, [sp, #164]	; 0xa4
 8006e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e8c:	b11b      	cbz	r3, 8006e96 <_vfprintf_r+0x3c6>
 8006e8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e92:	f002 fdf3 	bl	8009a7c <_free_r>
 8006e96:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8006e9a:	4655      	mov	r5, sl
 8006e9c:	782b      	ldrb	r3, [r5, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f47f ae63 	bne.w	8006b6a <_vfprintf_r+0x9a>
 8006ea4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f041 81d3 	bne.w	8008252 <_vfprintf_r+0x1782>
 8006eac:	2300      	movs	r3, #0
 8006eae:	9329      	str	r3, [sp, #164]	; 0xa4
 8006eb0:	e754      	b.n	8006d5c <_vfprintf_r+0x28c>
 8006eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eb4:	3307      	adds	r3, #7
 8006eb6:	f023 0207 	bic.w	r2, r3, #7
 8006eba:	e8f2 3402 	ldrd	r3, r4, [r2], #8
 8006ebe:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8006ec2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8006ec6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006eca:	920e      	str	r2, [sp, #56]	; 0x38
 8006ecc:	4699      	mov	r9, r3
 8006ece:	4618      	mov	r0, r3
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4bb5      	ldr	r3, [pc, #724]	; (80071a8 <_vfprintf_r+0x6d8>)
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	f7fb fde8 	bl	8002aac <__aeabi_dcmpun>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 84ef 	bne.w	80078c0 <_vfprintf_r+0xdf0>
 8006ee2:	4bb1      	ldr	r3, [pc, #708]	; (80071a8 <_vfprintf_r+0x6d8>)
 8006ee4:	4648      	mov	r0, r9
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	f7fb fdc0 	bl	8002a70 <__aeabi_dcmple>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f040 84e5 	bne.w	80078c0 <_vfprintf_r+0xdf0>
 8006ef6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006efa:	2200      	movs	r2, #0
 8006efc:	2300      	movs	r3, #0
 8006efe:	f7fb fdad 	bl	8002a5c <__aeabi_dcmplt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f040 8767 	bne.w	8007dd6 <_vfprintf_r+0x1306>
 8006f08:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8006f0c:	4da7      	ldr	r5, [pc, #668]	; (80071ac <_vfprintf_r+0x6dc>)
 8006f0e:	4ba8      	ldr	r3, [pc, #672]	; (80071b0 <_vfprintf_r+0x6e0>)
 8006f10:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8006f14:	2103      	movs	r1, #3
 8006f16:	2e47      	cmp	r6, #71	; 0x47
 8006f18:	bfc8      	it	gt
 8006f1a:	461d      	movgt	r5, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8006f20:	9106      	str	r1, [sp, #24]
 8006f22:	910c      	str	r1, [sp, #48]	; 0x30
 8006f24:	9308      	str	r3, [sp, #32]
 8006f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f28:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f2a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	f43f af42 	beq.w	8006db6 <_vfprintf_r+0x2e6>
 8006f32:	9b06      	ldr	r3, [sp, #24]
 8006f34:	3301      	adds	r3, #1
 8006f36:	9306      	str	r3, [sp, #24]
 8006f38:	e73d      	b.n	8006db6 <_vfprintf_r+0x2e6>
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	899b      	ldrh	r3, [r3, #12]
 8006f3e:	059a      	lsls	r2, r3, #22
 8006f40:	f53f af12 	bmi.w	8006d68 <_vfprintf_r+0x298>
 8006f44:	9c07      	ldr	r4, [sp, #28]
 8006f46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f48:	f003 f840 	bl	8009fcc <__retarget_lock_release_recursive>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	e70b      	b.n	8006d68 <_vfprintf_r+0x298>
 8006f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f52:	f002 fc9b 	bl	800988c <__sinit>
 8006f56:	e5d1      	b.n	8006afc <_vfprintf_r+0x2c>
 8006f58:	f89a 6000 	ldrb.w	r6, [sl]
 8006f5c:	f047 0720 	orr.w	r7, r7, #32
 8006f60:	e624      	b.n	8006bac <_vfprintf_r+0xdc>
 8006f62:	f047 0710 	orr.w	r7, r7, #16
 8006f66:	06ba      	lsls	r2, r7, #26
 8006f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f6a:	f140 843b 	bpl.w	80077e4 <_vfprintf_r+0xd14>
 8006f6e:	3307      	adds	r3, #7
 8006f70:	f023 0307 	bic.w	r3, r3, #7
 8006f74:	461a      	mov	r2, r3
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f852 4b08 	ldr.w	r4, [r2], #8
 8006f7c:	920e      	str	r2, [sp, #56]	; 0x38
 8006f7e:	4699      	mov	r9, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f2c0 844c 	blt.w	800781e <_vfprintf_r+0xd4e>
 8006f86:	9b08      	ldr	r3, [sp, #32]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	f000 82d8 	beq.w	800753e <_vfprintf_r+0xa6e>
 8006f8e:	ea54 0309 	orrs.w	r3, r4, r9
 8006f92:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
 8006f96:	f040 82d3 	bne.w	8007540 <_vfprintf_r+0xa70>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f040 82d4 	bne.w	800754a <_vfprintf_r+0xa7a>
 8006fa2:	465f      	mov	r7, fp
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9308      	str	r3, [sp, #32]
 8006fa8:	930c      	str	r3, [sp, #48]	; 0x30
 8006faa:	ad54      	add	r5, sp, #336	; 0x150
 8006fac:	e11d      	b.n	80071ea <_vfprintf_r+0x71a>
 8006fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8006fb6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8006fba:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
 8006fbe:	930e      	str	r3, [sp, #56]	; 0x38
 8006fc0:	e6f0      	b.n	8006da4 <_vfprintf_r+0x2d4>
 8006fc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	f854 5b04 	ldr.w	r5, [r4], #4
 8006fca:	f04f 0900 	mov.w	r9, #0
 8006fce:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	f000 8593 	beq.w	8007afe <_vfprintf_r+0x102e>
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	f000 8651 	beq.w	8007c80 <_vfprintf_r+0x11b0>
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f7fb f8bc 	bl	8002160 <memchr>
 8006fe8:	900d      	str	r0, [sp, #52]	; 0x34
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f001 810e 	beq.w	800820c <_vfprintf_r+0x173c>
 8006ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff2:	f8cd 9020 	str.w	r9, [sp, #32]
 8006ff6:	1b5b      	subs	r3, r3, r5
 8006ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8006ffa:	940e      	str	r4, [sp, #56]	; 0x38
 8006ffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007000:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007004:	9306      	str	r3, [sp, #24]
 8007006:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800700a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800700e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007012:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8007016:	e789      	b.n	8006f2c <_vfprintf_r+0x45c>
 8007018:	f047 0710 	orr.w	r7, r7, #16
 800701c:	f017 0920 	ands.w	r9, r7, #32
 8007020:	f000 83d2 	beq.w	80077c8 <_vfprintf_r+0xcf8>
 8007024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007026:	3307      	adds	r3, #7
 8007028:	f023 0307 	bic.w	r3, r3, #7
 800702c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007030:	f853 4b08 	ldr.w	r4, [r3], #8
 8007034:	930e      	str	r3, [sp, #56]	; 0x38
 8007036:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
 800703a:	2300      	movs	r3, #0
 800703c:	2200      	movs	r2, #0
 800703e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8007042:	9a08      	ldr	r2, [sp, #32]
 8007044:	1c51      	adds	r1, r2, #1
 8007046:	f000 80b8 	beq.w	80071ba <_vfprintf_r+0x6ea>
 800704a:	ea54 0109 	orrs.w	r1, r4, r9
 800704e:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8007052:	f040 80b1 	bne.w	80071b8 <_vfprintf_r+0x6e8>
 8007056:	2a00      	cmp	r2, #0
 8007058:	f040 85f6 	bne.w	8007c48 <_vfprintf_r+0x1178>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1a1      	bne.n	8006fa4 <_vfprintf_r+0x4d4>
 8007060:	f01b 0301 	ands.w	r3, fp, #1
 8007064:	930c      	str	r3, [sp, #48]	; 0x30
 8007066:	f000 8414 	beq.w	8007892 <_vfprintf_r+0xdc2>
 800706a:	2330      	movs	r3, #48	; 0x30
 800706c:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 8007070:	f20d 154f 	addw	r5, sp, #335	; 0x14f
 8007074:	e0b9      	b.n	80071ea <_vfprintf_r+0x71a>
 8007076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007078:	f853 2b04 	ldr.w	r2, [r3], #4
 800707c:	920a      	str	r2, [sp, #40]	; 0x28
 800707e:	2a00      	cmp	r2, #0
 8007080:	f280 83da 	bge.w	8007838 <_vfprintf_r+0xd68>
 8007084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007086:	930e      	str	r3, [sp, #56]	; 0x38
 8007088:	4252      	negs	r2, r2
 800708a:	920a      	str	r2, [sp, #40]	; 0x28
 800708c:	f89a 6000 	ldrb.w	r6, [sl]
 8007090:	f047 0704 	orr.w	r7, r7, #4
 8007094:	e58a      	b.n	8006bac <_vfprintf_r+0xdc>
 8007096:	06bd      	lsls	r5, r7, #26
 8007098:	f100 84d1 	bmi.w	8007a3e <_vfprintf_r+0xf6e>
 800709c:	06fc      	lsls	r4, r7, #27
 800709e:	f100 85d8 	bmi.w	8007c52 <_vfprintf_r+0x1182>
 80070a2:	0678      	lsls	r0, r7, #25
 80070a4:	f100 86a5 	bmi.w	8007df2 <_vfprintf_r+0x1322>
 80070a8:	05b9      	lsls	r1, r7, #22
 80070aa:	f140 85d2 	bpl.w	8007c52 <_vfprintf_r+0x1182>
 80070ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b6:	930e      	str	r3, [sp, #56]	; 0x38
 80070b8:	7011      	strb	r1, [r2, #0]
 80070ba:	4655      	mov	r5, sl
 80070bc:	e6ee      	b.n	8006e9c <_vfprintf_r+0x3cc>
 80070be:	f89a 6000 	ldrb.w	r6, [sl]
 80070c2:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
 80070c6:	e571      	b.n	8006bac <_vfprintf_r+0xdc>
 80070c8:	f89a 6000 	ldrb.w	r6, [sl]
 80070cc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80070d0:	e56c      	b.n	8006bac <_vfprintf_r+0xdc>
 80070d2:	4652      	mov	r2, sl
 80070d4:	f812 6b01 	ldrb.w	r6, [r2], #1
 80070d8:	2e2a      	cmp	r6, #42	; 0x2a
 80070da:	f001 823f 	beq.w	800855c <_vfprintf_r+0x1a8c>
 80070de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	4692      	mov	sl, r2
 80070e6:	bf98      	it	ls
 80070e8:	2200      	movls	r2, #0
 80070ea:	f201 80bc 	bhi.w	8008266 <_vfprintf_r+0x1796>
 80070ee:	f81a 6b01 	ldrb.w	r6, [sl], #1
 80070f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80070f6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80070fa:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80070fe:	2b09      	cmp	r3, #9
 8007100:	d9f5      	bls.n	80070ee <_vfprintf_r+0x61e>
 8007102:	9208      	str	r2, [sp, #32]
 8007104:	e554      	b.n	8006bb0 <_vfprintf_r+0xe0>
 8007106:	f047 0b10 	orr.w	fp, r7, #16
 800710a:	f01b 0920 	ands.w	r9, fp, #32
 800710e:	f000 8376 	beq.w	80077fe <_vfprintf_r+0xd2e>
 8007112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007114:	3307      	adds	r3, #7
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800711e:	f853 4b08 	ldr.w	r4, [r3], #8
 8007122:	930e      	str	r3, [sp, #56]	; 0x38
 8007124:	2301      	movs	r3, #1
 8007126:	e789      	b.n	800703c <_vfprintf_r+0x56c>
 8007128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800712a:	f853 4b04 	ldr.w	r4, [r3], #4
 800712e:	930e      	str	r3, [sp, #56]	; 0x38
 8007130:	2330      	movs	r3, #48	; 0x30
 8007132:	2678      	movs	r6, #120	; 0x78
 8007134:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007138:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <_vfprintf_r+0x6e4>)
 800713a:	9318      	str	r3, [sp, #96]	; 0x60
 800713c:	f047 0b02 	orr.w	fp, r7, #2
 8007140:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
 8007144:	f04f 0900 	mov.w	r9, #0
 8007148:	2302      	movs	r3, #2
 800714a:	e777      	b.n	800703c <_vfprintf_r+0x56c>
 800714c:	f89a 6000 	ldrb.w	r6, [sl]
 8007150:	2e68      	cmp	r6, #104	; 0x68
 8007152:	bf03      	ittte	eq
 8007154:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8007158:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
 800715c:	f10a 0a01 	addeq.w	sl, sl, #1
 8007160:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
 8007164:	e522      	b.n	8006bac <_vfprintf_r+0xdc>
 8007166:	f89a 6000 	ldrb.w	r6, [sl]
 800716a:	2e6c      	cmp	r6, #108	; 0x6c
 800716c:	bf03      	ittte	eq
 800716e:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8007172:	f047 0720 	orreq.w	r7, r7, #32
 8007176:	f10a 0a01 	addeq.w	sl, sl, #1
 800717a:	f047 0710 	orrne.w	r7, r7, #16
 800717e:	e515      	b.n	8006bac <_vfprintf_r+0xdc>
 8007180:	f89a 6000 	ldrb.w	r6, [sl]
 8007184:	f047 0708 	orr.w	r7, r7, #8
 8007188:	e510      	b.n	8006bac <_vfprintf_r+0xdc>
 800718a:	f89a 6000 	ldrb.w	r6, [sl]
 800718e:	f047 0701 	orr.w	r7, r7, #1
 8007192:	e50b      	b.n	8006bac <_vfprintf_r+0xdc>
 8007194:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f ad8e 	bne.w	8006cba <_vfprintf_r+0x1ea>
 800719e:	f89a 6000 	ldrb.w	r6, [sl]
 80071a2:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
 80071a6:	e501      	b.n	8006bac <_vfprintf_r+0xdc>
 80071a8:	7fefffff 	.word	0x7fefffff
 80071ac:	0800d604 	.word	0x0800d604
 80071b0:	0800d608 	.word	0x0800d608
 80071b4:	0800d614 	.word	0x0800d614
 80071b8:	46bb      	mov	fp, r7
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	f000 81c0 	beq.w	8007540 <_vfprintf_r+0xa70>
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	ad54      	add	r5, sp, #336	; 0x150
 80071c4:	d120      	bne.n	8007208 <_vfprintf_r+0x738>
 80071c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071c8:	f004 030f 	and.w	r3, r4, #15
 80071cc:	0924      	lsrs	r4, r4, #4
 80071ce:	5cd3      	ldrb	r3, [r2, r3]
 80071d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071d4:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
 80071d8:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80071dc:	ea54 0309 	orrs.w	r3, r4, r9
 80071e0:	d1f2      	bne.n	80071c8 <_vfprintf_r+0x6f8>
 80071e2:	ab54      	add	r3, sp, #336	; 0x150
 80071e4:	1b5b      	subs	r3, r3, r5
 80071e6:	465f      	mov	r7, fp
 80071e8:	930c      	str	r3, [sp, #48]	; 0x30
 80071ea:	9908      	ldr	r1, [sp, #32]
 80071ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071ee:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 80071f2:	4281      	cmp	r1, r0
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	bfb8      	it	lt
 80071fa:	4601      	movlt	r1, r0
 80071fc:	930d      	str	r3, [sp, #52]	; 0x34
 80071fe:	9106      	str	r1, [sp, #24]
 8007200:	930f      	str	r3, [sp, #60]	; 0x3c
 8007202:	9313      	str	r3, [sp, #76]	; 0x4c
 8007204:	9310      	str	r3, [sp, #64]	; 0x40
 8007206:	e691      	b.n	8006f2c <_vfprintf_r+0x45c>
 8007208:	f004 0307 	and.w	r3, r4, #7
 800720c:	08e4      	lsrs	r4, r4, #3
 800720e:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
 8007212:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8007216:	3330      	adds	r3, #48	; 0x30
 8007218:	ea54 0109 	orrs.w	r1, r4, r9
 800721c:	462a      	mov	r2, r5
 800721e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007222:	d1f1      	bne.n	8007208 <_vfprintf_r+0x738>
 8007224:	f01b 0f01 	tst.w	fp, #1
 8007228:	d0db      	beq.n	80071e2 <_vfprintf_r+0x712>
 800722a:	2b30      	cmp	r3, #48	; 0x30
 800722c:	d0d9      	beq.n	80071e2 <_vfprintf_r+0x712>
 800722e:	2330      	movs	r3, #48	; 0x30
 8007230:	3a02      	subs	r2, #2
 8007232:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007236:	ab54      	add	r3, sp, #336	; 0x150
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	465f      	mov	r7, fp
 800723c:	930c      	str	r3, [sp, #48]	; 0x30
 800723e:	4615      	mov	r5, r2
 8007240:	e7d3      	b.n	80071ea <_vfprintf_r+0x71a>
 8007242:	2e65      	cmp	r6, #101	; 0x65
 8007244:	f340 80e6 	ble.w	8007414 <_vfprintf_r+0x944>
 8007248:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800724c:	2200      	movs	r2, #0
 800724e:	2300      	movs	r3, #0
 8007250:	f7fb fbfa 	bl	8002a48 <__aeabi_dcmpeq>
 8007254:	2800      	cmp	r0, #0
 8007256:	f000 81dc 	beq.w	8007612 <_vfprintf_r+0xb42>
 800725a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800725c:	4abf      	ldr	r2, [pc, #764]	; (800755c <_vfprintf_r+0xa8c>)
 800725e:	f8c8 2000 	str.w	r2, [r8]
 8007262:	3301      	adds	r3, #1
 8007264:	3401      	adds	r4, #1
 8007266:	2201      	movs	r2, #1
 8007268:	2b07      	cmp	r3, #7
 800726a:	942a      	str	r4, [sp, #168]	; 0xa8
 800726c:	9329      	str	r3, [sp, #164]	; 0xa4
 800726e:	f8c8 2004 	str.w	r2, [r8, #4]
 8007272:	f300 84cc 	bgt.w	8007c0e <_vfprintf_r+0x113e>
 8007276:	f108 0808 	add.w	r8, r8, #8
 800727a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800727c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800727e:	4293      	cmp	r3, r2
 8007280:	f280 82d6 	bge.w	8007830 <_vfprintf_r+0xd60>
 8007284:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007286:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007288:	441c      	add	r4, r3
 800728a:	e9c8 2300 	strd	r2, r3, [r8]
 800728e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007290:	942a      	str	r4, [sp, #168]	; 0xa8
 8007292:	3301      	adds	r3, #1
 8007294:	2b07      	cmp	r3, #7
 8007296:	9329      	str	r3, [sp, #164]	; 0xa4
 8007298:	f300 8424 	bgt.w	8007ae4 <_vfprintf_r+0x1014>
 800729c:	f108 0808 	add.w	r8, r8, #8
 80072a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072a2:	1e5d      	subs	r5, r3, #1
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	f77f addb 	ble.w	8006e60 <_vfprintf_r+0x390>
 80072aa:	2d10      	cmp	r5, #16
 80072ac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80072ae:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8007560 <_vfprintf_r+0xa90>
 80072b2:	f340 84bd 	ble.w	8007c30 <_vfprintf_r+0x1160>
 80072b6:	4649      	mov	r1, r9
 80072b8:	4622      	mov	r2, r4
 80072ba:	46b9      	mov	r9, r7
 80072bc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80072c0:	9c07      	ldr	r4, [sp, #28]
 80072c2:	2610      	movs	r6, #16
 80072c4:	460f      	mov	r7, r1
 80072c6:	e005      	b.n	80072d4 <_vfprintf_r+0x804>
 80072c8:	f108 0808 	add.w	r8, r8, #8
 80072cc:	3d10      	subs	r5, #16
 80072ce:	2d10      	cmp	r5, #16
 80072d0:	f340 84aa 	ble.w	8007c28 <_vfprintf_r+0x1158>
 80072d4:	3301      	adds	r3, #1
 80072d6:	3210      	adds	r2, #16
 80072d8:	2b07      	cmp	r3, #7
 80072da:	e9c8 7600 	strd	r7, r6, [r8]
 80072de:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80072e2:	ddf1      	ble.n	80072c8 <_vfprintf_r+0x7f8>
 80072e4:	aa28      	add	r2, sp, #160	; 0xa0
 80072e6:	4621      	mov	r1, r4
 80072e8:	4658      	mov	r0, fp
 80072ea:	f003 fddf 	bl	800aeac <__sprint_r>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f47f ad2e 	bne.w	8006d50 <_vfprintf_r+0x280>
 80072f4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80072f8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80072fc:	e7e6      	b.n	80072cc <_vfprintf_r+0x7fc>
 80072fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007300:	9a06      	ldr	r2, [sp, #24]
 8007302:	eba3 0b02 	sub.w	fp, r3, r2
 8007306:	f1bb 0f00 	cmp.w	fp, #0
 800730a:	f77f ad8f 	ble.w	8006e2c <_vfprintf_r+0x35c>
 800730e:	f1bb 0f10 	cmp.w	fp, #16
 8007312:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007314:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8007560 <_vfprintf_r+0xa90>
 8007318:	dd2c      	ble.n	8007374 <_vfprintf_r+0x8a4>
 800731a:	961d      	str	r6, [sp, #116]	; 0x74
 800731c:	4621      	mov	r1, r4
 800731e:	464e      	mov	r6, r9
 8007320:	9c07      	ldr	r4, [sp, #28]
 8007322:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007326:	2310      	movs	r3, #16
 8007328:	e006      	b.n	8007338 <_vfprintf_r+0x868>
 800732a:	f1ab 0b10 	sub.w	fp, fp, #16
 800732e:	f1bb 0f10 	cmp.w	fp, #16
 8007332:	f108 0808 	add.w	r8, r8, #8
 8007336:	dd1a      	ble.n	800736e <_vfprintf_r+0x89e>
 8007338:	3201      	adds	r2, #1
 800733a:	3110      	adds	r1, #16
 800733c:	2a07      	cmp	r2, #7
 800733e:	e9c8 6300 	strd	r6, r3, [r8]
 8007342:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 8007346:	ddf0      	ble.n	800732a <_vfprintf_r+0x85a>
 8007348:	aa28      	add	r2, sp, #160	; 0xa0
 800734a:	4621      	mov	r1, r4
 800734c:	4648      	mov	r0, r9
 800734e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007352:	f003 fdab 	bl	800aeac <__sprint_r>
 8007356:	2800      	cmp	r0, #0
 8007358:	f47f acfa 	bne.w	8006d50 <_vfprintf_r+0x280>
 800735c:	f1ab 0b10 	sub.w	fp, fp, #16
 8007360:	f1bb 0f10 	cmp.w	fp, #16
 8007364:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8007368:	f04f 0310 	mov.w	r3, #16
 800736c:	dce4      	bgt.n	8007338 <_vfprintf_r+0x868>
 800736e:	46b1      	mov	r9, r6
 8007370:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007372:	460c      	mov	r4, r1
 8007374:	3201      	adds	r2, #1
 8007376:	445c      	add	r4, fp
 8007378:	2a07      	cmp	r2, #7
 800737a:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 800737e:	f8c8 9000 	str.w	r9, [r8]
 8007382:	f8c8 b004 	str.w	fp, [r8, #4]
 8007386:	f300 83a0 	bgt.w	8007aca <_vfprintf_r+0xffa>
 800738a:	f108 0808 	add.w	r8, r8, #8
 800738e:	e54d      	b.n	8006e2c <_vfprintf_r+0x35c>
 8007390:	f1bb 0f10 	cmp.w	fp, #16
 8007394:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007396:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8007560 <_vfprintf_r+0xa90>
 800739a:	dd2d      	ble.n	80073f8 <_vfprintf_r+0x928>
 800739c:	4620      	mov	r0, r4
 800739e:	4641      	mov	r1, r8
 80073a0:	464c      	mov	r4, r9
 80073a2:	46a8      	mov	r8, r5
 80073a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80073a8:	9d07      	ldr	r5, [sp, #28]
 80073aa:	2310      	movs	r3, #16
 80073ac:	e006      	b.n	80073bc <_vfprintf_r+0x8ec>
 80073ae:	f1ab 0b10 	sub.w	fp, fp, #16
 80073b2:	f1bb 0f10 	cmp.w	fp, #16
 80073b6:	f101 0108 	add.w	r1, r1, #8
 80073ba:	dd19      	ble.n	80073f0 <_vfprintf_r+0x920>
 80073bc:	3201      	adds	r2, #1
 80073be:	3010      	adds	r0, #16
 80073c0:	2a07      	cmp	r2, #7
 80073c2:	e9c1 4300 	strd	r4, r3, [r1]
 80073c6:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
 80073ca:	ddf0      	ble.n	80073ae <_vfprintf_r+0x8de>
 80073cc:	aa28      	add	r2, sp, #160	; 0xa0
 80073ce:	4629      	mov	r1, r5
 80073d0:	4648      	mov	r0, r9
 80073d2:	f003 fd6b 	bl	800aeac <__sprint_r>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f47f acba 	bne.w	8006d50 <_vfprintf_r+0x280>
 80073dc:	f1ab 0b10 	sub.w	fp, fp, #16
 80073e0:	f1bb 0f10 	cmp.w	fp, #16
 80073e4:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
 80073e8:	a92b      	add	r1, sp, #172	; 0xac
 80073ea:	f04f 0310 	mov.w	r3, #16
 80073ee:	dce5      	bgt.n	80073bc <_vfprintf_r+0x8ec>
 80073f0:	4645      	mov	r5, r8
 80073f2:	46a1      	mov	r9, r4
 80073f4:	4688      	mov	r8, r1
 80073f6:	4604      	mov	r4, r0
 80073f8:	3201      	adds	r2, #1
 80073fa:	445c      	add	r4, fp
 80073fc:	2a07      	cmp	r2, #7
 80073fe:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8007402:	f8c8 9000 	str.w	r9, [r8]
 8007406:	f8c8 b004 	str.w	fp, [r8, #4]
 800740a:	f300 81d0 	bgt.w	80077ae <_vfprintf_r+0xcde>
 800740e:	f108 0808 	add.w	r8, r8, #8
 8007412:	e513      	b.n	8006e3c <_vfprintf_r+0x36c>
 8007414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007416:	2b01      	cmp	r3, #1
 8007418:	f340 8180 	ble.w	800771c <_vfprintf_r+0xc4c>
 800741c:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800741e:	f8c8 5000 	str.w	r5, [r8]
 8007422:	3601      	adds	r6, #1
 8007424:	3401      	adds	r4, #1
 8007426:	2301      	movs	r3, #1
 8007428:	2e07      	cmp	r6, #7
 800742a:	942a      	str	r4, [sp, #168]	; 0xa8
 800742c:	9629      	str	r6, [sp, #164]	; 0xa4
 800742e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007432:	f300 837c 	bgt.w	8007b2e <_vfprintf_r+0x105e>
 8007436:	f108 0808 	add.w	r8, r8, #8
 800743a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800743c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800743e:	3601      	adds	r6, #1
 8007440:	441c      	add	r4, r3
 8007442:	2e07      	cmp	r6, #7
 8007444:	e9c8 2300 	strd	r2, r3, [r8]
 8007448:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 800744c:	f300 837c 	bgt.w	8007b48 <_vfprintf_r+0x1078>
 8007450:	f108 0808 	add.w	r8, r8, #8
 8007454:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007458:	2200      	movs	r2, #0
 800745a:	2300      	movs	r3, #0
 800745c:	f7fb faf4 	bl	8002a48 <__aeabi_dcmpeq>
 8007460:	2800      	cmp	r0, #0
 8007462:	f040 8178 	bne.w	8007756 <_vfprintf_r+0xc86>
 8007466:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007468:	3601      	adds	r6, #1
 800746a:	3b01      	subs	r3, #1
 800746c:	3501      	adds	r5, #1
 800746e:	441c      	add	r4, r3
 8007470:	2e07      	cmp	r6, #7
 8007472:	f8c8 5000 	str.w	r5, [r8]
 8007476:	9629      	str	r6, [sp, #164]	; 0xa4
 8007478:	f8c8 3004 	str.w	r3, [r8, #4]
 800747c:	942a      	str	r4, [sp, #168]	; 0xa8
 800747e:	f300 815d 	bgt.w	800773c <_vfprintf_r+0xc6c>
 8007482:	f108 0808 	add.w	r8, r8, #8
 8007486:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007488:	f8c8 3004 	str.w	r3, [r8, #4]
 800748c:	3601      	adds	r6, #1
 800748e:	441c      	add	r4, r3
 8007490:	2e07      	cmp	r6, #7
 8007492:	ab24      	add	r3, sp, #144	; 0x90
 8007494:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 8007498:	f8c8 3000 	str.w	r3, [r8]
 800749c:	f77f acde 	ble.w	8006e5c <_vfprintf_r+0x38c>
 80074a0:	9907      	ldr	r1, [sp, #28]
 80074a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074a4:	aa28      	add	r2, sp, #160	; 0xa0
 80074a6:	f003 fd01 	bl	800aeac <__sprint_r>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	f47f ac50 	bne.w	8006d50 <_vfprintf_r+0x280>
 80074b0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80074b2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80074b6:	e4d3      	b.n	8006e60 <_vfprintf_r+0x390>
 80074b8:	f1b9 0f10 	cmp.w	r9, #16
 80074bc:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80074c0:	dd2b      	ble.n	800751a <_vfprintf_r+0xa4a>
 80074c2:	e9cd 3b1d 	strd	r3, fp, [sp, #116]	; 0x74
 80074c6:	961f      	str	r6, [sp, #124]	; 0x7c
 80074c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80074cc:	464e      	mov	r6, r9
 80074ce:	2410      	movs	r4, #16
 80074d0:	46a9      	mov	r9, r5
 80074d2:	9d07      	ldr	r5, [sp, #28]
 80074d4:	e004      	b.n	80074e0 <_vfprintf_r+0xa10>
 80074d6:	3e10      	subs	r6, #16
 80074d8:	2e10      	cmp	r6, #16
 80074da:	f108 0808 	add.w	r8, r8, #8
 80074de:	dd17      	ble.n	8007510 <_vfprintf_r+0xa40>
 80074e0:	3201      	adds	r2, #1
 80074e2:	4b20      	ldr	r3, [pc, #128]	; (8007564 <_vfprintf_r+0xa94>)
 80074e4:	3110      	adds	r1, #16
 80074e6:	2a07      	cmp	r2, #7
 80074e8:	e9c8 3400 	strd	r3, r4, [r8]
 80074ec:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 80074f0:	ddf1      	ble.n	80074d6 <_vfprintf_r+0xa06>
 80074f2:	aa28      	add	r2, sp, #160	; 0xa0
 80074f4:	4629      	mov	r1, r5
 80074f6:	4658      	mov	r0, fp
 80074f8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80074fc:	f003 fcd6 	bl	800aeac <__sprint_r>
 8007500:	2800      	cmp	r0, #0
 8007502:	f47f ac25 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007506:	3e10      	subs	r6, #16
 8007508:	2e10      	cmp	r6, #16
 800750a:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 800750e:	dce7      	bgt.n	80074e0 <_vfprintf_r+0xa10>
 8007510:	e9dd 3b1d 	ldrd	r3, fp, [sp, #116]	; 0x74
 8007514:	464d      	mov	r5, r9
 8007516:	46b1      	mov	r9, r6
 8007518:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800751a:	f8c8 9004 	str.w	r9, [r8, #4]
 800751e:	3201      	adds	r2, #1
 8007520:	eb09 0401 	add.w	r4, r9, r1
 8007524:	2a07      	cmp	r2, #7
 8007526:	490f      	ldr	r1, [pc, #60]	; (8007564 <_vfprintf_r+0xa94>)
 8007528:	f8c8 1000 	str.w	r1, [r8]
 800752c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8007530:	f300 8351 	bgt.w	8007bd6 <_vfprintf_r+0x1106>
 8007534:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007538:	f108 0808 	add.w	r8, r8, #8
 800753c:	e44d      	b.n	8006dda <_vfprintf_r+0x30a>
 800753e:	46bb      	mov	fp, r7
 8007540:	2c0a      	cmp	r4, #10
 8007542:	f179 0300 	sbcs.w	r3, r9, #0
 8007546:	f080 830c 	bcs.w	8007b62 <_vfprintf_r+0x1092>
 800754a:	3430      	adds	r4, #48	; 0x30
 800754c:	2301      	movs	r3, #1
 800754e:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 8007552:	465f      	mov	r7, fp
 8007554:	930c      	str	r3, [sp, #48]	; 0x30
 8007556:	f20d 154f 	addw	r5, sp, #335	; 0x14f
 800755a:	e646      	b.n	80071ea <_vfprintf_r+0x71a>
 800755c:	0800d644 	.word	0x0800d644
 8007560:	0800d658 	.word	0x0800d658
 8007564:	0800d648 	.word	0x0800d648
 8007568:	9907      	ldr	r1, [sp, #28]
 800756a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800756c:	931d      	str	r3, [sp, #116]	; 0x74
 800756e:	aa28      	add	r2, sp, #160	; 0xa0
 8007570:	f003 fc9c 	bl	800aeac <__sprint_r>
 8007574:	2800      	cmp	r0, #0
 8007576:	f47f abeb 	bne.w	8006d50 <_vfprintf_r+0x280>
 800757a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800757c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800757e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007582:	e43d      	b.n	8006e00 <_vfprintf_r+0x330>
 8007584:	9907      	ldr	r1, [sp, #28]
 8007586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007588:	aa28      	add	r2, sp, #160	; 0xa0
 800758a:	f003 fc8f 	bl	800aeac <__sprint_r>
 800758e:	2800      	cmp	r0, #0
 8007590:	f47f abde 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007594:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007596:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800759a:	e443      	b.n	8006e24 <_vfprintf_r+0x354>
 800759c:	2d10      	cmp	r5, #16
 800759e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075a0:	dd21      	ble.n	80075e6 <_vfprintf_r+0xb16>
 80075a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075a4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80075a8:	2610      	movs	r6, #16
 80075aa:	e004      	b.n	80075b6 <_vfprintf_r+0xae6>
 80075ac:	3d10      	subs	r5, #16
 80075ae:	2d10      	cmp	r5, #16
 80075b0:	f108 0808 	add.w	r8, r8, #8
 80075b4:	dd17      	ble.n	80075e6 <_vfprintf_r+0xb16>
 80075b6:	3301      	adds	r3, #1
 80075b8:	4abb      	ldr	r2, [pc, #748]	; (80078a8 <_vfprintf_r+0xdd8>)
 80075ba:	3410      	adds	r4, #16
 80075bc:	2b07      	cmp	r3, #7
 80075be:	e9c8 2600 	strd	r2, r6, [r8]
 80075c2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80075c6:	ddf1      	ble.n	80075ac <_vfprintf_r+0xadc>
 80075c8:	aa28      	add	r2, sp, #160	; 0xa0
 80075ca:	4649      	mov	r1, r9
 80075cc:	4638      	mov	r0, r7
 80075ce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80075d2:	f003 fc6b 	bl	800aeac <__sprint_r>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	f47f abba 	bne.w	8006d50 <_vfprintf_r+0x280>
 80075dc:	3d10      	subs	r5, #16
 80075de:	2d10      	cmp	r5, #16
 80075e0:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
 80075e4:	dce7      	bgt.n	80075b6 <_vfprintf_r+0xae6>
 80075e6:	3301      	adds	r3, #1
 80075e8:	4aaf      	ldr	r2, [pc, #700]	; (80078a8 <_vfprintf_r+0xdd8>)
 80075ea:	f8c8 5004 	str.w	r5, [r8, #4]
 80075ee:	442c      	add	r4, r5
 80075f0:	2b07      	cmp	r3, #7
 80075f2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80075f6:	f8c8 2000 	str.w	r2, [r8]
 80075fa:	f77f ac39 	ble.w	8006e70 <_vfprintf_r+0x3a0>
 80075fe:	9907      	ldr	r1, [sp, #28]
 8007600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007602:	aa28      	add	r2, sp, #160	; 0xa0
 8007604:	f003 fc52 	bl	800aeac <__sprint_r>
 8007608:	2800      	cmp	r0, #0
 800760a:	f47f aba1 	bne.w	8006d50 <_vfprintf_r+0x280>
 800760e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007610:	e42e      	b.n	8006e70 <_vfprintf_r+0x3a0>
 8007612:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007614:	2900      	cmp	r1, #0
 8007616:	f340 8114 	ble.w	8007842 <_vfprintf_r+0xd72>
 800761a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800761e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007620:	4599      	cmp	r9, r3
 8007622:	bfa8      	it	ge
 8007624:	4699      	movge	r9, r3
 8007626:	f1b9 0f00 	cmp.w	r9, #0
 800762a:	dd0b      	ble.n	8007644 <_vfprintf_r+0xb74>
 800762c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800762e:	3301      	adds	r3, #1
 8007630:	444c      	add	r4, r9
 8007632:	2b07      	cmp	r3, #7
 8007634:	e9c8 5900 	strd	r5, r9, [r8]
 8007638:	942a      	str	r4, [sp, #168]	; 0xa8
 800763a:	9329      	str	r3, [sp, #164]	; 0xa4
 800763c:	f300 859a 	bgt.w	8008174 <_vfprintf_r+0x16a4>
 8007640:	f108 0808 	add.w	r8, r8, #8
 8007644:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007646:	f1b9 0f00 	cmp.w	r9, #0
 800764a:	bfa8      	it	ge
 800764c:	eba6 0609 	subge.w	r6, r6, r9
 8007650:	2e00      	cmp	r6, #0
 8007652:	f300 8346 	bgt.w	8007ce2 <_vfprintf_r+0x1212>
 8007656:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800765a:	0579      	lsls	r1, r7, #21
 800765c:	44ab      	add	fp, r5
 800765e:	f100 84ce 	bmi.w	8007ffe <_vfprintf_r+0x152e>
 8007662:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007666:	4293      	cmp	r3, r2
 8007668:	db02      	blt.n	8007670 <_vfprintf_r+0xba0>
 800766a:	07fa      	lsls	r2, r7, #31
 800766c:	f140 83b8 	bpl.w	8007de0 <_vfprintf_r+0x1310>
 8007670:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007672:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007674:	4414      	add	r4, r2
 8007676:	e9c8 1200 	strd	r1, r2, [r8]
 800767a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800767c:	942a      	str	r4, [sp, #168]	; 0xa8
 800767e:	3201      	adds	r2, #1
 8007680:	2a07      	cmp	r2, #7
 8007682:	9229      	str	r2, [sp, #164]	; 0xa4
 8007684:	f300 8583 	bgt.w	800818e <_vfprintf_r+0x16be>
 8007688:	f108 0808 	add.w	r8, r8, #8
 800768c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800768e:	18ae      	adds	r6, r5, r2
 8007690:	eba6 060b 	sub.w	r6, r6, fp
 8007694:	1ad5      	subs	r5, r2, r3
 8007696:	42ae      	cmp	r6, r5
 8007698:	bfa8      	it	ge
 800769a:	462e      	movge	r6, r5
 800769c:	2e00      	cmp	r6, #0
 800769e:	dd0d      	ble.n	80076bc <_vfprintf_r+0xbec>
 80076a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076a2:	f8c8 b000 	str.w	fp, [r8]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4434      	add	r4, r6
 80076aa:	2b07      	cmp	r3, #7
 80076ac:	f8c8 6004 	str.w	r6, [r8, #4]
 80076b0:	942a      	str	r4, [sp, #168]	; 0xa8
 80076b2:	9329      	str	r3, [sp, #164]	; 0xa4
 80076b4:	f300 85f1 	bgt.w	800829a <_vfprintf_r+0x17ca>
 80076b8:	f108 0808 	add.w	r8, r8, #8
 80076bc:	2e00      	cmp	r6, #0
 80076be:	bfa8      	it	ge
 80076c0:	1bad      	subge	r5, r5, r6
 80076c2:	2d00      	cmp	r5, #0
 80076c4:	f77f abcc 	ble.w	8006e60 <_vfprintf_r+0x390>
 80076c8:	2d10      	cmp	r5, #16
 80076ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076cc:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 80078ac <_vfprintf_r+0xddc>
 80076d0:	f340 82ae 	ble.w	8007c30 <_vfprintf_r+0x1160>
 80076d4:	4649      	mov	r1, r9
 80076d6:	4622      	mov	r2, r4
 80076d8:	46b9      	mov	r9, r7
 80076da:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80076de:	9c07      	ldr	r4, [sp, #28]
 80076e0:	2610      	movs	r6, #16
 80076e2:	460f      	mov	r7, r1
 80076e4:	e005      	b.n	80076f2 <_vfprintf_r+0xc22>
 80076e6:	f108 0808 	add.w	r8, r8, #8
 80076ea:	3d10      	subs	r5, #16
 80076ec:	2d10      	cmp	r5, #16
 80076ee:	f340 829b 	ble.w	8007c28 <_vfprintf_r+0x1158>
 80076f2:	3301      	adds	r3, #1
 80076f4:	3210      	adds	r2, #16
 80076f6:	2b07      	cmp	r3, #7
 80076f8:	e9c8 7600 	strd	r7, r6, [r8]
 80076fc:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8007700:	ddf1      	ble.n	80076e6 <_vfprintf_r+0xc16>
 8007702:	aa28      	add	r2, sp, #160	; 0xa0
 8007704:	4621      	mov	r1, r4
 8007706:	4658      	mov	r0, fp
 8007708:	f003 fbd0 	bl	800aeac <__sprint_r>
 800770c:	2800      	cmp	r0, #0
 800770e:	f47f ab1f 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007712:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007716:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800771a:	e7e6      	b.n	80076ea <_vfprintf_r+0xc1a>
 800771c:	07fe      	lsls	r6, r7, #31
 800771e:	f53f ae7d 	bmi.w	800741c <_vfprintf_r+0x94c>
 8007722:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8007724:	f8c8 5000 	str.w	r5, [r8]
 8007728:	3601      	adds	r6, #1
 800772a:	3401      	adds	r4, #1
 800772c:	2301      	movs	r3, #1
 800772e:	2e07      	cmp	r6, #7
 8007730:	942a      	str	r4, [sp, #168]	; 0xa8
 8007732:	9629      	str	r6, [sp, #164]	; 0xa4
 8007734:	f8c8 3004 	str.w	r3, [r8, #4]
 8007738:	f77f aea3 	ble.w	8007482 <_vfprintf_r+0x9b2>
 800773c:	9907      	ldr	r1, [sp, #28]
 800773e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007740:	aa28      	add	r2, sp, #160	; 0xa0
 8007742:	f003 fbb3 	bl	800aeac <__sprint_r>
 8007746:	2800      	cmp	r0, #0
 8007748:	f47f ab02 	bne.w	8006d50 <_vfprintf_r+0x280>
 800774c:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 8007750:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007754:	e697      	b.n	8007486 <_vfprintf_r+0x9b6>
 8007756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007758:	1e5d      	subs	r5, r3, #1
 800775a:	2d00      	cmp	r5, #0
 800775c:	f77f ae93 	ble.w	8007486 <_vfprintf_r+0x9b6>
 8007760:	2d10      	cmp	r5, #16
 8007762:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80078ac <_vfprintf_r+0xddc>
 8007766:	f340 827f 	ble.w	8007c68 <_vfprintf_r+0x1198>
 800776a:	4622      	mov	r2, r4
 800776c:	9708      	str	r7, [sp, #32]
 800776e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007770:	9f07      	ldr	r7, [sp, #28]
 8007772:	f04f 0b10 	mov.w	fp, #16
 8007776:	e005      	b.n	8007784 <_vfprintf_r+0xcb4>
 8007778:	f108 0808 	add.w	r8, r8, #8
 800777c:	3d10      	subs	r5, #16
 800777e:	2d10      	cmp	r5, #16
 8007780:	f340 8270 	ble.w	8007c64 <_vfprintf_r+0x1194>
 8007784:	3601      	adds	r6, #1
 8007786:	3210      	adds	r2, #16
 8007788:	2e07      	cmp	r6, #7
 800778a:	e9c8 9b00 	strd	r9, fp, [r8]
 800778e:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
 8007792:	ddf1      	ble.n	8007778 <_vfprintf_r+0xca8>
 8007794:	aa28      	add	r2, sp, #160	; 0xa0
 8007796:	4639      	mov	r1, r7
 8007798:	4620      	mov	r0, r4
 800779a:	f003 fb87 	bl	800aeac <__sprint_r>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f47f aad6 	bne.w	8006d50 <_vfprintf_r+0x280>
 80077a4:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
 80077a8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80077ac:	e7e6      	b.n	800777c <_vfprintf_r+0xcac>
 80077ae:	9907      	ldr	r1, [sp, #28]
 80077b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077b2:	aa28      	add	r2, sp, #160	; 0xa0
 80077b4:	f003 fb7a 	bl	800aeac <__sprint_r>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f47f aac9 	bne.w	8006d50 <_vfprintf_r+0x280>
 80077be:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80077c0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80077c4:	f7ff bb3a 	b.w	8006e3c <_vfprintf_r+0x36c>
 80077c8:	f017 0310 	ands.w	r3, r7, #16
 80077cc:	d172      	bne.n	80078b4 <_vfprintf_r+0xde4>
 80077ce:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 80077d2:	f000 82bd 	beq.w	8007d50 <_vfprintf_r+0x1280>
 80077d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d8:	f852 4b04 	ldr.w	r4, [r2], #4
 80077dc:	920e      	str	r2, [sp, #56]	; 0x38
 80077de:	4699      	mov	r9, r3
 80077e0:	b2a4      	uxth	r4, r4
 80077e2:	e428      	b.n	8007036 <_vfprintf_r+0x566>
 80077e4:	f853 4b04 	ldr.w	r4, [r3], #4
 80077e8:	930e      	str	r3, [sp, #56]	; 0x38
 80077ea:	06fb      	lsls	r3, r7, #27
 80077ec:	d456      	bmi.n	800789c <_vfprintf_r+0xdcc>
 80077ee:	067d      	lsls	r5, r7, #25
 80077f0:	d551      	bpl.n	8007896 <_vfprintf_r+0xdc6>
 80077f2:	f344 39c0 	sbfx	r9, r4, #15, #1
 80077f6:	464b      	mov	r3, r9
 80077f8:	b224      	sxth	r4, r4
 80077fa:	f7ff bbc1 	b.w	8006f80 <_vfprintf_r+0x4b0>
 80077fe:	f01b 0310 	ands.w	r3, fp, #16
 8007802:	f040 8136 	bne.w	8007a72 <_vfprintf_r+0xfa2>
 8007806:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 800780a:	f000 8292 	beq.w	8007d32 <_vfprintf_r+0x1262>
 800780e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007810:	f852 4b04 	ldr.w	r4, [r2], #4
 8007814:	920e      	str	r2, [sp, #56]	; 0x38
 8007816:	4699      	mov	r9, r3
 8007818:	b2a4      	uxth	r4, r4
 800781a:	2301      	movs	r3, #1
 800781c:	e40e      	b.n	800703c <_vfprintf_r+0x56c>
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	4264      	negs	r4, r4
 8007822:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8007826:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 800782a:	46bb      	mov	fp, r7
 800782c:	2301      	movs	r3, #1
 800782e:	e408      	b.n	8007042 <_vfprintf_r+0x572>
 8007830:	07f8      	lsls	r0, r7, #31
 8007832:	f57f ab15 	bpl.w	8006e60 <_vfprintf_r+0x390>
 8007836:	e525      	b.n	8007284 <_vfprintf_r+0x7b4>
 8007838:	f89a 6000 	ldrb.w	r6, [sl]
 800783c:	930e      	str	r3, [sp, #56]	; 0x38
 800783e:	f7ff b9b5 	b.w	8006bac <_vfprintf_r+0xdc>
 8007842:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007844:	4a1a      	ldr	r2, [pc, #104]	; (80078b0 <_vfprintf_r+0xde0>)
 8007846:	f8c8 2000 	str.w	r2, [r8]
 800784a:	3301      	adds	r3, #1
 800784c:	3401      	adds	r4, #1
 800784e:	2201      	movs	r2, #1
 8007850:	2b07      	cmp	r3, #7
 8007852:	942a      	str	r4, [sp, #168]	; 0xa8
 8007854:	9329      	str	r3, [sp, #164]	; 0xa4
 8007856:	f8c8 2004 	str.w	r2, [r8, #4]
 800785a:	f300 8470 	bgt.w	800813e <_vfprintf_r+0x166e>
 800785e:	f108 0808 	add.w	r8, r8, #8
 8007862:	2900      	cmp	r1, #0
 8007864:	f040 821e 	bne.w	8007ca4 <_vfprintf_r+0x11d4>
 8007868:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800786a:	f007 0301 	and.w	r3, r7, #1
 800786e:	4313      	orrs	r3, r2
 8007870:	f43f aaf6 	beq.w	8006e60 <_vfprintf_r+0x390>
 8007874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007876:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007878:	18e2      	adds	r2, r4, r3
 800787a:	e9c8 1300 	strd	r1, r3, [r8]
 800787e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007880:	922a      	str	r2, [sp, #168]	; 0xa8
 8007882:	3301      	adds	r3, #1
 8007884:	2b07      	cmp	r3, #7
 8007886:	9329      	str	r3, [sp, #164]	; 0xa4
 8007888:	f300 8361 	bgt.w	8007f4e <_vfprintf_r+0x147e>
 800788c:	f108 0808 	add.w	r8, r8, #8
 8007890:	e219      	b.n	8007cc6 <_vfprintf_r+0x11f6>
 8007892:	ad54      	add	r5, sp, #336	; 0x150
 8007894:	e4a9      	b.n	80071ea <_vfprintf_r+0x71a>
 8007896:	05b8      	lsls	r0, r7, #22
 8007898:	f100 82b4 	bmi.w	8007e04 <_vfprintf_r+0x1334>
 800789c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80078a0:	464b      	mov	r3, r9
 80078a2:	f7ff bb6d 	b.w	8006f80 <_vfprintf_r+0x4b0>
 80078a6:	bf00      	nop
 80078a8:	0800d648 	.word	0x0800d648
 80078ac:	0800d658 	.word	0x0800d658
 80078b0:	0800d644 	.word	0x0800d644
 80078b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b6:	f853 4b04 	ldr.w	r4, [r3], #4
 80078ba:	930e      	str	r3, [sp, #56]	; 0x38
 80078bc:	f7ff bbbb 	b.w	8007036 <_vfprintf_r+0x566>
 80078c0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	f7fb f8f0 	bl	8002aac <__aeabi_dcmpun>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f040 85a0 	bne.w	8008412 <_vfprintf_r+0x1942>
 80078d2:	2e61      	cmp	r6, #97	; 0x61
 80078d4:	f000 8550 	beq.w	8008378 <_vfprintf_r+0x18a8>
 80078d8:	2e41      	cmp	r6, #65	; 0x41
 80078da:	f000 8299 	beq.w	8007e10 <_vfprintf_r+0x1340>
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	3301      	adds	r3, #1
 80078e2:	f026 0320 	bic.w	r3, r6, #32
 80078e6:	9306      	str	r3, [sp, #24]
 80078e8:	f000 858f 	beq.w	800840a <_vfprintf_r+0x193a>
 80078ec:	2b47      	cmp	r3, #71	; 0x47
 80078ee:	f000 8579 	beq.w	80083e4 <_vfprintf_r+0x1914>
 80078f2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80078f6:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 80078fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80078fc:	4613      	mov	r3, r2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f2c0 85ed 	blt.w	80084de <_vfprintf_r+0x1a0e>
 8007904:	930c      	str	r3, [sp, #48]	; 0x30
 8007906:	2300      	movs	r3, #0
 8007908:	931d      	str	r3, [sp, #116]	; 0x74
 800790a:	468b      	mov	fp, r1
 800790c:	930d      	str	r3, [sp, #52]	; 0x34
 800790e:	9b06      	ldr	r3, [sp, #24]
 8007910:	2b46      	cmp	r3, #70	; 0x46
 8007912:	f000 844a 	beq.w	80081aa <_vfprintf_r+0x16da>
 8007916:	2b45      	cmp	r3, #69	; 0x45
 8007918:	f000 854f 	beq.w	80083ba <_vfprintf_r+0x18ea>
 800791c:	9908      	ldr	r1, [sp, #32]
 800791e:	9101      	str	r1, [sp, #4]
 8007920:	a926      	add	r1, sp, #152	; 0x98
 8007922:	9104      	str	r1, [sp, #16]
 8007924:	a923      	add	r1, sp, #140	; 0x8c
 8007926:	9103      	str	r1, [sp, #12]
 8007928:	a922      	add	r1, sp, #136	; 0x88
 800792a:	9102      	str	r1, [sp, #8]
 800792c:	2102      	movs	r1, #2
 800792e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007932:	9100      	str	r1, [sp, #0]
 8007934:	465a      	mov	r2, fp
 8007936:	f000 ff83 	bl	8008840 <_dtoa_r>
 800793a:	9b06      	ldr	r3, [sp, #24]
 800793c:	2b47      	cmp	r3, #71	; 0x47
 800793e:	4605      	mov	r5, r0
 8007940:	f040 861c 	bne.w	800857c <_vfprintf_r+0x1aac>
 8007944:	f017 0f01 	tst.w	r7, #1
 8007948:	46b9      	mov	r9, r7
 800794a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800794c:	f040 84d9 	bne.w	8008302 <_vfprintf_r+0x1832>
 8007950:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007952:	1b5b      	subs	r3, r3, r5
 8007954:	9312      	str	r3, [sp, #72]	; 0x48
 8007956:	9b06      	ldr	r3, [sp, #24]
 8007958:	2b47      	cmp	r3, #71	; 0x47
 800795a:	f000 8318 	beq.w	8007f8e <_vfprintf_r+0x14be>
 800795e:	9b06      	ldr	r3, [sp, #24]
 8007960:	2b46      	cmp	r3, #70	; 0x46
 8007962:	f000 845f 	beq.w	8008224 <_vfprintf_r+0x1754>
 8007966:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007968:	9310      	str	r3, [sp, #64]	; 0x40
 800796a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800796c:	9a06      	ldr	r2, [sp, #24]
 800796e:	3b01      	subs	r3, #1
 8007970:	2a41      	cmp	r2, #65	; 0x41
 8007972:	9322      	str	r3, [sp, #136]	; 0x88
 8007974:	f000 85aa 	beq.w	80084cc <_vfprintf_r+0x19fc>
 8007978:	b2f2      	uxtb	r2, r6
 800797a:	2100      	movs	r1, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb8      	it	lt
 8007980:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8007982:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8007986:	bfba      	itte	lt
 8007988:	f1c3 0301 	rsblt	r3, r3, #1
 800798c:	222d      	movlt	r2, #45	; 0x2d
 800798e:	222b      	movge	r2, #43	; 0x2b
 8007990:	2b09      	cmp	r3, #9
 8007992:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8007996:	f340 8563 	ble.w	8008460 <_vfprintf_r+0x1990>
 800799a:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
 800799e:	4fbd      	ldr	r7, [pc, #756]	; (8007c94 <_vfprintf_r+0x11c4>)
 80079a0:	4622      	mov	r2, r4
 80079a2:	4610      	mov	r0, r2
 80079a4:	fb87 2103 	smull	r2, r1, r7, r3
 80079a8:	17da      	asrs	r2, r3, #31
 80079aa:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80079ae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80079b2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 80079b6:	3130      	adds	r1, #48	; 0x30
 80079b8:	f800 1c01 	strb.w	r1, [r0, #-1]
 80079bc:	4619      	mov	r1, r3
 80079be:	2963      	cmp	r1, #99	; 0x63
 80079c0:	4613      	mov	r3, r2
 80079c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80079c6:	dcec      	bgt.n	80079a2 <_vfprintf_r+0xed2>
 80079c8:	3330      	adds	r3, #48	; 0x30
 80079ca:	b2d9      	uxtb	r1, r3
 80079cc:	1e83      	subs	r3, r0, #2
 80079ce:	429c      	cmp	r4, r3
 80079d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80079d4:	f240 85ce 	bls.w	8008574 <_vfprintf_r+0x1aa4>
 80079d8:	4613      	mov	r3, r2
 80079da:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80079de:	e001      	b.n	80079e4 <_vfprintf_r+0xf14>
 80079e0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80079e4:	f802 1b01 	strb.w	r1, [r2], #1
 80079e8:	429c      	cmp	r4, r3
 80079ea:	d1f9      	bne.n	80079e0 <_vfprintf_r+0xf10>
 80079ec:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 80079f0:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 80079f4:	1a1b      	subs	r3, r3, r0
 80079f6:	4413      	add	r3, r2
 80079f8:	aa24      	add	r2, sp, #144	; 0x90
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	931a      	str	r3, [sp, #104]	; 0x68
 80079fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	441a      	add	r2, r3
 8007a06:	920c      	str	r2, [sp, #48]	; 0x30
 8007a08:	f340 8572 	ble.w	80084f0 <_vfprintf_r+0x1a20>
 8007a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a10:	4413      	add	r3, r2
 8007a12:	930c      	str	r3, [sp, #48]	; 0x30
 8007a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a16:	2300      	movs	r3, #0
 8007a18:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
 8007a1c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8007a20:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8007a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a26:	9206      	str	r2, [sp, #24]
 8007a28:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f040 82de 	bne.w	8007ff0 <_vfprintf_r+0x1520>
 8007a34:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	f7ff ba77 	b.w	8006f2c <_vfprintf_r+0x45c>
 8007a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a40:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a42:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a46:	930e      	str	r3, [sp, #56]	; 0x38
 8007a48:	17c2      	asrs	r2, r0, #31
 8007a4a:	e9c1 0200 	strd	r0, r2, [r1]
 8007a4e:	4655      	mov	r5, sl
 8007a50:	f7ff ba24 	b.w	8006e9c <_vfprintf_r+0x3cc>
 8007a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f43f a92f 	beq.w	8006cba <_vfprintf_r+0x1ea>
 8007a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f43f a92a 	beq.w	8006cba <_vfprintf_r+0x1ea>
 8007a66:	f89a 6000 	ldrb.w	r6, [sl]
 8007a6a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 8007a6e:	f7ff b89d 	b.w	8006bac <_vfprintf_r+0xdc>
 8007a72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a74:	f853 4b04 	ldr.w	r4, [r3], #4
 8007a78:	930e      	str	r3, [sp, #56]	; 0x38
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f7ff bade 	b.w	800703c <_vfprintf_r+0x56c>
 8007a80:	4b85      	ldr	r3, [pc, #532]	; (8007c98 <_vfprintf_r+0x11c8>)
 8007a82:	9318      	str	r3, [sp, #96]	; 0x60
 8007a84:	f017 0920 	ands.w	r9, r7, #32
 8007a88:	d049      	beq.n	8007b1e <_vfprintf_r+0x104e>
 8007a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007a96:	f853 4b08 	ldr.w	r4, [r3], #8
 8007a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a9c:	07f8      	lsls	r0, r7, #31
 8007a9e:	d509      	bpl.n	8007ab4 <_vfprintf_r+0xfe4>
 8007aa0:	ea54 0309 	orrs.w	r3, r4, r9
 8007aa4:	d006      	beq.n	8007ab4 <_vfprintf_r+0xfe4>
 8007aa6:	2330      	movs	r3, #48	; 0x30
 8007aa8:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
 8007aac:	f047 0702 	orr.w	r7, r7, #2
 8007ab0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007ab4:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
 8007ab8:	2302      	movs	r3, #2
 8007aba:	f7ff babf 	b.w	800703c <_vfprintf_r+0x56c>
 8007abe:	46bb      	mov	fp, r7
 8007ac0:	f7ff bb23 	b.w	800710a <_vfprintf_r+0x63a>
 8007ac4:	4b75      	ldr	r3, [pc, #468]	; (8007c9c <_vfprintf_r+0x11cc>)
 8007ac6:	9318      	str	r3, [sp, #96]	; 0x60
 8007ac8:	e7dc      	b.n	8007a84 <_vfprintf_r+0xfb4>
 8007aca:	9907      	ldr	r1, [sp, #28]
 8007acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ace:	aa28      	add	r2, sp, #160	; 0xa0
 8007ad0:	f003 f9ec 	bl	800aeac <__sprint_r>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f47f a93b 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007ada:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007adc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007ae0:	f7ff b9a4 	b.w	8006e2c <_vfprintf_r+0x35c>
 8007ae4:	9907      	ldr	r1, [sp, #28]
 8007ae6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ae8:	aa28      	add	r2, sp, #160	; 0xa0
 8007aea:	f003 f9df 	bl	800aeac <__sprint_r>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f47f a92e 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007af4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007af6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007afa:	f7ff bbd1 	b.w	80072a0 <_vfprintf_r+0x7d0>
 8007afe:	2b06      	cmp	r3, #6
 8007b00:	4629      	mov	r1, r5
 8007b02:	bf28      	it	cs
 8007b04:	2306      	movcs	r3, #6
 8007b06:	9508      	str	r5, [sp, #32]
 8007b08:	950d      	str	r5, [sp, #52]	; 0x34
 8007b0a:	462a      	mov	r2, r5
 8007b0c:	9306      	str	r3, [sp, #24]
 8007b0e:	4d64      	ldr	r5, [pc, #400]	; (8007ca0 <_vfprintf_r+0x11d0>)
 8007b10:	940e      	str	r4, [sp, #56]	; 0x38
 8007b12:	930c      	str	r3, [sp, #48]	; 0x30
 8007b14:	910f      	str	r1, [sp, #60]	; 0x3c
 8007b16:	9113      	str	r1, [sp, #76]	; 0x4c
 8007b18:	9110      	str	r1, [sp, #64]	; 0x40
 8007b1a:	f7ff ba07 	b.w	8006f2c <_vfprintf_r+0x45c>
 8007b1e:	f017 0310 	ands.w	r3, r7, #16
 8007b22:	d069      	beq.n	8007bf8 <_vfprintf_r+0x1128>
 8007b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b26:	f853 4b04 	ldr.w	r4, [r3], #4
 8007b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b2c:	e7b6      	b.n	8007a9c <_vfprintf_r+0xfcc>
 8007b2e:	9907      	ldr	r1, [sp, #28]
 8007b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b32:	aa28      	add	r2, sp, #160	; 0xa0
 8007b34:	f003 f9ba 	bl	800aeac <__sprint_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f47f a909 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007b3e:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 8007b42:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007b46:	e478      	b.n	800743a <_vfprintf_r+0x96a>
 8007b48:	9907      	ldr	r1, [sp, #28]
 8007b4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4c:	aa28      	add	r2, sp, #160	; 0xa0
 8007b4e:	f003 f9ad 	bl	800aeac <__sprint_r>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	f47f a8fc 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007b58:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 8007b5c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007b60:	e478      	b.n	8007454 <_vfprintf_r+0x984>
 8007b62:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
 8007b66:	2200      	movs	r2, #0
 8007b68:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
 8007b6c:	9606      	str	r6, [sp, #24]
 8007b6e:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8007b72:	af54      	add	r7, sp, #336	; 0x150
 8007b74:	4616      	mov	r6, r2
 8007b76:	469a      	mov	sl, r3
 8007b78:	e00c      	b.n	8007b94 <_vfprintf_r+0x10c4>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	4649      	mov	r1, r9
 8007b80:	220a      	movs	r2, #10
 8007b82:	f7fa ffd1 	bl	8002b28 <__aeabi_uldivmod>
 8007b86:	2c0a      	cmp	r4, #10
 8007b88:	f179 0300 	sbcs.w	r3, r9, #0
 8007b8c:	d31b      	bcc.n	8007bc6 <_vfprintf_r+0x10f6>
 8007b8e:	4604      	mov	r4, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	462f      	mov	r7, r5
 8007b94:	4620      	mov	r0, r4
 8007b96:	220a      	movs	r2, #10
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7fa ffc4 	bl	8002b28 <__aeabi_uldivmod>
 8007ba0:	3230      	adds	r2, #48	; 0x30
 8007ba2:	1e7d      	subs	r5, r7, #1
 8007ba4:	3601      	adds	r6, #1
 8007ba6:	f807 2c01 	strb.w	r2, [r7, #-1]
 8007baa:	f1ba 0f00 	cmp.w	sl, #0
 8007bae:	d0e4      	beq.n	8007b7a <_vfprintf_r+0x10aa>
 8007bb0:	f898 3000 	ldrb.w	r3, [r8]
 8007bb4:	429e      	cmp	r6, r3
 8007bb6:	d1e0      	bne.n	8007b7a <_vfprintf_r+0x10aa>
 8007bb8:	2eff      	cmp	r6, #255	; 0xff
 8007bba:	d0de      	beq.n	8007b7a <_vfprintf_r+0x10aa>
 8007bbc:	2c0a      	cmp	r4, #10
 8007bbe:	f179 0300 	sbcs.w	r3, r9, #0
 8007bc2:	f080 80f4 	bcs.w	8007dae <_vfprintf_r+0x12de>
 8007bc6:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8007bca:	9612      	str	r6, [sp, #72]	; 0x48
 8007bcc:	e9dd a80c 	ldrd	sl, r8, [sp, #48]	; 0x30
 8007bd0:	9e06      	ldr	r6, [sp, #24]
 8007bd2:	f7ff bb06 	b.w	80071e2 <_vfprintf_r+0x712>
 8007bd6:	9907      	ldr	r1, [sp, #28]
 8007bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bda:	931d      	str	r3, [sp, #116]	; 0x74
 8007bdc:	aa28      	add	r2, sp, #160	; 0xa0
 8007bde:	f003 f965 	bl	800aeac <__sprint_r>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f47f a8b4 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007be8:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8007bec:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007bee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bf0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007bf4:	f7ff b8f1 	b.w	8006dda <_vfprintf_r+0x30a>
 8007bf8:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8007bfc:	f000 80b6 	beq.w	8007d6c <_vfprintf_r+0x129c>
 8007c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c02:	f852 4b04 	ldr.w	r4, [r2], #4
 8007c06:	920e      	str	r2, [sp, #56]	; 0x38
 8007c08:	4699      	mov	r9, r3
 8007c0a:	b2a4      	uxth	r4, r4
 8007c0c:	e746      	b.n	8007a9c <_vfprintf_r+0xfcc>
 8007c0e:	9907      	ldr	r1, [sp, #28]
 8007c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c12:	aa28      	add	r2, sp, #160	; 0xa0
 8007c14:	f003 f94a 	bl	800aeac <__sprint_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f47f a899 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007c1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007c20:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007c24:	f7ff bb29 	b.w	800727a <_vfprintf_r+0x7aa>
 8007c28:	4614      	mov	r4, r2
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	464f      	mov	r7, r9
 8007c2e:	4691      	mov	r9, r2
 8007c30:	3301      	adds	r3, #1
 8007c32:	442c      	add	r4, r5
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	f8c8 9000 	str.w	r9, [r8]
 8007c3a:	f8c8 5004 	str.w	r5, [r8, #4]
 8007c3e:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8007c42:	f77f a90b 	ble.w	8006e5c <_vfprintf_r+0x38c>
 8007c46:	e42b      	b.n	80074a0 <_vfprintf_r+0x9d0>
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	46bb      	mov	fp, r7
 8007c4c:	f47f aab8 	bne.w	80071c0 <_vfprintf_r+0x6f0>
 8007c50:	e47b      	b.n	800754a <_vfprintf_r+0xa7a>
 8007c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5a:	4655      	mov	r5, sl
 8007c5c:	6011      	str	r1, [r2, #0]
 8007c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8007c60:	f7ff b91c 	b.w	8006e9c <_vfprintf_r+0x3cc>
 8007c64:	9f08      	ldr	r7, [sp, #32]
 8007c66:	4614      	mov	r4, r2
 8007c68:	3601      	adds	r6, #1
 8007c6a:	442c      	add	r4, r5
 8007c6c:	2e07      	cmp	r6, #7
 8007c6e:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 8007c72:	f8c8 9000 	str.w	r9, [r8]
 8007c76:	f8c8 5004 	str.w	r5, [r8, #4]
 8007c7a:	f77f ac02 	ble.w	8007482 <_vfprintf_r+0x9b2>
 8007c7e:	e55d      	b.n	800773c <_vfprintf_r+0xc6c>
 8007c80:	4628      	mov	r0, r5
 8007c82:	f8cd 9020 	str.w	r9, [sp, #32]
 8007c86:	940e      	str	r4, [sp, #56]	; 0x38
 8007c88:	f7fa f9fa 	bl	8002080 <strlen>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	900c      	str	r0, [sp, #48]	; 0x30
 8007c90:	f7ff b9b4 	b.w	8006ffc <_vfprintf_r+0x52c>
 8007c94:	66666667 	.word	0x66666667
 8007c98:	0800d614 	.word	0x0800d614
 8007c9c:	0800d628 	.word	0x0800d628
 8007ca0:	0800d63c 	.word	0x0800d63c
 8007ca4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ca6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ca8:	18e2      	adds	r2, r4, r3
 8007caa:	e9c8 0300 	strd	r0, r3, [r8]
 8007cae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007cb0:	922a      	str	r2, [sp, #168]	; 0xa8
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	2b07      	cmp	r3, #7
 8007cb6:	9329      	str	r3, [sp, #164]	; 0xa4
 8007cb8:	f300 8149 	bgt.w	8007f4e <_vfprintf_r+0x147e>
 8007cbc:	f108 0808 	add.w	r8, r8, #8
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	f2c0 82fa 	blt.w	80082ba <_vfprintf_r+0x17ea>
 8007cc6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007cc8:	f8c8 5000 	str.w	r5, [r8]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	188c      	adds	r4, r1, r2
 8007cd0:	2b07      	cmp	r3, #7
 8007cd2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8007cd6:	f8c8 1004 	str.w	r1, [r8, #4]
 8007cda:	f77f a8bf 	ble.w	8006e5c <_vfprintf_r+0x38c>
 8007cde:	f7ff bbdf 	b.w	80074a0 <_vfprintf_r+0x9d0>
 8007ce2:	2e10      	cmp	r6, #16
 8007ce4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007ce6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8007fa8 <_vfprintf_r+0x14d8>
 8007cea:	dd52      	ble.n	8007d92 <_vfprintf_r+0x12c2>
 8007cec:	4648      	mov	r0, r9
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	46b9      	mov	r9, r7
 8007cf4:	46a8      	mov	r8, r5
 8007cf6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007cf8:	9d07      	ldr	r5, [sp, #28]
 8007cfa:	f04f 0b10 	mov.w	fp, #16
 8007cfe:	4607      	mov	r7, r0
 8007d00:	e003      	b.n	8007d0a <_vfprintf_r+0x123a>
 8007d02:	3208      	adds	r2, #8
 8007d04:	3e10      	subs	r6, #16
 8007d06:	2e10      	cmp	r6, #16
 8007d08:	dd3d      	ble.n	8007d86 <_vfprintf_r+0x12b6>
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	3110      	adds	r1, #16
 8007d0e:	2b07      	cmp	r3, #7
 8007d10:	e9c2 7b00 	strd	r7, fp, [r2]
 8007d14:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
 8007d18:	ddf3      	ble.n	8007d02 <_vfprintf_r+0x1232>
 8007d1a:	aa28      	add	r2, sp, #160	; 0xa0
 8007d1c:	4629      	mov	r1, r5
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f003 f8c4 	bl	800aeac <__sprint_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f47f a813 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007d2a:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
 8007d2e:	aa2b      	add	r2, sp, #172	; 0xac
 8007d30:	e7e8      	b.n	8007d04 <_vfprintf_r+0x1234>
 8007d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d34:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8007d38:	bf14      	ite	ne
 8007d3a:	f853 4b04 	ldrne.w	r4, [r3], #4
 8007d3e:	f853 4b04 	ldreq.w	r4, [r3], #4
 8007d42:	930e      	str	r3, [sp, #56]	; 0x38
 8007d44:	bf1c      	itt	ne
 8007d46:	4691      	movne	r9, r2
 8007d48:	b2e4      	uxtbne	r4, r4
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f7ff b976 	b.w	800703c <_vfprintf_r+0x56c>
 8007d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d52:	f417 7900 	ands.w	r9, r7, #512	; 0x200
 8007d56:	bf14      	ite	ne
 8007d58:	f853 4b04 	ldrne.w	r4, [r3], #4
 8007d5c:	f853 4b04 	ldreq.w	r4, [r3], #4
 8007d60:	930e      	str	r3, [sp, #56]	; 0x38
 8007d62:	bf1c      	itt	ne
 8007d64:	4691      	movne	r9, r2
 8007d66:	b2e4      	uxtbne	r4, r4
 8007d68:	f7ff b965 	b.w	8007036 <_vfprintf_r+0x566>
 8007d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d6e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
 8007d72:	bf14      	ite	ne
 8007d74:	f853 4b04 	ldrne.w	r4, [r3], #4
 8007d78:	f853 4b04 	ldreq.w	r4, [r3], #4
 8007d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d7e:	bf1c      	itt	ne
 8007d80:	4691      	movne	r9, r2
 8007d82:	b2e4      	uxtbne	r4, r4
 8007d84:	e68a      	b.n	8007a9c <_vfprintf_r+0xfcc>
 8007d86:	4645      	mov	r5, r8
 8007d88:	4690      	mov	r8, r2
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	464f      	mov	r7, r9
 8007d90:	4691      	mov	r9, r2
 8007d92:	3301      	adds	r3, #1
 8007d94:	4434      	add	r4, r6
 8007d96:	2b07      	cmp	r3, #7
 8007d98:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8007d9c:	f8c8 9000 	str.w	r9, [r8]
 8007da0:	f8c8 6004 	str.w	r6, [r8, #4]
 8007da4:	f300 80e6 	bgt.w	8007f74 <_vfprintf_r+0x14a4>
 8007da8:	f108 0808 	add.w	r8, r8, #8
 8007dac:	e453      	b.n	8007656 <_vfprintf_r+0xb86>
 8007dae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007db0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007db2:	1aed      	subs	r5, r5, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	4628      	mov	r0, r5
 8007db8:	f003 f80a 	bl	800add0 <strncpy>
 8007dbc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007dc0:	b10b      	cbz	r3, 8007dc6 <_vfprintf_r+0x12f6>
 8007dc2:	f108 0801 	add.w	r8, r8, #1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4649      	mov	r1, r9
 8007dca:	220a      	movs	r2, #10
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2600      	movs	r6, #0
 8007dd0:	f7fa feaa 	bl	8002b28 <__aeabi_uldivmod>
 8007dd4:	e6db      	b.n	8007b8e <_vfprintf_r+0x10be>
 8007dd6:	222d      	movs	r2, #45	; 0x2d
 8007dd8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8007ddc:	f7ff b896 	b.w	8006f0c <_vfprintf_r+0x43c>
 8007de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007de2:	18ae      	adds	r6, r5, r2
 8007de4:	eba6 060b 	sub.w	r6, r6, fp
 8007de8:	1ad5      	subs	r5, r2, r3
 8007dea:	42ae      	cmp	r6, r5
 8007dec:	bfa8      	it	ge
 8007dee:	462e      	movge	r6, r5
 8007df0:	e464      	b.n	80076bc <_vfprintf_r+0xbec>
 8007df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8007dfc:	8011      	strh	r1, [r2, #0]
 8007dfe:	4655      	mov	r5, sl
 8007e00:	f7ff b84c 	b.w	8006e9c <_vfprintf_r+0x3cc>
 8007e04:	f344 19c0 	sbfx	r9, r4, #7, #1
 8007e08:	464b      	mov	r3, r9
 8007e0a:	b264      	sxtb	r4, r4
 8007e0c:	f7ff b8b8 	b.w	8006f80 <_vfprintf_r+0x4b0>
 8007e10:	2330      	movs	r3, #48	; 0x30
 8007e12:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8007e16:	2358      	movs	r3, #88	; 0x58
 8007e18:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8007e1c:	9b08      	ldr	r3, [sp, #32]
 8007e1e:	2b63      	cmp	r3, #99	; 0x63
 8007e20:	f047 0402 	orr.w	r4, r7, #2
 8007e24:	f300 829b 	bgt.w	800835e <_vfprintf_r+0x188e>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e2c:	ad3b      	add	r5, sp, #236	; 0xec
 8007e2e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8007e32:	f447 7381 	orr.w	r3, r7, #258	; 0x102
 8007e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e38:	4613      	mov	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	4627      	mov	r7, r4
 8007e3e:	f2c0 8220 	blt.w	8008282 <_vfprintf_r+0x17b2>
 8007e42:	930c      	str	r3, [sp, #48]	; 0x30
 8007e44:	f026 0320 	bic.w	r3, r6, #32
 8007e48:	9306      	str	r3, [sp, #24]
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	468b      	mov	fp, r1
 8007e4e:	931d      	str	r3, [sp, #116]	; 0x74
 8007e50:	2e61      	cmp	r6, #97	; 0x61
 8007e52:	f000 82ed 	beq.w	8008430 <_vfprintf_r+0x1960>
 8007e56:	2e41      	cmp	r6, #65	; 0x41
 8007e58:	f47f ad59 	bne.w	800790e <_vfprintf_r+0xe3e>
 8007e5c:	aa22      	add	r2, sp, #136	; 0x88
 8007e5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e60:	4658      	mov	r0, fp
 8007e62:	f002 ff37 	bl	800acd4 <frexp>
 8007e66:	2200      	movs	r2, #0
 8007e68:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e6c:	f7fa fb84 	bl	8002578 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f7fa fde4 	bl	8002a48 <__aeabi_dcmpeq>
 8007e80:	b108      	cbz	r0, 8007e86 <_vfprintf_r+0x13b6>
 8007e82:	2301      	movs	r3, #1
 8007e84:	9322      	str	r3, [sp, #136]	; 0x88
 8007e86:	4b49      	ldr	r3, [pc, #292]	; (8007fac <_vfprintf_r+0x14dc>)
 8007e88:	930c      	str	r3, [sp, #48]	; 0x30
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
 8007e90:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
 8007e94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e9c:	f103 39ff 	add.w	r9, r3, #4294967295
 8007ea0:	46ab      	mov	fp, r5
 8007ea2:	9510      	str	r5, [sp, #64]	; 0x40
 8007ea4:	e006      	b.n	8007eb4 <_vfprintf_r+0x13e4>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8007eae:	f7fa fdcb 	bl	8002a48 <__aeabi_dcmpeq>
 8007eb2:	b9e8      	cbnz	r0, 8007ef0 <_vfprintf_r+0x1420>
 8007eb4:	4b3e      	ldr	r3, [pc, #248]	; (8007fb0 <_vfprintf_r+0x14e0>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	f7fa fb5c 	bl	8002578 <__aeabi_dmul>
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	f7fa fe08 	bl	8002ad8 <__aeabi_d2iz>
 8007ec8:	4604      	mov	r4, r0
 8007eca:	f7fa faeb 	bl	80024a4 <__aeabi_i2d>
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7fa f997 	bl	8002208 <__aeabi_dsub>
 8007eda:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8007ede:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007ee2:	46d8      	mov	r8, fp
 8007ee4:	464d      	mov	r5, r9
 8007ee6:	f80b 3b01 	strb.w	r3, [fp], #1
 8007eea:	4606      	mov	r6, r0
 8007eec:	460f      	mov	r7, r1
 8007eee:	d1da      	bne.n	8007ea6 <_vfprintf_r+0x13d6>
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <_vfprintf_r+0x14e4>)
 8007ef6:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8007efa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007efc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8007f00:	2200      	movs	r2, #0
 8007f02:	46a9      	mov	r9, r5
 8007f04:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8007f08:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f0a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8007f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f10:	f7fa fdc2 	bl	8002a98 <__aeabi_dcmpgt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 8234 	bne.w	8008382 <_vfprintf_r+0x18b2>
 8007f1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f1e:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <_vfprintf_r+0x14e4>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7fa fd91 	bl	8002a48 <__aeabi_dcmpeq>
 8007f26:	b110      	cbz	r0, 8007f2e <_vfprintf_r+0x145e>
 8007f28:	07e1      	lsls	r1, r4, #31
 8007f2a:	f100 822a 	bmi.w	8008382 <_vfprintf_r+0x18b2>
 8007f2e:	464b      	mov	r3, r9
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	db06      	blt.n	8007f42 <_vfprintf_r+0x1472>
 8007f34:	3301      	adds	r3, #1
 8007f36:	445b      	add	r3, fp
 8007f38:	2230      	movs	r2, #48	; 0x30
 8007f3a:	f80b 2b01 	strb.w	r2, [fp], #1
 8007f3e:	455b      	cmp	r3, fp
 8007f40:	d1fb      	bne.n	8007f3a <_vfprintf_r+0x146a>
 8007f42:	ebab 0305 	sub.w	r3, fp, r5
 8007f46:	46b9      	mov	r9, r7
 8007f48:	9312      	str	r3, [sp, #72]	; 0x48
 8007f4a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007f4c:	e503      	b.n	8007956 <_vfprintf_r+0xe86>
 8007f4e:	9907      	ldr	r1, [sp, #28]
 8007f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f52:	aa28      	add	r2, sp, #160	; 0xa0
 8007f54:	f002 ffaa 	bl	800aeac <__sprint_r>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	f47e aef9 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007f5e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8007f62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007f64:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007f68:	e6aa      	b.n	8007cc0 <_vfprintf_r+0x11f0>
 8007f6a:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8007f6c:	f002 f82e 	bl	8009fcc <__retarget_lock_release_recursive>
 8007f70:	f7fe bec0 	b.w	8006cf4 <_vfprintf_r+0x224>
 8007f74:	9907      	ldr	r1, [sp, #28]
 8007f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f78:	aa28      	add	r2, sp, #160	; 0xa0
 8007f7a:	f002 ff97 	bl	800aeac <__sprint_r>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f47e aee6 	bne.w	8006d50 <_vfprintf_r+0x280>
 8007f84:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8007f86:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8007f8a:	f7ff bb64 	b.w	8007656 <_vfprintf_r+0xb86>
 8007f8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f90:	9310      	str	r3, [sp, #64]	; 0x40
 8007f92:	1cda      	adds	r2, r3, #3
 8007f94:	db02      	blt.n	8007f9c <_vfprintf_r+0x14cc>
 8007f96:	9a08      	ldr	r2, [sp, #32]
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	dd0d      	ble.n	8007fb8 <_vfprintf_r+0x14e8>
 8007f9c:	3e02      	subs	r6, #2
 8007f9e:	f026 0320 	bic.w	r3, r6, #32
 8007fa2:	9306      	str	r3, [sp, #24]
 8007fa4:	e4e1      	b.n	800796a <_vfprintf_r+0xe9a>
 8007fa6:	bf00      	nop
 8007fa8:	0800d658 	.word	0x0800d658
 8007fac:	0800d628 	.word	0x0800d628
 8007fb0:	40300000 	.word	0x40300000
 8007fb4:	3fe00000 	.word	0x3fe00000
 8007fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	f2c0 8156 	blt.w	800826e <_vfprintf_r+0x179e>
 8007fc2:	f019 0f01 	tst.w	r9, #1
 8007fc6:	f000 8287 	beq.w	80084d8 <_vfprintf_r+0x1a08>
 8007fca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007fcc:	4413      	add	r3, r2
 8007fce:	930c      	str	r3, [sp, #48]	; 0x30
 8007fd0:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8007fd4:	d003      	beq.n	8007fde <_vfprintf_r+0x150e>
 8007fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f300 8250 	bgt.w	800847e <_vfprintf_r+0x19ae>
 8007fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	2667      	movs	r6, #103	; 0x67
 8007fe8:	2300      	movs	r3, #0
 8007fea:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fec:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fee:	e51d      	b.n	8007a2c <_vfprintf_r+0xf5c>
 8007ff0:	222d      	movs	r2, #45	; 0x2d
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8007ff8:	9308      	str	r3, [sp, #32]
 8007ffa:	f7fe bf9a 	b.w	8006f32 <_vfprintf_r+0x462>
 8007ffe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008000:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008004:	4642      	mov	r2, r8
 8008006:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800800a:	9710      	str	r7, [sp, #64]	; 0x40
 800800c:	18eb      	adds	r3, r5, r3
 800800e:	9308      	str	r3, [sp, #32]
 8008010:	465e      	mov	r6, fp
 8008012:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008014:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8008018:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800801c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008022:	9513      	str	r5, [sp, #76]	; 0x4c
 8008024:	4621      	mov	r1, r4
 8008026:	f1b8 0f00 	cmp.w	r8, #0
 800802a:	d02e      	beq.n	800808a <_vfprintf_r+0x15ba>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d16b      	bne.n	8008108 <_vfprintf_r+0x1638>
 8008030:	3f01      	subs	r7, #1
 8008032:	f108 38ff 	add.w	r8, r8, #4294967295
 8008036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008038:	e9c2 3900 	strd	r3, r9, [r2]
 800803c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800803e:	3301      	adds	r3, #1
 8008040:	4449      	add	r1, r9
 8008042:	2b07      	cmp	r3, #7
 8008044:	912a      	str	r1, [sp, #168]	; 0xa8
 8008046:	9329      	str	r3, [sp, #164]	; 0xa4
 8008048:	dc62      	bgt.n	8008110 <_vfprintf_r+0x1640>
 800804a:	3208      	adds	r2, #8
 800804c:	9b08      	ldr	r3, [sp, #32]
 800804e:	7838      	ldrb	r0, [r7, #0]
 8008050:	1b9b      	subs	r3, r3, r6
 8008052:	4283      	cmp	r3, r0
 8008054:	bfa8      	it	ge
 8008056:	4603      	movge	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	461c      	mov	r4, r3
 800805c:	dd0a      	ble.n	8008074 <_vfprintf_r+0x15a4>
 800805e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8008060:	3001      	adds	r0, #1
 8008062:	4419      	add	r1, r3
 8008064:	2807      	cmp	r0, #7
 8008066:	e9c2 6300 	strd	r6, r3, [r2]
 800806a:	912a      	str	r1, [sp, #168]	; 0xa8
 800806c:	9029      	str	r0, [sp, #164]	; 0xa4
 800806e:	dc5a      	bgt.n	8008126 <_vfprintf_r+0x1656>
 8008070:	7838      	ldrb	r0, [r7, #0]
 8008072:	3208      	adds	r2, #8
 8008074:	2c00      	cmp	r4, #0
 8008076:	bfac      	ite	ge
 8008078:	1b05      	subge	r5, r0, r4
 800807a:	4605      	movlt	r5, r0
 800807c:	2d00      	cmp	r5, #0
 800807e:	dc15      	bgt.n	80080ac <_vfprintf_r+0x15dc>
 8008080:	4406      	add	r6, r0
 8008082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008084:	f1b8 0f00 	cmp.w	r8, #0
 8008088:	d1d0      	bne.n	800802c <_vfprintf_r+0x155c>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d13c      	bne.n	8008108 <_vfprintf_r+0x1638>
 800808e:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
 8008092:	18eb      	adds	r3, r5, r3
 8008094:	429e      	cmp	r6, r3
 8008096:	9719      	str	r7, [sp, #100]	; 0x64
 8008098:	46b3      	mov	fp, r6
 800809a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800809e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80080a0:	460c      	mov	r4, r1
 80080a2:	4690      	mov	r8, r2
 80080a4:	bf28      	it	cs
 80080a6:	469b      	movcs	fp, r3
 80080a8:	f7ff badb 	b.w	8007662 <_vfprintf_r+0xb92>
 80080ac:	2d10      	cmp	r5, #16
 80080ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80080b0:	dd1d      	ble.n	80080ee <_vfprintf_r+0x161e>
 80080b2:	2410      	movs	r4, #16
 80080b4:	e004      	b.n	80080c0 <_vfprintf_r+0x15f0>
 80080b6:	3d10      	subs	r5, #16
 80080b8:	2d10      	cmp	r5, #16
 80080ba:	f102 0208 	add.w	r2, r2, #8
 80080be:	dd16      	ble.n	80080ee <_vfprintf_r+0x161e>
 80080c0:	3001      	adds	r0, #1
 80080c2:	4bac      	ldr	r3, [pc, #688]	; (8008374 <_vfprintf_r+0x18a4>)
 80080c4:	3110      	adds	r1, #16
 80080c6:	2807      	cmp	r0, #7
 80080c8:	e9c2 3400 	strd	r3, r4, [r2]
 80080cc:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 80080d0:	ddf1      	ble.n	80080b6 <_vfprintf_r+0x15e6>
 80080d2:	aa28      	add	r2, sp, #160	; 0xa0
 80080d4:	4659      	mov	r1, fp
 80080d6:	4650      	mov	r0, sl
 80080d8:	f002 fee8 	bl	800aeac <__sprint_r>
 80080dc:	2800      	cmp	r0, #0
 80080de:	f47e ae37 	bne.w	8006d50 <_vfprintf_r+0x280>
 80080e2:	3d10      	subs	r5, #16
 80080e4:	2d10      	cmp	r5, #16
 80080e6:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
 80080ea:	aa2b      	add	r2, sp, #172	; 0xac
 80080ec:	dce8      	bgt.n	80080c0 <_vfprintf_r+0x15f0>
 80080ee:	3001      	adds	r0, #1
 80080f0:	4ba0      	ldr	r3, [pc, #640]	; (8008374 <_vfprintf_r+0x18a4>)
 80080f2:	6055      	str	r5, [r2, #4]
 80080f4:	4429      	add	r1, r5
 80080f6:	2807      	cmp	r0, #7
 80080f8:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	dc2c      	bgt.n	800815a <_vfprintf_r+0x168a>
 8008100:	7838      	ldrb	r0, [r7, #0]
 8008102:	3208      	adds	r2, #8
 8008104:	4406      	add	r6, r0
 8008106:	e7bc      	b.n	8008082 <_vfprintf_r+0x15b2>
 8008108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800810a:	3b01      	subs	r3, #1
 800810c:	930f      	str	r3, [sp, #60]	; 0x3c
 800810e:	e792      	b.n	8008036 <_vfprintf_r+0x1566>
 8008110:	aa28      	add	r2, sp, #160	; 0xa0
 8008112:	4659      	mov	r1, fp
 8008114:	4650      	mov	r0, sl
 8008116:	f002 fec9 	bl	800aeac <__sprint_r>
 800811a:	2800      	cmp	r0, #0
 800811c:	f47e ae18 	bne.w	8006d50 <_vfprintf_r+0x280>
 8008120:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8008122:	aa2b      	add	r2, sp, #172	; 0xac
 8008124:	e792      	b.n	800804c <_vfprintf_r+0x157c>
 8008126:	aa28      	add	r2, sp, #160	; 0xa0
 8008128:	4659      	mov	r1, fp
 800812a:	4650      	mov	r0, sl
 800812c:	f002 febe 	bl	800aeac <__sprint_r>
 8008130:	2800      	cmp	r0, #0
 8008132:	f47e ae0d 	bne.w	8006d50 <_vfprintf_r+0x280>
 8008136:	7838      	ldrb	r0, [r7, #0]
 8008138:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800813a:	aa2b      	add	r2, sp, #172	; 0xac
 800813c:	e79a      	b.n	8008074 <_vfprintf_r+0x15a4>
 800813e:	9907      	ldr	r1, [sp, #28]
 8008140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008142:	aa28      	add	r2, sp, #160	; 0xa0
 8008144:	f002 feb2 	bl	800aeac <__sprint_r>
 8008148:	2800      	cmp	r0, #0
 800814a:	f47e ae01 	bne.w	8006d50 <_vfprintf_r+0x280>
 800814e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008150:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008152:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8008156:	f7ff bb84 	b.w	8007862 <_vfprintf_r+0xd92>
 800815a:	aa28      	add	r2, sp, #160	; 0xa0
 800815c:	4659      	mov	r1, fp
 800815e:	4650      	mov	r0, sl
 8008160:	f002 fea4 	bl	800aeac <__sprint_r>
 8008164:	2800      	cmp	r0, #0
 8008166:	f47e adf3 	bne.w	8006d50 <_vfprintf_r+0x280>
 800816a:	7838      	ldrb	r0, [r7, #0]
 800816c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800816e:	aa2b      	add	r2, sp, #172	; 0xac
 8008170:	4406      	add	r6, r0
 8008172:	e786      	b.n	8008082 <_vfprintf_r+0x15b2>
 8008174:	9907      	ldr	r1, [sp, #28]
 8008176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008178:	aa28      	add	r2, sp, #160	; 0xa0
 800817a:	f002 fe97 	bl	800aeac <__sprint_r>
 800817e:	2800      	cmp	r0, #0
 8008180:	f47e ade6 	bne.w	8006d50 <_vfprintf_r+0x280>
 8008184:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008186:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800818a:	f7ff ba5b 	b.w	8007644 <_vfprintf_r+0xb74>
 800818e:	9907      	ldr	r1, [sp, #28]
 8008190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008192:	aa28      	add	r2, sp, #160	; 0xa0
 8008194:	f002 fe8a 	bl	800aeac <__sprint_r>
 8008198:	2800      	cmp	r0, #0
 800819a:	f47e add9 	bne.w	8006d50 <_vfprintf_r+0x280>
 800819e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081a0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80081a2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80081a6:	f7ff ba71 	b.w	800768c <_vfprintf_r+0xbbc>
 80081aa:	9908      	ldr	r1, [sp, #32]
 80081ac:	9101      	str	r1, [sp, #4]
 80081ae:	a926      	add	r1, sp, #152	; 0x98
 80081b0:	9104      	str	r1, [sp, #16]
 80081b2:	a923      	add	r1, sp, #140	; 0x8c
 80081b4:	9103      	str	r1, [sp, #12]
 80081b6:	a922      	add	r1, sp, #136	; 0x88
 80081b8:	9102      	str	r1, [sp, #8]
 80081ba:	2103      	movs	r1, #3
 80081bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c0:	9100      	str	r1, [sp, #0]
 80081c2:	465a      	mov	r2, fp
 80081c4:	f000 fb3c 	bl	8008840 <_dtoa_r>
 80081c8:	7803      	ldrb	r3, [r0, #0]
 80081ca:	2b30      	cmp	r3, #48	; 0x30
 80081cc:	4605      	mov	r5, r0
 80081ce:	f000 8195 	beq.w	80084fc <_vfprintf_r+0x1a2c>
 80081d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d4:	9a08      	ldr	r2, [sp, #32]
 80081d6:	46b9      	mov	r9, r7
 80081d8:	4413      	add	r3, r2
 80081da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80081dc:	18ec      	adds	r4, r5, r3
 80081de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e0:	4658      	mov	r0, fp
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	f7fa fc2f 	bl	8002a48 <__aeabi_dcmpeq>
 80081ea:	b110      	cbz	r0, 80081f2 <_vfprintf_r+0x1722>
 80081ec:	4623      	mov	r3, r4
 80081ee:	f7ff bbb0 	b.w	8007952 <_vfprintf_r+0xe82>
 80081f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	f4bf abac 	bcs.w	8007952 <_vfprintf_r+0xe82>
 80081fa:	2130      	movs	r1, #48	; 0x30
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	9226      	str	r2, [sp, #152]	; 0x98
 8008200:	7019      	strb	r1, [r3, #0]
 8008202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008204:	429c      	cmp	r4, r3
 8008206:	d8f9      	bhi.n	80081fc <_vfprintf_r+0x172c>
 8008208:	f7ff bba3 	b.w	8007952 <_vfprintf_r+0xe82>
 800820c:	9b08      	ldr	r3, [sp, #32]
 800820e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8008212:	940e      	str	r4, [sp, #56]	; 0x38
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	930c      	str	r3, [sp, #48]	; 0x30
 8008218:	9008      	str	r0, [sp, #32]
 800821a:	900f      	str	r0, [sp, #60]	; 0x3c
 800821c:	9013      	str	r0, [sp, #76]	; 0x4c
 800821e:	9010      	str	r0, [sp, #64]	; 0x40
 8008220:	f7fe be84 	b.w	8006f2c <_vfprintf_r+0x45c>
 8008224:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008226:	9210      	str	r2, [sp, #64]	; 0x40
 8008228:	2a00      	cmp	r2, #0
 800822a:	f340 8181 	ble.w	8008530 <_vfprintf_r+0x1a60>
 800822e:	9908      	ldr	r1, [sp, #32]
 8008230:	f009 0301 	and.w	r3, r9, #1
 8008234:	430b      	orrs	r3, r1
 8008236:	f040 8155 	bne.w	80084e4 <_vfprintf_r+0x1a14>
 800823a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823c:	930c      	str	r3, [sp, #48]	; 0x30
 800823e:	2666      	movs	r6, #102	; 0x66
 8008240:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8008244:	f040 811c 	bne.w	8008480 <_vfprintf_r+0x19b0>
 8008248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800824a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800824e:	9306      	str	r3, [sp, #24]
 8008250:	e6ca      	b.n	8007fe8 <_vfprintf_r+0x1518>
 8008252:	9907      	ldr	r1, [sp, #28]
 8008254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008256:	aa28      	add	r2, sp, #160	; 0xa0
 8008258:	f002 fe28 	bl	800aeac <__sprint_r>
 800825c:	2800      	cmp	r0, #0
 800825e:	f43e ae25 	beq.w	8006eac <_vfprintf_r+0x3dc>
 8008262:	f7fe bd7b 	b.w	8006d5c <_vfprintf_r+0x28c>
 8008266:	2300      	movs	r3, #0
 8008268:	9308      	str	r3, [sp, #32]
 800826a:	f7fe bca1 	b.w	8006bb0 <_vfprintf_r+0xe0>
 800826e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008270:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008272:	189a      	adds	r2, r3, r2
 8008274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008276:	920c      	str	r2, [sp, #48]	; 0x30
 8008278:	2b00      	cmp	r3, #0
 800827a:	f340 814d 	ble.w	8008518 <_vfprintf_r+0x1a48>
 800827e:	2667      	movs	r6, #103	; 0x67
 8008280:	e7de      	b.n	8008240 <_vfprintf_r+0x1770>
 8008282:	f026 0320 	bic.w	r3, r6, #32
 8008286:	9306      	str	r3, [sp, #24]
 8008288:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 800828c:	469b      	mov	fp, r3
 800828e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8008292:	930c      	str	r3, [sp, #48]	; 0x30
 8008294:	232d      	movs	r3, #45	; 0x2d
 8008296:	931d      	str	r3, [sp, #116]	; 0x74
 8008298:	e5da      	b.n	8007e50 <_vfprintf_r+0x1380>
 800829a:	9907      	ldr	r1, [sp, #28]
 800829c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800829e:	aa28      	add	r2, sp, #160	; 0xa0
 80082a0:	f002 fe04 	bl	800aeac <__sprint_r>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f47e ad53 	bne.w	8006d50 <_vfprintf_r+0x280>
 80082aa:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80082ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ae:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80082b0:	1b5d      	subs	r5, r3, r5
 80082b2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80082b6:	f7ff ba01 	b.w	80076bc <_vfprintf_r+0xbec>
 80082ba:	424e      	negs	r6, r1
 80082bc:	3110      	adds	r1, #16
 80082be:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8008374 <_vfprintf_r+0x18a4>
 80082c2:	da34      	bge.n	800832e <_vfprintf_r+0x185e>
 80082c4:	4641      	mov	r1, r8
 80082c6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80082ca:	46a8      	mov	r8, r5
 80082cc:	2410      	movs	r4, #16
 80082ce:	9d07      	ldr	r5, [sp, #28]
 80082d0:	e003      	b.n	80082da <_vfprintf_r+0x180a>
 80082d2:	3108      	adds	r1, #8
 80082d4:	3e10      	subs	r6, #16
 80082d6:	2e10      	cmp	r6, #16
 80082d8:	dd27      	ble.n	800832a <_vfprintf_r+0x185a>
 80082da:	3301      	adds	r3, #1
 80082dc:	3210      	adds	r2, #16
 80082de:	2b07      	cmp	r3, #7
 80082e0:	e9c1 9400 	strd	r9, r4, [r1]
 80082e4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80082e8:	ddf3      	ble.n	80082d2 <_vfprintf_r+0x1802>
 80082ea:	aa28      	add	r2, sp, #160	; 0xa0
 80082ec:	4629      	mov	r1, r5
 80082ee:	4658      	mov	r0, fp
 80082f0:	f002 fddc 	bl	800aeac <__sprint_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	f47e ad2b 	bne.w	8006d50 <_vfprintf_r+0x280>
 80082fa:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80082fe:	a92b      	add	r1, sp, #172	; 0xac
 8008300:	e7e8      	b.n	80082d4 <_vfprintf_r+0x1804>
 8008302:	9b08      	ldr	r3, [sp, #32]
 8008304:	18ec      	adds	r4, r5, r3
 8008306:	e76a      	b.n	80081de <_vfprintf_r+0x170e>
 8008308:	9b07      	ldr	r3, [sp, #28]
 800830a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830c:	07dd      	lsls	r5, r3, #31
 800830e:	d407      	bmi.n	8008320 <_vfprintf_r+0x1850>
 8008310:	9b07      	ldr	r3, [sp, #28]
 8008312:	899b      	ldrh	r3, [r3, #12]
 8008314:	059c      	lsls	r4, r3, #22
 8008316:	d403      	bmi.n	8008320 <_vfprintf_r+0x1850>
 8008318:	9b07      	ldr	r3, [sp, #28]
 800831a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800831c:	f001 fe56 	bl	8009fcc <__retarget_lock_release_recursive>
 8008320:	f04f 33ff 	mov.w	r3, #4294967295
 8008324:	930b      	str	r3, [sp, #44]	; 0x2c
 8008326:	f7fe bd22 	b.w	8006d6e <_vfprintf_r+0x29e>
 800832a:	4645      	mov	r5, r8
 800832c:	4688      	mov	r8, r1
 800832e:	3301      	adds	r3, #1
 8008330:	4432      	add	r2, r6
 8008332:	2b07      	cmp	r3, #7
 8008334:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8008338:	f8c8 9000 	str.w	r9, [r8]
 800833c:	f8c8 6004 	str.w	r6, [r8, #4]
 8008340:	f77f aaa4 	ble.w	800788c <_vfprintf_r+0xdbc>
 8008344:	9907      	ldr	r1, [sp, #28]
 8008346:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008348:	aa28      	add	r2, sp, #160	; 0xa0
 800834a:	f002 fdaf 	bl	800aeac <__sprint_r>
 800834e:	2800      	cmp	r0, #0
 8008350:	f47e acfe 	bne.w	8006d50 <_vfprintf_r+0x280>
 8008354:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8008358:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800835c:	e4b3      	b.n	8007cc6 <_vfprintf_r+0x11f6>
 800835e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008360:	1c59      	adds	r1, r3, #1
 8008362:	f7fd fff7 	bl	8006354 <_malloc_r>
 8008366:	4605      	mov	r5, r0
 8008368:	2800      	cmp	r0, #0
 800836a:	f000 810d 	beq.w	8008588 <_vfprintf_r+0x1ab8>
 800836e:	900d      	str	r0, [sp, #52]	; 0x34
 8008370:	e55d      	b.n	8007e2e <_vfprintf_r+0x135e>
 8008372:	bf00      	nop
 8008374:	0800d658 	.word	0x0800d658
 8008378:	2330      	movs	r3, #48	; 0x30
 800837a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800837e:	2378      	movs	r3, #120	; 0x78
 8008380:	e54a      	b.n	8007e18 <_vfprintf_r+0x1348>
 8008382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008384:	9326      	str	r3, [sp, #152]	; 0x98
 8008386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008388:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800838c:	7bd9      	ldrb	r1, [r3, #15]
 800838e:	428a      	cmp	r2, r1
 8008390:	465b      	mov	r3, fp
 8008392:	d109      	bne.n	80083a8 <_vfprintf_r+0x18d8>
 8008394:	2030      	movs	r0, #48	; 0x30
 8008396:	f803 0c01 	strb.w	r0, [r3, #-1]
 800839a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800839c:	1e5a      	subs	r2, r3, #1
 800839e:	9226      	str	r2, [sp, #152]	; 0x98
 80083a0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80083a4:	4291      	cmp	r1, r2
 80083a6:	d0f6      	beq.n	8008396 <_vfprintf_r+0x18c6>
 80083a8:	2a39      	cmp	r2, #57	; 0x39
 80083aa:	bf0b      	itete	eq
 80083ac:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
 80083ae:	3201      	addne	r2, #1
 80083b0:	7a92      	ldrbeq	r2, [r2, #10]
 80083b2:	b2d2      	uxtbne	r2, r2
 80083b4:	f803 2c01 	strb.w	r2, [r3, #-1]
 80083b8:	e5c3      	b.n	8007f42 <_vfprintf_r+0x1472>
 80083ba:	9908      	ldr	r1, [sp, #32]
 80083bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c0:	1c4c      	adds	r4, r1, #1
 80083c2:	a926      	add	r1, sp, #152	; 0x98
 80083c4:	9104      	str	r1, [sp, #16]
 80083c6:	a923      	add	r1, sp, #140	; 0x8c
 80083c8:	9103      	str	r1, [sp, #12]
 80083ca:	a922      	add	r1, sp, #136	; 0x88
 80083cc:	9102      	str	r1, [sp, #8]
 80083ce:	2102      	movs	r1, #2
 80083d0:	465a      	mov	r2, fp
 80083d2:	9401      	str	r4, [sp, #4]
 80083d4:	9100      	str	r1, [sp, #0]
 80083d6:	f000 fa33 	bl	8008840 <_dtoa_r>
 80083da:	4605      	mov	r5, r0
 80083dc:	46b9      	mov	r9, r7
 80083de:	442c      	add	r4, r5
 80083e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80083e2:	e6fc      	b.n	80081de <_vfprintf_r+0x170e>
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bf08      	it	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	9308      	str	r3, [sp, #32]
 80083ee:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 80083f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80083f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f2c0 80ae 	blt.w	8008558 <_vfprintf_r+0x1a88>
 80083fc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8008400:	901d      	str	r0, [sp, #116]	; 0x74
 8008402:	930c      	str	r3, [sp, #48]	; 0x30
 8008404:	900d      	str	r0, [sp, #52]	; 0x34
 8008406:	f7ff ba89 	b.w	800791c <_vfprintf_r+0xe4c>
 800840a:	2306      	movs	r3, #6
 800840c:	9308      	str	r3, [sp, #32]
 800840e:	f7ff ba70 	b.w	80078f2 <_vfprintf_r+0xe22>
 8008412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008414:	4d60      	ldr	r5, [pc, #384]	; (8008598 <_vfprintf_r+0x1ac8>)
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb4      	ite	lt
 800841a:	222d      	movlt	r2, #45	; 0x2d
 800841c:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
 8008420:	4b5e      	ldr	r3, [pc, #376]	; (800859c <_vfprintf_r+0x1acc>)
 8008422:	bfb8      	it	lt
 8008424:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
 8008428:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800842c:	f7fe bd72 	b.w	8006f14 <_vfprintf_r+0x444>
 8008430:	aa22      	add	r2, sp, #136	; 0x88
 8008432:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008434:	4658      	mov	r0, fp
 8008436:	f002 fc4d 	bl	800acd4 <frexp>
 800843a:	2200      	movs	r2, #0
 800843c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008440:	f7fa f89a 	bl	8002578 <__aeabi_dmul>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	f7fa fafa 	bl	8002a48 <__aeabi_dcmpeq>
 8008454:	b108      	cbz	r0, 800845a <_vfprintf_r+0x198a>
 8008456:	2301      	movs	r3, #1
 8008458:	9322      	str	r3, [sp, #136]	; 0x88
 800845a:	4b51      	ldr	r3, [pc, #324]	; (80085a0 <_vfprintf_r+0x1ad0>)
 800845c:	930c      	str	r3, [sp, #48]	; 0x30
 800845e:	e514      	b.n	8007e8a <_vfprintf_r+0x13ba>
 8008460:	2900      	cmp	r1, #0
 8008462:	d162      	bne.n	800852a <_vfprintf_r+0x1a5a>
 8008464:	2230      	movs	r2, #48	; 0x30
 8008466:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 800846a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 800846e:	3330      	adds	r3, #48	; 0x30
 8008470:	f802 3b01 	strb.w	r3, [r2], #1
 8008474:	ab24      	add	r3, sp, #144	; 0x90
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	931a      	str	r3, [sp, #104]	; 0x68
 800847a:	f7ff bac0 	b.w	80079fe <_vfprintf_r+0xf2e>
 800847e:	2667      	movs	r6, #103	; 0x67
 8008480:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008482:	780b      	ldrb	r3, [r1, #0]
 8008484:	2bff      	cmp	r3, #255	; 0xff
 8008486:	d07b      	beq.n	8008580 <_vfprintf_r+0x1ab0>
 8008488:	2400      	movs	r4, #0
 800848a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800848c:	4620      	mov	r0, r4
 800848e:	e003      	b.n	8008498 <_vfprintf_r+0x19c8>
 8008490:	3001      	adds	r0, #1
 8008492:	3101      	adds	r1, #1
 8008494:	2bff      	cmp	r3, #255	; 0xff
 8008496:	d008      	beq.n	80084aa <_vfprintf_r+0x19da>
 8008498:	4293      	cmp	r3, r2
 800849a:	da06      	bge.n	80084aa <_vfprintf_r+0x19da>
 800849c:	1ad2      	subs	r2, r2, r3
 800849e:	784b      	ldrb	r3, [r1, #1]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f5      	bne.n	8008490 <_vfprintf_r+0x19c0>
 80084a4:	780b      	ldrb	r3, [r1, #0]
 80084a6:	3401      	adds	r4, #1
 80084a8:	e7f4      	b.n	8008494 <_vfprintf_r+0x19c4>
 80084aa:	9119      	str	r1, [sp, #100]	; 0x64
 80084ac:	9210      	str	r2, [sp, #64]	; 0x40
 80084ae:	9013      	str	r0, [sp, #76]	; 0x4c
 80084b0:	940f      	str	r4, [sp, #60]	; 0x3c
 80084b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084b8:	4413      	add	r3, r2
 80084ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084bc:	fb01 2303 	mla	r3, r1, r3, r2
 80084c0:	930c      	str	r3, [sp, #48]	; 0x30
 80084c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80084c6:	9306      	str	r3, [sp, #24]
 80084c8:	f7ff bab0 	b.w	8007a2c <_vfprintf_r+0xf5c>
 80084cc:	f106 020f 	add.w	r2, r6, #15
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	2101      	movs	r1, #1
 80084d4:	f7ff ba52 	b.w	800797c <_vfprintf_r+0xeac>
 80084d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084da:	930c      	str	r3, [sp, #48]	; 0x30
 80084dc:	e578      	b.n	8007fd0 <_vfprintf_r+0x1500>
 80084de:	2300      	movs	r3, #0
 80084e0:	930d      	str	r3, [sp, #52]	; 0x34
 80084e2:	e6d1      	b.n	8008288 <_vfprintf_r+0x17b8>
 80084e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80084e6:	18d3      	adds	r3, r2, r3
 80084e8:	4419      	add	r1, r3
 80084ea:	910c      	str	r1, [sp, #48]	; 0x30
 80084ec:	2666      	movs	r6, #102	; 0x66
 80084ee:	e6a7      	b.n	8008240 <_vfprintf_r+0x1770>
 80084f0:	f019 0f01 	tst.w	r9, #1
 80084f4:	f43f aa8e 	beq.w	8007a14 <_vfprintf_r+0xf44>
 80084f8:	f7ff ba88 	b.w	8007a0c <_vfprintf_r+0xf3c>
 80084fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084fe:	4658      	mov	r0, fp
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	f7fa faa0 	bl	8002a48 <__aeabi_dcmpeq>
 8008508:	2800      	cmp	r0, #0
 800850a:	f47f ae62 	bne.w	80081d2 <_vfprintf_r+0x1702>
 800850e:	9b08      	ldr	r3, [sp, #32]
 8008510:	f1c3 0301 	rsb	r3, r3, #1
 8008514:	9322      	str	r3, [sp, #136]	; 0x88
 8008516:	e65d      	b.n	80081d4 <_vfprintf_r+0x1704>
 8008518:	f1c3 0301 	rsb	r3, r3, #1
 800851c:	441a      	add	r2, r3
 800851e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008522:	920c      	str	r2, [sp, #48]	; 0x30
 8008524:	9306      	str	r3, [sp, #24]
 8008526:	2667      	movs	r6, #103	; 0x67
 8008528:	e55e      	b.n	8007fe8 <_vfprintf_r+0x1518>
 800852a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 800852e:	e79e      	b.n	800846e <_vfprintf_r+0x199e>
 8008530:	9a08      	ldr	r2, [sp, #32]
 8008532:	f009 0901 	and.w	r9, r9, #1
 8008536:	ea59 0302 	orrs.w	r3, r9, r2
 800853a:	d104      	bne.n	8008546 <_vfprintf_r+0x1a76>
 800853c:	2301      	movs	r3, #1
 800853e:	9306      	str	r3, [sp, #24]
 8008540:	2666      	movs	r6, #102	; 0x66
 8008542:	930c      	str	r3, [sp, #48]	; 0x30
 8008544:	e550      	b.n	8007fe8 <_vfprintf_r+0x1518>
 8008546:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008548:	3301      	adds	r3, #1
 800854a:	441a      	add	r2, r3
 800854c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008550:	920c      	str	r2, [sp, #48]	; 0x30
 8008552:	9306      	str	r3, [sp, #24]
 8008554:	2666      	movs	r6, #102	; 0x66
 8008556:	e547      	b.n	8007fe8 <_vfprintf_r+0x1518>
 8008558:	900d      	str	r0, [sp, #52]	; 0x34
 800855a:	e695      	b.n	8008288 <_vfprintf_r+0x17b8>
 800855c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800855e:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8008562:	4692      	mov	sl, r2
 8008564:	f853 2b04 	ldr.w	r2, [r3], #4
 8008568:	930e      	str	r3, [sp, #56]	; 0x38
 800856a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 800856e:	9208      	str	r2, [sp, #32]
 8008570:	f7fe bb1c 	b.w	8006bac <_vfprintf_r+0xdc>
 8008574:	2302      	movs	r3, #2
 8008576:	931a      	str	r3, [sp, #104]	; 0x68
 8008578:	f7ff ba41 	b.w	80079fe <_vfprintf_r+0xf2e>
 800857c:	9c08      	ldr	r4, [sp, #32]
 800857e:	e72d      	b.n	80083dc <_vfprintf_r+0x190c>
 8008580:	2300      	movs	r3, #0
 8008582:	930f      	str	r3, [sp, #60]	; 0x3c
 8008584:	9313      	str	r3, [sp, #76]	; 0x4c
 8008586:	e794      	b.n	80084b2 <_vfprintf_r+0x19e2>
 8008588:	9a07      	ldr	r2, [sp, #28]
 800858a:	8993      	ldrh	r3, [r2, #12]
 800858c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008590:	8193      	strh	r3, [r2, #12]
 8008592:	f7fe bbe3 	b.w	8006d5c <_vfprintf_r+0x28c>
 8008596:	bf00      	nop
 8008598:	0800d60c 	.word	0x0800d60c
 800859c:	0800d610 	.word	0x0800d610
 80085a0:	0800d614 	.word	0x0800d614

080085a4 <__sbprintf>:
 80085a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a6:	461f      	mov	r7, r3
 80085a8:	898b      	ldrh	r3, [r1, #12]
 80085aa:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80085ae:	f023 0302 	bic.w	r3, r3, #2
 80085b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80085b6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80085b8:	9319      	str	r3, [sp, #100]	; 0x64
 80085ba:	89cb      	ldrh	r3, [r1, #14]
 80085bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80085c0:	69cb      	ldr	r3, [r1, #28]
 80085c2:	9307      	str	r3, [sp, #28]
 80085c4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	ab1a      	add	r3, sp, #104	; 0x68
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085d2:	4615      	mov	r5, r2
 80085d4:	4606      	mov	r6, r0
 80085d6:	9302      	str	r3, [sp, #8]
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	a816      	add	r0, sp, #88	; 0x58
 80085dc:	2300      	movs	r3, #0
 80085de:	460c      	mov	r4, r1
 80085e0:	9306      	str	r3, [sp, #24]
 80085e2:	f001 fced 	bl	8009fc0 <__retarget_lock_init_recursive>
 80085e6:	462a      	mov	r2, r5
 80085e8:	463b      	mov	r3, r7
 80085ea:	4669      	mov	r1, sp
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7fe fa6f 	bl	8006ad0 <_vfprintf_r>
 80085f2:	1e05      	subs	r5, r0, #0
 80085f4:	db07      	blt.n	8008606 <__sbprintf+0x62>
 80085f6:	4669      	mov	r1, sp
 80085f8:	4630      	mov	r0, r6
 80085fa:	f001 f913 	bl	8009824 <_fflush_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	bf18      	it	ne
 8008602:	f04f 35ff 	movne.w	r5, #4294967295
 8008606:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800860a:	065b      	lsls	r3, r3, #25
 800860c:	d503      	bpl.n	8008616 <__sbprintf+0x72>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008618:	f001 fcd4 	bl	8009fc4 <__retarget_lock_close_recursive>
 800861c:	4628      	mov	r0, r5
 800861e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8008622:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008624 <__swsetup_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4b33      	ldr	r3, [pc, #204]	; (80086f4 <__swsetup_r+0xd0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4605      	mov	r5, r0
 800862c:	460c      	mov	r4, r1
 800862e:	b10b      	cbz	r3, 8008634 <__swsetup_r+0x10>
 8008630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008632:	b312      	cbz	r2, 800867a <__swsetup_r+0x56>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	0718      	lsls	r0, r3, #28
 800863a:	b29a      	uxth	r2, r3
 800863c:	d525      	bpl.n	800868a <__swsetup_r+0x66>
 800863e:	6921      	ldr	r1, [r4, #16]
 8008640:	2900      	cmp	r1, #0
 8008642:	d02d      	beq.n	80086a0 <__swsetup_r+0x7c>
 8008644:	f012 0001 	ands.w	r0, r2, #1
 8008648:	d007      	beq.n	800865a <__swsetup_r+0x36>
 800864a:	2000      	movs	r0, #0
 800864c:	60a0      	str	r0, [r4, #8]
 800864e:	6960      	ldr	r0, [r4, #20]
 8008650:	4240      	negs	r0, r0
 8008652:	61a0      	str	r0, [r4, #24]
 8008654:	b139      	cbz	r1, 8008666 <__swsetup_r+0x42>
 8008656:	2000      	movs	r0, #0
 8008658:	bd38      	pop	{r3, r4, r5, pc}
 800865a:	0795      	lsls	r5, r2, #30
 800865c:	bf58      	it	pl
 800865e:	6960      	ldrpl	r0, [r4, #20]
 8008660:	60a0      	str	r0, [r4, #8]
 8008662:	2900      	cmp	r1, #0
 8008664:	d1f7      	bne.n	8008656 <__swsetup_r+0x32>
 8008666:	0612      	lsls	r2, r2, #24
 8008668:	bf58      	it	pl
 800866a:	4608      	movpl	r0, r1
 800866c:	d5f4      	bpl.n	8008658 <__swsetup_r+0x34>
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	bd38      	pop	{r3, r4, r5, pc}
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f906 	bl	800988c <__sinit>
 8008680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008684:	0718      	lsls	r0, r3, #28
 8008686:	b29a      	uxth	r2, r3
 8008688:	d4d9      	bmi.n	800863e <__swsetup_r+0x1a>
 800868a:	06d1      	lsls	r1, r2, #27
 800868c:	d52a      	bpl.n	80086e4 <__swsetup_r+0xc0>
 800868e:	0752      	lsls	r2, r2, #29
 8008690:	d414      	bmi.n	80086bc <__swsetup_r+0x98>
 8008692:	6921      	ldr	r1, [r4, #16]
 8008694:	f043 0308 	orr.w	r3, r3, #8
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	b29a      	uxth	r2, r3
 800869c:	2900      	cmp	r1, #0
 800869e:	d1d1      	bne.n	8008644 <__swsetup_r+0x20>
 80086a0:	f402 7020 	and.w	r0, r2, #640	; 0x280
 80086a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80086a8:	d0cc      	beq.n	8008644 <__swsetup_r+0x20>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f001 fc8f 	bl	8009fd0 <__smakebuf_r>
 80086b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b6:	6921      	ldr	r1, [r4, #16]
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	e7c3      	b.n	8008644 <__swsetup_r+0x20>
 80086bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80086be:	b151      	cbz	r1, 80086d6 <__swsetup_r+0xb2>
 80086c0:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80086c4:	4291      	cmp	r1, r2
 80086c6:	d004      	beq.n	80086d2 <__swsetup_r+0xae>
 80086c8:	4628      	mov	r0, r5
 80086ca:	f001 f9d7 	bl	8009a7c <_free_r>
 80086ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	6322      	str	r2, [r4, #48]	; 0x30
 80086d6:	6921      	ldr	r1, [r4, #16]
 80086d8:	2200      	movs	r2, #0
 80086da:	e9c4 1200 	strd	r1, r2, [r4]
 80086de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086e2:	e7d7      	b.n	8008694 <__swsetup_r+0x70>
 80086e4:	2209      	movs	r2, #9
 80086e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ea:	602a      	str	r2, [r5, #0]
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000000 	.word	0x20000000

080086f8 <register_fini>:
 80086f8:	4b02      	ldr	r3, [pc, #8]	; (8008704 <register_fini+0xc>)
 80086fa:	b113      	cbz	r3, 8008702 <register_fini+0xa>
 80086fc:	4802      	ldr	r0, [pc, #8]	; (8008708 <register_fini+0x10>)
 80086fe:	f000 b805 	b.w	800870c <atexit>
 8008702:	4770      	bx	lr
 8008704:	00000000 	.word	0x00000000
 8008708:	080099b1 	.word	0x080099b1

0800870c <atexit>:
 800870c:	2300      	movs	r3, #0
 800870e:	4601      	mov	r1, r0
 8008710:	461a      	mov	r2, r3
 8008712:	4618      	mov	r0, r3
 8008714:	f003 baf4 	b.w	800bd00 <__register_exitproc>

08008718 <quorem>:
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	6903      	ldr	r3, [r0, #16]
 800871e:	690c      	ldr	r4, [r1, #16]
 8008720:	42a3      	cmp	r3, r4
 8008722:	b083      	sub	sp, #12
 8008724:	f2c0 8086 	blt.w	8008834 <quorem+0x11c>
 8008728:	3c01      	subs	r4, #1
 800872a:	f101 0514 	add.w	r5, r1, #20
 800872e:	00a3      	lsls	r3, r4, #2
 8008730:	f100 0814 	add.w	r8, r0, #20
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800873a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800873e:	3301      	adds	r3, #1
 8008740:	468a      	mov	sl, r1
 8008742:	429a      	cmp	r2, r3
 8008744:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8008748:	4681      	mov	r9, r0
 800874a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800874e:	9101      	str	r1, [sp, #4]
 8008750:	fbb2 f6f3 	udiv	r6, r2, r3
 8008754:	d338      	bcc.n	80087c8 <quorem+0xb0>
 8008756:	2300      	movs	r3, #0
 8008758:	46ae      	mov	lr, r5
 800875a:	4640      	mov	r0, r8
 800875c:	469b      	mov	fp, r3
 800875e:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008762:	6802      	ldr	r2, [r0, #0]
 8008764:	fa1f fc81 	uxth.w	ip, r1
 8008768:	fb06 330c 	mla	r3, r6, ip, r3
 800876c:	0c09      	lsrs	r1, r1, #16
 800876e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008772:	fb06 cc01 	mla	ip, r6, r1, ip
 8008776:	b299      	uxth	r1, r3
 8008778:	ebab 0101 	sub.w	r1, fp, r1
 800877c:	fa1f f38c 	uxth.w	r3, ip
 8008780:	fa11 f182 	uxtah	r1, r1, r2
 8008784:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8008788:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800878c:	b289      	uxth	r1, r1
 800878e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008792:	4577      	cmp	r7, lr
 8008794:	f840 1b04 	str.w	r1, [r0], #4
 8008798:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800879c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087a0:	d2dd      	bcs.n	800875e <quorem+0x46>
 80087a2:	9b00      	ldr	r3, [sp, #0]
 80087a4:	f858 3003 	ldr.w	r3, [r8, r3]
 80087a8:	b973      	cbnz	r3, 80087c8 <quorem+0xb0>
 80087aa:	9b01      	ldr	r3, [sp, #4]
 80087ac:	3b04      	subs	r3, #4
 80087ae:	4598      	cmp	r8, r3
 80087b0:	d304      	bcc.n	80087bc <quorem+0xa4>
 80087b2:	e007      	b.n	80087c4 <quorem+0xac>
 80087b4:	4598      	cmp	r8, r3
 80087b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80087ba:	d203      	bcs.n	80087c4 <quorem+0xac>
 80087bc:	f853 2904 	ldr.w	r2, [r3], #-4
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	d0f7      	beq.n	80087b4 <quorem+0x9c>
 80087c4:	f8c9 4010 	str.w	r4, [r9, #16]
 80087c8:	4651      	mov	r1, sl
 80087ca:	4648      	mov	r0, r9
 80087cc:	f001 ff6e 	bl	800a6ac <__mcmp>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	db2b      	blt.n	800882c <quorem+0x114>
 80087d4:	3601      	adds	r6, #1
 80087d6:	4640      	mov	r0, r8
 80087d8:	2300      	movs	r3, #0
 80087da:	f855 1b04 	ldr.w	r1, [r5], #4
 80087de:	f8d0 c000 	ldr.w	ip, [r0]
 80087e2:	b28a      	uxth	r2, r1
 80087e4:	1a9a      	subs	r2, r3, r2
 80087e6:	0c0b      	lsrs	r3, r1, #16
 80087e8:	fa12 f28c 	uxtah	r2, r2, ip
 80087ec:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 80087f0:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80087f4:	b292      	uxth	r2, r2
 80087f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087fa:	42af      	cmp	r7, r5
 80087fc:	f840 2b04 	str.w	r2, [r0], #4
 8008800:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008804:	d2e9      	bcs.n	80087da <quorem+0xc2>
 8008806:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800880a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800880e:	b96a      	cbnz	r2, 800882c <quorem+0x114>
 8008810:	3b04      	subs	r3, #4
 8008812:	4598      	cmp	r8, r3
 8008814:	d304      	bcc.n	8008820 <quorem+0x108>
 8008816:	e007      	b.n	8008828 <quorem+0x110>
 8008818:	4598      	cmp	r8, r3
 800881a:	f104 34ff 	add.w	r4, r4, #4294967295
 800881e:	d203      	bcs.n	8008828 <quorem+0x110>
 8008820:	f853 2904 	ldr.w	r2, [r3], #-4
 8008824:	2a00      	cmp	r2, #0
 8008826:	d0f7      	beq.n	8008818 <quorem+0x100>
 8008828:	f8c9 4010 	str.w	r4, [r9, #16]
 800882c:	4630      	mov	r0, r6
 800882e:	b003      	add	sp, #12
 8008830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008834:	2000      	movs	r0, #0
 8008836:	b003      	add	sp, #12
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	0000      	movs	r0, r0
 800883e:	0000      	movs	r0, r0

08008840 <_dtoa_r>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008846:	b099      	sub	sp, #100	; 0x64
 8008848:	4690      	mov	r8, r2
 800884a:	4699      	mov	r9, r3
 800884c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8008850:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008852:	4604      	mov	r4, r0
 8008854:	b141      	cbz	r1, 8008868 <_dtoa_r+0x28>
 8008856:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008858:	604a      	str	r2, [r1, #4]
 800885a:	2301      	movs	r3, #1
 800885c:	4093      	lsls	r3, r2
 800885e:	608b      	str	r3, [r1, #8]
 8008860:	f001 fcc8 	bl	800a1f4 <_Bfree>
 8008864:	2300      	movs	r3, #0
 8008866:	6423      	str	r3, [r4, #64]	; 0x40
 8008868:	f1b9 0a00 	subs.w	sl, r9, #0
 800886c:	bfb4      	ite	lt
 800886e:	2301      	movlt	r3, #1
 8008870:	2300      	movge	r3, #0
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	4b76      	ldr	r3, [pc, #472]	; (8008a50 <_dtoa_r+0x210>)
 8008876:	bfbc      	itt	lt
 8008878:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 800887c:	f8cd a014 	strlt.w	sl, [sp, #20]
 8008880:	ea33 030a 	bics.w	r3, r3, sl
 8008884:	f000 80aa 	beq.w	80089dc <_dtoa_r+0x19c>
 8008888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800888c:	4610      	mov	r0, r2
 800888e:	4619      	mov	r1, r3
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008898:	f7fa f8d6 	bl	8002a48 <__aeabi_dcmpeq>
 800889c:	4607      	mov	r7, r0
 800889e:	b170      	cbz	r0, 80088be <_dtoa_r+0x7e>
 80088a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088a2:	2301      	movs	r3, #1
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 82e4 	beq.w	8008e76 <_dtoa_r+0x636>
 80088ae:	4869      	ldr	r0, [pc, #420]	; (8008a54 <_dtoa_r+0x214>)
 80088b0:	6018      	str	r0, [r3, #0]
 80088b2:	1e43      	subs	r3, r0, #1
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	9803      	ldr	r0, [sp, #12]
 80088b8:	b019      	add	sp, #100	; 0x64
 80088ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088be:	ab16      	add	r3, sp, #88	; 0x58
 80088c0:	9301      	str	r3, [sp, #4]
 80088c2:	ab17      	add	r3, sp, #92	; 0x5c
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4620      	mov	r0, r4
 80088c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80088cc:	f001 ffb4 	bl	800a838 <__d2b>
 80088d0:	ea5f 561a 	movs.w	r6, sl, lsr #20
 80088d4:	4605      	mov	r5, r0
 80088d6:	f040 8097 	bne.w	8008a08 <_dtoa_r+0x1c8>
 80088da:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
 80088de:	443e      	add	r6, r7
 80088e0:	f206 4032 	addw	r0, r6, #1074	; 0x432
 80088e4:	2820      	cmp	r0, #32
 80088e6:	f340 83b5 	ble.w	8009054 <_dtoa_r+0x814>
 80088ea:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80088ee:	fa0a fa00 	lsl.w	sl, sl, r0
 80088f2:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80088f6:	fa28 f000 	lsr.w	r0, r8, r0
 80088fa:	ea4a 0000 	orr.w	r0, sl, r0
 80088fe:	f7f9 fdc1 	bl	8002484 <__aeabi_ui2d>
 8008902:	2301      	movs	r3, #1
 8008904:	3e01      	subs	r6, #1
 8008906:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800890a:	930f      	str	r3, [sp, #60]	; 0x3c
 800890c:	4b52      	ldr	r3, [pc, #328]	; (8008a58 <_dtoa_r+0x218>)
 800890e:	2200      	movs	r2, #0
 8008910:	f7f9 fc7a 	bl	8002208 <__aeabi_dsub>
 8008914:	a348      	add	r3, pc, #288	; (adr r3, 8008a38 <_dtoa_r+0x1f8>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f9 fe2d 	bl	8002578 <__aeabi_dmul>
 800891e:	a348      	add	r3, pc, #288	; (adr r3, 8008a40 <_dtoa_r+0x200>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f9 fc72 	bl	800220c <__adddf3>
 8008928:	4680      	mov	r8, r0
 800892a:	4630      	mov	r0, r6
 800892c:	4689      	mov	r9, r1
 800892e:	f7f9 fdb9 	bl	80024a4 <__aeabi_i2d>
 8008932:	a345      	add	r3, pc, #276	; (adr r3, 8008a48 <_dtoa_r+0x208>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f9 fe1e 	bl	8002578 <__aeabi_dmul>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f9 fc62 	bl	800220c <__adddf3>
 8008948:	4680      	mov	r8, r0
 800894a:	4689      	mov	r9, r1
 800894c:	f7fa f8c4 	bl	8002ad8 <__aeabi_d2iz>
 8008950:	2200      	movs	r2, #0
 8008952:	4683      	mov	fp, r0
 8008954:	2300      	movs	r3, #0
 8008956:	4640      	mov	r0, r8
 8008958:	4649      	mov	r1, r9
 800895a:	f7fa f87f 	bl	8002a5c <__aeabi_dcmplt>
 800895e:	2800      	cmp	r0, #0
 8008960:	f040 827c 	bne.w	8008e5c <_dtoa_r+0x61c>
 8008964:	f1bb 0f16 	cmp.w	fp, #22
 8008968:	f200 826b 	bhi.w	8008e42 <_dtoa_r+0x602>
 800896c:	4b3b      	ldr	r3, [pc, #236]	; (8008a5c <_dtoa_r+0x21c>)
 800896e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800897a:	f7fa f86f 	bl	8002a5c <__aeabi_dcmplt>
 800897e:	2800      	cmp	r0, #0
 8008980:	d072      	beq.n	8008a68 <_dtoa_r+0x228>
 8008982:	2300      	movs	r3, #0
 8008984:	1bbe      	subs	r6, r7, r6
 8008986:	930e      	str	r3, [sp, #56]	; 0x38
 8008988:	1e73      	subs	r3, r6, #1
 800898a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800898e:	9306      	str	r3, [sp, #24]
 8008990:	f100 825e 	bmi.w	8008e50 <_dtoa_r+0x610>
 8008994:	2300      	movs	r3, #0
 8008996:	9309      	str	r3, [sp, #36]	; 0x24
 8008998:	f1bb 0f00 	cmp.w	fp, #0
 800899c:	da6b      	bge.n	8008a76 <_dtoa_r+0x236>
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	f8cd b01c 	str.w	fp, [sp, #28]
 80089a4:	eba3 030b 	sub.w	r3, r3, fp
 80089a8:	9309      	str	r3, [sp, #36]	; 0x24
 80089aa:	f1cb 0300 	rsb	r3, fp, #0
 80089ae:	930d      	str	r3, [sp, #52]	; 0x34
 80089b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	f04f 0b00 	mov.w	fp, #0
 80089b8:	d866      	bhi.n	8008a88 <_dtoa_r+0x248>
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	f340 8348 	ble.w	8009050 <_dtoa_r+0x810>
 80089c0:	3b04      	subs	r3, #4
 80089c2:	9322      	str	r3, [sp, #136]	; 0x88
 80089c4:	2600      	movs	r6, #0
 80089c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089c8:	3b02      	subs	r3, #2
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	f200 8668 	bhi.w	80096a0 <_dtoa_r+0xe60>
 80089d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80089d4:	0459045c 	.word	0x0459045c
 80089d8:	04330450 	.word	0x04330450
 80089dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80089de:	f242 730f 	movw	r3, #9999	; 0x270f
 80089e2:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	ea5a 0308 	orrs.w	r3, sl, r8
 80089ec:	d11a      	bne.n	8008a24 <_dtoa_r+0x1e4>
 80089ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8664 	beq.w	80096be <_dtoa_r+0xe7e>
 80089f6:	4b1a      	ldr	r3, [pc, #104]	; (8008a60 <_dtoa_r+0x220>)
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	3308      	adds	r3, #8
 80089fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80089fe:	9803      	ldr	r0, [sp, #12]
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	b019      	add	sp, #100	; 0x64
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008a0c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8008a10:	4608      	mov	r0, r1
 8008a12:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008a16:	970f      	str	r7, [sp, #60]	; 0x3c
 8008a18:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8008a1c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8008a1e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008a22:	e773      	b.n	800890c <_dtoa_r+0xcc>
 8008a24:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f040 83ea 	bne.w	8009200 <_dtoa_r+0x9c0>
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <_dtoa_r+0x224>)
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	e741      	b.n	80088b6 <_dtoa_r+0x76>
 8008a32:	bf00      	nop
 8008a34:	f3af 8000 	nop.w
 8008a38:	636f4361 	.word	0x636f4361
 8008a3c:	3fd287a7 	.word	0x3fd287a7
 8008a40:	8b60c8b3 	.word	0x8b60c8b3
 8008a44:	3fc68a28 	.word	0x3fc68a28
 8008a48:	509f79fb 	.word	0x509f79fb
 8008a4c:	3fd34413 	.word	0x3fd34413
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	0800d645 	.word	0x0800d645
 8008a58:	3ff80000 	.word	0x3ff80000
 8008a5c:	0800d7b8 	.word	0x0800d7b8
 8008a60:	0800d66c 	.word	0x0800d66c
 8008a64:	0800d668 	.word	0x0800d668
 8008a68:	1bbe      	subs	r6, r7, r6
 8008a6a:	1e73      	subs	r3, r6, #1
 8008a6c:	9306      	str	r3, [sp, #24]
 8008a6e:	f100 8485 	bmi.w	800937c <_dtoa_r+0xb3c>
 8008a72:	900e      	str	r0, [sp, #56]	; 0x38
 8008a74:	9009      	str	r0, [sp, #36]	; 0x24
 8008a76:	9b06      	ldr	r3, [sp, #24]
 8008a78:	445b      	add	r3, fp
 8008a7a:	e9cd 3b06 	strd	r3, fp, [sp, #24]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	930d      	str	r3, [sp, #52]	; 0x34
 8008a82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d998      	bls.n	80089ba <_dtoa_r+0x17a>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
 8008a8e:	2601      	movs	r6, #1
 8008a90:	f04f 33ff 	mov.w	r3, #4294967295
 8008a94:	960c      	str	r6, [sp, #48]	; 0x30
 8008a96:	9308      	str	r3, [sp, #32]
 8008a98:	9b08      	ldr	r3, [sp, #32]
 8008a9a:	9312      	str	r3, [sp, #72]	; 0x48
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	6461      	str	r1, [r4, #68]	; 0x44
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f001 fb81 	bl	800a1a8 <_Balloc>
 8008aa6:	9003      	str	r0, [sp, #12]
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f000 8601 	beq.w	80096b0 <_dtoa_r+0xe70>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	6423      	str	r3, [r4, #64]	; 0x40
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	2b0e      	cmp	r3, #14
 8008ab6:	f200 8113 	bhi.w	8008ce0 <_dtoa_r+0x4a0>
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	f000 8110 	beq.w	8008ce0 <_dtoa_r+0x4a0>
 8008ac0:	9907      	ldr	r1, [sp, #28]
 8008ac2:	2900      	cmp	r1, #0
 8008ac4:	f340 845c 	ble.w	8009380 <_dtoa_r+0xb40>
 8008ac8:	4bae      	ldr	r3, [pc, #696]	; (8008d84 <_dtoa_r+0x544>)
 8008aca:	f001 020f 	and.w	r2, r1, #15
 8008ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ad2:	ea4f 1821 	mov.w	r8, r1, asr #4
 8008ad6:	05c9      	lsls	r1, r1, #23
 8008ad8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008adc:	f140 8414 	bpl.w	8009308 <_dtoa_r+0xac8>
 8008ae0:	4ba9      	ldr	r3, [pc, #676]	; (8008d88 <_dtoa_r+0x548>)
 8008ae2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ae6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aea:	f7f9 fe6f 	bl	80027cc <__aeabi_ddiv>
 8008aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008af2:	f008 080f 	and.w	r8, r8, #15
 8008af6:	f04f 0a03 	mov.w	sl, #3
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	d013      	beq.n	8008b28 <_dtoa_r+0x2e8>
 8008b00:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8008d88 <_dtoa_r+0x548>
 8008b04:	f018 0f01 	tst.w	r8, #1
 8008b08:	d009      	beq.n	8008b1e <_dtoa_r+0x2de>
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b12:	f7f9 fd31 	bl	8002578 <__aeabi_dmul>
 8008b16:	f10a 0a01 	add.w	sl, sl, #1
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008b22:	f109 0908 	add.w	r9, r9, #8
 8008b26:	d1ed      	bne.n	8008b04 <_dtoa_r+0x2c4>
 8008b28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b2c:	4632      	mov	r2, r6
 8008b2e:	463b      	mov	r3, r7
 8008b30:	f7f9 fe4c 	bl	80027cc <__aeabi_ddiv>
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3a:	b143      	cbz	r3, 8008b4e <_dtoa_r+0x30e>
 8008b3c:	4b93      	ldr	r3, [pc, #588]	; (8008d8c <_dtoa_r+0x54c>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	f7f9 ff8a 	bl	8002a5c <__aeabi_dcmplt>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f040 8530 	bne.w	80095ae <_dtoa_r+0xd6e>
 8008b4e:	4650      	mov	r0, sl
 8008b50:	f7f9 fca8 	bl	80024a4 <__aeabi_i2d>
 8008b54:	4642      	mov	r2, r8
 8008b56:	464b      	mov	r3, r9
 8008b58:	f7f9 fd0e 	bl	8002578 <__aeabi_dmul>
 8008b5c:	4b8c      	ldr	r3, [pc, #560]	; (8008d90 <_dtoa_r+0x550>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f7f9 fb54 	bl	800220c <__adddf3>
 8008b64:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b6c:	9311      	str	r3, [sp, #68]	; 0x44
 8008b6e:	9b08      	ldr	r3, [sp, #32]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8097 	beq.w	8008ca4 <_dtoa_r+0x464>
 8008b76:	9b07      	ldr	r3, [sp, #28]
 8008b78:	9314      	str	r3, [sp, #80]	; 0x50
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 84a5 	beq.w	80094d0 <_dtoa_r+0xc90>
 8008b86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b88:	4b7e      	ldr	r3, [pc, #504]	; (8008d84 <_dtoa_r+0x544>)
 8008b8a:	4982      	ldr	r1, [pc, #520]	; (8008d94 <_dtoa_r+0x554>)
 8008b8c:	9e03      	ldr	r6, [sp, #12]
 8008b8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b96:	2000      	movs	r0, #0
 8008b98:	f7f9 fe18 	bl	80027cc <__aeabi_ddiv>
 8008b9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ba0:	f7f9 fb32 	bl	8002208 <__aeabi_dsub>
 8008ba4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ba8:	4649      	mov	r1, r9
 8008baa:	4640      	mov	r0, r8
 8008bac:	f7f9 ff94 	bl	8002ad8 <__aeabi_d2iz>
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	f7f9 fc77 	bl	80024a4 <__aeabi_i2d>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f9 fb23 	bl	8002208 <__aeabi_dsub>
 8008bc2:	3730      	adds	r7, #48	; 0x30
 8008bc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bc8:	f806 7b01 	strb.w	r7, [r6], #1
 8008bcc:	4680      	mov	r8, r0
 8008bce:	4689      	mov	r9, r1
 8008bd0:	f7f9 ff44 	bl	8002a5c <__aeabi_dcmplt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	f040 8529 	bne.w	800962c <_dtoa_r+0xdec>
 8008bda:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 8008bde:	2700      	movs	r7, #0
 8008be0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8008be4:	9510      	str	r5, [sp, #64]	; 0x40
 8008be6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008be8:	9413      	str	r4, [sp, #76]	; 0x4c
 8008bea:	e02a      	b.n	8008c42 <_dtoa_r+0x402>
 8008bec:	3701      	adds	r7, #1
 8008bee:	42af      	cmp	r7, r5
 8008bf0:	f280 852c 	bge.w	800964c <_dtoa_r+0xe0c>
 8008bf4:	4b68      	ldr	r3, [pc, #416]	; (8008d98 <_dtoa_r+0x558>)
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f9 fcbc 	bl	8002578 <__aeabi_dmul>
 8008c00:	4b65      	ldr	r3, [pc, #404]	; (8008d98 <_dtoa_r+0x558>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	4682      	mov	sl, r0
 8008c06:	468b      	mov	fp, r1
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f7f9 fcb4 	bl	8002578 <__aeabi_dmul>
 8008c10:	4689      	mov	r9, r1
 8008c12:	4680      	mov	r8, r0
 8008c14:	f7f9 ff60 	bl	8002ad8 <__aeabi_d2iz>
 8008c18:	4604      	mov	r4, r0
 8008c1a:	f7f9 fc43 	bl	80024a4 <__aeabi_i2d>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f9 faef 	bl	8002208 <__aeabi_dsub>
 8008c2a:	3430      	adds	r4, #48	; 0x30
 8008c2c:	f806 4b01 	strb.w	r4, [r6], #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	465b      	mov	r3, fp
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	f7f9 ff10 	bl	8002a5c <__aeabi_dcmplt>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	f040 84f3 	bne.w	8009628 <_dtoa_r+0xde8>
 8008c42:	4642      	mov	r2, r8
 8008c44:	464b      	mov	r3, r9
 8008c46:	4951      	ldr	r1, [pc, #324]	; (8008d8c <_dtoa_r+0x54c>)
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f7f9 fadd 	bl	8002208 <__aeabi_dsub>
 8008c4e:	4652      	mov	r2, sl
 8008c50:	465b      	mov	r3, fp
 8008c52:	f7f9 ff03 	bl	8002a5c <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0c8      	beq.n	8008bec <_dtoa_r+0x3ac>
 8008c5a:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
 8008c5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008c60:	9a03      	ldr	r2, [sp, #12]
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	e002      	b.n	8008c6c <_dtoa_r+0x42c>
 8008c66:	4296      	cmp	r6, r2
 8008c68:	f000 84c8 	beq.w	80095fc <_dtoa_r+0xdbc>
 8008c6c:	46b2      	mov	sl, r6
 8008c6e:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 8008c72:	2b39      	cmp	r3, #57	; 0x39
 8008c74:	d0f7      	beq.n	8008c66 <_dtoa_r+0x426>
 8008c76:	3301      	adds	r3, #1
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	7033      	strb	r3, [r6, #0]
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	e1c8      	b.n	8009016 <_dtoa_r+0x7d6>
 8008c84:	4650      	mov	r0, sl
 8008c86:	f7f9 fc0d 	bl	80024a4 <__aeabi_i2d>
 8008c8a:	4642      	mov	r2, r8
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	f7f9 fc73 	bl	8002578 <__aeabi_dmul>
 8008c92:	4b3f      	ldr	r3, [pc, #252]	; (8008d90 <_dtoa_r+0x550>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	f7f9 fab9 	bl	800220c <__adddf3>
 8008c9a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ca2:	9311      	str	r3, [sp, #68]	; 0x44
 8008ca4:	4b3d      	ldr	r3, [pc, #244]	; (8008d9c <_dtoa_r+0x55c>)
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	4649      	mov	r1, r9
 8008caa:	2200      	movs	r2, #0
 8008cac:	f7f9 faac 	bl	8002208 <__aeabi_dsub>
 8008cb0:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	4642      	mov	r2, r8
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	f7f9 feec 	bl	8002a98 <__aeabi_dcmpgt>
 8008cc0:	4681      	mov	r9, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f040 84aa 	bne.w	800961c <_dtoa_r+0xddc>
 8008cc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f9 fec1 	bl	8002a5c <__aeabi_dcmplt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f040 8345 	bne.w	800936a <_dtoa_r+0xb2a>
 8008ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f2c0 808c 	blt.w	8008e00 <_dtoa_r+0x5c0>
 8008ce8:	9a07      	ldr	r2, [sp, #28]
 8008cea:	2a0e      	cmp	r2, #14
 8008cec:	f300 8088 	bgt.w	8008e00 <_dtoa_r+0x5c0>
 8008cf0:	4b24      	ldr	r3, [pc, #144]	; (8008d84 <_dtoa_r+0x544>)
 8008cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf6:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8008cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da1b      	bge.n	8008d38 <_dtoa_r+0x4f8>
 8008d00:	9b08      	ldr	r3, [sp, #32]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	dc18      	bgt.n	8008d38 <_dtoa_r+0x4f8>
 8008d06:	f040 832e 	bne.w	8009366 <_dtoa_r+0xb26>
 8008d0a:	4b24      	ldr	r3, [pc, #144]	; (8008d9c <_dtoa_r+0x55c>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4650      	mov	r0, sl
 8008d10:	4659      	mov	r1, fp
 8008d12:	f7f9 fc31 	bl	8002578 <__aeabi_dmul>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d1e:	f7f9 fea7 	bl	8002a70 <__aeabi_dcmple>
 8008d22:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d26:	464e      	mov	r6, r9
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	f000 82c7 	beq.w	80092bc <_dtoa_r+0xa7c>
 8008d2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d34:	43df      	mvns	r7, r3
 8008d36:	e2c9      	b.n	80092cc <_dtoa_r+0xa8c>
 8008d38:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8008d3c:	4652      	mov	r2, sl
 8008d3e:	465b      	mov	r3, fp
 8008d40:	4638      	mov	r0, r7
 8008d42:	4641      	mov	r1, r8
 8008d44:	f7f9 fd42 	bl	80027cc <__aeabi_ddiv>
 8008d48:	f7f9 fec6 	bl	8002ad8 <__aeabi_d2iz>
 8008d4c:	4681      	mov	r9, r0
 8008d4e:	9009      	str	r0, [sp, #36]	; 0x24
 8008d50:	f7f9 fba8 	bl	80024a4 <__aeabi_i2d>
 8008d54:	4652      	mov	r2, sl
 8008d56:	465b      	mov	r3, fp
 8008d58:	f7f9 fc0e 	bl	8002578 <__aeabi_dmul>
 8008d5c:	9e03      	ldr	r6, [sp, #12]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4602      	mov	r2, r0
 8008d62:	4641      	mov	r1, r8
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7f9 fa4f 	bl	8002208 <__aeabi_dsub>
 8008d6a:	f109 0330 	add.w	r3, r9, #48	; 0x30
 8008d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8008d72:	9b08      	ldr	r3, [sp, #32]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	f000 835c 	beq.w	8009432 <_dtoa_r+0xbf2>
 8008d7a:	9406      	str	r4, [sp, #24]
 8008d7c:	2701      	movs	r7, #1
 8008d7e:	9504      	str	r5, [sp, #16]
 8008d80:	461c      	mov	r4, r3
 8008d82:	e02a      	b.n	8008dda <_dtoa_r+0x59a>
 8008d84:	0800d7b8 	.word	0x0800d7b8
 8008d88:	0800d790 	.word	0x0800d790
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	401c0000 	.word	0x401c0000
 8008d94:	3fe00000 	.word	0x3fe00000
 8008d98:	40240000 	.word	0x40240000
 8008d9c:	40140000 	.word	0x40140000
 8008da0:	4652      	mov	r2, sl
 8008da2:	465b      	mov	r3, fp
 8008da4:	4640      	mov	r0, r8
 8008da6:	4649      	mov	r1, r9
 8008da8:	f7f9 fd10 	bl	80027cc <__aeabi_ddiv>
 8008dac:	f7f9 fe94 	bl	8002ad8 <__aeabi_d2iz>
 8008db0:	4605      	mov	r5, r0
 8008db2:	f7f9 fb77 	bl	80024a4 <__aeabi_i2d>
 8008db6:	4652      	mov	r2, sl
 8008db8:	465b      	mov	r3, fp
 8008dba:	f7f9 fbdd 	bl	8002578 <__aeabi_dmul>
 8008dbe:	3701      	adds	r7, #1
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7f9 fa1e 	bl	8002208 <__aeabi_dsub>
 8008dcc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8008dd0:	42a7      	cmp	r7, r4
 8008dd2:	f806 3b01 	strb.w	r3, [r6], #1
 8008dd6:	f000 8329 	beq.w	800942c <_dtoa_r+0xbec>
 8008dda:	4bac      	ldr	r3, [pc, #688]	; (800908c <_dtoa_r+0x84c>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f7f9 fbcb 	bl	8002578 <__aeabi_dmul>
 8008de2:	2200      	movs	r2, #0
 8008de4:	2300      	movs	r3, #0
 8008de6:	4680      	mov	r8, r0
 8008de8:	4689      	mov	r9, r1
 8008dea:	f7f9 fe2d 	bl	8002a48 <__aeabi_dcmpeq>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d0d6      	beq.n	8008da0 <_dtoa_r+0x560>
 8008df2:	9d04      	ldr	r5, [sp, #16]
 8008df4:	9c06      	ldr	r4, [sp, #24]
 8008df6:	9b07      	ldr	r3, [sp, #28]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	46b2      	mov	sl, r6
 8008dfe:	e10a      	b.n	8009016 <_dtoa_r+0x7d6>
 8008e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d03d      	beq.n	8008e82 <_dtoa_r+0x642>
 8008e06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e08:	2a01      	cmp	r2, #1
 8008e0a:	f340 829c 	ble.w	8009346 <_dtoa_r+0xb06>
 8008e0e:	9b08      	ldr	r3, [sp, #32]
 8008e10:	f103 38ff 	add.w	r8, r3, #4294967295
 8008e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e16:	4543      	cmp	r3, r8
 8008e18:	f2c0 826d 	blt.w	80092f6 <_dtoa_r+0xab6>
 8008e1c:	eba3 0808 	sub.w	r8, r3, r8
 8008e20:	9b08      	ldr	r3, [sp, #32]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f2c0 833c 	blt.w	80094a0 <_dtoa_r+0xc60>
 8008e28:	9a06      	ldr	r2, [sp, #24]
 8008e2a:	441a      	add	r2, r3
 8008e2c:	9206      	str	r2, [sp, #24]
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	4617      	mov	r7, r2
 8008e32:	441a      	add	r2, r3
 8008e34:	9209      	str	r2, [sp, #36]	; 0x24
 8008e36:	2101      	movs	r1, #1
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f001 fa83 	bl	800a344 <__i2b>
 8008e3e:	4606      	mov	r6, r0
 8008e40:	e023      	b.n	8008e8a <_dtoa_r+0x64a>
 8008e42:	2301      	movs	r3, #1
 8008e44:	1bbe      	subs	r6, r7, r6
 8008e46:	930e      	str	r3, [sp, #56]	; 0x38
 8008e48:	1e73      	subs	r3, r6, #1
 8008e4a:	9306      	str	r3, [sp, #24]
 8008e4c:	f57f ada2 	bpl.w	8008994 <_dtoa_r+0x154>
 8008e50:	f1c6 0301 	rsb	r3, r6, #1
 8008e54:	9309      	str	r3, [sp, #36]	; 0x24
 8008e56:	2300      	movs	r3, #0
 8008e58:	9306      	str	r3, [sp, #24]
 8008e5a:	e59d      	b.n	8008998 <_dtoa_r+0x158>
 8008e5c:	4658      	mov	r0, fp
 8008e5e:	f7f9 fb21 	bl	80024a4 <__aeabi_i2d>
 8008e62:	4642      	mov	r2, r8
 8008e64:	464b      	mov	r3, r9
 8008e66:	f7f9 fdef 	bl	8002a48 <__aeabi_dcmpeq>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f47f ad7a 	bne.w	8008964 <_dtoa_r+0x124>
 8008e70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e74:	e576      	b.n	8008964 <_dtoa_r+0x124>
 8008e76:	4b86      	ldr	r3, [pc, #536]	; (8009090 <_dtoa_r+0x850>)
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	9803      	ldr	r0, [sp, #12]
 8008e7c:	b019      	add	sp, #100	; 0x64
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8008e86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e8a:	2f00      	cmp	r7, #0
 8008e8c:	dd0c      	ble.n	8008ea8 <_dtoa_r+0x668>
 8008e8e:	9906      	ldr	r1, [sp, #24]
 8008e90:	2900      	cmp	r1, #0
 8008e92:	460b      	mov	r3, r1
 8008e94:	dd08      	ble.n	8008ea8 <_dtoa_r+0x668>
 8008e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e98:	42b9      	cmp	r1, r7
 8008e9a:	bfa8      	it	ge
 8008e9c:	463b      	movge	r3, r7
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	1aff      	subs	r7, r7, r3
 8008ea2:	1acb      	subs	r3, r1, r3
 8008ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ea6:	9306      	str	r3, [sp, #24]
 8008ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eaa:	b1db      	cbz	r3, 8008ee4 <_dtoa_r+0x6a4>
 8008eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 825d 	beq.w	800936e <_dtoa_r+0xb2e>
 8008eb4:	f1b8 0f00 	cmp.w	r8, #0
 8008eb8:	dd0f      	ble.n	8008eda <_dtoa_r+0x69a>
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4642      	mov	r2, r8
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 fb1c 	bl	800a4fc <__pow5mult>
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	4606      	mov	r6, r0
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f001 fa68 	bl	800a3a0 <__multiply>
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f001 f98d 	bl	800a1f4 <_Bfree>
 8008eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008edc:	ebb3 0208 	subs.w	r2, r3, r8
 8008ee0:	f040 82d8 	bne.w	8009494 <_dtoa_r+0xc54>
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f001 fa2c 	bl	800a344 <__i2b>
 8008eec:	f1bb 0f00 	cmp.w	fp, #0
 8008ef0:	4681      	mov	r9, r0
 8008ef2:	f300 80b4 	bgt.w	800905e <_dtoa_r+0x81e>
 8008ef6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	f340 8186 	ble.w	800920a <_dtoa_r+0x9ca>
 8008efe:	f04f 0a00 	mov.w	sl, #0
 8008f02:	2001      	movs	r0, #1
 8008f04:	f1bb 0f00 	cmp.w	fp, #0
 8008f08:	f040 80b5 	bne.w	8009076 <_dtoa_r+0x836>
 8008f0c:	9a06      	ldr	r2, [sp, #24]
 8008f0e:	4410      	add	r0, r2
 8008f10:	f010 001f 	ands.w	r0, r0, #31
 8008f14:	f000 8093 	beq.w	800903e <_dtoa_r+0x7fe>
 8008f18:	f1c0 0320 	rsb	r3, r0, #32
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	f340 83d2 	ble.w	80096c6 <_dtoa_r+0xe86>
 8008f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f24:	f1c0 001c 	rsb	r0, r0, #28
 8008f28:	4403      	add	r3, r0
 8008f2a:	4402      	add	r2, r0
 8008f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2e:	4407      	add	r7, r0
 8008f30:	9206      	str	r2, [sp, #24]
 8008f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dd05      	ble.n	8008f44 <_dtoa_r+0x704>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f001 fb3d 	bl	800a5bc <__lshift>
 8008f42:	4605      	mov	r5, r0
 8008f44:	9b06      	ldr	r3, [sp, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	dd05      	ble.n	8008f56 <_dtoa_r+0x716>
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 fb34 	bl	800a5bc <__lshift>
 8008f54:	4681      	mov	r9, r0
 8008f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f040 8136 	bne.w	80091ca <_dtoa_r+0x98a>
 8008f5e:	9b08      	ldr	r3, [sp, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f340 811d 	ble.w	80091a0 <_dtoa_r+0x960>
 8008f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f040 80a0 	bne.w	80090ae <_dtoa_r+0x86e>
 8008f6e:	9b07      	ldr	r3, [sp, #28]
 8008f70:	3301      	adds	r3, #1
 8008f72:	9307      	str	r3, [sp, #28]
 8008f74:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f78:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008f7c:	2701      	movs	r7, #1
 8008f7e:	e007      	b.n	8008f90 <_dtoa_r+0x750>
 8008f80:	4629      	mov	r1, r5
 8008f82:	2300      	movs	r3, #0
 8008f84:	220a      	movs	r2, #10
 8008f86:	4620      	mov	r0, r4
 8008f88:	f001 f93e 	bl	800a208 <__multadd>
 8008f8c:	3701      	adds	r7, #1
 8008f8e:	4605      	mov	r5, r0
 8008f90:	4649      	mov	r1, r9
 8008f92:	4628      	mov	r0, r5
 8008f94:	f7ff fbc0 	bl	8008718 <quorem>
 8008f98:	4557      	cmp	r7, sl
 8008f9a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f9e:	f808 3b01 	strb.w	r3, [r8], #1
 8008fa2:	dbed      	blt.n	8008f80 <_dtoa_r+0x740>
 8008fa4:	9a08      	ldr	r2, [sp, #32]
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	bfc8      	it	gt
 8008faa:	4693      	movgt	fp, r2
 8008fac:	9a03      	ldr	r2, [sp, #12]
 8008fae:	bfd8      	it	le
 8008fb0:	f04f 0b01 	movle.w	fp, #1
 8008fb4:	4493      	add	fp, r2
 8008fb6:	2700      	movs	r7, #0
 8008fb8:	4629      	mov	r1, r5
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	f001 fafc 	bl	800a5bc <__lshift>
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	f001 fb70 	bl	800a6ac <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f340 81a8 	ble.w	8009322 <_dtoa_r+0xae2>
 8008fd2:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 8008fd6:	9a03      	ldr	r2, [sp, #12]
 8008fd8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fdc:	e004      	b.n	8008fe8 <_dtoa_r+0x7a8>
 8008fde:	455a      	cmp	r2, fp
 8008fe0:	f000 81aa 	beq.w	8009338 <_dtoa_r+0xaf8>
 8008fe4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8008fe8:	2b39      	cmp	r3, #57	; 0x39
 8008fea:	f10b 0a01 	add.w	sl, fp, #1
 8008fee:	d0f6      	beq.n	8008fde <_dtoa_r+0x79e>
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	f88b 3000 	strb.w	r3, [fp]
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f001 f8fb 	bl	800a1f4 <_Bfree>
 8008ffe:	b156      	cbz	r6, 8009016 <_dtoa_r+0x7d6>
 8009000:	b12f      	cbz	r7, 800900e <_dtoa_r+0x7ce>
 8009002:	42b7      	cmp	r7, r6
 8009004:	d003      	beq.n	800900e <_dtoa_r+0x7ce>
 8009006:	4639      	mov	r1, r7
 8009008:	4620      	mov	r0, r4
 800900a:	f001 f8f3 	bl	800a1f4 <_Bfree>
 800900e:	4631      	mov	r1, r6
 8009010:	4620      	mov	r0, r4
 8009012:	f001 f8ef 	bl	800a1f4 <_Bfree>
 8009016:	4629      	mov	r1, r5
 8009018:	4620      	mov	r0, r4
 800901a:	f001 f8eb 	bl	800a1f4 <_Bfree>
 800901e:	2300      	movs	r3, #0
 8009020:	f88a 3000 	strb.w	r3, [sl]
 8009024:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009026:	9a07      	ldr	r2, [sp, #28]
 8009028:	601a      	str	r2, [r3, #0]
 800902a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800902c:	2b00      	cmp	r3, #0
 800902e:	f43f ac42 	beq.w	80088b6 <_dtoa_r+0x76>
 8009032:	9803      	ldr	r0, [sp, #12]
 8009034:	f8c3 a000 	str.w	sl, [r3]
 8009038:	b019      	add	sp, #100	; 0x64
 800903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903e:	201c      	movs	r0, #28
 8009040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009042:	4403      	add	r3, r0
 8009044:	9309      	str	r3, [sp, #36]	; 0x24
 8009046:	9b06      	ldr	r3, [sp, #24]
 8009048:	4403      	add	r3, r0
 800904a:	4407      	add	r7, r0
 800904c:	9306      	str	r3, [sp, #24]
 800904e:	e770      	b.n	8008f32 <_dtoa_r+0x6f2>
 8009050:	2601      	movs	r6, #1
 8009052:	e4b8      	b.n	80089c6 <_dtoa_r+0x186>
 8009054:	f1c0 0020 	rsb	r0, r0, #32
 8009058:	fa08 f000 	lsl.w	r0, r8, r0
 800905c:	e44f      	b.n	80088fe <_dtoa_r+0xbe>
 800905e:	4601      	mov	r1, r0
 8009060:	465a      	mov	r2, fp
 8009062:	4620      	mov	r0, r4
 8009064:	f001 fa4a 	bl	800a4fc <__pow5mult>
 8009068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800906a:	2b01      	cmp	r3, #1
 800906c:	4681      	mov	r9, r0
 800906e:	f340 81b3 	ble.w	80093d8 <_dtoa_r+0xb98>
 8009072:	f04f 0a00 	mov.w	sl, #0
 8009076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800907a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800907e:	6918      	ldr	r0, [r3, #16]
 8009080:	f001 f912 	bl	800a2a8 <__hi0bits>
 8009084:	f1c0 0020 	rsb	r0, r0, #32
 8009088:	e740      	b.n	8008f0c <_dtoa_r+0x6cc>
 800908a:	bf00      	nop
 800908c:	40240000 	.word	0x40240000
 8009090:	0800d644 	.word	0x0800d644
 8009094:	4631      	mov	r1, r6
 8009096:	2300      	movs	r3, #0
 8009098:	220a      	movs	r2, #10
 800909a:	4620      	mov	r0, r4
 800909c:	f001 f8b4 	bl	800a208 <__multadd>
 80090a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	4606      	mov	r6, r0
 80090a6:	f340 82e7 	ble.w	8009678 <_dtoa_r+0xe38>
 80090aa:	e9cd 8307 	strd	r8, r3, [sp, #28]
 80090ae:	2f00      	cmp	r7, #0
 80090b0:	f300 811a 	bgt.w	80092e8 <_dtoa_r+0xaa8>
 80090b4:	f1ba 0f00 	cmp.w	sl, #0
 80090b8:	f040 81d5 	bne.w	8009466 <_dtoa_r+0xc26>
 80090bc:	46b0      	mov	r8, r6
 80090be:	9b04      	ldr	r3, [sp, #16]
 80090c0:	9f03      	ldr	r7, [sp, #12]
 80090c2:	9908      	ldr	r1, [sp, #32]
 80090c4:	f003 0201 	and.w	r2, r3, #1
 80090c8:	1e7b      	subs	r3, r7, #1
 80090ca:	4419      	add	r1, r3
 80090cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090ce:	920c      	str	r2, [sp, #48]	; 0x30
 80090d0:	4313      	orrs	r3, r2
 80090d2:	9109      	str	r1, [sp, #36]	; 0x24
 80090d4:	930a      	str	r3, [sp, #40]	; 0x28
 80090d6:	4649      	mov	r1, r9
 80090d8:	4628      	mov	r0, r5
 80090da:	f7ff fb1d 	bl	8008718 <quorem>
 80090de:	4631      	mov	r1, r6
 80090e0:	4683      	mov	fp, r0
 80090e2:	4628      	mov	r0, r5
 80090e4:	f001 fae2 	bl	800a6ac <__mcmp>
 80090e8:	4642      	mov	r2, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	4682      	mov	sl, r0
 80090ee:	4620      	mov	r0, r4
 80090f0:	f001 fafc 	bl	800a6ec <__mdiff>
 80090f4:	68c2      	ldr	r2, [r0, #12]
 80090f6:	4601      	mov	r1, r0
 80090f8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	d142      	bne.n	8009186 <_dtoa_r+0x946>
 8009100:	9006      	str	r0, [sp, #24]
 8009102:	4628      	mov	r0, r5
 8009104:	9308      	str	r3, [sp, #32]
 8009106:	f001 fad1 	bl	800a6ac <__mcmp>
 800910a:	9906      	ldr	r1, [sp, #24]
 800910c:	9004      	str	r0, [sp, #16]
 800910e:	4620      	mov	r0, r4
 8009110:	f001 f870 	bl	800a1f4 <_Bfree>
 8009114:	9a04      	ldr	r2, [sp, #16]
 8009116:	9b08      	ldr	r3, [sp, #32]
 8009118:	b91a      	cbnz	r2, 8009122 <_dtoa_r+0x8e2>
 800911a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800911c:	2900      	cmp	r1, #0
 800911e:	f000 829b 	beq.w	8009658 <_dtoa_r+0xe18>
 8009122:	f1ba 0f00 	cmp.w	sl, #0
 8009126:	f2c0 8163 	blt.w	80093f0 <_dtoa_r+0xbb0>
 800912a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800912c:	ea4a 0a01 	orr.w	sl, sl, r1
 8009130:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009132:	ea51 010a 	orrs.w	r1, r1, sl
 8009136:	f000 815b 	beq.w	80093f0 <_dtoa_r+0xbb0>
 800913a:	2a00      	cmp	r2, #0
 800913c:	f300 81b4 	bgt.w	80094a8 <_dtoa_r+0xc68>
 8009140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009142:	703b      	strb	r3, [r7, #0]
 8009144:	f107 0a01 	add.w	sl, r7, #1
 8009148:	4297      	cmp	r7, r2
 800914a:	46d3      	mov	fp, sl
 800914c:	f000 81b2 	beq.w	80094b4 <_dtoa_r+0xc74>
 8009150:	4629      	mov	r1, r5
 8009152:	2300      	movs	r3, #0
 8009154:	220a      	movs	r2, #10
 8009156:	4620      	mov	r0, r4
 8009158:	f001 f856 	bl	800a208 <__multadd>
 800915c:	4546      	cmp	r6, r8
 800915e:	4605      	mov	r5, r0
 8009160:	4631      	mov	r1, r6
 8009162:	f04f 0300 	mov.w	r3, #0
 8009166:	f04f 020a 	mov.w	r2, #10
 800916a:	4620      	mov	r0, r4
 800916c:	d012      	beq.n	8009194 <_dtoa_r+0x954>
 800916e:	f001 f84b 	bl	800a208 <__multadd>
 8009172:	4641      	mov	r1, r8
 8009174:	4606      	mov	r6, r0
 8009176:	2300      	movs	r3, #0
 8009178:	220a      	movs	r2, #10
 800917a:	4620      	mov	r0, r4
 800917c:	f001 f844 	bl	800a208 <__multadd>
 8009180:	4657      	mov	r7, sl
 8009182:	4680      	mov	r8, r0
 8009184:	e7a7      	b.n	80090d6 <_dtoa_r+0x896>
 8009186:	4620      	mov	r0, r4
 8009188:	9304      	str	r3, [sp, #16]
 800918a:	f001 f833 	bl	800a1f4 <_Bfree>
 800918e:	9b04      	ldr	r3, [sp, #16]
 8009190:	2201      	movs	r2, #1
 8009192:	e7c6      	b.n	8009122 <_dtoa_r+0x8e2>
 8009194:	f001 f838 	bl	800a208 <__multadd>
 8009198:	4657      	mov	r7, sl
 800919a:	4606      	mov	r6, r0
 800919c:	4680      	mov	r8, r0
 800919e:	e79a      	b.n	80090d6 <_dtoa_r+0x896>
 80091a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	dc79      	bgt.n	800929a <_dtoa_r+0xa5a>
 80091a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d180      	bne.n	80090ae <_dtoa_r+0x86e>
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	4649      	mov	r1, r9
 80091b0:	3301      	adds	r3, #1
 80091b2:	4628      	mov	r0, r5
 80091b4:	9307      	str	r3, [sp, #28]
 80091b6:	f7ff faaf 	bl	8008718 <quorem>
 80091ba:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80091be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80091c2:	f80b 3b01 	strb.w	r3, [fp], #1
 80091c6:	2700      	movs	r7, #0
 80091c8:	e6f6      	b.n	8008fb8 <_dtoa_r+0x778>
 80091ca:	4649      	mov	r1, r9
 80091cc:	4628      	mov	r0, r5
 80091ce:	f001 fa6d 	bl	800a6ac <__mcmp>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f6bf aec3 	bge.w	8008f5e <_dtoa_r+0x71e>
 80091d8:	4629      	mov	r1, r5
 80091da:	2300      	movs	r3, #0
 80091dc:	220a      	movs	r2, #10
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 f812 	bl	800a208 <__multadd>
 80091e4:	9b07      	ldr	r3, [sp, #28]
 80091e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80091ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ec:	4605      	mov	r5, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f47f af50 	bne.w	8009094 <_dtoa_r+0x854>
 80091f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f340 8235 	ble.w	8009666 <_dtoa_r+0xe26>
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	e6b9      	b.n	8008f74 <_dtoa_r+0x734>
 8009200:	4baf      	ldr	r3, [pc, #700]	; (80094c0 <_dtoa_r+0xc80>)
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	3303      	adds	r3, #3
 8009206:	f7ff bbf9 	b.w	80089fc <_dtoa_r+0x1bc>
 800920a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800920e:	2900      	cmp	r1, #0
 8009210:	f47f ae75 	bne.w	8008efe <_dtoa_r+0x6be>
 8009214:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8009218:	2b00      	cmp	r3, #0
 800921a:	f47f ae70 	bne.w	8008efe <_dtoa_r+0x6be>
 800921e:	4ba9      	ldr	r3, [pc, #676]	; (80094c4 <_dtoa_r+0xc84>)
 8009220:	4013      	ands	r3, r2
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 81fe 	beq.w	8009624 <_dtoa_r+0xde4>
 8009228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922a:	3301      	adds	r3, #1
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	9b06      	ldr	r3, [sp, #24]
 8009230:	3301      	adds	r3, #1
 8009232:	9306      	str	r3, [sp, #24]
 8009234:	f04f 0a01 	mov.w	sl, #1
 8009238:	e663      	b.n	8008f02 <_dtoa_r+0x6c2>
 800923a:	2301      	movs	r3, #1
 800923c:	930c      	str	r3, [sp, #48]	; 0x30
 800923e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009240:	9a07      	ldr	r2, [sp, #28]
 8009242:	4413      	add	r3, r2
 8009244:	9312      	str	r3, [sp, #72]	; 0x48
 8009246:	3301      	adds	r3, #1
 8009248:	2b01      	cmp	r3, #1
 800924a:	461f      	mov	r7, r3
 800924c:	9308      	str	r3, [sp, #32]
 800924e:	bfb8      	it	lt
 8009250:	2701      	movlt	r7, #1
 8009252:	2100      	movs	r1, #0
 8009254:	2f17      	cmp	r7, #23
 8009256:	6461      	str	r1, [r4, #68]	; 0x44
 8009258:	f77f ac22 	ble.w	8008aa0 <_dtoa_r+0x260>
 800925c:	2201      	movs	r2, #1
 800925e:	2304      	movs	r3, #4
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	f103 0014 	add.w	r0, r3, #20
 8009266:	42b8      	cmp	r0, r7
 8009268:	4611      	mov	r1, r2
 800926a:	f102 0201 	add.w	r2, r2, #1
 800926e:	d9f7      	bls.n	8009260 <_dtoa_r+0xa20>
 8009270:	6461      	str	r1, [r4, #68]	; 0x44
 8009272:	e415      	b.n	8008aa0 <_dtoa_r+0x260>
 8009274:	2301      	movs	r3, #1
 8009276:	930c      	str	r3, [sp, #48]	; 0x30
 8009278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800927a:	2b00      	cmp	r3, #0
 800927c:	dd4c      	ble.n	8009318 <_dtoa_r+0xad8>
 800927e:	9312      	str	r3, [sp, #72]	; 0x48
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	461f      	mov	r7, r3
 8009284:	e7e5      	b.n	8009252 <_dtoa_r+0xa12>
 8009286:	2300      	movs	r3, #0
 8009288:	930c      	str	r3, [sp, #48]	; 0x30
 800928a:	e7d8      	b.n	800923e <_dtoa_r+0x9fe>
 800928c:	2300      	movs	r3, #0
 800928e:	930c      	str	r3, [sp, #48]	; 0x30
 8009290:	e7f2      	b.n	8009278 <_dtoa_r+0xa38>
 8009292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009294:	f8cd 801c 	str.w	r8, [sp, #28]
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f47f ad46 	bne.w	8008d2e <_dtoa_r+0x4ee>
 80092a2:	4649      	mov	r1, r9
 80092a4:	2205      	movs	r2, #5
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 ffae 	bl	800a208 <__multadd>
 80092ac:	4601      	mov	r1, r0
 80092ae:	4681      	mov	r9, r0
 80092b0:	4628      	mov	r0, r5
 80092b2:	f001 f9fb 	bl	800a6ac <__mcmp>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f77f ad39 	ble.w	8008d2e <_dtoa_r+0x4ee>
 80092bc:	9803      	ldr	r0, [sp, #12]
 80092be:	9f07      	ldr	r7, [sp, #28]
 80092c0:	2331      	movs	r3, #49	; 0x31
 80092c2:	4680      	mov	r8, r0
 80092c4:	f800 3b01 	strb.w	r3, [r0], #1
 80092c8:	3701      	adds	r7, #1
 80092ca:	9003      	str	r0, [sp, #12]
 80092cc:	4649      	mov	r1, r9
 80092ce:	4620      	mov	r0, r4
 80092d0:	f000 ff90 	bl	800a1f4 <_Bfree>
 80092d4:	1c7b      	adds	r3, r7, #1
 80092d6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80092da:	9307      	str	r3, [sp, #28]
 80092dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e0:	2e00      	cmp	r6, #0
 80092e2:	f47f ae94 	bne.w	800900e <_dtoa_r+0x7ce>
 80092e6:	e696      	b.n	8009016 <_dtoa_r+0x7d6>
 80092e8:	4631      	mov	r1, r6
 80092ea:	463a      	mov	r2, r7
 80092ec:	4620      	mov	r0, r4
 80092ee:	f001 f965 	bl	800a5bc <__lshift>
 80092f2:	4606      	mov	r6, r0
 80092f4:	e6de      	b.n	80090b4 <_dtoa_r+0x874>
 80092f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80092fc:	eba8 0303 	sub.w	r3, r8, r3
 8009300:	449b      	add	fp, r3
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	e58b      	b.n	8008e20 <_dtoa_r+0x5e0>
 8009308:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800930c:	f04f 0a02 	mov.w	sl, #2
 8009310:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009314:	f7ff bbf1 	b.w	8008afa <_dtoa_r+0x2ba>
 8009318:	2301      	movs	r3, #1
 800931a:	9323      	str	r3, [sp, #140]	; 0x8c
 800931c:	9308      	str	r3, [sp, #32]
 800931e:	f7ff bbbb 	b.w	8008a98 <_dtoa_r+0x258>
 8009322:	d103      	bne.n	800932c <_dtoa_r+0xaec>
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	07db      	lsls	r3, r3, #31
 8009328:	f53f ae53 	bmi.w	8008fd2 <_dtoa_r+0x792>
 800932c:	46da      	mov	sl, fp
 800932e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8009332:	2b30      	cmp	r3, #48	; 0x30
 8009334:	d0fa      	beq.n	800932c <_dtoa_r+0xaec>
 8009336:	e65e      	b.n	8008ff6 <_dtoa_r+0x7b6>
 8009338:	9b07      	ldr	r3, [sp, #28]
 800933a:	9a03      	ldr	r2, [sp, #12]
 800933c:	3301      	adds	r3, #1
 800933e:	9307      	str	r3, [sp, #28]
 8009340:	2331      	movs	r3, #49	; 0x31
 8009342:	7013      	strb	r3, [r2, #0]
 8009344:	e657      	b.n	8008ff6 <_dtoa_r+0x7b6>
 8009346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009348:	2a00      	cmp	r2, #0
 800934a:	f000 8126 	beq.w	800959a <_dtoa_r+0xd5a>
 800934e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009352:	9a06      	ldr	r2, [sp, #24]
 8009354:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8009358:	441a      	add	r2, r3
 800935a:	9206      	str	r2, [sp, #24]
 800935c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935e:	4617      	mov	r7, r2
 8009360:	441a      	add	r2, r3
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	e567      	b.n	8008e36 <_dtoa_r+0x5f6>
 8009366:	f04f 0900 	mov.w	r9, #0
 800936a:	464e      	mov	r6, r9
 800936c:	e4df      	b.n	8008d2e <_dtoa_r+0x4ee>
 800936e:	4629      	mov	r1, r5
 8009370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009372:	4620      	mov	r0, r4
 8009374:	f001 f8c2 	bl	800a4fc <__pow5mult>
 8009378:	4605      	mov	r5, r0
 800937a:	e5b3      	b.n	8008ee4 <_dtoa_r+0x6a4>
 800937c:	900e      	str	r0, [sp, #56]	; 0x38
 800937e:	e567      	b.n	8008e50 <_dtoa_r+0x610>
 8009380:	f000 810f 	beq.w	80095a2 <_dtoa_r+0xd62>
 8009384:	9a07      	ldr	r2, [sp, #28]
 8009386:	4b50      	ldr	r3, [pc, #320]	; (80094c8 <_dtoa_r+0xc88>)
 8009388:	4256      	negs	r6, r2
 800938a:	f006 020f 	and.w	r2, r6, #15
 800938e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800939a:	f7f9 f8ed 	bl	8002578 <__aeabi_dmul>
 800939e:	1136      	asrs	r6, r6, #4
 80093a0:	4680      	mov	r8, r0
 80093a2:	4689      	mov	r9, r1
 80093a4:	f000 8171 	beq.w	800968a <_dtoa_r+0xe4a>
 80093a8:	4f48      	ldr	r7, [pc, #288]	; (80094cc <_dtoa_r+0xc8c>)
 80093aa:	2300      	movs	r3, #0
 80093ac:	f04f 0a02 	mov.w	sl, #2
 80093b0:	07f2      	lsls	r2, r6, #31
 80093b2:	d506      	bpl.n	80093c2 <_dtoa_r+0xb82>
 80093b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b8:	f7f9 f8de 	bl	8002578 <__aeabi_dmul>
 80093bc:	f10a 0a01 	add.w	sl, sl, #1
 80093c0:	2301      	movs	r3, #1
 80093c2:	1076      	asrs	r6, r6, #1
 80093c4:	f107 0708 	add.w	r7, r7, #8
 80093c8:	d1f2      	bne.n	80093b0 <_dtoa_r+0xb70>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f43f abb4 	beq.w	8008b38 <_dtoa_r+0x2f8>
 80093d0:	4680      	mov	r8, r0
 80093d2:	4689      	mov	r9, r1
 80093d4:	f7ff bbb0 	b.w	8008b38 <_dtoa_r+0x2f8>
 80093d8:	9b04      	ldr	r3, [sp, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f47f ae49 	bne.w	8009072 <_dtoa_r+0x832>
 80093e0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80093e4:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f43f af18 	beq.w	800921e <_dtoa_r+0x9de>
 80093ee:	e640      	b.n	8009072 <_dtoa_r+0x832>
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	dd12      	ble.n	800941a <_dtoa_r+0xbda>
 80093f4:	4629      	mov	r1, r5
 80093f6:	2201      	movs	r2, #1
 80093f8:	4620      	mov	r0, r4
 80093fa:	9304      	str	r3, [sp, #16]
 80093fc:	f001 f8de 	bl	800a5bc <__lshift>
 8009400:	4649      	mov	r1, r9
 8009402:	4605      	mov	r5, r0
 8009404:	f001 f952 	bl	800a6ac <__mcmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	f340 8118 	ble.w	8009640 <_dtoa_r+0xe00>
 8009410:	2b39      	cmp	r3, #57	; 0x39
 8009412:	f000 80f9 	beq.w	8009608 <_dtoa_r+0xdc8>
 8009416:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 800941a:	46ba      	mov	sl, r7
 800941c:	f80a 3b01 	strb.w	r3, [sl], #1
 8009420:	9b07      	ldr	r3, [sp, #28]
 8009422:	3301      	adds	r3, #1
 8009424:	4637      	mov	r7, r6
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	4646      	mov	r6, r8
 800942a:	e5e4      	b.n	8008ff6 <_dtoa_r+0x7b6>
 800942c:	9509      	str	r5, [sp, #36]	; 0x24
 800942e:	9c06      	ldr	r4, [sp, #24]
 8009430:	9d04      	ldr	r5, [sp, #16]
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	f7f8 fee9 	bl	800220c <__adddf3>
 800943a:	4652      	mov	r2, sl
 800943c:	465b      	mov	r3, fp
 800943e:	4680      	mov	r8, r0
 8009440:	4689      	mov	r9, r1
 8009442:	f7f9 fb29 	bl	8002a98 <__aeabi_dcmpgt>
 8009446:	b960      	cbnz	r0, 8009462 <_dtoa_r+0xc22>
 8009448:	4652      	mov	r2, sl
 800944a:	465b      	mov	r3, fp
 800944c:	4640      	mov	r0, r8
 800944e:	4649      	mov	r1, r9
 8009450:	f7f9 fafa 	bl	8002a48 <__aeabi_dcmpeq>
 8009454:	2800      	cmp	r0, #0
 8009456:	f43f acce 	beq.w	8008df6 <_dtoa_r+0x5b6>
 800945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945c:	07d9      	lsls	r1, r3, #31
 800945e:	f57f acca 	bpl.w	8008df6 <_dtoa_r+0x5b6>
 8009462:	9a03      	ldr	r2, [sp, #12]
 8009464:	e402      	b.n	8008c6c <_dtoa_r+0x42c>
 8009466:	6871      	ldr	r1, [r6, #4]
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fe9d 	bl	800a1a8 <_Balloc>
 800946e:	4607      	mov	r7, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	f000 810e 	beq.w	8009692 <_dtoa_r+0xe52>
 8009476:	6933      	ldr	r3, [r6, #16]
 8009478:	3302      	adds	r3, #2
 800947a:	009a      	lsls	r2, r3, #2
 800947c:	f106 010c 	add.w	r1, r6, #12
 8009480:	300c      	adds	r0, #12
 8009482:	f7f8 fd4f 	bl	8001f24 <memcpy>
 8009486:	4639      	mov	r1, r7
 8009488:	2201      	movs	r2, #1
 800948a:	4620      	mov	r0, r4
 800948c:	f001 f896 	bl	800a5bc <__lshift>
 8009490:	4680      	mov	r8, r0
 8009492:	e614      	b.n	80090be <_dtoa_r+0x87e>
 8009494:	4629      	mov	r1, r5
 8009496:	4620      	mov	r0, r4
 8009498:	f001 f830 	bl	800a4fc <__pow5mult>
 800949c:	4605      	mov	r5, r0
 800949e:	e521      	b.n	8008ee4 <_dtoa_r+0x6a4>
 80094a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094a4:	1a9f      	subs	r7, r3, r2
 80094a6:	e4c6      	b.n	8008e36 <_dtoa_r+0x5f6>
 80094a8:	2b39      	cmp	r3, #57	; 0x39
 80094aa:	f000 80ad 	beq.w	8009608 <_dtoa_r+0xdc8>
 80094ae:	46ba      	mov	sl, r7
 80094b0:	3301      	adds	r3, #1
 80094b2:	e7b3      	b.n	800941c <_dtoa_r+0xbdc>
 80094b4:	9a07      	ldr	r2, [sp, #28]
 80094b6:	3201      	adds	r2, #1
 80094b8:	4637      	mov	r7, r6
 80094ba:	9207      	str	r2, [sp, #28]
 80094bc:	4646      	mov	r6, r8
 80094be:	e57b      	b.n	8008fb8 <_dtoa_r+0x778>
 80094c0:	0800d668 	.word	0x0800d668
 80094c4:	7ff00000 	.word	0x7ff00000
 80094c8:	0800d7b8 	.word	0x0800d7b8
 80094cc:	0800d790 	.word	0x0800d790
 80094d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80094d4:	4984      	ldr	r1, [pc, #528]	; (80096e8 <_dtoa_r+0xea8>)
 80094d6:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80094da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094de:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 80094e2:	f7f9 f849 	bl	8002578 <__aeabi_dmul>
 80094e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80094ea:	4649      	mov	r1, r9
 80094ec:	4640      	mov	r0, r8
 80094ee:	f7f9 faf3 	bl	8002ad8 <__aeabi_d2iz>
 80094f2:	4606      	mov	r6, r0
 80094f4:	f7f8 ffd6 	bl	80024a4 <__aeabi_i2d>
 80094f8:	460b      	mov	r3, r1
 80094fa:	4602      	mov	r2, r0
 80094fc:	4649      	mov	r1, r9
 80094fe:	4640      	mov	r0, r8
 8009500:	f7f8 fe82 	bl	8002208 <__aeabi_dsub>
 8009504:	9f03      	ldr	r7, [sp, #12]
 8009506:	4653      	mov	r3, sl
 8009508:	3630      	adds	r6, #48	; 0x30
 800950a:	2b01      	cmp	r3, #1
 800950c:	f807 6b01 	strb.w	r6, [r7], #1
 8009510:	4680      	mov	r8, r0
 8009512:	4689      	mov	r9, r1
 8009514:	f000 80ae 	beq.w	8009674 <_dtoa_r+0xe34>
 8009518:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	441e      	add	r6, r3
 800951e:	4b73      	ldr	r3, [pc, #460]	; (80096ec <_dtoa_r+0xeac>)
 8009520:	2200      	movs	r2, #0
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	f7f9 f827 	bl	8002578 <__aeabi_dmul>
 800952a:	4689      	mov	r9, r1
 800952c:	4680      	mov	r8, r0
 800952e:	f7f9 fad3 	bl	8002ad8 <__aeabi_d2iz>
 8009532:	4682      	mov	sl, r0
 8009534:	f7f8 ffb6 	bl	80024a4 <__aeabi_i2d>
 8009538:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f8 fe60 	bl	8002208 <__aeabi_dsub>
 8009548:	f807 ab01 	strb.w	sl, [r7], #1
 800954c:	42b7      	cmp	r7, r6
 800954e:	4680      	mov	r8, r0
 8009550:	4689      	mov	r9, r1
 8009552:	d1e4      	bne.n	800951e <_dtoa_r+0xcde>
 8009554:	4b66      	ldr	r3, [pc, #408]	; (80096f0 <_dtoa_r+0xeb0>)
 8009556:	2200      	movs	r2, #0
 8009558:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800955c:	f7f8 fe56 	bl	800220c <__adddf3>
 8009560:	4642      	mov	r2, r8
 8009562:	464b      	mov	r3, r9
 8009564:	f7f9 fa7a 	bl	8002a5c <__aeabi_dcmplt>
 8009568:	2800      	cmp	r0, #0
 800956a:	d164      	bne.n	8009636 <_dtoa_r+0xdf6>
 800956c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009570:	495f      	ldr	r1, [pc, #380]	; (80096f0 <_dtoa_r+0xeb0>)
 8009572:	2000      	movs	r0, #0
 8009574:	f7f8 fe48 	bl	8002208 <__aeabi_dsub>
 8009578:	4642      	mov	r2, r8
 800957a:	464b      	mov	r3, r9
 800957c:	f7f9 fa8c 	bl	8002a98 <__aeabi_dcmpgt>
 8009580:	2800      	cmp	r0, #0
 8009582:	f43f abad 	beq.w	8008ce0 <_dtoa_r+0x4a0>
 8009586:	46b2      	mov	sl, r6
 8009588:	3e01      	subs	r6, #1
 800958a:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 800958e:	2b30      	cmp	r3, #48	; 0x30
 8009590:	d0f9      	beq.n	8009586 <_dtoa_r+0xd46>
 8009592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009594:	3301      	adds	r3, #1
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	e53d      	b.n	8009016 <_dtoa_r+0x7d6>
 800959a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800959c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095a0:	e6d7      	b.n	8009352 <_dtoa_r+0xb12>
 80095a2:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80095a6:	f04f 0a02 	mov.w	sl, #2
 80095aa:	f7ff bac5 	b.w	8008b38 <_dtoa_r+0x2f8>
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f43f ab67 	beq.w	8008c84 <_dtoa_r+0x444>
 80095b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f77f ab91 	ble.w	8008ce0 <_dtoa_r+0x4a0>
 80095be:	9a07      	ldr	r2, [sp, #28]
 80095c0:	3a01      	subs	r2, #1
 80095c2:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 80095c6:	4640      	mov	r0, r8
 80095c8:	4b48      	ldr	r3, [pc, #288]	; (80096ec <_dtoa_r+0xeac>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f8 ffd3 	bl	8002578 <__aeabi_dmul>
 80095d2:	4680      	mov	r8, r0
 80095d4:	4689      	mov	r9, r1
 80095d6:	f10a 0001 	add.w	r0, sl, #1
 80095da:	f7f8 ff63 	bl	80024a4 <__aeabi_i2d>
 80095de:	4642      	mov	r2, r8
 80095e0:	464b      	mov	r3, r9
 80095e2:	f7f8 ffc9 	bl	8002578 <__aeabi_dmul>
 80095e6:	4b43      	ldr	r3, [pc, #268]	; (80096f4 <_dtoa_r+0xeb4>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	f7f8 fe0f 	bl	800220c <__adddf3>
 80095ee:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80095f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095f6:	9311      	str	r3, [sp, #68]	; 0x44
 80095f8:	f7ff bac1 	b.w	8008b7e <_dtoa_r+0x33e>
 80095fc:	9b07      	ldr	r3, [sp, #28]
 80095fe:	3301      	adds	r3, #1
 8009600:	9307      	str	r3, [sp, #28]
 8009602:	2331      	movs	r3, #49	; 0x31
 8009604:	f7ff bb39 	b.w	8008c7a <_dtoa_r+0x43a>
 8009608:	9b07      	ldr	r3, [sp, #28]
 800960a:	46bb      	mov	fp, r7
 800960c:	3301      	adds	r3, #1
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	2339      	movs	r3, #57	; 0x39
 8009612:	4637      	mov	r7, r6
 8009614:	f80b 3b01 	strb.w	r3, [fp], #1
 8009618:	4646      	mov	r6, r8
 800961a:	e4dc      	b.n	8008fd6 <_dtoa_r+0x796>
 800961c:	f04f 0900 	mov.w	r9, #0
 8009620:	464e      	mov	r6, r9
 8009622:	e64b      	b.n	80092bc <_dtoa_r+0xa7c>
 8009624:	469a      	mov	sl, r3
 8009626:	e46c      	b.n	8008f02 <_dtoa_r+0x6c2>
 8009628:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800962a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800962c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800962e:	3301      	adds	r3, #1
 8009630:	9307      	str	r3, [sp, #28]
 8009632:	46b2      	mov	sl, r6
 8009634:	e4ef      	b.n	8009016 <_dtoa_r+0x7d6>
 8009636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009638:	9a03      	ldr	r2, [sp, #12]
 800963a:	9307      	str	r3, [sp, #28]
 800963c:	f7ff bb16 	b.w	8008c6c <_dtoa_r+0x42c>
 8009640:	f47f aeeb 	bne.w	800941a <_dtoa_r+0xbda>
 8009644:	07da      	lsls	r2, r3, #31
 8009646:	f57f aee8 	bpl.w	800941a <_dtoa_r+0xbda>
 800964a:	e6e1      	b.n	8009410 <_dtoa_r+0xbd0>
 800964c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8009650:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009652:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009654:	f7ff bb44 	b.w	8008ce0 <_dtoa_r+0x4a0>
 8009658:	2b39      	cmp	r3, #57	; 0x39
 800965a:	d0d5      	beq.n	8009608 <_dtoa_r+0xdc8>
 800965c:	f1ba 0f00 	cmp.w	sl, #0
 8009660:	f73f aed9 	bgt.w	8009416 <_dtoa_r+0xbd6>
 8009664:	e6d9      	b.n	800941a <_dtoa_r+0xbda>
 8009666:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009668:	2b02      	cmp	r3, #2
 800966a:	f73f ae12 	bgt.w	8009292 <_dtoa_r+0xa52>
 800966e:	f8cd 801c 	str.w	r8, [sp, #28]
 8009672:	e59b      	b.n	80091ac <_dtoa_r+0x96c>
 8009674:	463e      	mov	r6, r7
 8009676:	e76d      	b.n	8009554 <_dtoa_r+0xd14>
 8009678:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800967a:	2b02      	cmp	r3, #2
 800967c:	f73f ae09 	bgt.w	8009292 <_dtoa_r+0xa52>
 8009680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009682:	f8cd 801c 	str.w	r8, [sp, #28]
 8009686:	9308      	str	r3, [sp, #32]
 8009688:	e511      	b.n	80090ae <_dtoa_r+0x86e>
 800968a:	f04f 0a02 	mov.w	sl, #2
 800968e:	f7ff ba53 	b.w	8008b38 <_dtoa_r+0x2f8>
 8009692:	4b19      	ldr	r3, [pc, #100]	; (80096f8 <_dtoa_r+0xeb8>)
 8009694:	4819      	ldr	r0, [pc, #100]	; (80096fc <_dtoa_r+0xebc>)
 8009696:	463a      	mov	r2, r7
 8009698:	f240 21ea 	movw	r1, #746	; 0x2ea
 800969c:	f002 fb76 	bl	800bd8c <__assert_func>
 80096a0:	2600      	movs	r6, #0
 80096a2:	6466      	str	r6, [r4, #68]	; 0x44
 80096a4:	4631      	mov	r1, r6
 80096a6:	4620      	mov	r0, r4
 80096a8:	f000 fd7e 	bl	800a1a8 <_Balloc>
 80096ac:	9003      	str	r0, [sp, #12]
 80096ae:	b978      	cbnz	r0, 80096d0 <_dtoa_r+0xe90>
 80096b0:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <_dtoa_r+0xeb8>)
 80096b2:	4812      	ldr	r0, [pc, #72]	; (80096fc <_dtoa_r+0xebc>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096ba:	f002 fb67 	bl	800bd8c <__assert_func>
 80096be:	4b10      	ldr	r3, [pc, #64]	; (8009700 <_dtoa_r+0xec0>)
 80096c0:	9303      	str	r3, [sp, #12]
 80096c2:	f7ff b8f8 	b.w	80088b6 <_dtoa_r+0x76>
 80096c6:	f43f ac34 	beq.w	8008f32 <_dtoa_r+0x6f2>
 80096ca:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80096ce:	e4b7      	b.n	8009040 <_dtoa_r+0x800>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	6423      	str	r3, [r4, #64]	; 0x40
 80096d4:	2201      	movs	r2, #1
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295
 80096da:	9623      	str	r6, [sp, #140]	; 0x8c
 80096dc:	9312      	str	r3, [sp, #72]	; 0x48
 80096de:	920c      	str	r2, [sp, #48]	; 0x30
 80096e0:	9308      	str	r3, [sp, #32]
 80096e2:	f7ff bafd 	b.w	8008ce0 <_dtoa_r+0x4a0>
 80096e6:	bf00      	nop
 80096e8:	0800d7b8 	.word	0x0800d7b8
 80096ec:	40240000 	.word	0x40240000
 80096f0:	3fe00000 	.word	0x3fe00000
 80096f4:	401c0000 	.word	0x401c0000
 80096f8:	0800d678 	.word	0x0800d678
 80096fc:	0800d68c 	.word	0x0800d68c
 8009700:	0800d66c 	.word	0x0800d66c

08009704 <__sflush_r>:
 8009704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	460c      	mov	r4, r1
 800970c:	0711      	lsls	r1, r2, #28
 800970e:	4607      	mov	r7, r0
 8009710:	d442      	bmi.n	8009798 <__sflush_r+0x94>
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009718:	2b00      	cmp	r3, #0
 800971a:	81a2      	strh	r2, [r4, #12]
 800971c:	dd59      	ble.n	80097d2 <__sflush_r+0xce>
 800971e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009720:	2d00      	cmp	r5, #0
 8009722:	d054      	beq.n	80097ce <__sflush_r+0xca>
 8009724:	2300      	movs	r3, #0
 8009726:	683e      	ldr	r6, [r7, #0]
 8009728:	603b      	str	r3, [r7, #0]
 800972a:	b293      	uxth	r3, r2
 800972c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009730:	d153      	bne.n	80097da <__sflush_r+0xd6>
 8009732:	69e1      	ldr	r1, [r4, #28]
 8009734:	2301      	movs	r3, #1
 8009736:	4638      	mov	r0, r7
 8009738:	47a8      	blx	r5
 800973a:	1c42      	adds	r2, r0, #1
 800973c:	d063      	beq.n	8009806 <__sflush_r+0x102>
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009742:	075b      	lsls	r3, r3, #29
 8009744:	d505      	bpl.n	8009752 <__sflush_r+0x4e>
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	1ac0      	subs	r0, r0, r3
 800974a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800974c:	b10b      	cbz	r3, 8009752 <__sflush_r+0x4e>
 800974e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009750:	1ac0      	subs	r0, r0, r3
 8009752:	69e1      	ldr	r1, [r4, #28]
 8009754:	4602      	mov	r2, r0
 8009756:	2300      	movs	r3, #0
 8009758:	4638      	mov	r0, r7
 800975a:	47a8      	blx	r5
 800975c:	1c41      	adds	r1, r0, #1
 800975e:	d13e      	bne.n	80097de <__sflush_r+0xda>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d03b      	beq.n	80097de <__sflush_r+0xda>
 8009766:	2b1d      	cmp	r3, #29
 8009768:	d001      	beq.n	800976e <__sflush_r+0x6a>
 800976a:	2b16      	cmp	r3, #22
 800976c:	d152      	bne.n	8009814 <__sflush_r+0x110>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	6022      	str	r2, [r4, #0]
 8009774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009778:	2100      	movs	r1, #0
 800977a:	6061      	str	r1, [r4, #4]
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009780:	603e      	str	r6, [r7, #0]
 8009782:	b321      	cbz	r1, 80097ce <__sflush_r+0xca>
 8009784:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009788:	4299      	cmp	r1, r3
 800978a:	d002      	beq.n	8009792 <__sflush_r+0x8e>
 800978c:	4638      	mov	r0, r7
 800978e:	f000 f975 	bl	8009a7c <_free_r>
 8009792:	2000      	movs	r0, #0
 8009794:	6320      	str	r0, [r4, #48]	; 0x30
 8009796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009798:	6926      	ldr	r6, [r4, #16]
 800979a:	b1c6      	cbz	r6, 80097ce <__sflush_r+0xca>
 800979c:	b293      	uxth	r3, r2
 800979e:	6825      	ldr	r5, [r4, #0]
 80097a0:	6026      	str	r6, [r4, #0]
 80097a2:	079a      	lsls	r2, r3, #30
 80097a4:	bf0c      	ite	eq
 80097a6:	6963      	ldreq	r3, [r4, #20]
 80097a8:	2300      	movne	r3, #0
 80097aa:	1bad      	subs	r5, r5, r6
 80097ac:	60a3      	str	r3, [r4, #8]
 80097ae:	e00c      	b.n	80097ca <__sflush_r+0xc6>
 80097b0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80097b4:	69e1      	ldr	r1, [r4, #28]
 80097b6:	462b      	mov	r3, r5
 80097b8:	4632      	mov	r2, r6
 80097ba:	4638      	mov	r0, r7
 80097bc:	47e0      	blx	ip
 80097be:	f1b0 0c00 	subs.w	ip, r0, #0
 80097c2:	eba5 050c 	sub.w	r5, r5, ip
 80097c6:	4466      	add	r6, ip
 80097c8:	dd16      	ble.n	80097f8 <__sflush_r+0xf4>
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	dcf0      	bgt.n	80097b0 <__sflush_r+0xac>
 80097ce:	2000      	movs	r0, #0
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dca2      	bgt.n	800971e <__sflush_r+0x1a>
 80097d8:	e7f9      	b.n	80097ce <__sflush_r+0xca>
 80097da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80097dc:	e7b1      	b.n	8009742 <__sflush_r+0x3e>
 80097de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e2:	6922      	ldr	r2, [r4, #16]
 80097e4:	6022      	str	r2, [r4, #0]
 80097e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	04db      	lsls	r3, r3, #19
 80097f0:	6062      	str	r2, [r4, #4]
 80097f2:	d5c4      	bpl.n	800977e <__sflush_r+0x7a>
 80097f4:	6520      	str	r0, [r4, #80]	; 0x50
 80097f6:	e7c2      	b.n	800977e <__sflush_r+0x7a>
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d098      	beq.n	800973e <__sflush_r+0x3a>
 800980c:	2b1d      	cmp	r3, #29
 800980e:	d006      	beq.n	800981e <__sflush_r+0x11a>
 8009810:	2b16      	cmp	r3, #22
 8009812:	d004      	beq.n	800981e <__sflush_r+0x11a>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800981e:	603e      	str	r6, [r7, #0]
 8009820:	e7d5      	b.n	80097ce <__sflush_r+0xca>
 8009822:	bf00      	nop

08009824 <_fflush_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	460c      	mov	r4, r1
 8009828:	4605      	mov	r5, r0
 800982a:	b108      	cbz	r0, 8009830 <_fflush_r+0xc>
 800982c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800982e:	b1a3      	cbz	r3, 800985a <_fflush_r+0x36>
 8009830:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009834:	b1b8      	cbz	r0, 8009866 <_fflush_r+0x42>
 8009836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009838:	07db      	lsls	r3, r3, #31
 800983a:	d401      	bmi.n	8009840 <_fflush_r+0x1c>
 800983c:	0581      	lsls	r1, r0, #22
 800983e:	d515      	bpl.n	800986c <_fflush_r+0x48>
 8009840:	4628      	mov	r0, r5
 8009842:	4621      	mov	r1, r4
 8009844:	f7ff ff5e 	bl	8009704 <__sflush_r>
 8009848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800984a:	07da      	lsls	r2, r3, #31
 800984c:	4605      	mov	r5, r0
 800984e:	d402      	bmi.n	8009856 <_fflush_r+0x32>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	059b      	lsls	r3, r3, #22
 8009854:	d50e      	bpl.n	8009874 <_fflush_r+0x50>
 8009856:	4628      	mov	r0, r5
 8009858:	bd38      	pop	{r3, r4, r5, pc}
 800985a:	f000 f817 	bl	800988c <__sinit>
 800985e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009862:	2800      	cmp	r0, #0
 8009864:	d1e7      	bne.n	8009836 <_fflush_r+0x12>
 8009866:	4605      	mov	r5, r0
 8009868:	4628      	mov	r0, r5
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986e:	f000 fbab 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 8009872:	e7e5      	b.n	8009840 <_fflush_r+0x1c>
 8009874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009876:	f000 fba9 	bl	8009fcc <__retarget_lock_release_recursive>
 800987a:	4628      	mov	r0, r5
 800987c:	bd38      	pop	{r3, r4, r5, pc}
 800987e:	bf00      	nop

08009880 <_cleanup_r>:
 8009880:	4901      	ldr	r1, [pc, #4]	; (8009888 <_cleanup_r+0x8>)
 8009882:	f000 bb75 	b.w	8009f70 <_fwalk_reent>
 8009886:	bf00      	nop
 8009888:	0800bdf1 	.word	0x0800bdf1

0800988c <__sinit>:
 800988c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	4682      	mov	sl, r0
 8009892:	4839      	ldr	r0, [pc, #228]	; (8009978 <__sinit+0xec>)
 8009894:	f000 fb98 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 8009898:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 800989c:	2c00      	cmp	r4, #0
 800989e:	d166      	bne.n	800996e <__sinit+0xe2>
 80098a0:	f8da 5004 	ldr.w	r5, [sl, #4]
 80098a4:	4a35      	ldr	r2, [pc, #212]	; (800997c <__sinit+0xf0>)
 80098a6:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 80098aa:	2303      	movs	r3, #3
 80098ac:	e9ca 43b8 	strd	r4, r3, [sl, #736]	; 0x2e0
 80098b0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8009980 <__sinit+0xf4>
 80098b4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8009984 <__sinit+0xf8>
 80098b8:	4f33      	ldr	r7, [pc, #204]	; (8009988 <__sinit+0xfc>)
 80098ba:	4e34      	ldr	r6, [pc, #208]	; (800998c <__sinit+0x100>)
 80098bc:	2304      	movs	r3, #4
 80098be:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
 80098c2:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
 80098c6:	4621      	mov	r1, r4
 80098c8:	e9c5 4302 	strd	r4, r3, [r5, #8]
 80098cc:	e9c5 4400 	strd	r4, r4, [r5]
 80098d0:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80098d4:	666c      	str	r4, [r5, #100]	; 0x64
 80098d6:	2208      	movs	r2, #8
 80098d8:	61ac      	str	r4, [r5, #24]
 80098da:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80098de:	f7fd f81d 	bl	800691c <memset>
 80098e2:	e9c5 5907 	strd	r5, r9, [r5, #28]
 80098e6:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 80098ea:	62ee      	str	r6, [r5, #44]	; 0x2c
 80098ec:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80098f0:	f000 fb66 	bl	8009fc0 <__retarget_lock_init_recursive>
 80098f4:	f8da 5008 	ldr.w	r5, [sl, #8]
 80098f8:	4b25      	ldr	r3, [pc, #148]	; (8009990 <__sinit+0x104>)
 80098fa:	60eb      	str	r3, [r5, #12]
 80098fc:	4621      	mov	r1, r4
 80098fe:	e9c5 4400 	strd	r4, r4, [r5]
 8009902:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8009906:	666c      	str	r4, [r5, #100]	; 0x64
 8009908:	60ac      	str	r4, [r5, #8]
 800990a:	61ac      	str	r4, [r5, #24]
 800990c:	2208      	movs	r2, #8
 800990e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009912:	f7fd f803 	bl	800691c <memset>
 8009916:	e9c5 5907 	strd	r5, r9, [r5, #28]
 800991a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 800991e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8009920:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8009924:	f000 fb4c 	bl	8009fc0 <__retarget_lock_init_recursive>
 8009928:	f8da 500c 	ldr.w	r5, [sl, #12]
 800992c:	4b19      	ldr	r3, [pc, #100]	; (8009994 <__sinit+0x108>)
 800992e:	60eb      	str	r3, [r5, #12]
 8009930:	4621      	mov	r1, r4
 8009932:	e9c5 4400 	strd	r4, r4, [r5]
 8009936:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800993a:	666c      	str	r4, [r5, #100]	; 0x64
 800993c:	60ac      	str	r4, [r5, #8]
 800993e:	61ac      	str	r4, [r5, #24]
 8009940:	2208      	movs	r2, #8
 8009942:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009946:	f7fc ffe9 	bl	800691c <memset>
 800994a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800994e:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8009952:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8009956:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 800995a:	f000 fb31 	bl	8009fc0 <__retarget_lock_init_recursive>
 800995e:	2301      	movs	r3, #1
 8009960:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8009964:	4804      	ldr	r0, [pc, #16]	; (8009978 <__sinit+0xec>)
 8009966:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996a:	f000 bb2f 	b.w	8009fcc <__retarget_lock_release_recursive>
 800996e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009972:	4801      	ldr	r0, [pc, #4]	; (8009978 <__sinit+0xec>)
 8009974:	f000 bb2a 	b.w	8009fcc <__retarget_lock_release_recursive>
 8009978:	200010b4 	.word	0x200010b4
 800997c:	08009881 	.word	0x08009881
 8009980:	0800ad45 	.word	0x0800ad45
 8009984:	0800ad69 	.word	0x0800ad69
 8009988:	0800ada9 	.word	0x0800ada9
 800998c:	0800adc9 	.word	0x0800adc9
 8009990:	00010009 	.word	0x00010009
 8009994:	00020012 	.word	0x00020012

08009998 <__sfp_lock_acquire>:
 8009998:	4801      	ldr	r0, [pc, #4]	; (80099a0 <__sfp_lock_acquire+0x8>)
 800999a:	f000 bb15 	b.w	8009fc8 <__retarget_lock_acquire_recursive>
 800999e:	bf00      	nop
 80099a0:	200010b0 	.word	0x200010b0

080099a4 <__sfp_lock_release>:
 80099a4:	4801      	ldr	r0, [pc, #4]	; (80099ac <__sfp_lock_release+0x8>)
 80099a6:	f000 bb11 	b.w	8009fcc <__retarget_lock_release_recursive>
 80099aa:	bf00      	nop
 80099ac:	200010b0 	.word	0x200010b0

080099b0 <__libc_fini_array>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4b08      	ldr	r3, [pc, #32]	; (80099d4 <__libc_fini_array+0x24>)
 80099b4:	4d08      	ldr	r5, [pc, #32]	; (80099d8 <__libc_fini_array+0x28>)
 80099b6:	1b5b      	subs	r3, r3, r5
 80099b8:	109c      	asrs	r4, r3, #2
 80099ba:	d007      	beq.n	80099cc <__libc_fini_array+0x1c>
 80099bc:	3b04      	subs	r3, #4
 80099be:	441d      	add	r5, r3
 80099c0:	3c01      	subs	r4, #1
 80099c2:	f855 3904 	ldr.w	r3, [r5], #-4
 80099c6:	4798      	blx	r3
 80099c8:	2c00      	cmp	r4, #0
 80099ca:	d1f9      	bne.n	80099c0 <__libc_fini_array+0x10>
 80099cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d0:	f002 bc9a 	b.w	800c308 <_fini>
 80099d4:	0800da14 	.word	0x0800da14
 80099d8:	0800da10 	.word	0x0800da10

080099dc <_malloc_trim_r>:
 80099dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099de:	4f24      	ldr	r7, [pc, #144]	; (8009a70 <_malloc_trim_r+0x94>)
 80099e0:	460c      	mov	r4, r1
 80099e2:	4606      	mov	r6, r0
 80099e4:	f7fc ffec 	bl	80069c0 <__malloc_lock>
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	6855      	ldr	r5, [r2, #4]
 80099ec:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 80099f0:	330f      	adds	r3, #15
 80099f2:	f025 0503 	bic.w	r5, r5, #3
 80099f6:	442b      	add	r3, r5
 80099f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80099fc:	f023 030f 	bic.w	r3, r3, #15
 8009a00:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8009a04:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8009a08:	db07      	blt.n	8009a1a <_malloc_trim_r+0x3e>
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7fd f84d 	bl	8006aac <_sbrk_r>
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	442b      	add	r3, r5
 8009a16:	4298      	cmp	r0, r3
 8009a18:	d004      	beq.n	8009a24 <_malloc_trim_r+0x48>
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7fc ffd6 	bl	80069cc <__malloc_unlock>
 8009a20:	2000      	movs	r0, #0
 8009a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a24:	4261      	negs	r1, r4
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7fd f840 	bl	8006aac <_sbrk_r>
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	d00d      	beq.n	8009a4c <_malloc_trim_r+0x70>
 8009a30:	4a10      	ldr	r2, [pc, #64]	; (8009a74 <_malloc_trim_r+0x98>)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	1b2d      	subs	r5, r5, r4
 8009a36:	f045 0501 	orr.w	r5, r5, #1
 8009a3a:	605d      	str	r5, [r3, #4]
 8009a3c:	6813      	ldr	r3, [r2, #0]
 8009a3e:	4630      	mov	r0, r6
 8009a40:	1b1b      	subs	r3, r3, r4
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	f7fc ffc2 	bl	80069cc <__malloc_unlock>
 8009a48:	2001      	movs	r0, #1
 8009a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f7fd f82c 	bl	8006aac <_sbrk_r>
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	1a83      	subs	r3, r0, r2
 8009a58:	2b0f      	cmp	r3, #15
 8009a5a:	ddde      	ble.n	8009a1a <_malloc_trim_r+0x3e>
 8009a5c:	f043 0301 	orr.w	r3, r3, #1
 8009a60:	6053      	str	r3, [r2, #4]
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <_malloc_trim_r+0x9c>)
 8009a64:	4903      	ldr	r1, [pc, #12]	; (8009a74 <_malloc_trim_r+0x98>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	1ac0      	subs	r0, r0, r3
 8009a6a:	6008      	str	r0, [r1, #0]
 8009a6c:	e7d5      	b.n	8009a1a <_malloc_trim_r+0x3e>
 8009a6e:	bf00      	nop
 8009a70:	20000430 	.word	0x20000430
 8009a74:	20001074 	.word	0x20001074
 8009a78:	20000838 	.word	0x20000838

08009a7c <_free_r>:
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d061      	beq.n	8009b44 <_free_r+0xc8>
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	460c      	mov	r4, r1
 8009a84:	4606      	mov	r6, r0
 8009a86:	f7fc ff9b 	bl	80069c0 <__malloc_lock>
 8009a8a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8009a8e:	4f7b      	ldr	r7, [pc, #492]	; (8009c7c <_free_r+0x200>)
 8009a90:	f1a4 0508 	sub.w	r5, r4, #8
 8009a94:	f022 0101 	bic.w	r1, r2, #1
 8009a98:	eb05 0c01 	add.w	ip, r5, r1
 8009a9c:	68b8      	ldr	r0, [r7, #8]
 8009a9e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009aa2:	4560      	cmp	r0, ip
 8009aa4:	f023 0303 	bic.w	r3, r3, #3
 8009aa8:	f000 808b 	beq.w	8009bc2 <_free_r+0x146>
 8009aac:	07d2      	lsls	r2, r2, #31
 8009aae:	f8cc 3004 	str.w	r3, [ip, #4]
 8009ab2:	d432      	bmi.n	8009b1a <_free_r+0x9e>
 8009ab4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8009ab8:	1aad      	subs	r5, r5, r2
 8009aba:	4411      	add	r1, r2
 8009abc:	68aa      	ldr	r2, [r5, #8]
 8009abe:	f107 0008 	add.w	r0, r7, #8
 8009ac2:	4282      	cmp	r2, r0
 8009ac4:	d06a      	beq.n	8009b9c <_free_r+0x120>
 8009ac6:	eb0c 0403 	add.w	r4, ip, r3
 8009aca:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8009ace:	68ec      	ldr	r4, [r5, #12]
 8009ad0:	60d4      	str	r4, [r2, #12]
 8009ad2:	f01e 0f01 	tst.w	lr, #1
 8009ad6:	60a2      	str	r2, [r4, #8]
 8009ad8:	f000 8097 	beq.w	8009c0a <_free_r+0x18e>
 8009adc:	f041 0301 	orr.w	r3, r1, #1
 8009ae0:	606b      	str	r3, [r5, #4]
 8009ae2:	f8cc 1000 	str.w	r1, [ip]
 8009ae6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009aea:	d235      	bcs.n	8009b58 <_free_r+0xdc>
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	08cb      	lsrs	r3, r1, #3
 8009af0:	0948      	lsrs	r0, r1, #5
 8009af2:	2101      	movs	r1, #1
 8009af4:	3301      	adds	r3, #1
 8009af6:	4081      	lsls	r1, r0
 8009af8:	4311      	orrs	r1, r2
 8009afa:	6079      	str	r1, [r7, #4]
 8009afc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8009b00:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8009b04:	3a08      	subs	r2, #8
 8009b06:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8009b0a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8009b0e:	60cd      	str	r5, [r1, #12]
 8009b10:	4630      	mov	r0, r6
 8009b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b16:	f7fc bf59 	b.w	80069cc <__malloc_unlock>
 8009b1a:	eb0c 0203 	add.w	r2, ip, r3
 8009b1e:	6852      	ldr	r2, [r2, #4]
 8009b20:	07d0      	lsls	r0, r2, #31
 8009b22:	d410      	bmi.n	8009b46 <_free_r+0xca>
 8009b24:	4419      	add	r1, r3
 8009b26:	f107 0008 	add.w	r0, r7, #8
 8009b2a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009b2e:	4283      	cmp	r3, r0
 8009b30:	d073      	beq.n	8009c1a <_free_r+0x19e>
 8009b32:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8009b36:	60da      	str	r2, [r3, #12]
 8009b38:	6093      	str	r3, [r2, #8]
 8009b3a:	f041 0301 	orr.w	r3, r1, #1
 8009b3e:	606b      	str	r3, [r5, #4]
 8009b40:	5069      	str	r1, [r5, r1]
 8009b42:	e7d0      	b.n	8009ae6 <_free_r+0x6a>
 8009b44:	4770      	bx	lr
 8009b46:	f041 0301 	orr.w	r3, r1, #1
 8009b4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b52:	f8cc 1000 	str.w	r1, [ip]
 8009b56:	d3c9      	bcc.n	8009aec <_free_r+0x70>
 8009b58:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8009b5c:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8009b60:	d248      	bcs.n	8009bf4 <_free_r+0x178>
 8009b62:	098b      	lsrs	r3, r1, #6
 8009b64:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8009b68:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b6c:	00c3      	lsls	r3, r0, #3
 8009b6e:	18f8      	adds	r0, r7, r3
 8009b70:	58fb      	ldr	r3, [r7, r3]
 8009b72:	3808      	subs	r0, #8
 8009b74:	4298      	cmp	r0, r3
 8009b76:	d059      	beq.n	8009c2c <_free_r+0x1b0>
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	f022 0203 	bic.w	r2, r2, #3
 8009b7e:	428a      	cmp	r2, r1
 8009b80:	d902      	bls.n	8009b88 <_free_r+0x10c>
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	4298      	cmp	r0, r3
 8009b86:	d1f7      	bne.n	8009b78 <_free_r+0xfc>
 8009b88:	68d8      	ldr	r0, [r3, #12]
 8009b8a:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8009b8e:	6085      	str	r5, [r0, #8]
 8009b90:	60dd      	str	r5, [r3, #12]
 8009b92:	4630      	mov	r0, r6
 8009b94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b98:	f7fc bf18 	b.w	80069cc <__malloc_unlock>
 8009b9c:	eb0c 0203 	add.w	r2, ip, r3
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	07d2      	lsls	r2, r2, #31
 8009ba4:	d463      	bmi.n	8009c6e <_free_r+0x1f2>
 8009ba6:	440b      	add	r3, r1
 8009ba8:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8009bac:	60ca      	str	r2, [r1, #12]
 8009bae:	6091      	str	r1, [r2, #8]
 8009bb0:	f043 0201 	orr.w	r2, r3, #1
 8009bb4:	606a      	str	r2, [r5, #4]
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	50eb      	str	r3, [r5, r3]
 8009bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bbe:	f7fc bf05 	b.w	80069cc <__malloc_unlock>
 8009bc2:	440b      	add	r3, r1
 8009bc4:	07d1      	lsls	r1, r2, #31
 8009bc6:	d407      	bmi.n	8009bd8 <_free_r+0x15c>
 8009bc8:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8009bcc:	1aad      	subs	r5, r5, r2
 8009bce:	4413      	add	r3, r2
 8009bd0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8009bd4:	60ca      	str	r2, [r1, #12]
 8009bd6:	6091      	str	r1, [r2, #8]
 8009bd8:	f043 0201 	orr.w	r2, r3, #1
 8009bdc:	606a      	str	r2, [r5, #4]
 8009bde:	4a28      	ldr	r2, [pc, #160]	; (8009c80 <_free_r+0x204>)
 8009be0:	60bd      	str	r5, [r7, #8]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d893      	bhi.n	8009b10 <_free_r+0x94>
 8009be8:	4b26      	ldr	r3, [pc, #152]	; (8009c84 <_free_r+0x208>)
 8009bea:	4630      	mov	r0, r6
 8009bec:	6819      	ldr	r1, [r3, #0]
 8009bee:	f7ff fef5 	bl	80099dc <_malloc_trim_r>
 8009bf2:	e78d      	b.n	8009b10 <_free_r+0x94>
 8009bf4:	2b14      	cmp	r3, #20
 8009bf6:	d90a      	bls.n	8009c0e <_free_r+0x192>
 8009bf8:	2b54      	cmp	r3, #84	; 0x54
 8009bfa:	d81f      	bhi.n	8009c3c <_free_r+0x1c0>
 8009bfc:	0b0b      	lsrs	r3, r1, #12
 8009bfe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8009c02:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8009c06:	00c3      	lsls	r3, r0, #3
 8009c08:	e7b1      	b.n	8009b6e <_free_r+0xf2>
 8009c0a:	4419      	add	r1, r3
 8009c0c:	e78d      	b.n	8009b2a <_free_r+0xae>
 8009c0e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8009c12:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8009c16:	00c3      	lsls	r3, r0, #3
 8009c18:	e7a9      	b.n	8009b6e <_free_r+0xf2>
 8009c1a:	f041 0301 	orr.w	r3, r1, #1
 8009c1e:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8009c22:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8009c26:	606b      	str	r3, [r5, #4]
 8009c28:	5069      	str	r1, [r5, r1]
 8009c2a:	e771      	b.n	8009b10 <_free_r+0x94>
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	1092      	asrs	r2, r2, #2
 8009c30:	2401      	movs	r4, #1
 8009c32:	fa04 f202 	lsl.w	r2, r4, r2
 8009c36:	430a      	orrs	r2, r1
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	e7a6      	b.n	8009b8a <_free_r+0x10e>
 8009c3c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009c40:	d806      	bhi.n	8009c50 <_free_r+0x1d4>
 8009c42:	0bcb      	lsrs	r3, r1, #15
 8009c44:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8009c48:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8009c4c:	00c3      	lsls	r3, r0, #3
 8009c4e:	e78e      	b.n	8009b6e <_free_r+0xf2>
 8009c50:	f240 5254 	movw	r2, #1364	; 0x554
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d806      	bhi.n	8009c66 <_free_r+0x1ea>
 8009c58:	0c8b      	lsrs	r3, r1, #18
 8009c5a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8009c5e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8009c62:	00c3      	lsls	r3, r0, #3
 8009c64:	e783      	b.n	8009b6e <_free_r+0xf2>
 8009c66:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8009c6a:	227e      	movs	r2, #126	; 0x7e
 8009c6c:	e77f      	b.n	8009b6e <_free_r+0xf2>
 8009c6e:	f041 0301 	orr.w	r3, r1, #1
 8009c72:	606b      	str	r3, [r5, #4]
 8009c74:	f8cc 1000 	str.w	r1, [ip]
 8009c78:	e74a      	b.n	8009b10 <_free_r+0x94>
 8009c7a:	bf00      	nop
 8009c7c:	20000430 	.word	0x20000430
 8009c80:	2000083c 	.word	0x2000083c
 8009c84:	200010a4 	.word	0x200010a4

08009c88 <__sfvwrite_r>:
 8009c88:	6893      	ldr	r3, [r2, #8]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 8081 	beq.w	8009d92 <__sfvwrite_r+0x10a>
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8009c98:	460c      	mov	r4, r1
 8009c9a:	0719      	lsls	r1, r3, #28
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	4617      	mov	r7, r2
 8009ca2:	b298      	uxth	r0, r3
 8009ca4:	d523      	bpl.n	8009cee <__sfvwrite_r+0x66>
 8009ca6:	6923      	ldr	r3, [r4, #16]
 8009ca8:	b30b      	cbz	r3, 8009cee <__sfvwrite_r+0x66>
 8009caa:	f010 0302 	ands.w	r3, r0, #2
 8009cae:	683d      	ldr	r5, [r7, #0]
 8009cb0:	d02b      	beq.n	8009d0a <__sfvwrite_r+0x82>
 8009cb2:	f04f 0a00 	mov.w	sl, #0
 8009cb6:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8009f6c <__sfvwrite_r+0x2e4>
 8009cba:	4656      	mov	r6, sl
 8009cbc:	455e      	cmp	r6, fp
 8009cbe:	4633      	mov	r3, r6
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	bf28      	it	cs
 8009cc4:	465b      	movcs	r3, fp
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	d04f      	beq.n	8009d6c <__sfvwrite_r+0xe4>
 8009ccc:	69e1      	ldr	r1, [r4, #28]
 8009cce:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009cd2:	47e0      	blx	ip
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	dd52      	ble.n	8009d7e <__sfvwrite_r+0xf6>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	1a1b      	subs	r3, r3, r0
 8009cdc:	4482      	add	sl, r0
 8009cde:	1a36      	subs	r6, r6, r0
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1ea      	bne.n	8009cbc <__sfvwrite_r+0x34>
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	b003      	add	sp, #12
 8009cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cee:	4621      	mov	r1, r4
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	f7fe fc97 	bl	8008624 <__swsetup_r>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	f040 8134 	bne.w	8009f64 <__sfvwrite_r+0x2dc>
 8009cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d00:	683d      	ldr	r5, [r7, #0]
 8009d02:	b298      	uxth	r0, r3
 8009d04:	f010 0302 	ands.w	r3, r0, #2
 8009d08:	d1d3      	bne.n	8009cb2 <__sfvwrite_r+0x2a>
 8009d0a:	f010 0901 	ands.w	r9, r0, #1
 8009d0e:	d142      	bne.n	8009d96 <__sfvwrite_r+0x10e>
 8009d10:	464e      	mov	r6, r9
 8009d12:	b33e      	cbz	r6, 8009d64 <__sfvwrite_r+0xdc>
 8009d14:	0582      	lsls	r2, r0, #22
 8009d16:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8009d1a:	f140 8081 	bpl.w	8009e20 <__sfvwrite_r+0x198>
 8009d1e:	45b3      	cmp	fp, r6
 8009d20:	465a      	mov	r2, fp
 8009d22:	f200 80b1 	bhi.w	8009e88 <__sfvwrite_r+0x200>
 8009d26:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8009d2a:	f040 80be 	bne.w	8009eaa <__sfvwrite_r+0x222>
 8009d2e:	6820      	ldr	r0, [r4, #0]
 8009d30:	9201      	str	r2, [sp, #4]
 8009d32:	4649      	mov	r1, r9
 8009d34:	f000 f9bc 	bl	800a0b0 <memmove>
 8009d38:	68a3      	ldr	r3, [r4, #8]
 8009d3a:	6821      	ldr	r1, [r4, #0]
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	eba3 030b 	sub.w	r3, r3, fp
 8009d42:	440a      	add	r2, r1
 8009d44:	46b2      	mov	sl, r6
 8009d46:	60a3      	str	r3, [r4, #8]
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	2600      	movs	r6, #0
 8009d4c:	68b8      	ldr	r0, [r7, #8]
 8009d4e:	eba0 000a 	sub.w	r0, r0, sl
 8009d52:	44d1      	add	r9, sl
 8009d54:	60b8      	str	r0, [r7, #8]
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0c5      	beq.n	8009ce6 <__sfvwrite_r+0x5e>
 8009d5a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009d5e:	b280      	uxth	r0, r0
 8009d60:	2e00      	cmp	r6, #0
 8009d62:	d1d7      	bne.n	8009d14 <__sfvwrite_r+0x8c>
 8009d64:	e9d5 9600 	ldrd	r9, r6, [r5]
 8009d68:	3508      	adds	r5, #8
 8009d6a:	e7d2      	b.n	8009d12 <__sfvwrite_r+0x8a>
 8009d6c:	e9d5 a600 	ldrd	sl, r6, [r5]
 8009d70:	3508      	adds	r5, #8
 8009d72:	e7a3      	b.n	8009cbc <__sfvwrite_r+0x34>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4640      	mov	r0, r8
 8009d78:	f7ff fd54 	bl	8009824 <_fflush_r>
 8009d7c:	b380      	cbz	r0, 8009de0 <__sfvwrite_r+0x158>
 8009d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	b003      	add	sp, #12
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	2000      	movs	r0, #0
 8009d94:	4770      	bx	lr
 8009d96:	461e      	mov	r6, r3
 8009d98:	46aa      	mov	sl, r5
 8009d9a:	4699      	mov	r9, r3
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	461d      	mov	r5, r3
 8009da0:	b356      	cbz	r6, 8009df8 <__sfvwrite_r+0x170>
 8009da2:	b388      	cbz	r0, 8009e08 <__sfvwrite_r+0x180>
 8009da4:	464a      	mov	r2, r9
 8009da6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8009daa:	6820      	ldr	r0, [r4, #0]
 8009dac:	42b2      	cmp	r2, r6
 8009dae:	bf28      	it	cs
 8009db0:	4632      	movcs	r2, r6
 8009db2:	4288      	cmp	r0, r1
 8009db4:	d905      	bls.n	8009dc2 <__sfvwrite_r+0x13a>
 8009db6:	68a1      	ldr	r1, [r4, #8]
 8009db8:	eb03 0b01 	add.w	fp, r3, r1
 8009dbc:	455a      	cmp	r2, fp
 8009dbe:	f300 80a7 	bgt.w	8009f10 <__sfvwrite_r+0x288>
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	dc64      	bgt.n	8009e90 <__sfvwrite_r+0x208>
 8009dc6:	69e1      	ldr	r1, [r4, #28]
 8009dc8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009dcc:	462a      	mov	r2, r5
 8009dce:	4640      	mov	r0, r8
 8009dd0:	47e0      	blx	ip
 8009dd2:	f1b0 0b00 	subs.w	fp, r0, #0
 8009dd6:	ddd2      	ble.n	8009d7e <__sfvwrite_r+0xf6>
 8009dd8:	ebb9 090b 	subs.w	r9, r9, fp
 8009ddc:	d0ca      	beq.n	8009d74 <__sfvwrite_r+0xec>
 8009dde:	2001      	movs	r0, #1
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	eba3 030b 	sub.w	r3, r3, fp
 8009de6:	445d      	add	r5, fp
 8009de8:	eba6 060b 	sub.w	r6, r6, fp
 8009dec:	60bb      	str	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f43f af79 	beq.w	8009ce6 <__sfvwrite_r+0x5e>
 8009df4:	2e00      	cmp	r6, #0
 8009df6:	d1d4      	bne.n	8009da2 <__sfvwrite_r+0x11a>
 8009df8:	f10a 0308 	add.w	r3, sl, #8
 8009dfc:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8009e00:	469a      	mov	sl, r3
 8009e02:	3308      	adds	r3, #8
 8009e04:	2e00      	cmp	r6, #0
 8009e06:	d0f9      	beq.n	8009dfc <__sfvwrite_r+0x174>
 8009e08:	4632      	mov	r2, r6
 8009e0a:	210a      	movs	r1, #10
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7f8 f9a7 	bl	8002160 <memchr>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f000 809d 	beq.w	8009f52 <__sfvwrite_r+0x2ca>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	eba0 0905 	sub.w	r9, r0, r5
 8009e1e:	e7c1      	b.n	8009da4 <__sfvwrite_r+0x11c>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	4298      	cmp	r0, r3
 8009e26:	d817      	bhi.n	8009e58 <__sfvwrite_r+0x1d0>
 8009e28:	6963      	ldr	r3, [r4, #20]
 8009e2a:	42b3      	cmp	r3, r6
 8009e2c:	d814      	bhi.n	8009e58 <__sfvwrite_r+0x1d0>
 8009e2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009e32:	42b2      	cmp	r2, r6
 8009e34:	bf28      	it	cs
 8009e36:	4632      	movcs	r2, r6
 8009e38:	69e1      	ldr	r1, [r4, #28]
 8009e3a:	fb92 f2f3 	sdiv	r2, r2, r3
 8009e3e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009e42:	fb02 f303 	mul.w	r3, r2, r3
 8009e46:	4640      	mov	r0, r8
 8009e48:	464a      	mov	r2, r9
 8009e4a:	47e0      	blx	ip
 8009e4c:	f1b0 0a00 	subs.w	sl, r0, #0
 8009e50:	dd95      	ble.n	8009d7e <__sfvwrite_r+0xf6>
 8009e52:	eba6 060a 	sub.w	r6, r6, sl
 8009e56:	e779      	b.n	8009d4c <__sfvwrite_r+0xc4>
 8009e58:	45b3      	cmp	fp, r6
 8009e5a:	46da      	mov	sl, fp
 8009e5c:	bf28      	it	cs
 8009e5e:	46b2      	movcs	sl, r6
 8009e60:	4652      	mov	r2, sl
 8009e62:	4649      	mov	r1, r9
 8009e64:	f000 f924 	bl	800a0b0 <memmove>
 8009e68:	68a3      	ldr	r3, [r4, #8]
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	eba3 030a 	sub.w	r3, r3, sl
 8009e70:	4452      	add	r2, sl
 8009e72:	60a3      	str	r3, [r4, #8]
 8009e74:	6022      	str	r2, [r4, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1eb      	bne.n	8009e52 <__sfvwrite_r+0x1ca>
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	f7ff fcd1 	bl	8009824 <_fflush_r>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d0e5      	beq.n	8009e52 <__sfvwrite_r+0x1ca>
 8009e86:	e77a      	b.n	8009d7e <__sfvwrite_r+0xf6>
 8009e88:	6820      	ldr	r0, [r4, #0]
 8009e8a:	46b3      	mov	fp, r6
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	e74f      	b.n	8009d30 <__sfvwrite_r+0xa8>
 8009e90:	4629      	mov	r1, r5
 8009e92:	9201      	str	r2, [sp, #4]
 8009e94:	f000 f90c 	bl	800a0b0 <memmove>
 8009e98:	9a01      	ldr	r2, [sp, #4]
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	60a3      	str	r3, [r4, #8]
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	4693      	mov	fp, r2
 8009ea8:	e796      	b.n	8009dd8 <__sfvwrite_r+0x150>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	6921      	ldr	r1, [r4, #16]
 8009eae:	eba3 0b01 	sub.w	fp, r3, r1
 8009eb2:	6963      	ldr	r3, [r4, #20]
 8009eb4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8009eb8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8009ebc:	f10b 0301 	add.w	r3, fp, #1
 8009ec0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8009ec4:	4433      	add	r3, r6
 8009ec6:	4553      	cmp	r3, sl
 8009ec8:	4652      	mov	r2, sl
 8009eca:	bf84      	itt	hi
 8009ecc:	469a      	movhi	sl, r3
 8009ece:	4652      	movhi	r2, sl
 8009ed0:	0543      	lsls	r3, r0, #21
 8009ed2:	d52c      	bpl.n	8009f2e <__sfvwrite_r+0x2a6>
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	f7fc fa3c 	bl	8006354 <_malloc_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d03b      	beq.n	8009f58 <__sfvwrite_r+0x2d0>
 8009ee0:	465a      	mov	r2, fp
 8009ee2:	6921      	ldr	r1, [r4, #16]
 8009ee4:	9001      	str	r0, [sp, #4]
 8009ee6:	f7f8 f81d 	bl	8001f24 <memcpy>
 8009eea:	89a2      	ldrh	r2, [r4, #12]
 8009eec:	9b01      	ldr	r3, [sp, #4]
 8009eee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ef6:	81a2      	strh	r2, [r4, #12]
 8009ef8:	eb03 000b 	add.w	r0, r3, fp
 8009efc:	6123      	str	r3, [r4, #16]
 8009efe:	ebaa 030b 	sub.w	r3, sl, fp
 8009f02:	f8c4 a014 	str.w	sl, [r4, #20]
 8009f06:	60a3      	str	r3, [r4, #8]
 8009f08:	6020      	str	r0, [r4, #0]
 8009f0a:	46b3      	mov	fp, r6
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	e70f      	b.n	8009d30 <__sfvwrite_r+0xa8>
 8009f10:	4629      	mov	r1, r5
 8009f12:	465a      	mov	r2, fp
 8009f14:	f000 f8cc 	bl	800a0b0 <memmove>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	445b      	add	r3, fp
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4640      	mov	r0, r8
 8009f22:	f7ff fc7f 	bl	8009824 <_fflush_r>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	f43f af56 	beq.w	8009dd8 <__sfvwrite_r+0x150>
 8009f2c:	e727      	b.n	8009d7e <__sfvwrite_r+0xf6>
 8009f2e:	4640      	mov	r0, r8
 8009f30:	f000 fce4 	bl	800a8fc <_realloc_r>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d1de      	bne.n	8009ef8 <__sfvwrite_r+0x270>
 8009f3a:	6921      	ldr	r1, [r4, #16]
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	f7ff fd9d 	bl	8009a7c <_free_r>
 8009f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f46:	220c      	movs	r2, #12
 8009f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f4c:	f8c8 2000 	str.w	r2, [r8]
 8009f50:	e717      	b.n	8009d82 <__sfvwrite_r+0xfa>
 8009f52:	1c72      	adds	r2, r6, #1
 8009f54:	4691      	mov	r9, r2
 8009f56:	e726      	b.n	8009da6 <__sfvwrite_r+0x11e>
 8009f58:	220c      	movs	r2, #12
 8009f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f5e:	f8c8 2000 	str.w	r2, [r8]
 8009f62:	e70e      	b.n	8009d82 <__sfvwrite_r+0xfa>
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	e6be      	b.n	8009ce8 <__sfvwrite_r+0x60>
 8009f6a:	bf00      	nop
 8009f6c:	7ffffc00 	.word	0x7ffffc00

08009f70 <_fwalk_reent>:
 8009f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	4607      	mov	r7, r0
 8009f76:	4688      	mov	r8, r1
 8009f78:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8009f7c:	f04f 0900 	mov.w	r9, #0
 8009f80:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8009f84:	3d01      	subs	r5, #1
 8009f86:	d411      	bmi.n	8009fac <_fwalk_reent+0x3c>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009f90:	d908      	bls.n	8009fa4 <_fwalk_reent+0x34>
 8009f92:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8009f96:	3301      	adds	r3, #1
 8009f98:	4621      	mov	r1, r4
 8009f9a:	d003      	beq.n	8009fa4 <_fwalk_reent+0x34>
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	47c0      	blx	r8
 8009fa0:	ea49 0900 	orr.w	r9, r9, r0
 8009fa4:	1c6b      	adds	r3, r5, #1
 8009fa6:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8009faa:	d1ed      	bne.n	8009f88 <_fwalk_reent+0x18>
 8009fac:	6836      	ldr	r6, [r6, #0]
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d1e6      	bne.n	8009f80 <_fwalk_reent+0x10>
 8009fb2:	4648      	mov	r0, r9
 8009fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009fb8 <_localeconv_r>:
 8009fb8:	4800      	ldr	r0, [pc, #0]	; (8009fbc <_localeconv_r+0x4>)
 8009fba:	4770      	bx	lr
 8009fbc:	20000934 	.word	0x20000934

08009fc0 <__retarget_lock_init_recursive>:
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop

08009fc4 <__retarget_lock_close_recursive>:
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop

08009fc8 <__retarget_lock_acquire_recursive>:
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop

08009fcc <__retarget_lock_release_recursive>:
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop

08009fd0 <__smakebuf_r>:
 8009fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd4:	898b      	ldrh	r3, [r1, #12]
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	0799      	lsls	r1, r3, #30
 8009fda:	b096      	sub	sp, #88	; 0x58
 8009fdc:	d508      	bpl.n	8009ff0 <__smakebuf_r+0x20>
 8009fde:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	b016      	add	sp, #88	; 0x58
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	db27      	blt.n	800a04a <__smakebuf_r+0x7a>
 8009ffa:	466a      	mov	r2, sp
 8009ffc:	f001 fffa 	bl	800bff4 <_fstat_r>
 800a000:	2800      	cmp	r0, #0
 800a002:	db21      	blt.n	800a048 <__smakebuf_r+0x78>
 800a004:	9d01      	ldr	r5, [sp, #4]
 800a006:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800a00a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 800a00e:	fab5 f585 	clz	r5, r5
 800a012:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800a016:	096d      	lsrs	r5, r5, #5
 800a018:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800a01c:	4641      	mov	r1, r8
 800a01e:	4630      	mov	r0, r6
 800a020:	f7fc f998 	bl	8006354 <_malloc_r>
 800a024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a028:	b1f0      	cbz	r0, 800a068 <__smakebuf_r+0x98>
 800a02a:	4a20      	ldr	r2, [pc, #128]	; (800a0ac <__smakebuf_r+0xdc>)
 800a02c:	63f2      	str	r2, [r6, #60]	; 0x3c
 800a02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a032:	f8c4 8014 	str.w	r8, [r4, #20]
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	6020      	str	r0, [r4, #0]
 800a03a:	6120      	str	r0, [r4, #16]
 800a03c:	bb35      	cbnz	r5, 800a08c <__smakebuf_r+0xbc>
 800a03e:	433b      	orrs	r3, r7
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	b016      	add	sp, #88	; 0x58
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 800a04e:	d019      	beq.n	800a084 <__smakebuf_r+0xb4>
 800a050:	f04f 0840 	mov.w	r8, #64	; 0x40
 800a054:	4641      	mov	r1, r8
 800a056:	4630      	mov	r0, r6
 800a058:	f7fc f97c 	bl	8006354 <_malloc_r>
 800a05c:	2500      	movs	r5, #0
 800a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a062:	462f      	mov	r7, r5
 800a064:	2800      	cmp	r0, #0
 800a066:	d1e0      	bne.n	800a02a <__smakebuf_r+0x5a>
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d4be      	bmi.n	8009fea <__smakebuf_r+0x1a>
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a074:	f043 0302 	orr.w	r3, r3, #2
 800a078:	2101      	movs	r1, #1
 800a07a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	6022      	str	r2, [r4, #0]
 800a082:	e7b2      	b.n	8009fea <__smakebuf_r+0x1a>
 800a084:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800a088:	462f      	mov	r7, r5
 800a08a:	e7c7      	b.n	800a01c <__smakebuf_r+0x4c>
 800a08c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a090:	4630      	mov	r0, r6
 800a092:	f001 ffc5 	bl	800c020 <_isatty_r>
 800a096:	b910      	cbnz	r0, 800a09e <__smakebuf_r+0xce>
 800a098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09c:	e7cf      	b.n	800a03e <__smakebuf_r+0x6e>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f023 0303 	bic.w	r3, r3, #3
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	b21b      	sxth	r3, r3
 800a0aa:	e7c8      	b.n	800a03e <__smakebuf_r+0x6e>
 800a0ac:	08009881 	.word	0x08009881

0800a0b0 <memmove>:
 800a0b0:	4288      	cmp	r0, r1
 800a0b2:	d90d      	bls.n	800a0d0 <memmove+0x20>
 800a0b4:	188b      	adds	r3, r1, r2
 800a0b6:	4283      	cmp	r3, r0
 800a0b8:	d90a      	bls.n	800a0d0 <memmove+0x20>
 800a0ba:	eb00 0c02 	add.w	ip, r0, r2
 800a0be:	b1ba      	cbz	r2, 800a0f0 <memmove+0x40>
 800a0c0:	4662      	mov	r2, ip
 800a0c2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800a0c6:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	d1f9      	bne.n	800a0c2 <memmove+0x12>
 800a0ce:	4770      	bx	lr
 800a0d0:	2a0f      	cmp	r2, #15
 800a0d2:	d80e      	bhi.n	800a0f2 <memmove+0x42>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f102 3cff 	add.w	ip, r2, #4294967295
 800a0da:	b14a      	cbz	r2, 800a0f0 <memmove+0x40>
 800a0dc:	f10c 0c01 	add.w	ip, ip, #1
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	448c      	add	ip, r1
 800a0e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0ec:	4561      	cmp	r1, ip
 800a0ee:	d1f9      	bne.n	800a0e4 <memmove+0x34>
 800a0f0:	4770      	bx	lr
 800a0f2:	ea40 0301 	orr.w	r3, r0, r1
 800a0f6:	079b      	lsls	r3, r3, #30
 800a0f8:	d150      	bne.n	800a19c <memmove+0xec>
 800a0fa:	f1a2 0310 	sub.w	r3, r2, #16
 800a0fe:	b570      	push	{r4, r5, r6, lr}
 800a100:	f101 0c20 	add.w	ip, r1, #32
 800a104:	f023 050f 	bic.w	r5, r3, #15
 800a108:	f101 0e10 	add.w	lr, r1, #16
 800a10c:	f100 0410 	add.w	r4, r0, #16
 800a110:	44ac      	add	ip, r5
 800a112:	091b      	lsrs	r3, r3, #4
 800a114:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800a118:	f844 5c10 	str.w	r5, [r4, #-16]
 800a11c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 800a120:	f844 5c0c 	str.w	r5, [r4, #-12]
 800a124:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800a128:	f844 5c08 	str.w	r5, [r4, #-8]
 800a12c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 800a130:	f844 5c04 	str.w	r5, [r4, #-4]
 800a134:	f10e 0e10 	add.w	lr, lr, #16
 800a138:	45e6      	cmp	lr, ip
 800a13a:	f104 0410 	add.w	r4, r4, #16
 800a13e:	d1e9      	bne.n	800a114 <memmove+0x64>
 800a140:	3301      	adds	r3, #1
 800a142:	f012 0f0c 	tst.w	r2, #12
 800a146:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800a14a:	f002 040f 	and.w	r4, r2, #15
 800a14e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800a152:	d027      	beq.n	800a1a4 <memmove+0xf4>
 800a154:	3c04      	subs	r4, #4
 800a156:	f024 0603 	bic.w	r6, r4, #3
 800a15a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800a15e:	441e      	add	r6, r3
 800a160:	1f1c      	subs	r4, r3, #4
 800a162:	468e      	mov	lr, r1
 800a164:	f85e 5b04 	ldr.w	r5, [lr], #4
 800a168:	f844 5f04 	str.w	r5, [r4, #4]!
 800a16c:	42b4      	cmp	r4, r6
 800a16e:	d1f9      	bne.n	800a164 <memmove+0xb4>
 800a170:	f10c 0401 	add.w	r4, ip, #1
 800a174:	f002 0203 	and.w	r2, r2, #3
 800a178:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a17c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a180:	f102 3cff 	add.w	ip, r2, #4294967295
 800a184:	b14a      	cbz	r2, 800a19a <memmove+0xea>
 800a186:	f10c 0c01 	add.w	ip, ip, #1
 800a18a:	3b01      	subs	r3, #1
 800a18c:	448c      	add	ip, r1
 800a18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a192:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a196:	4561      	cmp	r1, ip
 800a198:	d1f9      	bne.n	800a18e <memmove+0xde>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f102 3cff 	add.w	ip, r2, #4294967295
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	e79b      	b.n	800a0dc <memmove+0x2c>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	e7eb      	b.n	800a180 <memmove+0xd0>

0800a1a8 <_Balloc>:
 800a1a8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a1aa:	b570      	push	{r4, r5, r6, lr}
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	b14b      	cbz	r3, 800a1c6 <_Balloc+0x1e>
 800a1b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a1b6:	b180      	cbz	r0, 800a1da <_Balloc+0x32>
 800a1b8:	6802      	ldr	r2, [r0, #0]
 800a1ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
 800a1c6:	2221      	movs	r2, #33	; 0x21
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	f7fc f861 	bl	8006290 <_calloc_r>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d1ed      	bne.n	800a1b2 <_Balloc+0xa>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	bd70      	pop	{r4, r5, r6, pc}
 800a1da:	2101      	movs	r1, #1
 800a1dc:	fa01 f604 	lsl.w	r6, r1, r4
 800a1e0:	1d72      	adds	r2, r6, #5
 800a1e2:	0092      	lsls	r2, r2, #2
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7fc f853 	bl	8006290 <_calloc_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d0f3      	beq.n	800a1d6 <_Balloc+0x2e>
 800a1ee:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a1f2:	e7e4      	b.n	800a1be <_Balloc+0x16>

0800a1f4 <_Bfree>:
 800a1f4:	b131      	cbz	r1, 800a204 <_Bfree+0x10>
 800a1f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a1f8:	684a      	ldr	r2, [r1, #4]
 800a1fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a1fe:	6008      	str	r0, [r1, #0]
 800a200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <__multadd>:
 800a208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20c:	690d      	ldr	r5, [r1, #16]
 800a20e:	4607      	mov	r7, r0
 800a210:	460e      	mov	r6, r1
 800a212:	461c      	mov	r4, r3
 800a214:	f101 0e14 	add.w	lr, r1, #20
 800a218:	2000      	movs	r0, #0
 800a21a:	f8de 1000 	ldr.w	r1, [lr]
 800a21e:	b28b      	uxth	r3, r1
 800a220:	fb02 4303 	mla	r3, r2, r3, r4
 800a224:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a228:	0c09      	lsrs	r1, r1, #16
 800a22a:	fb02 cc01 	mla	ip, r2, r1, ip
 800a22e:	3001      	adds	r0, #1
 800a230:	b29b      	uxth	r3, r3
 800a232:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800a236:	4285      	cmp	r5, r0
 800a238:	f84e 3b04 	str.w	r3, [lr], #4
 800a23c:	ea4f 441c 	mov.w	r4, ip, lsr #16
 800a240:	dceb      	bgt.n	800a21a <__multadd+0x12>
 800a242:	b13c      	cbz	r4, 800a254 <__multadd+0x4c>
 800a244:	68b3      	ldr	r3, [r6, #8]
 800a246:	42ab      	cmp	r3, r5
 800a248:	dd07      	ble.n	800a25a <__multadd+0x52>
 800a24a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800a24e:	3501      	adds	r5, #1
 800a250:	615c      	str	r4, [r3, #20]
 800a252:	6135      	str	r5, [r6, #16]
 800a254:	4630      	mov	r0, r6
 800a256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25a:	6871      	ldr	r1, [r6, #4]
 800a25c:	4638      	mov	r0, r7
 800a25e:	3101      	adds	r1, #1
 800a260:	f7ff ffa2 	bl	800a1a8 <_Balloc>
 800a264:	4680      	mov	r8, r0
 800a266:	b1a8      	cbz	r0, 800a294 <__multadd+0x8c>
 800a268:	6932      	ldr	r2, [r6, #16]
 800a26a:	3202      	adds	r2, #2
 800a26c:	f106 010c 	add.w	r1, r6, #12
 800a270:	0092      	lsls	r2, r2, #2
 800a272:	300c      	adds	r0, #12
 800a274:	f7f7 fe56 	bl	8001f24 <memcpy>
 800a278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a27a:	6872      	ldr	r2, [r6, #4]
 800a27c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a280:	6031      	str	r1, [r6, #0]
 800a282:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a286:	4646      	mov	r6, r8
 800a288:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800a28c:	3501      	adds	r5, #1
 800a28e:	615c      	str	r4, [r3, #20]
 800a290:	6135      	str	r5, [r6, #16]
 800a292:	e7df      	b.n	800a254 <__multadd+0x4c>
 800a294:	4b02      	ldr	r3, [pc, #8]	; (800a2a0 <__multadd+0x98>)
 800a296:	4803      	ldr	r0, [pc, #12]	; (800a2a4 <__multadd+0x9c>)
 800a298:	4642      	mov	r2, r8
 800a29a:	21b5      	movs	r1, #181	; 0xb5
 800a29c:	f001 fd76 	bl	800bd8c <__assert_func>
 800a2a0:	0800d678 	.word	0x0800d678
 800a2a4:	0800d70c 	.word	0x0800d70c

0800a2a8 <__hi0bits>:
 800a2a8:	0c02      	lsrs	r2, r0, #16
 800a2aa:	0412      	lsls	r2, r2, #16
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	b9ca      	cbnz	r2, 800a2e4 <__hi0bits+0x3c>
 800a2b0:	0403      	lsls	r3, r0, #16
 800a2b2:	2010      	movs	r0, #16
 800a2b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a2b8:	bf04      	itt	eq
 800a2ba:	021b      	lsleq	r3, r3, #8
 800a2bc:	3008      	addeq	r0, #8
 800a2be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a2c2:	bf04      	itt	eq
 800a2c4:	011b      	lsleq	r3, r3, #4
 800a2c6:	3004      	addeq	r0, #4
 800a2c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a2cc:	bf04      	itt	eq
 800a2ce:	009b      	lsleq	r3, r3, #2
 800a2d0:	3002      	addeq	r0, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	db05      	blt.n	800a2e2 <__hi0bits+0x3a>
 800a2d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a2da:	f100 0001 	add.w	r0, r0, #1
 800a2de:	bf08      	it	eq
 800a2e0:	2020      	moveq	r0, #32
 800a2e2:	4770      	bx	lr
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	e7e5      	b.n	800a2b4 <__hi0bits+0xc>

0800a2e8 <__lo0bits>:
 800a2e8:	6803      	ldr	r3, [r0, #0]
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	f013 0007 	ands.w	r0, r3, #7
 800a2f0:	d007      	beq.n	800a302 <__lo0bits+0x1a>
 800a2f2:	07d9      	lsls	r1, r3, #31
 800a2f4:	d41d      	bmi.n	800a332 <__lo0bits+0x4a>
 800a2f6:	0798      	lsls	r0, r3, #30
 800a2f8:	d51f      	bpl.n	800a33a <__lo0bits+0x52>
 800a2fa:	085b      	lsrs	r3, r3, #1
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	2001      	movs	r0, #1
 800a300:	4770      	bx	lr
 800a302:	b299      	uxth	r1, r3
 800a304:	b909      	cbnz	r1, 800a30a <__lo0bits+0x22>
 800a306:	0c1b      	lsrs	r3, r3, #16
 800a308:	2010      	movs	r0, #16
 800a30a:	b2d9      	uxtb	r1, r3
 800a30c:	b909      	cbnz	r1, 800a312 <__lo0bits+0x2a>
 800a30e:	3008      	adds	r0, #8
 800a310:	0a1b      	lsrs	r3, r3, #8
 800a312:	0719      	lsls	r1, r3, #28
 800a314:	bf04      	itt	eq
 800a316:	091b      	lsreq	r3, r3, #4
 800a318:	3004      	addeq	r0, #4
 800a31a:	0799      	lsls	r1, r3, #30
 800a31c:	bf04      	itt	eq
 800a31e:	089b      	lsreq	r3, r3, #2
 800a320:	3002      	addeq	r0, #2
 800a322:	07d9      	lsls	r1, r3, #31
 800a324:	d403      	bmi.n	800a32e <__lo0bits+0x46>
 800a326:	085b      	lsrs	r3, r3, #1
 800a328:	f100 0001 	add.w	r0, r0, #1
 800a32c:	d003      	beq.n	800a336 <__lo0bits+0x4e>
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	4770      	bx	lr
 800a332:	2000      	movs	r0, #0
 800a334:	4770      	bx	lr
 800a336:	2020      	movs	r0, #32
 800a338:	4770      	bx	lr
 800a33a:	089b      	lsrs	r3, r3, #2
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	2002      	movs	r0, #2
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop

0800a344 <__i2b>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a348:	4604      	mov	r4, r0
 800a34a:	460d      	mov	r5, r1
 800a34c:	b14b      	cbz	r3, 800a362 <__i2b+0x1e>
 800a34e:	6858      	ldr	r0, [r3, #4]
 800a350:	b1b0      	cbz	r0, 800a380 <__i2b+0x3c>
 800a352:	6802      	ldr	r2, [r0, #0]
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	2301      	movs	r3, #1
 800a35a:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a35e:	60c2      	str	r2, [r0, #12]
 800a360:	bd38      	pop	{r3, r4, r5, pc}
 800a362:	2221      	movs	r2, #33	; 0x21
 800a364:	2104      	movs	r1, #4
 800a366:	f7fb ff93 	bl	8006290 <_calloc_r>
 800a36a:	4603      	mov	r3, r0
 800a36c:	64e0      	str	r0, [r4, #76]	; 0x4c
 800a36e:	2800      	cmp	r0, #0
 800a370:	d1ed      	bne.n	800a34e <__i2b+0xa>
 800a372:	4b09      	ldr	r3, [pc, #36]	; (800a398 <__i2b+0x54>)
 800a374:	4809      	ldr	r0, [pc, #36]	; (800a39c <__i2b+0x58>)
 800a376:	2200      	movs	r2, #0
 800a378:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a37c:	f001 fd06 	bl	800bd8c <__assert_func>
 800a380:	221c      	movs	r2, #28
 800a382:	2101      	movs	r1, #1
 800a384:	4620      	mov	r0, r4
 800a386:	f7fb ff83 	bl	8006290 <_calloc_r>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0f1      	beq.n	800a372 <__i2b+0x2e>
 800a38e:	2201      	movs	r2, #1
 800a390:	2302      	movs	r3, #2
 800a392:	e9c0 2301 	strd	r2, r3, [r0, #4]
 800a396:	e7de      	b.n	800a356 <__i2b+0x12>
 800a398:	0800d678 	.word	0x0800d678
 800a39c:	0800d70c 	.word	0x0800d70c

0800a3a0 <__multiply>:
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	690e      	ldr	r6, [r1, #16]
 800a3a6:	6915      	ldr	r5, [r2, #16]
 800a3a8:	42ae      	cmp	r6, r5
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	4688      	mov	r8, r1
 800a3ae:	4614      	mov	r4, r2
 800a3b0:	db05      	blt.n	800a3be <__multiply+0x1e>
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	4635      	mov	r5, r6
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	4616      	mov	r6, r2
 800a3bc:	4698      	mov	r8, r3
 800a3be:	68a3      	ldr	r3, [r4, #8]
 800a3c0:	6861      	ldr	r1, [r4, #4]
 800a3c2:	19af      	adds	r7, r5, r6
 800a3c4:	42bb      	cmp	r3, r7
 800a3c6:	bfb8      	it	lt
 800a3c8:	3101      	addlt	r1, #1
 800a3ca:	f7ff feed 	bl	800a1a8 <_Balloc>
 800a3ce:	9001      	str	r0, [sp, #4]
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	f000 8087 	beq.w	800a4e4 <__multiply+0x144>
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	f103 0914 	add.w	r9, r3, #20
 800a3dc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 800a3e0:	45d1      	cmp	r9, sl
 800a3e2:	d205      	bcs.n	800a3f0 <__multiply+0x50>
 800a3e4:	464b      	mov	r3, r9
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f843 2b04 	str.w	r2, [r3], #4
 800a3ec:	459a      	cmp	sl, r3
 800a3ee:	d8fb      	bhi.n	800a3e8 <__multiply+0x48>
 800a3f0:	f108 0814 	add.w	r8, r8, #20
 800a3f4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 800a3f8:	f104 0314 	add.w	r3, r4, #20
 800a3fc:	45d8      	cmp	r8, fp
 800a3fe:	461a      	mov	r2, r3
 800a400:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a404:	d25f      	bcs.n	800a4c6 <__multiply+0x126>
 800a406:	1b2b      	subs	r3, r5, r4
 800a408:	3b15      	subs	r3, #21
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	3304      	adds	r3, #4
 800a410:	3415      	adds	r4, #21
 800a412:	42a5      	cmp	r5, r4
 800a414:	bf38      	it	cc
 800a416:	2304      	movcc	r3, #4
 800a418:	e9cd a702 	strd	sl, r7, [sp, #8]
 800a41c:	46ac      	mov	ip, r5
 800a41e:	461f      	mov	r7, r3
 800a420:	4692      	mov	sl, r2
 800a422:	e005      	b.n	800a430 <__multiply+0x90>
 800a424:	0c00      	lsrs	r0, r0, #16
 800a426:	d129      	bne.n	800a47c <__multiply+0xdc>
 800a428:	45c3      	cmp	fp, r8
 800a42a:	f109 0904 	add.w	r9, r9, #4
 800a42e:	d948      	bls.n	800a4c2 <__multiply+0x122>
 800a430:	f858 0b04 	ldr.w	r0, [r8], #4
 800a434:	b285      	uxth	r5, r0
 800a436:	2d00      	cmp	r5, #0
 800a438:	d0f4      	beq.n	800a424 <__multiply+0x84>
 800a43a:	4656      	mov	r6, sl
 800a43c:	464c      	mov	r4, r9
 800a43e:	2300      	movs	r3, #0
 800a440:	f856 0b04 	ldr.w	r0, [r6], #4
 800a444:	6821      	ldr	r1, [r4, #0]
 800a446:	b282      	uxth	r2, r0
 800a448:	fa1f fe81 	uxth.w	lr, r1
 800a44c:	fb05 ee02 	mla	lr, r5, r2, lr
 800a450:	0c00      	lsrs	r0, r0, #16
 800a452:	0c0a      	lsrs	r2, r1, #16
 800a454:	4473      	add	r3, lr
 800a456:	fb05 2200 	mla	r2, r5, r0, r2
 800a45a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a45e:	b29b      	uxth	r3, r3
 800a460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a464:	45b4      	cmp	ip, r6
 800a466:	f844 3b04 	str.w	r3, [r4], #4
 800a46a:	ea4f 4312 	mov.w	r3, r2, lsr #16
 800a46e:	d8e7      	bhi.n	800a440 <__multiply+0xa0>
 800a470:	f849 3007 	str.w	r3, [r9, r7]
 800a474:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800a478:	0c00      	lsrs	r0, r0, #16
 800a47a:	d0d5      	beq.n	800a428 <__multiply+0x88>
 800a47c:	f8d9 3000 	ldr.w	r3, [r9]
 800a480:	4654      	mov	r4, sl
 800a482:	4619      	mov	r1, r3
 800a484:	464d      	mov	r5, r9
 800a486:	2200      	movs	r2, #0
 800a488:	8826      	ldrh	r6, [r4, #0]
 800a48a:	0c09      	lsrs	r1, r1, #16
 800a48c:	fb00 1106 	mla	r1, r0, r6, r1
 800a490:	440a      	add	r2, r1
 800a492:	b29b      	uxth	r3, r3
 800a494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a498:	f845 3b04 	str.w	r3, [r5], #4
 800a49c:	f854 6b04 	ldr.w	r6, [r4], #4
 800a4a0:	6829      	ldr	r1, [r5, #0]
 800a4a2:	0c36      	lsrs	r6, r6, #16
 800a4a4:	b28b      	uxth	r3, r1
 800a4a6:	fb00 3306 	mla	r3, r0, r6, r3
 800a4aa:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4ae:	45a4      	cmp	ip, r4
 800a4b0:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800a4b4:	d8e8      	bhi.n	800a488 <__multiply+0xe8>
 800a4b6:	45c3      	cmp	fp, r8
 800a4b8:	f849 3007 	str.w	r3, [r9, r7]
 800a4bc:	f109 0904 	add.w	r9, r9, #4
 800a4c0:	d8b6      	bhi.n	800a430 <__multiply+0x90>
 800a4c2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 800a4c6:	2f00      	cmp	r7, #0
 800a4c8:	dc02      	bgt.n	800a4d0 <__multiply+0x130>
 800a4ca:	e005      	b.n	800a4d8 <__multiply+0x138>
 800a4cc:	3f01      	subs	r7, #1
 800a4ce:	d003      	beq.n	800a4d8 <__multiply+0x138>
 800a4d0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0f9      	beq.n	800a4cc <__multiply+0x12c>
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	611f      	str	r7, [r3, #16]
 800a4de:	b005      	add	sp, #20
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e4:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <__multiply+0x154>)
 800a4e6:	4804      	ldr	r0, [pc, #16]	; (800a4f8 <__multiply+0x158>)
 800a4e8:	9a01      	ldr	r2, [sp, #4]
 800a4ea:	f240 115d 	movw	r1, #349	; 0x15d
 800a4ee:	f001 fc4d 	bl	800bd8c <__assert_func>
 800a4f2:	bf00      	nop
 800a4f4:	0800d678 	.word	0x0800d678
 800a4f8:	0800d70c 	.word	0x0800d70c

0800a4fc <__pow5mult>:
 800a4fc:	f012 0303 	ands.w	r3, r2, #3
 800a500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	4614      	mov	r4, r2
 800a506:	4606      	mov	r6, r0
 800a508:	d132      	bne.n	800a570 <__pow5mult+0x74>
 800a50a:	460d      	mov	r5, r1
 800a50c:	10a4      	asrs	r4, r4, #2
 800a50e:	d020      	beq.n	800a552 <__pow5mult+0x56>
 800a510:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 800a514:	f1b8 0f00 	cmp.w	r8, #0
 800a518:	d033      	beq.n	800a582 <__pow5mult+0x86>
 800a51a:	07e3      	lsls	r3, r4, #31
 800a51c:	f04f 0700 	mov.w	r7, #0
 800a520:	d407      	bmi.n	800a532 <__pow5mult+0x36>
 800a522:	1064      	asrs	r4, r4, #1
 800a524:	d015      	beq.n	800a552 <__pow5mult+0x56>
 800a526:	f8d8 0000 	ldr.w	r0, [r8]
 800a52a:	b1a8      	cbz	r0, 800a558 <__pow5mult+0x5c>
 800a52c:	4680      	mov	r8, r0
 800a52e:	07e3      	lsls	r3, r4, #31
 800a530:	d5f7      	bpl.n	800a522 <__pow5mult+0x26>
 800a532:	4642      	mov	r2, r8
 800a534:	4629      	mov	r1, r5
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ff32 	bl	800a3a0 <__multiply>
 800a53c:	b1b5      	cbz	r5, 800a56c <__pow5mult+0x70>
 800a53e:	6869      	ldr	r1, [r5, #4]
 800a540:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800a542:	1064      	asrs	r4, r4, #1
 800a544:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800a548:	602a      	str	r2, [r5, #0]
 800a54a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 800a54e:	4605      	mov	r5, r0
 800a550:	d1e9      	bne.n	800a526 <__pow5mult+0x2a>
 800a552:	4628      	mov	r0, r5
 800a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a558:	4642      	mov	r2, r8
 800a55a:	4641      	mov	r1, r8
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7ff ff1f 	bl	800a3a0 <__multiply>
 800a562:	f8c8 0000 	str.w	r0, [r8]
 800a566:	6007      	str	r7, [r0, #0]
 800a568:	4680      	mov	r8, r0
 800a56a:	e7e0      	b.n	800a52e <__pow5mult+0x32>
 800a56c:	4605      	mov	r5, r0
 800a56e:	e7d8      	b.n	800a522 <__pow5mult+0x26>
 800a570:	3b01      	subs	r3, #1
 800a572:	4a0f      	ldr	r2, [pc, #60]	; (800a5b0 <__pow5mult+0xb4>)
 800a574:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a578:	2300      	movs	r3, #0
 800a57a:	f7ff fe45 	bl	800a208 <__multadd>
 800a57e:	4605      	mov	r5, r0
 800a580:	e7c4      	b.n	800a50c <__pow5mult+0x10>
 800a582:	2101      	movs	r1, #1
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff fe0f 	bl	800a1a8 <_Balloc>
 800a58a:	4680      	mov	r8, r0
 800a58c:	b140      	cbz	r0, 800a5a0 <__pow5mult+0xa4>
 800a58e:	2301      	movs	r3, #1
 800a590:	f240 2271 	movw	r2, #625	; 0x271
 800a594:	e9c0 3204 	strd	r3, r2, [r0, #16]
 800a598:	2300      	movs	r3, #0
 800a59a:	64b0      	str	r0, [r6, #72]	; 0x48
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	e7bc      	b.n	800a51a <__pow5mult+0x1e>
 800a5a0:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <__pow5mult+0xb8>)
 800a5a2:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <__pow5mult+0xbc>)
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5aa:	f001 fbef 	bl	800bd8c <__assert_func>
 800a5ae:	bf00      	nop
 800a5b0:	0800d880 	.word	0x0800d880
 800a5b4:	0800d678 	.word	0x0800d678
 800a5b8:	0800d70c 	.word	0x0800d70c

0800a5bc <__lshift>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	4690      	mov	r8, r2
 800a5c4:	6926      	ldr	r6, [r4, #16]
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	6849      	ldr	r1, [r1, #4]
 800a5ca:	eb06 1662 	add.w	r6, r6, r2, asr #5
 800a5ce:	1c75      	adds	r5, r6, #1
 800a5d0:	429d      	cmp	r5, r3
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	ea4f 1962 	mov.w	r9, r2, asr #5
 800a5d8:	dd04      	ble.n	800a5e4 <__lshift+0x28>
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	429d      	cmp	r5, r3
 800a5de:	f101 0101 	add.w	r1, r1, #1
 800a5e2:	dcfa      	bgt.n	800a5da <__lshift+0x1e>
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff fddf 	bl	800a1a8 <_Balloc>
 800a5ea:	4684      	mov	ip, r0
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d051      	beq.n	800a694 <__lshift+0xd8>
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	f100 0014 	add.w	r0, r0, #20
 800a5f8:	dd0e      	ble.n	800a618 <__lshift+0x5c>
 800a5fa:	f109 0205 	add.w	r2, r9, #5
 800a5fe:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800a602:	4603      	mov	r3, r0
 800a604:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 800a608:	2100      	movs	r1, #0
 800a60a:	f843 1b04 	str.w	r1, [r3], #4
 800a60e:	4293      	cmp	r3, r2
 800a610:	d1fb      	bne.n	800a60a <__lshift+0x4e>
 800a612:	f1ae 0314 	sub.w	r3, lr, #20
 800a616:	4418      	add	r0, r3
 800a618:	6921      	ldr	r1, [r4, #16]
 800a61a:	f104 0314 	add.w	r3, r4, #20
 800a61e:	f018 081f 	ands.w	r8, r8, #31
 800a622:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800a626:	d02d      	beq.n	800a684 <__lshift+0xc8>
 800a628:	f1c8 0920 	rsb	r9, r8, #32
 800a62c:	4686      	mov	lr, r0
 800a62e:	f04f 0a00 	mov.w	sl, #0
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	fa02 f208 	lsl.w	r2, r2, r8
 800a638:	ea42 020a 	orr.w	r2, r2, sl
 800a63c:	f84e 2b04 	str.w	r2, [lr], #4
 800a640:	f853 2b04 	ldr.w	r2, [r3], #4
 800a644:	4299      	cmp	r1, r3
 800a646:	fa22 fa09 	lsr.w	sl, r2, r9
 800a64a:	d8f2      	bhi.n	800a632 <__lshift+0x76>
 800a64c:	1b0b      	subs	r3, r1, r4
 800a64e:	3b15      	subs	r3, #21
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	3304      	adds	r3, #4
 800a656:	f104 0215 	add.w	r2, r4, #21
 800a65a:	4291      	cmp	r1, r2
 800a65c:	bf38      	it	cc
 800a65e:	2304      	movcc	r3, #4
 800a660:	f1ba 0f00 	cmp.w	sl, #0
 800a664:	bf18      	it	ne
 800a666:	462e      	movne	r6, r5
 800a668:	f840 a003 	str.w	sl, [r0, r3]
 800a66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	f8cc 6010 	str.w	r6, [ip, #16]
 800a674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a678:	6021      	str	r1, [r4, #0]
 800a67a:	4660      	mov	r0, ip
 800a67c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a684:	3804      	subs	r0, #4
 800a686:	f853 2b04 	ldr.w	r2, [r3], #4
 800a68a:	f840 2f04 	str.w	r2, [r0, #4]!
 800a68e:	4299      	cmp	r1, r3
 800a690:	d8f9      	bhi.n	800a686 <__lshift+0xca>
 800a692:	e7eb      	b.n	800a66c <__lshift+0xb0>
 800a694:	4b03      	ldr	r3, [pc, #12]	; (800a6a4 <__lshift+0xe8>)
 800a696:	4804      	ldr	r0, [pc, #16]	; (800a6a8 <__lshift+0xec>)
 800a698:	4662      	mov	r2, ip
 800a69a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a69e:	f001 fb75 	bl	800bd8c <__assert_func>
 800a6a2:	bf00      	nop
 800a6a4:	0800d678 	.word	0x0800d678
 800a6a8:	0800d70c 	.word	0x0800d70c

0800a6ac <__mcmp>:
 800a6ac:	690b      	ldr	r3, [r1, #16]
 800a6ae:	4684      	mov	ip, r0
 800a6b0:	6900      	ldr	r0, [r0, #16]
 800a6b2:	1ac0      	subs	r0, r0, r3
 800a6b4:	d115      	bne.n	800a6e2 <__mcmp+0x36>
 800a6b6:	f10c 0c14 	add.w	ip, ip, #20
 800a6ba:	3114      	adds	r1, #20
 800a6bc:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800a6c0:	b410      	push	{r4}
 800a6c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a6c6:	e001      	b.n	800a6cc <__mcmp+0x20>
 800a6c8:	4594      	cmp	ip, r2
 800a6ca:	d208      	bcs.n	800a6de <__mcmp+0x32>
 800a6cc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800a6d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6d4:	428c      	cmp	r4, r1
 800a6d6:	d0f7      	beq.n	800a6c8 <__mcmp+0x1c>
 800a6d8:	d204      	bcs.n	800a6e4 <__mcmp+0x38>
 800a6da:	f04f 30ff 	mov.w	r0, #4294967295
 800a6de:	bc10      	pop	{r4}
 800a6e0:	4770      	bx	lr
 800a6e2:	4770      	bx	lr
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	bc10      	pop	{r4}
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop

0800a6ec <__mdiff>:
 800a6ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	690f      	ldr	r7, [r1, #16]
 800a6f2:	6913      	ldr	r3, [r2, #16]
 800a6f4:	1aff      	subs	r7, r7, r3
 800a6f6:	2f00      	cmp	r7, #0
 800a6f8:	460e      	mov	r6, r1
 800a6fa:	4690      	mov	r8, r2
 800a6fc:	d17a      	bne.n	800a7f4 <__mdiff+0x108>
 800a6fe:	f101 0514 	add.w	r5, r1, #20
 800a702:	3214      	adds	r2, #20
 800a704:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a708:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a70c:	e001      	b.n	800a712 <__mdiff+0x26>
 800a70e:	429d      	cmp	r5, r3
 800a710:	d273      	bcs.n	800a7fa <__mdiff+0x10e>
 800a712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a716:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800a71a:	42a1      	cmp	r1, r4
 800a71c:	d0f7      	beq.n	800a70e <__mdiff+0x22>
 800a71e:	d364      	bcc.n	800a7ea <__mdiff+0xfe>
 800a720:	6871      	ldr	r1, [r6, #4]
 800a722:	f7ff fd41 	bl	800a1a8 <_Balloc>
 800a726:	4681      	mov	r9, r0
 800a728:	2800      	cmp	r0, #0
 800a72a:	d072      	beq.n	800a812 <__mdiff+0x126>
 800a72c:	6935      	ldr	r5, [r6, #16]
 800a72e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a732:	60c7      	str	r7, [r0, #12]
 800a734:	f108 0e14 	add.w	lr, r8, #20
 800a738:	f106 0014 	add.w	r0, r6, #20
 800a73c:	f109 0a14 	add.w	sl, r9, #20
 800a740:	f106 0c10 	add.w	ip, r6, #16
 800a744:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800a748:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 800a74c:	4656      	mov	r6, sl
 800a74e:	2100      	movs	r1, #0
 800a750:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a754:	f85c bf04 	ldr.w	fp, [ip, #4]!
 800a758:	b2a3      	uxth	r3, r4
 800a75a:	fa11 f18b 	uxtah	r1, r1, fp
 800a75e:	1acb      	subs	r3, r1, r3
 800a760:	0c21      	lsrs	r1, r4, #16
 800a762:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 800a766:	eb01 4123 	add.w	r1, r1, r3, asr #16
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a770:	4572      	cmp	r2, lr
 800a772:	f846 3b04 	str.w	r3, [r6], #4
 800a776:	ea4f 4121 	mov.w	r1, r1, asr #16
 800a77a:	d8e9      	bhi.n	800a750 <__mdiff+0x64>
 800a77c:	eba2 0408 	sub.w	r4, r2, r8
 800a780:	3c15      	subs	r4, #21
 800a782:	f108 0815 	add.w	r8, r8, #21
 800a786:	4542      	cmp	r2, r8
 800a788:	f024 0603 	bic.w	r6, r4, #3
 800a78c:	f106 0604 	add.w	r6, r6, #4
 800a790:	bf38      	it	cc
 800a792:	2604      	movcc	r6, #4
 800a794:	4430      	add	r0, r6
 800a796:	f024 0203 	bic.w	r2, r4, #3
 800a79a:	bf38      	it	cc
 800a79c:	2200      	movcc	r2, #0
 800a79e:	4287      	cmp	r7, r0
 800a7a0:	4452      	add	r2, sl
 800a7a2:	44b2      	add	sl, r6
 800a7a4:	d916      	bls.n	800a7d4 <__mdiff+0xe8>
 800a7a6:	4656      	mov	r6, sl
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	f854 3b04 	ldr.w	r3, [r4], #4
 800a7ae:	fa11 f183 	uxtah	r1, r1, r3
 800a7b2:	140a      	asrs	r2, r1, #16
 800a7b4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a7b8:	b289      	uxth	r1, r1
 800a7ba:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 800a7be:	42a7      	cmp	r7, r4
 800a7c0:	f846 3b04 	str.w	r3, [r6], #4
 800a7c4:	ea4f 4122 	mov.w	r1, r2, asr #16
 800a7c8:	d8ef      	bhi.n	800a7aa <__mdiff+0xbe>
 800a7ca:	1e7a      	subs	r2, r7, #1
 800a7cc:	1a10      	subs	r0, r2, r0
 800a7ce:	f020 0203 	bic.w	r2, r0, #3
 800a7d2:	4452      	add	r2, sl
 800a7d4:	b923      	cbnz	r3, 800a7e0 <__mdiff+0xf4>
 800a7d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7da:	3d01      	subs	r5, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0fa      	beq.n	800a7d6 <__mdiff+0xea>
 800a7e0:	f8c9 5010 	str.w	r5, [r9, #16]
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ea:	4633      	mov	r3, r6
 800a7ec:	2701      	movs	r7, #1
 800a7ee:	4646      	mov	r6, r8
 800a7f0:	4698      	mov	r8, r3
 800a7f2:	e795      	b.n	800a720 <__mdiff+0x34>
 800a7f4:	dbf9      	blt.n	800a7ea <__mdiff+0xfe>
 800a7f6:	2700      	movs	r7, #0
 800a7f8:	e792      	b.n	800a720 <__mdiff+0x34>
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	f7ff fcd4 	bl	800a1a8 <_Balloc>
 800a800:	4681      	mov	r9, r0
 800a802:	b168      	cbz	r0, 800a820 <__mdiff+0x134>
 800a804:	2201      	movs	r2, #1
 800a806:	2300      	movs	r3, #0
 800a808:	e9c9 2304 	strd	r2, r3, [r9, #16]
 800a80c:	4648      	mov	r0, r9
 800a80e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <__mdiff+0x144>)
 800a814:	4807      	ldr	r0, [pc, #28]	; (800a834 <__mdiff+0x148>)
 800a816:	464a      	mov	r2, r9
 800a818:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a81c:	f001 fab6 	bl	800bd8c <__assert_func>
 800a820:	4b03      	ldr	r3, [pc, #12]	; (800a830 <__mdiff+0x144>)
 800a822:	4804      	ldr	r0, [pc, #16]	; (800a834 <__mdiff+0x148>)
 800a824:	464a      	mov	r2, r9
 800a826:	f240 2132 	movw	r1, #562	; 0x232
 800a82a:	f001 faaf 	bl	800bd8c <__assert_func>
 800a82e:	bf00      	nop
 800a830:	0800d678 	.word	0x0800d678
 800a834:	0800d70c 	.word	0x0800d70c

0800a838 <__d2b>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	2101      	movs	r1, #1
 800a83c:	b082      	sub	sp, #8
 800a83e:	4616      	mov	r6, r2
 800a840:	461d      	mov	r5, r3
 800a842:	f7ff fcb1 	bl	800a1a8 <_Balloc>
 800a846:	4604      	mov	r4, r0
 800a848:	2800      	cmp	r0, #0
 800a84a:	d04b      	beq.n	800a8e4 <__d2b+0xac>
 800a84c:	462b      	mov	r3, r5
 800a84e:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a856:	b10d      	cbz	r5, 800a85c <__d2b+0x24>
 800a858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a85c:	2e00      	cmp	r6, #0
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	d022      	beq.n	800a8a8 <__d2b+0x70>
 800a862:	4668      	mov	r0, sp
 800a864:	9600      	str	r6, [sp, #0]
 800a866:	f7ff fd3f 	bl	800a2e8 <__lo0bits>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d036      	beq.n	800a8dc <__d2b+0xa4>
 800a86e:	9b01      	ldr	r3, [sp, #4]
 800a870:	9900      	ldr	r1, [sp, #0]
 800a872:	f1c0 0220 	rsb	r2, r0, #32
 800a876:	fa03 f202 	lsl.w	r2, r3, r2
 800a87a:	430a      	orrs	r2, r1
 800a87c:	40c3      	lsrs	r3, r0
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	6162      	str	r2, [r4, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	bf14      	ite	ne
 800a886:	2102      	movne	r1, #2
 800a888:	2101      	moveq	r1, #1
 800a88a:	61a3      	str	r3, [r4, #24]
 800a88c:	6121      	str	r1, [r4, #16]
 800a88e:	b1ad      	cbz	r5, 800a8bc <__d2b+0x84>
 800a890:	9a06      	ldr	r2, [sp, #24]
 800a892:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 800a896:	4403      	add	r3, r0
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	9b07      	ldr	r3, [sp, #28]
 800a89c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8a0:	6018      	str	r0, [r3, #0]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	b002      	add	sp, #8
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	a801      	add	r0, sp, #4
 800a8aa:	f7ff fd1d 	bl	800a2e8 <__lo0bits>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800a8b6:	3020      	adds	r0, #32
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	d1e9      	bne.n	800a890 <__d2b+0x58>
 800a8bc:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 800a8c0:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800a8c4:	6910      	ldr	r0, [r2, #16]
 800a8c6:	9a06      	ldr	r2, [sp, #24]
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	f7ff fced 	bl	800a2a8 <__hi0bits>
 800a8ce:	9b07      	ldr	r3, [sp, #28]
 800a8d0:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	6019      	str	r1, [r3, #0]
 800a8d8:	b002      	add	sp, #8
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8e0:	6162      	str	r2, [r4, #20]
 800a8e2:	e7ce      	b.n	800a882 <__d2b+0x4a>
 800a8e4:	4b03      	ldr	r3, [pc, #12]	; (800a8f4 <__d2b+0xbc>)
 800a8e6:	4804      	ldr	r0, [pc, #16]	; (800a8f8 <__d2b+0xc0>)
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	f240 310a 	movw	r1, #778	; 0x30a
 800a8ee:	f001 fa4d 	bl	800bd8c <__assert_func>
 800a8f2:	bf00      	nop
 800a8f4:	0800d678 	.word	0x0800d678
 800a8f8:	0800d70c 	.word	0x0800d70c

0800a8fc <_realloc_r>:
 800a8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a900:	4617      	mov	r7, r2
 800a902:	2900      	cmp	r1, #0
 800a904:	f000 8098 	beq.w	800aa38 <_realloc_r+0x13c>
 800a908:	f107 050b 	add.w	r5, r7, #11
 800a90c:	4680      	mov	r8, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	f7fc f856 	bl	80069c0 <__malloc_lock>
 800a914:	2d16      	cmp	r5, #22
 800a916:	d85d      	bhi.n	800a9d4 <_realloc_r+0xd8>
 800a918:	2510      	movs	r5, #16
 800a91a:	462a      	mov	r2, r5
 800a91c:	42af      	cmp	r7, r5
 800a91e:	d85e      	bhi.n	800a9de <_realloc_r+0xe2>
 800a920:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a924:	f021 0603 	bic.w	r6, r1, #3
 800a928:	4296      	cmp	r6, r2
 800a92a:	f1a4 0908 	sub.w	r9, r4, #8
 800a92e:	da62      	bge.n	800a9f6 <_realloc_r+0xfa>
 800a930:	4bbc      	ldr	r3, [pc, #752]	; (800ac24 <_realloc_r+0x328>)
 800a932:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800a936:	eb09 0006 	add.w	r0, r9, r6
 800a93a:	4584      	cmp	ip, r0
 800a93c:	f000 8097 	beq.w	800aa6e <_realloc_r+0x172>
 800a940:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800a944:	f02c 0301 	bic.w	r3, ip, #1
 800a948:	4403      	add	r3, r0
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	07db      	lsls	r3, r3, #31
 800a94e:	d468      	bmi.n	800aa22 <_realloc_r+0x126>
 800a950:	f02c 0c03 	bic.w	ip, ip, #3
 800a954:	eb06 030c 	add.w	r3, r6, ip
 800a958:	4293      	cmp	r3, r2
 800a95a:	da47      	bge.n	800a9ec <_realloc_r+0xf0>
 800a95c:	07cb      	lsls	r3, r1, #31
 800a95e:	d410      	bmi.n	800a982 <_realloc_r+0x86>
 800a960:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800a964:	eba9 0a03 	sub.w	sl, r9, r3
 800a968:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a96c:	f023 0103 	bic.w	r1, r3, #3
 800a970:	448c      	add	ip, r1
 800a972:	44b4      	add	ip, r6
 800a974:	4594      	cmp	ip, r2
 800a976:	f280 8111 	bge.w	800ab9c <_realloc_r+0x2a0>
 800a97a:	1873      	adds	r3, r6, r1
 800a97c:	4293      	cmp	r3, r2
 800a97e:	f280 80e8 	bge.w	800ab52 <_realloc_r+0x256>
 800a982:	4639      	mov	r1, r7
 800a984:	4640      	mov	r0, r8
 800a986:	f7fb fce5 	bl	8006354 <_malloc_r>
 800a98a:	4607      	mov	r7, r0
 800a98c:	b1e0      	cbz	r0, 800a9c8 <_realloc_r+0xcc>
 800a98e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a992:	f023 0301 	bic.w	r3, r3, #1
 800a996:	444b      	add	r3, r9
 800a998:	f1a0 0208 	sub.w	r2, r0, #8
 800a99c:	4293      	cmp	r3, r2
 800a99e:	f000 80d2 	beq.w	800ab46 <_realloc_r+0x24a>
 800a9a2:	1f32      	subs	r2, r6, #4
 800a9a4:	2a24      	cmp	r2, #36	; 0x24
 800a9a6:	f200 80f5 	bhi.w	800ab94 <_realloc_r+0x298>
 800a9aa:	2a13      	cmp	r2, #19
 800a9ac:	f200 80ac 	bhi.w	800ab08 <_realloc_r+0x20c>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	6811      	ldr	r1, [r2, #0]
 800a9b6:	6019      	str	r1, [r3, #0]
 800a9b8:	6851      	ldr	r1, [r2, #4]
 800a9ba:	6059      	str	r1, [r3, #4]
 800a9bc:	6892      	ldr	r2, [r2, #8]
 800a9be:	609a      	str	r2, [r3, #8]
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	f7ff f85a 	bl	8009a7c <_free_r>
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	f7fb ffff 	bl	80069cc <__malloc_unlock>
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	f025 0507 	bic.w	r5, r5, #7
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	462a      	mov	r2, r5
 800a9dc:	da9e      	bge.n	800a91c <_realloc_r+0x20>
 800a9de:	230c      	movs	r3, #12
 800a9e0:	f8c8 3000 	str.w	r3, [r8]
 800a9e4:	2700      	movs	r7, #0
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	461e      	mov	r6, r3
 800a9ee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a9f2:	60d3      	str	r3, [r2, #12]
 800a9f4:	609a      	str	r2, [r3, #8]
 800a9f6:	1b73      	subs	r3, r6, r5
 800a9f8:	2b0f      	cmp	r3, #15
 800a9fa:	d822      	bhi.n	800aa42 <_realloc_r+0x146>
 800a9fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	4333      	orrs	r3, r6
 800aa06:	444e      	add	r6, r9
 800aa08:	f8c9 3004 	str.w	r3, [r9, #4]
 800aa0c:	6873      	ldr	r3, [r6, #4]
 800aa0e:	f043 0301 	orr.w	r3, r3, #1
 800aa12:	6073      	str	r3, [r6, #4]
 800aa14:	4640      	mov	r0, r8
 800aa16:	4627      	mov	r7, r4
 800aa18:	f7fb ffd8 	bl	80069cc <__malloc_unlock>
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa22:	07c9      	lsls	r1, r1, #31
 800aa24:	d4ad      	bmi.n	800a982 <_realloc_r+0x86>
 800aa26:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800aa2a:	eba9 0a03 	sub.w	sl, r9, r3
 800aa2e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aa32:	f021 0103 	bic.w	r1, r1, #3
 800aa36:	e7a0      	b.n	800a97a <_realloc_r+0x7e>
 800aa38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	f7fb bc89 	b.w	8006354 <_malloc_r>
 800aa42:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa46:	f001 0101 	and.w	r1, r1, #1
 800aa4a:	4329      	orrs	r1, r5
 800aa4c:	f8c9 1004 	str.w	r1, [r9, #4]
 800aa50:	eb09 0105 	add.w	r1, r9, r5
 800aa54:	444e      	add	r6, r9
 800aa56:	f043 0301 	orr.w	r3, r3, #1
 800aa5a:	604b      	str	r3, [r1, #4]
 800aa5c:	6873      	ldr	r3, [r6, #4]
 800aa5e:	f043 0301 	orr.w	r3, r3, #1
 800aa62:	3108      	adds	r1, #8
 800aa64:	6073      	str	r3, [r6, #4]
 800aa66:	4640      	mov	r0, r8
 800aa68:	f7ff f808 	bl	8009a7c <_free_r>
 800aa6c:	e7d2      	b.n	800aa14 <_realloc_r+0x118>
 800aa6e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800aa72:	f020 0b03 	bic.w	fp, r0, #3
 800aa76:	eb06 0c0b 	add.w	ip, r6, fp
 800aa7a:	f105 0010 	add.w	r0, r5, #16
 800aa7e:	4584      	cmp	ip, r0
 800aa80:	da4d      	bge.n	800ab1e <_realloc_r+0x222>
 800aa82:	07c9      	lsls	r1, r1, #31
 800aa84:	f53f af7d 	bmi.w	800a982 <_realloc_r+0x86>
 800aa88:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800aa8c:	eba9 0a01 	sub.w	sl, r9, r1
 800aa90:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aa94:	f021 0103 	bic.w	r1, r1, #3
 800aa98:	448b      	add	fp, r1
 800aa9a:	44b3      	add	fp, r6
 800aa9c:	4558      	cmp	r0, fp
 800aa9e:	f73f af6c 	bgt.w	800a97a <_realloc_r+0x7e>
 800aaa2:	4657      	mov	r7, sl
 800aaa4:	f8da 100c 	ldr.w	r1, [sl, #12]
 800aaa8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800aaac:	1f32      	subs	r2, r6, #4
 800aaae:	2a24      	cmp	r2, #36	; 0x24
 800aab0:	60c1      	str	r1, [r0, #12]
 800aab2:	6088      	str	r0, [r1, #8]
 800aab4:	f200 80db 	bhi.w	800ac6e <_realloc_r+0x372>
 800aab8:	2a13      	cmp	r2, #19
 800aaba:	f240 80d6 	bls.w	800ac6a <_realloc_r+0x36e>
 800aabe:	6821      	ldr	r1, [r4, #0]
 800aac0:	f8ca 1008 	str.w	r1, [sl, #8]
 800aac4:	6861      	ldr	r1, [r4, #4]
 800aac6:	f8ca 100c 	str.w	r1, [sl, #12]
 800aaca:	2a1b      	cmp	r2, #27
 800aacc:	f200 80df 	bhi.w	800ac8e <_realloc_r+0x392>
 800aad0:	3408      	adds	r4, #8
 800aad2:	f10a 0210 	add.w	r2, sl, #16
 800aad6:	6821      	ldr	r1, [r4, #0]
 800aad8:	6011      	str	r1, [r2, #0]
 800aada:	6861      	ldr	r1, [r4, #4]
 800aadc:	6051      	str	r1, [r2, #4]
 800aade:	68a1      	ldr	r1, [r4, #8]
 800aae0:	6091      	str	r1, [r2, #8]
 800aae2:	eb0a 0105 	add.w	r1, sl, r5
 800aae6:	ebab 0205 	sub.w	r2, fp, r5
 800aaea:	f042 0201 	orr.w	r2, r2, #1
 800aaee:	6099      	str	r1, [r3, #8]
 800aaf0:	604a      	str	r2, [r1, #4]
 800aaf2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	431d      	orrs	r5, r3
 800aafc:	4640      	mov	r0, r8
 800aafe:	f8ca 5004 	str.w	r5, [sl, #4]
 800ab02:	f7fb ff63 	bl	80069cc <__malloc_unlock>
 800ab06:	e76e      	b.n	800a9e6 <_realloc_r+0xea>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	6003      	str	r3, [r0, #0]
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	6043      	str	r3, [r0, #4]
 800ab10:	2a1b      	cmp	r2, #27
 800ab12:	d868      	bhi.n	800abe6 <_realloc_r+0x2ea>
 800ab14:	f104 0208 	add.w	r2, r4, #8
 800ab18:	f100 0308 	add.w	r3, r0, #8
 800ab1c:	e74a      	b.n	800a9b4 <_realloc_r+0xb8>
 800ab1e:	eb09 0205 	add.w	r2, r9, r5
 800ab22:	609a      	str	r2, [r3, #8]
 800ab24:	ebac 0305 	sub.w	r3, ip, r5
 800ab28:	f043 0301 	orr.w	r3, r3, #1
 800ab2c:	6053      	str	r3, [r2, #4]
 800ab2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	431d      	orrs	r5, r3
 800ab38:	4640      	mov	r0, r8
 800ab3a:	f844 5c04 	str.w	r5, [r4, #-4]
 800ab3e:	f7fb ff45 	bl	80069cc <__malloc_unlock>
 800ab42:	4627      	mov	r7, r4
 800ab44:	e74f      	b.n	800a9e6 <_realloc_r+0xea>
 800ab46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ab4a:	f023 0303 	bic.w	r3, r3, #3
 800ab4e:	441e      	add	r6, r3
 800ab50:	e751      	b.n	800a9f6 <_realloc_r+0xfa>
 800ab52:	4657      	mov	r7, sl
 800ab54:	f8da 100c 	ldr.w	r1, [sl, #12]
 800ab58:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800ab5c:	1f32      	subs	r2, r6, #4
 800ab5e:	2a24      	cmp	r2, #36	; 0x24
 800ab60:	60c1      	str	r1, [r0, #12]
 800ab62:	6088      	str	r0, [r1, #8]
 800ab64:	d84c      	bhi.n	800ac00 <_realloc_r+0x304>
 800ab66:	2a13      	cmp	r2, #19
 800ab68:	d948      	bls.n	800abfc <_realloc_r+0x300>
 800ab6a:	6821      	ldr	r1, [r4, #0]
 800ab6c:	f8ca 1008 	str.w	r1, [sl, #8]
 800ab70:	6861      	ldr	r1, [r4, #4]
 800ab72:	f8ca 100c 	str.w	r1, [sl, #12]
 800ab76:	2a1b      	cmp	r2, #27
 800ab78:	d856      	bhi.n	800ac28 <_realloc_r+0x32c>
 800ab7a:	3408      	adds	r4, #8
 800ab7c:	f10a 0210 	add.w	r2, sl, #16
 800ab80:	461e      	mov	r6, r3
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	6863      	ldr	r3, [r4, #4]
 800ab88:	6053      	str	r3, [r2, #4]
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	6093      	str	r3, [r2, #8]
 800ab8e:	46d1      	mov	r9, sl
 800ab90:	463c      	mov	r4, r7
 800ab92:	e730      	b.n	800a9f6 <_realloc_r+0xfa>
 800ab94:	4621      	mov	r1, r4
 800ab96:	f7ff fa8b 	bl	800a0b0 <memmove>
 800ab9a:	e711      	b.n	800a9c0 <_realloc_r+0xc4>
 800ab9c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800aba0:	4657      	mov	r7, sl
 800aba2:	60cb      	str	r3, [r1, #12]
 800aba4:	6099      	str	r1, [r3, #8]
 800aba6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800abaa:	f8da 300c 	ldr.w	r3, [sl, #12]
 800abae:	60cb      	str	r3, [r1, #12]
 800abb0:	1f32      	subs	r2, r6, #4
 800abb2:	2a24      	cmp	r2, #36	; 0x24
 800abb4:	6099      	str	r1, [r3, #8]
 800abb6:	d82d      	bhi.n	800ac14 <_realloc_r+0x318>
 800abb8:	2a13      	cmp	r2, #19
 800abba:	d929      	bls.n	800ac10 <_realloc_r+0x314>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	f8ca 3008 	str.w	r3, [sl, #8]
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	f8ca 300c 	str.w	r3, [sl, #12]
 800abc8:	2a1b      	cmp	r2, #27
 800abca:	d842      	bhi.n	800ac52 <_realloc_r+0x356>
 800abcc:	3408      	adds	r4, #8
 800abce:	f10a 0310 	add.w	r3, sl, #16
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	6862      	ldr	r2, [r4, #4]
 800abd8:	605a      	str	r2, [r3, #4]
 800abda:	68a2      	ldr	r2, [r4, #8]
 800abdc:	609a      	str	r2, [r3, #8]
 800abde:	4666      	mov	r6, ip
 800abe0:	46d1      	mov	r9, sl
 800abe2:	463c      	mov	r4, r7
 800abe4:	e707      	b.n	800a9f6 <_realloc_r+0xfa>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	6083      	str	r3, [r0, #8]
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	60c3      	str	r3, [r0, #12]
 800abee:	2a24      	cmp	r2, #36	; 0x24
 800abf0:	d026      	beq.n	800ac40 <_realloc_r+0x344>
 800abf2:	f104 0210 	add.w	r2, r4, #16
 800abf6:	f100 0310 	add.w	r3, r0, #16
 800abfa:	e6db      	b.n	800a9b4 <_realloc_r+0xb8>
 800abfc:	463a      	mov	r2, r7
 800abfe:	e7bf      	b.n	800ab80 <_realloc_r+0x284>
 800ac00:	4621      	mov	r1, r4
 800ac02:	4638      	mov	r0, r7
 800ac04:	461e      	mov	r6, r3
 800ac06:	46d1      	mov	r9, sl
 800ac08:	f7ff fa52 	bl	800a0b0 <memmove>
 800ac0c:	463c      	mov	r4, r7
 800ac0e:	e6f2      	b.n	800a9f6 <_realloc_r+0xfa>
 800ac10:	463b      	mov	r3, r7
 800ac12:	e7de      	b.n	800abd2 <_realloc_r+0x2d6>
 800ac14:	4621      	mov	r1, r4
 800ac16:	4638      	mov	r0, r7
 800ac18:	4666      	mov	r6, ip
 800ac1a:	46d1      	mov	r9, sl
 800ac1c:	f7ff fa48 	bl	800a0b0 <memmove>
 800ac20:	463c      	mov	r4, r7
 800ac22:	e6e8      	b.n	800a9f6 <_realloc_r+0xfa>
 800ac24:	20000430 	.word	0x20000430
 800ac28:	68a1      	ldr	r1, [r4, #8]
 800ac2a:	f8ca 1010 	str.w	r1, [sl, #16]
 800ac2e:	68e1      	ldr	r1, [r4, #12]
 800ac30:	f8ca 1014 	str.w	r1, [sl, #20]
 800ac34:	2a24      	cmp	r2, #36	; 0x24
 800ac36:	d020      	beq.n	800ac7a <_realloc_r+0x37e>
 800ac38:	3410      	adds	r4, #16
 800ac3a:	f10a 0218 	add.w	r2, sl, #24
 800ac3e:	e79f      	b.n	800ab80 <_realloc_r+0x284>
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	6103      	str	r3, [r0, #16]
 800ac44:	6961      	ldr	r1, [r4, #20]
 800ac46:	6141      	str	r1, [r0, #20]
 800ac48:	f104 0218 	add.w	r2, r4, #24
 800ac4c:	f100 0318 	add.w	r3, r0, #24
 800ac50:	e6b0      	b.n	800a9b4 <_realloc_r+0xb8>
 800ac52:	68a3      	ldr	r3, [r4, #8]
 800ac54:	f8ca 3010 	str.w	r3, [sl, #16]
 800ac58:	68e3      	ldr	r3, [r4, #12]
 800ac5a:	f8ca 3014 	str.w	r3, [sl, #20]
 800ac5e:	2a24      	cmp	r2, #36	; 0x24
 800ac60:	d021      	beq.n	800aca6 <_realloc_r+0x3aa>
 800ac62:	3410      	adds	r4, #16
 800ac64:	f10a 0318 	add.w	r3, sl, #24
 800ac68:	e7b3      	b.n	800abd2 <_realloc_r+0x2d6>
 800ac6a:	463a      	mov	r2, r7
 800ac6c:	e733      	b.n	800aad6 <_realloc_r+0x1da>
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff fa1d 	bl	800a0b0 <memmove>
 800ac76:	4b16      	ldr	r3, [pc, #88]	; (800acd0 <_realloc_r+0x3d4>)
 800ac78:	e733      	b.n	800aae2 <_realloc_r+0x1e6>
 800ac7a:	6922      	ldr	r2, [r4, #16]
 800ac7c:	f8ca 2018 	str.w	r2, [sl, #24]
 800ac80:	6962      	ldr	r2, [r4, #20]
 800ac82:	f8ca 201c 	str.w	r2, [sl, #28]
 800ac86:	3418      	adds	r4, #24
 800ac88:	f10a 0220 	add.w	r2, sl, #32
 800ac8c:	e778      	b.n	800ab80 <_realloc_r+0x284>
 800ac8e:	68a1      	ldr	r1, [r4, #8]
 800ac90:	f8ca 1010 	str.w	r1, [sl, #16]
 800ac94:	68e1      	ldr	r1, [r4, #12]
 800ac96:	f8ca 1014 	str.w	r1, [sl, #20]
 800ac9a:	2a24      	cmp	r2, #36	; 0x24
 800ac9c:	d00d      	beq.n	800acba <_realloc_r+0x3be>
 800ac9e:	3410      	adds	r4, #16
 800aca0:	f10a 0218 	add.w	r2, sl, #24
 800aca4:	e717      	b.n	800aad6 <_realloc_r+0x1da>
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	f8ca 3018 	str.w	r3, [sl, #24]
 800acac:	6963      	ldr	r3, [r4, #20]
 800acae:	f8ca 301c 	str.w	r3, [sl, #28]
 800acb2:	3418      	adds	r4, #24
 800acb4:	f10a 0320 	add.w	r3, sl, #32
 800acb8:	e78b      	b.n	800abd2 <_realloc_r+0x2d6>
 800acba:	6922      	ldr	r2, [r4, #16]
 800acbc:	f8ca 2018 	str.w	r2, [sl, #24]
 800acc0:	6962      	ldr	r2, [r4, #20]
 800acc2:	f8ca 201c 	str.w	r2, [sl, #28]
 800acc6:	3418      	adds	r4, #24
 800acc8:	f10a 0220 	add.w	r2, sl, #32
 800accc:	e703      	b.n	800aad6 <_realloc_r+0x1da>
 800acce:	bf00      	nop
 800acd0:	20000430 	.word	0x20000430

0800acd4 <frexp>:
 800acd4:	f8df c060 	ldr.w	ip, [pc, #96]	; 800ad38 <frexp+0x64>
 800acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acda:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acde:	2700      	movs	r7, #0
 800ace0:	4563      	cmp	r3, ip
 800ace2:	4604      	mov	r4, r0
 800ace4:	460d      	mov	r5, r1
 800ace6:	4616      	mov	r6, r2
 800ace8:	6017      	str	r7, [r2, #0]
 800acea:	dc22      	bgt.n	800ad32 <frexp+0x5e>
 800acec:	4684      	mov	ip, r0
 800acee:	ea53 0c0c 	orrs.w	ip, r3, ip
 800acf2:	d01e      	beq.n	800ad32 <frexp+0x5e>
 800acf4:	f8df c044 	ldr.w	ip, [pc, #68]	; 800ad3c <frexp+0x68>
 800acf8:	ea01 0c0c 	and.w	ip, r1, ip
 800acfc:	460a      	mov	r2, r1
 800acfe:	f1bc 0f00 	cmp.w	ip, #0
 800ad02:	d109      	bne.n	800ad18 <frexp+0x44>
 800ad04:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <frexp+0x6c>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	f7f7 fc36 	bl	8002578 <__aeabi_dmul>
 800ad0c:	f06f 0735 	mvn.w	r7, #53	; 0x35
 800ad10:	4604      	mov	r4, r0
 800ad12:	460a      	mov	r2, r1
 800ad14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad18:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ad1c:	151b      	asrs	r3, r3, #20
 800ad1e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800ad22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ad26:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ad2a:	443b      	add	r3, r7
 800ad2c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ad30:	6033      	str	r3, [r6, #0]
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad38:	7fefffff 	.word	0x7fefffff
 800ad3c:	7ff00000 	.word	0x7ff00000
 800ad40:	43500000 	.word	0x43500000

0800ad44 <__sread>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	460c      	mov	r4, r1
 800ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4c:	f001 f9ac 	bl	800c0a8 <_read_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	db03      	blt.n	800ad5c <__sread+0x18>
 800ad54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad56:	4403      	add	r3, r0
 800ad58:	6523      	str	r3, [r4, #80]	; 0x50
 800ad5a:	bd10      	pop	{r4, pc}
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad62:	81a3      	strh	r3, [r4, #12]
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	bf00      	nop

0800ad68 <__swrite>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800ad72:	461f      	mov	r7, r3
 800ad74:	05cb      	lsls	r3, r1, #23
 800ad76:	4605      	mov	r5, r0
 800ad78:	4616      	mov	r6, r2
 800ad7a:	d40b      	bmi.n	800ad94 <__swrite+0x2c>
 800ad7c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800ad80:	81a1      	strh	r1, [r4, #12]
 800ad82:	463b      	mov	r3, r7
 800ad84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad88:	4632      	mov	r2, r6
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad90:	f000 bfa0 	b.w	800bcd4 <_write_r>
 800ad94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad98:	2302      	movs	r3, #2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f001 f958 	bl	800c050 <_lseek_r>
 800ada0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800ada4:	e7ea      	b.n	800ad7c <__swrite+0x14>
 800ada6:	bf00      	nop

0800ada8 <__sseek>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	460c      	mov	r4, r1
 800adac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb0:	f001 f94e 	bl	800c050 <_lseek_r>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	1c42      	adds	r2, r0, #1
 800adb8:	bf0e      	itee	eq
 800adba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adc2:	6520      	strne	r0, [r4, #80]	; 0x50
 800adc4:	81a3      	strh	r3, [r4, #12]
 800adc6:	bd10      	pop	{r4, pc}

0800adc8 <__sclose>:
 800adc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adcc:	f000 bffe 	b.w	800bdcc <_close_r>

0800add0 <strncpy>:
 800add0:	b530      	push	{r4, r5, lr}
 800add2:	ea40 0401 	orr.w	r4, r0, r1
 800add6:	07a3      	lsls	r3, r4, #30
 800add8:	d101      	bne.n	800adde <strncpy+0xe>
 800adda:	2a03      	cmp	r2, #3
 800addc:	d80f      	bhi.n	800adfe <strncpy+0x2e>
 800adde:	4684      	mov	ip, r0
 800ade0:	f101 3eff 	add.w	lr, r1, #4294967295
 800ade4:	e007      	b.n	800adf6 <strncpy+0x26>
 800ade6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 800adea:	f803 1b01 	strb.w	r1, [r3], #1
 800adee:	1e54      	subs	r4, r2, #1
 800adf0:	b1c1      	cbz	r1, 800ae24 <strncpy+0x54>
 800adf2:	469c      	mov	ip, r3
 800adf4:	4622      	mov	r2, r4
 800adf6:	4663      	mov	r3, ip
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	d1f4      	bne.n	800ade6 <strncpy+0x16>
 800adfc:	bd30      	pop	{r4, r5, pc}
 800adfe:	460b      	mov	r3, r1
 800ae00:	4684      	mov	ip, r0
 800ae02:	4619      	mov	r1, r3
 800ae04:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae08:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 800ae0c:	ea24 0405 	bic.w	r4, r4, r5
 800ae10:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800ae14:	d1e4      	bne.n	800ade0 <strncpy+0x10>
 800ae16:	3a04      	subs	r2, #4
 800ae18:	2a03      	cmp	r2, #3
 800ae1a:	f84c 5b04 	str.w	r5, [ip], #4
 800ae1e:	4619      	mov	r1, r3
 800ae20:	d8ef      	bhi.n	800ae02 <strncpy+0x32>
 800ae22:	e7dd      	b.n	800ade0 <strncpy+0x10>
 800ae24:	4462      	add	r2, ip
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d0e8      	beq.n	800adfc <strncpy+0x2c>
 800ae2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d1fb      	bne.n	800ae2a <strncpy+0x5a>
 800ae32:	bd30      	pop	{r4, r5, pc}

0800ae34 <__sprint_r.part.0>:
 800ae34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ae3a:	049c      	lsls	r4, r3, #18
 800ae3c:	4690      	mov	r8, r2
 800ae3e:	d52d      	bpl.n	800ae9c <__sprint_r.part.0+0x68>
 800ae40:	6893      	ldr	r3, [r2, #8]
 800ae42:	6812      	ldr	r2, [r2, #0]
 800ae44:	b343      	cbz	r3, 800ae98 <__sprint_r.part.0+0x64>
 800ae46:	468b      	mov	fp, r1
 800ae48:	4606      	mov	r6, r0
 800ae4a:	f102 0908 	add.w	r9, r2, #8
 800ae4e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 800ae52:	ea5f 079a 	movs.w	r7, sl, lsr #2
 800ae56:	d015      	beq.n	800ae84 <__sprint_r.part.0+0x50>
 800ae58:	3d04      	subs	r5, #4
 800ae5a:	2400      	movs	r4, #0
 800ae5c:	e001      	b.n	800ae62 <__sprint_r.part.0+0x2e>
 800ae5e:	42a7      	cmp	r7, r4
 800ae60:	d00e      	beq.n	800ae80 <__sprint_r.part.0+0x4c>
 800ae62:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800ae66:	465a      	mov	r2, fp
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f001 f88f 	bl	800bf8c <_fputwc_r>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	f104 0401 	add.w	r4, r4, #1
 800ae74:	d1f3      	bne.n	800ae5e <__sprint_r.part.0+0x2a>
 800ae76:	2300      	movs	r3, #0
 800ae78:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800ae7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae84:	f02a 0a03 	bic.w	sl, sl, #3
 800ae88:	eba3 030a 	sub.w	r3, r3, sl
 800ae8c:	f8c8 3008 	str.w	r3, [r8, #8]
 800ae90:	f109 0908 	add.w	r9, r9, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1da      	bne.n	800ae4e <__sprint_r.part.0+0x1a>
 800ae98:	2000      	movs	r0, #0
 800ae9a:	e7ec      	b.n	800ae76 <__sprint_r.part.0+0x42>
 800ae9c:	f7fe fef4 	bl	8009c88 <__sfvwrite_r>
 800aea0:	2300      	movs	r3, #0
 800aea2:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800aea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	bf00      	nop

0800aeac <__sprint_r>:
 800aeac:	b410      	push	{r4}
 800aeae:	6894      	ldr	r4, [r2, #8]
 800aeb0:	b114      	cbz	r4, 800aeb8 <__sprint_r+0xc>
 800aeb2:	bc10      	pop	{r4}
 800aeb4:	f7ff bfbe 	b.w	800ae34 <__sprint_r.part.0>
 800aeb8:	4620      	mov	r0, r4
 800aeba:	6054      	str	r4, [r2, #4]
 800aebc:	bc10      	pop	{r4}
 800aebe:	4770      	bx	lr

0800aec0 <_vfiprintf_r>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	b0bd      	sub	sp, #244	; 0xf4
 800aec6:	e9cd 3004 	strd	r3, r0, [sp, #16]
 800aeca:	461c      	mov	r4, r3
 800aecc:	9101      	str	r1, [sp, #4]
 800aece:	4617      	mov	r7, r2
 800aed0:	b118      	cbz	r0, 800aeda <_vfiprintf_r+0x1a>
 800aed2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8286 	beq.w	800b3e6 <_vfiprintf_r+0x526>
 800aeda:	9a01      	ldr	r2, [sp, #4]
 800aedc:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800aede:	07de      	lsls	r6, r3, #31
 800aee0:	f140 818f 	bpl.w	800b202 <_vfiprintf_r+0x342>
 800aee4:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800aee8:	b28a      	uxth	r2, r1
 800aeea:	0490      	lsls	r0, r2, #18
 800aeec:	d408      	bmi.n	800af00 <_vfiprintf_r+0x40>
 800aeee:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 800aef2:	9901      	ldr	r1, [sp, #4]
 800aef4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800aef6:	818a      	strh	r2, [r1, #12]
 800aef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aefc:	b292      	uxth	r2, r2
 800aefe:	664b      	str	r3, [r1, #100]	; 0x64
 800af00:	0711      	lsls	r1, r2, #28
 800af02:	f140 80f7 	bpl.w	800b0f4 <_vfiprintf_r+0x234>
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 80f2 	beq.w	800b0f4 <_vfiprintf_r+0x234>
 800af10:	f002 031a 	and.w	r3, r2, #26
 800af14:	2b0a      	cmp	r3, #10
 800af16:	f000 80fb 	beq.w	800b110 <_vfiprintf_r+0x250>
 800af1a:	ab13      	add	r3, sp, #76	; 0x4c
 800af1c:	9310      	str	r3, [sp, #64]	; 0x40
 800af1e:	2300      	movs	r3, #0
 800af20:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800af24:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800af28:	9308      	str	r3, [sp, #32]
 800af2a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800af2e:	9309      	str	r3, [sp, #36]	; 0x24
 800af30:	9303      	str	r3, [sp, #12]
 800af32:	783b      	ldrb	r3, [r7, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8151 	beq.w	800b1dc <_vfiprintf_r+0x31c>
 800af3a:	463c      	mov	r4, r7
 800af3c:	e004      	b.n	800af48 <_vfiprintf_r+0x88>
 800af3e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 812c 	beq.w	800b1a0 <_vfiprintf_r+0x2e0>
 800af48:	2b25      	cmp	r3, #37	; 0x25
 800af4a:	d1f8      	bne.n	800af3e <_vfiprintf_r+0x7e>
 800af4c:	1be5      	subs	r5, r4, r7
 800af4e:	f040 8129 	bne.w	800b1a4 <_vfiprintf_r+0x2e4>
 800af52:	7823      	ldrb	r3, [r4, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 8141 	beq.w	800b1dc <_vfiprintf_r+0x31c>
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	2500      	movs	r5, #0
 800af60:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800af64:	1c67      	adds	r7, r4, #1
 800af66:	7863      	ldrb	r3, [r4, #1]
 800af68:	9502      	str	r5, [sp, #8]
 800af6a:	f04f 3bff 	mov.w	fp, #4294967295
 800af6e:	242b      	movs	r4, #43	; 0x2b
 800af70:	3701      	adds	r7, #1
 800af72:	f1a3 0220 	sub.w	r2, r3, #32
 800af76:	2a5a      	cmp	r2, #90	; 0x5a
 800af78:	f200 8152 	bhi.w	800b220 <_vfiprintf_r+0x360>
 800af7c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800af80:	01500298 	.word	0x01500298
 800af84:	02940150 	.word	0x02940150
 800af88:	01500150 	.word	0x01500150
 800af8c:	006a0150 	.word	0x006a0150
 800af90:	01500150 	.word	0x01500150
 800af94:	026b0236 	.word	0x026b0236
 800af98:	02410150 	.word	0x02410150
 800af9c:	015002a6 	.word	0x015002a6
 800afa0:	005b02a2 	.word	0x005b02a2
 800afa4:	005b005b 	.word	0x005b005b
 800afa8:	005b005b 	.word	0x005b005b
 800afac:	005b005b 	.word	0x005b005b
 800afb0:	005b005b 	.word	0x005b005b
 800afb4:	01500150 	.word	0x01500150
 800afb8:	01500150 	.word	0x01500150
 800afbc:	01500150 	.word	0x01500150
 800afc0:	01500150 	.word	0x01500150
 800afc4:	02230150 	.word	0x02230150
 800afc8:	01500084 	.word	0x01500084
 800afcc:	01500150 	.word	0x01500150
 800afd0:	01500150 	.word	0x01500150
 800afd4:	01500150 	.word	0x01500150
 800afd8:	01500150 	.word	0x01500150
 800afdc:	00dd0150 	.word	0x00dd0150
 800afe0:	01500150 	.word	0x01500150
 800afe4:	02070150 	.word	0x02070150
 800afe8:	02590150 	.word	0x02590150
 800afec:	01500150 	.word	0x01500150
 800aff0:	01500519 	.word	0x01500519
 800aff4:	01500150 	.word	0x01500150
 800aff8:	01500150 	.word	0x01500150
 800affc:	01500150 	.word	0x01500150
 800b000:	01500150 	.word	0x01500150
 800b004:	02230150 	.word	0x02230150
 800b008:	01500086 	.word	0x01500086
 800b00c:	01500150 	.word	0x01500150
 800b010:	0086024f 	.word	0x0086024f
 800b014:	01500080 	.word	0x01500080
 800b018:	01500245 	.word	0x01500245
 800b01c:	00df0281 	.word	0x00df0281
 800b020:	0080026f 	.word	0x0080026f
 800b024:	02070150 	.word	0x02070150
 800b028:	0539007e 	.word	0x0539007e
 800b02c:	01500150 	.word	0x01500150
 800b030:	0150053b 	.word	0x0150053b
 800b034:	007e      	.short	0x007e
 800b036:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b03a:	2100      	movs	r1, #0
 800b03c:	f817 3b01 	ldrb.w	r3, [r7], #1
 800b040:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b044:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b048:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b04c:	2a09      	cmp	r2, #9
 800b04e:	d9f5      	bls.n	800b03c <_vfiprintf_r+0x17c>
 800b050:	9102      	str	r1, [sp, #8]
 800b052:	e78e      	b.n	800af72 <_vfiprintf_r+0xb2>
 800b054:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b058:	4640      	mov	r0, r8
 800b05a:	f7fe ffad 	bl	8009fb8 <_localeconv_r>
 800b05e:	6843      	ldr	r3, [r0, #4]
 800b060:	930a      	str	r3, [sp, #40]	; 0x28
 800b062:	4618      	mov	r0, r3
 800b064:	f7f7 f80c 	bl	8002080 <strlen>
 800b068:	900b      	str	r0, [sp, #44]	; 0x2c
 800b06a:	4606      	mov	r6, r0
 800b06c:	4640      	mov	r0, r8
 800b06e:	f7fe ffa3 	bl	8009fb8 <_localeconv_r>
 800b072:	6883      	ldr	r3, [r0, #8]
 800b074:	9309      	str	r3, [sp, #36]	; 0x24
 800b076:	2e00      	cmp	r6, #0
 800b078:	f040 8476 	bne.w	800b968 <_vfiprintf_r+0xaa8>
 800b07c:	783b      	ldrb	r3, [r7, #0]
 800b07e:	e777      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b080:	783b      	ldrb	r3, [r7, #0]
 800b082:	f045 0520 	orr.w	r5, r5, #32
 800b086:	e773      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b088:	f045 0510 	orr.w	r5, r5, #16
 800b08c:	06ac      	lsls	r4, r5, #26
 800b08e:	9e04      	ldr	r6, [sp, #16]
 800b090:	f140 816f 	bpl.w	800b372 <_vfiprintf_r+0x4b2>
 800b094:	3607      	adds	r6, #7
 800b096:	f026 0607 	bic.w	r6, r6, #7
 800b09a:	4632      	mov	r2, r6
 800b09c:	6873      	ldr	r3, [r6, #4]
 800b09e:	f852 6b08 	ldr.w	r6, [r2], #8
 800b0a2:	9204      	str	r2, [sp, #16]
 800b0a4:	4698      	mov	r8, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f2c0 8428 	blt.w	800b8fc <_vfiprintf_r+0xa3c>
 800b0ac:	f1bb 3fff 	cmp.w	fp, #4294967295
 800b0b0:	f000 850b 	beq.w	800baca <_vfiprintf_r+0xc0a>
 800b0b4:	ea56 0308 	orrs.w	r3, r6, r8
 800b0b8:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
 800b0bc:	f000 8403 	beq.w	800b8c6 <_vfiprintf_r+0xa06>
 800b0c0:	2e0a      	cmp	r6, #10
 800b0c2:	f178 0300 	sbcs.w	r3, r8, #0
 800b0c6:	f080 84b8 	bcs.w	800ba3a <_vfiprintf_r+0xb7a>
 800b0ca:	3630      	adds	r6, #48	; 0x30
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
 800b0d2:	4655      	mov	r5, sl
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 800b0da:	f8dd 8000 	ldr.w	r8, [sp]
 800b0de:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800b0e2:	45d8      	cmp	r8, fp
 800b0e4:	bfb8      	it	lt
 800b0e6:	46d8      	movlt	r8, fp
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 80a8 	beq.w	800b23e <_vfiprintf_r+0x37e>
 800b0ee:	f108 0801 	add.w	r8, r8, #1
 800b0f2:	e0a4      	b.n	800b23e <_vfiprintf_r+0x37e>
 800b0f4:	9d01      	ldr	r5, [sp, #4]
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	f7fd fa93 	bl	8008624 <__swsetup_r>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f040 8582 	bne.w	800bc08 <_vfiprintf_r+0xd48>
 800b104:	89aa      	ldrh	r2, [r5, #12]
 800b106:	f002 031a 	and.w	r3, r2, #26
 800b10a:	2b0a      	cmp	r3, #10
 800b10c:	f47f af05 	bne.w	800af1a <_vfiprintf_r+0x5a>
 800b110:	9901      	ldr	r1, [sp, #4]
 800b112:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800b116:	2b00      	cmp	r3, #0
 800b118:	f6ff aeff 	blt.w	800af1a <_vfiprintf_r+0x5a>
 800b11c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b11e:	07de      	lsls	r6, r3, #31
 800b120:	d402      	bmi.n	800b128 <_vfiprintf_r+0x268>
 800b122:	0595      	lsls	r5, r2, #22
 800b124:	f140 8550 	bpl.w	800bbc8 <_vfiprintf_r+0xd08>
 800b128:	9901      	ldr	r1, [sp, #4]
 800b12a:	9805      	ldr	r0, [sp, #20]
 800b12c:	4623      	mov	r3, r4
 800b12e:	463a      	mov	r2, r7
 800b130:	b03d      	add	sp, #244	; 0xf4
 800b132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b136:	f000 bd8d 	b.w	800bc54 <__sbprintf>
 800b13a:	f045 0510 	orr.w	r5, r5, #16
 800b13e:	f015 0820 	ands.w	r8, r5, #32
 800b142:	f000 8107 	beq.w	800b354 <_vfiprintf_r+0x494>
 800b146:	9e04      	ldr	r6, [sp, #16]
 800b148:	3607      	adds	r6, #7
 800b14a:	f026 0607 	bic.w	r6, r6, #7
 800b14e:	4633      	mov	r3, r6
 800b150:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800b154:	f853 6b08 	ldr.w	r6, [r3], #8
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 800b15e:	2300      	movs	r3, #0
 800b160:	f04f 0200 	mov.w	r2, #0
 800b164:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800b168:	f1bb 3fff 	cmp.w	fp, #4294967295
 800b16c:	f000 81c8 	beq.w	800b500 <_vfiprintf_r+0x640>
 800b170:	ea56 0208 	orrs.w	r2, r6, r8
 800b174:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
 800b178:	f040 81c1 	bne.w	800b4fe <_vfiprintf_r+0x63e>
 800b17c:	f1bb 0f00 	cmp.w	fp, #0
 800b180:	f040 84a6 	bne.w	800bad0 <_vfiprintf_r+0xc10>
 800b184:	2b00      	cmp	r3, #0
 800b186:	f040 83a3 	bne.w	800b8d0 <_vfiprintf_r+0xa10>
 800b18a:	f01a 0301 	ands.w	r3, sl, #1
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	f000 83d1 	beq.w	800b936 <_vfiprintf_r+0xa76>
 800b194:	2330      	movs	r3, #48	; 0x30
 800b196:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 800b19a:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 800b19e:	e79c      	b.n	800b0da <_vfiprintf_r+0x21a>
 800b1a0:	1be5      	subs	r5, r4, r7
 800b1a2:	d01b      	beq.n	800b1dc <_vfiprintf_r+0x31c>
 800b1a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	442a      	add	r2, r5
 800b1ac:	2b07      	cmp	r3, #7
 800b1ae:	e9c9 7500 	strd	r7, r5, [r9]
 800b1b2:	9212      	str	r2, [sp, #72]	; 0x48
 800b1b4:	9311      	str	r3, [sp, #68]	; 0x44
 800b1b6:	dc05      	bgt.n	800b1c4 <_vfiprintf_r+0x304>
 800b1b8:	f109 0908 	add.w	r9, r9, #8
 800b1bc:	9b03      	ldr	r3, [sp, #12]
 800b1be:	442b      	add	r3, r5
 800b1c0:	9303      	str	r3, [sp, #12]
 800b1c2:	e6c6      	b.n	800af52 <_vfiprintf_r+0x92>
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	f000 837a 	beq.w	800b8be <_vfiprintf_r+0x9fe>
 800b1ca:	9901      	ldr	r1, [sp, #4]
 800b1cc:	9805      	ldr	r0, [sp, #20]
 800b1ce:	aa10      	add	r2, sp, #64	; 0x40
 800b1d0:	f7ff fe30 	bl	800ae34 <__sprint_r.part.0>
 800b1d4:	b940      	cbnz	r0, 800b1e8 <_vfiprintf_r+0x328>
 800b1d6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b1da:	e7ef      	b.n	800b1bc <_vfiprintf_r+0x2fc>
 800b1dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 8503 	bne.w	800bbea <_vfiprintf_r+0xd2a>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9311      	str	r3, [sp, #68]	; 0x44
 800b1e8:	9a01      	ldr	r2, [sp, #4]
 800b1ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800b1ec:	07d9      	lsls	r1, r3, #31
 800b1ee:	f140 80a6 	bpl.w	800b33e <_vfiprintf_r+0x47e>
 800b1f2:	8993      	ldrh	r3, [r2, #12]
 800b1f4:	065b      	lsls	r3, r3, #25
 800b1f6:	f100 8513 	bmi.w	800bc20 <_vfiprintf_r+0xd60>
 800b1fa:	9803      	ldr	r0, [sp, #12]
 800b1fc:	b03d      	add	sp, #244	; 0xf4
 800b1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b208:	058d      	lsls	r5, r1, #22
 800b20a:	b28a      	uxth	r2, r1
 800b20c:	f53f ae6d 	bmi.w	800aeea <_vfiprintf_r+0x2a>
 800b210:	461d      	mov	r5, r3
 800b212:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800b214:	f7fe fed8 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 800b218:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 800b21c:	b28a      	uxth	r2, r1
 800b21e:	e664      	b.n	800aeea <_vfiprintf_r+0x2a>
 800b220:	2b00      	cmp	r3, #0
 800b222:	d0db      	beq.n	800b1dc <_vfiprintf_r+0x31c>
 800b224:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800b228:	f04f 0801 	mov.w	r8, #1
 800b22c:	f04f 0300 	mov.w	r3, #0
 800b230:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b234:	f8cd 8000 	str.w	r8, [sp]
 800b238:	ac23      	add	r4, sp, #140	; 0x8c
 800b23a:	f04f 0b00 	mov.w	fp, #0
 800b23e:	f015 0302 	ands.w	r3, r5, #2
 800b242:	9306      	str	r3, [sp, #24]
 800b244:	bf18      	it	ne
 800b246:	f108 0802 	addne.w	r8, r8, #2
 800b24a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	d105      	bne.n	800b25e <_vfiprintf_r+0x39e>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	eba3 0608 	sub.w	r6, r3, r8
 800b258:	2e00      	cmp	r6, #0
 800b25a:	f300 8269 	bgt.w	800b730 <_vfiprintf_r+0x870>
 800b25e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b262:	1c50      	adds	r0, r2, #1
 800b264:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
 800b268:	b18e      	cbz	r6, 800b28e <_vfiprintf_r+0x3ce>
 800b26a:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 800b26e:	3101      	adds	r1, #1
 800b270:	f8c9 2000 	str.w	r2, [r9]
 800b274:	2807      	cmp	r0, #7
 800b276:	f04f 0201 	mov.w	r2, #1
 800b27a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b27e:	f8c9 2004 	str.w	r2, [r9, #4]
 800b282:	f300 8238 	bgt.w	800b6f6 <_vfiprintf_r+0x836>
 800b286:	4602      	mov	r2, r0
 800b288:	f109 0908 	add.w	r9, r9, #8
 800b28c:	3001      	adds	r0, #1
 800b28e:	9b06      	ldr	r3, [sp, #24]
 800b290:	b1db      	cbz	r3, 800b2ca <_vfiprintf_r+0x40a>
 800b292:	ab0f      	add	r3, sp, #60	; 0x3c
 800b294:	3102      	adds	r1, #2
 800b296:	f8c9 3000 	str.w	r3, [r9]
 800b29a:	2807      	cmp	r0, #7
 800b29c:	f04f 0302 	mov.w	r3, #2
 800b2a0:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b2a4:	f8c9 3004 	str.w	r3, [r9, #4]
 800b2a8:	f340 823d 	ble.w	800b726 <_vfiprintf_r+0x866>
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	f000 8301 	beq.w	800b8b4 <_vfiprintf_r+0x9f4>
 800b2b2:	9901      	ldr	r1, [sp, #4]
 800b2b4:	9805      	ldr	r0, [sp, #20]
 800b2b6:	aa10      	add	r2, sp, #64	; 0x40
 800b2b8:	f7ff fdbc 	bl	800ae34 <__sprint_r.part.0>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d193      	bne.n	800b1e8 <_vfiprintf_r+0x328>
 800b2c0:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b2c4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b2c8:	1c50      	adds	r0, r2, #1
 800b2ca:	9b07      	ldr	r3, [sp, #28]
 800b2cc:	2b80      	cmp	r3, #128	; 0x80
 800b2ce:	f000 8158 	beq.w	800b582 <_vfiprintf_r+0x6c2>
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	ebab 0603 	sub.w	r6, fp, r3
 800b2d8:	2e00      	cmp	r6, #0
 800b2da:	f300 81b3 	bgt.w	800b644 <_vfiprintf_r+0x784>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	f8c9 4000 	str.w	r4, [r9]
 800b2e4:	4419      	add	r1, r3
 800b2e6:	2807      	cmp	r0, #7
 800b2e8:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b2ec:	f8c9 3004 	str.w	r3, [r9, #4]
 800b2f0:	f340 8144 	ble.w	800b57c <_vfiprintf_r+0x6bc>
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	f000 826d 	beq.w	800b7d4 <_vfiprintf_r+0x914>
 800b2fa:	9901      	ldr	r1, [sp, #4]
 800b2fc:	9805      	ldr	r0, [sp, #20]
 800b2fe:	aa10      	add	r2, sp, #64	; 0x40
 800b300:	f7ff fd98 	bl	800ae34 <__sprint_r.part.0>
 800b304:	2800      	cmp	r0, #0
 800b306:	f47f af6f 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b30a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b30c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b310:	0768      	lsls	r0, r5, #29
 800b312:	d505      	bpl.n	800b320 <_vfiprintf_r+0x460>
 800b314:	9b02      	ldr	r3, [sp, #8]
 800b316:	eba3 0408 	sub.w	r4, r3, r8
 800b31a:	2c00      	cmp	r4, #0
 800b31c:	f300 8264 	bgt.w	800b7e8 <_vfiprintf_r+0x928>
 800b320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b324:	4542      	cmp	r2, r8
 800b326:	bfac      	ite	ge
 800b328:	189b      	addge	r3, r3, r2
 800b32a:	4443      	addlt	r3, r8
 800b32c:	9303      	str	r3, [sp, #12]
 800b32e:	2900      	cmp	r1, #0
 800b330:	f040 81d2 	bne.w	800b6d8 <_vfiprintf_r+0x818>
 800b334:	2300      	movs	r3, #0
 800b336:	9311      	str	r3, [sp, #68]	; 0x44
 800b338:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b33c:	e5f9      	b.n	800af32 <_vfiprintf_r+0x72>
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	899b      	ldrh	r3, [r3, #12]
 800b342:	059a      	lsls	r2, r3, #22
 800b344:	f53f af56 	bmi.w	800b1f4 <_vfiprintf_r+0x334>
 800b348:	9c01      	ldr	r4, [sp, #4]
 800b34a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b34c:	f7fe fe3e 	bl	8009fcc <__retarget_lock_release_recursive>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	e74f      	b.n	800b1f4 <_vfiprintf_r+0x334>
 800b354:	f015 0310 	ands.w	r3, r5, #16
 800b358:	f040 831e 	bne.w	800b998 <_vfiprintf_r+0xad8>
 800b35c:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 800b360:	f000 83e5 	beq.w	800bb2e <_vfiprintf_r+0xc6e>
 800b364:	9a04      	ldr	r2, [sp, #16]
 800b366:	f852 6b04 	ldr.w	r6, [r2], #4
 800b36a:	9204      	str	r2, [sp, #16]
 800b36c:	4698      	mov	r8, r3
 800b36e:	b2b6      	uxth	r6, r6
 800b370:	e6f3      	b.n	800b15a <_vfiprintf_r+0x29a>
 800b372:	f856 3b04 	ldr.w	r3, [r6], #4
 800b376:	9604      	str	r6, [sp, #16]
 800b378:	06e8      	lsls	r0, r5, #27
 800b37a:	f100 82e8 	bmi.w	800b94e <_vfiprintf_r+0xa8e>
 800b37e:	0669      	lsls	r1, r5, #25
 800b380:	f140 82e2 	bpl.w	800b948 <_vfiprintf_r+0xa88>
 800b384:	f343 38c0 	sbfx	r8, r3, #15, #1
 800b388:	b21e      	sxth	r6, r3
 800b38a:	4643      	mov	r3, r8
 800b38c:	e68b      	b.n	800b0a6 <_vfiprintf_r+0x1e6>
 800b38e:	9e04      	ldr	r6, [sp, #16]
 800b390:	f856 4b04 	ldr.w	r4, [r6], #4
 800b394:	f04f 0300 	mov.w	r3, #0
 800b398:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b39c:	2c00      	cmp	r4, #0
 800b39e:	f000 83ab 	beq.w	800baf8 <_vfiprintf_r+0xc38>
 800b3a2:	f1bb 3fff 	cmp.w	fp, #4294967295
 800b3a6:	f000 8329 	beq.w	800b9fc <_vfiprintf_r+0xb3c>
 800b3aa:	465a      	mov	r2, fp
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7f6 fed6 	bl	8002160 <memchr>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f000 840c 	beq.w	800bbd2 <_vfiprintf_r+0xd12>
 800b3ba:	1b03      	subs	r3, r0, r4
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	9604      	str	r6, [sp, #16]
 800b3c0:	f04f 0b00 	mov.w	fp, #0
 800b3c4:	e689      	b.n	800b0da <_vfiprintf_r+0x21a>
 800b3c6:	9e04      	ldr	r6, [sp, #16]
 800b3c8:	f04f 0300 	mov.w	r3, #0
 800b3cc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b3d0:	f04f 0801 	mov.w	r8, #1
 800b3d4:	f856 3b04 	ldr.w	r3, [r6], #4
 800b3d8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800b3dc:	9604      	str	r6, [sp, #16]
 800b3de:	f8cd 8000 	str.w	r8, [sp]
 800b3e2:	ac23      	add	r4, sp, #140	; 0x8c
 800b3e4:	e729      	b.n	800b23a <_vfiprintf_r+0x37a>
 800b3e6:	f7fe fa51 	bl	800988c <__sinit>
 800b3ea:	e576      	b.n	800aeda <_vfiprintf_r+0x1a>
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f2:	9202      	str	r2, [sp, #8]
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	f280 829a 	bge.w	800b92e <_vfiprintf_r+0xa6e>
 800b3fa:	9a02      	ldr	r2, [sp, #8]
 800b3fc:	9304      	str	r3, [sp, #16]
 800b3fe:	4252      	negs	r2, r2
 800b400:	9202      	str	r2, [sp, #8]
 800b402:	783b      	ldrb	r3, [r7, #0]
 800b404:	f045 0504 	orr.w	r5, r5, #4
 800b408:	e5b2      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b40a:	783b      	ldrb	r3, [r7, #0]
 800b40c:	2b6c      	cmp	r3, #108	; 0x6c
 800b40e:	bf03      	ittte	eq
 800b410:	787b      	ldrbeq	r3, [r7, #1]
 800b412:	f045 0520 	orreq.w	r5, r5, #32
 800b416:	3701      	addeq	r7, #1
 800b418:	f045 0510 	orrne.w	r5, r5, #16
 800b41c:	e5a8      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b41e:	783b      	ldrb	r3, [r7, #0]
 800b420:	2b68      	cmp	r3, #104	; 0x68
 800b422:	bf03      	ittte	eq
 800b424:	787b      	ldrbeq	r3, [r7, #1]
 800b426:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 800b42a:	3701      	addeq	r7, #1
 800b42c:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 800b430:	e59e      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b432:	f045 0a10 	orr.w	sl, r5, #16
 800b436:	f01a 0820 	ands.w	r8, sl, #32
 800b43a:	f000 8250 	beq.w	800b8de <_vfiprintf_r+0xa1e>
 800b43e:	9e04      	ldr	r6, [sp, #16]
 800b440:	3607      	adds	r6, #7
 800b442:	f026 0607 	bic.w	r6, r6, #7
 800b446:	4633      	mov	r3, r6
 800b448:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800b44c:	f853 6b08 	ldr.w	r6, [r3], #8
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	2301      	movs	r3, #1
 800b454:	e684      	b.n	800b160 <_vfiprintf_r+0x2a0>
 800b456:	783b      	ldrb	r3, [r7, #0]
 800b458:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 800b45c:	e588      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	f853 6b04 	ldr.w	r6, [r3], #4
 800b464:	9304      	str	r3, [sp, #16]
 800b466:	2330      	movs	r3, #48	; 0x30
 800b468:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800b46c:	2378      	movs	r3, #120	; 0x78
 800b46e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800b472:	4bb7      	ldr	r3, [pc, #732]	; (800b750 <_vfiprintf_r+0x890>)
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	f045 0a02 	orr.w	sl, r5, #2
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	2302      	movs	r3, #2
 800b480:	e66e      	b.n	800b160 <_vfiprintf_r+0x2a0>
 800b482:	06ae      	lsls	r6, r5, #26
 800b484:	f100 827e 	bmi.w	800b984 <_vfiprintf_r+0xac4>
 800b488:	06ec      	lsls	r4, r5, #27
 800b48a:	f100 832d 	bmi.w	800bae8 <_vfiprintf_r+0xc28>
 800b48e:	0668      	lsls	r0, r5, #25
 800b490:	f100 838c 	bmi.w	800bbac <_vfiprintf_r+0xcec>
 800b494:	05a9      	lsls	r1, r5, #22
 800b496:	f140 8327 	bpl.w	800bae8 <_vfiprintf_r+0xc28>
 800b49a:	9e04      	ldr	r6, [sp, #16]
 800b49c:	9a03      	ldr	r2, [sp, #12]
 800b49e:	f856 3b04 	ldr.w	r3, [r6], #4
 800b4a2:	9604      	str	r6, [sp, #16]
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	e544      	b.n	800af32 <_vfiprintf_r+0x72>
 800b4a8:	783b      	ldrb	r3, [r7, #0]
 800b4aa:	f045 0501 	orr.w	r5, r5, #1
 800b4ae:	e55f      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b4b0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f47f ade1 	bne.w	800b07c <_vfiprintf_r+0x1bc>
 800b4ba:	2320      	movs	r3, #32
 800b4bc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b4c0:	783b      	ldrb	r3, [r7, #0]
 800b4c2:	e555      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b4c4:	783b      	ldrb	r3, [r7, #0]
 800b4c6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800b4ca:	e551      	b.n	800af70 <_vfiprintf_r+0xb0>
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d4:	f000 83ad 	beq.w	800bc32 <_vfiprintf_r+0xd72>
 800b4d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b4dc:	2a09      	cmp	r2, #9
 800b4de:	460f      	mov	r7, r1
 800b4e0:	f04f 0b00 	mov.w	fp, #0
 800b4e4:	f63f ad45 	bhi.w	800af72 <_vfiprintf_r+0xb2>
 800b4e8:	f817 3b01 	ldrb.w	r3, [r7], #1
 800b4ec:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800b4f0:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800b4f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b4f8:	2a09      	cmp	r2, #9
 800b4fa:	d9f5      	bls.n	800b4e8 <_vfiprintf_r+0x628>
 800b4fc:	e539      	b.n	800af72 <_vfiprintf_r+0xb2>
 800b4fe:	46aa      	mov	sl, r5
 800b500:	2b01      	cmp	r3, #1
 800b502:	f43f addd 	beq.w	800b0c0 <_vfiprintf_r+0x200>
 800b506:	2b02      	cmp	r3, #2
 800b508:	ac3c      	add	r4, sp, #240	; 0xf0
 800b50a:	d112      	bne.n	800b532 <_vfiprintf_r+0x672>
 800b50c:	9a08      	ldr	r2, [sp, #32]
 800b50e:	f006 030f 	and.w	r3, r6, #15
 800b512:	0936      	lsrs	r6, r6, #4
 800b514:	5cd3      	ldrb	r3, [r2, r3]
 800b516:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800b51a:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
 800b51e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800b522:	ea56 0308 	orrs.w	r3, r6, r8
 800b526:	d1f2      	bne.n	800b50e <_vfiprintf_r+0x64e>
 800b528:	ab3c      	add	r3, sp, #240	; 0xf0
 800b52a:	1b1b      	subs	r3, r3, r4
 800b52c:	4655      	mov	r5, sl
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	e5d3      	b.n	800b0da <_vfiprintf_r+0x21a>
 800b532:	f006 0307 	and.w	r3, r6, #7
 800b536:	08f6      	lsrs	r6, r6, #3
 800b538:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
 800b53c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800b540:	3330      	adds	r3, #48	; 0x30
 800b542:	ea56 0108 	orrs.w	r1, r6, r8
 800b546:	4622      	mov	r2, r4
 800b548:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800b54c:	d1f1      	bne.n	800b532 <_vfiprintf_r+0x672>
 800b54e:	f01a 0f01 	tst.w	sl, #1
 800b552:	d0e9      	beq.n	800b528 <_vfiprintf_r+0x668>
 800b554:	2b30      	cmp	r3, #48	; 0x30
 800b556:	d0e7      	beq.n	800b528 <_vfiprintf_r+0x668>
 800b558:	2330      	movs	r3, #48	; 0x30
 800b55a:	3a02      	subs	r2, #2
 800b55c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b560:	ab3c      	add	r3, sp, #240	; 0xf0
 800b562:	1a9b      	subs	r3, r3, r2
 800b564:	4655      	mov	r5, sl
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	4614      	mov	r4, r2
 800b56a:	e5b6      	b.n	800b0da <_vfiprintf_r+0x21a>
 800b56c:	9900      	ldr	r1, [sp, #0]
 800b56e:	9413      	str	r4, [sp, #76]	; 0x4c
 800b570:	2301      	movs	r3, #1
 800b572:	9114      	str	r1, [sp, #80]	; 0x50
 800b574:	9112      	str	r1, [sp, #72]	; 0x48
 800b576:	9311      	str	r3, [sp, #68]	; 0x44
 800b578:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b57c:	f109 0908 	add.w	r9, r9, #8
 800b580:	e6c6      	b.n	800b310 <_vfiprintf_r+0x450>
 800b582:	9b02      	ldr	r3, [sp, #8]
 800b584:	eba3 0608 	sub.w	r6, r3, r8
 800b588:	2e00      	cmp	r6, #0
 800b58a:	f77f aea2 	ble.w	800b2d2 <_vfiprintf_r+0x412>
 800b58e:	2e10      	cmp	r6, #16
 800b590:	f340 834b 	ble.w	800bc2a <_vfiprintf_r+0xd6a>
 800b594:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800b754 <_vfiprintf_r+0x894>
 800b598:	4653      	mov	r3, sl
 800b59a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b59e:	46ba      	mov	sl, r7
 800b5a0:	9c05      	ldr	r4, [sp, #20]
 800b5a2:	9d01      	ldr	r5, [sp, #4]
 800b5a4:	461f      	mov	r7, r3
 800b5a6:	e007      	b.n	800b5b8 <_vfiprintf_r+0x6f8>
 800b5a8:	f102 0c02 	add.w	ip, r2, #2
 800b5ac:	f109 0908 	add.w	r9, r9, #8
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	3e10      	subs	r6, #16
 800b5b4:	2e10      	cmp	r6, #16
 800b5b6:	dd1e      	ble.n	800b5f6 <_vfiprintf_r+0x736>
 800b5b8:	1c50      	adds	r0, r2, #1
 800b5ba:	3110      	adds	r1, #16
 800b5bc:	2310      	movs	r3, #16
 800b5be:	2807      	cmp	r0, #7
 800b5c0:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b5c4:	f8c9 7000 	str.w	r7, [r9]
 800b5c8:	f8c9 3004 	str.w	r3, [r9, #4]
 800b5cc:	ddec      	ble.n	800b5a8 <_vfiprintf_r+0x6e8>
 800b5ce:	aa10      	add	r2, sp, #64	; 0x40
 800b5d0:	2900      	cmp	r1, #0
 800b5d2:	f000 808a 	beq.w	800b6ea <_vfiprintf_r+0x82a>
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b5de:	f7ff fc29 	bl	800ae34 <__sprint_r.part.0>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	f47f ae00 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b5e8:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b5ec:	3e10      	subs	r6, #16
 800b5ee:	2e10      	cmp	r6, #16
 800b5f0:	f102 0c01 	add.w	ip, r2, #1
 800b5f4:	dce0      	bgt.n	800b5b8 <_vfiprintf_r+0x6f8>
 800b5f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	4657      	mov	r7, sl
 800b5fe:	469a      	mov	sl, r3
 800b600:	4431      	add	r1, r6
 800b602:	f1bc 0f07 	cmp.w	ip, #7
 800b606:	e9cd c111 	strd	ip, r1, [sp, #68]	; 0x44
 800b60a:	f8c9 a000 	str.w	sl, [r9]
 800b60e:	f8c9 6004 	str.w	r6, [r9, #4]
 800b612:	f340 8193 	ble.w	800b93c <_vfiprintf_r+0xa7c>
 800b616:	2900      	cmp	r1, #0
 800b618:	f000 82b8 	beq.w	800bb8c <_vfiprintf_r+0xccc>
 800b61c:	9901      	ldr	r1, [sp, #4]
 800b61e:	9805      	ldr	r0, [sp, #20]
 800b620:	aa10      	add	r2, sp, #64	; 0x40
 800b622:	f7ff fc07 	bl	800ae34 <__sprint_r.part.0>
 800b626:	2800      	cmp	r0, #0
 800b628:	f47f adde 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b632:	ebab 0603 	sub.w	r6, fp, r3
 800b636:	2e00      	cmp	r6, #0
 800b638:	f102 0001 	add.w	r0, r2, #1
 800b63c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b640:	f77f ae4d 	ble.w	800b2de <_vfiprintf_r+0x41e>
 800b644:	2e10      	cmp	r6, #16
 800b646:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800b754 <_vfiprintf_r+0x894>
 800b64a:	dd31      	ble.n	800b6b0 <_vfiprintf_r+0x7f0>
 800b64c:	4653      	mov	r3, sl
 800b64e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b652:	46ba      	mov	sl, r7
 800b654:	9c05      	ldr	r4, [sp, #20]
 800b656:	9d01      	ldr	r5, [sp, #4]
 800b658:	f04f 0b10 	mov.w	fp, #16
 800b65c:	461f      	mov	r7, r3
 800b65e:	e007      	b.n	800b670 <_vfiprintf_r+0x7b0>
 800b660:	f102 0c02 	add.w	ip, r2, #2
 800b664:	f109 0908 	add.w	r9, r9, #8
 800b668:	4602      	mov	r2, r0
 800b66a:	3e10      	subs	r6, #16
 800b66c:	2e10      	cmp	r6, #16
 800b66e:	dd19      	ble.n	800b6a4 <_vfiprintf_r+0x7e4>
 800b670:	1c50      	adds	r0, r2, #1
 800b672:	3110      	adds	r1, #16
 800b674:	2807      	cmp	r0, #7
 800b676:	e9c9 7b00 	strd	r7, fp, [r9]
 800b67a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b67e:	ddef      	ble.n	800b660 <_vfiprintf_r+0x7a0>
 800b680:	aa10      	add	r2, sp, #64	; 0x40
 800b682:	b319      	cbz	r1, 800b6cc <_vfiprintf_r+0x80c>
 800b684:	4629      	mov	r1, r5
 800b686:	4620      	mov	r0, r4
 800b688:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b68c:	f7ff fbd2 	bl	800ae34 <__sprint_r.part.0>
 800b690:	2800      	cmp	r0, #0
 800b692:	f47f ada9 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b696:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b69a:	3e10      	subs	r6, #16
 800b69c:	2e10      	cmp	r6, #16
 800b69e:	f102 0c01 	add.w	ip, r2, #1
 800b6a2:	dce5      	bgt.n	800b670 <_vfiprintf_r+0x7b0>
 800b6a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b6a8:	463b      	mov	r3, r7
 800b6aa:	4660      	mov	r0, ip
 800b6ac:	4657      	mov	r7, sl
 800b6ae:	469a      	mov	sl, r3
 800b6b0:	4431      	add	r1, r6
 800b6b2:	2807      	cmp	r0, #7
 800b6b4:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b6b8:	f8c9 a000 	str.w	sl, [r9]
 800b6bc:	f8c9 6004 	str.w	r6, [r9, #4]
 800b6c0:	f300 80e4 	bgt.w	800b88c <_vfiprintf_r+0x9cc>
 800b6c4:	f109 0908 	add.w	r9, r9, #8
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	e608      	b.n	800b2de <_vfiprintf_r+0x41e>
 800b6cc:	f04f 0c01 	mov.w	ip, #1
 800b6d0:	460a      	mov	r2, r1
 800b6d2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b6d6:	e7c8      	b.n	800b66a <_vfiprintf_r+0x7aa>
 800b6d8:	9901      	ldr	r1, [sp, #4]
 800b6da:	9805      	ldr	r0, [sp, #20]
 800b6dc:	aa10      	add	r2, sp, #64	; 0x40
 800b6de:	f7ff fba9 	bl	800ae34 <__sprint_r.part.0>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	f43f ae26 	beq.w	800b334 <_vfiprintf_r+0x474>
 800b6e8:	e57e      	b.n	800b1e8 <_vfiprintf_r+0x328>
 800b6ea:	f04f 0c01 	mov.w	ip, #1
 800b6ee:	460a      	mov	r2, r1
 800b6f0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b6f4:	e75d      	b.n	800b5b2 <_vfiprintf_r+0x6f2>
 800b6f6:	2900      	cmp	r1, #0
 800b6f8:	f000 80d9 	beq.w	800b8ae <_vfiprintf_r+0x9ee>
 800b6fc:	9901      	ldr	r1, [sp, #4]
 800b6fe:	9805      	ldr	r0, [sp, #20]
 800b700:	aa10      	add	r2, sp, #64	; 0x40
 800b702:	f7ff fb97 	bl	800ae34 <__sprint_r.part.0>
 800b706:	2800      	cmp	r0, #0
 800b708:	f47f ad6e 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b70c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b710:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b714:	1c50      	adds	r0, r2, #1
 800b716:	e5ba      	b.n	800b28e <_vfiprintf_r+0x3ce>
 800b718:	2102      	movs	r1, #2
 800b71a:	ab0f      	add	r3, sp, #60	; 0x3c
 800b71c:	9114      	str	r1, [sp, #80]	; 0x50
 800b71e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b720:	2001      	movs	r0, #1
 800b722:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b726:	4602      	mov	r2, r0
 800b728:	f109 0908 	add.w	r9, r9, #8
 800b72c:	1c50      	adds	r0, r2, #1
 800b72e:	e5cc      	b.n	800b2ca <_vfiprintf_r+0x40a>
 800b730:	2e10      	cmp	r6, #16
 800b732:	f340 8254 	ble.w	800bbde <_vfiprintf_r+0xd1e>
 800b736:	e9dd c111 	ldrd	ip, r1, [sp, #68]	; 0x44
 800b73a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 800b758 <_vfiprintf_r+0x898>
 800b73e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800b742:	2310      	movs	r3, #16
 800b744:	4654      	mov	r4, sl
 800b746:	9d05      	ldr	r5, [sp, #20]
 800b748:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b74c:	4662      	mov	r2, ip
 800b74e:	e00d      	b.n	800b76c <_vfiprintf_r+0x8ac>
 800b750:	0800d614 	.word	0x0800d614
 800b754:	0800d89c 	.word	0x0800d89c
 800b758:	0800d88c 	.word	0x0800d88c
 800b75c:	f102 0c02 	add.w	ip, r2, #2
 800b760:	f109 0908 	add.w	r9, r9, #8
 800b764:	4602      	mov	r2, r0
 800b766:	3e10      	subs	r6, #16
 800b768:	2e10      	cmp	r6, #16
 800b76a:	dd1b      	ble.n	800b7a4 <_vfiprintf_r+0x8e4>
 800b76c:	1c50      	adds	r0, r2, #1
 800b76e:	3110      	adds	r1, #16
 800b770:	2807      	cmp	r0, #7
 800b772:	e9c9 4300 	strd	r4, r3, [r9]
 800b776:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b77a:	ddef      	ble.n	800b75c <_vfiprintf_r+0x89c>
 800b77c:	aa10      	add	r2, sp, #64	; 0x40
 800b77e:	b319      	cbz	r1, 800b7c8 <_vfiprintf_r+0x908>
 800b780:	4651      	mov	r1, sl
 800b782:	4628      	mov	r0, r5
 800b784:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b788:	f7ff fb54 	bl	800ae34 <__sprint_r.part.0>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f47f ad2b 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b792:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b796:	3e10      	subs	r6, #16
 800b798:	2e10      	cmp	r6, #16
 800b79a:	f102 0c01 	add.w	ip, r2, #1
 800b79e:	f04f 0310 	mov.w	r3, #16
 800b7a2:	dce3      	bgt.n	800b76c <_vfiprintf_r+0x8ac>
 800b7a4:	46a2      	mov	sl, r4
 800b7a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b7a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b7aa:	4662      	mov	r2, ip
 800b7ac:	4431      	add	r1, r6
 800b7ae:	2a07      	cmp	r2, #7
 800b7b0:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 800b7b4:	f8c9 a000 	str.w	sl, [r9]
 800b7b8:	f8c9 6004 	str.w	r6, [r9, #4]
 800b7bc:	f300 80a7 	bgt.w	800b90e <_vfiprintf_r+0xa4e>
 800b7c0:	f109 0908 	add.w	r9, r9, #8
 800b7c4:	1c50      	adds	r0, r2, #1
 800b7c6:	e54d      	b.n	800b264 <_vfiprintf_r+0x3a4>
 800b7c8:	460a      	mov	r2, r1
 800b7ca:	f04f 0c01 	mov.w	ip, #1
 800b7ce:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b7d2:	e7c8      	b.n	800b766 <_vfiprintf_r+0x8a6>
 800b7d4:	076c      	lsls	r4, r5, #29
 800b7d6:	9111      	str	r1, [sp, #68]	; 0x44
 800b7d8:	d550      	bpl.n	800b87c <_vfiprintf_r+0x9bc>
 800b7da:	9b02      	ldr	r3, [sp, #8]
 800b7dc:	eba3 0408 	sub.w	r4, r3, r8
 800b7e0:	2c00      	cmp	r4, #0
 800b7e2:	dd4b      	ble.n	800b87c <_vfiprintf_r+0x9bc>
 800b7e4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b7e8:	2c10      	cmp	r4, #16
 800b7ea:	f340 8208 	ble.w	800bbfe <_vfiprintf_r+0xd3e>
 800b7ee:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 800badc <_vfiprintf_r+0xc1c>
 800b7f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b7f4:	9e05      	ldr	r6, [sp, #20]
 800b7f6:	f8dd b004 	ldr.w	fp, [sp, #4]
 800b7fa:	4653      	mov	r3, sl
 800b7fc:	2510      	movs	r5, #16
 800b7fe:	46ba      	mov	sl, r7
 800b800:	461f      	mov	r7, r3
 800b802:	e006      	b.n	800b812 <_vfiprintf_r+0x952>
 800b804:	1c90      	adds	r0, r2, #2
 800b806:	f109 0908 	add.w	r9, r9, #8
 800b80a:	461a      	mov	r2, r3
 800b80c:	3c10      	subs	r4, #16
 800b80e:	2c10      	cmp	r4, #16
 800b810:	dd19      	ble.n	800b846 <_vfiprintf_r+0x986>
 800b812:	1c53      	adds	r3, r2, #1
 800b814:	3110      	adds	r1, #16
 800b816:	2b07      	cmp	r3, #7
 800b818:	e9c9 7500 	strd	r7, r5, [r9]
 800b81c:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
 800b820:	ddf0      	ble.n	800b804 <_vfiprintf_r+0x944>
 800b822:	aa10      	add	r2, sp, #64	; 0x40
 800b824:	b329      	cbz	r1, 800b872 <_vfiprintf_r+0x9b2>
 800b826:	4659      	mov	r1, fp
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff fb03 	bl	800ae34 <__sprint_r.part.0>
 800b82e:	2800      	cmp	r0, #0
 800b830:	f47f acda 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b834:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b838:	3c10      	subs	r4, #16
 800b83a:	2c10      	cmp	r4, #16
 800b83c:	f102 0001 	add.w	r0, r2, #1
 800b840:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b844:	dce5      	bgt.n	800b812 <_vfiprintf_r+0x952>
 800b846:	463b      	mov	r3, r7
 800b848:	4657      	mov	r7, sl
 800b84a:	469a      	mov	sl, r3
 800b84c:	4421      	add	r1, r4
 800b84e:	2807      	cmp	r0, #7
 800b850:	e9c9 a400 	strd	sl, r4, [r9]
 800b854:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800b858:	f77f ad62 	ble.w	800b320 <_vfiprintf_r+0x460>
 800b85c:	b171      	cbz	r1, 800b87c <_vfiprintf_r+0x9bc>
 800b85e:	9901      	ldr	r1, [sp, #4]
 800b860:	9805      	ldr	r0, [sp, #20]
 800b862:	aa10      	add	r2, sp, #64	; 0x40
 800b864:	f7ff fae6 	bl	800ae34 <__sprint_r.part.0>
 800b868:	2800      	cmp	r0, #0
 800b86a:	f47f acbd 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b86e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b870:	e556      	b.n	800b320 <_vfiprintf_r+0x460>
 800b872:	2001      	movs	r0, #1
 800b874:	460a      	mov	r2, r1
 800b876:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b87a:	e7c7      	b.n	800b80c <_vfiprintf_r+0x94c>
 800b87c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b880:	4542      	cmp	r2, r8
 800b882:	bfac      	ite	ge
 800b884:	189b      	addge	r3, r3, r2
 800b886:	4443      	addlt	r3, r8
 800b888:	9303      	str	r3, [sp, #12]
 800b88a:	e553      	b.n	800b334 <_vfiprintf_r+0x474>
 800b88c:	2900      	cmp	r1, #0
 800b88e:	f43f ae6d 	beq.w	800b56c <_vfiprintf_r+0x6ac>
 800b892:	9901      	ldr	r1, [sp, #4]
 800b894:	9805      	ldr	r0, [sp, #20]
 800b896:	aa10      	add	r2, sp, #64	; 0x40
 800b898:	f7ff facc 	bl	800ae34 <__sprint_r.part.0>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	f47f aca3 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b8a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b8a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b8ac:	e517      	b.n	800b2de <_vfiprintf_r+0x41e>
 800b8ae:	9b06      	ldr	r3, [sp, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d177      	bne.n	800b9a4 <_vfiprintf_r+0xae4>
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	460a      	mov	r2, r1
 800b8b8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b8bc:	e505      	b.n	800b2ca <_vfiprintf_r+0x40a>
 800b8be:	9211      	str	r2, [sp, #68]	; 0x44
 800b8c0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b8c4:	e47a      	b.n	800b1bc <_vfiprintf_r+0x2fc>
 800b8c6:	f1bb 0f00 	cmp.w	fp, #0
 800b8ca:	f47f abfe 	bne.w	800b0ca <_vfiprintf_r+0x20a>
 800b8ce:	4655      	mov	r5, sl
 800b8d0:	f04f 0b00 	mov.w	fp, #0
 800b8d4:	f8cd b000 	str.w	fp, [sp]
 800b8d8:	ac3c      	add	r4, sp, #240	; 0xf0
 800b8da:	f7ff bbfe 	b.w	800b0da <_vfiprintf_r+0x21a>
 800b8de:	f01a 0310 	ands.w	r3, sl, #16
 800b8e2:	d13a      	bne.n	800b95a <_vfiprintf_r+0xa9a>
 800b8e4:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800b8e8:	f000 8112 	beq.w	800bb10 <_vfiprintf_r+0xc50>
 800b8ec:	9a04      	ldr	r2, [sp, #16]
 800b8ee:	f852 6b04 	ldr.w	r6, [r2], #4
 800b8f2:	9204      	str	r2, [sp, #16]
 800b8f4:	4698      	mov	r8, r3
 800b8f6:	b2b6      	uxth	r6, r6
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e431      	b.n	800b160 <_vfiprintf_r+0x2a0>
 800b8fc:	232d      	movs	r3, #45	; 0x2d
 800b8fe:	4276      	negs	r6, r6
 800b900:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 800b904:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 800b908:	46aa      	mov	sl, r5
 800b90a:	2301      	movs	r3, #1
 800b90c:	e42c      	b.n	800b168 <_vfiprintf_r+0x2a8>
 800b90e:	2900      	cmp	r1, #0
 800b910:	d07d      	beq.n	800ba0e <_vfiprintf_r+0xb4e>
 800b912:	9901      	ldr	r1, [sp, #4]
 800b914:	9805      	ldr	r0, [sp, #20]
 800b916:	aa10      	add	r2, sp, #64	; 0x40
 800b918:	f7ff fa8c 	bl	800ae34 <__sprint_r.part.0>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	f47f ac63 	bne.w	800b1e8 <_vfiprintf_r+0x328>
 800b922:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800b926:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b92a:	1c50      	adds	r0, r2, #1
 800b92c:	e49a      	b.n	800b264 <_vfiprintf_r+0x3a4>
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	783b      	ldrb	r3, [r7, #0]
 800b932:	f7ff bb1d 	b.w	800af70 <_vfiprintf_r+0xb0>
 800b936:	ac3c      	add	r4, sp, #240	; 0xf0
 800b938:	f7ff bbcf 	b.w	800b0da <_vfiprintf_r+0x21a>
 800b93c:	f109 0908 	add.w	r9, r9, #8
 800b940:	f10c 0001 	add.w	r0, ip, #1
 800b944:	4662      	mov	r2, ip
 800b946:	e4c4      	b.n	800b2d2 <_vfiprintf_r+0x412>
 800b948:	05aa      	lsls	r2, r5, #22
 800b94a:	f100 8137 	bmi.w	800bbbc <_vfiprintf_r+0xcfc>
 800b94e:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800b952:	461e      	mov	r6, r3
 800b954:	4643      	mov	r3, r8
 800b956:	f7ff bba6 	b.w	800b0a6 <_vfiprintf_r+0x1e6>
 800b95a:	9b04      	ldr	r3, [sp, #16]
 800b95c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	2301      	movs	r3, #1
 800b964:	f7ff bbfc 	b.w	800b160 <_vfiprintf_r+0x2a0>
 800b968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f43f ab86 	beq.w	800b07c <_vfiprintf_r+0x1bc>
 800b970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	f43f ab81 	beq.w	800b07c <_vfiprintf_r+0x1bc>
 800b97a:	783b      	ldrb	r3, [r7, #0]
 800b97c:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800b980:	f7ff baf6 	b.w	800af70 <_vfiprintf_r+0xb0>
 800b984:	e9dd 1603 	ldrd	r1, r6, [sp, #12]
 800b988:	f856 2b04 	ldr.w	r2, [r6], #4
 800b98c:	9604      	str	r6, [sp, #16]
 800b98e:	17cb      	asrs	r3, r1, #31
 800b990:	e9c2 1300 	strd	r1, r3, [r2]
 800b994:	f7ff bacd 	b.w	800af32 <_vfiprintf_r+0x72>
 800b998:	9b04      	ldr	r3, [sp, #16]
 800b99a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b99e:	9304      	str	r3, [sp, #16]
 800b9a0:	f7ff bbdb 	b.w	800b15a <_vfiprintf_r+0x29a>
 800b9a4:	2102      	movs	r1, #2
 800b9a6:	ab0f      	add	r3, sp, #60	; 0x3c
 800b9a8:	9114      	str	r1, [sp, #80]	; 0x50
 800b9aa:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9ac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800b9b0:	e6ba      	b.n	800b728 <_vfiprintf_r+0x868>
 800b9b2:	4a4b      	ldr	r2, [pc, #300]	; (800bae0 <_vfiprintf_r+0xc20>)
 800b9b4:	9208      	str	r2, [sp, #32]
 800b9b6:	f015 0820 	ands.w	r8, r5, #32
 800b9ba:	d036      	beq.n	800ba2a <_vfiprintf_r+0xb6a>
 800b9bc:	9e04      	ldr	r6, [sp, #16]
 800b9be:	3607      	adds	r6, #7
 800b9c0:	f026 0607 	bic.w	r6, r6, #7
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800b9ca:	f852 6b08 	ldr.w	r6, [r2], #8
 800b9ce:	9204      	str	r2, [sp, #16]
 800b9d0:	07ea      	lsls	r2, r5, #31
 800b9d2:	d509      	bpl.n	800b9e8 <_vfiprintf_r+0xb28>
 800b9d4:	ea56 0208 	orrs.w	r2, r6, r8
 800b9d8:	d006      	beq.n	800b9e8 <_vfiprintf_r+0xb28>
 800b9da:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800b9de:	2330      	movs	r3, #48	; 0x30
 800b9e0:	f045 0502 	orr.w	r5, r5, #2
 800b9e4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800b9e8:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	f7ff bbb7 	b.w	800b160 <_vfiprintf_r+0x2a0>
 800b9f2:	46aa      	mov	sl, r5
 800b9f4:	e51f      	b.n	800b436 <_vfiprintf_r+0x576>
 800b9f6:	4a3b      	ldr	r2, [pc, #236]	; (800bae4 <_vfiprintf_r+0xc24>)
 800b9f8:	9208      	str	r2, [sp, #32]
 800b9fa:	e7dc      	b.n	800b9b6 <_vfiprintf_r+0xaf6>
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	9604      	str	r6, [sp, #16]
 800ba00:	f7f6 fb3e 	bl	8002080 <strlen>
 800ba04:	f04f 0b00 	mov.w	fp, #0
 800ba08:	9000      	str	r0, [sp, #0]
 800ba0a:	f7ff bb66 	b.w	800b0da <_vfiprintf_r+0x21a>
 800ba0e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800ba12:	2a00      	cmp	r2, #0
 800ba14:	f000 80c0 	beq.w	800bb98 <_vfiprintf_r+0xcd8>
 800ba18:	2001      	movs	r0, #1
 800ba1a:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 800ba1e:	9014      	str	r0, [sp, #80]	; 0x50
 800ba20:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba22:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800ba26:	4601      	mov	r1, r0
 800ba28:	e42d      	b.n	800b286 <_vfiprintf_r+0x3c6>
 800ba2a:	f015 0210 	ands.w	r2, r5, #16
 800ba2e:	d042      	beq.n	800bab6 <_vfiprintf_r+0xbf6>
 800ba30:	9a04      	ldr	r2, [sp, #16]
 800ba32:	f852 6b04 	ldr.w	r6, [r2], #4
 800ba36:	9204      	str	r2, [sp, #16]
 800ba38:	e7ca      	b.n	800b9d0 <_vfiprintf_r+0xb10>
 800ba3a:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800ba3e:	f8cd a000 	str.w	sl, [sp]
 800ba42:	f8cd 9018 	str.w	r9, [sp, #24]
 800ba46:	46ba      	mov	sl, r7
 800ba48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ba4c:	2500      	movs	r5, #0
 800ba4e:	ac3c      	add	r4, sp, #240	; 0xf0
 800ba50:	461f      	mov	r7, r3
 800ba52:	e009      	b.n	800ba68 <_vfiprintf_r+0xba8>
 800ba54:	4630      	mov	r0, r6
 800ba56:	4641      	mov	r1, r8
 800ba58:	f7f7 f866 	bl	8002b28 <__aeabi_uldivmod>
 800ba5c:	2e0a      	cmp	r6, #10
 800ba5e:	f178 0300 	sbcs.w	r3, r8, #0
 800ba62:	d31b      	bcc.n	800ba9c <_vfiprintf_r+0xbdc>
 800ba64:	4606      	mov	r6, r0
 800ba66:	4688      	mov	r8, r1
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4641      	mov	r1, r8
 800ba6c:	220a      	movs	r2, #10
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f7f7 f85a 	bl	8002b28 <__aeabi_uldivmod>
 800ba74:	4611      	mov	r1, r2
 800ba76:	3130      	adds	r1, #48	; 0x30
 800ba78:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	2300      	movs	r3, #0
 800ba80:	3c01      	subs	r4, #1
 800ba82:	3501      	adds	r5, #1
 800ba84:	2f00      	cmp	r7, #0
 800ba86:	d0e5      	beq.n	800ba54 <_vfiprintf_r+0xb94>
 800ba88:	f899 1000 	ldrb.w	r1, [r9]
 800ba8c:	42a9      	cmp	r1, r5
 800ba8e:	d1e1      	bne.n	800ba54 <_vfiprintf_r+0xb94>
 800ba90:	2dff      	cmp	r5, #255	; 0xff
 800ba92:	d0df      	beq.n	800ba54 <_vfiprintf_r+0xb94>
 800ba94:	2e0a      	cmp	r6, #10
 800ba96:	f178 0300 	sbcs.w	r3, r8, #0
 800ba9a:	d263      	bcs.n	800bb64 <_vfiprintf_r+0xca4>
 800ba9c:	4657      	mov	r7, sl
 800ba9e:	ab3c      	add	r3, sp, #240	; 0xf0
 800baa0:	f8dd a000 	ldr.w	sl, [sp]
 800baa4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800baa8:	1b1b      	subs	r3, r3, r4
 800baaa:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	4655      	mov	r5, sl
 800bab2:	f7ff bb12 	b.w	800b0da <_vfiprintf_r+0x21a>
 800bab6:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 800baba:	d046      	beq.n	800bb4a <_vfiprintf_r+0xc8a>
 800babc:	9904      	ldr	r1, [sp, #16]
 800babe:	f851 6b04 	ldr.w	r6, [r1], #4
 800bac2:	9104      	str	r1, [sp, #16]
 800bac4:	4690      	mov	r8, r2
 800bac6:	b2b6      	uxth	r6, r6
 800bac8:	e782      	b.n	800b9d0 <_vfiprintf_r+0xb10>
 800baca:	46aa      	mov	sl, r5
 800bacc:	f7ff baf8 	b.w	800b0c0 <_vfiprintf_r+0x200>
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	46aa      	mov	sl, r5
 800bad4:	f47f ad17 	bne.w	800b506 <_vfiprintf_r+0x646>
 800bad8:	f7ff baf7 	b.w	800b0ca <_vfiprintf_r+0x20a>
 800badc:	0800d88c 	.word	0x0800d88c
 800bae0:	0800d628 	.word	0x0800d628
 800bae4:	0800d614 	.word	0x0800d614
 800bae8:	9e04      	ldr	r6, [sp, #16]
 800baea:	9a03      	ldr	r2, [sp, #12]
 800baec:	f856 3b04 	ldr.w	r3, [r6], #4
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	9604      	str	r6, [sp, #16]
 800baf4:	f7ff ba1d 	b.w	800af32 <_vfiprintf_r+0x72>
 800baf8:	f1bb 0f06 	cmp.w	fp, #6
 800bafc:	46d8      	mov	r8, fp
 800bafe:	bf28      	it	cs
 800bb00:	f04f 0806 	movcs.w	r8, #6
 800bb04:	4c50      	ldr	r4, [pc, #320]	; (800bc48 <_vfiprintf_r+0xd88>)
 800bb06:	f8cd 8000 	str.w	r8, [sp]
 800bb0a:	9604      	str	r6, [sp, #16]
 800bb0c:	f7ff bb95 	b.w	800b23a <_vfiprintf_r+0x37a>
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 800bb16:	bf14      	ite	ne
 800bb18:	f853 6b04 	ldrne.w	r6, [r3], #4
 800bb1c:	f853 6b04 	ldreq.w	r6, [r3], #4
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	bf1c      	itt	ne
 800bb24:	4690      	movne	r8, r2
 800bb26:	b2f6      	uxtbne	r6, r6
 800bb28:	2301      	movs	r3, #1
 800bb2a:	f7ff bb19 	b.w	800b160 <_vfiprintf_r+0x2a0>
 800bb2e:	9b04      	ldr	r3, [sp, #16]
 800bb30:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800bb34:	bf14      	ite	ne
 800bb36:	f853 6b04 	ldrne.w	r6, [r3], #4
 800bb3a:	f853 6b04 	ldreq.w	r6, [r3], #4
 800bb3e:	9304      	str	r3, [sp, #16]
 800bb40:	bf1c      	itt	ne
 800bb42:	4690      	movne	r8, r2
 800bb44:	b2f6      	uxtbne	r6, r6
 800bb46:	f7ff bb08 	b.w	800b15a <_vfiprintf_r+0x29a>
 800bb4a:	9a04      	ldr	r2, [sp, #16]
 800bb4c:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800bb50:	bf14      	ite	ne
 800bb52:	f852 6b04 	ldrne.w	r6, [r2], #4
 800bb56:	f852 6b04 	ldreq.w	r6, [r2], #4
 800bb5a:	9204      	str	r2, [sp, #16]
 800bb5c:	bf1c      	itt	ne
 800bb5e:	4688      	movne	r8, r1
 800bb60:	b2f6      	uxtbne	r6, r6
 800bb62:	e735      	b.n	800b9d0 <_vfiprintf_r+0xb10>
 800bb64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb66:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb68:	1ae4      	subs	r4, r4, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f7ff f92f 	bl	800add0 <strncpy>
 800bb72:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bb76:	b10b      	cbz	r3, 800bb7c <_vfiprintf_r+0xcbc>
 800bb78:	f109 0901 	add.w	r9, r9, #1
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	4641      	mov	r1, r8
 800bb80:	220a      	movs	r2, #10
 800bb82:	2300      	movs	r3, #0
 800bb84:	2500      	movs	r5, #0
 800bb86:	f7f6 ffcf 	bl	8002b28 <__aeabi_uldivmod>
 800bb8a:	e76b      	b.n	800ba64 <_vfiprintf_r+0xba4>
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	460a      	mov	r2, r1
 800bb90:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800bb94:	f7ff bb9d 	b.w	800b2d2 <_vfiprintf_r+0x412>
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f47f adbc 	bne.w	800b718 <_vfiprintf_r+0x858>
 800bba0:	460a      	mov	r2, r1
 800bba2:	2001      	movs	r0, #1
 800bba4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800bba8:	f7ff bb93 	b.w	800b2d2 <_vfiprintf_r+0x412>
 800bbac:	9e04      	ldr	r6, [sp, #16]
 800bbae:	9a03      	ldr	r2, [sp, #12]
 800bbb0:	f856 3b04 	ldr.w	r3, [r6], #4
 800bbb4:	9604      	str	r6, [sp, #16]
 800bbb6:	801a      	strh	r2, [r3, #0]
 800bbb8:	f7ff b9bb 	b.w	800af32 <_vfiprintf_r+0x72>
 800bbbc:	f343 18c0 	sbfx	r8, r3, #7, #1
 800bbc0:	b25e      	sxtb	r6, r3
 800bbc2:	4643      	mov	r3, r8
 800bbc4:	f7ff ba6f 	b.w	800b0a6 <_vfiprintf_r+0x1e6>
 800bbc8:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800bbca:	f7fe f9ff 	bl	8009fcc <__retarget_lock_release_recursive>
 800bbce:	f7ff baab 	b.w	800b128 <_vfiprintf_r+0x268>
 800bbd2:	f8cd b000 	str.w	fp, [sp]
 800bbd6:	9604      	str	r6, [sp, #16]
 800bbd8:	4683      	mov	fp, r0
 800bbda:	f7ff ba7e 	b.w	800b0da <_vfiprintf_r+0x21a>
 800bbde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bbe0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bbe2:	f8df a068 	ldr.w	sl, [pc, #104]	; 800bc4c <_vfiprintf_r+0xd8c>
 800bbe6:	3201      	adds	r2, #1
 800bbe8:	e5e0      	b.n	800b7ac <_vfiprintf_r+0x8ec>
 800bbea:	9901      	ldr	r1, [sp, #4]
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	aa10      	add	r2, sp, #64	; 0x40
 800bbf0:	f7ff f920 	bl	800ae34 <__sprint_r.part.0>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	f43f aaf5 	beq.w	800b1e4 <_vfiprintf_r+0x324>
 800bbfa:	f7ff baf5 	b.w	800b1e8 <_vfiprintf_r+0x328>
 800bbfe:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bc00:	f8df a048 	ldr.w	sl, [pc, #72]	; 800bc4c <_vfiprintf_r+0xd8c>
 800bc04:	3001      	adds	r0, #1
 800bc06:	e621      	b.n	800b84c <_vfiprintf_r+0x98c>
 800bc08:	9b01      	ldr	r3, [sp, #4]
 800bc0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc0c:	07db      	lsls	r3, r3, #31
 800bc0e:	d407      	bmi.n	800bc20 <_vfiprintf_r+0xd60>
 800bc10:	9b01      	ldr	r3, [sp, #4]
 800bc12:	899b      	ldrh	r3, [r3, #12]
 800bc14:	059f      	lsls	r7, r3, #22
 800bc16:	d403      	bmi.n	800bc20 <_vfiprintf_r+0xd60>
 800bc18:	9b01      	ldr	r3, [sp, #4]
 800bc1a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bc1c:	f7fe f9d6 	bl	8009fcc <__retarget_lock_release_recursive>
 800bc20:	f04f 33ff 	mov.w	r3, #4294967295
 800bc24:	9303      	str	r3, [sp, #12]
 800bc26:	f7ff bae8 	b.w	800b1fa <_vfiprintf_r+0x33a>
 800bc2a:	f8df a024 	ldr.w	sl, [pc, #36]	; 800bc50 <_vfiprintf_r+0xd90>
 800bc2e:	4684      	mov	ip, r0
 800bc30:	e4e6      	b.n	800b600 <_vfiprintf_r+0x740>
 800bc32:	9a04      	ldr	r2, [sp, #16]
 800bc34:	787b      	ldrb	r3, [r7, #1]
 800bc36:	460f      	mov	r7, r1
 800bc38:	f852 1b04 	ldr.w	r1, [r2], #4
 800bc3c:	9204      	str	r2, [sp, #16]
 800bc3e:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800bc42:	f7ff b995 	b.w	800af70 <_vfiprintf_r+0xb0>
 800bc46:	bf00      	nop
 800bc48:	0800d63c 	.word	0x0800d63c
 800bc4c:	0800d88c 	.word	0x0800d88c
 800bc50:	0800d89c 	.word	0x0800d89c

0800bc54 <__sbprintf>:
 800bc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc56:	461f      	mov	r7, r3
 800bc58:	898b      	ldrh	r3, [r1, #12]
 800bc5a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800bc5e:	f023 0302 	bic.w	r3, r3, #2
 800bc62:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bc66:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800bc68:	9319      	str	r3, [sp, #100]	; 0x64
 800bc6a:	89cb      	ldrh	r3, [r1, #14]
 800bc6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bc70:	69cb      	ldr	r3, [r1, #28]
 800bc72:	9307      	str	r3, [sp, #28]
 800bc74:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bc76:	9309      	str	r3, [sp, #36]	; 0x24
 800bc78:	ab1a      	add	r3, sp, #104	; 0x68
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc82:	4615      	mov	r5, r2
 800bc84:	4606      	mov	r6, r0
 800bc86:	9302      	str	r3, [sp, #8]
 800bc88:	9305      	str	r3, [sp, #20]
 800bc8a:	a816      	add	r0, sp, #88	; 0x58
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	9306      	str	r3, [sp, #24]
 800bc92:	f7fe f995 	bl	8009fc0 <__retarget_lock_init_recursive>
 800bc96:	462a      	mov	r2, r5
 800bc98:	463b      	mov	r3, r7
 800bc9a:	4669      	mov	r1, sp
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	f7ff f90f 	bl	800aec0 <_vfiprintf_r>
 800bca2:	1e05      	subs	r5, r0, #0
 800bca4:	db07      	blt.n	800bcb6 <__sbprintf+0x62>
 800bca6:	4669      	mov	r1, sp
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7fd fdbb 	bl	8009824 <_fflush_r>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	bf18      	it	ne
 800bcb2:	f04f 35ff 	movne.w	r5, #4294967295
 800bcb6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bcba:	065b      	lsls	r3, r3, #25
 800bcbc:	d503      	bpl.n	800bcc6 <__sbprintf+0x72>
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bcc8:	f7fe f97c 	bl	8009fc4 <__retarget_lock_close_recursive>
 800bccc:	4628      	mov	r0, r5
 800bcce:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800bcd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bcd4 <_write_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	4d08      	ldr	r5, [pc, #32]	; (800bcfc <_write_r+0x28>)
 800bcda:	4684      	mov	ip, r0
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4620      	mov	r0, r4
 800bce0:	461a      	mov	r2, r3
 800bce2:	2300      	movs	r3, #0
 800bce4:	602b      	str	r3, [r5, #0]
 800bce6:	4664      	mov	r4, ip
 800bce8:	f000 fafe 	bl	800c2e8 <_write>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d000      	beq.n	800bcf2 <_write_r+0x1e>
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0fb      	beq.n	800bcf0 <_write_r+0x1c>
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	200010b8 	.word	0x200010b8

0800bd00 <__register_exitproc>:
 800bd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd04:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800bd84 <__register_exitproc+0x84>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	f8da 0000 	ldr.w	r0, [sl]
 800bd0e:	4698      	mov	r8, r3
 800bd10:	460f      	mov	r7, r1
 800bd12:	4691      	mov	r9, r2
 800bd14:	f7fe f958 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <__register_exitproc+0x88>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800bd20:	b324      	cbz	r4, 800bd6c <__register_exitproc+0x6c>
 800bd22:	6865      	ldr	r5, [r4, #4]
 800bd24:	2d1f      	cmp	r5, #31
 800bd26:	dc26      	bgt.n	800bd76 <__register_exitproc+0x76>
 800bd28:	b95e      	cbnz	r6, 800bd42 <__register_exitproc+0x42>
 800bd2a:	1c6b      	adds	r3, r5, #1
 800bd2c:	3502      	adds	r5, #2
 800bd2e:	f8da 0000 	ldr.w	r0, [sl]
 800bd32:	6063      	str	r3, [r4, #4]
 800bd34:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800bd38:	f7fe f948 	bl	8009fcc <__retarget_lock_release_recursive>
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd42:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800bd46:	2301      	movs	r3, #1
 800bd48:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800bd4c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800bd50:	40ab      	lsls	r3, r5
 800bd52:	431a      	orrs	r2, r3
 800bd54:	2e02      	cmp	r6, #2
 800bd56:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800bd5a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800bd5e:	d1e4      	bne.n	800bd2a <__register_exitproc+0x2a>
 800bd60:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 800bd64:	4313      	orrs	r3, r2
 800bd66:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800bd6a:	e7de      	b.n	800bd2a <__register_exitproc+0x2a>
 800bd6c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800bd70:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800bd74:	e7d5      	b.n	800bd22 <__register_exitproc+0x22>
 800bd76:	f8da 0000 	ldr.w	r0, [sl]
 800bd7a:	f7fe f927 	bl	8009fcc <__retarget_lock_release_recursive>
 800bd7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd82:	e7dc      	b.n	800bd3e <__register_exitproc+0x3e>
 800bd84:	20000840 	.word	0x20000840
 800bd88:	0800d5fc 	.word	0x0800d5fc

0800bd8c <__assert_func>:
 800bd8c:	b500      	push	{lr}
 800bd8e:	4c0b      	ldr	r4, [pc, #44]	; (800bdbc <__assert_func+0x30>)
 800bd90:	6825      	ldr	r5, [r4, #0]
 800bd92:	4614      	mov	r4, r2
 800bd94:	68ee      	ldr	r6, [r5, #12]
 800bd96:	461a      	mov	r2, r3
 800bd98:	b085      	sub	sp, #20
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	460d      	mov	r5, r1
 800bd9e:	b14c      	cbz	r4, 800bdb4 <__assert_func+0x28>
 800bda0:	4907      	ldr	r1, [pc, #28]	; (800bdc0 <__assert_func+0x34>)
 800bda2:	9500      	str	r5, [sp, #0]
 800bda4:	e9cd 1401 	strd	r1, r4, [sp, #4]
 800bda8:	4630      	mov	r0, r6
 800bdaa:	4906      	ldr	r1, [pc, #24]	; (800bdc4 <__assert_func+0x38>)
 800bdac:	f000 f886 	bl	800bebc <fiprintf>
 800bdb0:	f000 fa14 	bl	800c1dc <abort>
 800bdb4:	4904      	ldr	r1, [pc, #16]	; (800bdc8 <__assert_func+0x3c>)
 800bdb6:	460c      	mov	r4, r1
 800bdb8:	e7f3      	b.n	800bda2 <__assert_func+0x16>
 800bdba:	bf00      	nop
 800bdbc:	20000000 	.word	0x20000000
 800bdc0:	0800d8ac 	.word	0x0800d8ac
 800bdc4:	0800d8bc 	.word	0x0800d8bc
 800bdc8:	0800d8b8 	.word	0x0800d8b8

0800bdcc <_close_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d07      	ldr	r5, [pc, #28]	; (800bdec <_close_r+0x20>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602a      	str	r2, [r5, #0]
 800bdd8:	f000 fa4e 	bl	800c278 <_close>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d000      	beq.n	800bde2 <_close_r+0x16>
 800bde0:	bd38      	pop	{r3, r4, r5, pc}
 800bde2:	682b      	ldr	r3, [r5, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0fb      	beq.n	800bde0 <_close_r+0x14>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	200010b8 	.word	0x200010b8

0800bdf0 <_fclose_r>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	2900      	cmp	r1, #0
 800bdf4:	d04b      	beq.n	800be8e <_fclose_r+0x9e>
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	b110      	cbz	r0, 800be02 <_fclose_r+0x12>
 800bdfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d048      	beq.n	800be94 <_fclose_r+0xa4>
 800be02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be04:	07d8      	lsls	r0, r3, #31
 800be06:	d534      	bpl.n	800be72 <_fclose_r+0x82>
 800be08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d03e      	beq.n	800be8e <_fclose_r+0x9e>
 800be10:	4621      	mov	r1, r4
 800be12:	4630      	mov	r0, r6
 800be14:	f7fd fc76 	bl	8009704 <__sflush_r>
 800be18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be1a:	4605      	mov	r5, r0
 800be1c:	b133      	cbz	r3, 800be2c <_fclose_r+0x3c>
 800be1e:	69e1      	ldr	r1, [r4, #28]
 800be20:	4630      	mov	r0, r6
 800be22:	4798      	blx	r3
 800be24:	2800      	cmp	r0, #0
 800be26:	bfb8      	it	lt
 800be28:	f04f 35ff 	movlt.w	r5, #4294967295
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	061a      	lsls	r2, r3, #24
 800be30:	d43b      	bmi.n	800beaa <_fclose_r+0xba>
 800be32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be34:	b141      	cbz	r1, 800be48 <_fclose_r+0x58>
 800be36:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800be3a:	4299      	cmp	r1, r3
 800be3c:	d002      	beq.n	800be44 <_fclose_r+0x54>
 800be3e:	4630      	mov	r0, r6
 800be40:	f7fd fe1c 	bl	8009a7c <_free_r>
 800be44:	2300      	movs	r3, #0
 800be46:	6323      	str	r3, [r4, #48]	; 0x30
 800be48:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be4a:	b121      	cbz	r1, 800be56 <_fclose_r+0x66>
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7fd fe15 	bl	8009a7c <_free_r>
 800be52:	2300      	movs	r3, #0
 800be54:	6463      	str	r3, [r4, #68]	; 0x44
 800be56:	f7fd fd9f 	bl	8009998 <__sfp_lock_acquire>
 800be5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be5c:	2200      	movs	r2, #0
 800be5e:	07db      	lsls	r3, r3, #31
 800be60:	81a2      	strh	r2, [r4, #12]
 800be62:	d527      	bpl.n	800beb4 <_fclose_r+0xc4>
 800be64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be66:	f7fe f8ad 	bl	8009fc4 <__retarget_lock_close_recursive>
 800be6a:	f7fd fd9b 	bl	80099a4 <__sfp_lock_release>
 800be6e:	4628      	mov	r0, r5
 800be70:	bd70      	pop	{r4, r5, r6, pc}
 800be72:	89a3      	ldrh	r3, [r4, #12]
 800be74:	0599      	lsls	r1, r3, #22
 800be76:	d4cb      	bmi.n	800be10 <_fclose_r+0x20>
 800be78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7a:	f7fe f8a5 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 800be7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d1c4      	bne.n	800be10 <_fclose_r+0x20>
 800be86:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800be88:	f015 0501 	ands.w	r5, r5, #1
 800be8c:	d008      	beq.n	800bea0 <_fclose_r+0xb0>
 800be8e:	2500      	movs	r5, #0
 800be90:	4628      	mov	r0, r5
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	f7fd fcfa 	bl	800988c <__sinit>
 800be98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be9a:	07d8      	lsls	r0, r3, #31
 800be9c:	d4b4      	bmi.n	800be08 <_fclose_r+0x18>
 800be9e:	e7e8      	b.n	800be72 <_fclose_r+0x82>
 800bea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bea2:	f7fe f893 	bl	8009fcc <__retarget_lock_release_recursive>
 800bea6:	4628      	mov	r0, r5
 800bea8:	bd70      	pop	{r4, r5, r6, pc}
 800beaa:	6921      	ldr	r1, [r4, #16]
 800beac:	4630      	mov	r0, r6
 800beae:	f7fd fde5 	bl	8009a7c <_free_r>
 800beb2:	e7be      	b.n	800be32 <_fclose_r+0x42>
 800beb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beb6:	f7fe f889 	bl	8009fcc <__retarget_lock_release_recursive>
 800beba:	e7d3      	b.n	800be64 <_fclose_r+0x74>

0800bebc <fiprintf>:
 800bebc:	b40e      	push	{r1, r2, r3}
 800bebe:	b510      	push	{r4, lr}
 800bec0:	b083      	sub	sp, #12
 800bec2:	ab05      	add	r3, sp, #20
 800bec4:	4c06      	ldr	r4, [pc, #24]	; (800bee0 <fiprintf+0x24>)
 800bec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	4601      	mov	r1, r0
 800bece:	6820      	ldr	r0, [r4, #0]
 800bed0:	f7fe fff6 	bl	800aec0 <_vfiprintf_r>
 800bed4:	b003      	add	sp, #12
 800bed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beda:	b003      	add	sp, #12
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	20000000 	.word	0x20000000

0800bee4 <__fputwc>:
 800bee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bee8:	b083      	sub	sp, #12
 800beea:	4607      	mov	r7, r0
 800beec:	4688      	mov	r8, r1
 800beee:	4614      	mov	r4, r2
 800bef0:	f000 f8a8 	bl	800c044 <__locale_mb_cur_max>
 800bef4:	2801      	cmp	r0, #1
 800bef6:	d103      	bne.n	800bf00 <__fputwc+0x1c>
 800bef8:	f108 33ff 	add.w	r3, r8, #4294967295
 800befc:	2bfe      	cmp	r3, #254	; 0xfe
 800befe:	d937      	bls.n	800bf70 <__fputwc+0x8c>
 800bf00:	4642      	mov	r2, r8
 800bf02:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800bf06:	a901      	add	r1, sp, #4
 800bf08:	4638      	mov	r0, r7
 800bf0a:	f000 f93b 	bl	800c184 <_wcrtomb_r>
 800bf0e:	1c42      	adds	r2, r0, #1
 800bf10:	4606      	mov	r6, r0
 800bf12:	d033      	beq.n	800bf7c <__fputwc+0x98>
 800bf14:	b338      	cbz	r0, 800bf66 <__fputwc+0x82>
 800bf16:	f89d c004 	ldrb.w	ip, [sp, #4]
 800bf1a:	f10d 0905 	add.w	r9, sp, #5
 800bf1e:	2500      	movs	r5, #0
 800bf20:	e009      	b.n	800bf36 <__fputwc+0x52>
 800bf22:	6823      	ldr	r3, [r4, #0]
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	6022      	str	r2, [r4, #0]
 800bf28:	f883 c000 	strb.w	ip, [r3]
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	42b5      	cmp	r5, r6
 800bf30:	d219      	bcs.n	800bf66 <__fputwc+0x82>
 800bf32:	f819 cb01 	ldrb.w	ip, [r9], #1
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	60a3      	str	r3, [r4, #8]
 800bf3e:	daf0      	bge.n	800bf22 <__fputwc+0x3e>
 800bf40:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800bf44:	4573      	cmp	r3, lr
 800bf46:	4661      	mov	r1, ip
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	db02      	blt.n	800bf54 <__fputwc+0x70>
 800bf4e:	f1bc 0f0a 	cmp.w	ip, #10
 800bf52:	d1e6      	bne.n	800bf22 <__fputwc+0x3e>
 800bf54:	f000 f8be 	bl	800c0d4 <__swbuf_r>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	d1e7      	bne.n	800bf2c <__fputwc+0x48>
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	4630      	mov	r0, r6
 800bf60:	b003      	add	sp, #12
 800bf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf66:	4646      	mov	r6, r8
 800bf68:	4630      	mov	r0, r6
 800bf6a:	b003      	add	sp, #12
 800bf6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf70:	fa5f fc88 	uxtb.w	ip, r8
 800bf74:	f88d c004 	strb.w	ip, [sp, #4]
 800bf78:	4606      	mov	r6, r0
 800bf7a:	e7ce      	b.n	800bf1a <__fputwc+0x36>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	b003      	add	sp, #12
 800bf88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bf8c <_fputwc_r>:
 800bf8c:	b530      	push	{r4, r5, lr}
 800bf8e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800bf90:	f013 0f01 	tst.w	r3, #1
 800bf94:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800bf98:	4614      	mov	r4, r2
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	d101      	bne.n	800bfa6 <_fputwc_r+0x1a>
 800bfa2:	0598      	lsls	r0, r3, #22
 800bfa4:	d51c      	bpl.n	800bfe0 <_fputwc_r+0x54>
 800bfa6:	0490      	lsls	r0, r2, #18
 800bfa8:	d406      	bmi.n	800bfb8 <_fputwc_r+0x2c>
 800bfaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bfb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	6662      	str	r2, [r4, #100]	; 0x64
 800bfb8:	4622      	mov	r2, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f7ff ff92 	bl	800bee4 <__fputwc>
 800bfc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfc2:	07da      	lsls	r2, r3, #31
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	d402      	bmi.n	800bfce <_fputwc_r+0x42>
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	059b      	lsls	r3, r3, #22
 800bfcc:	d502      	bpl.n	800bfd4 <_fputwc_r+0x48>
 800bfce:	4628      	mov	r0, r5
 800bfd0:	b003      	add	sp, #12
 800bfd2:	bd30      	pop	{r4, r5, pc}
 800bfd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfd6:	f7fd fff9 	bl	8009fcc <__retarget_lock_release_recursive>
 800bfda:	4628      	mov	r0, r5
 800bfdc:	b003      	add	sp, #12
 800bfde:	bd30      	pop	{r4, r5, pc}
 800bfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfe2:	9101      	str	r1, [sp, #4]
 800bfe4:	f7fd fff0 	bl	8009fc8 <__retarget_lock_acquire_recursive>
 800bfe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfec:	9901      	ldr	r1, [sp, #4]
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	e7d9      	b.n	800bfa6 <_fputwc_r+0x1a>
 800bff2:	bf00      	nop

0800bff4 <_fstat_r>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	4d08      	ldr	r5, [pc, #32]	; (800c01c <_fstat_r+0x28>)
 800bffa:	4603      	mov	r3, r0
 800bffc:	2600      	movs	r6, #0
 800bffe:	4620      	mov	r0, r4
 800c000:	4611      	mov	r1, r2
 800c002:	461c      	mov	r4, r3
 800c004:	602e      	str	r6, [r5, #0]
 800c006:	f000 f93f 	bl	800c288 <_fstat>
 800c00a:	1c43      	adds	r3, r0, #1
 800c00c:	d000      	beq.n	800c010 <_fstat_r+0x1c>
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
 800c010:	682b      	ldr	r3, [r5, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0fb      	beq.n	800c00e <_fstat_r+0x1a>
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	bd70      	pop	{r4, r5, r6, pc}
 800c01a:	bf00      	nop
 800c01c:	200010b8 	.word	0x200010b8

0800c020 <_isatty_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d07      	ldr	r5, [pc, #28]	; (800c040 <_isatty_r+0x20>)
 800c024:	2200      	movs	r2, #0
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	602a      	str	r2, [r5, #0]
 800c02c:	f000 f93c 	bl	800c2a8 <_isatty>
 800c030:	1c43      	adds	r3, r0, #1
 800c032:	d000      	beq.n	800c036 <_isatty_r+0x16>
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	682b      	ldr	r3, [r5, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0fb      	beq.n	800c034 <_isatty_r+0x14>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	200010b8 	.word	0x200010b8

0800c044 <__locale_mb_cur_max>:
 800c044:	4b01      	ldr	r3, [pc, #4]	; (800c04c <__locale_mb_cur_max+0x8>)
 800c046:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800c04a:	4770      	bx	lr
 800c04c:	20000844 	.word	0x20000844

0800c050 <_lseek_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	460c      	mov	r4, r1
 800c054:	4d08      	ldr	r5, [pc, #32]	; (800c078 <_lseek_r+0x28>)
 800c056:	4684      	mov	ip, r0
 800c058:	4611      	mov	r1, r2
 800c05a:	4620      	mov	r0, r4
 800c05c:	461a      	mov	r2, r3
 800c05e:	2300      	movs	r3, #0
 800c060:	602b      	str	r3, [r5, #0]
 800c062:	4664      	mov	r4, ip
 800c064:	f000 f930 	bl	800c2c8 <_lseek>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d000      	beq.n	800c06e <_lseek_r+0x1e>
 800c06c:	bd38      	pop	{r3, r4, r5, pc}
 800c06e:	682b      	ldr	r3, [r5, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0fb      	beq.n	800c06c <_lseek_r+0x1c>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	200010b8 	.word	0x200010b8

0800c07c <__ascii_mbtowc>:
 800c07c:	b082      	sub	sp, #8
 800c07e:	b149      	cbz	r1, 800c094 <__ascii_mbtowc+0x18>
 800c080:	b15a      	cbz	r2, 800c09a <__ascii_mbtowc+0x1e>
 800c082:	b16b      	cbz	r3, 800c0a0 <__ascii_mbtowc+0x24>
 800c084:	7813      	ldrb	r3, [r2, #0]
 800c086:	600b      	str	r3, [r1, #0]
 800c088:	7812      	ldrb	r2, [r2, #0]
 800c08a:	1e10      	subs	r0, r2, #0
 800c08c:	bf18      	it	ne
 800c08e:	2001      	movne	r0, #1
 800c090:	b002      	add	sp, #8
 800c092:	4770      	bx	lr
 800c094:	a901      	add	r1, sp, #4
 800c096:	2a00      	cmp	r2, #0
 800c098:	d1f3      	bne.n	800c082 <__ascii_mbtowc+0x6>
 800c09a:	4610      	mov	r0, r2
 800c09c:	b002      	add	sp, #8
 800c09e:	4770      	bx	lr
 800c0a0:	f06f 0001 	mvn.w	r0, #1
 800c0a4:	e7f4      	b.n	800c090 <__ascii_mbtowc+0x14>
 800c0a6:	bf00      	nop

0800c0a8 <_read_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	4d08      	ldr	r5, [pc, #32]	; (800c0d0 <_read_r+0x28>)
 800c0ae:	4684      	mov	ip, r0
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	602b      	str	r3, [r5, #0]
 800c0ba:	4664      	mov	r4, ip
 800c0bc:	f000 f90c 	bl	800c2d8 <_read>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d000      	beq.n	800c0c6 <_read_r+0x1e>
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	682b      	ldr	r3, [r5, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d0fb      	beq.n	800c0c4 <_read_r+0x1c>
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	200010b8 	.word	0x200010b8

0800c0d4 <__swbuf_r>:
 800c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	4606      	mov	r6, r0
 800c0dc:	b110      	cbz	r0, 800c0e4 <__swbuf_r+0x10>
 800c0de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d043      	beq.n	800c16c <__swbuf_r+0x98>
 800c0e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0e8:	69a3      	ldr	r3, [r4, #24]
 800c0ea:	60a3      	str	r3, [r4, #8]
 800c0ec:	0717      	lsls	r7, r2, #28
 800c0ee:	b290      	uxth	r0, r2
 800c0f0:	d51b      	bpl.n	800c12a <__swbuf_r+0x56>
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	b1cb      	cbz	r3, 800c12a <__swbuf_r+0x56>
 800c0f6:	b2ed      	uxtb	r5, r5
 800c0f8:	0481      	lsls	r1, r0, #18
 800c0fa:	462f      	mov	r7, r5
 800c0fc:	d522      	bpl.n	800c144 <__swbuf_r+0x70>
 800c0fe:	6822      	ldr	r2, [r4, #0]
 800c100:	6961      	ldr	r1, [r4, #20]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	4299      	cmp	r1, r3
 800c106:	dd29      	ble.n	800c15c <__swbuf_r+0x88>
 800c108:	3301      	adds	r3, #1
 800c10a:	68a1      	ldr	r1, [r4, #8]
 800c10c:	3901      	subs	r1, #1
 800c10e:	60a1      	str	r1, [r4, #8]
 800c110:	1c51      	adds	r1, r2, #1
 800c112:	6021      	str	r1, [r4, #0]
 800c114:	7015      	strb	r5, [r2, #0]
 800c116:	6962      	ldr	r2, [r4, #20]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d02a      	beq.n	800c172 <__swbuf_r+0x9e>
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	07db      	lsls	r3, r3, #31
 800c120:	d501      	bpl.n	800c126 <__swbuf_r+0x52>
 800c122:	2d0a      	cmp	r5, #10
 800c124:	d025      	beq.n	800c172 <__swbuf_r+0x9e>
 800c126:	4638      	mov	r0, r7
 800c128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c12a:	4621      	mov	r1, r4
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7fc fa79 	bl	8008624 <__swsetup_r>
 800c132:	bb20      	cbnz	r0, 800c17e <__swbuf_r+0xaa>
 800c134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c138:	6923      	ldr	r3, [r4, #16]
 800c13a:	b290      	uxth	r0, r2
 800c13c:	b2ed      	uxtb	r5, r5
 800c13e:	0481      	lsls	r1, r0, #18
 800c140:	462f      	mov	r7, r5
 800c142:	d4dc      	bmi.n	800c0fe <__swbuf_r+0x2a>
 800c144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c148:	81a2      	strh	r2, [r4, #12]
 800c14a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c14c:	6961      	ldr	r1, [r4, #20]
 800c14e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c152:	6662      	str	r2, [r4, #100]	; 0x64
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	4299      	cmp	r1, r3
 800c15a:	dcd5      	bgt.n	800c108 <__swbuf_r+0x34>
 800c15c:	4621      	mov	r1, r4
 800c15e:	4630      	mov	r0, r6
 800c160:	f7fd fb60 	bl	8009824 <_fflush_r>
 800c164:	b958      	cbnz	r0, 800c17e <__swbuf_r+0xaa>
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	2301      	movs	r3, #1
 800c16a:	e7ce      	b.n	800c10a <__swbuf_r+0x36>
 800c16c:	f7fd fb8e 	bl	800988c <__sinit>
 800c170:	e7b8      	b.n	800c0e4 <__swbuf_r+0x10>
 800c172:	4621      	mov	r1, r4
 800c174:	4630      	mov	r0, r6
 800c176:	f7fd fb55 	bl	8009824 <_fflush_r>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d0d3      	beq.n	800c126 <__swbuf_r+0x52>
 800c17e:	f04f 37ff 	mov.w	r7, #4294967295
 800c182:	e7d0      	b.n	800c126 <__swbuf_r+0x52>

0800c184 <_wcrtomb_r>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	4605      	mov	r5, r0
 800c188:	b084      	sub	sp, #16
 800c18a:	461c      	mov	r4, r3
 800c18c:	b139      	cbz	r1, 800c19e <_wcrtomb_r+0x1a>
 800c18e:	4e0b      	ldr	r6, [pc, #44]	; (800c1bc <_wcrtomb_r+0x38>)
 800c190:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 800c194:	47b0      	blx	r6
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	d009      	beq.n	800c1ae <_wcrtomb_r+0x2a>
 800c19a:	b004      	add	sp, #16
 800c19c:	bd70      	pop	{r4, r5, r6, pc}
 800c19e:	460a      	mov	r2, r1
 800c1a0:	4906      	ldr	r1, [pc, #24]	; (800c1bc <_wcrtomb_r+0x38>)
 800c1a2:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 800c1a6:	a901      	add	r1, sp, #4
 800c1a8:	47b0      	blx	r6
 800c1aa:	1c43      	adds	r3, r0, #1
 800c1ac:	d1f5      	bne.n	800c19a <_wcrtomb_r+0x16>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	238a      	movs	r3, #138	; 0x8a
 800c1b2:	6022      	str	r2, [r4, #0]
 800c1b4:	602b      	str	r3, [r5, #0]
 800c1b6:	b004      	add	sp, #16
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20000844 	.word	0x20000844

0800c1c0 <__ascii_wctomb>:
 800c1c0:	b149      	cbz	r1, 800c1d6 <__ascii_wctomb+0x16>
 800c1c2:	2aff      	cmp	r2, #255	; 0xff
 800c1c4:	d802      	bhi.n	800c1cc <__ascii_wctomb+0xc>
 800c1c6:	700a      	strb	r2, [r1, #0]
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	4770      	bx	lr
 800c1cc:	238a      	movs	r3, #138	; 0x8a
 800c1ce:	6003      	str	r3, [r0, #0]
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	4770      	bx	lr
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop

0800c1dc <abort>:
 800c1dc:	b508      	push	{r3, lr}
 800c1de:	2006      	movs	r0, #6
 800c1e0:	f000 f804 	bl	800c1ec <raise>
 800c1e4:	2001      	movs	r0, #1
 800c1e6:	f000 f887 	bl	800c2f8 <_exit>
 800c1ea:	bf00      	nop

0800c1ec <raise>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4b15      	ldr	r3, [pc, #84]	; (800c244 <raise+0x58>)
 800c1f0:	281f      	cmp	r0, #31
 800c1f2:	681d      	ldr	r5, [r3, #0]
 800c1f4:	d820      	bhi.n	800c238 <raise+0x4c>
 800c1f6:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	b162      	cbz	r2, 800c218 <raise+0x2c>
 800c1fe:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800c202:	b14b      	cbz	r3, 800c218 <raise+0x2c>
 800c204:	2b01      	cmp	r3, #1
 800c206:	d015      	beq.n	800c234 <raise+0x48>
 800c208:	1c59      	adds	r1, r3, #1
 800c20a:	d00f      	beq.n	800c22c <raise+0x40>
 800c20c:	2500      	movs	r5, #0
 800c20e:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800c212:	4798      	blx	r3
 800c214:	4628      	mov	r0, r5
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	4628      	mov	r0, r5
 800c21a:	f000 f82b 	bl	800c274 <_getpid_r>
 800c21e:	4622      	mov	r2, r4
 800c220:	4601      	mov	r1, r0
 800c222:	4628      	mov	r0, r5
 800c224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c228:	f000 b80e 	b.w	800c248 <_kill_r>
 800c22c:	2316      	movs	r3, #22
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	2001      	movs	r0, #1
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	2000      	movs	r0, #0
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	2316      	movs	r3, #22
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295
 800c240:	bd38      	pop	{r3, r4, r5, pc}
 800c242:	bf00      	nop
 800c244:	20000000 	.word	0x20000000

0800c248 <_kill_r>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	4d08      	ldr	r5, [pc, #32]	; (800c270 <_kill_r+0x28>)
 800c24e:	4603      	mov	r3, r0
 800c250:	2600      	movs	r6, #0
 800c252:	4620      	mov	r0, r4
 800c254:	4611      	mov	r1, r2
 800c256:	461c      	mov	r4, r3
 800c258:	602e      	str	r6, [r5, #0]
 800c25a:	f000 f82d 	bl	800c2b8 <_kill>
 800c25e:	1c43      	adds	r3, r0, #1
 800c260:	d000      	beq.n	800c264 <_kill_r+0x1c>
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0fb      	beq.n	800c262 <_kill_r+0x1a>
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	bd70      	pop	{r4, r5, r6, pc}
 800c26e:	bf00      	nop
 800c270:	200010b8 	.word	0x200010b8

0800c274 <_getpid_r>:
 800c274:	f000 b810 	b.w	800c298 <_getpid>

0800c278 <_close>:
 800c278:	4b02      	ldr	r3, [pc, #8]	; (800c284 <_close+0xc>)
 800c27a:	2258      	movs	r2, #88	; 0x58
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	f04f 30ff 	mov.w	r0, #4294967295
 800c282:	4770      	bx	lr
 800c284:	200010b8 	.word	0x200010b8

0800c288 <_fstat>:
 800c288:	4b02      	ldr	r3, [pc, #8]	; (800c294 <_fstat+0xc>)
 800c28a:	2258      	movs	r2, #88	; 0x58
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	f04f 30ff 	mov.w	r0, #4294967295
 800c292:	4770      	bx	lr
 800c294:	200010b8 	.word	0x200010b8

0800c298 <_getpid>:
 800c298:	4b02      	ldr	r3, [pc, #8]	; (800c2a4 <_getpid+0xc>)
 800c29a:	2258      	movs	r2, #88	; 0x58
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a2:	4770      	bx	lr
 800c2a4:	200010b8 	.word	0x200010b8

0800c2a8 <_isatty>:
 800c2a8:	4b02      	ldr	r3, [pc, #8]	; (800c2b4 <_isatty+0xc>)
 800c2aa:	2258      	movs	r2, #88	; 0x58
 800c2ac:	601a      	str	r2, [r3, #0]
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	200010b8 	.word	0x200010b8

0800c2b8 <_kill>:
 800c2b8:	4b02      	ldr	r3, [pc, #8]	; (800c2c4 <_kill+0xc>)
 800c2ba:	2258      	movs	r2, #88	; 0x58
 800c2bc:	601a      	str	r2, [r3, #0]
 800c2be:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c2:	4770      	bx	lr
 800c2c4:	200010b8 	.word	0x200010b8

0800c2c8 <_lseek>:
 800c2c8:	4b02      	ldr	r3, [pc, #8]	; (800c2d4 <_lseek+0xc>)
 800c2ca:	2258      	movs	r2, #88	; 0x58
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d2:	4770      	bx	lr
 800c2d4:	200010b8 	.word	0x200010b8

0800c2d8 <_read>:
 800c2d8:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <_read+0xc>)
 800c2da:	2258      	movs	r2, #88	; 0x58
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e2:	4770      	bx	lr
 800c2e4:	200010b8 	.word	0x200010b8

0800c2e8 <_write>:
 800c2e8:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <_write+0xc>)
 800c2ea:	2258      	movs	r2, #88	; 0x58
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f2:	4770      	bx	lr
 800c2f4:	200010b8 	.word	0x200010b8

0800c2f8 <_exit>:
 800c2f8:	e7fe      	b.n	800c2f8 <_exit>
 800c2fa:	bf00      	nop

0800c2fc <_init>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	bf00      	nop
 800c300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c302:	bc08      	pop	{r3}
 800c304:	469e      	mov	lr, r3
 800c306:	4770      	bx	lr

0800c308 <_fini>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	bf00      	nop
 800c30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30e:	bc08      	pop	{r3}
 800c310:	469e      	mov	lr, r3
 800c312:	4770      	bx	lr
