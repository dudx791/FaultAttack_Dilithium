
PQCgenKAT_sign-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000597c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001280  08005b08  08005b08  00015b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d88  08006d88  00020844  2**0
                  CONTENTS
  4 .ARM          00000000  08006d88  08006d88  00020844  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d88  08006d88  00020844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000844  10000000  08006d94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  10000844  080075d8  00020844  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  10000f48  080075d8  00020f48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d395  00000000  00000000  00020872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fef  00000000  00000000  0002dc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a056  00000000  00000000  0002fbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  00039c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000998  00000000  00000000  0003a39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000842f  00000000  00000000  0003ad34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002af4  00000000  00000000  00043163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00045c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aac  00000000  00000000  00045ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000022f8  00000000  00000000  00047750  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001bd  00000000  00000000  00049a48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	10000844 	.word	0x10000844
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005aec 	.word	0x08005aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	10000848 	.word	0x10000848
 80001c4:	08005aec 	.word	0x08005aec

080001c8 <__asm_point_mul_257_16>:
 80001c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001cc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80001d0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100

080001d4 <_point_mul_16_loop>:
 80001d4:	f8d1 7008 	ldr.w	r7, [r1, #8]
 80001d8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80001dc:	f8de 9004 	ldr.w	r9, [lr, #4]
 80001e0:	f8d1 5004 	ldr.w	r5, [r1, #4]
 80001e4:	f851 4b10 	ldr.w	r4, [r1], #16
 80001e8:	f85e 6b08 	ldr.w	r6, [lr], #8
 80001ec:	fb14 fa26 	smultb	sl, r4, r6
 80001f0:	fb5a fb12 	smmulr	fp, sl, r2
 80001f4:	fb0b aa13 	mls	sl, fp, r3, sl
 80001f8:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 80001fc:	f1c6 0600 	rsb	r6, r6, #0
 8000200:	fb15 fa26 	smultb	sl, r5, r6
 8000204:	fb5a fb12 	smmulr	fp, sl, r2
 8000208:	fb0b aa13 	mls	sl, fp, r3, sl
 800020c:	eac5 450a 	pkhbt	r5, r5, sl, lsl #16
 8000210:	f8c0 5004 	str.w	r5, [r0, #4]
 8000214:	f840 4b08 	str.w	r4, [r0], #8
 8000218:	fb17 fa29 	smultb	sl, r7, r9
 800021c:	fb5a fb12 	smmulr	fp, sl, r2
 8000220:	fb0b aa13 	mls	sl, fp, r3, sl
 8000224:	eac7 470a 	pkhbt	r7, r7, sl, lsl #16
 8000228:	f1c9 0900 	rsb	r9, r9, #0
 800022c:	fb18 fa29 	smultb	sl, r8, r9
 8000230:	fb5a fb12 	smmulr	fp, sl, r2
 8000234:	fb0b aa13 	mls	sl, fp, r3, sl
 8000238:	eac8 480a 	pkhbt	r8, r8, sl, lsl #16
 800023c:	f8c0 8004 	str.w	r8, [r0, #4]
 8000240:	f840 7b08 	str.w	r7, [r0], #8
 8000244:	ebbe 0f0c 	cmp.w	lr, ip
 8000248:	f47f afc4 	bne.w	80001d4 <_point_mul_16_loop>
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <__asm_asymmetric_mul_257_16>:
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000254:	f500 6c80 	add.w	ip, r0, #1024	; 0x400

08000258 <_asymmetric_mul_16_loop>:
 8000258:	f8d1 7004 	ldr.w	r7, [r1, #4]
 800025c:	f851 4b08 	ldr.w	r4, [r1], #8
 8000260:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8000264:	f852 5b08 	ldr.w	r5, [r2], #8
 8000268:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800026c:	f853 6b08 	ldr.w	r6, [r3], #8
 8000270:	fb24 fa06 	smuad	sl, r4, r6
 8000274:	fb24 fb15 	smuadx	fp, r4, r5
 8000278:	f8c0 b004 	str.w	fp, [r0, #4]
 800027c:	f840 ab08 	str.w	sl, [r0], #8
 8000280:	fb27 fa09 	smuad	sl, r7, r9
 8000284:	fb27 fb18 	smuadx	fp, r7, r8
 8000288:	f8c0 b004 	str.w	fp, [r0, #4]
 800028c:	f840 ab08 	str.w	sl, [r0], #8
 8000290:	ebb0 0f0c 	cmp.w	r0, ip
 8000294:	f47f afe0 	bne.w	8000258 <_asymmetric_mul_16_loop>
 8000298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800029c <__asm_fnt_257>:
 800029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a0:	ed2d 8a0c 	vpush	{s16-s27}
 80002a4:	ee0d 1a90 	vmov	s27, r1
 80002a8:	f100 0c80 	add.w	ip, r0, #128	; 0x80

080002ac <_fnt_0_1_2>:
 80002ac:	f8d0 4000 	ldr.w	r4, [r0]
 80002b0:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80002b4:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 80002b8:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
 80002bc:	f8d0 8200 	ldr.w	r8, [r0, #512]	; 0x200
 80002c0:	f8d0 9280 	ldr.w	r9, [r0, #640]	; 0x280
 80002c4:	f8d0 a300 	ldr.w	sl, [r0, #768]	; 0x300
 80002c8:	f8d0 b380 	ldr.w	fp, [r0, #896]	; 0x380
 80002cc:	eb04 1408 	add.w	r4, r4, r8, lsl #4
 80002d0:	eba4 1848 	sub.w	r8, r4, r8, lsl #5
 80002d4:	eb05 1509 	add.w	r5, r5, r9, lsl #4
 80002d8:	eba5 1949 	sub.w	r9, r5, r9, lsl #5
 80002dc:	eb06 160a 	add.w	r6, r6, sl, lsl #4
 80002e0:	eba6 1a4a 	sub.w	sl, r6, sl, lsl #5
 80002e4:	eb07 170b 	add.w	r7, r7, fp, lsl #4
 80002e8:	eba7 1b4b 	sub.w	fp, r7, fp, lsl #5
 80002ec:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80002f0:	eba4 06c6 	sub.w	r6, r4, r6, lsl #3
 80002f4:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80002f8:	eba5 07c7 	sub.w	r7, r5, r7, lsl #3
 80002fc:	eb08 188a 	add.w	r8, r8, sl, lsl #6
 8000300:	eba8 1aca 	sub.w	sl, r8, sl, lsl #7
 8000304:	eb09 198b 	add.w	r9, r9, fp, lsl #6
 8000308:	eba9 1bcb 	sub.w	fp, r9, fp, lsl #7
 800030c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8000310:	eba4 0585 	sub.w	r5, r4, r5, lsl #2
 8000314:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8000318:	eba6 1787 	sub.w	r7, r6, r7, lsl #6
 800031c:	eb08 08c9 	add.w	r8, r8, r9, lsl #3
 8000320:	eba8 1909 	sub.w	r9, r8, r9, lsl #4
 8000324:	eb0a 1acb 	add.w	sl, sl, fp, lsl #7
 8000328:	ebaa 2b0b 	sub.w	fp, sl, fp, lsl #8
 800032c:	f8c0 8200 	str.w	r8, [r0, #512]	; 0x200
 8000330:	f8c0 9280 	str.w	r9, [r0, #640]	; 0x280
 8000334:	f8c0 a300 	str.w	sl, [r0, #768]	; 0x300
 8000338:	f8c0 b380 	str.w	fp, [r0, #896]	; 0x380
 800033c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 8000340:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8000344:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
 8000348:	f840 4b04 	str.w	r4, [r0], #4
 800034c:	ebb0 0f0c 	cmp.w	r0, ip
 8000350:	f47f afac 	bne.w	80002ac <_fnt_0_1_2>
 8000354:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8000358:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800035c:	ee0c ca90 	vmov	s25, ip

08000360 <_fnt_3_4_5_6>:
 8000360:	ee1d 1a90 	vmov	r1, s27
 8000364:	ecb1 1a0f 	vldmia	r1!, {s2-s16}
 8000368:	ee0d 1a90 	vmov	s27, r1
 800036c:	f8d0 4008 	ldr.w	r4, [r0, #8]
 8000370:	f8d0 5018 	ldr.w	r5, [r0, #24]
 8000374:	f8d0 6028 	ldr.w	r6, [r0, #40]	; 0x28
 8000378:	f8d0 7038 	ldr.w	r7, [r0, #56]	; 0x38
 800037c:	f8d0 8048 	ldr.w	r8, [r0, #72]	; 0x48
 8000380:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
 8000384:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 8000388:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 800038c:	ee11 ea10 	vmov	lr, s2
 8000390:	fb08 410e 	mla	r1, r8, lr, r4
 8000394:	fb08 481e 	mls	r8, r8, lr, r4
 8000398:	fb09 540e 	mla	r4, r9, lr, r5
 800039c:	fb09 591e 	mls	r9, r9, lr, r5
 80003a0:	fb0a 650e 	mla	r5, sl, lr, r6
 80003a4:	fb0a 6a1e 	mls	sl, sl, lr, r6
 80003a8:	fb0b 760e 	mla	r6, fp, lr, r7
 80003ac:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80003b0:	fb51 f712 	smmulr	r7, r1, r2
 80003b4:	fb07 1113 	mls	r1, r7, r3, r1
 80003b8:	fb54 f712 	smmulr	r7, r4, r2
 80003bc:	fb07 4413 	mls	r4, r7, r3, r4
 80003c0:	fb55 f712 	smmulr	r7, r5, r2
 80003c4:	fb07 5513 	mls	r5, r7, r3, r5
 80003c8:	fb56 f712 	smmulr	r7, r6, r2
 80003cc:	fb07 6613 	mls	r6, r7, r3, r6
 80003d0:	fb58 f712 	smmulr	r7, r8, r2
 80003d4:	fb07 8813 	mls	r8, r7, r3, r8
 80003d8:	fb59 f712 	smmulr	r7, r9, r2
 80003dc:	fb07 9913 	mls	r9, r7, r3, r9
 80003e0:	fb5a f712 	smmulr	r7, sl, r2
 80003e4:	fb07 aa13 	mls	sl, r7, r3, sl
 80003e8:	fb5b f712 	smmulr	r7, fp, r2
 80003ec:	fb07 bb13 	mls	fp, r7, r3, fp
 80003f0:	ee11 ea90 	vmov	lr, s3
 80003f4:	fb05 1c0e 	mla	ip, r5, lr, r1
 80003f8:	fb05 171e 	mls	r7, r5, lr, r1
 80003fc:	fb06 410e 	mla	r1, r6, lr, r4
 8000400:	fb06 441e 	mls	r4, r6, lr, r4
 8000404:	ee12 ea10 	vmov	lr, s4
 8000408:	fb0a 860e 	mla	r6, sl, lr, r8
 800040c:	fb0a 851e 	mls	r5, sl, lr, r8
 8000410:	fb0b 9a0e 	mla	sl, fp, lr, r9
 8000414:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000418:	ee13 ea90 	vmov	lr, s7
 800041c:	fb0a 680e 	mla	r8, sl, lr, r6
 8000420:	fb0a 691e 	mls	r9, sl, lr, r6
 8000424:	ee14 ea10 	vmov	lr, s8
 8000428:	fb0b 5a0e 	mla	sl, fp, lr, r5
 800042c:	fb0b 5b1e 	mls	fp, fp, lr, r5
 8000430:	ee13 ea10 	vmov	lr, s6
 8000434:	fb04 760e 	mla	r6, r4, lr, r7
 8000438:	fb04 771e 	mls	r7, r4, lr, r7
 800043c:	ee12 ea90 	vmov	lr, s5
 8000440:	fb01 c40e 	mla	r4, r1, lr, ip
 8000444:	fb01 c51e 	mls	r5, r1, lr, ip
 8000448:	ec45 4a38 	vmov	s17, s18, r4, r5
 800044c:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000450:	ec49 8a3a 	vmov	s21, s22, r8, r9
 8000454:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000458:	f8d0 4000 	ldr.w	r4, [r0]
 800045c:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8000460:	f8d0 6020 	ldr.w	r6, [r0, #32]
 8000464:	f8d0 7030 	ldr.w	r7, [r0, #48]	; 0x30
 8000468:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 800046c:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 8000470:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
 8000474:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
 8000478:	ee11 ea10 	vmov	lr, s2
 800047c:	fb08 410e 	mla	r1, r8, lr, r4
 8000480:	fb08 481e 	mls	r8, r8, lr, r4
 8000484:	fb09 540e 	mla	r4, r9, lr, r5
 8000488:	fb09 591e 	mls	r9, r9, lr, r5
 800048c:	fb0a 650e 	mla	r5, sl, lr, r6
 8000490:	fb0a 6a1e 	mls	sl, sl, lr, r6
 8000494:	fb0b 760e 	mla	r6, fp, lr, r7
 8000498:	fb0b 7b1e 	mls	fp, fp, lr, r7
 800049c:	fb51 f712 	smmulr	r7, r1, r2
 80004a0:	fb07 1113 	mls	r1, r7, r3, r1
 80004a4:	fb54 f712 	smmulr	r7, r4, r2
 80004a8:	fb07 4413 	mls	r4, r7, r3, r4
 80004ac:	fb55 f712 	smmulr	r7, r5, r2
 80004b0:	fb07 5513 	mls	r5, r7, r3, r5
 80004b4:	fb56 f712 	smmulr	r7, r6, r2
 80004b8:	fb07 6613 	mls	r6, r7, r3, r6
 80004bc:	fb58 f712 	smmulr	r7, r8, r2
 80004c0:	fb07 8813 	mls	r8, r7, r3, r8
 80004c4:	fb59 f712 	smmulr	r7, r9, r2
 80004c8:	fb07 9913 	mls	r9, r7, r3, r9
 80004cc:	fb5a f712 	smmulr	r7, sl, r2
 80004d0:	fb07 aa13 	mls	sl, r7, r3, sl
 80004d4:	fb5b f712 	smmulr	r7, fp, r2
 80004d8:	fb07 bb13 	mls	fp, r7, r3, fp
 80004dc:	ee11 ea90 	vmov	lr, s3
 80004e0:	fb05 1c0e 	mla	ip, r5, lr, r1
 80004e4:	fb05 171e 	mls	r7, r5, lr, r1
 80004e8:	fb06 410e 	mla	r1, r6, lr, r4
 80004ec:	fb06 441e 	mls	r4, r6, lr, r4
 80004f0:	ee12 ea10 	vmov	lr, s4
 80004f4:	fb0a 860e 	mla	r6, sl, lr, r8
 80004f8:	fb0a 851e 	mls	r5, sl, lr, r8
 80004fc:	fb0b 9a0e 	mla	sl, fp, lr, r9
 8000500:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000504:	ee13 ea90 	vmov	lr, s7
 8000508:	fb0a 680e 	mla	r8, sl, lr, r6
 800050c:	fb0a 691e 	mls	r9, sl, lr, r6
 8000510:	ee14 ea10 	vmov	lr, s8
 8000514:	fb0b 5a0e 	mla	sl, fp, lr, r5
 8000518:	fb0b 5b1e 	mls	fp, fp, lr, r5
 800051c:	ee13 ea10 	vmov	lr, s6
 8000520:	fb04 760e 	mla	r6, r4, lr, r7
 8000524:	fb04 771e 	mls	r7, r4, lr, r7
 8000528:	ee12 ea90 	vmov	lr, s5
 800052c:	fb01 c40e 	mla	r4, r1, lr, ip
 8000530:	fb01 c51e 	mls	r5, r1, lr, ip
 8000534:	ee19 ca10 	vmov	ip, s18
 8000538:	ee15 ea10 	vmov	lr, s10
 800053c:	fb0c 510e 	mla	r1, ip, lr, r5
 8000540:	fb0c 5c1e 	mls	ip, ip, lr, r5
 8000544:	fb51 fe12 	smmulr	lr, r1, r2
 8000548:	fb0e 1113 	mls	r1, lr, r3, r1
 800054c:	fb5c fe12 	smmulr	lr, ip, r2
 8000550:	fb0e cc13 	mls	ip, lr, r3, ip
 8000554:	f8c0 c018 	str.w	ip, [r0, #24]
 8000558:	f8c0 1010 	str.w	r1, [r0, #16]
 800055c:	ee19 ca90 	vmov	ip, s19
 8000560:	ee15 ea90 	vmov	lr, s11
 8000564:	fb0c 610e 	mla	r1, ip, lr, r6
 8000568:	fb0c 6c1e 	mls	ip, ip, lr, r6
 800056c:	fb51 fe12 	smmulr	lr, r1, r2
 8000570:	fb0e 1113 	mls	r1, lr, r3, r1
 8000574:	fb5c fe12 	smmulr	lr, ip, r2
 8000578:	fb0e cc13 	mls	ip, lr, r3, ip
 800057c:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 8000580:	f8c0 1020 	str.w	r1, [r0, #32]
 8000584:	ee1a ca10 	vmov	ip, s20
 8000588:	ee16 ea10 	vmov	lr, s12
 800058c:	fb0c 710e 	mla	r1, ip, lr, r7
 8000590:	fb0c 7c1e 	mls	ip, ip, lr, r7
 8000594:	fb51 fe12 	smmulr	lr, r1, r2
 8000598:	fb0e 1113 	mls	r1, lr, r3, r1
 800059c:	fb5c fe12 	smmulr	lr, ip, r2
 80005a0:	fb0e cc13 	mls	ip, lr, r3, ip
 80005a4:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 80005a8:	f8c0 1030 	str.w	r1, [r0, #48]	; 0x30
 80005ac:	ee1a ca90 	vmov	ip, s21
 80005b0:	ee16 ea90 	vmov	lr, s13
 80005b4:	fb0c 810e 	mla	r1, ip, lr, r8
 80005b8:	fb0c 8c1e 	mls	ip, ip, lr, r8
 80005bc:	fb51 fe12 	smmulr	lr, r1, r2
 80005c0:	fb0e 1113 	mls	r1, lr, r3, r1
 80005c4:	fb5c fe12 	smmulr	lr, ip, r2
 80005c8:	fb0e cc13 	mls	ip, lr, r3, ip
 80005cc:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 80005d0:	f8c0 1040 	str.w	r1, [r0, #64]	; 0x40
 80005d4:	ee1b ca10 	vmov	ip, s22
 80005d8:	ee17 ea10 	vmov	lr, s14
 80005dc:	fb0c 910e 	mla	r1, ip, lr, r9
 80005e0:	fb0c 9c1e 	mls	ip, ip, lr, r9
 80005e4:	fb51 fe12 	smmulr	lr, r1, r2
 80005e8:	fb0e 1113 	mls	r1, lr, r3, r1
 80005ec:	fb5c fe12 	smmulr	lr, ip, r2
 80005f0:	fb0e cc13 	mls	ip, lr, r3, ip
 80005f4:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
 80005f8:	f8c0 1050 	str.w	r1, [r0, #80]	; 0x50
 80005fc:	ee1b ca90 	vmov	ip, s23
 8000600:	ee17 ea90 	vmov	lr, s15
 8000604:	fb0c a10e 	mla	r1, ip, lr, sl
 8000608:	fb0c ac1e 	mls	ip, ip, lr, sl
 800060c:	fb51 fe12 	smmulr	lr, r1, r2
 8000610:	fb0e 1113 	mls	r1, lr, r3, r1
 8000614:	fb5c fe12 	smmulr	lr, ip, r2
 8000618:	fb0e cc13 	mls	ip, lr, r3, ip
 800061c:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
 8000620:	f8c0 1060 	str.w	r1, [r0, #96]	; 0x60
 8000624:	ee1c ca10 	vmov	ip, s24
 8000628:	ee18 ea10 	vmov	lr, s16
 800062c:	fb0c b10e 	mla	r1, ip, lr, fp
 8000630:	fb0c bc1e 	mls	ip, ip, lr, fp
 8000634:	fb51 fe12 	smmulr	lr, r1, r2
 8000638:	fb0e 1113 	mls	r1, lr, r3, r1
 800063c:	fb5c fe12 	smmulr	lr, ip, r2
 8000640:	fb0e cc13 	mls	ip, lr, r3, ip
 8000644:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
 8000648:	f8c0 1070 	str.w	r1, [r0, #112]	; 0x70
 800064c:	ee18 ca90 	vmov	ip, s17
 8000650:	ee14 ea90 	vmov	lr, s9
 8000654:	fb0c 410e 	mla	r1, ip, lr, r4
 8000658:	fb0c 4c1e 	mls	ip, ip, lr, r4
 800065c:	fb51 fe12 	smmulr	lr, r1, r2
 8000660:	fb0e 1113 	mls	r1, lr, r3, r1
 8000664:	fb5c fe12 	smmulr	lr, ip, r2
 8000668:	fb0e cc13 	mls	ip, lr, r3, ip
 800066c:	f8c0 c008 	str.w	ip, [r0, #8]
 8000670:	f840 1b04 	str.w	r1, [r0], #4
 8000674:	f8d0 4008 	ldr.w	r4, [r0, #8]
 8000678:	f8d0 5018 	ldr.w	r5, [r0, #24]
 800067c:	f8d0 6028 	ldr.w	r6, [r0, #40]	; 0x28
 8000680:	f8d0 7038 	ldr.w	r7, [r0, #56]	; 0x38
 8000684:	f8d0 8048 	ldr.w	r8, [r0, #72]	; 0x48
 8000688:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
 800068c:	f8d0 a068 	ldr.w	sl, [r0, #104]	; 0x68
 8000690:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8000694:	ee11 ea10 	vmov	lr, s2
 8000698:	fb08 410e 	mla	r1, r8, lr, r4
 800069c:	fb08 481e 	mls	r8, r8, lr, r4
 80006a0:	fb09 540e 	mla	r4, r9, lr, r5
 80006a4:	fb09 591e 	mls	r9, r9, lr, r5
 80006a8:	fb0a 650e 	mla	r5, sl, lr, r6
 80006ac:	fb0a 6a1e 	mls	sl, sl, lr, r6
 80006b0:	fb0b 760e 	mla	r6, fp, lr, r7
 80006b4:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80006b8:	fb51 f712 	smmulr	r7, r1, r2
 80006bc:	fb07 1113 	mls	r1, r7, r3, r1
 80006c0:	fb54 f712 	smmulr	r7, r4, r2
 80006c4:	fb07 4413 	mls	r4, r7, r3, r4
 80006c8:	fb55 f712 	smmulr	r7, r5, r2
 80006cc:	fb07 5513 	mls	r5, r7, r3, r5
 80006d0:	fb56 f712 	smmulr	r7, r6, r2
 80006d4:	fb07 6613 	mls	r6, r7, r3, r6
 80006d8:	fb58 f712 	smmulr	r7, r8, r2
 80006dc:	fb07 8813 	mls	r8, r7, r3, r8
 80006e0:	fb59 f712 	smmulr	r7, r9, r2
 80006e4:	fb07 9913 	mls	r9, r7, r3, r9
 80006e8:	fb5a f712 	smmulr	r7, sl, r2
 80006ec:	fb07 aa13 	mls	sl, r7, r3, sl
 80006f0:	fb5b f712 	smmulr	r7, fp, r2
 80006f4:	fb07 bb13 	mls	fp, r7, r3, fp
 80006f8:	ee11 ea90 	vmov	lr, s3
 80006fc:	fb05 1c0e 	mla	ip, r5, lr, r1
 8000700:	fb05 171e 	mls	r7, r5, lr, r1
 8000704:	fb06 410e 	mla	r1, r6, lr, r4
 8000708:	fb06 441e 	mls	r4, r6, lr, r4
 800070c:	ee12 ea10 	vmov	lr, s4
 8000710:	fb0a 860e 	mla	r6, sl, lr, r8
 8000714:	fb0a 851e 	mls	r5, sl, lr, r8
 8000718:	fb0b 9a0e 	mla	sl, fp, lr, r9
 800071c:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000720:	ee13 ea90 	vmov	lr, s7
 8000724:	fb0a 680e 	mla	r8, sl, lr, r6
 8000728:	fb0a 691e 	mls	r9, sl, lr, r6
 800072c:	ee14 ea10 	vmov	lr, s8
 8000730:	fb0b 5a0e 	mla	sl, fp, lr, r5
 8000734:	fb0b 5b1e 	mls	fp, fp, lr, r5
 8000738:	ee13 ea10 	vmov	lr, s6
 800073c:	fb04 760e 	mla	r6, r4, lr, r7
 8000740:	fb04 771e 	mls	r7, r4, lr, r7
 8000744:	ee12 ea90 	vmov	lr, s5
 8000748:	fb01 c40e 	mla	r4, r1, lr, ip
 800074c:	fb01 c51e 	mls	r5, r1, lr, ip
 8000750:	ec45 4a38 	vmov	s17, s18, r4, r5
 8000754:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000758:	ec49 8a3a 	vmov	s21, s22, r8, r9
 800075c:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000760:	f8d0 4000 	ldr.w	r4, [r0]
 8000764:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8000768:	f8d0 6020 	ldr.w	r6, [r0, #32]
 800076c:	f8d0 7030 	ldr.w	r7, [r0, #48]	; 0x30
 8000770:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8000774:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
 8000778:	f8d0 a060 	ldr.w	sl, [r0, #96]	; 0x60
 800077c:	f8d0 b070 	ldr.w	fp, [r0, #112]	; 0x70
 8000780:	ee11 ea10 	vmov	lr, s2
 8000784:	fb08 410e 	mla	r1, r8, lr, r4
 8000788:	fb08 481e 	mls	r8, r8, lr, r4
 800078c:	fb09 540e 	mla	r4, r9, lr, r5
 8000790:	fb09 591e 	mls	r9, r9, lr, r5
 8000794:	fb0a 650e 	mla	r5, sl, lr, r6
 8000798:	fb0a 6a1e 	mls	sl, sl, lr, r6
 800079c:	fb0b 760e 	mla	r6, fp, lr, r7
 80007a0:	fb0b 7b1e 	mls	fp, fp, lr, r7
 80007a4:	fb51 f712 	smmulr	r7, r1, r2
 80007a8:	fb07 1113 	mls	r1, r7, r3, r1
 80007ac:	fb54 f712 	smmulr	r7, r4, r2
 80007b0:	fb07 4413 	mls	r4, r7, r3, r4
 80007b4:	fb55 f712 	smmulr	r7, r5, r2
 80007b8:	fb07 5513 	mls	r5, r7, r3, r5
 80007bc:	fb56 f712 	smmulr	r7, r6, r2
 80007c0:	fb07 6613 	mls	r6, r7, r3, r6
 80007c4:	fb58 f712 	smmulr	r7, r8, r2
 80007c8:	fb07 8813 	mls	r8, r7, r3, r8
 80007cc:	fb59 f712 	smmulr	r7, r9, r2
 80007d0:	fb07 9913 	mls	r9, r7, r3, r9
 80007d4:	fb5a f712 	smmulr	r7, sl, r2
 80007d8:	fb07 aa13 	mls	sl, r7, r3, sl
 80007dc:	fb5b f712 	smmulr	r7, fp, r2
 80007e0:	fb07 bb13 	mls	fp, r7, r3, fp
 80007e4:	ee11 ea90 	vmov	lr, s3
 80007e8:	fb05 1c0e 	mla	ip, r5, lr, r1
 80007ec:	fb05 171e 	mls	r7, r5, lr, r1
 80007f0:	fb06 410e 	mla	r1, r6, lr, r4
 80007f4:	fb06 441e 	mls	r4, r6, lr, r4
 80007f8:	ee12 ea10 	vmov	lr, s4
 80007fc:	fb0a 860e 	mla	r6, sl, lr, r8
 8000800:	fb0a 851e 	mls	r5, sl, lr, r8
 8000804:	fb0b 9a0e 	mla	sl, fp, lr, r9
 8000808:	fb0b 9b1e 	mls	fp, fp, lr, r9
 800080c:	ee13 ea90 	vmov	lr, s7
 8000810:	fb0a 680e 	mla	r8, sl, lr, r6
 8000814:	fb0a 691e 	mls	r9, sl, lr, r6
 8000818:	ee14 ea10 	vmov	lr, s8
 800081c:	fb0b 5a0e 	mla	sl, fp, lr, r5
 8000820:	fb0b 5b1e 	mls	fp, fp, lr, r5
 8000824:	ee13 ea10 	vmov	lr, s6
 8000828:	fb04 760e 	mla	r6, r4, lr, r7
 800082c:	fb04 771e 	mls	r7, r4, lr, r7
 8000830:	ee12 ea90 	vmov	lr, s5
 8000834:	fb01 c40e 	mla	r4, r1, lr, ip
 8000838:	fb01 c51e 	mls	r5, r1, lr, ip
 800083c:	ee19 ca10 	vmov	ip, s18
 8000840:	ee15 ea10 	vmov	lr, s10
 8000844:	fb0c 510e 	mla	r1, ip, lr, r5
 8000848:	fb0c 5c1e 	mls	ip, ip, lr, r5
 800084c:	fb51 fe12 	smmulr	lr, r1, r2
 8000850:	fb0e 1113 	mls	r1, lr, r3, r1
 8000854:	fb5c fe12 	smmulr	lr, ip, r2
 8000858:	fb0e cc13 	mls	ip, lr, r3, ip
 800085c:	f8c0 c018 	str.w	ip, [r0, #24]
 8000860:	f8c0 1010 	str.w	r1, [r0, #16]
 8000864:	ee19 ca90 	vmov	ip, s19
 8000868:	ee15 ea90 	vmov	lr, s11
 800086c:	fb0c 610e 	mla	r1, ip, lr, r6
 8000870:	fb0c 6c1e 	mls	ip, ip, lr, r6
 8000874:	fb51 fe12 	smmulr	lr, r1, r2
 8000878:	fb0e 1113 	mls	r1, lr, r3, r1
 800087c:	fb5c fe12 	smmulr	lr, ip, r2
 8000880:	fb0e cc13 	mls	ip, lr, r3, ip
 8000884:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 8000888:	f8c0 1020 	str.w	r1, [r0, #32]
 800088c:	ee1a ca10 	vmov	ip, s20
 8000890:	ee16 ea10 	vmov	lr, s12
 8000894:	fb0c 710e 	mla	r1, ip, lr, r7
 8000898:	fb0c 7c1e 	mls	ip, ip, lr, r7
 800089c:	fb51 fe12 	smmulr	lr, r1, r2
 80008a0:	fb0e 1113 	mls	r1, lr, r3, r1
 80008a4:	fb5c fe12 	smmulr	lr, ip, r2
 80008a8:	fb0e cc13 	mls	ip, lr, r3, ip
 80008ac:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
 80008b0:	f8c0 1030 	str.w	r1, [r0, #48]	; 0x30
 80008b4:	ee1a ca90 	vmov	ip, s21
 80008b8:	ee16 ea90 	vmov	lr, s13
 80008bc:	fb0c 810e 	mla	r1, ip, lr, r8
 80008c0:	fb0c 8c1e 	mls	ip, ip, lr, r8
 80008c4:	fb51 fe12 	smmulr	lr, r1, r2
 80008c8:	fb0e 1113 	mls	r1, lr, r3, r1
 80008cc:	fb5c fe12 	smmulr	lr, ip, r2
 80008d0:	fb0e cc13 	mls	ip, lr, r3, ip
 80008d4:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
 80008d8:	f8c0 1040 	str.w	r1, [r0, #64]	; 0x40
 80008dc:	ee1b ca10 	vmov	ip, s22
 80008e0:	ee17 ea10 	vmov	lr, s14
 80008e4:	fb0c 910e 	mla	r1, ip, lr, r9
 80008e8:	fb0c 9c1e 	mls	ip, ip, lr, r9
 80008ec:	fb51 fe12 	smmulr	lr, r1, r2
 80008f0:	fb0e 1113 	mls	r1, lr, r3, r1
 80008f4:	fb5c fe12 	smmulr	lr, ip, r2
 80008f8:	fb0e cc13 	mls	ip, lr, r3, ip
 80008fc:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
 8000900:	f8c0 1050 	str.w	r1, [r0, #80]	; 0x50
 8000904:	ee1b ca90 	vmov	ip, s23
 8000908:	ee17 ea90 	vmov	lr, s15
 800090c:	fb0c a10e 	mla	r1, ip, lr, sl
 8000910:	fb0c ac1e 	mls	ip, ip, lr, sl
 8000914:	fb51 fe12 	smmulr	lr, r1, r2
 8000918:	fb0e 1113 	mls	r1, lr, r3, r1
 800091c:	fb5c fe12 	smmulr	lr, ip, r2
 8000920:	fb0e cc13 	mls	ip, lr, r3, ip
 8000924:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
 8000928:	f8c0 1060 	str.w	r1, [r0, #96]	; 0x60
 800092c:	ee1c ca10 	vmov	ip, s24
 8000930:	ee18 ea10 	vmov	lr, s16
 8000934:	fb0c b10e 	mla	r1, ip, lr, fp
 8000938:	fb0c bc1e 	mls	ip, ip, lr, fp
 800093c:	fb51 fe12 	smmulr	lr, r1, r2
 8000940:	fb0e 1113 	mls	r1, lr, r3, r1
 8000944:	fb5c fe12 	smmulr	lr, ip, r2
 8000948:	fb0e cc13 	mls	ip, lr, r3, ip
 800094c:	f8c0 c078 	str.w	ip, [r0, #120]	; 0x78
 8000950:	f8c0 1070 	str.w	r1, [r0, #112]	; 0x70
 8000954:	ee18 ca90 	vmov	ip, s17
 8000958:	ee14 ea90 	vmov	lr, s9
 800095c:	fb0c 410e 	mla	r1, ip, lr, r4
 8000960:	fb0c 4c1e 	mls	ip, ip, lr, r4
 8000964:	fb51 fe12 	smmulr	lr, r1, r2
 8000968:	fb0e 1113 	mls	r1, lr, r3, r1
 800096c:	fb5c fe12 	smmulr	lr, ip, r2
 8000970:	fb0e cc13 	mls	ip, lr, r3, ip
 8000974:	f8c0 c008 	str.w	ip, [r0, #8]
 8000978:	f840 1b04 	str.w	r1, [r0], #4
 800097c:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8000980:	ee1c ca90 	vmov	ip, s25
 8000984:	ebb0 0f0c 	cmp.w	r0, ip
 8000988:	f47f acea 	bne.w	8000360 <_fnt_3_4_5_6>
 800098c:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000990:	ea4f 0100 	mov.w	r1, r0

08000994 <_fnt_to_16_bit>:
 8000994:	f8d0 3004 	ldr.w	r3, [r0, #4]
 8000998:	f8d0 4008 	ldr.w	r4, [r0, #8]
 800099c:	f8d0 500c 	ldr.w	r5, [r0, #12]
 80009a0:	f8d0 6010 	ldr.w	r6, [r0, #16]
 80009a4:	f8d0 7014 	ldr.w	r7, [r0, #20]
 80009a8:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80009ac:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80009b0:	f850 2b20 	ldr.w	r2, [r0], #32
 80009b4:	f8a1 3002 	strh.w	r3, [r1, #2]
 80009b8:	f8a1 4004 	strh.w	r4, [r1, #4]
 80009bc:	f8a1 5006 	strh.w	r5, [r1, #6]
 80009c0:	f8a1 6008 	strh.w	r6, [r1, #8]
 80009c4:	f8a1 700a 	strh.w	r7, [r1, #10]
 80009c8:	f8a1 800c 	strh.w	r8, [r1, #12]
 80009cc:	f8a1 900e 	strh.w	r9, [r1, #14]
 80009d0:	f821 2b10 	strh.w	r2, [r1], #16
 80009d4:	ebb0 0f0c 	cmp.w	r0, ip
 80009d8:	f47f afdc 	bne.w	8000994 <_fnt_to_16_bit>
 80009dc:	ecbd 8a0c 	vpop	{s16-s27}
 80009e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009e4 <__asm_ifnt_257>:
 80009e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e8:	ed2d 8a09 	vpush	{s16-s24}
 80009ec:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80009f0:	ee00 ca90 	vmov	s1, ip

080009f4 <_ifnt_7_6_5_4>:
 80009f4:	ecb1 1a0f 	vldmia	r1!, {s2-s16}
 80009f8:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 80009fc:	f8d0 5048 	ldr.w	r5, [r0, #72]	; 0x48
 8000a00:	f8d0 6050 	ldr.w	r6, [r0, #80]	; 0x50
 8000a04:	f8d0 7058 	ldr.w	r7, [r0, #88]	; 0x58
 8000a08:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8000a0c:	f8d0 9068 	ldr.w	r9, [r0, #104]	; 0x68
 8000a10:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
 8000a14:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8000a18:	442c      	add	r4, r5
 8000a1a:	443e      	add	r6, r7
 8000a1c:	44c8      	add	r8, r9
 8000a1e:	44da      	add	sl, fp
 8000a20:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000a24:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000a28:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000a2c:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000a30:	ee13 ea10 	vmov	lr, s6
 8000a34:	fb05 f50e 	mul.w	r5, r5, lr
 8000a38:	ee14 ea10 	vmov	lr, s8
 8000a3c:	fb09 f90e 	mul.w	r9, r9, lr
 8000a40:	4434      	add	r4, r6
 8000a42:	44d0      	add	r8, sl
 8000a44:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000a48:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000a4c:	ee13 ea90 	vmov	lr, s7
 8000a50:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000a54:	fb07 571e 	mls	r7, r7, lr, r5
 8000a58:	ee14 ea90 	vmov	lr, s9
 8000a5c:	fb0b 950e 	mla	r5, fp, lr, r9
 8000a60:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000a64:	ee16 ea10 	vmov	lr, s12
 8000a68:	fb06 f60e 	mul.w	r6, r6, lr
 8000a6c:	fb07 f70e 	mul.w	r7, r7, lr
 8000a70:	ee16 ea90 	vmov	lr, s13
 8000a74:	fb0a fa0e 	mul.w	sl, sl, lr
 8000a78:	fb0b fb0e 	mul.w	fp, fp, lr
 8000a7c:	fb54 fe12 	smmulr	lr, r4, r2
 8000a80:	fb0e 4413 	mls	r4, lr, r3, r4
 8000a84:	fb5c fe12 	smmulr	lr, ip, r2
 8000a88:	fb0e cc13 	mls	ip, lr, r3, ip
 8000a8c:	fb56 fe12 	smmulr	lr, r6, r2
 8000a90:	fb0e 6613 	mls	r6, lr, r3, r6
 8000a94:	fb57 fe12 	smmulr	lr, r7, r2
 8000a98:	fb0e 7713 	mls	r7, lr, r3, r7
 8000a9c:	fb58 fe12 	smmulr	lr, r8, r2
 8000aa0:	fb0e 8813 	mls	r8, lr, r3, r8
 8000aa4:	fb55 fe12 	smmulr	lr, r5, r2
 8000aa8:	fb0e 5513 	mls	r5, lr, r3, r5
 8000aac:	fb5a fe12 	smmulr	lr, sl, r2
 8000ab0:	fb0e aa13 	mls	sl, lr, r3, sl
 8000ab4:	fb5b fe12 	smmulr	lr, fp, r2
 8000ab8:	fb0e bb13 	mls	fp, lr, r3, fp
 8000abc:	4444      	add	r4, r8
 8000abe:	4456      	add	r6, sl
 8000ac0:	44ac      	add	ip, r5
 8000ac2:	445f      	add	r7, fp
 8000ac4:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000ac8:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000acc:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000ad0:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000ad4:	ec4c 4a38 	vmov	s17, s18, r4, ip
 8000ad8:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000adc:	ec45 8a3a 	vmov	s21, s22, r8, r5
 8000ae0:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000ae4:	f8d0 4000 	ldr.w	r4, [r0]
 8000ae8:	f8d0 5008 	ldr.w	r5, [r0, #8]
 8000aec:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8000af0:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000af4:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8000af8:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
 8000afc:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8000b00:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8000b04:	442c      	add	r4, r5
 8000b06:	443e      	add	r6, r7
 8000b08:	44c8      	add	r8, r9
 8000b0a:	44da      	add	sl, fp
 8000b0c:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000b10:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000b14:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000b18:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000b1c:	ee11 ea10 	vmov	lr, s2
 8000b20:	fb05 f50e 	mul.w	r5, r5, lr
 8000b24:	ee12 ea10 	vmov	lr, s4
 8000b28:	fb09 f90e 	mul.w	r9, r9, lr
 8000b2c:	4434      	add	r4, r6
 8000b2e:	44d0      	add	r8, sl
 8000b30:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000b34:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000b38:	ee11 ea90 	vmov	lr, s3
 8000b3c:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000b40:	fb07 571e 	mls	r7, r7, lr, r5
 8000b44:	ee12 ea90 	vmov	lr, s5
 8000b48:	fb0b 950e 	mla	r5, fp, lr, r9
 8000b4c:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000b50:	ee15 ea10 	vmov	lr, s10
 8000b54:	fb06 f60e 	mul.w	r6, r6, lr
 8000b58:	fb07 f70e 	mul.w	r7, r7, lr
 8000b5c:	ee15 ea90 	vmov	lr, s11
 8000b60:	fb0a fa0e 	mul.w	sl, sl, lr
 8000b64:	fb0b fb0e 	mul.w	fp, fp, lr
 8000b68:	fb54 fe12 	smmulr	lr, r4, r2
 8000b6c:	fb0e 4413 	mls	r4, lr, r3, r4
 8000b70:	fb5c fe12 	smmulr	lr, ip, r2
 8000b74:	fb0e cc13 	mls	ip, lr, r3, ip
 8000b78:	fb56 fe12 	smmulr	lr, r6, r2
 8000b7c:	fb0e 6613 	mls	r6, lr, r3, r6
 8000b80:	fb57 fe12 	smmulr	lr, r7, r2
 8000b84:	fb0e 7713 	mls	r7, lr, r3, r7
 8000b88:	fb58 fe12 	smmulr	lr, r8, r2
 8000b8c:	fb0e 8813 	mls	r8, lr, r3, r8
 8000b90:	fb55 fe12 	smmulr	lr, r5, r2
 8000b94:	fb0e 5513 	mls	r5, lr, r3, r5
 8000b98:	fb5a fe12 	smmulr	lr, sl, r2
 8000b9c:	fb0e aa13 	mls	sl, lr, r3, sl
 8000ba0:	fb5b fe12 	smmulr	lr, fp, r2
 8000ba4:	fb0e bb13 	mls	fp, lr, r3, fp
 8000ba8:	4444      	add	r4, r8
 8000baa:	4456      	add	r6, sl
 8000bac:	44ac      	add	ip, r5
 8000bae:	445f      	add	r7, fp
 8000bb0:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000bb4:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000bb8:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000bbc:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000bc0:	ee17 ea10 	vmov	lr, s14
 8000bc4:	fb08 f80e 	mul.w	r8, r8, lr
 8000bc8:	fb05 f50e 	mul.w	r5, r5, lr
 8000bcc:	fb0a fa0e 	mul.w	sl, sl, lr
 8000bd0:	fb0b fb0e 	mul.w	fp, fp, lr
 8000bd4:	ee18 ea10 	vmov	lr, s16
 8000bd8:	ee19 9a10 	vmov	r9, s18
 8000bdc:	eb0c 0c09 	add.w	ip, ip, r9
 8000be0:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8000be4:	fb0e f909 	mul.w	r9, lr, r9
 8000be8:	f8c0 c008 	str.w	ip, [r0, #8]
 8000bec:	f8c0 9048 	str.w	r9, [r0, #72]	; 0x48
 8000bf0:	ee19 9a90 	vmov	r9, s19
 8000bf4:	eb06 0609 	add.w	r6, r6, r9
 8000bf8:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8000bfc:	fb0e f909 	mul.w	r9, lr, r9
 8000c00:	f8c0 6010 	str.w	r6, [r0, #16]
 8000c04:	f8c0 9050 	str.w	r9, [r0, #80]	; 0x50
 8000c08:	ee1a 9a10 	vmov	r9, s20
 8000c0c:	eb07 0709 	add.w	r7, r7, r9
 8000c10:	eba7 0949 	sub.w	r9, r7, r9, lsl #1
 8000c14:	fb0e f909 	mul.w	r9, lr, r9
 8000c18:	f8c0 7018 	str.w	r7, [r0, #24]
 8000c1c:	f8c0 9058 	str.w	r9, [r0, #88]	; 0x58
 8000c20:	ee17 ca90 	vmov	ip, s15
 8000c24:	ee1a 9a90 	vmov	r9, s21
 8000c28:	fb0c 8609 	mla	r6, ip, r9, r8
 8000c2c:	fb0c 8919 	mls	r9, ip, r9, r8
 8000c30:	fb0e f909 	mul.w	r9, lr, r9
 8000c34:	f8c0 6020 	str.w	r6, [r0, #32]
 8000c38:	f8c0 9060 	str.w	r9, [r0, #96]	; 0x60
 8000c3c:	ee1b 9a10 	vmov	r9, s22
 8000c40:	fb0c 5609 	mla	r6, ip, r9, r5
 8000c44:	fb0c 5919 	mls	r9, ip, r9, r5
 8000c48:	fb0e f909 	mul.w	r9, lr, r9
 8000c4c:	f8c0 6028 	str.w	r6, [r0, #40]	; 0x28
 8000c50:	f8c0 9068 	str.w	r9, [r0, #104]	; 0x68
 8000c54:	ee1b 9a90 	vmov	r9, s23
 8000c58:	fb0c a609 	mla	r6, ip, r9, sl
 8000c5c:	fb0c a919 	mls	r9, ip, r9, sl
 8000c60:	fb0e f909 	mul.w	r9, lr, r9
 8000c64:	f8c0 6030 	str.w	r6, [r0, #48]	; 0x30
 8000c68:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
 8000c6c:	ee1c 9a10 	vmov	r9, s24
 8000c70:	fb0c b609 	mla	r6, ip, r9, fp
 8000c74:	fb0c b919 	mls	r9, ip, r9, fp
 8000c78:	fb0e f909 	mul.w	r9, lr, r9
 8000c7c:	f8c0 6038 	str.w	r6, [r0, #56]	; 0x38
 8000c80:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
 8000c84:	ee18 9a90 	vmov	r9, s17
 8000c88:	eb04 0409 	add.w	r4, r4, r9
 8000c8c:	eba4 0949 	sub.w	r9, r4, r9, lsl #1
 8000c90:	fb0e f909 	mul.w	r9, lr, r9
 8000c94:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
 8000c98:	f840 4b04 	str.w	r4, [r0], #4
 8000c9c:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 8000ca0:	f8d0 5048 	ldr.w	r5, [r0, #72]	; 0x48
 8000ca4:	f8d0 6050 	ldr.w	r6, [r0, #80]	; 0x50
 8000ca8:	f8d0 7058 	ldr.w	r7, [r0, #88]	; 0x58
 8000cac:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8000cb0:	f8d0 9068 	ldr.w	r9, [r0, #104]	; 0x68
 8000cb4:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
 8000cb8:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8000cbc:	442c      	add	r4, r5
 8000cbe:	443e      	add	r6, r7
 8000cc0:	44c8      	add	r8, r9
 8000cc2:	44da      	add	sl, fp
 8000cc4:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000cc8:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000ccc:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000cd0:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000cd4:	ee13 ea10 	vmov	lr, s6
 8000cd8:	fb05 f50e 	mul.w	r5, r5, lr
 8000cdc:	ee14 ea10 	vmov	lr, s8
 8000ce0:	fb09 f90e 	mul.w	r9, r9, lr
 8000ce4:	4434      	add	r4, r6
 8000ce6:	44d0      	add	r8, sl
 8000ce8:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000cec:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000cf0:	ee13 ea90 	vmov	lr, s7
 8000cf4:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000cf8:	fb07 571e 	mls	r7, r7, lr, r5
 8000cfc:	ee14 ea90 	vmov	lr, s9
 8000d00:	fb0b 950e 	mla	r5, fp, lr, r9
 8000d04:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000d08:	ee16 ea10 	vmov	lr, s12
 8000d0c:	fb06 f60e 	mul.w	r6, r6, lr
 8000d10:	fb07 f70e 	mul.w	r7, r7, lr
 8000d14:	ee16 ea90 	vmov	lr, s13
 8000d18:	fb0a fa0e 	mul.w	sl, sl, lr
 8000d1c:	fb0b fb0e 	mul.w	fp, fp, lr
 8000d20:	fb54 fe12 	smmulr	lr, r4, r2
 8000d24:	fb0e 4413 	mls	r4, lr, r3, r4
 8000d28:	fb5c fe12 	smmulr	lr, ip, r2
 8000d2c:	fb0e cc13 	mls	ip, lr, r3, ip
 8000d30:	fb56 fe12 	smmulr	lr, r6, r2
 8000d34:	fb0e 6613 	mls	r6, lr, r3, r6
 8000d38:	fb57 fe12 	smmulr	lr, r7, r2
 8000d3c:	fb0e 7713 	mls	r7, lr, r3, r7
 8000d40:	fb58 fe12 	smmulr	lr, r8, r2
 8000d44:	fb0e 8813 	mls	r8, lr, r3, r8
 8000d48:	fb55 fe12 	smmulr	lr, r5, r2
 8000d4c:	fb0e 5513 	mls	r5, lr, r3, r5
 8000d50:	fb5a fe12 	smmulr	lr, sl, r2
 8000d54:	fb0e aa13 	mls	sl, lr, r3, sl
 8000d58:	fb5b fe12 	smmulr	lr, fp, r2
 8000d5c:	fb0e bb13 	mls	fp, lr, r3, fp
 8000d60:	4444      	add	r4, r8
 8000d62:	4456      	add	r6, sl
 8000d64:	44ac      	add	ip, r5
 8000d66:	445f      	add	r7, fp
 8000d68:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000d6c:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000d70:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000d74:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000d78:	ec4c 4a38 	vmov	s17, s18, r4, ip
 8000d7c:	ec47 6a39 	vmov	s19, s20, r6, r7
 8000d80:	ec45 8a3a 	vmov	s21, s22, r8, r5
 8000d84:	ec4b aa3b 	vmov	s23, s24, sl, fp
 8000d88:	f8d0 4000 	ldr.w	r4, [r0]
 8000d8c:	f8d0 5008 	ldr.w	r5, [r0, #8]
 8000d90:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8000d94:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000d98:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8000d9c:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
 8000da0:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8000da4:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8000da8:	442c      	add	r4, r5
 8000daa:	443e      	add	r6, r7
 8000dac:	44c8      	add	r8, r9
 8000dae:	44da      	add	sl, fp
 8000db0:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000db4:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000db8:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000dbc:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000dc0:	ee11 ea10 	vmov	lr, s2
 8000dc4:	fb05 f50e 	mul.w	r5, r5, lr
 8000dc8:	ee12 ea10 	vmov	lr, s4
 8000dcc:	fb09 f90e 	mul.w	r9, r9, lr
 8000dd0:	4434      	add	r4, r6
 8000dd2:	44d0      	add	r8, sl
 8000dd4:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000dd8:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000ddc:	ee11 ea90 	vmov	lr, s3
 8000de0:	fb07 5c0e 	mla	ip, r7, lr, r5
 8000de4:	fb07 571e 	mls	r7, r7, lr, r5
 8000de8:	ee12 ea90 	vmov	lr, s5
 8000dec:	fb0b 950e 	mla	r5, fp, lr, r9
 8000df0:	fb0b 9b1e 	mls	fp, fp, lr, r9
 8000df4:	ee15 ea10 	vmov	lr, s10
 8000df8:	fb06 f60e 	mul.w	r6, r6, lr
 8000dfc:	fb07 f70e 	mul.w	r7, r7, lr
 8000e00:	ee15 ea90 	vmov	lr, s11
 8000e04:	fb0a fa0e 	mul.w	sl, sl, lr
 8000e08:	fb0b fb0e 	mul.w	fp, fp, lr
 8000e0c:	fb54 fe12 	smmulr	lr, r4, r2
 8000e10:	fb0e 4413 	mls	r4, lr, r3, r4
 8000e14:	fb5c fe12 	smmulr	lr, ip, r2
 8000e18:	fb0e cc13 	mls	ip, lr, r3, ip
 8000e1c:	fb56 fe12 	smmulr	lr, r6, r2
 8000e20:	fb0e 6613 	mls	r6, lr, r3, r6
 8000e24:	fb57 fe12 	smmulr	lr, r7, r2
 8000e28:	fb0e 7713 	mls	r7, lr, r3, r7
 8000e2c:	fb58 fe12 	smmulr	lr, r8, r2
 8000e30:	fb0e 8813 	mls	r8, lr, r3, r8
 8000e34:	fb55 fe12 	smmulr	lr, r5, r2
 8000e38:	fb0e 5513 	mls	r5, lr, r3, r5
 8000e3c:	fb5a fe12 	smmulr	lr, sl, r2
 8000e40:	fb0e aa13 	mls	sl, lr, r3, sl
 8000e44:	fb5b fe12 	smmulr	lr, fp, r2
 8000e48:	fb0e bb13 	mls	fp, lr, r3, fp
 8000e4c:	4444      	add	r4, r8
 8000e4e:	4456      	add	r6, sl
 8000e50:	44ac      	add	ip, r5
 8000e52:	445f      	add	r7, fp
 8000e54:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000e58:	eba6 0a4a 	sub.w	sl, r6, sl, lsl #1
 8000e5c:	ebac 0545 	sub.w	r5, ip, r5, lsl #1
 8000e60:	eba7 0b4b 	sub.w	fp, r7, fp, lsl #1
 8000e64:	ee17 ea10 	vmov	lr, s14
 8000e68:	fb08 f80e 	mul.w	r8, r8, lr
 8000e6c:	fb05 f50e 	mul.w	r5, r5, lr
 8000e70:	fb0a fa0e 	mul.w	sl, sl, lr
 8000e74:	fb0b fb0e 	mul.w	fp, fp, lr
 8000e78:	ee18 ea10 	vmov	lr, s16
 8000e7c:	ee19 9a10 	vmov	r9, s18
 8000e80:	eb0c 0c09 	add.w	ip, ip, r9
 8000e84:	ebac 0949 	sub.w	r9, ip, r9, lsl #1
 8000e88:	fb0e f909 	mul.w	r9, lr, r9
 8000e8c:	f8c0 c008 	str.w	ip, [r0, #8]
 8000e90:	f8c0 9048 	str.w	r9, [r0, #72]	; 0x48
 8000e94:	ee19 9a90 	vmov	r9, s19
 8000e98:	eb06 0609 	add.w	r6, r6, r9
 8000e9c:	eba6 0949 	sub.w	r9, r6, r9, lsl #1
 8000ea0:	fb0e f909 	mul.w	r9, lr, r9
 8000ea4:	f8c0 6010 	str.w	r6, [r0, #16]
 8000ea8:	f8c0 9050 	str.w	r9, [r0, #80]	; 0x50
 8000eac:	ee1a 9a10 	vmov	r9, s20
 8000eb0:	eb07 0709 	add.w	r7, r7, r9
 8000eb4:	eba7 0949 	sub.w	r9, r7, r9, lsl #1
 8000eb8:	fb0e f909 	mul.w	r9, lr, r9
 8000ebc:	f8c0 7018 	str.w	r7, [r0, #24]
 8000ec0:	f8c0 9058 	str.w	r9, [r0, #88]	; 0x58
 8000ec4:	ee17 ca90 	vmov	ip, s15
 8000ec8:	ee1a 9a90 	vmov	r9, s21
 8000ecc:	fb0c 8609 	mla	r6, ip, r9, r8
 8000ed0:	fb0c 8919 	mls	r9, ip, r9, r8
 8000ed4:	fb0e f909 	mul.w	r9, lr, r9
 8000ed8:	f8c0 6020 	str.w	r6, [r0, #32]
 8000edc:	f8c0 9060 	str.w	r9, [r0, #96]	; 0x60
 8000ee0:	ee1b 9a10 	vmov	r9, s22
 8000ee4:	fb0c 5609 	mla	r6, ip, r9, r5
 8000ee8:	fb0c 5919 	mls	r9, ip, r9, r5
 8000eec:	fb0e f909 	mul.w	r9, lr, r9
 8000ef0:	f8c0 6028 	str.w	r6, [r0, #40]	; 0x28
 8000ef4:	f8c0 9068 	str.w	r9, [r0, #104]	; 0x68
 8000ef8:	ee1b 9a90 	vmov	r9, s23
 8000efc:	fb0c a609 	mla	r6, ip, r9, sl
 8000f00:	fb0c a919 	mls	r9, ip, r9, sl
 8000f04:	fb0e f909 	mul.w	r9, lr, r9
 8000f08:	f8c0 6030 	str.w	r6, [r0, #48]	; 0x30
 8000f0c:	f8c0 9070 	str.w	r9, [r0, #112]	; 0x70
 8000f10:	ee1c 9a10 	vmov	r9, s24
 8000f14:	fb0c b609 	mla	r6, ip, r9, fp
 8000f18:	fb0c b919 	mls	r9, ip, r9, fp
 8000f1c:	fb0e f909 	mul.w	r9, lr, r9
 8000f20:	f8c0 6038 	str.w	r6, [r0, #56]	; 0x38
 8000f24:	f8c0 9078 	str.w	r9, [r0, #120]	; 0x78
 8000f28:	ee18 9a90 	vmov	r9, s17
 8000f2c:	eb04 0409 	add.w	r4, r4, r9
 8000f30:	eba4 0949 	sub.w	r9, r4, r9, lsl #1
 8000f34:	fb0e f909 	mul.w	r9, lr, r9
 8000f38:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
 8000f3c:	f840 4b7c 	str.w	r4, [r0], #124
 8000f40:	ee10 ca90 	vmov	ip, s1
 8000f44:	ebb0 0f0c 	cmp.w	r0, ip
 8000f48:	f47f ad54 	bne.w	80009f4 <_ifnt_7_6_5_4>
 8000f4c:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000f50:	f04f 0e00 	mov.w	lr, #0
 8000f54:	f100 0180 	add.w	r1, r0, #128	; 0x80

08000f58 <_ifnt_0_1_2>:
 8000f58:	f8d0 4000 	ldr.w	r4, [r0]
 8000f5c:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8000f60:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 8000f64:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
 8000f68:	f8d0 8200 	ldr.w	r8, [r0, #512]	; 0x200
 8000f6c:	f8d0 9280 	ldr.w	r9, [r0, #640]	; 0x280
 8000f70:	f8d0 a300 	ldr.w	sl, [r0, #768]	; 0x300
 8000f74:	f8d0 b380 	ldr.w	fp, [r0, #896]	; 0x380
 8000f78:	442c      	add	r4, r5
 8000f7a:	443e      	add	r6, r7
 8000f7c:	44c8      	add	r8, r9
 8000f7e:	44da      	add	sl, fp
 8000f80:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8000f84:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8000f88:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8000f8c:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 8000f90:	4434      	add	r4, r6
 8000f92:	44d0      	add	r8, sl
 8000f94:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8000f98:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000f9c:	eba5 1507 	sub.w	r5, r5, r7, lsl #4
 8000fa0:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 8000fa4:	eba9 190b 	sub.w	r9, r9, fp, lsl #4
 8000fa8:	eb09 1b4b 	add.w	fp, r9, fp, lsl #5
 8000fac:	eb04 0408 	add.w	r4, r4, r8
 8000fb0:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 8000fb4:	fb59 fc12 	smmulr	ip, r9, r2
 8000fb8:	fb0c 9913 	mls	r9, ip, r3, r9
 8000fbc:	eba5 1589 	sub.w	r5, r5, r9, lsl #6
 8000fc0:	eb05 19c9 	add.w	r9, r5, r9, lsl #7
 8000fc4:	eba6 160a 	sub.w	r6, r6, sl, lsl #4
 8000fc8:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 8000fcc:	eba7 078b 	sub.w	r7, r7, fp, lsl #2
 8000fd0:	eb07 0bcb 	add.w	fp, r7, fp, lsl #3
 8000fd4:	fb56 fc12 	smmulr	ip, r6, r2
 8000fd8:	fb0c 6613 	mls	r6, ip, r3, r6
 8000fdc:	fb57 fc12 	smmulr	ip, r7, r2
 8000fe0:	fb0c 7713 	mls	r7, ip, r3, r7
 8000fe4:	ebae 0444 	sub.w	r4, lr, r4, lsl #1
 8000fe8:	f1c5 0500 	rsb	r5, r5, #0
 8000fec:	ea4f 16c6 	mov.w	r6, r6, lsl #7
 8000ff0:	ea4f 1787 	mov.w	r7, r7, lsl #6
 8000ff4:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8000ff8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8000ffc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001000:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001004:	fb54 fc12 	smmulr	ip, r4, r2
 8001008:	fb0c 4413 	mls	r4, ip, r3, r4
 800100c:	fb55 fc12 	smmulr	ip, r5, r2
 8001010:	fb0c 5513 	mls	r5, ip, r3, r5
 8001014:	fb56 fc12 	smmulr	ip, r6, r2
 8001018:	fb0c 6613 	mls	r6, ip, r3, r6
 800101c:	fb57 fc12 	smmulr	ip, r7, r2
 8001020:	fb0c 7713 	mls	r7, ip, r3, r7
 8001024:	fb58 fc12 	smmulr	ip, r8, r2
 8001028:	fb0c 8813 	mls	r8, ip, r3, r8
 800102c:	fb59 fc12 	smmulr	ip, r9, r2
 8001030:	fb0c 9913 	mls	r9, ip, r3, r9
 8001034:	fb5a fc12 	smmulr	ip, sl, r2
 8001038:	fb0c aa13 	mls	sl, ip, r3, sl
 800103c:	fb5b fc12 	smmulr	ip, fp, r2
 8001040:	fb0c bb13 	mls	fp, ip, r3, fp
 8001044:	f8c0 8200 	str.w	r8, [r0, #512]	; 0x200
 8001048:	f8c0 9280 	str.w	r9, [r0, #640]	; 0x280
 800104c:	f8c0 a300 	str.w	sl, [r0, #768]	; 0x300
 8001050:	f8c0 b380 	str.w	fp, [r0, #896]	; 0x380
 8001054:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 8001058:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 800105c:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
 8001060:	f840 4b04 	str.w	r4, [r0], #4
 8001064:	f8d0 4000 	ldr.w	r4, [r0]
 8001068:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 800106c:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 8001070:	f8d0 7180 	ldr.w	r7, [r0, #384]	; 0x180
 8001074:	f8d0 8200 	ldr.w	r8, [r0, #512]	; 0x200
 8001078:	f8d0 9280 	ldr.w	r9, [r0, #640]	; 0x280
 800107c:	f8d0 a300 	ldr.w	sl, [r0, #768]	; 0x300
 8001080:	f8d0 b380 	ldr.w	fp, [r0, #896]	; 0x380
 8001084:	442c      	add	r4, r5
 8001086:	443e      	add	r6, r7
 8001088:	44c8      	add	r8, r9
 800108a:	44da      	add	sl, fp
 800108c:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 8001090:	eba6 0747 	sub.w	r7, r6, r7, lsl #1
 8001094:	eba8 0949 	sub.w	r9, r8, r9, lsl #1
 8001098:	ebaa 0b4b 	sub.w	fp, sl, fp, lsl #1
 800109c:	4434      	add	r4, r6
 800109e:	44d0      	add	r8, sl
 80010a0:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 80010a4:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 80010a8:	eba5 1507 	sub.w	r5, r5, r7, lsl #4
 80010ac:	eb05 1747 	add.w	r7, r5, r7, lsl #5
 80010b0:	eba9 190b 	sub.w	r9, r9, fp, lsl #4
 80010b4:	eb09 1b4b 	add.w	fp, r9, fp, lsl #5
 80010b8:	eb04 0408 	add.w	r4, r4, r8
 80010bc:	eba4 0848 	sub.w	r8, r4, r8, lsl #1
 80010c0:	fb59 fc12 	smmulr	ip, r9, r2
 80010c4:	fb0c 9913 	mls	r9, ip, r3, r9
 80010c8:	eba5 1589 	sub.w	r5, r5, r9, lsl #6
 80010cc:	eb05 19c9 	add.w	r9, r5, r9, lsl #7
 80010d0:	eba6 160a 	sub.w	r6, r6, sl, lsl #4
 80010d4:	eb06 1a4a 	add.w	sl, r6, sl, lsl #5
 80010d8:	eba7 078b 	sub.w	r7, r7, fp, lsl #2
 80010dc:	eb07 0bcb 	add.w	fp, r7, fp, lsl #3
 80010e0:	fb56 fc12 	smmulr	ip, r6, r2
 80010e4:	fb0c 6613 	mls	r6, ip, r3, r6
 80010e8:	fb57 fc12 	smmulr	ip, r7, r2
 80010ec:	fb0c 7713 	mls	r7, ip, r3, r7
 80010f0:	ebae 0444 	sub.w	r4, lr, r4, lsl #1
 80010f4:	f1c5 0500 	rsb	r5, r5, #0
 80010f8:	ea4f 16c6 	mov.w	r6, r6, lsl #7
 80010fc:	ea4f 1787 	mov.w	r7, r7, lsl #6
 8001100:	ea4f 1848 	mov.w	r8, r8, lsl #5
 8001104:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001108:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800110c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001110:	fb54 fc12 	smmulr	ip, r4, r2
 8001114:	fb0c 4413 	mls	r4, ip, r3, r4
 8001118:	fb55 fc12 	smmulr	ip, r5, r2
 800111c:	fb0c 5513 	mls	r5, ip, r3, r5
 8001120:	fb56 fc12 	smmulr	ip, r6, r2
 8001124:	fb0c 6613 	mls	r6, ip, r3, r6
 8001128:	fb57 fc12 	smmulr	ip, r7, r2
 800112c:	fb0c 7713 	mls	r7, ip, r3, r7
 8001130:	fb58 fc12 	smmulr	ip, r8, r2
 8001134:	fb0c 8813 	mls	r8, ip, r3, r8
 8001138:	fb59 fc12 	smmulr	ip, r9, r2
 800113c:	fb0c 9913 	mls	r9, ip, r3, r9
 8001140:	fb5a fc12 	smmulr	ip, sl, r2
 8001144:	fb0c aa13 	mls	sl, ip, r3, sl
 8001148:	fb5b fc12 	smmulr	ip, fp, r2
 800114c:	fb0c bb13 	mls	fp, ip, r3, fp
 8001150:	f8c0 8200 	str.w	r8, [r0, #512]	; 0x200
 8001154:	f8c0 9280 	str.w	r9, [r0, #640]	; 0x280
 8001158:	f8c0 a300 	str.w	sl, [r0, #768]	; 0x300
 800115c:	f8c0 b380 	str.w	fp, [r0, #896]	; 0x380
 8001160:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
 8001164:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8001168:	f8c0 7180 	str.w	r7, [r0, #384]	; 0x180
 800116c:	f840 4b04 	str.w	r4, [r0], #4
 8001170:	ebb0 0f01 	cmp.w	r0, r1
 8001174:	f47f aef0 	bne.w	8000f58 <_ifnt_0_1_2>
 8001178:	ecbd 8a09 	vpop	{s16-s24}
 800117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001180:	fb20 0000 	smlad	r0, r0, r0, r0

08001184 <pqcrystals_dilithium_ntt>:
 8001184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001188:	f8df 29f0 	ldr.w	r2, [pc, #2544]	; 8001b7c <inv_ntt_asm_smull_qinv>
 800118c:	f8df 39f0 	ldr.w	r3, [pc, #2544]	; 8001b80 <inv_ntt_asm_smull_q>
 8001190:	f8df 15b4 	ldr.w	r1, [pc, #1460]	; 8001748 <pqcrystals_dilithium_ntt+0x5c4>
 8001194:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001198:	ee00 1a10 	vmov	s0, r1
 800119c:	f100 0a80 	add.w	sl, r0, #128	; 0x80
 80011a0:	ee04 aa90 	vmov	s9, sl
 80011a4:	f8d0 5000 	ldr.w	r5, [r0]
 80011a8:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80011ac:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80011b0:	f8d0 8180 	ldr.w	r8, [r0, #384]	; 0x180
 80011b4:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 80011b8:	f8d0 b280 	ldr.w	fp, [r0, #640]	; 0x280
 80011bc:	f8d0 c300 	ldr.w	ip, [r0, #768]	; 0x300
 80011c0:	f8d0 e380 	ldr.w	lr, [r0, #896]	; 0x380
 80011c4:	ee11 1a10 	vmov	r1, s2
 80011c8:	fb84 9401 	smull	r9, r4, r4, r1
 80011cc:	fb09 fa02 	mul.w	sl, r9, r2
 80011d0:	fbca 9403 	smlal	r9, r4, sl, r3
 80011d4:	fb8b 9b01 	smull	r9, fp, fp, r1
 80011d8:	fb09 fa02 	mul.w	sl, r9, r2
 80011dc:	fbca 9b03 	smlal	r9, fp, sl, r3
 80011e0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80011e4:	fb09 fa02 	mul.w	sl, r9, r2
 80011e8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80011ec:	fb8e 9e01 	smull	r9, lr, lr, r1
 80011f0:	fb09 fa02 	mul.w	sl, r9, r2
 80011f4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80011f8:	4425      	add	r5, r4
 80011fa:	445e      	add	r6, fp
 80011fc:	4467      	add	r7, ip
 80011fe:	44f0      	add	r8, lr
 8001200:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001204:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001208:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 800120c:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001210:	ee11 1a90 	vmov	r1, s3
 8001214:	fb87 9701 	smull	r9, r7, r7, r1
 8001218:	fb09 fa02 	mul.w	sl, r9, r2
 800121c:	fbca 9703 	smlal	r9, r7, sl, r3
 8001220:	fb88 9801 	smull	r9, r8, r8, r1
 8001224:	fb09 fa02 	mul.w	sl, r9, r2
 8001228:	fbca 9803 	smlal	r9, r8, sl, r3
 800122c:	ee12 1a10 	vmov	r1, s4
 8001230:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001234:	fb09 fa02 	mul.w	sl, r9, r2
 8001238:	fbca 9c03 	smlal	r9, ip, sl, r3
 800123c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001240:	fb09 fa02 	mul.w	sl, r9, r2
 8001244:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001248:	443d      	add	r5, r7
 800124a:	4446      	add	r6, r8
 800124c:	4464      	add	r4, ip
 800124e:	44f3      	add	fp, lr
 8001250:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001254:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001258:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 800125c:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001260:	ee12 1a90 	vmov	r1, s5
 8001264:	fb86 9601 	smull	r9, r6, r6, r1
 8001268:	fb09 fa02 	mul.w	sl, r9, r2
 800126c:	fbca 9603 	smlal	r9, r6, sl, r3
 8001270:	ee13 1a10 	vmov	r1, s6
 8001274:	fb88 9801 	smull	r9, r8, r8, r1
 8001278:	fb09 fa02 	mul.w	sl, r9, r2
 800127c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001280:	ee13 1a90 	vmov	r1, s7
 8001284:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001288:	fb09 fa02 	mul.w	sl, r9, r2
 800128c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001290:	ee14 1a10 	vmov	r1, s8
 8001294:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001298:	fb09 fa02 	mul.w	sl, r9, r2
 800129c:	fbca 9e03 	smlal	r9, lr, sl, r3
 80012a0:	4435      	add	r5, r6
 80012a2:	4447      	add	r7, r8
 80012a4:	445c      	add	r4, fp
 80012a6:	44f4      	add	ip, lr
 80012a8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80012ac:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80012b0:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80012b4:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80012b8:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 80012bc:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
 80012c0:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
 80012c4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 80012c8:	f8c0 b280 	str.w	fp, [r0, #640]	; 0x280
 80012cc:	f8c0 c300 	str.w	ip, [r0, #768]	; 0x300
 80012d0:	f8c0 e380 	str.w	lr, [r0, #896]	; 0x380
 80012d4:	f840 5b04 	str.w	r5, [r0], #4
 80012d8:	f8d0 5000 	ldr.w	r5, [r0]
 80012dc:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80012e0:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80012e4:	f8d0 8180 	ldr.w	r8, [r0, #384]	; 0x180
 80012e8:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 80012ec:	f8d0 b280 	ldr.w	fp, [r0, #640]	; 0x280
 80012f0:	f8d0 c300 	ldr.w	ip, [r0, #768]	; 0x300
 80012f4:	f8d0 e380 	ldr.w	lr, [r0, #896]	; 0x380
 80012f8:	ee11 1a10 	vmov	r1, s2
 80012fc:	fb84 9401 	smull	r9, r4, r4, r1
 8001300:	fb09 fa02 	mul.w	sl, r9, r2
 8001304:	fbca 9403 	smlal	r9, r4, sl, r3
 8001308:	fb8b 9b01 	smull	r9, fp, fp, r1
 800130c:	fb09 fa02 	mul.w	sl, r9, r2
 8001310:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001314:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001318:	fb09 fa02 	mul.w	sl, r9, r2
 800131c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001320:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001324:	fb09 fa02 	mul.w	sl, r9, r2
 8001328:	fbca 9e03 	smlal	r9, lr, sl, r3
 800132c:	4425      	add	r5, r4
 800132e:	445e      	add	r6, fp
 8001330:	4467      	add	r7, ip
 8001332:	44f0      	add	r8, lr
 8001334:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001338:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800133c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001340:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001344:	ee11 1a90 	vmov	r1, s3
 8001348:	fb87 9701 	smull	r9, r7, r7, r1
 800134c:	fb09 fa02 	mul.w	sl, r9, r2
 8001350:	fbca 9703 	smlal	r9, r7, sl, r3
 8001354:	fb88 9801 	smull	r9, r8, r8, r1
 8001358:	fb09 fa02 	mul.w	sl, r9, r2
 800135c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001360:	ee12 1a10 	vmov	r1, s4
 8001364:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001368:	fb09 fa02 	mul.w	sl, r9, r2
 800136c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001370:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001374:	fb09 fa02 	mul.w	sl, r9, r2
 8001378:	fbca 9e03 	smlal	r9, lr, sl, r3
 800137c:	443d      	add	r5, r7
 800137e:	4446      	add	r6, r8
 8001380:	4464      	add	r4, ip
 8001382:	44f3      	add	fp, lr
 8001384:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001388:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 800138c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001390:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001394:	ee12 1a90 	vmov	r1, s5
 8001398:	fb86 9601 	smull	r9, r6, r6, r1
 800139c:	fb09 fa02 	mul.w	sl, r9, r2
 80013a0:	fbca 9603 	smlal	r9, r6, sl, r3
 80013a4:	ee13 1a10 	vmov	r1, s6
 80013a8:	fb88 9801 	smull	r9, r8, r8, r1
 80013ac:	fb09 fa02 	mul.w	sl, r9, r2
 80013b0:	fbca 9803 	smlal	r9, r8, sl, r3
 80013b4:	ee13 1a90 	vmov	r1, s7
 80013b8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80013bc:	fb09 fa02 	mul.w	sl, r9, r2
 80013c0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80013c4:	ee14 1a10 	vmov	r1, s8
 80013c8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80013cc:	fb09 fa02 	mul.w	sl, r9, r2
 80013d0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80013d4:	4435      	add	r5, r6
 80013d6:	4447      	add	r7, r8
 80013d8:	445c      	add	r4, fp
 80013da:	44f4      	add	ip, lr
 80013dc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80013e0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80013e4:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80013e8:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80013ec:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 80013f0:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
 80013f4:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
 80013f8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 80013fc:	f8c0 b280 	str.w	fp, [r0, #640]	; 0x280
 8001400:	f8c0 c300 	str.w	ip, [r0, #768]	; 0x300
 8001404:	f8c0 e380 	str.w	lr, [r0, #896]	; 0x380
 8001408:	f840 5b04 	str.w	r5, [r0], #4
 800140c:	ee14 aa90 	vmov	sl, s9
 8001410:	ebb0 0f0a 	cmp.w	r0, sl
 8001414:	f47f aec6 	bne.w	80011a4 <pqcrystals_dilithium_ntt+0x20>
 8001418:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 800141c:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8001420:	ee04 aa90 	vmov	s9, sl
 8001424:	f100 0a10 	add.w	sl, r0, #16
 8001428:	ee05 aa10 	vmov	s10, sl
 800142c:	ee10 1a10 	vmov	r1, s0
 8001430:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001434:	ee00 1a10 	vmov	s0, r1
 8001438:	f8d0 5000 	ldr.w	r5, [r0]
 800143c:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8001440:	f8d0 7020 	ldr.w	r7, [r0, #32]
 8001444:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 8001448:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 800144c:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
 8001450:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 8001454:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
 8001458:	ee11 1a10 	vmov	r1, s2
 800145c:	fb84 9401 	smull	r9, r4, r4, r1
 8001460:	fb09 fa02 	mul.w	sl, r9, r2
 8001464:	fbca 9403 	smlal	r9, r4, sl, r3
 8001468:	fb8b 9b01 	smull	r9, fp, fp, r1
 800146c:	fb09 fa02 	mul.w	sl, r9, r2
 8001470:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001474:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001478:	fb09 fa02 	mul.w	sl, r9, r2
 800147c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001480:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001484:	fb09 fa02 	mul.w	sl, r9, r2
 8001488:	fbca 9e03 	smlal	r9, lr, sl, r3
 800148c:	4425      	add	r5, r4
 800148e:	445e      	add	r6, fp
 8001490:	4467      	add	r7, ip
 8001492:	44f0      	add	r8, lr
 8001494:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001498:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800149c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80014a0:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80014a4:	ee11 1a90 	vmov	r1, s3
 80014a8:	fb87 9701 	smull	r9, r7, r7, r1
 80014ac:	fb09 fa02 	mul.w	sl, r9, r2
 80014b0:	fbca 9703 	smlal	r9, r7, sl, r3
 80014b4:	fb88 9801 	smull	r9, r8, r8, r1
 80014b8:	fb09 fa02 	mul.w	sl, r9, r2
 80014bc:	fbca 9803 	smlal	r9, r8, sl, r3
 80014c0:	ee12 1a10 	vmov	r1, s4
 80014c4:	fb8c 9c01 	smull	r9, ip, ip, r1
 80014c8:	fb09 fa02 	mul.w	sl, r9, r2
 80014cc:	fbca 9c03 	smlal	r9, ip, sl, r3
 80014d0:	fb8e 9e01 	smull	r9, lr, lr, r1
 80014d4:	fb09 fa02 	mul.w	sl, r9, r2
 80014d8:	fbca 9e03 	smlal	r9, lr, sl, r3
 80014dc:	443d      	add	r5, r7
 80014de:	4446      	add	r6, r8
 80014e0:	4464      	add	r4, ip
 80014e2:	44f3      	add	fp, lr
 80014e4:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80014e8:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80014ec:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80014f0:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80014f4:	ee12 1a90 	vmov	r1, s5
 80014f8:	fb86 9601 	smull	r9, r6, r6, r1
 80014fc:	fb09 fa02 	mul.w	sl, r9, r2
 8001500:	fbca 9603 	smlal	r9, r6, sl, r3
 8001504:	ee13 1a10 	vmov	r1, s6
 8001508:	fb88 9801 	smull	r9, r8, r8, r1
 800150c:	fb09 fa02 	mul.w	sl, r9, r2
 8001510:	fbca 9803 	smlal	r9, r8, sl, r3
 8001514:	ee13 1a90 	vmov	r1, s7
 8001518:	fb8b 9b01 	smull	r9, fp, fp, r1
 800151c:	fb09 fa02 	mul.w	sl, r9, r2
 8001520:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001524:	ee14 1a10 	vmov	r1, s8
 8001528:	fb8e 9e01 	smull	r9, lr, lr, r1
 800152c:	fb09 fa02 	mul.w	sl, r9, r2
 8001530:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001534:	4435      	add	r5, r6
 8001536:	4447      	add	r7, r8
 8001538:	445c      	add	r4, fp
 800153a:	44f4      	add	ip, lr
 800153c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001540:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001544:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8001548:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 800154c:	f8c0 6010 	str.w	r6, [r0, #16]
 8001550:	f8c0 7020 	str.w	r7, [r0, #32]
 8001554:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 8001558:	f8c0 4040 	str.w	r4, [r0, #64]	; 0x40
 800155c:	f8c0 b050 	str.w	fp, [r0, #80]	; 0x50
 8001560:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 8001564:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
 8001568:	f840 5b04 	str.w	r5, [r0], #4
 800156c:	f8d0 5000 	ldr.w	r5, [r0]
 8001570:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8001574:	f8d0 7020 	ldr.w	r7, [r0, #32]
 8001578:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 800157c:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 8001580:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
 8001584:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 8001588:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
 800158c:	ee11 1a10 	vmov	r1, s2
 8001590:	fb84 9401 	smull	r9, r4, r4, r1
 8001594:	fb09 fa02 	mul.w	sl, r9, r2
 8001598:	fbca 9403 	smlal	r9, r4, sl, r3
 800159c:	fb8b 9b01 	smull	r9, fp, fp, r1
 80015a0:	fb09 fa02 	mul.w	sl, r9, r2
 80015a4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80015a8:	fb8c 9c01 	smull	r9, ip, ip, r1
 80015ac:	fb09 fa02 	mul.w	sl, r9, r2
 80015b0:	fbca 9c03 	smlal	r9, ip, sl, r3
 80015b4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80015b8:	fb09 fa02 	mul.w	sl, r9, r2
 80015bc:	fbca 9e03 	smlal	r9, lr, sl, r3
 80015c0:	4425      	add	r5, r4
 80015c2:	445e      	add	r6, fp
 80015c4:	4467      	add	r7, ip
 80015c6:	44f0      	add	r8, lr
 80015c8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80015cc:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80015d0:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80015d4:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80015d8:	ee11 1a90 	vmov	r1, s3
 80015dc:	fb87 9701 	smull	r9, r7, r7, r1
 80015e0:	fb09 fa02 	mul.w	sl, r9, r2
 80015e4:	fbca 9703 	smlal	r9, r7, sl, r3
 80015e8:	fb88 9801 	smull	r9, r8, r8, r1
 80015ec:	fb09 fa02 	mul.w	sl, r9, r2
 80015f0:	fbca 9803 	smlal	r9, r8, sl, r3
 80015f4:	ee12 1a10 	vmov	r1, s4
 80015f8:	fb8c 9c01 	smull	r9, ip, ip, r1
 80015fc:	fb09 fa02 	mul.w	sl, r9, r2
 8001600:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001604:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001608:	fb09 fa02 	mul.w	sl, r9, r2
 800160c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001610:	443d      	add	r5, r7
 8001612:	4446      	add	r6, r8
 8001614:	4464      	add	r4, ip
 8001616:	44f3      	add	fp, lr
 8001618:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800161c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001620:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001624:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001628:	ee12 1a90 	vmov	r1, s5
 800162c:	fb86 9601 	smull	r9, r6, r6, r1
 8001630:	fb09 fa02 	mul.w	sl, r9, r2
 8001634:	fbca 9603 	smlal	r9, r6, sl, r3
 8001638:	ee13 1a10 	vmov	r1, s6
 800163c:	fb88 9801 	smull	r9, r8, r8, r1
 8001640:	fb09 fa02 	mul.w	sl, r9, r2
 8001644:	fbca 9803 	smlal	r9, r8, sl, r3
 8001648:	ee13 1a90 	vmov	r1, s7
 800164c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001650:	fb09 fa02 	mul.w	sl, r9, r2
 8001654:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001658:	ee14 1a10 	vmov	r1, s8
 800165c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001660:	fb09 fa02 	mul.w	sl, r9, r2
 8001664:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001668:	4435      	add	r5, r6
 800166a:	4447      	add	r7, r8
 800166c:	445c      	add	r4, fp
 800166e:	44f4      	add	ip, lr
 8001670:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001674:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001678:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 800167c:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8001680:	f8c0 6010 	str.w	r6, [r0, #16]
 8001684:	f8c0 7020 	str.w	r7, [r0, #32]
 8001688:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 800168c:	f8c0 4040 	str.w	r4, [r0, #64]	; 0x40
 8001690:	f8c0 b050 	str.w	fp, [r0, #80]	; 0x50
 8001694:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 8001698:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
 800169c:	f840 5b04 	str.w	r5, [r0], #4
 80016a0:	ee15 aa10 	vmov	sl, s10
 80016a4:	ebb0 0f0a 	cmp.w	r0, sl
 80016a8:	f47f aec6 	bne.w	8001438 <pqcrystals_dilithium_ntt+0x2b4>
 80016ac:	f100 0070 	add.w	r0, r0, #112	; 0x70
 80016b0:	ee14 aa90 	vmov	sl, s9
 80016b4:	ebb0 0f0a 	cmp.w	r0, sl
 80016b8:	f47f aeb4 	bne.w	8001424 <pqcrystals_dilithium_ntt+0x2a0>
 80016bc:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 80016c0:	ee10 1a10 	vmov	r1, s0
 80016c4:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80016c8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80016cc:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80016d0:	f851 bb0c 	ldr.w	fp, [r1], #12
 80016d4:	f8d0 5000 	ldr.w	r5, [r0]
 80016d8:	f8d0 6004 	ldr.w	r6, [r0, #4]
 80016dc:	f8d0 7008 	ldr.w	r7, [r0, #8]
 80016e0:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80016e4:	fb87 970b 	smull	r9, r7, r7, fp
 80016e8:	fb09 fa02 	mul.w	sl, r9, r2
 80016ec:	fbca 9703 	smlal	r9, r7, sl, r3
 80016f0:	fb88 980b 	smull	r9, r8, r8, fp
 80016f4:	fb09 fa02 	mul.w	sl, r9, r2
 80016f8:	fbca 9803 	smlal	r9, r8, sl, r3
 80016fc:	443d      	add	r5, r7
 80016fe:	4446      	add	r6, r8
 8001700:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001704:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001708:	fb86 960c 	smull	r9, r6, r6, ip
 800170c:	fb09 fa02 	mul.w	sl, r9, r2
 8001710:	fbca 9603 	smlal	r9, r6, sl, r3
 8001714:	fb88 980e 	smull	r9, r8, r8, lr
 8001718:	fb09 fa02 	mul.w	sl, r9, r2
 800171c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001720:	4435      	add	r5, r6
 8001722:	4447      	add	r7, r8
 8001724:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001728:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800172c:	f8c0 6004 	str.w	r6, [r0, #4]
 8001730:	f8c0 7008 	str.w	r7, [r0, #8]
 8001734:	f8c0 800c 	str.w	r8, [r0, #12]
 8001738:	f840 5b10 	str.w	r5, [r0], #16
 800173c:	ebb4 0f00 	cmp.w	r4, r0
 8001740:	f47f afc2 	bne.w	80016c8 <pqcrystals_dilithium_ntt+0x544>
 8001744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001748:	08005fc8 	.word	0x08005fc8

0800174c <pqcrystals_dilithium_invntt_tomont>:
 800174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001750:	f8df 2428 	ldr.w	r2, [pc, #1064]	; 8001b7c <inv_ntt_asm_smull_qinv>
 8001754:	f8df 3428 	ldr.w	r3, [pc, #1064]	; 8001b80 <inv_ntt_asm_smull_q>
 8001758:	f8df 1428 	ldr.w	r1, [pc, #1064]	; 8001b84 <inv_ntt_asm_smull_q+0x4>
 800175c:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001760:	ee00 1a10 	vmov	s0, r1
 8001764:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8001768:	ee04 aa90 	vmov	s9, sl
 800176c:	f8d0 4010 	ldr.w	r4, [r0, #16]
 8001770:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001774:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8001778:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800177c:	4434      	add	r4, r6
 800177e:	44c4      	add	ip, r8
 8001780:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8001784:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 8001788:	eb04 040c 	add.w	r4, r4, ip
 800178c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001790:	ee13 9a10 	vmov	r9, s6
 8001794:	ee14 aa10 	vmov	sl, s8
 8001798:	fb86 5b09 	smull	r5, fp, r6, r9
 800179c:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 80017a0:	fb05 f102 	mul.w	r1, r5, r2
 80017a4:	fbc1 5b03 	smlal	r5, fp, r1, r3
 80017a8:	fb86 7e0a 	smull	r7, lr, r6, sl
 80017ac:	fbc8 7e09 	smlal	r7, lr, r8, r9
 80017b0:	fb07 f102 	mul.w	r1, r7, r2
 80017b4:	fbc1 7e03 	smlal	r7, lr, r1, r3
 80017b8:	f8d0 5000 	ldr.w	r5, [r0]
 80017bc:	f8d0 6004 	ldr.w	r6, [r0, #4]
 80017c0:	f8d0 7008 	ldr.w	r7, [r0, #8]
 80017c4:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80017c8:	4435      	add	r5, r6
 80017ca:	4447      	add	r7, r8
 80017cc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80017d0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80017d4:	ee12 1a10 	vmov	r1, s4
 80017d8:	fb88 9801 	smull	r9, r8, r8, r1
 80017dc:	fb09 fa02 	mul.w	sl, r9, r2
 80017e0:	fbca 9803 	smlal	r9, r8, sl, r3
 80017e4:	443d      	add	r5, r7
 80017e6:	4446      	add	r6, r8
 80017e8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80017ec:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80017f0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80017f4:	fb09 fa02 	mul.w	sl, r9, r2
 80017f8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80017fc:	4425      	add	r5, r4
 80017fe:	445e      	add	r6, fp
 8001800:	4467      	add	r7, ip
 8001802:	44f0      	add	r8, lr
 8001804:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001808:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 800180c:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001810:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001814:	f8c0 6004 	str.w	r6, [r0, #4]
 8001818:	f8c0 7008 	str.w	r7, [r0, #8]
 800181c:	f8c0 800c 	str.w	r8, [r0, #12]
 8001820:	f8c0 4010 	str.w	r4, [r0, #16]
 8001824:	f8c0 b014 	str.w	fp, [r0, #20]
 8001828:	f8c0 c018 	str.w	ip, [r0, #24]
 800182c:	f8c0 e01c 	str.w	lr, [r0, #28]
 8001830:	f840 5b20 	str.w	r5, [r0], #32
 8001834:	ee14 aa90 	vmov	sl, s9
 8001838:	ebb0 0f0a 	cmp.w	r0, sl
 800183c:	f47f af96 	bne.w	800176c <pqcrystals_dilithium_invntt_tomont+0x20>
 8001840:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8001844:	f240 0a04 	movw	sl, #4
 8001848:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 800184c:	ee05 aa10 	vmov	s10, sl
 8001850:	ee10 1a10 	vmov	r1, s0
 8001854:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001858:	ee00 1a10 	vmov	s0, r1
 800185c:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 8001860:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 8001864:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	; 0xc0
 8001868:	f8d0 80e0 	ldr.w	r8, [r0, #224]	; 0xe0
 800186c:	4434      	add	r4, r6
 800186e:	44c4      	add	ip, r8
 8001870:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 8001874:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 8001878:	eb04 040c 	add.w	r4, r4, ip
 800187c:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001880:	ee13 9a10 	vmov	r9, s6
 8001884:	ee14 aa10 	vmov	sl, s8
 8001888:	fb86 5b09 	smull	r5, fp, r6, r9
 800188c:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 8001890:	fb05 f102 	mul.w	r1, r5, r2
 8001894:	fbc1 5b03 	smlal	r5, fp, r1, r3
 8001898:	fb86 7e0a 	smull	r7, lr, r6, sl
 800189c:	fbc8 7e09 	smlal	r7, lr, r8, r9
 80018a0:	fb07 f102 	mul.w	r1, r7, r2
 80018a4:	fbc1 7e03 	smlal	r7, lr, r1, r3
 80018a8:	f8d0 5000 	ldr.w	r5, [r0]
 80018ac:	f8d0 6020 	ldr.w	r6, [r0, #32]
 80018b0:	f8d0 7040 	ldr.w	r7, [r0, #64]	; 0x40
 80018b4:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 80018b8:	4435      	add	r5, r6
 80018ba:	4447      	add	r7, r8
 80018bc:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80018c0:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80018c4:	ee12 1a10 	vmov	r1, s4
 80018c8:	fb88 9801 	smull	r9, r8, r8, r1
 80018cc:	fb09 fa02 	mul.w	sl, r9, r2
 80018d0:	fbca 9803 	smlal	r9, r8, sl, r3
 80018d4:	443d      	add	r5, r7
 80018d6:	4446      	add	r6, r8
 80018d8:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80018dc:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80018e0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80018e4:	fb09 fa02 	mul.w	sl, r9, r2
 80018e8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80018ec:	4425      	add	r5, r4
 80018ee:	445e      	add	r6, fp
 80018f0:	4467      	add	r7, ip
 80018f2:	44f0      	add	r8, lr
 80018f4:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80018f8:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80018fc:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001900:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001904:	f8c0 6020 	str.w	r6, [r0, #32]
 8001908:	f8c0 7040 	str.w	r7, [r0, #64]	; 0x40
 800190c:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
 8001910:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8001914:	f8c0 b0a0 	str.w	fp, [r0, #160]	; 0xa0
 8001918:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 800191c:	f8c0 e0e0 	str.w	lr, [r0, #224]	; 0xe0
 8001920:	f8c0 5000 	str.w	r5, [r0]
 8001924:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001928:	ee15 aa10 	vmov	sl, s10
 800192c:	ebba 0f00 	cmp.w	sl, r0
 8001930:	f47f af94 	bne.w	800185c <pqcrystals_dilithium_invntt_tomont+0x110>
 8001934:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
 8001938:	f100 0a1c 	add.w	sl, r0, #28
 800193c:	ee04 aa90 	vmov	s9, sl
 8001940:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8001944:	ee05 aa10 	vmov	s10, sl
 8001948:	ee10 1a10 	vmov	r1, s0
 800194c:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8001950:	ee00 1a10 	vmov	s0, r1
 8001954:	f8d0 5000 	ldr.w	r5, [r0]
 8001958:	f8d0 6020 	ldr.w	r6, [r0, #32]
 800195c:	f8d0 7040 	ldr.w	r7, [r0, #64]	; 0x40
 8001960:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8001964:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 8001968:	f8d0 b0a0 	ldr.w	fp, [r0, #160]	; 0xa0
 800196c:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	; 0xc0
 8001970:	f8d0 e0e0 	ldr.w	lr, [r0, #224]	; 0xe0
 8001974:	ee11 1a10 	vmov	r1, s2
 8001978:	fb86 9601 	smull	r9, r6, r6, r1
 800197c:	fb09 fa02 	mul.w	sl, r9, r2
 8001980:	fbca 9603 	smlal	r9, r6, sl, r3
 8001984:	fb88 9801 	smull	r9, r8, r8, r1
 8001988:	fb09 fa02 	mul.w	sl, r9, r2
 800198c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001990:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001994:	fb09 fa02 	mul.w	sl, r9, r2
 8001998:	fbca 9b03 	smlal	r9, fp, sl, r3
 800199c:	fb8e 9e01 	smull	r9, lr, lr, r1
 80019a0:	fb09 fa02 	mul.w	sl, r9, r2
 80019a4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80019a8:	4435      	add	r5, r6
 80019aa:	4447      	add	r7, r8
 80019ac:	445c      	add	r4, fp
 80019ae:	44f4      	add	ip, lr
 80019b0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80019b4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80019b8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80019bc:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80019c0:	ee11 1a90 	vmov	r1, s3
 80019c4:	fb87 9701 	smull	r9, r7, r7, r1
 80019c8:	fb09 fa02 	mul.w	sl, r9, r2
 80019cc:	fbca 9703 	smlal	r9, r7, sl, r3
 80019d0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80019d4:	fb09 fa02 	mul.w	sl, r9, r2
 80019d8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80019dc:	ee12 1a10 	vmov	r1, s4
 80019e0:	fb88 9801 	smull	r9, r8, r8, r1
 80019e4:	fb09 fa02 	mul.w	sl, r9, r2
 80019e8:	fbca 9803 	smlal	r9, r8, sl, r3
 80019ec:	fb8e 9e01 	smull	r9, lr, lr, r1
 80019f0:	fb09 fa02 	mul.w	sl, r9, r2
 80019f4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80019f8:	443d      	add	r5, r7
 80019fa:	4446      	add	r6, r8
 80019fc:	4464      	add	r4, ip
 80019fe:	44f3      	add	fp, lr
 8001a00:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001a04:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001a08:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8001a0c:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8001a10:	ee12 1a90 	vmov	r1, s5
 8001a14:	fb84 9401 	smull	r9, r4, r4, r1
 8001a18:	fb09 fa02 	mul.w	sl, r9, r2
 8001a1c:	fbca 9403 	smlal	r9, r4, sl, r3
 8001a20:	ee13 1a10 	vmov	r1, s6
 8001a24:	fb8b 9b01 	smull	r9, fp, fp, r1
 8001a28:	fb09 fa02 	mul.w	sl, r9, r2
 8001a2c:	fbca 9b03 	smlal	r9, fp, sl, r3
 8001a30:	ee13 1a90 	vmov	r1, s7
 8001a34:	fb8c 9c01 	smull	r9, ip, ip, r1
 8001a38:	fb09 fa02 	mul.w	sl, r9, r2
 8001a3c:	fbca 9c03 	smlal	r9, ip, sl, r3
 8001a40:	ee14 1a10 	vmov	r1, s8
 8001a44:	fb8e 9e01 	smull	r9, lr, lr, r1
 8001a48:	fb09 fa02 	mul.w	sl, r9, r2
 8001a4c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8001a50:	4425      	add	r5, r4
 8001a52:	445e      	add	r6, fp
 8001a54:	4467      	add	r7, ip
 8001a56:	44f0      	add	r8, lr
 8001a58:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8001a5c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8001a60:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8001a64:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8001a68:	f8c0 6020 	str.w	r6, [r0, #32]
 8001a6c:	f8c0 7040 	str.w	r7, [r0, #64]	; 0x40
 8001a70:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
 8001a74:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8001a78:	f8c0 b0a0 	str.w	fp, [r0, #160]	; 0xa0
 8001a7c:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 8001a80:	f8c0 e0e0 	str.w	lr, [r0, #224]	; 0xe0
 8001a84:	f8c0 5000 	str.w	r5, [r0]
 8001a88:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001a8c:	ee15 aa10 	vmov	sl, s10
 8001a90:	ebb0 0f0a 	cmp.w	r0, sl
 8001a94:	f47f af5e 	bne.w	8001954 <pqcrystals_dilithium_invntt_tomont+0x208>
 8001a98:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
 8001a9c:	ee14 aa90 	vmov	sl, s9
 8001aa0:	ebba 0f00 	cmp.w	sl, r0
 8001aa4:	f47f af4c 	bne.w	8001940 <pqcrystals_dilithium_invntt_tomont+0x1f4>
 8001aa8:	f1a0 0020 	sub.w	r0, r0, #32
 8001aac:	ee10 1a10 	vmov	r1, s0
 8001ab0:	f500 7480 	add.w	r4, r0, #256	; 0x100
 8001ab4:	ee04 4a90 	vmov	s9, r4
 8001ab8:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001abc:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001ac0:	f851 bb0c 	ldr.w	fp, [r1], #12
 8001ac4:	f8d0 5000 	ldr.w	r5, [r0]
 8001ac8:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 8001acc:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8001ad0:	f8d0 8300 	ldr.w	r8, [r0, #768]	; 0x300
 8001ad4:	fb86 960b 	smull	r9, r6, r6, fp
 8001ad8:	fb09 fa02 	mul.w	sl, r9, r2
 8001adc:	fbca 9603 	smlal	r9, r6, sl, r3
 8001ae0:	fb88 980b 	smull	r9, r8, r8, fp
 8001ae4:	fb09 fa02 	mul.w	sl, r9, r2
 8001ae8:	fbca 9803 	smlal	r9, r8, sl, r3
 8001aec:	4435      	add	r5, r6
 8001aee:	4447      	add	r7, r8
 8001af0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8001af4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8001af8:	fb87 970c 	smull	r9, r7, r7, ip
 8001afc:	fb09 fa02 	mul.w	sl, r9, r2
 8001b00:	fbca 9703 	smlal	r9, r7, sl, r3
 8001b04:	fb88 980e 	smull	r9, r8, r8, lr
 8001b08:	fb09 fa02 	mul.w	sl, r9, r2
 8001b0c:	fbca 9803 	smlal	r9, r8, sl, r3
 8001b10:	443d      	add	r5, r7
 8001b12:	4446      	add	r6, r8
 8001b14:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8001b18:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8001b1c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8001b20:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001b24:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8001b28:	f851 4b10 	ldr.w	r4, [r1], #16
 8001b2c:	fb85 9504 	smull	r9, r5, r5, r4
 8001b30:	fb09 fa02 	mul.w	sl, r9, r2
 8001b34:	fbca 9503 	smlal	r9, r5, sl, r3
 8001b38:	fb86 960c 	smull	r9, r6, r6, ip
 8001b3c:	fb09 fa02 	mul.w	sl, r9, r2
 8001b40:	fbca 9603 	smlal	r9, r6, sl, r3
 8001b44:	fb87 970e 	smull	r9, r7, r7, lr
 8001b48:	fb09 fa02 	mul.w	sl, r9, r2
 8001b4c:	fbca 9703 	smlal	r9, r7, sl, r3
 8001b50:	fb88 980b 	smull	r9, r8, r8, fp
 8001b54:	fb09 fa02 	mul.w	sl, r9, r2
 8001b58:	fbca 9803 	smlal	r9, r8, sl, r3
 8001b5c:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8001b60:	f8c0 7200 	str.w	r7, [r0, #512]	; 0x200
 8001b64:	f8c0 8300 	str.w	r8, [r0, #768]	; 0x300
 8001b68:	f840 5b04 	str.w	r5, [r0], #4
 8001b6c:	ee14 4a90 	vmov	r4, s9
 8001b70:	ebb4 0f00 	cmp.w	r4, r0
 8001b74:	f47f afa0 	bne.w	8001ab8 <pqcrystals_dilithium_invntt_tomont+0x36c>
 8001b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b7c <inv_ntt_asm_smull_qinv>:
 8001b7c:	fc7fdfff 	.word	0xfc7fdfff

08001b80 <inv_ntt_asm_smull_q>:
 8001b80:	007fe001 	.word	0x007fe001
 8001b84:	080063c4 	.word	0x080063c4

08001b88 <pqcrystals_dilithium_asm_pointwise_montgomery>:
 8001b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b8c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001b90:	f6cf 437f 	movt	r3, #64639	; 0xfc7f
 8001b94:	f24e 0401 	movw	r4, #57345	; 0xe001
 8001b98:	f2c0 047f 	movt	r4, #127	; 0x7f
 8001b9c:	f240 0c55 	movw	ip, #85	; 0x55
 8001ba0:	f8d1 6004 	ldr.w	r6, [r1, #4]
 8001ba4:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8001ba8:	f851 5b0c 	ldr.w	r5, [r1], #12
 8001bac:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8001bb0:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001bb4:	f852 8b0c 	ldr.w	r8, [r2], #12
 8001bb8:	fb85 5e08 	smull	r5, lr, r5, r8
 8001bbc:	fb05 f803 	mul.w	r8, r5, r3
 8001bc0:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001bc4:	f840 eb04 	str.w	lr, [r0], #4
 8001bc8:	fb86 6e09 	smull	r6, lr, r6, r9
 8001bcc:	fb06 f903 	mul.w	r9, r6, r3
 8001bd0:	fbc9 6e04 	smlal	r6, lr, r9, r4
 8001bd4:	f840 eb04 	str.w	lr, [r0], #4
 8001bd8:	fb87 7e0a 	smull	r7, lr, r7, sl
 8001bdc:	fb07 fa03 	mul.w	sl, r7, r3
 8001be0:	fbca 7e04 	smlal	r7, lr, sl, r4
 8001be4:	f840 eb04 	str.w	lr, [r0], #4
 8001be8:	f1bc 0c01 	subs.w	ip, ip, #1
 8001bec:	f47f afd8 	bne.w	8001ba0 <pqcrystals_dilithium_asm_pointwise_montgomery+0x18>
 8001bf0:	f8d1 5000 	ldr.w	r5, [r1]
 8001bf4:	f8d2 8000 	ldr.w	r8, [r2]
 8001bf8:	fb85 5e08 	smull	r5, lr, r5, r8
 8001bfc:	fb05 f803 	mul.w	r8, r5, r3
 8001c00:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001c04:	f8c0 e000 	str.w	lr, [r0]
 8001c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c0c <pqcrystals_dilithium_asm_pointwise_acc_montgomery>:
 8001c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c10:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001c14:	f6cf 437f 	movt	r3, #64639	; 0xfc7f
 8001c18:	f24e 0401 	movw	r4, #57345	; 0xe001
 8001c1c:	f2c0 047f 	movt	r4, #127	; 0x7f
 8001c20:	f240 0c55 	movw	ip, #85	; 0x55
 8001c24:	f8d1 6004 	ldr.w	r6, [r1, #4]
 8001c28:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8001c2c:	f851 5b0c 	ldr.w	r5, [r1], #12
 8001c30:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8001c34:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001c38:	f852 8b0c 	ldr.w	r8, [r2], #12
 8001c3c:	fb85 5e08 	smull	r5, lr, r5, r8
 8001c40:	fb05 f803 	mul.w	r8, r5, r3
 8001c44:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001c48:	fb86 6509 	smull	r6, r5, r6, r9
 8001c4c:	fb06 f903 	mul.w	r9, r6, r3
 8001c50:	fbc9 6504 	smlal	r6, r5, r9, r4
 8001c54:	fb87 760a 	smull	r7, r6, r7, sl
 8001c58:	fb07 fa03 	mul.w	sl, r7, r3
 8001c5c:	fbca 7604 	smlal	r7, r6, sl, r4
 8001c60:	f8d0 8000 	ldr.w	r8, [r0]
 8001c64:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001c68:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001c6c:	eb0e 0e08 	add.w	lr, lr, r8
 8001c70:	f840 eb0c 	str.w	lr, [r0], #12
 8001c74:	eb05 0509 	add.w	r5, r5, r9
 8001c78:	f840 5c08 	str.w	r5, [r0, #-8]
 8001c7c:	eb06 060a 	add.w	r6, r6, sl
 8001c80:	f840 6c04 	str.w	r6, [r0, #-4]
 8001c84:	f1bc 0c01 	subs.w	ip, ip, #1
 8001c88:	f47f afcc 	bne.w	8001c24 <pqcrystals_dilithium_asm_pointwise_acc_montgomery+0x18>
 8001c8c:	f8d1 5000 	ldr.w	r5, [r1]
 8001c90:	f8d2 8000 	ldr.w	r8, [r2]
 8001c94:	f8d0 6000 	ldr.w	r6, [r0]
 8001c98:	fb85 5e08 	smull	r5, lr, r5, r8
 8001c9c:	fb05 f803 	mul.w	r8, r5, r3
 8001ca0:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8001ca4:	eb0e 0e06 	add.w	lr, lr, r6
 8001ca8:	f8c0 e000 	str.w	lr, [r0]
 8001cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cb0 <pqcrystals_dilithium_asm_reduce32>:
 8001cb0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001cb4:	f24e 0c01 	movw	ip, #57345	; 0xe001
 8001cb8:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8001cbc:	f240 0a20 	movw	sl, #32
 8001cc0:	f8d0 1000 	ldr.w	r1, [r0]
 8001cc4:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8001cc8:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8001ccc:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8001cd0:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8001cd4:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001cd8:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8001cdc:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001ce0:	f501 0980 	add.w	r9, r1, #4194304	; 0x400000
 8001ce4:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001ce8:	fb09 111c 	mls	r1, r9, ip, r1
 8001cec:	f502 0980 	add.w	r9, r2, #4194304	; 0x400000
 8001cf0:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001cf4:	fb09 221c 	mls	r2, r9, ip, r2
 8001cf8:	f503 0980 	add.w	r9, r3, #4194304	; 0x400000
 8001cfc:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d00:	fb09 331c 	mls	r3, r9, ip, r3
 8001d04:	f504 0980 	add.w	r9, r4, #4194304	; 0x400000
 8001d08:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d0c:	fb09 441c 	mls	r4, r9, ip, r4
 8001d10:	f505 0980 	add.w	r9, r5, #4194304	; 0x400000
 8001d14:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d18:	fb09 551c 	mls	r5, r9, ip, r5
 8001d1c:	f506 0980 	add.w	r9, r6, #4194304	; 0x400000
 8001d20:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d24:	fb09 661c 	mls	r6, r9, ip, r6
 8001d28:	f507 0980 	add.w	r9, r7, #4194304	; 0x400000
 8001d2c:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d30:	fb09 771c 	mls	r7, r9, ip, r7
 8001d34:	f508 0980 	add.w	r9, r8, #4194304	; 0x400000
 8001d38:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8001d3c:	fb09 881c 	mls	r8, r9, ip, r8
 8001d40:	f8c0 2004 	str.w	r2, [r0, #4]
 8001d44:	f8c0 3008 	str.w	r3, [r0, #8]
 8001d48:	f8c0 400c 	str.w	r4, [r0, #12]
 8001d4c:	f8c0 5010 	str.w	r5, [r0, #16]
 8001d50:	f8c0 6014 	str.w	r6, [r0, #20]
 8001d54:	f8c0 7018 	str.w	r7, [r0, #24]
 8001d58:	f8c0 801c 	str.w	r8, [r0, #28]
 8001d5c:	f840 1b20 	str.w	r1, [r0], #32
 8001d60:	f1ba 0a01 	subs.w	sl, sl, #1
 8001d64:	f47f afac 	bne.w	8001cc0 <pqcrystals_dilithium_asm_reduce32+0x10>
 8001d68:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop

08001d70 <pqcrystals_dilithium_small_asm_reduce32_central>:
 8001d70:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8001d74:	f643 09ed 	movw	r9, #14573	; 0x38ed
 8001d78:	f2c0 0955 	movt	r9, #85	; 0x55
 8001d7c:	f240 3a01 	movw	sl, #769	; 0x301
 8001d80:	f240 0c20 	movw	ip, #32
 8001d84:	f8d0 1000 	ldr.w	r1, [r0]
 8001d88:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8001d8c:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8001d90:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8001d94:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8001d98:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001d9c:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8001da0:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001da4:	fb51 fb19 	smmulr	fp, r1, r9
 8001da8:	fb0b 111a 	mls	r1, fp, sl, r1
 8001dac:	fb52 fb19 	smmulr	fp, r2, r9
 8001db0:	fb0b 221a 	mls	r2, fp, sl, r2
 8001db4:	fb53 fb19 	smmulr	fp, r3, r9
 8001db8:	fb0b 331a 	mls	r3, fp, sl, r3
 8001dbc:	fb54 fb19 	smmulr	fp, r4, r9
 8001dc0:	fb0b 441a 	mls	r4, fp, sl, r4
 8001dc4:	fb55 fb19 	smmulr	fp, r5, r9
 8001dc8:	fb0b 551a 	mls	r5, fp, sl, r5
 8001dcc:	fb56 fb19 	smmulr	fp, r6, r9
 8001dd0:	fb0b 661a 	mls	r6, fp, sl, r6
 8001dd4:	fb57 fb19 	smmulr	fp, r7, r9
 8001dd8:	fb0b 771a 	mls	r7, fp, sl, r7
 8001ddc:	fb58 fb19 	smmulr	fp, r8, r9
 8001de0:	fb0b 881a 	mls	r8, fp, sl, r8
 8001de4:	f8c0 2004 	str.w	r2, [r0, #4]
 8001de8:	f8c0 3008 	str.w	r3, [r0, #8]
 8001dec:	f8c0 400c 	str.w	r4, [r0, #12]
 8001df0:	f8c0 5010 	str.w	r5, [r0, #16]
 8001df4:	f8c0 6014 	str.w	r6, [r0, #20]
 8001df8:	f8c0 7018 	str.w	r7, [r0, #24]
 8001dfc:	f8c0 801c 	str.w	r8, [r0, #28]
 8001e00:	f840 1b20 	str.w	r1, [r0], #32
 8001e04:	f1bc 0c01 	subs.w	ip, ip, #1
 8001e08:	f47f afbc 	bne.w	8001d84 <pqcrystals_dilithium_small_asm_reduce32_central+0x14>
 8001e0c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08001e10 <pqcrystals_dilithium_asm_caddq>:
 8001e10:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001e14:	f24e 0c01 	movw	ip, #57345	; 0xe001
 8001e18:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8001e1c:	f240 0a20 	movw	sl, #32
 8001e20:	f8d0 1000 	ldr.w	r1, [r0]
 8001e24:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8001e28:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8001e2c:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8001e30:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8001e34:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8001e38:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8001e3c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001e40:	ea0c 79e1 	and.w	r9, ip, r1, asr #31
 8001e44:	4449      	add	r1, r9
 8001e46:	ea0c 79e2 	and.w	r9, ip, r2, asr #31
 8001e4a:	444a      	add	r2, r9
 8001e4c:	ea0c 79e3 	and.w	r9, ip, r3, asr #31
 8001e50:	444b      	add	r3, r9
 8001e52:	ea0c 79e4 	and.w	r9, ip, r4, asr #31
 8001e56:	444c      	add	r4, r9
 8001e58:	ea0c 79e5 	and.w	r9, ip, r5, asr #31
 8001e5c:	444d      	add	r5, r9
 8001e5e:	ea0c 79e6 	and.w	r9, ip, r6, asr #31
 8001e62:	444e      	add	r6, r9
 8001e64:	ea0c 79e7 	and.w	r9, ip, r7, asr #31
 8001e68:	444f      	add	r7, r9
 8001e6a:	ea0c 79e8 	and.w	r9, ip, r8, asr #31
 8001e6e:	44c8      	add	r8, r9
 8001e70:	f8c0 2004 	str.w	r2, [r0, #4]
 8001e74:	f8c0 3008 	str.w	r3, [r0, #8]
 8001e78:	f8c0 400c 	str.w	r4, [r0, #12]
 8001e7c:	f8c0 5010 	str.w	r5, [r0, #16]
 8001e80:	f8c0 6014 	str.w	r6, [r0, #20]
 8001e84:	f8c0 7018 	str.w	r7, [r0, #24]
 8001e88:	f8c0 801c 	str.w	r8, [r0, #28]
 8001e8c:	f840 1b20 	str.w	r1, [r0], #32
 8001e90:	f1ba 0a01 	subs.w	sl, sl, #1
 8001e94:	f47f afc4 	bne.w	8001e20 <pqcrystals_dilithium_asm_caddq+0x10>
 8001e98:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop

08001ea0 <pqcrystals_dilithium_asm_rej_uniform>:
 8001ea0:	e92d 0070 	stmdb	sp!, {r4, r5, r6}
 8001ea4:	f84d 1d04 	str.w	r1, [sp, #-4]!
 8001ea8:	f24e 0c00 	movw	ip, #57344	; 0xe000
 8001eac:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8001eb0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8001eb4:	eb02 0303 	add.w	r3, r2, r3
 8001eb8:	f1a3 0302 	sub.w	r3, r3, #2
 8001ebc:	ebb3 0f02 	cmp.w	r3, r2
 8001ec0:	f340 800a 	ble.w	8001ed8 <end>
 8001ec4:	f852 5b03 	ldr.w	r5, [r2], #3
 8001ec8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8001ecc:	4565      	cmp	r5, ip
 8001ece:	bfd8      	it	le
 8001ed0:	f840 5b04 	strle.w	r5, [r0], #4
 8001ed4:	42b0      	cmp	r0, r6
 8001ed6:	d1f1      	bne.n	8001ebc <pqcrystals_dilithium_asm_rej_uniform+0x1c>

08001ed8 <end>:
 8001ed8:	f85d 5b04 	ldr.w	r5, [sp], #4
 8001edc:	eba6 0000 	sub.w	r0, r6, r0
 8001ee0:	eba5 0090 	sub.w	r0, r5, r0, lsr #2
 8001ee4:	e8bd 0070 	ldmia.w	sp!, {r4, r5, r6}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <memcpy>:
 8001eec:	4684      	mov	ip, r0
 8001eee:	ea41 0300 	orr.w	r3, r1, r0
 8001ef2:	f013 0303 	ands.w	r3, r3, #3
 8001ef6:	d16d      	bne.n	8001fd4 <memcpy+0xe8>
 8001ef8:	3a40      	subs	r2, #64	; 0x40
 8001efa:	d341      	bcc.n	8001f80 <memcpy+0x94>
 8001efc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f00:	f840 3b04 	str.w	r3, [r0], #4
 8001f04:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f08:	f840 3b04 	str.w	r3, [r0], #4
 8001f0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f10:	f840 3b04 	str.w	r3, [r0], #4
 8001f14:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f18:	f840 3b04 	str.w	r3, [r0], #4
 8001f1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f20:	f840 3b04 	str.w	r3, [r0], #4
 8001f24:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f28:	f840 3b04 	str.w	r3, [r0], #4
 8001f2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f30:	f840 3b04 	str.w	r3, [r0], #4
 8001f34:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f38:	f840 3b04 	str.w	r3, [r0], #4
 8001f3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f40:	f840 3b04 	str.w	r3, [r0], #4
 8001f44:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f48:	f840 3b04 	str.w	r3, [r0], #4
 8001f4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f50:	f840 3b04 	str.w	r3, [r0], #4
 8001f54:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f58:	f840 3b04 	str.w	r3, [r0], #4
 8001f5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f60:	f840 3b04 	str.w	r3, [r0], #4
 8001f64:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f68:	f840 3b04 	str.w	r3, [r0], #4
 8001f6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f70:	f840 3b04 	str.w	r3, [r0], #4
 8001f74:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f78:	f840 3b04 	str.w	r3, [r0], #4
 8001f7c:	3a40      	subs	r2, #64	; 0x40
 8001f7e:	d2bd      	bcs.n	8001efc <memcpy+0x10>
 8001f80:	3230      	adds	r2, #48	; 0x30
 8001f82:	d311      	bcc.n	8001fa8 <memcpy+0xbc>
 8001f84:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f88:	f840 3b04 	str.w	r3, [r0], #4
 8001f8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f90:	f840 3b04 	str.w	r3, [r0], #4
 8001f94:	f851 3b04 	ldr.w	r3, [r1], #4
 8001f98:	f840 3b04 	str.w	r3, [r0], #4
 8001f9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fa0:	f840 3b04 	str.w	r3, [r0], #4
 8001fa4:	3a10      	subs	r2, #16
 8001fa6:	d2ed      	bcs.n	8001f84 <memcpy+0x98>
 8001fa8:	320c      	adds	r2, #12
 8001faa:	d305      	bcc.n	8001fb8 <memcpy+0xcc>
 8001fac:	f851 3b04 	ldr.w	r3, [r1], #4
 8001fb0:	f840 3b04 	str.w	r3, [r0], #4
 8001fb4:	3a04      	subs	r2, #4
 8001fb6:	d2f9      	bcs.n	8001fac <memcpy+0xc0>
 8001fb8:	3204      	adds	r2, #4
 8001fba:	d008      	beq.n	8001fce <memcpy+0xe2>
 8001fbc:	07d2      	lsls	r2, r2, #31
 8001fbe:	bf1c      	itt	ne
 8001fc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001fc4:	f800 3b01 	strbne.w	r3, [r0], #1
 8001fc8:	d301      	bcc.n	8001fce <memcpy+0xe2>
 8001fca:	880b      	ldrh	r3, [r1, #0]
 8001fcc:	8003      	strh	r3, [r0, #0]
 8001fce:	4660      	mov	r0, ip
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2a08      	cmp	r2, #8
 8001fd6:	d313      	bcc.n	8002000 <memcpy+0x114>
 8001fd8:	078b      	lsls	r3, r1, #30
 8001fda:	d08d      	beq.n	8001ef8 <memcpy+0xc>
 8001fdc:	f010 0303 	ands.w	r3, r0, #3
 8001fe0:	d08a      	beq.n	8001ef8 <memcpy+0xc>
 8001fe2:	f1c3 0304 	rsb	r3, r3, #4
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	07db      	lsls	r3, r3, #31
 8001fea:	bf1c      	itt	ne
 8001fec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001ff0:	f800 3b01 	strbne.w	r3, [r0], #1
 8001ff4:	d380      	bcc.n	8001ef8 <memcpy+0xc>
 8001ff6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001ffa:	f820 3b02 	strh.w	r3, [r0], #2
 8001ffe:	e77b      	b.n	8001ef8 <memcpy+0xc>
 8002000:	3a04      	subs	r2, #4
 8002002:	d3d9      	bcc.n	8001fb8 <memcpy+0xcc>
 8002004:	3a01      	subs	r2, #1
 8002006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800200a:	f800 3b01 	strb.w	r3, [r0], #1
 800200e:	d2f9      	bcs.n	8002004 <memcpy+0x118>
 8002010:	780b      	ldrb	r3, [r1, #0]
 8002012:	7003      	strb	r3, [r0, #0]
 8002014:	784b      	ldrb	r3, [r1, #1]
 8002016:	7043      	strb	r3, [r0, #1]
 8002018:	788b      	ldrb	r3, [r1, #2]
 800201a:	7083      	strb	r3, [r0, #2]
 800201c:	4660      	mov	r0, ip
 800201e:	4770      	bx	lr

08002020 <enc_password>:
uint8_t smbuf_chunk_13(uint8_t *p, uint8_t len);
uint8_t smbuf_chunk_14(uint8_t *p, uint8_t len);
// uint8_t test_chunk_6(uint8_t *p, uint8_t len);*/


uint8_t enc_password(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p){
 8002020:	b510      	push	{r4, lr}
 8002022:	461c      	mov	r4, r3
    p[0] = 17;
 8002024:	2311      	movs	r3, #17
 8002026:	7023      	strb	r3, [r4, #0]
   test_fun2(p);
 8002028:	4620      	mov	r0, r4
 800202a:	f000 f94b 	bl	80022c4 <test_fun2>
   simpleserial_put('r', 136, p);
 800202e:	4622      	mov	r2, r4
 8002030:	2188      	movs	r1, #136	; 0x88
 8002032:	2072      	movs	r0, #114	; 0x72
 8002034:	f001 fa8a 	bl	800354c <simpleserial_put>
   return 0x00;
}
 8002038:	2000      	movs	r0, #0
 800203a:	bd10      	pop	{r4, pc}

0800203c <dilithium1>:
   return 0x00;
}


uint8_t dilithium1(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p)
{
 800203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002040:	f6ad 7da8 	subw	sp, sp, #4008	; 0xfa8
 8002044:	461d      	mov	r5, r3
 8002046:	a904      	add	r1, sp, #16
    mlen = 33*(0+1);

    char c[16];
   	unsigned int i=0;
	unsigned int j=0,k=0;
    for	(i=0;i<16;i++){
 8002048:	2300      	movs	r3, #0
	if (i<10)
 800204a:	2b09      	cmp	r3, #9
        c[i] = '0' +i;
 800204c:	bf94      	ite	ls
 800204e:	f103 0230 	addls.w	r2, r3, #48	; 0x30
	else
        c[i] = 'A' + i-10;
 8002052:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
    for	(i=0;i<16;i++){
 8002056:	3301      	adds	r3, #1
        c[i] = 'A' + i-10;
 8002058:	b2d2      	uxtb	r2, r2
    for	(i=0;i<16;i++){
 800205a:	2b10      	cmp	r3, #16
 800205c:	f801 2b01 	strb.w	r2, [r1], #1
 8002060:	d1f3      	bne.n	800204a <dilithium1+0xe>
	}
    //给消息赋值
    //改動1開始，原來只有底下被注釋的一行
    char mstr[66] = "35DFB0A4D19D9A123C95D2C3F0201F92D62BAD8254FC32CE3750C64212B6044FDF";
    for(int i=0; i < 66;i++){
        mstr[i] = p[i];
 8002062:	2242      	movs	r2, #66	; 0x42
 8002064:	4629      	mov	r1, r5
 8002066:	a811      	add	r0, sp, #68	; 0x44
 8002068:	f7ff ff40 	bl	8001eec <memcpy>
    }
    //改動1結束

   for(int i=0; i < 180;i++){
         p[i]=0;
 800206c:	2100      	movs	r1, #0
 800206e:	22b4      	movs	r2, #180	; 0xb4
 8002070:	4628      	mov	r0, r5
 8002072:	f003 fb05 	bl	8005680 <memset>
 8002076:	ab08      	add	r3, sp, #32
 8002078:	a911      	add	r1, sp, #68	; 0x44
   // for(int i=0; i < 66;i++){
   //     p[90+i] = mstr[i];
   // }

    //改動2，注釋了以下
    for(i=0,j=0;i<66;i++,j++){
 800207a:	2600      	movs	r6, #0
 800207c:	461f      	mov	r7, r3
	msg[j] = 0;
	for(k=0; c[k] != mstr[i] ;k++);
 800207e:	7808      	ldrb	r0, [r1, #0]
 8002080:	aa04      	add	r2, sp, #16
 8002082:	2400      	movs	r4, #0
 8002084:	e000      	b.n	8002088 <dilithium1+0x4c>
 8002086:	3401      	adds	r4, #1
 8002088:	f812 cb01 	ldrb.w	ip, [r2], #1
 800208c:	4584      	cmp	ip, r0
 800208e:	d1fa      	bne.n	8002086 <dilithium1+0x4a>
	msg[j] += k*16;
 8002090:	0124      	lsls	r4, r4, #4
	i+=1;
	for(k=0; c[k] != mstr[i] ;k++);
 8002092:	f891 c001 	ldrb.w	ip, [r1, #1]
	msg[j] += k*16;
 8002096:	b2e4      	uxtb	r4, r4
	for(k=0; c[k] != mstr[i] ;k++);
 8002098:	a804      	add	r0, sp, #16
 800209a:	2200      	movs	r2, #0
 800209c:	f810 eb01 	ldrb.w	lr, [r0], #1
 80020a0:	45e6      	cmp	lr, ip
 80020a2:	d132      	bne.n	800210a <dilithium1+0xce>
    for(i=0,j=0;i<66;i++,j++){
 80020a4:	3601      	adds	r6, #1
	msg[j] += k;
 80020a6:	4414      	add	r4, r2
    for(i=0,j=0;i<66;i++,j++){
 80020a8:	2e21      	cmp	r6, #33	; 0x21
	msg[j] += k;
 80020aa:	f803 4b01 	strb.w	r4, [r3], #1
    for(i=0,j=0;i<66;i++,j++){
 80020ae:	f101 0102 	add.w	r1, r1, #2
 80020b2:	d1e4      	bne.n	800207e <dilithium1+0x42>
    // p[87] = 33;
    // p[86] = 33;
    
    // p[13] = ETA;
    m1 = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char)); 
 80020b4:	2101      	movs	r1, #1
 80020b6:	f640 1095 	movw	r0, #2453	; 0x995
 80020ba:	f002 ffc3 	bl	8005044 <calloc>
    crypto_sign_keypair(pk,sk);
 80020be:	f50d 68b5 	add.w	r8, sp, #1448	; 0x5a8
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char)); 
 80020c2:	4604      	mov	r4, r0
    crypto_sign_keypair(pk,sk);
 80020c4:	4641      	mov	r1, r8
 80020c6:	a822      	add	r0, sp, #136	; 0x88
 80020c8:	f000 f85a 	bl	8002180 <crypto_sign_keypair>


	//crypto_sign是簽名函數,生成的簽名消息為sm
	
    
    if ( (ret_val = crypto_sign(sm, &smlen, msg, mlen, sk,p)) != 0) {
 80020cc:	e9cd 8500 	strd	r8, r5, [sp]
 80020d0:	4633      	mov	r3, r6
 80020d2:	463a      	mov	r2, r7
 80020d4:	a903      	add	r1, sp, #12
 80020d6:	4620      	mov	r0, r4
 80020d8:	f000 fa7a 	bl	80025d0 <crypto_sign>
 80020dc:	b2c0      	uxtb	r0, r0
 80020de:	b138      	cbz	r0, 80020f0 <dilithium1+0xb4>
 80020e0:	1e6b      	subs	r3, r5, #1
 80020e2:	1da9      	adds	r1, r5, #6
        //printf("crypto_sign returned <%d>\n", ret_val);
        for(int x=0; x <7;x++){
            p[x] +=20;
 80020e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80020e8:	3214      	adds	r2, #20
        for(int x=0; x <7;x++){
 80020ea:	4299      	cmp	r1, r3
            p[x] +=20;
 80020ec:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <7;x++){
 80020ee:	d1f9      	bne.n	80020e4 <dilithium1+0xa8>
    //     }
        // p[25] = DILITHIUM_MODE;
    
        free(m1);
        // free(sm);
        free(m);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f003 f80d 	bl	8005110 <free>
    simpleserial_put('r', 180, p);
 80020f6:	462a      	mov	r2, r5
 80020f8:	21b4      	movs	r1, #180	; 0xb4
 80020fa:	2072      	movs	r0, #114	; 0x72
 80020fc:	f001 fa26 	bl	800354c <simpleserial_put>
   return 0x00;
}
 8002100:	2000      	movs	r0, #0
 8002102:	f60d 7da8 	addw	sp, sp, #4008	; 0xfa8
 8002106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(k=0; c[k] != mstr[i] ;k++);
 800210a:	3201      	adds	r2, #1
 800210c:	e7c6      	b.n	800209c <dilithium1+0x60>
 800210e:	0000      	movs	r0, r0

08002110 <main>:
// {
//      simpleserial_put('r',20, array);
//      return 0x00;
// }
注釋2結束*/
int main(void){
 8002110:	b508      	push	{r3, lr}

    platform_init();
 8002112:	f001 fabf 	bl	8003694 <platform_init>
    init_uart();
 8002116:	f001 fb05 	bl	8003724 <init_uart>

    trigger_setup();
 800211a:	f001 fb41 	bl	80037a0 <trigger_setup>
    
    /* Device reset detected */
    putch('r');
 800211e:	2072      	movs	r0, #114	; 0x72
 8002120:	f001 fb80 	bl	8003824 <putch>
    putch('R');
 8002124:	2052      	movs	r0, #82	; 0x52
 8002126:	f001 fb7d 	bl	8003824 <putch>
    putch('E');
 800212a:	2045      	movs	r0, #69	; 0x45
 800212c:	f001 fb7a 	bl	8003824 <putch>
    putch('S');
 8002130:	2053      	movs	r0, #83	; 0x53
 8002132:	f001 fb77 	bl	8003824 <putch>
    putch('E');
 8002136:	2045      	movs	r0, #69	; 0x45
 8002138:	f001 fb74 	bl	8003824 <putch>
    putch('T');
 800213c:	2054      	movs	r0, #84	; 0x54
 800213e:	f001 fb71 	bl	8003824 <putch>
    putch(' ');
 8002142:	2020      	movs	r0, #32
 8002144:	f001 fb6e 	bl	8003824 <putch>
    putch(' ');
 8002148:	2020      	movs	r0, #32
 800214a:	f001 fb6b 	bl	8003824 <putch>
    putch(' ');
 800214e:	2020      	movs	r0, #32
 8002150:	f001 fb68 	bl	8003824 <putch>
    putch('\n');
 8002154:	200a      	movs	r0, #10
 8002156:	f001 fb65 	bl	8003824 <putch>
    
    simpleserial_init();
 800215a:	f001 f9da 	bl	8003512 <simpleserial_init>
    simpleserial_addcmd('A', 136, enc_password);
 800215e:	4a06      	ldr	r2, [pc, #24]	; (8002178 <main+0x68>)
 8002160:	2188      	movs	r1, #136	; 0x88
 8002162:	2041      	movs	r0, #65	; 0x41
 8002164:	f001 f9d6 	bl	8003514 <simpleserial_addcmd>
    
    simpleserial_addcmd('3', 180, dilithium1);
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <main+0x6c>)
 800216a:	21b4      	movs	r1, #180	; 0xb4
 800216c:	2033      	movs	r0, #51	; 0x33
 800216e:	f001 f9d1 	bl	8003514 <simpleserial_addcmd>
    simpleserial_addcmd('N',0,smbuf_chunk_14);

   注釋3結束*/
    
    while(1)
        simpleserial_get();
 8002172:	f001 fa19 	bl	80035a8 <simpleserial_get>
    while(1)
 8002176:	e7fc      	b.n	8002172 <main+0x62>
 8002178:	08002021 	.word	0x08002021
 800217c:	0800203d 	.word	0x0800203d

08002180 <crypto_sign_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8002180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002184:	f5ad 4d12 	sub.w	sp, sp, #37376	; 0x9200
 8002188:	b0a5      	sub	sp, #148	; 0x94
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  //randombytes(seedbuf, SEEDBYTES);
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 800218a:	f44f 7280 	mov.w	r2, #256	; 0x100
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 800218e:	4605      	mov	r5, r0
 8002190:	460e      	mov	r6, r1
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 8002192:	a864      	add	r0, sp, #400	; 0x190
 8002194:	494a      	ldr	r1, [pc, #296]	; (80022c0 <crypto_sign_keypair+0x140>)
 8002196:	ac64      	add	r4, sp, #400	; 0x190
 8002198:	f7ff fea8 	bl	8001eec <memcpy>
	uint8_t cacheintsk[6*SEEDBYTES];
	for (int i = 0; i <2 * SEEDBYTES; i++)
 800219c:	f1a4 02c0 	sub.w	r2, r4, #192	; 0xc0
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 80021a0:	4610      	mov	r0, r2
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80021a2:	2100      	movs	r1, #0
	{
		if (seedbufcha[i] - 'A' >= 0)
 80021a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80021a8:	2b40      	cmp	r3, #64	; 0x40
			cacheintsk[i] = 10 + seedbufcha[i] - 'A';
 80021aa:	bf8c      	ite	hi
 80021ac:	3b37      	subhi	r3, #55	; 0x37
		else
			cacheintsk[i] = seedbufcha[i] - '0';
 80021ae:	3b30      	subls	r3, #48	; 0x30
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80021b0:	3101      	adds	r1, #1
			cacheintsk[i] = seedbufcha[i] - '0';
 80021b2:	b2db      	uxtb	r3, r3
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80021b4:	2940      	cmp	r1, #64	; 0x40
 80021b6:	f800 3b01 	strb.w	r3, [r0], #1
 80021ba:	d1f3      	bne.n	80021a4 <crypto_sign_keypair+0x24>
 80021bc:	a914      	add	r1, sp, #80	; 0x50
	}
	for (int i = 0; i < SEEDBYTES; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	460c      	mov	r4, r1
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 80021c2:	7817      	ldrb	r7, [r2, #0]
 80021c4:	7850      	ldrb	r0, [r2, #1]
	for (int i = 0; i < SEEDBYTES; i++)
 80021c6:	3301      	adds	r3, #1
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 80021c8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
	for (int i = 0; i < SEEDBYTES; i++)
 80021cc:	2b20      	cmp	r3, #32
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 80021ce:	f801 0b01 	strb.w	r0, [r1], #1
	for (int i = 0; i < SEEDBYTES; i++)
 80021d2:	f102 0202 	add.w	r2, r2, #2
 80021d6:	d1f4      	bne.n	80021c2 <crypto_sign_keypair+0x42>
  
  //
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 80021d8:	4622      	mov	r2, r4
 80021da:	4620      	mov	r0, r4
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	f001 f947 	bl	8003470 <shake256>
  rho = seedbuf;
  rhoprime = rho + SEEDBYTES;
  key = rhoprime + CRHBYTES;

  /* Expand matrix */
  polyvec_matrix_expand(mat, rho);
 80021e2:	f50d 40a5 	add.w	r0, sp, #21120	; 0x5280

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 80021e6:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 80021ea:	afa4      	add	r7, sp, #656	; 0x290
  polyvec_matrix_expand(mat, rho);
 80021ec:	4621      	mov	r1, r4
 80021ee:	3010      	adds	r0, #16
  polyveck_uniform_eta(&s2, rhoprime, L);
 80021f0:	f50d 580a 	add.w	r8, sp, #8832	; 0x2280
  polyvec_matrix_expand(mat, rho);
 80021f4:	f000 fe25 	bl	8002e42 <pqcrystals_dilithium_polyvec_matrix_expand>
  polyveck_uniform_eta(&s2, rhoprime, L);
 80021f8:	f108 0810 	add.w	r8, r8, #16
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 80021fc:	4649      	mov	r1, r9
 80021fe:	4638      	mov	r0, r7
 8002200:	2200      	movs	r2, #0
 8002202:	f000 fe37 	bl	8002e74 <pqcrystals_dilithium_polyvecl_uniform_eta>
  polyveck_uniform_eta(&s2, rhoprime, L);
 8002206:	4649      	mov	r1, r9
 8002208:	4640      	mov	r0, r8
 800220a:	2204      	movs	r2, #4
 800220c:	f000 febd 	bl	8002f8a <pqcrystals_dilithium_polyveck_uniform_eta>

  /* Matrix-vector multiplication */
  s1hat = s1;
 8002210:	f50d 5094 	add.w	r0, sp, #4736	; 0x1280
 8002214:	4639      	mov	r1, r7
 8002216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800221a:	3010      	adds	r0, #16
 800221c:	f7ff fe66 	bl	8001eec <memcpy>
  polyvecl_ntt(&s1hat);
 8002220:	f50d 5094 	add.w	r0, sp, #4736	; 0x1280
 8002224:	3010      	adds	r0, #16
 8002226:	f000 fe68 	bl	8002efa <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 800222a:	f50d 5294 	add.w	r2, sp, #4736	; 0x1280
 800222e:	f50d 41a5 	add.w	r1, sp, #21120	; 0x5280
 8002232:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 8002236:	3210      	adds	r2, #16
 8002238:	3110      	adds	r1, #16
 800223a:	3010      	adds	r0, #16
 800223c:	f000 fe82 	bl	8002f44 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&t1);
 8002240:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 8002244:	3010      	adds	r0, #16
 8002246:	f000 feb0 	bl	8002faa <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&t1);
 800224a:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 800224e:	3010      	adds	r0, #16
 8002250:	f000 fef1 	bl	8003036 <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
 8002254:	f50d 514a 	add.w	r1, sp, #12928	; 0x3280
 8002258:	3110      	adds	r1, #16
 800225a:	4642      	mov	r2, r8
 800225c:	4608      	mov	r0, r1
 800225e:	f000 fec8 	bl	8002ff2 <pqcrystals_dilithium_polyveck_add>

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 8002262:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 8002266:	3010      	adds	r0, #16
 8002268:	f000 feb1 	bl	8002fce <pqcrystals_dilithium_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 800226c:	f50d 4985 	add.w	r9, sp, #17024	; 0x4280
 8002270:	f50d 524a 	add.w	r2, sp, #12928	; 0x3280
 8002274:	f109 0910 	add.w	r9, r9, #16
 8002278:	3210      	adds	r2, #16
 800227a:	4649      	mov	r1, r9
 800227c:	4610      	mov	r0, r2
 800227e:	f000 feec 	bl	800305a <pqcrystals_dilithium_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 8002282:	f50d 524a 	add.w	r2, sp, #12928	; 0x3280
 8002286:	4621      	mov	r1, r4
 8002288:	4628      	mov	r0, r5
 800228a:	3210      	adds	r2, #16
 800228c:	f000 f9be 	bl	800260c <pqcrystals_dilithium_pack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, TRBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 8002290:	462a      	mov	r2, r5
 8002292:	a804      	add	r0, sp, #16
 8002294:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8002298:	2140      	movs	r1, #64	; 0x40
 800229a:	f001 f8e9 	bl	8003470 <shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 800229e:	4630      	mov	r0, r6
 80022a0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80022a4:	f8cd 9000 	str.w	r9, [sp]
 80022a8:	ab2c      	add	r3, sp, #176	; 0xb0
 80022aa:	aa04      	add	r2, sp, #16
 80022ac:	4621      	mov	r1, r4
 80022ae:	f000 f9c8 	bl	8002642 <pqcrystals_dilithium_pack_sk>

  return 0;
}
 80022b2:	2000      	movs	r0, #0
 80022b4:	f50d 4d12 	add.w	sp, sp, #37376	; 0x9200
 80022b8:	b025      	add	sp, #148	; 0x94
 80022ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022be:	bf00      	nop
 80022c0:	08006c80 	.word	0x08006c80

080022c4 <test_fun2>:
	p[6]= buf[6];
	p[7]= buf[7];
}


void test_fun2(uint8_t *p){
 80022c4:	b510      	push	{r4, lr}
 80022c6:	f5ad 4d92 	sub.w	sp, sp, #18688	; 0x4900
 80022ca:	b096      	sub	sp, #88	; 0x58
 80022cc:	4604      	mov	r4, r0
	seed[30]=17;
	seed[50]=17;
	seed[17]=17;
	
	for(int i=0; i < 64;i++)
		seed[i] = 17;
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	2111      	movs	r1, #17
 80022d2:	a802      	add	r0, sp, #8
 80022d4:	f003 f9d4 	bl	8005680 <memset>
	/* uint64_t s_inc[26]; */
	stream256_init(&state, seed, 0);
 80022d8:	ab12      	add	r3, sp, #72	; 0x48
 80022da:	4618      	mov	r0, r3
 80022dc:	a902      	add	r1, sp, #8
 80022de:	2200      	movs	r2, #0
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	f000 ff3e 	bl	8003162 <pqcrystals_dilithium_dilithium_shake256_stream_init>
	buf[4]=17;
	buf[5]=17;
	buf[6]=17;
	buf[7]=17;
	for(int ii=0; ii < 136 ;ii++){
		buf[ii] = 17;
 80022e6:	2288      	movs	r2, #136	; 0x88
 80022e8:	2111      	movs	r1, #17
 80022ea:	a846      	add	r0, sp, #280	; 0x118
 80022ec:	f003 f9c8 	bl	8005680 <memset>
	}
	trigger_high();
 80022f0:	f001 fa76 	bl	80037e0 <trigger_high>
	stream256_squeezeblocks(buf,136,&state);
 80022f4:	9a01      	ldr	r2, [sp, #4]
 80022f6:	f644 0140 	movw	r1, #18496	; 0x4840
 80022fa:	a846      	add	r0, sp, #280	; 0x118
 80022fc:	f001 f8b5 	bl	800346a <shake256_inc_squeeze>
	trigger_low();
 8002300:	f001 fa76 	bl	80037f0 <trigger_low>
	
	for(int kk=0; kk < 136 ;kk++)
		p[kk] = buf[kk];
 8002304:	2288      	movs	r2, #136	; 0x88
 8002306:	a946      	add	r1, sp, #280	; 0x118
 8002308:	4620      	mov	r0, r4
 800230a:	f7ff fdef 	bl	8001eec <memcpy>
}
 800230e:	f50d 4d92 	add.w	sp, sp, #18688	; 0x4900
 8002312:	b016      	add	sp, #88	; 0x58
 8002314:	bd10      	pop	{r4, pc}
 8002316:	0000      	movs	r0, r0

08002318 <crypto_sign_signature>:
int crypto_sign_signature(uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk,uint8_t *p)
{
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231c:	f5ad 4d3c 	sub.w	sp, sp, #48128	; 0xbc00
 8002320:	b087      	sub	sp, #28
 8002322:	461e      	mov	r6, r3
  tr = rho + SEEDBYTES;
  key = tr + TRBYTES;
  rnd = key + SEEDBYTES;
  mu = rnd + RNDBYTES;
  rhoprime = mu + CRHBYTES;
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 8002324:	f50d 433c 	add.w	r3, sp, #48128	; 0xbc00
 8002328:	3340      	adds	r3, #64	; 0x40
 800232a:	f50d 49d8 	add.w	r9, sp, #27648	; 0x6c00
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	f50d 47b8 	add.w	r7, sp, #23552	; 0x5c00
 8002336:	f50d 78ac 	add.w	r8, sp, #344	; 0x158
 800233a:	f109 0918 	add.w	r9, r9, #24
 800233e:	3718      	adds	r7, #24
 8002340:	f50d 5330 	add.w	r3, sp, #11264	; 0x2c00
 8002344:	3318      	adds	r3, #24
{
 8002346:	9104      	str	r1, [sp, #16]
 8002348:	4614      	mov	r4, r2
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 800234a:	a946      	add	r1, sp, #280	; 0x118
 800234c:	4642      	mov	r2, r8
{
 800234e:	4605      	mov	r5, r0
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 8002350:	f8cd 9004 	str.w	r9, [sp, #4]
 8002354:	a83e      	add	r0, sp, #248	; 0xf8
 8002356:	9700      	str	r7, [sp, #0]
 8002358:	f000 f9ba 	bl	80026d0 <pqcrystals_dilithium_unpack_sk>

  /* Compute mu = CRH(tr, msg) */
  shake256_inc_init(&state);
 800235c:	a80a      	add	r0, sp, #40	; 0x28
 800235e:	f001 f879 	bl	8003454 <shake256_inc_init>
  shake256_inc_absorb(&state, tr, TRBYTES);
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	a946      	add	r1, sp, #280	; 0x118
 8002366:	a80a      	add	r0, sp, #40	; 0x28
 8002368:	f001 f876 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_absorb(&state, m, mlen);
 800236c:	4632      	mov	r2, r6
 800236e:	4621      	mov	r1, r4
 8002370:	a80a      	add	r0, sp, #40	; 0x28
 8002372:	f001 f871 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 8002376:	a80a      	add	r0, sp, #40	; 0x28
 8002378:	f001 f873 	bl	8003462 <shake256_inc_finalize>
  shake256_inc_squeeze(mu, CRHBYTES, &state);
 800237c:	aa0a      	add	r2, sp, #40	; 0x28
 800237e:	2140      	movs	r1, #64	; 0x40
 8002380:	a866      	add	r0, sp, #408	; 0x198
 8002382:	f001 f872 	bl	800346a <shake256_inc_squeeze>

  for (n = 0; n < RNDBYTES; n++) {
     rnd[n] = 0;
 8002386:	2220      	movs	r2, #32
 8002388:	2100      	movs	r1, #0
 800238a:	a85e      	add	r0, sp, #376	; 0x178
 800238c:	f003 f978 	bl	8005680 <memset>
  }
  
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	4642      	mov	r2, r8
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	a876      	add	r0, sp, #472	; 0x1d8
 8002398:	f001 f86a 	bl	8003470 <shake256>
  
  /* Expand matrix and transform vectors */
  polyvec_matrix_expand(mat, rho);
 800239c:	f50d 40f8 	add.w	r0, sp, #31744	; 0x7c00
 80023a0:	a93e      	add	r1, sp, #248	; 0xf8
 80023a2:	3018      	adds	r0, #24
 80023a4:	f000 fd4d 	bl	8002e42 <pqcrystals_dilithium_polyvec_matrix_expand>
  polyvecl_small_ntt(s1_prime);
 80023a8:	4638      	mov	r0, r7
 80023aa:	f000 ff17 	bl	80031dc <polyvecl_small_ntt>
  polyveck_small_ntt(s2_prime);
 80023ae:	4648      	mov	r0, r9
 80023b0:	f000 ff28 	bl	8003204 <polyveck_small_ntt>

  polyveck_ntt(&t0);
 80023b4:	f50d 5030 	add.w	r0, sp, #11264	; 0x2c00
 80023b8:	3018      	adds	r0, #24
 80023ba:	f000 fe2a 	bl	8003012 <pqcrystals_dilithium_polyveck_ntt>


  /* Write signature */
  pack_sig_z(sig, &z);
  unsigned int hint_n = 0;
  unsigned int hints_written = 0;
 80023be:	ab09      	add	r3, sp, #36	; 0x24
  polyveck_ntt(&t0);
 80023c0:	f04f 0800 	mov.w	r8, #0
  unsigned int hints_written = 0;
 80023c4:	9307      	str	r3, [sp, #28]
  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);
 80023c6:	fa1f f288 	uxth.w	r2, r8
 80023ca:	a976      	add	r1, sp, #472	; 0x1d8
 80023cc:	f60d 4018 	addw	r0, sp, #3096	; 0xc18
 80023d0:	f000 fd60 	bl	8002e94 <pqcrystals_dilithium_polyvecl_uniform_gamma1>
  z = y;
 80023d4:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80023d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023dc:	f60d 4118 	addw	r1, sp, #3096	; 0xc18
 80023e0:	3018      	adds	r0, #24
 80023e2:	f7ff fd83 	bl	8001eec <memcpy>
  polyvecl_ntt(&z);
 80023e6:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80023ea:	3018      	adds	r0, #24
 80023ec:	f000 fd85 	bl	8002efa <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 80023f0:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 80023f4:	f50d 41f8 	add.w	r1, sp, #31744	; 0x7c00
 80023f8:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 80023fc:	3218      	adds	r2, #24
 80023fe:	3118      	adds	r1, #24
 8002400:	3018      	adds	r0, #24
 8002402:	f000 fd9f 	bl	8002f44 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 8002406:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 800240a:	3018      	adds	r0, #24
 800240c:	f000 fdcd 	bl	8002faa <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 8002410:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 8002414:	3018      	adds	r0, #24
 8002416:	f000 fe0e 	bl	8003036 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
 800241a:	f50d 5070 	add.w	r0, sp, #15360	; 0x3c00
 800241e:	3018      	adds	r0, #24
 8002420:	f000 fdd5 	bl	8002fce <pqcrystals_dilithium_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 8002424:	f50d 5270 	add.w	r2, sp, #15360	; 0x3c00
 8002428:	3218      	adds	r2, #24
 800242a:	f50d 4198 	add.w	r1, sp, #19456	; 0x4c00
 800242e:	4610      	mov	r0, r2
 8002430:	3118      	adds	r1, #24
 8002432:	f000 fe22 	bl	800307a <pqcrystals_dilithium_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 8002436:	f50d 5170 	add.w	r1, sp, #15360	; 0x3c00
 800243a:	3118      	adds	r1, #24
 800243c:	4628      	mov	r0, r5
 800243e:	f000 fe2c 	bl	800309a <pqcrystals_dilithium_polyveck_pack_w1>
  shake256_inc_init(&state);
 8002442:	a80a      	add	r0, sp, #40	; 0x28
 8002444:	f001 f806 	bl	8003454 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	a966      	add	r1, sp, #408	; 0x198
 800244c:	a80a      	add	r0, sp, #40	; 0x28
 800244e:	f001 f803 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 8002452:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002456:	4629      	mov	r1, r5
 8002458:	a80a      	add	r0, sp, #40	; 0x28
 800245a:	f000 fffd 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 800245e:	a80a      	add	r0, sp, #40	; 0x28
 8002460:	f000 ffff 	bl	8003462 <shake256_inc_finalize>
  shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 8002464:	aa0a      	add	r2, sp, #40	; 0x28
 8002466:	2120      	movs	r1, #32
 8002468:	4628      	mov	r0, r5
 800246a:	f000 fffe 	bl	800346a <shake256_inc_squeeze>
  poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 800246e:	f50d 7b06 	add.w	fp, sp, #536	; 0x218
  poly_challenge(&cp, sig);
 8002472:	4629      	mov	r1, r5
 8002474:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
  poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 8002478:	f60d 0a18 	addw	sl, sp, #2072	; 0x818
  poly_challenge(&cp, sig);
 800247c:	f000 fab7 	bl	80029ee <pqcrystals_dilithium_poly_challenge>
  poly_small_ntt_precomp(&cp_small, &cp_small_prime, &cp);
 8002480:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
 8002484:	4659      	mov	r1, fp
 8002486:	4650      	mov	r0, sl
 8002488:	f000 fe84 	bl	8003194 <poly_small_ntt_precomp>
  poly_ntt(&cp);
 800248c:	f50d 6083 	add.w	r0, sp, #1048	; 0x418
 8002490:	f000 f9f1 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
  polyvecl_small_basemul_invntt(&z, &cp_small, &cp_small_prime, s1_prime);
 8002494:	f50d 43b8 	add.w	r3, sp, #23552	; 0x5c00
 8002498:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 800249c:	3318      	adds	r3, #24
 800249e:	465a      	mov	r2, fp
 80024a0:	4651      	mov	r1, sl
 80024a2:	3018      	adds	r0, #24
 80024a4:	f000 fec4 	bl	8003230 <polyvecl_small_basemul_invntt>
  polyvecl_add(&z, &z, &y);
 80024a8:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80024ac:	3118      	adds	r1, #24
 80024ae:	4608      	mov	r0, r1
 80024b0:	f60d 4218 	addw	r2, sp, #3096	; 0xc18
 80024b4:	f000 fd11 	bl	8002eda <pqcrystals_dilithium_polyvecl_add>
  polyvecl_reduce(&z);
 80024b8:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80024bc:	3018      	adds	r0, #24
 80024be:	f000 fcfa 	bl	8002eb6 <pqcrystals_dilithium_polyvecl_reduce>
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 80024c2:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80024c6:	4940      	ldr	r1, [pc, #256]	; (80025c8 <crypto_sign_signature+0x2b0>)
 80024c8:	3018      	adds	r0, #24
 80024ca:	f000 fd4d 	bl	8002f68 <pqcrystals_dilithium_polyvecl_chknorm>
 80024ce:	4604      	mov	r4, r0
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d176      	bne.n	80025c2 <crypto_sign_signature+0x2aa>
  pack_sig_z(sig, &z);
 80024d4:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 80024d8:	3118      	adds	r1, #24
 80024da:	4628      	mov	r0, r5
 80024dc:	f000 f940 	bl	8002760 <pqcrystals_dilithium_pack_sig_z>
  unsigned int hints_written = 0;
 80024e0:	9b07      	ldr	r3, [sp, #28]
  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  for(unsigned int i = 0; i < K; ++i) {
    poly *tmp = &z.vec[0];
    poly_small_basemul_invntt(tmp, &cp_small, &cp_small_prime, &s2_prime[i]);
 80024e2:	e9cd ba05 	strd	fp, sl, [sp, #20]
  unsigned int hints_written = 0;
 80024e6:	601c      	str	r4, [r3, #0]
  for(unsigned int i = 0; i < K; ++i) {
 80024e8:	4626      	mov	r6, r4
  unsigned int hint_n = 0;
 80024ea:	4627      	mov	r7, r4
    poly_small_basemul_invntt(tmp, &cp_small, &cp_small_prime, &s2_prime[i]);
 80024ec:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 80024f0:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80024f4:	eb09 0304 	add.w	r3, r9, r4
 80024f8:	3018      	adds	r0, #24
 80024fa:	f000 fe85 	bl	8003208 <poly_small_basemul_invntt>

    poly_sub(&w0.vec[i], &w0.vec[i], tmp);
 80024fe:	f50d 4398 	add.w	r3, sp, #19456	; 0x4c00
 8002502:	3318      	adds	r3, #24
 8002504:	eb03 0b04 	add.w	fp, r3, r4
 8002508:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 800250c:	4659      	mov	r1, fp
 800250e:	3218      	adds	r2, #24
 8002510:	4658      	mov	r0, fp
 8002512:	f000 f9a2 	bl	800285a <pqcrystals_dilithium_poly_sub>
    poly_reduce(&w0.vec[i]);
 8002516:	4658      	mov	r0, fp
 8002518:	f000 f98d 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
    if(poly_chknorm(&w0.vec[i], GAMMA2 - BETA))
 800251c:	492b      	ldr	r1, [pc, #172]	; (80025cc <crypto_sign_signature+0x2b4>)
 800251e:	4658      	mov	r0, fp
 8002520:	f000 f9e6 	bl	80028f0 <pqcrystals_dilithium_poly_chknorm>
 8002524:	2800      	cmp	r0, #0
 8002526:	d14c      	bne.n	80025c2 <crypto_sign_signature+0x2aa>
      goto rej;

    /* Compute hints for w1 */
    poly_pointwise_montgomery(tmp, &cp, &t0.vec[i]);
 8002528:	f50d 5330 	add.w	r3, sp, #11264	; 0x2c00
 800252c:	3318      	adds	r3, #24
 800252e:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8002532:	191a      	adds	r2, r3, r4
 8002534:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
 8002538:	3018      	adds	r0, #24
 800253a:	f000 f9a0 	bl	800287e <pqcrystals_dilithium_poly_pointwise_montgomery>

    poly_invntt_tomont(tmp);
 800253e:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8002542:	3018      	adds	r0, #24
 8002544:	f000 f999 	bl	800287a <pqcrystals_dilithium_poly_invntt_tomont>
    poly_reduce(tmp);
 8002548:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 800254c:	3018      	adds	r0, #24
 800254e:	f000 f972 	bl	8002836 <pqcrystals_dilithium_poly_reduce>

    if(poly_chknorm(tmp, GAMMA2))
 8002552:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 8002556:	f44f 31ba 	mov.w	r1, #95232	; 0x17400
 800255a:	3018      	adds	r0, #24
 800255c:	f000 f9c8 	bl	80028f0 <pqcrystals_dilithium_poly_chknorm>
 8002560:	4682      	mov	sl, r0
 8002562:	bb70      	cbnz	r0, 80025c2 <crypto_sign_signature+0x2aa>
      goto rej;
    poly_add(&w0.vec[i], &w0.vec[i], tmp);
 8002564:	f50d 52e0 	add.w	r2, sp, #7168	; 0x1c00
 8002568:	3218      	adds	r2, #24
 800256a:	4659      	mov	r1, fp
 800256c:	4658      	mov	r0, fp
 800256e:	f000 f966 	bl	800283e <pqcrystals_dilithium_poly_add>
    hint_n += poly_make_hint(tmp, &w0.vec[i], &w1.vec[i]);
 8002572:	f50d 5370 	add.w	r3, sp, #15360	; 0x3c00
 8002576:	3318      	adds	r3, #24
 8002578:	f50d 50e0 	add.w	r0, sp, #7168	; 0x1c00
 800257c:	191a      	adds	r2, r3, r4
 800257e:	4659      	mov	r1, fp
 8002580:	3018      	adds	r0, #24
 8002582:	f000 f99e 	bl	80028c2 <pqcrystals_dilithium_poly_make_hint>
 8002586:	4407      	add	r7, r0
    if (hint_n > OMEGA) {
 8002588:	2f50      	cmp	r7, #80	; 0x50
 800258a:	d81a      	bhi.n	80025c2 <crypto_sign_signature+0x2aa>
      goto rej;
    }
    pack_sig_h(sig, tmp, i, &hints_written);
 800258c:	f50d 51e0 	add.w	r1, sp, #7168	; 0x1c00
 8002590:	4632      	mov	r2, r6
 8002592:	ab09      	add	r3, sp, #36	; 0x24
 8002594:	3118      	adds	r1, #24
 8002596:	4628      	mov	r0, r5
  for(unsigned int i = 0; i < K; ++i) {
 8002598:	3601      	adds	r6, #1
    pack_sig_h(sig, tmp, i, &hints_written);
 800259a:	f000 f8f2 	bl	8002782 <pqcrystals_dilithium_pack_sig_h>
  for(unsigned int i = 0; i < K; ++i) {
 800259e:	2e04      	cmp	r6, #4
 80025a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80025a4:	d1a2      	bne.n	80024ec <crypto_sign_signature+0x1d4>
  }
  pack_sig_h_zero(sig, &hints_written);
 80025a6:	4628      	mov	r0, r5
 80025a8:	a909      	add	r1, sp, #36	; 0x24
 80025aa:	f000 f8ff 	bl	80027ac <pqcrystals_dilithium_pack_sig_h_zero>
  *siglen = CRYPTO_BYTES;
 80025ae:	9a04      	ldr	r2, [sp, #16]
 80025b0:	f640 1374 	movw	r3, #2420	; 0x974
  return 0;
}
 80025b4:	4650      	mov	r0, sl
  *siglen = CRYPTO_BYTES;
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	f50d 4d3c 	add.w	sp, sp, #48128	; 0xbc00
 80025bc:	b007      	add	sp, #28
 80025be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c2:	f108 0801 	add.w	r8, r8, #1
 80025c6:	e6fe      	b.n	80023c6 <crypto_sign_signature+0xae>
 80025c8:	0001ffb2 	.word	0x0001ffb2
 80025cc:	000173b2 	.word	0x000173b2

080025d0 <crypto_sign>:
int crypto_sign(uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk,uint8_t *p)
{
 80025d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025d2:	460d      	mov	r5, r1
 80025d4:	461c      	mov	r4, r3
 80025d6:	18d1      	adds	r1, r2, r3
 80025d8:	f603 1374 	addw	r3, r3, #2420	; 0x974
 80025dc:	4403      	add	r3, r0
  size_t i;

  for(i = 0; i < mlen; ++i)
 80025de:	4291      	cmp	r1, r2
 80025e0:	d10f      	bne.n	8002602 <crypto_sign+0x32>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,p);
 80025e2:	9b07      	ldr	r3, [sp, #28]
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	9b06      	ldr	r3, [sp, #24]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	f600 1274 	addw	r2, r0, #2420	; 0x974
 80025ee:	4623      	mov	r3, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7ff fe91 	bl	8002318 <crypto_sign_signature>
  *smlen += mlen;
 80025f6:	682b      	ldr	r3, [r5, #0]
  return 0;
}
 80025f8:	2000      	movs	r0, #0
  *smlen += mlen;
 80025fa:	4423      	add	r3, r4
 80025fc:	602b      	str	r3, [r5, #0]
}
 80025fe:	b002      	add	sp, #8
 8002600:	bd70      	pop	{r4, r5, r6, pc}
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8002602:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
 8002606:	f803 6d01 	strb.w	r6, [r3, #-1]!
  for(i = 0; i < mlen; ++i)
 800260a:	e7e8      	b.n	80025de <crypto_sign+0xe>

0800260c <pqcrystals_dilithium_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	4603      	mov	r3, r0
 8002610:	4615      	mov	r5, r2
 8002612:	3801      	subs	r0, #1
 8002614:	1e4a      	subs	r2, r1, #1
 8002616:	311f      	adds	r1, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = rho[i];
 8002618:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800261c:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002620:	428a      	cmp	r2, r1
 8002622:	d1f9      	bne.n	8002618 <pqcrystals_dilithium_pack_pk+0xc>
 8002624:	f103 0620 	add.w	r6, r3, #32
 8002628:	f503 64a4 	add.w	r4, r3, #1312	; 0x520
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 800262c:	4629      	mov	r1, r5
 800262e:	4630      	mov	r0, r6
  for(i = 0; i < K; ++i)
 8002630:	f506 76a0 	add.w	r6, r6, #320	; 0x140
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 8002634:	f000 fa76 	bl	8002b24 <pqcrystals_dilithium_polyt1_pack>
  for(i = 0; i < K; ++i)
 8002638:	42a6      	cmp	r6, r4
 800263a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800263e:	d1f5      	bne.n	800262c <pqcrystals_dilithium_pack_pk+0x20>
}
 8002640:	bd70      	pop	{r4, r5, r6, pc}

08002642 <pqcrystals_dilithium_pack_sk>:
             const uint8_t tr[TRBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
 8002642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002644:	4605      	mov	r5, r0
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8002646:	1e6c      	subs	r4, r5, #1
 8002648:	1e48      	subs	r0, r1, #1
 800264a:	311f      	adds	r1, #31
    sk[i] = rho[i];
 800264c:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8002650:	f804 6f01 	strb.w	r6, [r4, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002654:	4288      	cmp	r0, r1
 8002656:	d1f9      	bne.n	800264c <pqcrystals_dilithium_pack_sk+0xa>
 8002658:	1e59      	subs	r1, r3, #1
 800265a:	f105 001f 	add.w	r0, r5, #31
 800265e:	331f      	adds	r3, #31
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
 8002660:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002664:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002668:	4299      	cmp	r1, r3
 800266a:	d1f9      	bne.n	8002660 <pqcrystals_dilithium_pack_sk+0x1e>
  sk += SEEDBYTES;

  for(i = 0; i < TRBYTES; ++i)
 800266c:	1e53      	subs	r3, r2, #1
 800266e:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8002672:	323f      	adds	r2, #63	; 0x3f
    sk[i] = tr[i];
 8002674:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002678:	f801 0f01 	strb.w	r0, [r1, #1]!
  for(i = 0; i < TRBYTES; ++i)
 800267c:	4293      	cmp	r3, r2
 800267e:	d1f9      	bne.n	8002674 <pqcrystals_dilithium_pack_sk+0x32>
  sk += TRBYTES;

  for(i = 0; i < L; ++i)
 8002680:	9e07      	ldr	r6, [sp, #28]
 8002682:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8002686:	f505 7700 	add.w	r7, r5, #512	; 0x200
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 800268a:	4631      	mov	r1, r6
 800268c:	4620      	mov	r0, r4
  for(i = 0; i < L; ++i)
 800268e:	3460      	adds	r4, #96	; 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 8002690:	f000 fa06 	bl	8002aa0 <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < L; ++i)
 8002694:	42bc      	cmp	r4, r7
 8002696:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800269a:	d1f6      	bne.n	800268a <pqcrystals_dilithium_pack_sk+0x48>
  sk += L*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
 800269c:	9e08      	ldr	r6, [sp, #32]
 800269e:	f505 7760 	add.w	r7, r5, #896	; 0x380
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 80026a2:	4631      	mov	r1, r6
 80026a4:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 80026a6:	3460      	adds	r4, #96	; 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 80026a8:	f000 f9fa 	bl	8002aa0 <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < K; ++i)
 80026ac:	42bc      	cmp	r4, r7
 80026ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026b2:	d1f6      	bne.n	80026a2 <pqcrystals_dilithium_pack_sk+0x60>
  sk += K*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
 80026b4:	9e06      	ldr	r6, [sp, #24]
 80026b6:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 80026ba:	4631      	mov	r1, r6
 80026bc:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 80026be:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 80026c2:	f000 fa4f 	bl	8002b64 <pqcrystals_dilithium_polyt0_pack>
  for(i = 0; i < K; ++i)
 80026c6:	42ac      	cmp	r4, r5
 80026c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026cc:	d1f5      	bne.n	80026ba <pqcrystals_dilithium_pack_sk+0x78>
}
 80026ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026d0 <pqcrystals_dilithium_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               smallpoly s1[L],
               smallpoly s2[K],
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 80026d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d4:	9d08      	ldr	r5, [sp, #32]
 80026d6:	461e      	mov	r6, r3
 80026d8:	1e6c      	subs	r4, r5, #1
 80026da:	3801      	subs	r0, #1
 80026dc:	f105 031f 	add.w	r3, r5, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = sk[i];
 80026e0:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80026e4:	f800 7f01 	strb.w	r7, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80026e8:	429c      	cmp	r4, r3
 80026ea:	d1f9      	bne.n	80026e0 <pqcrystals_dilithium_unpack_sk+0x10>
 80026ec:	3a01      	subs	r2, #1
 80026ee:	f105 033f 	add.w	r3, r5, #63	; 0x3f
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
 80026f2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80026f6:	f802 0f01 	strb.w	r0, [r2, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80026fa:	429c      	cmp	r4, r3
 80026fc:	d1f9      	bne.n	80026f2 <pqcrystals_dilithium_unpack_sk+0x22>
  sk += SEEDBYTES;

  for(i = 0; i < TRBYTES; ++i)
 80026fe:	3901      	subs	r1, #1
 8002700:	f105 037f 	add.w	r3, r5, #127	; 0x7f
    tr[i] = sk[i];
 8002704:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8002708:	f801 2f01 	strb.w	r2, [r1, #1]!
  for(i = 0; i < TRBYTES; ++i)
 800270c:	429c      	cmp	r4, r3
 800270e:	d1f9      	bne.n	8002704 <pqcrystals_dilithium_unpack_sk+0x34>
  sk += TRBYTES;

  for(i=0; i < L; ++i)
 8002710:	9f06      	ldr	r7, [sp, #24]
 8002712:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8002716:	f505 7800 	add.w	r8, r5, #512	; 0x200
    small_polyeta_unpack(&s1[i], sk + i*POLYETA_PACKEDBYTES);
 800271a:	4621      	mov	r1, r4
 800271c:	4638      	mov	r0, r7
  for(i=0; i < L; ++i)
 800271e:	3460      	adds	r4, #96	; 0x60
    small_polyeta_unpack(&s1[i], sk + i*POLYETA_PACKEDBYTES);
 8002720:	f000 fd9b 	bl	800325a <small_polyeta_unpack>
  for(i=0; i < L; ++i)
 8002724:	4544      	cmp	r4, r8
 8002726:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800272a:	d1f6      	bne.n	800271a <pqcrystals_dilithium_unpack_sk+0x4a>
  sk += L*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
 800272c:	9f07      	ldr	r7, [sp, #28]
 800272e:	f505 7860 	add.w	r8, r5, #896	; 0x380
    small_polyeta_unpack(&s2[i], sk + i*POLYETA_PACKEDBYTES);
 8002732:	4621      	mov	r1, r4
 8002734:	4638      	mov	r0, r7
  for(i=0; i < K; ++i)
 8002736:	3460      	adds	r4, #96	; 0x60
    small_polyeta_unpack(&s2[i], sk + i*POLYETA_PACKEDBYTES);
 8002738:	f000 fd8f 	bl	800325a <small_polyeta_unpack>
  for(i=0; i < K; ++i)
 800273c:	4544      	cmp	r4, r8
 800273e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002742:	d1f6      	bne.n	8002732 <pqcrystals_dilithium_unpack_sk+0x62>
  sk += K*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
 8002744:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8002748:	4621      	mov	r1, r4
 800274a:	4630      	mov	r0, r6
  for(i=0; i < K; ++i)
 800274c:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8002750:	f000 fa56 	bl	8002c00 <pqcrystals_dilithium_polyt0_unpack>
  for(i=0; i < K; ++i)
 8002754:	42ac      	cmp	r4, r5
 8002756:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800275a:	d1f5      	bne.n	8002748 <pqcrystals_dilithium_unpack_sk+0x78>
}
 800275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002760 <pqcrystals_dilithium_pack_sig_z>:
  sig += CTILDEBYTES;
}

void pack_sig_z(uint8_t sig[CRYPTO_BYTES],
              const polyvecl *z)
{
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	f100 0620 	add.w	r6, r0, #32
 8002766:	460d      	mov	r5, r1
 8002768:	f500 6412 	add.w	r4, r0, #2336	; 0x920
  unsigned int i;
  sig += CTILDEBYTES;
  for(i = 0; i < L; ++i)
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 800276c:	4629      	mov	r1, r5
 800276e:	4630      	mov	r0, r6
  for(i = 0; i < L; ++i)
 8002770:	f506 7610 	add.w	r6, r6, #576	; 0x240
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 8002774:	f000 fac3 	bl	8002cfe <pqcrystals_dilithium_polyz_pack>
  for(i = 0; i < L; ++i)
 8002778:	42a6      	cmp	r6, r4
 800277a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800277e:	d1f5      	bne.n	800276c <pqcrystals_dilithium_pack_sig_z+0xc>
}
 8002780:	bd70      	pop	{r4, r5, r6, pc}

08002782 <pqcrystals_dilithium_pack_sig_h>:

void pack_sig_h(unsigned char sig[CRYPTO_BYTES],
                const poly *h_elem,
                const unsigned int idx,
                unsigned int *hints_written)
{
 8002782:	b530      	push	{r4, r5, lr}
  sig += CTILDEBYTES;
  sig += L*POLYZ_PACKEDBYTES;
 8002784:	f500 6012 	add.w	r0, r0, #2336	; 0x920

  // Encode h
  for (unsigned int j = 0; j < N; j++) {
 8002788:	2400      	movs	r4, #0
      if (h_elem->coeffs[j] != 0) {
 800278a:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800278e:	b125      	cbz	r5, 800279a <pqcrystals_dilithium_pack_sig_h+0x18>
          sig[*hints_written] = (uint8_t)j;
 8002790:	681d      	ldr	r5, [r3, #0]
 8002792:	5544      	strb	r4, [r0, r5]
          (*hints_written)++;
 8002794:	681d      	ldr	r5, [r3, #0]
 8002796:	3501      	adds	r5, #1
 8002798:	601d      	str	r5, [r3, #0]
  for (unsigned int j = 0; j < N; j++) {
 800279a:	3401      	adds	r4, #1
 800279c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80027a0:	d1f3      	bne.n	800278a <pqcrystals_dilithium_pack_sig_h+0x8>
      }
  }
  sig[OMEGA + idx] = (uint8_t)*hints_written;
 80027a2:	4410      	add	r0, r2
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
}
 80027aa:	bd30      	pop	{r4, r5, pc}

080027ac <pqcrystals_dilithium_pack_sig_h_zero>:

void pack_sig_h_zero(unsigned char sig[CRYPTO_BYTES],
                unsigned int *hints_written) {
    sig += CTILDEBYTES;
    sig += L * POLYZ_PACKEDBYTES;
 80027ac:	f500 6012 	add.w	r0, r0, #2336	; 0x920
    while (*hints_written < OMEGA) {
        sig[*hints_written] = 0;
 80027b0:	2200      	movs	r2, #0
    while (*hints_written < OMEGA) {
 80027b2:	680b      	ldr	r3, [r1, #0]
 80027b4:	2b4f      	cmp	r3, #79	; 0x4f
 80027b6:	d900      	bls.n	80027ba <pqcrystals_dilithium_pack_sig_h_zero+0xe>
        (*hints_written)++;
    }
}
 80027b8:	4770      	bx	lr
        sig[*hints_written] = 0;
 80027ba:	54c2      	strb	r2, [r0, r3]
        (*hints_written)++;
 80027bc:	680b      	ldr	r3, [r1, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	600b      	str	r3, [r1, #0]
 80027c2:	e7f6      	b.n	80027b2 <pqcrystals_dilithium_pack_sig_h_zero+0x6>

080027c4 <rej_eta.constprop.0>:
*              - unsigned int buflen: length of array of random bytes
*
* Returns number of sampled coefficients. Can be smaller than len if not enough
* random bytes were given.
**************************************************/
static unsigned int rej_eta(int32_t *a,
 80027c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(t0 < 15) {
      t0 = t0 - (205*t0 >> 10)*5;
      a[ctr++] = 2 - t0;
    }
    if(t1 < 15 && ctr < len) {
      t1 = t1 - (205*t1 >> 10)*5;
 80027c6:	f04f 0ccd 	mov.w	ip, #205	; 0xcd
static unsigned int rej_eta(int32_t *a,
 80027ca:	4606      	mov	r6, r0
  while(ctr < len && pos < buflen) {
 80027cc:	1e57      	subs	r7, r2, #1
 80027ce:	f102 0487 	add.w	r4, r2, #135	; 0x87
  ctr = pos = 0;
 80027d2:	2000      	movs	r0, #0
    t0 = buf[pos] & 0x0F;
 80027d4:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80027d8:	f003 0e0f 	and.w	lr, r3, #15
    if(t0 < 15) {
 80027dc:	f1be 0f0f 	cmp.w	lr, #15
    t1 = buf[pos++] >> 4;
 80027e0:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if(t0 < 15) {
 80027e4:	d023      	beq.n	800282e <rej_eta.constprop.0+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 80027e6:	fb1e f20c 	smulbb	r2, lr, ip
 80027ea:	0a92      	lsrs	r2, r2, #10
 80027ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      a[ctr++] = 2 - t0;
 80027f0:	f1ce 0e02 	rsb	lr, lr, #2
 80027f4:	4472      	add	r2, lr
    if(t1 < 15 && ctr < len) {
 80027f6:	2b0f      	cmp	r3, #15
      a[ctr++] = 2 - t0;
 80027f8:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 80027fc:	f100 0501 	add.w	r5, r0, #1
    if(t1 < 15 && ctr < len) {
 8002800:	d011      	beq.n	8002826 <rej_eta.constprop.0+0x62>
 8002802:	428d      	cmp	r5, r1
 8002804:	d211      	bcs.n	800282a <rej_eta.constprop.0+0x66>
      t1 = t1 - (205*t1 >> 10)*5;
 8002806:	fb13 f20c 	smulbb	r2, r3, ip
 800280a:	0a92      	lsrs	r2, r2, #10
 800280c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      a[ctr++] = 2 - t1;
 8002810:	f1c3 0302 	rsb	r3, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
 800281a:	1c68      	adds	r0, r5, #1
  while(ctr < len && pos < buflen) {
 800281c:	4281      	cmp	r1, r0
 800281e:	d901      	bls.n	8002824 <rej_eta.constprop.0+0x60>
 8002820:	42a7      	cmp	r7, r4
 8002822:	d1d7      	bne.n	80027d4 <rej_eta.constprop.0+0x10>
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
}
 8002824:	bdf0      	pop	{r4, r5, r6, r7, pc}
      a[ctr++] = 2 - t0;
 8002826:	4628      	mov	r0, r5
 8002828:	e7f8      	b.n	800281c <rej_eta.constprop.0+0x58>
 800282a:	4628      	mov	r0, r5
  return ctr;
 800282c:	e7fa      	b.n	8002824 <rej_eta.constprop.0+0x60>
    if(t1 < 15 && ctr < len) {
 800282e:	2b0f      	cmp	r3, #15
 8002830:	d0f4      	beq.n	800281c <rej_eta.constprop.0+0x58>
 8002832:	4605      	mov	r5, r0
 8002834:	e7e7      	b.n	8002806 <rej_eta.constprop.0+0x42>

08002836 <pqcrystals_dilithium_poly_reduce>:
  asm_reduce32(a->coeffs);
 8002836:	f7ff ba3b 	b.w	8001cb0 <pqcrystals_dilithium_asm_reduce32>

0800283a <pqcrystals_dilithium_poly_caddq>:
  asm_caddq(a->coeffs);
 800283a:	f7ff bae9 	b.w	8001e10 <pqcrystals_dilithium_asm_caddq>

0800283e <pqcrystals_dilithium_poly_add>:
void poly_add(poly *c, const poly *a, const poly *b)  {
 800283e:	b530      	push	{r4, r5, lr}
  for(i = 0; i < N; ++i)
 8002840:	2300      	movs	r3, #0
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8002842:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002846:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800284a:	442c      	add	r4, r5
 800284c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for(i = 0; i < N; ++i)
 8002850:	3301      	adds	r3, #1
 8002852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002856:	d1f4      	bne.n	8002842 <pqcrystals_dilithium_poly_add+0x4>
}
 8002858:	bd30      	pop	{r4, r5, pc}

0800285a <pqcrystals_dilithium_poly_sub>:
void poly_sub(poly *c, const poly *a, const poly *b) {
 800285a:	b530      	push	{r4, r5, lr}
  for(i = 0; i < N; ++i)
 800285c:	2300      	movs	r3, #0
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 800285e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002862:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8002866:	1b64      	subs	r4, r4, r5
 8002868:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for(i = 0; i < N; ++i)
 800286c:	3301      	adds	r3, #1
 800286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002872:	d1f4      	bne.n	800285e <pqcrystals_dilithium_poly_sub+0x4>
}
 8002874:	bd30      	pop	{r4, r5, pc}

08002876 <pqcrystals_dilithium_poly_ntt>:
  ntt(a->coeffs);
 8002876:	f7fe bc85 	b.w	8001184 <pqcrystals_dilithium_ntt>

0800287a <pqcrystals_dilithium_poly_invntt_tomont>:
  invntt_tomont(a->coeffs);
 800287a:	f7fe bf67 	b.w	800174c <pqcrystals_dilithium_invntt_tomont>

0800287e <pqcrystals_dilithium_poly_pointwise_montgomery>:
  asm_pointwise_montgomery(c->coeffs, a->coeffs, b->coeffs);
 800287e:	f7ff b983 	b.w	8001b88 <pqcrystals_dilithium_asm_pointwise_montgomery>

08002882 <pqcrystals_dilithium_poly_pointwise_acc_montgomery>:
  asm_pointwise_acc_montgomery(c->coeffs, a->coeffs, b->coeffs);
 8002882:	f7ff b9c3 	b.w	8001c0c <pqcrystals_dilithium_asm_pointwise_acc_montgomery>

08002886 <pqcrystals_dilithium_poly_power2round>:
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8002886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002888:	4605      	mov	r5, r0
 800288a:	460e      	mov	r6, r1
 800288c:	4617      	mov	r7, r2
 800288e:	2400      	movs	r4, #0
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 8002890:	5939      	ldr	r1, [r7, r4]
 8002892:	1930      	adds	r0, r6, r4
 8002894:	f000 fc10 	bl	80030b8 <pqcrystals_dilithium_power2round>
 8002898:	5128      	str	r0, [r5, r4]
  for(i = 0; i < N; ++i)
 800289a:	3404      	adds	r4, #4
 800289c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80028a0:	d1f6      	bne.n	8002890 <pqcrystals_dilithium_poly_power2round+0xa>
}
 80028a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028a4 <pqcrystals_dilithium_poly_decompose>:
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	4605      	mov	r5, r0
 80028a8:	460e      	mov	r6, r1
 80028aa:	4617      	mov	r7, r2
 80028ac:	2400      	movs	r4, #0
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 80028ae:	5939      	ldr	r1, [r7, r4]
 80028b0:	1930      	adds	r0, r6, r4
 80028b2:	f000 fc0b 	bl	80030cc <pqcrystals_dilithium_decompose>
 80028b6:	5128      	str	r0, [r5, r4]
  for(i = 0; i < N; ++i)
 80028b8:	3404      	adds	r4, #4
 80028ba:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80028be:	d1f6      	bne.n	80028ae <pqcrystals_dilithium_poly_decompose+0xa>
}
 80028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028c2 <pqcrystals_dilithium_poly_make_hint>:
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 80028c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int i, s = 0;
 80028c6:	2500      	movs	r5, #0
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 80028c8:	4606      	mov	r6, r0
 80028ca:	460f      	mov	r7, r1
 80028cc:	4690      	mov	r8, r2
  for(i = 0; i < N; ++i) {
 80028ce:	462c      	mov	r4, r5
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 80028d0:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 80028d4:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80028d8:	f000 fc1a 	bl	8003110 <pqcrystals_dilithium_make_hint>
 80028dc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
  for(i = 0; i < N; ++i) {
 80028e0:	3401      	adds	r4, #1
 80028e2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    s += h->coeffs[i];
 80028e6:	4405      	add	r5, r0
  for(i = 0; i < N; ++i) {
 80028e8:	d1f2      	bne.n	80028d0 <pqcrystals_dilithium_poly_make_hint+0xe>
}
 80028ea:	4628      	mov	r0, r5
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028f0 <pqcrystals_dilithium_poly_chknorm>:
  if(B > (Q-1)/8)
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <pqcrystals_dilithium_poly_chknorm+0x2c>)
 80028f2:	4299      	cmp	r1, r3
int poly_chknorm(const poly *a, int32_t B) {
 80028f4:	b510      	push	{r4, lr}
  if(B > (Q-1)/8)
 80028f6:	dc0e      	bgt.n	8002916 <pqcrystals_dilithium_poly_chknorm+0x26>
 80028f8:	1f02      	subs	r2, r0, #4
 80028fa:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
    t = a->coeffs[i] >> 31;
 80028fe:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8002902:	17dc      	asrs	r4, r3, #31
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 8002904:	ea04 0443 	and.w	r4, r4, r3, lsl #1
 8002908:	1b1b      	subs	r3, r3, r4
    if(t >= B) {
 800290a:	4299      	cmp	r1, r3
 800290c:	dd03      	ble.n	8002916 <pqcrystals_dilithium_poly_chknorm+0x26>
  for(i = 0; i < N; ++i) {
 800290e:	4282      	cmp	r2, r0
 8002910:	d1f5      	bne.n	80028fe <pqcrystals_dilithium_poly_chknorm+0xe>
  return 0;
 8002912:	2000      	movs	r0, #0
}
 8002914:	bd10      	pop	{r4, pc}
    return 1;
 8002916:	2001      	movs	r0, #1
 8002918:	e7fc      	b.n	8002914 <pqcrystals_dilithium_poly_chknorm+0x24>
 800291a:	bf00      	nop
 800291c:	000ffc00 	.word	0x000ffc00

08002920 <pqcrystals_dilithium_poly_uniform>:
{
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8002928:	4607      	mov	r7, r0
  stream128_init(&state, seed, nonce);
 800292a:	4668      	mov	r0, sp
 800292c:	f000 fc00 	bl	8003130 <pqcrystals_dilithium_dilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 8002930:	466a      	mov	r2, sp
 8002932:	f44f 7152 	mov.w	r1, #840	; 0x348
 8002936:	a835      	add	r0, sp, #212	; 0xd4
 8002938:	f000 fd89 	bl	800344e <shake128_inc_squeeze>
  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 800293c:	f44f 7352 	mov.w	r3, #840	; 0x348
 8002940:	aa35      	add	r2, sp, #212	; 0xd4
 8002942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002946:	4638      	mov	r0, r7
 8002948:	f7ff faaa 	bl	8001ea0 <pqcrystals_dilithium_asm_rej_uniform>
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 800294c:	f44f 7552 	mov.w	r5, #840	; 0x348
  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 8002950:	4604      	mov	r4, r0
    off = buflen % 3;
 8002952:	f04f 0803 	mov.w	r8, #3
  while(ctr < N) {
 8002956:	2cff      	cmp	r4, #255	; 0xff
 8002958:	d903      	bls.n	8002962 <pqcrystals_dilithium_poly_uniform+0x42>
}
 800295a:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 800295e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = buflen % 3;
 8002962:	fbb5 f2f8 	udiv	r2, r5, r8
 8002966:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800296a:	1aa9      	subs	r1, r5, r2
    for(i = 0; i < off; ++i)
 800296c:	ab35      	add	r3, sp, #212	; 0xd4
 800296e:	2600      	movs	r6, #0
      buf[i] = buf[buflen - off + i];
 8002970:	1b52      	subs	r2, r2, r5
    for(i = 0; i < off; ++i)
 8002972:	428e      	cmp	r6, r1
 8002974:	d111      	bne.n	800299a <pqcrystals_dilithium_poly_uniform+0x7a>
    stream128_squeezeblocks(buf + off, 1, &state);
 8002976:	ab35      	add	r3, sp, #212	; 0xd4
 8002978:	1998      	adds	r0, r3, r6
 800297a:	466a      	mov	r2, sp
 800297c:	21a8      	movs	r1, #168	; 0xa8
    buflen = STREAM128_BLOCKBYTES + off;
 800297e:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
    stream128_squeezeblocks(buf + off, 1, &state);
 8002982:	f000 fd64 	bl	800344e <shake128_inc_squeeze>
    ctr += asm_rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 8002986:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 800298a:	eb07 0084 	add.w	r0, r7, r4, lsl #2
 800298e:	462b      	mov	r3, r5
 8002990:	aa35      	add	r2, sp, #212	; 0xd4
 8002992:	f7ff fa85 	bl	8001ea0 <pqcrystals_dilithium_asm_rej_uniform>
 8002996:	4404      	add	r4, r0
 8002998:	e7dd      	b.n	8002956 <pqcrystals_dilithium_poly_uniform+0x36>
      buf[i] = buf[buflen - off + i];
 800299a:	18e8      	adds	r0, r5, r3
    for(i = 0; i < off; ++i)
 800299c:	3601      	adds	r6, #1
      buf[i] = buf[buflen - off + i];
 800299e:	5c80      	ldrb	r0, [r0, r2]
 80029a0:	f803 0b01 	strb.w	r0, [r3], #1
    for(i = 0; i < off; ++i)
 80029a4:	e7e5      	b.n	8002972 <pqcrystals_dilithium_poly_uniform+0x52>

080029a6 <pqcrystals_dilithium_poly_uniform_eta>:
#elif ETA == 4
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
        const uint8_t seed[CRHBYTES],
        uint16_t nonce) {
 80029a6:	b530      	push	{r4, r5, lr}
 80029a8:	b0d7      	sub	sp, #348	; 0x15c
 80029aa:	4605      	mov	r5, r0
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 80029ac:	a822      	add	r0, sp, #136	; 0x88
 80029ae:	f000 fbd8 	bl	8003162 <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 80029b2:	aa22      	add	r2, sp, #136	; 0x88
 80029b4:	2188      	movs	r1, #136	; 0x88
 80029b6:	4668      	mov	r0, sp
 80029b8:	f000 fd57 	bl	800346a <shake256_inc_squeeze>

  ctr = rej_eta(a->coeffs, N, buf, buflen);
 80029bc:	466a      	mov	r2, sp
 80029be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029c2:	4628      	mov	r0, r5
 80029c4:	f7ff fefe 	bl	80027c4 <rej_eta.constprop.0>
 80029c8:	4604      	mov	r4, r0

  while(ctr < N) {
 80029ca:	2cff      	cmp	r4, #255	; 0xff
 80029cc:	d901      	bls.n	80029d2 <pqcrystals_dilithium_poly_uniform_eta+0x2c>
    stream256_squeezeblocks(buf, 1, &state);
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
  }
}
 80029ce:	b057      	add	sp, #348	; 0x15c
 80029d0:	bd30      	pop	{r4, r5, pc}
    stream256_squeezeblocks(buf, 1, &state);
 80029d2:	aa22      	add	r2, sp, #136	; 0x88
 80029d4:	2188      	movs	r1, #136	; 0x88
 80029d6:	4668      	mov	r0, sp
 80029d8:	f000 fd47 	bl	800346a <shake256_inc_squeeze>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 80029dc:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 80029e0:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80029e4:	466a      	mov	r2, sp
 80029e6:	f7ff feed 	bl	80027c4 <rej_eta.constprop.0>
 80029ea:	4404      	add	r4, r0
 80029ec:	e7ed      	b.n	80029ca <pqcrystals_dilithium_poly_uniform_eta+0x24>

080029ee <pqcrystals_dilithium_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 80029ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f0:	b0d7      	sub	sp, #348	; 0x15c
 80029f2:	460c      	mov	r4, r1
 80029f4:	4605      	mov	r5, r0
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  shake256incctx state;

  shake256_inc_init(&state);
 80029f6:	a822      	add	r0, sp, #136	; 0x88
 80029f8:	f000 fd2c 	bl	8003454 <shake256_inc_init>
  shake256_inc_absorb(&state, seed, SEEDBYTES);
 80029fc:	4621      	mov	r1, r4
 80029fe:	2220      	movs	r2, #32
 8002a00:	a822      	add	r0, sp, #136	; 0x88
 8002a02:	f000 fd29 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 8002a06:	a822      	add	r0, sp, #136	; 0x88
 8002a08:	f000 fd2b 	bl	8003462 <shake256_inc_finalize>
  shake256_inc_squeezeblocks(buf, 1, &state);
 8002a0c:	aa22      	add	r2, sp, #136	; 0x88
 8002a0e:	2188      	movs	r1, #136	; 0x88
 8002a10:	4668      	mov	r0, sp
 8002a12:	f000 fd2a 	bl	800346a <shake256_inc_squeeze>
 8002a16:	2300      	movs	r3, #0
 8002a18:	466e      	mov	r6, sp

  signs = 0;
 8002a1a:	461c      	mov	r4, r3
 8002a1c:	461f      	mov	r7, r3
  for(i = 0; i < 8; ++i)
    signs |= (uint64_t)buf[i] << 8*i;
 8002a1e:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002a22:	f1a3 0220 	sub.w	r2, r3, #32
 8002a26:	f1c3 0020 	rsb	r0, r3, #32
 8002a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2e:	fa21 f000 	lsr.w	r0, r1, r0
 8002a32:	4099      	lsls	r1, r3
  for(i = 0; i < 8; ++i)
 8002a34:	3308      	adds	r3, #8
    signs |= (uint64_t)buf[i] << 8*i;
 8002a36:	4302      	orrs	r2, r0
  for(i = 0; i < 8; ++i)
 8002a38:	2b40      	cmp	r3, #64	; 0x40
    signs |= (uint64_t)buf[i] << 8*i;
 8002a3a:	ea44 0401 	orr.w	r4, r4, r1
 8002a3e:	ea47 0702 	orr.w	r7, r7, r2
  for(i = 0; i < 8; ++i)
 8002a42:	d1ec      	bne.n	8002a1e <pqcrystals_dilithium_poly_challenge+0x30>
  pos = 8;

  for(i = 0; i < N; ++i)
    c->coeffs[i] = 0;
 8002a44:	2100      	movs	r1, #0
 8002a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f002 fe18 	bl	8005680 <memset>
  for(i = N-TAU; i < N; ++i) {
 8002a50:	26d9      	movs	r6, #217	; 0xd9
  pos = 8;
 8002a52:	2108      	movs	r1, #8
    do {
      if(pos >= SHAKE256_RATE) {
 8002a54:	2987      	cmp	r1, #135	; 0x87
 8002a56:	d921      	bls.n	8002a9c <pqcrystals_dilithium_poly_challenge+0xae>
        shake256_inc_squeezeblocks(buf, 1, &state);
 8002a58:	aa22      	add	r2, sp, #136	; 0x88
 8002a5a:	2188      	movs	r1, #136	; 0x88
 8002a5c:	4668      	mov	r0, sp
 8002a5e:	f000 fd04 	bl	800346a <shake256_inc_squeeze>
        pos = 0;
 8002a62:	2300      	movs	r3, #0
      }

      b = buf[pos++];
 8002a64:	f81d 2003 	ldrb.w	r2, [sp, r3]
    } while(b > i);
 8002a68:	42b2      	cmp	r2, r6
      b = buf[pos++];
 8002a6a:	f103 0101 	add.w	r1, r3, #1
    } while(b > i);
 8002a6e:	d8f1      	bhi.n	8002a54 <pqcrystals_dilithium_poly_challenge+0x66>

    c->coeffs[i] = c->coeffs[b];
 8002a70:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 8002a74:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8002a78:	f004 0301 	and.w	r3, r4, #1
 8002a7c:	005b      	lsls	r3, r3, #1
  for(i = N-TAU; i < N; ++i) {
 8002a7e:	3601      	adds	r6, #1
    c->coeffs[b] = 1 - 2*(signs & 1);
 8002a80:	f1c3 0301 	rsb	r3, r3, #1
    signs >>= 1;
 8002a84:	0864      	lsrs	r4, r4, #1
  for(i = N-TAU; i < N; ++i) {
 8002a86:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    signs >>= 1;
 8002a8a:	ea44 74c7 	orr.w	r4, r4, r7, lsl #31
    c->coeffs[b] = 1 - 2*(signs & 1);
 8002a8e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    signs >>= 1;
 8002a92:	ea4f 0757 	mov.w	r7, r7, lsr #1
  for(i = N-TAU; i < N; ++i) {
 8002a96:	d1dd      	bne.n	8002a54 <pqcrystals_dilithium_poly_challenge+0x66>
  }
}
 8002a98:	b057      	add	sp, #348	; 0x15c
 8002a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	e7e1      	b.n	8002a64 <pqcrystals_dilithium_poly_challenge+0x76>

08002aa0 <pqcrystals_dilithium_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 8002aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa4:	f501 6580 	add.w	r5, r1, #1024	; 0x400

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    t[0] = ETA - a->coeffs[8*i+0];
    t[1] = ETA - a->coeffs[8*i+1];
    t[2] = ETA - a->coeffs[8*i+2];
 8002aa8:	688b      	ldr	r3, [r1, #8]
    t[3] = ETA - a->coeffs[8*i+3];
    t[4] = ETA - a->coeffs[8*i+4];
    t[5] = ETA - a->coeffs[8*i+5];
 8002aaa:	694c      	ldr	r4, [r1, #20]
    t[1] = ETA - a->coeffs[8*i+1];
 8002aac:	684f      	ldr	r7, [r1, #4]
    t[6] = ETA - a->coeffs[8*i+6];
    t[7] = ETA - a->coeffs[8*i+7];
 8002aae:	69ca      	ldr	r2, [r1, #28]
    t[6] = ETA - a->coeffs[8*i+6];
 8002ab0:	698e      	ldr	r6, [r1, #24]
    t[2] = ETA - a->coeffs[8*i+2];
 8002ab2:	f1c3 0302 	rsb	r3, r3, #2
 8002ab6:	fa5f fc83 	uxtb.w	ip, r3
    t[3] = ETA - a->coeffs[8*i+3];
 8002aba:	68cb      	ldr	r3, [r1, #12]
 8002abc:	f1c3 0302 	rsb	r3, r3, #2
 8002ac0:	fa5f fe83 	uxtb.w	lr, r3
    t[4] = ETA - a->coeffs[8*i+4];
 8002ac4:	690b      	ldr	r3, [r1, #16]
 8002ac6:	f1c3 0302 	rsb	r3, r3, #2
 8002aca:	b2db      	uxtb	r3, r3

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002acc:	011b      	lsls	r3, r3, #4
    t[1] = ETA - a->coeffs[8*i+1];
 8002ace:	f1c7 0702 	rsb	r7, r7, #2
    t[5] = ETA - a->coeffs[8*i+5];
 8002ad2:	f1c4 0402 	rsb	r4, r4, #2
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002ad6:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002ada:	fa5f f887 	uxtb.w	r8, r7
    t[5] = ETA - a->coeffs[8*i+5];
 8002ade:	b2e4      	uxtb	r4, r4
    t[7] = ETA - a->coeffs[8*i+7];
 8002ae0:	f1c2 0202 	rsb	r2, r2, #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002ae4:	ea4f 178c 	mov.w	r7, ip, lsl #6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002ae8:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002aec:	ea47 07c8 	orr.w	r7, r7, r8, lsl #3
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002af0:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
    t[0] = ETA - a->coeffs[8*i+0];
 8002af4:	f851 8b20 	ldr.w	r8, [r1], #32
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002af8:	7043      	strb	r3, [r0, #1]
    t[6] = ETA - a->coeffs[8*i+6];
 8002afa:	f1c6 0602 	rsb	r6, r6, #2
    t[7] = ETA - a->coeffs[8*i+7];
 8002afe:	b2d2      	uxtb	r2, r2
    t[6] = ETA - a->coeffs[8*i+6];
 8002b00:	b2f6      	uxtb	r6, r6
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002b02:	0153      	lsls	r3, r2, #5
    t[0] = ETA - a->coeffs[8*i+0];
 8002b04:	f1c8 0802 	rsb	r8, r8, #2
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002b08:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002b0c:	ea47 0708 	orr.w	r7, r7, r8
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002b10:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  for(i = 0; i < N/8; ++i) {
 8002b14:	428d      	cmp	r5, r1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002b16:	7007      	strb	r7, [r0, #0]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002b18:	7083      	strb	r3, [r0, #2]
  for(i = 0; i < N/8; ++i) {
 8002b1a:	f100 0003 	add.w	r0, r0, #3
 8002b1e:	d1c3      	bne.n	8002aa8 <pqcrystals_dilithium_polyeta_pack+0x8>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b24 <pqcrystals_dilithium_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 8002b24:	b510      	push	{r4, lr}
 8002b26:	f501 6280 	add.w	r2, r1, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8002b2a:	680b      	ldr	r3, [r1, #0]
 8002b2c:	7003      	strb	r3, [r0, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8002b2e:	e9d1 4300 	ldrd	r4, r3, [r1]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8002b38:	7043      	strb	r3, [r0, #1]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8002b3a:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 8002b44:	7083      	strb	r3, [r0, #2]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 8002b46:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8002b4a:	019b      	lsls	r3, r3, #6
 8002b4c:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 8002b50:	70c3      	strb	r3, [r0, #3]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8002b52:	68cb      	ldr	r3, [r1, #12]
  for(i = 0; i < N/4; ++i) {
 8002b54:	3110      	adds	r1, #16
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8002b56:	109b      	asrs	r3, r3, #2
  for(i = 0; i < N/4; ++i) {
 8002b58:	4291      	cmp	r1, r2
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8002b5a:	7103      	strb	r3, [r0, #4]
  for(i = 0; i < N/4; ++i) {
 8002b5c:	f100 0005 	add.w	r0, r0, #5
 8002b60:	d1e3      	bne.n	8002b2a <pqcrystals_dilithium_polyt1_pack+0x6>
  }

  DBENCH_STOP(*tpack);
}
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <pqcrystals_dilithium_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8002b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b68:	f500 7cd0 	add.w	ip, r0, #416	; 0x1a0
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8002b6c:	694d      	ldr	r5, [r1, #20]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8002b6e:	684c      	ldr	r4, [r1, #4]
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8002b70:	680f      	ldr	r7, [r1, #0]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8002b72:	688e      	ldr	r6, [r1, #8]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8002b74:	68ca      	ldr	r2, [r1, #12]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8002b76:	690b      	ldr	r3, [r1, #16]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8002b78:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8002b7c:	f5c5 5880 	rsb	r8, r5, #4096	; 0x1000
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8002b80:	698d      	ldr	r5, [r1, #24]
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8002b82:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];

    r[13*i+ 0]  =  t[0];
    r[13*i+ 1]  =  t[0] >>  8;
    r[13*i+ 1] |=  t[1] <<  5;
 8002b86:	ea4f 1944 	mov.w	r9, r4, lsl #5
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8002b8a:	f5c5 5e80 	rsb	lr, r5, #4096	; 0x1000
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 8002b8e:	69cd      	ldr	r5, [r1, #28]
    r[13*i+ 0]  =  t[0];
 8002b90:	7007      	strb	r7, [r0, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 8002b92:	ea49 2717 	orr.w	r7, r9, r7, lsr #8
 8002b96:	7047      	strb	r7, [r0, #1]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8002b98:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
    r[13*i+ 2]  =  t[1] >>  3;
 8002b9c:	08e7      	lsrs	r7, r4, #3
 8002b9e:	7087      	strb	r7, [r0, #2]
    r[13*i+ 3]  =  t[1] >> 11;
    r[13*i+ 3] |=  t[2] <<  2;
 8002ba0:	00b7      	lsls	r7, r6, #2
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8002ba2:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
    r[13*i+ 3] |=  t[2] <<  2;
 8002ba6:	ea47 24d4 	orr.w	r4, r7, r4, lsr #11
 8002baa:	70c4      	strb	r4, [r0, #3]
    r[13*i+ 4]  =  t[2] >>  6;
    r[13*i+ 4] |=  t[3] <<  7;
 8002bac:	01d4      	lsls	r4, r2, #7
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8002bae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    r[13*i+ 4] |=  t[3] <<  7;
 8002bb2:	ea44 1696 	orr.w	r6, r4, r6, lsr #6
    r[13*i+ 5]  =  t[3] >>  1;
 8002bb6:	0854      	lsrs	r4, r2, #1
 8002bb8:	7144      	strb	r4, [r0, #5]
    r[13*i+ 6]  =  t[3] >>  9;
    r[13*i+ 6] |=  t[4] <<  4;
 8002bba:	011c      	lsls	r4, r3, #4
 8002bbc:	ea44 2252 	orr.w	r2, r4, r2, lsr #9
 8002bc0:	7182      	strb	r2, [r0, #6]
    r[13*i+ 7]  =  t[4] >>  4;
 8002bc2:	091a      	lsrs	r2, r3, #4
 8002bc4:	71c2      	strb	r2, [r0, #7]
    r[13*i+ 8]  =  t[4] >> 12;
    r[13*i+ 8] |=  t[5] <<  1;
 8002bc6:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8002bca:	ea42 3313 	orr.w	r3, r2, r3, lsr #12
 8002bce:	7203      	strb	r3, [r0, #8]
    r[13*i+ 9]  =  t[5] >>  7;
    r[13*i+ 9] |=  t[6] <<  6;
 8002bd0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002bd4:	ea43 13d8 	orr.w	r3, r3, r8, lsr #7
 8002bd8:	7243      	strb	r3, [r0, #9]
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 8002bda:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
    r[13*i+10]  =  t[6] >>  2;
 8002bde:	ea4f 039e 	mov.w	r3, lr, lsr #2
 8002be2:	7283      	strb	r3, [r0, #10]
    r[13*i+11]  =  t[6] >> 10;
    r[13*i+11] |=  t[7] <<  3;
 8002be4:	00eb      	lsls	r3, r5, #3
 8002be6:	ea43 239e 	orr.w	r3, r3, lr, lsr #10
    r[13*i+12]  =  t[7] >>  5;
 8002bea:	096d      	lsrs	r5, r5, #5
    r[13*i+ 4] |=  t[3] <<  7;
 8002bec:	7106      	strb	r6, [r0, #4]
    r[13*i+11] |=  t[7] <<  3;
 8002bee:	72c3      	strb	r3, [r0, #11]
    r[13*i+12]  =  t[7] >>  5;
 8002bf0:	7305      	strb	r5, [r0, #12]
  for(i = 0; i < N/8; ++i) {
 8002bf2:	300d      	adds	r0, #13
 8002bf4:	4584      	cmp	ip, r0
 8002bf6:	f101 0120 	add.w	r1, r1, #32
 8002bfa:	d1b7      	bne.n	8002b6c <pqcrystals_dilithium_polyt0_pack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 8002bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002c00 <pqcrystals_dilithium_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 8002c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c04:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0]  = a[13*i+0];
 8002c08:	780f      	ldrb	r7, [r1, #0]
 8002c0a:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 8002c0c:	784b      	ldrb	r3, [r1, #1]
 8002c0e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    r->coeffs[8*i+0] &= 0x1FFF;
 8002c12:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8002c16:	6007      	str	r7, [r0, #0]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8002c18:	784d      	ldrb	r5, [r1, #1]
 8002c1a:	096d      	lsrs	r5, r5, #5
 8002c1c:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 8002c1e:	788b      	ldrb	r3, [r1, #2]
 8002c20:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 8002c24:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 8002c26:	78cb      	ldrb	r3, [r1, #3]
 8002c28:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
    r->coeffs[8*i+1] &= 0x1FFF;
 8002c2c:	f3c5 050c 	ubfx	r5, r5, #0, #13
 8002c30:	6045      	str	r5, [r0, #4]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 8002c32:	78ce      	ldrb	r6, [r1, #3]
 8002c34:	08b6      	lsrs	r6, r6, #2
 8002c36:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 8002c38:	790b      	ldrb	r3, [r1, #4]
 8002c3a:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
    r->coeffs[8*i+2] &= 0x1FFF;
 8002c3e:	f3c6 060c 	ubfx	r6, r6, #0, #13
 8002c42:	6086      	str	r6, [r0, #8]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8002c44:	790c      	ldrb	r4, [r1, #4]
 8002c46:	09e4      	lsrs	r4, r4, #7
 8002c48:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8002c4a:	794b      	ldrb	r3, [r1, #5]
 8002c4c:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8002c50:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 8002c52:	798b      	ldrb	r3, [r1, #6]
 8002c54:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
    r->coeffs[8*i+3] &= 0x1FFF;
 8002c58:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8002c5c:	60c4      	str	r4, [r0, #12]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 8002c5e:	798a      	ldrb	r2, [r1, #6]
 8002c60:	0912      	lsrs	r2, r2, #4
 8002c62:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8002c64:	79cb      	ldrb	r3, [r1, #7]
 8002c66:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8002c6a:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8002c6c:	7a0b      	ldrb	r3, [r1, #8]
 8002c6e:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    r->coeffs[8*i+4] &= 0x1FFF;
 8002c72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002c76:	6102      	str	r2, [r0, #16]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8002c78:	7a0b      	ldrb	r3, [r1, #8]
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 8002c7e:	f891 e009 	ldrb.w	lr, [r1, #9]
 8002c82:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
    r->coeffs[8*i+5] &= 0x1FFF;
 8002c86:	f3c3 0e0c 	ubfx	lr, r3, #0, #13
 8002c8a:	f8c0 e014 	str.w	lr, [r0, #20]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8002c8e:	7a4b      	ldrb	r3, [r1, #9]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 8002c94:	f891 800a 	ldrb.w	r8, [r1, #10]
 8002c98:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
 8002c9c:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8002c9e:	f891 800b 	ldrb.w	r8, [r1, #11]
 8002ca2:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
    r->coeffs[8*i+6] &= 0x1FFF;
 8002ca6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002caa:	6183      	str	r3, [r0, #24]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8002cac:	f891 800b 	ldrb.w	r8, [r1, #11]
 8002cb0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8002cb4:	f8c0 801c 	str.w	r8, [r0, #28]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8002cb8:	f891 900c 	ldrb.w	r9, [r1, #12]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8002cbc:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8002cc0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 8002cc4:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 8002cc8:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 8002cca:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8002ccc:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8002cd0:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8002cd4:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8002cd8:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8002cdc:	f5ce 5280 	rsb	r2, lr, #4096	; 0x1000
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8002ce0:	f5c8 5380 	rsb	r3, r8, #4096	; 0x1000
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8002ce4:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 8002ce6:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 8002ce8:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 8002cea:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 8002cec:	6142      	str	r2, [r0, #20]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 8002cee:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < N/8; ++i) {
 8002cf0:	3020      	adds	r0, #32
 8002cf2:	4560      	cmp	r0, ip
 8002cf4:	f101 010d 	add.w	r1, r1, #13
 8002cf8:	d186      	bne.n	8002c08 <pqcrystals_dilithium_polyt0_unpack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 8002cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002cfe <pqcrystals_dilithium_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 8002cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d00:	f500 7610 	add.w	r6, r0, #576	; 0x240
  uint32_t t[4];
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8002d04:	680d      	ldr	r5, [r1, #0]
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8002d06:	684c      	ldr	r4, [r1, #4]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8002d08:	688a      	ldr	r2, [r1, #8]
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8002d0a:	68cb      	ldr	r3, [r1, #12]
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8002d0c:	f5c5 3500 	rsb	r5, r5, #131072	; 0x20000
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 8002d10:	f5c4 3400 	rsb	r4, r4, #131072	; 0x20000

    r[9*i+0]  = t[0];
    r[9*i+1]  = t[0] >> 8;
 8002d14:	0a2f      	lsrs	r7, r5, #8
 8002d16:	7047      	strb	r7, [r0, #1]
    r[9*i+2]  = t[0] >> 16;
    r[9*i+2] |= t[1] << 2;
 8002d18:	00a7      	lsls	r7, r4, #2
    r[9*i+0]  = t[0];
 8002d1a:	7005      	strb	r5, [r0, #0]
    r[9*i+2] |= t[1] << 2;
 8002d1c:	ea47 4515 	orr.w	r5, r7, r5, lsr #16
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 8002d20:	f5c2 3200 	rsb	r2, r2, #131072	; 0x20000
    r[9*i+2] |= t[1] << 2;
 8002d24:	7085      	strb	r5, [r0, #2]
    r[9*i+3]  = t[1] >> 6;
 8002d26:	09a5      	lsrs	r5, r4, #6
 8002d28:	70c5      	strb	r5, [r0, #3]
    r[9*i+4]  = t[1] >> 14;
    r[9*i+4] |= t[2] << 4;
 8002d2a:	0115      	lsls	r5, r2, #4
 8002d2c:	ea45 3494 	orr.w	r4, r5, r4, lsr #14
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8002d30:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
    r[9*i+4] |= t[2] << 4;
 8002d34:	7104      	strb	r4, [r0, #4]
    r[9*i+5]  = t[2] >> 4;
 8002d36:	0914      	lsrs	r4, r2, #4
 8002d38:	7144      	strb	r4, [r0, #5]
    r[9*i+6]  = t[2] >> 12;
    r[9*i+6] |= t[3] << 6;
 8002d3a:	019c      	lsls	r4, r3, #6
 8002d3c:	ea44 3212 	orr.w	r2, r4, r2, lsr #12
 8002d40:	7182      	strb	r2, [r0, #6]
    r[9*i+7]  = t[3] >> 2;
 8002d42:	089a      	lsrs	r2, r3, #2
    r[9*i+8]  = t[3] >> 10;
 8002d44:	0a9b      	lsrs	r3, r3, #10
    r[9*i+7]  = t[3] >> 2;
 8002d46:	71c2      	strb	r2, [r0, #7]
    r[9*i+8]  = t[3] >> 10;
 8002d48:	7203      	strb	r3, [r0, #8]
  for(i = 0; i < N/4; ++i) {
 8002d4a:	3009      	adds	r0, #9
 8002d4c:	4286      	cmp	r6, r0
 8002d4e:	f101 0110 	add.w	r1, r1, #16
 8002d52:	d1d7      	bne.n	8002d04 <pqcrystals_dilithium_polyz_pack+0x6>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8002d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d56 <pqcrystals_dilithium_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 8002d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d58:	f500 6680 	add.w	r6, r0, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
    r->coeffs[4*i+0]  = a[9*i+0];
 8002d5c:	780c      	ldrb	r4, [r1, #0]
 8002d5e:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8002d60:	784b      	ldrb	r3, [r1, #1]
 8002d62:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002d66:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8002d68:	788b      	ldrb	r3, [r1, #2]
 8002d6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    r->coeffs[4*i+0] &= 0x3FFFF;
 8002d6e:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002d72:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8002d74:	788a      	ldrb	r2, [r1, #2]
 8002d76:	0892      	lsrs	r2, r2, #2
 8002d78:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8002d7a:	78cb      	ldrb	r3, [r1, #3]
 8002d7c:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8002d80:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8002d82:	790b      	ldrb	r3, [r1, #4]
 8002d84:	ea42 3283 	orr.w	r2, r2, r3, lsl #14
    r->coeffs[4*i+1] &= 0x3FFFF;
 8002d88:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8002d8c:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 8002d8e:	790b      	ldrb	r3, [r1, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 8002d94:	794d      	ldrb	r5, [r1, #5]
 8002d96:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002d9a:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 8002d9c:	798d      	ldrb	r5, [r1, #6]
 8002d9e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    r->coeffs[4*i+2] &= 0x3FFFF;
 8002da2:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002da6:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 8002da8:	798d      	ldrb	r5, [r1, #6]
 8002daa:	09ad      	lsrs	r5, r5, #6
 8002dac:	60c5      	str	r5, [r0, #12]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 8002dae:	79cf      	ldrb	r7, [r1, #7]
 8002db0:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
 8002db4:	60c5      	str	r5, [r0, #12]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 8002db6:	7a0f      	ldrb	r7, [r1, #8]
 8002db8:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
    r->coeffs[4*i+3] &= 0x3FFFF;
    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 8002dbc:	f5c4 3400 	rsb	r4, r4, #131072	; 0x20000
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8002dc0:	f5c2 3200 	rsb	r2, r2, #131072	; 0x20000
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8002dc4:	f5c3 3300 	rsb	r3, r3, #131072	; 0x20000
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 8002dc8:	f5c5 3500 	rsb	r5, r5, #131072	; 0x20000
    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 8002dcc:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 8002dce:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 8002dd0:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 8002dd2:	60c5      	str	r5, [r0, #12]
  for(i = 0; i < N/4; ++i) {
 8002dd4:	3010      	adds	r0, #16
 8002dd6:	42b0      	cmp	r0, r6
 8002dd8:	f101 0109 	add.w	r1, r1, #9
 8002ddc:	d1be      	bne.n	8002d5c <pqcrystals_dilithium_polyz_unpack+0x6>
    r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif
  DBENCH_STOP(*tpack);
}
 8002dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002de0 <pqcrystals_dilithium_poly_uniform_gamma1>:
{
 8002de0:	b510      	push	{r4, lr}
 8002de2:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8002de6:	4604      	mov	r4, r0
  stream256_init(&state, seed, nonce);
 8002de8:	4668      	mov	r0, sp
 8002dea:	f000 f9ba 	bl	8003162 <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8002dee:	466a      	mov	r2, sp
 8002df0:	a834      	add	r0, sp, #208	; 0xd0
 8002df2:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8002df6:	f000 fb38 	bl	800346a <shake256_inc_squeeze>
  polyz_unpack(a, buf);
 8002dfa:	a934      	add	r1, sp, #208	; 0xd0
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ffaa 	bl	8002d56 <pqcrystals_dilithium_polyz_unpack>
}
 8002e02:	f50d 7d5e 	add.w	sp, sp, #888	; 0x378
 8002e06:	bd10      	pop	{r4, pc}

08002e08 <pqcrystals_dilithium_polyw1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYW1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyw1_pack(uint8_t *r, const poly *a) {
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q-1)/88
  for(i = 0; i < N/4; ++i) {
    r[3*i+0]  = a->coeffs[4*i+0];
 8002e0e:	680b      	ldr	r3, [r1, #0]
 8002e10:	7003      	strb	r3, [r0, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 8002e12:	684c      	ldr	r4, [r1, #4]
 8002e14:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8002e18:	7003      	strb	r3, [r0, #0]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8002e1a:	684b      	ldr	r3, [r1, #4]
 8002e1c:	109b      	asrs	r3, r3, #2
 8002e1e:	7043      	strb	r3, [r0, #1]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8002e20:	688c      	ldr	r4, [r1, #8]
 8002e22:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8002e26:	7043      	strb	r3, [r0, #1]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 8002e28:	688b      	ldr	r3, [r1, #8]
 8002e2a:	111b      	asrs	r3, r3, #4
 8002e2c:	7083      	strb	r3, [r0, #2]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8002e2e:	68cc      	ldr	r4, [r1, #12]
 8002e30:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8002e34:	7083      	strb	r3, [r0, #2]
  for(i = 0; i < N/4; ++i) {
 8002e36:	3003      	adds	r0, #3
 8002e38:	4290      	cmp	r0, r2
 8002e3a:	f101 0110 	add.w	r1, r1, #16
 8002e3e:	d1e6      	bne.n	8002e0e <pqcrystals_dilithium_polyw1_pack+0x6>
  for(i = 0; i < N/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 8002e40:	bd10      	pop	{r4, pc}

08002e42 <pqcrystals_dilithium_polyvec_matrix_expand>:
*              sampling on the output stream of SHAKE128(rho|j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8002e42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e46:	4606      	mov	r6, r0
 8002e48:	4688      	mov	r8, r1
  unsigned int i, j;

  for(i = 0; i < K; ++i)
 8002e4a:	2500      	movs	r5, #0
    for(j = 0; j < L; ++j)
 8002e4c:	022f      	lsls	r7, r5, #8
 8002e4e:	b2bf      	uxth	r7, r7
 8002e50:	eb06 3905 	add.w	r9, r6, r5, lsl #12
 8002e54:	2400      	movs	r4, #0
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8002e56:	193a      	adds	r2, r7, r4
 8002e58:	eb09 2084 	add.w	r0, r9, r4, lsl #10
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	4641      	mov	r1, r8
    for(j = 0; j < L; ++j)
 8002e60:	3401      	adds	r4, #1
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8002e62:	f7ff fd5d 	bl	8002920 <pqcrystals_dilithium_poly_uniform>
    for(j = 0; j < L; ++j)
 8002e66:	2c04      	cmp	r4, #4
 8002e68:	d1f5      	bne.n	8002e56 <pqcrystals_dilithium_polyvec_matrix_expand+0x14>
  for(i = 0; i < K; ++i)
 8002e6a:	3501      	adds	r5, #1
 8002e6c:	2d04      	cmp	r5, #4
 8002e6e:	d1ed      	bne.n	8002e4c <pqcrystals_dilithium_polyvec_matrix_expand+0xa>
}
 8002e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002e74 <pqcrystals_dilithium_polyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	4605      	mov	r5, r0
 8002e78:	460e      	mov	r6, r1
 8002e7a:	4617      	mov	r7, r2
  unsigned int i;

  for(i = 0; i < L; ++i)
 8002e7c:	2400      	movs	r4, #0
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8002e7e:	193a      	adds	r2, r7, r4
 8002e80:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 8002e84:	b292      	uxth	r2, r2
 8002e86:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 8002e88:	3401      	adds	r4, #1
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8002e8a:	f7ff fd8c 	bl	80029a6 <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < L; ++i)
 8002e8e:	2c04      	cmp	r4, #4
 8002e90:	d1f5      	bne.n	8002e7e <pqcrystals_dilithium_polyvecl_uniform_eta+0xa>
}
 8002e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e94 <pqcrystals_dilithium_polyvecl_uniform_gamma1>:

void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8002e96:	0095      	lsls	r5, r2, #2
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002e98:	4606      	mov	r6, r0
 8002e9a:	460f      	mov	r7, r1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8002e9c:	b2ad      	uxth	r5, r5
  for(i = 0; i < L; ++i)
 8002e9e:	2400      	movs	r4, #0
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8002ea0:	192a      	adds	r2, r5, r4
 8002ea2:	eb06 2084 	add.w	r0, r6, r4, lsl #10
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	4639      	mov	r1, r7
  for(i = 0; i < L; ++i)
 8002eaa:	3401      	adds	r4, #1
    poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i);
 8002eac:	f7ff ff98 	bl	8002de0 <pqcrystals_dilithium_poly_uniform_gamma1>
  for(i = 0; i < L; ++i)
 8002eb0:	2c04      	cmp	r4, #4
 8002eb2:	d1f5      	bne.n	8002ea0 <pqcrystals_dilithium_polyvecl_uniform_gamma1+0xc>
}
 8002eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002eb6 <pqcrystals_dilithium_polyvecl_reduce>:

  for(i = 0; i < L; ++i)
    poly_uniform_gamma11(&v->vec[i], seed, L*nonce + i);
}

void polyvecl_reduce(polyvecl *v) {
 8002eb6:	b510      	push	{r4, lr}
 8002eb8:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_reduce(&v->vec[i]);
 8002eba:	f7ff fcbc 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
 8002ebe:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002ec2:	f7ff fcb8 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
 8002ec6:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002eca:	f7ff fcb4 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
 8002ece:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8002ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&v->vec[i]);
 8002ed6:	f7ff bcae 	b.w	8002836 <pqcrystals_dilithium_poly_reduce>

08002eda <pqcrystals_dilithium_polyvecl_add>:
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
 8002eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002edc:	4605      	mov	r5, r0
 8002ede:	460e      	mov	r6, r1
 8002ee0:	4617      	mov	r7, r2
 8002ee2:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8002ee4:	193a      	adds	r2, r7, r4
 8002ee6:	1931      	adds	r1, r6, r4
 8002ee8:	1928      	adds	r0, r5, r4
  for(i = 0; i < L; ++i)
 8002eea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8002eee:	f7ff fca6 	bl	800283e <pqcrystals_dilithium_poly_add>
  for(i = 0; i < L; ++i)
 8002ef2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002ef6:	d1f5      	bne.n	8002ee4 <pqcrystals_dilithium_polyvecl_add+0xa>
}
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002efa <pqcrystals_dilithium_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void polyvecl_ntt(polyvecl *v) {
 8002efa:	b510      	push	{r4, lr}
 8002efc:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_ntt(&v->vec[i]);
 8002efe:	f7ff fcba 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
 8002f02:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002f06:	f7ff fcb6 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
 8002f0a:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002f0e:	f7ff fcb2 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
 8002f12:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8002f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&v->vec[i]);
 8002f1a:	f7ff bcac 	b.w	8002876 <pqcrystals_dilithium_poly_ntt>

08002f1e <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void polyvecl_pointwise_acc_montgomery(poly *w,
                                       const polyvecl *u,
                                       const polyvecl *v)
{
 8002f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f20:	4605      	mov	r5, r0
 8002f22:	460e      	mov	r6, r1
 8002f24:	4617      	mov	r7, r2
  unsigned int i;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 8002f26:	f7ff fcaa 	bl	800287e <pqcrystals_dilithium_poly_pointwise_montgomery>
 8002f2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  for(i = 1; i < L; ++i) {
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 8002f2e:	193a      	adds	r2, r7, r4
 8002f30:	1931      	adds	r1, r6, r4
 8002f32:	4628      	mov	r0, r5
  for(i = 1; i < L; ++i) {
 8002f34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 8002f38:	f7ff fca3 	bl	8002882 <pqcrystals_dilithium_poly_pointwise_acc_montgomery>
  for(i = 1; i < L; ++i) {
 8002f3c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002f40:	d1f5      	bne.n	8002f2e <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery+0x10>
  }
}
 8002f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f44 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>:
void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	4616      	mov	r6, r2
 8002f48:	4604      	mov	r4, r0
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 8002f50:	4629      	mov	r1, r5
 8002f52:	4620      	mov	r0, r4
 8002f54:	4632      	mov	r2, r6
  for(i = 0; i < K; ++i)
 8002f56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 8002f5a:	f7ff ffe0 	bl	8002f1e <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery>
  for(i = 0; i < K; ++i)
 8002f5e:	42bc      	cmp	r4, r7
 8002f60:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8002f64:	d1f4      	bne.n	8002f50 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery+0xc>
}
 8002f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f68 <pqcrystals_dilithium_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	460d      	mov	r5, r1
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  unsigned int i;

  for(i = 0; i < L; ++i)
    if(poly_chknorm(&v->vec[i], bound))
 8002f72:	4629      	mov	r1, r5
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff fcbb 	bl	80028f0 <pqcrystals_dilithium_poly_chknorm>
 8002f7a:	b920      	cbnz	r0, 8002f86 <pqcrystals_dilithium_polyvecl_chknorm+0x1e>
  for(i = 0; i < L; ++i)
 8002f7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f80:	42b4      	cmp	r4, r6
 8002f82:	d1f6      	bne.n	8002f72 <pqcrystals_dilithium_polyvecl_chknorm+0xa>
      return 1;

  return 0;
}
 8002f84:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8002f86:	2001      	movs	r0, #1
 8002f88:	e7fc      	b.n	8002f84 <pqcrystals_dilithium_polyvecl_chknorm+0x1c>

08002f8a <pqcrystals_dilithium_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8002f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	460e      	mov	r6, r1
 8002f90:	4617      	mov	r7, r2
  unsigned int i;

  for(i = 0; i < K; ++i)
 8002f92:	2400      	movs	r4, #0
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8002f94:	193a      	adds	r2, r7, r4
 8002f96:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	4631      	mov	r1, r6
  for(i = 0; i < K; ++i)
 8002f9e:	3401      	adds	r4, #1
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8002fa0:	f7ff fd01 	bl	80029a6 <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < K; ++i)
 8002fa4:	2c04      	cmp	r4, #4
 8002fa6:	d1f5      	bne.n	8002f94 <pqcrystals_dilithium_polyveck_uniform_eta+0xa>
}
 8002fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002faa <pqcrystals_dilithium_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8002faa:	b510      	push	{r4, lr}
 8002fac:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_reduce(&v->vec[i]);
 8002fae:	f7ff fc42 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
 8002fb2:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002fb6:	f7ff fc3e 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
 8002fba:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002fbe:	f7ff fc3a 	bl	8002836 <pqcrystals_dilithium_poly_reduce>
 8002fc2:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8002fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&v->vec[i]);
 8002fca:	f7ff bc34 	b.w	8002836 <pqcrystals_dilithium_poly_reduce>

08002fce <pqcrystals_dilithium_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_caddq(&v->vec[i]);
 8002fd2:	f7ff fc32 	bl	800283a <pqcrystals_dilithium_poly_caddq>
 8002fd6:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8002fda:	f7ff fc2e 	bl	800283a <pqcrystals_dilithium_poly_caddq>
 8002fde:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8002fe2:	f7ff fc2a 	bl	800283a <pqcrystals_dilithium_poly_caddq>
 8002fe6:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8002fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_caddq(&v->vec[i]);
 8002fee:	f7ff bc24 	b.w	800283a <pqcrystals_dilithium_poly_caddq>

08002ff2 <pqcrystals_dilithium_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8002ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	460e      	mov	r6, r1
 8002ff8:	4617      	mov	r7, r2
 8002ffa:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8002ffc:	193a      	adds	r2, r7, r4
 8002ffe:	1931      	adds	r1, r6, r4
 8003000:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8003002:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003006:	f7ff fc1a 	bl	800283e <pqcrystals_dilithium_poly_add>
  for(i = 0; i < K; ++i)
 800300a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800300e:	d1f5      	bne.n	8002ffc <pqcrystals_dilithium_polyveck_add+0xa>
}
 8003010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003012 <pqcrystals_dilithium_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 8003012:	b510      	push	{r4, lr}
 8003014:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_ntt(&v->vec[i]);
 8003016:	f7ff fc2e 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
 800301a:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800301e:	f7ff fc2a 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
 8003022:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8003026:	f7ff fc26 	bl	8002876 <pqcrystals_dilithium_poly_ntt>
 800302a:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 800302e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&v->vec[i]);
 8003032:	f7ff bc20 	b.w	8002876 <pqcrystals_dilithium_poly_ntt>

08003036 <pqcrystals_dilithium_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8003036:	b510      	push	{r4, lr}
 8003038:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_invntt_tomont(&v->vec[i]);
 800303a:	f7ff fc1e 	bl	800287a <pqcrystals_dilithium_poly_invntt_tomont>
 800303e:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8003042:	f7ff fc1a 	bl	800287a <pqcrystals_dilithium_poly_invntt_tomont>
 8003046:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 800304a:	f7ff fc16 	bl	800287a <pqcrystals_dilithium_poly_invntt_tomont>
 800304e:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8003052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_invntt_tomont(&v->vec[i]);
 8003056:	f7ff bc10 	b.w	800287a <pqcrystals_dilithium_poly_invntt_tomont>

0800305a <pqcrystals_dilithium_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 800305a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305c:	4605      	mov	r5, r0
 800305e:	460e      	mov	r6, r1
 8003060:	4617      	mov	r7, r2
 8003062:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003064:	193a      	adds	r2, r7, r4
 8003066:	1931      	adds	r1, r6, r4
 8003068:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 800306a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800306e:	f7ff fc0a 	bl	8002886 <pqcrystals_dilithium_poly_power2round>
  for(i = 0; i < K; ++i)
 8003072:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003076:	d1f5      	bne.n	8003064 <pqcrystals_dilithium_polyveck_power2round+0xa>
}
 8003078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800307a <pqcrystals_dilithium_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 800307a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307c:	4605      	mov	r5, r0
 800307e:	460e      	mov	r6, r1
 8003080:	4617      	mov	r7, r2
 8003082:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003084:	193a      	adds	r2, r7, r4
 8003086:	1931      	adds	r1, r6, r4
 8003088:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 800308a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800308e:	f7ff fc09 	bl	80028a4 <pqcrystals_dilithium_poly_decompose>
  for(i = 0; i < K; ++i)
 8003092:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003096:	d1f5      	bne.n	8003084 <pqcrystals_dilithium_polyveck_decompose+0xa>
}
 8003098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800309a <pqcrystals_dilithium_polyveck_pack_w1>:

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
}

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 800309a:	b570      	push	{r4, r5, r6, lr}
 800309c:	4604      	mov	r4, r0
 800309e:	460d      	mov	r5, r1
 80030a0:	f500 7640 	add.w	r6, r0, #768	; 0x300
  unsigned int i;

  for(i = 0; i < K; ++i)
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 80030a4:	4629      	mov	r1, r5
 80030a6:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 80030a8:	34c0      	adds	r4, #192	; 0xc0
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 80030aa:	f7ff fead 	bl	8002e08 <pqcrystals_dilithium_polyw1_pack>
  for(i = 0; i < K; ++i)
 80030ae:	42b4      	cmp	r4, r6
 80030b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030b4:	d1f6      	bne.n	80030a4 <pqcrystals_dilithium_polyveck_pack_w1+0xa>
}
 80030b6:	bd70      	pop	{r4, r5, r6, pc}

080030b8 <pqcrystals_dilithium_power2round>:
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 80030b8:	f601 72ff 	addw	r2, r1, #4095	; 0xfff
  *a0 = a - (a1 << D);
 80030bc:	f422 53ff 	bic.w	r3, r2, #8160	; 0x1fe0
 80030c0:	f023 031f 	bic.w	r3, r3, #31
 80030c4:	1ac9      	subs	r1, r1, r3
 80030c6:	6001      	str	r1, [r0, #0]
  return a1;
}
 80030c8:	1350      	asrs	r0, r2, #13
 80030ca:	4770      	bx	lr

080030cc <pqcrystals_dilithium_decompose>:
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
  int32_t a1;

  a1  = (a + 127) >> 7;
 80030cc:	f101 037f 	add.w	r3, r1, #127	; 0x7f
#if GAMMA2 == (Q-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 80030d0:	f642 420b 	movw	r2, #11275	; 0x2c0b
  a1  = (a + 127) >> 7;
 80030d4:	11db      	asrs	r3, r3, #7
  a1  = (a1*11275 + (1 << 23)) >> 24;
 80030d6:	4353      	muls	r3, r2
 80030d8:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80030dc:	161b      	asrs	r3, r3, #24
  a1 ^= ((43 - a1) >> 31) & a1;
 80030de:	f1c3 022b 	rsb	r2, r3, #43	; 0x2b
 80030e2:	17d2      	asrs	r2, r2, #31
 80030e4:	ea23 0302 	bic.w	r3, r3, r2
#endif

  *a0  = a - a1*2*GAMMA2;
 80030e8:	4a07      	ldr	r2, [pc, #28]	; (8003108 <pqcrystals_dilithium_decompose+0x3c>)
int32_t decompose(int32_t *a0, int32_t a) {
 80030ea:	b510      	push	{r4, lr}
  *a0  = a - a1*2*GAMMA2;
 80030ec:	fb02 1103 	mla	r1, r2, r3, r1
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 80030f0:	f5c1 147f 	rsb	r4, r1, #4177920	; 0x3fc000
 80030f4:	4a05      	ldr	r2, [pc, #20]	; (800310c <pqcrystals_dilithium_decompose+0x40>)
 80030f6:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
 80030fa:	ea02 72e4 	and.w	r2, r2, r4, asr #31
 80030fe:	1a89      	subs	r1, r1, r2
 8003100:	6001      	str	r1, [r0, #0]
  return a1;
}
 8003102:	4618      	mov	r0, r3
 8003104:	bd10      	pop	{r4, pc}
 8003106:	bf00      	nop
 8003108:	fffd1800 	.word	0xfffd1800
 800310c:	007fe001 	.word	0x007fe001

08003110 <pqcrystals_dilithium_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
 8003110:	f500 33ba 	add.w	r3, r0, #95232	; 0x17400
 8003114:	f5b3 3f3a 	cmp.w	r3, #190464	; 0x2e800
 8003118:	d806      	bhi.n	8003128 <pqcrystals_dilithium_make_hint+0x18>
 800311a:	f510 3fba 	cmn.w	r0, #95232	; 0x17400
 800311e:	d105      	bne.n	800312c <pqcrystals_dilithium_make_hint+0x1c>
 8003120:	1e08      	subs	r0, r1, #0
 8003122:	bf18      	it	ne
 8003124:	2001      	movne	r0, #1
 8003126:	4770      	bx	lr
    return 1;
 8003128:	2001      	movs	r0, #1
 800312a:	4770      	bx	lr

  return 0;
 800312c:	2000      	movs	r0, #0
}
 800312e:	4770      	bx	lr

08003130 <pqcrystals_dilithium_dilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
 8003130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003132:	4604      	mov	r4, r0
 8003134:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 8003136:	f88d 2004 	strb.w	r2, [sp, #4]
  t[1] = nonce >> 8;
 800313a:	0a12      	lsrs	r2, r2, #8
 800313c:	f88d 2005 	strb.w	r2, [sp, #5]

  shake128_inc_init(state);
 8003140:	f000 f97a 	bl	8003438 <shake128_inc_init>
  shake128_inc_absorb(state, seed, SEEDBYTES);
 8003144:	4629      	mov	r1, r5
 8003146:	4620      	mov	r0, r4
 8003148:	2220      	movs	r2, #32
 800314a:	f000 f977 	bl	800343c <shake128_inc_absorb>
  shake128_inc_absorb(state, t, 2);
 800314e:	2202      	movs	r2, #2
 8003150:	a901      	add	r1, sp, #4
 8003152:	4620      	mov	r0, r4
 8003154:	f000 f972 	bl	800343c <shake128_inc_absorb>
  shake128_inc_finalize(state);
 8003158:	4620      	mov	r0, r4
 800315a:	f000 f974 	bl	8003446 <shake128_inc_finalize>
}
 800315e:	b003      	add	sp, #12
 8003160:	bd30      	pop	{r4, r5, pc}

08003162 <pqcrystals_dilithium_dilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
 8003162:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003164:	4604      	mov	r4, r0
 8003166:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 8003168:	f88d 2004 	strb.w	r2, [sp, #4]
  t[1] = nonce >> 8;
 800316c:	0a12      	lsrs	r2, r2, #8
 800316e:	f88d 2005 	strb.w	r2, [sp, #5]

  shake256_inc_init(state);
 8003172:	f000 f96f 	bl	8003454 <shake256_inc_init>
  shake256_inc_absorb(state, seed, CRHBYTES);
 8003176:	4629      	mov	r1, r5
 8003178:	4620      	mov	r0, r4
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	f000 f96c 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_absorb(state, t, 2);
 8003180:	2202      	movs	r2, #2
 8003182:	a901      	add	r1, sp, #4
 8003184:	4620      	mov	r0, r4
 8003186:	f000 f967 	bl	8003458 <shake256_inc_absorb>
  shake256_inc_finalize(state);
 800318a:	4620      	mov	r0, r4
 800318c:	f000 f969 	bl	8003462 <shake256_inc_finalize>
}
 8003190:	b003      	add	sp, #12
 8003192:	bd30      	pop	{r4, r5, pc}

08003194 <poly_small_ntt_precomp>:
#include "smallpoly.h"
#include "smallntt.h"

void poly_small_ntt_precomp(smallpoly *out, smallhalfpoly *out2, poly *in) {
 8003194:	b537      	push	{r0, r1, r2, r4, r5, lr}
  for (int i = 0; i < N; i++)
 8003196:	2300      	movs	r3, #0
void poly_small_ntt_precomp(smallpoly *out, smallhalfpoly *out2, poly *in) {
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
  {
    out->coeffs[i] = in->coeffs[i];
 800319c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80031a0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  for (int i = 0; i < N; i++)
 80031a4:	3301      	adds	r3, #1
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031aa:	d1f7      	bne.n	800319c <poly_small_ntt_precomp+0x8>
  }
  small_ntt(out->coeffs);
 80031ac:	4620      	mov	r0, r4
 80031ae:	4909      	ldr	r1, [pc, #36]	; (80031d4 <poly_small_ntt_precomp+0x40>)
 80031b0:	f240 1301 	movw	r3, #257	; 0x101
 80031b4:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80031b8:	f7fd f870 	bl	800029c <__asm_fnt_257>
  small_point_mul(out2->coeffs, out->coeffs);
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <poly_small_ntt_precomp+0x44>)
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80031c4:	f240 1301 	movw	r3, #257	; 0x101
 80031c8:	4621      	mov	r1, r4
 80031ca:	4628      	mov	r0, r5
 80031cc:	f7fc fffc 	bl	80001c8 <__asm_point_mul_257_16>
}
 80031d0:	b003      	add	sp, #12
 80031d2:	bd30      	pop	{r4, r5, pc}
 80031d4:	08005b08 	.word	0x08005b08
 80031d8:	08005ce8 	.word	0x08005ce8

080031dc <polyvecl_small_ntt>:


void polyvecl_small_ntt(smallpoly v[L]) {
 80031dc:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;

  for(i = 0; i < L; ++i)
    small_ntt(v[i].coeffs);
 80031de:	4e08      	ldr	r6, [pc, #32]	; (8003200 <polyvecl_small_ntt+0x24>)
void polyvecl_small_ntt(smallpoly v[L]) {
 80031e0:	4604      	mov	r4, r0
 80031e2:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
    small_ntt(v[i].coeffs);
 80031e6:	4620      	mov	r0, r4
 80031e8:	f240 1301 	movw	r3, #257	; 0x101
 80031ec:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 80031f0:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 80031f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    small_ntt(v[i].coeffs);
 80031f6:	f7fd f851 	bl	800029c <__asm_fnt_257>
  for(i = 0; i < L; ++i)
 80031fa:	42ac      	cmp	r4, r5
 80031fc:	d1f3      	bne.n	80031e6 <polyvecl_small_ntt+0xa>
}
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	08005b08 	.word	0x08005b08

08003204 <polyveck_small_ntt>:
 8003204:	f7ff bfea 	b.w	80031dc <polyvecl_small_ntt>

08003208 <poly_small_basemul_invntt>:
    small_ntt(v[i].coeffs);
}



void poly_small_basemul_invntt(poly *r, const smallpoly *a, const smallhalfpoly *aprime, const smallpoly *b){
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	460d      	mov	r5, r1
 800320c:	4604      	mov	r4, r0
 800320e:	4619      	mov	r1, r3
    // re-use the buffer
    smallpoly *tmp = (smallpoly *)r;
    small_asymmetric_mul(tmp->coeffs, b->coeffs, a->coeffs, aprime->coeffs);
 8003210:	4613      	mov	r3, r2
 8003212:	462a      	mov	r2, r5
 8003214:	f7fd f81c 	bl	8000250 <__asm_asymmetric_mul_257_16>
    small_invntt_tomont(tmp->coeffs);
 8003218:	4620      	mov	r0, r4
 800321a:	4904      	ldr	r1, [pc, #16]	; (800322c <poly_small_basemul_invntt+0x24>)
    // buffer is the same, so we neeed to be careful
    for(j=N-1;j>=0;j--){
        r->coeffs[j] = tmp->coeffs[j];
    }
    #endif
}
 800321c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    small_invntt_tomont(tmp->coeffs);
 8003220:	f240 1301 	movw	r3, #257	; 0x101
 8003224:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
 8003228:	f7fd bbdc 	b.w	80009e4 <__asm_ifnt_257>
 800322c:	08005de8 	.word	0x08005de8

08003230 <polyvecl_small_basemul_invntt>:

void polyvecl_small_basemul_invntt(polyvecl *r, const smallpoly *a, const smallhalfpoly *aprime, const smallpoly b[L]){
 8003230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003234:	4605      	mov	r5, r0
 8003236:	460e      	mov	r6, r1
 8003238:	4617      	mov	r7, r2
 800323a:	4698      	mov	r8, r3
 800323c:	2400      	movs	r4, #0
    unsigned int i;
    for(i=0;i<L;i++){
        poly_small_basemul_invntt(&r->vec[i], a, aprime, &b[i]);
 800323e:	eb08 0304 	add.w	r3, r8, r4
 8003242:	1928      	adds	r0, r5, r4
 8003244:	463a      	mov	r2, r7
 8003246:	4631      	mov	r1, r6
    for(i=0;i<L;i++){
 8003248:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        poly_small_basemul_invntt(&r->vec[i], a, aprime, &b[i]);
 800324c:	f7ff ffdc 	bl	8003208 <poly_small_basemul_invntt>
    for(i=0;i<L;i++){
 8003250:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003254:	d1f3      	bne.n	800323e <polyvecl_small_basemul_invntt+0xe>
    }
}
 8003256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800325a <small_polyeta_unpack>:

void small_polyeta_unpack(smallpoly *r, const uint8_t *a) {
 800325a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  unsigned int i;

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 8003262:	780f      	ldrb	r7, [r1, #0]
 8003264:	f007 0707 	and.w	r7, r7, #7
 8003268:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 800326a:	780e      	ldrb	r6, [r1, #0]
 800326c:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 8003270:	6046      	str	r6, [r0, #4]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 8003272:	784b      	ldrb	r3, [r1, #1]
 8003274:	780a      	ldrb	r2, [r1, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 800327c:	f003 0207 	and.w	r2, r3, #7
 8003280:	6082      	str	r2, [r0, #8]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 8003282:	f891 e001 	ldrb.w	lr, [r1, #1]
 8003286:	f3ce 0e42 	ubfx	lr, lr, #1, #3
 800328a:	f8c0 e00c 	str.w	lr, [r0, #12]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 800328e:	f891 c001 	ldrb.w	ip, [r1, #1]
 8003292:	f3cc 1c02 	ubfx	ip, ip, #4, #3
 8003296:	f8c0 c010 	str.w	ip, [r0, #16]
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 800329a:	788b      	ldrb	r3, [r1, #2]
 800329c:	784c      	ldrb	r4, [r1, #1]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	ea43 13d4 	orr.w	r3, r3, r4, lsr #7
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 80032aa:	788c      	ldrb	r4, [r1, #2]
 80032ac:	f3c4 0482 	ubfx	r4, r4, #2, #3
 80032b0:	6184      	str	r4, [r0, #24]
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 80032b2:	f891 8002 	ldrb.w	r8, [r1, #2]

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 80032b6:	f1c2 0202 	rsb	r2, r2, #2
 80032ba:	6082      	str	r2, [r0, #8]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80032bc:	f1c3 0302 	rsb	r3, r3, #2
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 80032c0:	f1ce 0202 	rsb	r2, lr, #2
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 80032c4:	ea4f 1858 	mov.w	r8, r8, lsr #5
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 80032c8:	60c2      	str	r2, [r0, #12]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 80032ca:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 80032cc:	f1c7 0702 	rsb	r7, r7, #2
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 80032d0:	f1c6 0602 	rsb	r6, r6, #2
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 80032d4:	f1cc 0202 	rsb	r2, ip, #2
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 80032d8:	f1c4 0402 	rsb	r4, r4, #2
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 80032dc:	f1c8 0302 	rsb	r3, r8, #2
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 80032e0:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 80032e2:	6046      	str	r6, [r0, #4]
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 80032e4:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 80032e6:	6184      	str	r4, [r0, #24]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 80032e8:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < N/8; ++i) {
 80032ea:	3020      	adds	r0, #32
 80032ec:	42a8      	cmp	r0, r5
 80032ee:	f101 0103 	add.w	r1, r1, #3
 80032f2:	d1b6      	bne.n	8003262 <small_polyeta_unpack+0x8>
    r->coeffs[2*i+1] = a[i] >> 4;
    r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif
}
 80032f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032f8 <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 80032f8:	b510      	push	{r4, lr}
    size_t i;

    for (i = 0; i < 25; ++i) {
        s_inc[i] = 0;
 80032fa:	22c8      	movs	r2, #200	; 0xc8
 80032fc:	2100      	movs	r1, #0
static void keccak_inc_init(uint64_t *s_inc) {
 80032fe:	4604      	mov	r4, r0
        s_inc[i] = 0;
 8003300:	f002 f9be 	bl	8005680 <memset>
    }
    s_inc[25] = 0;
 8003304:	2200      	movs	r2, #0
 8003306:	2300      	movs	r3, #0
 8003308:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 800330c:	bd10      	pop	{r4, pc}

0800330e <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 800330e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003310:	f88d 2007 	strb.w	r2, [sp, #7]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    if(s_inc[25] == r-1){
 8003314:	e9d0 2332 	ldrd	r2, r3, [r0, #200]	; 0xc8
 8003318:	1e4d      	subs	r5, r1, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf08      	it	eq
 800331e:	42aa      	cmpeq	r2, r5
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8003320:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 8003322:	d110      	bne.n	8003346 <keccak_inc_finalize+0x38>
      p |= 128;
 8003324:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003328:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800332c:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8003330:	f10d 0107 	add.w	r1, sp, #7
 8003334:	2301      	movs	r3, #1
    } else {
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
      p = 128;
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8003336:	f000 ff0a 	bl	800414e <KeccakF1600_StateXORBytes>
    }
    s_inc[25] = 0;
 800333a:	2200      	movs	r2, #0
 800333c:	2300      	movs	r3, #0
 800333e:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 8003342:	b003      	add	sp, #12
 8003344:	bd30      	pop	{r4, r5, pc}
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8003346:	2301      	movs	r3, #1
 8003348:	f10d 0107 	add.w	r1, sp, #7
 800334c:	f000 feff 	bl	800414e <KeccakF1600_StateXORBytes>
      p = 128;
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8003356:	462a      	mov	r2, r5
 8003358:	2301      	movs	r3, #1
 800335a:	f10d 0107 	add.w	r1, sp, #7
 800335e:	4620      	mov	r0, r4
 8003360:	e7e9      	b.n	8003336 <keccak_inc_finalize+0x28>

08003362 <keccak_inc_absorb>:
                              size_t mlen) {
 8003362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003366:	4604      	mov	r4, r0
 8003368:	460f      	mov	r7, r1
 800336a:	4616      	mov	r6, r2
 800336c:	461d      	mov	r5, r3
        s_inc[25] = 0;
 800336e:	f04f 0800 	mov.w	r8, #0
 8003372:	f04f 0900 	mov.w	r9, #0
    while (mlen + s_inc[25] >= r) {
 8003376:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 800337a:	18a9      	adds	r1, r5, r2
 800337c:	f143 0300 	adc.w	r3, r3, #0
 8003380:	42b9      	cmp	r1, r7
 8003382:	f173 0300 	sbcs.w	r3, r3, #0
 8003386:	d20d      	bcs.n	80033a4 <keccak_inc_absorb+0x42>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8003388:	462b      	mov	r3, r5
 800338a:	4631      	mov	r1, r6
 800338c:	4620      	mov	r0, r4
 800338e:	f000 fede 	bl	800414e <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8003392:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 8003396:	195b      	adds	r3, r3, r5
 8003398:	f142 0200 	adc.w	r2, r2, #0
 800339c:	e9c4 3232 	strd	r3, r2, [r4, #200]	; 0xc8
}
 80033a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 80033a4:	1abb      	subs	r3, r7, r2
 80033a6:	4631      	mov	r1, r6
 80033a8:	4620      	mov	r0, r4
 80033aa:	f000 fed0 	bl	800414e <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 80033ae:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
        KeccakF1600_StatePermute(s_inc);
 80033b2:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 80033b4:	1bda      	subs	r2, r3, r7
        s_inc[25] = 0;
 80033b6:	e9c4 8932 	strd	r8, r9, [r4, #200]	; 0xc8
        m += r - s_inc[25];
 80033ba:	1afb      	subs	r3, r7, r3
        mlen -= (size_t)(r - s_inc[25]);
 80033bc:	4415      	add	r5, r2
        m += r - s_inc[25];
 80033be:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 80033c0:	f000 feec 	bl	800419c <KeccakF1600_StatePermute>
 80033c4:	e7d7      	b.n	8003376 <keccak_inc_absorb+0x14>

080033c6 <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 80033c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ca:	4614      	mov	r4, r2
 80033cc:	4698      	mov	r8, r3
    size_t len;
    if(outlen < s_inc[25])
 80033ce:	e9d2 2332 	ldrd	r2, r3, [r2, #200]	; 0xc8
                               uint64_t *s_inc, uint32_t r) {
 80033d2:	460d      	mov	r5, r1
    if(outlen < s_inc[25])
 80033d4:	4291      	cmp	r1, r2
 80033d6:	f04f 0100 	mov.w	r1, #0
 80033da:	eb71 0303 	sbcs.w	r3, r1, r3
    {
        len = outlen;
    }
    else
    {
        len = s_inc[25];
 80033de:	bf2c      	ite	cs
 80033e0:	4616      	movcs	r6, r2
        len = outlen;
 80033e2:	462e      	movcc	r6, r5
                               uint64_t *s_inc, uint32_t r) {
 80033e4:	4607      	mov	r7, r0
    }

    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80033e6:	4633      	mov	r3, r6
 80033e8:	eba8 0202 	sub.w	r2, r8, r2
 80033ec:	4601      	mov	r1, r0
 80033ee:	4620      	mov	r0, r4
 80033f0:	f000 fe8c 	bl	800410c <KeccakF1600_StateExtractBytes>
    h += len;
    outlen -= len;
    s_inc[25] -= len;
 80033f4:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 80033f8:	1b9b      	subs	r3, r3, r6
 80033fa:	f162 0200 	sbc.w	r2, r2, #0
 80033fe:	e9c4 3232 	strd	r3, r2, [r4, #200]	; 0xc8
    h += len;
 8003402:	4437      	add	r7, r6
    outlen -= len;
 8003404:	1bad      	subs	r5, r5, r6
        }
        else
        {
            len = r;
        }
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8003406:	f04f 0900 	mov.w	r9, #0
    while (outlen > 0) {
 800340a:	b90d      	cbnz	r5, 8003410 <keccak_inc_squeeze+0x4a>
        h += len;
        outlen -= len;
        s_inc[25] = r - len;
    }
}
 800340c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KeccakF1600_StatePermute(s_inc);
 8003410:	4620      	mov	r0, r4
 8003412:	f000 fec3 	bl	800419c <KeccakF1600_StatePermute>
        if(outlen < r)
 8003416:	4545      	cmp	r5, r8
 8003418:	462e      	mov	r6, r5
 800341a:	bf28      	it	cs
 800341c:	4646      	movcs	r6, r8
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 800341e:	4633      	mov	r3, r6
 8003420:	4639      	mov	r1, r7
 8003422:	2200      	movs	r2, #0
 8003424:	4620      	mov	r0, r4
        h += len;
 8003426:	4437      	add	r7, r6
        outlen -= len;
 8003428:	1bad      	subs	r5, r5, r6
        s_inc[25] = r - len;
 800342a:	eba8 0606 	sub.w	r6, r8, r6
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 800342e:	f000 fe6d 	bl	800410c <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8003432:	e9c4 6932 	strd	r6, r9, [r4, #200]	; 0xc8
 8003436:	e7e8      	b.n	800340a <keccak_inc_squeeze+0x44>

08003438 <shake128_inc_init>:

void shake128_inc_init(shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 8003438:	f7ff bf5e 	b.w	80032f8 <keccak_inc_init>

0800343c <shake128_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 800343c:	4613      	mov	r3, r2
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 800343e:	460a      	mov	r2, r1
 8003440:	21a8      	movs	r1, #168	; 0xa8
 8003442:	f7ff bf8e 	b.w	8003362 <keccak_inc_absorb>

08003446 <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 8003446:	221f      	movs	r2, #31
 8003448:	21a8      	movs	r1, #168	; 0xa8
 800344a:	f7ff bf60 	b.w	800330e <keccak_inc_finalize>

0800344e <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 800344e:	23a8      	movs	r3, #168	; 0xa8
 8003450:	f7ff bfb9 	b.w	80033c6 <keccak_inc_squeeze>

08003454 <shake256_inc_init>:

void shake256_inc_init(shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 8003454:	f7ff bf50 	b.w	80032f8 <keccak_inc_init>

08003458 <shake256_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8003458:	4613      	mov	r3, r2
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 800345a:	460a      	mov	r2, r1
 800345c:	2188      	movs	r1, #136	; 0x88
 800345e:	f7ff bf80 	b.w	8003362 <keccak_inc_absorb>

08003462 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8003462:	221f      	movs	r2, #31
 8003464:	2188      	movs	r1, #136	; 0x88
 8003466:	f7ff bf52 	b.w	800330e <keccak_inc_finalize>

0800346a <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 800346a:	2388      	movs	r3, #136	; 0x88
 800346c:	f7ff bfab 	b.w	80033c6 <keccak_inc_squeeze>

08003470 <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b0b5      	sub	sp, #212	; 0xd4
 8003474:	4604      	mov	r4, r0
 8003476:	4616      	mov	r6, r2
 8003478:	461f      	mov	r7, r3
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
  shake256incctx state;

  keccak_inc_init(state.ctx);
 800347a:	4668      	mov	r0, sp
{
 800347c:	460d      	mov	r5, r1
  keccak_inc_init(state.ctx);
 800347e:	f7ff ff3b 	bl	80032f8 <keccak_inc_init>

  /* Absorb input */
  keccak_inc_absorb(state.ctx, SHAKE256_RATE, input, inlen);
 8003482:	463b      	mov	r3, r7
 8003484:	4632      	mov	r2, r6
 8003486:	4668      	mov	r0, sp
 8003488:	2188      	movs	r1, #136	; 0x88
 800348a:	f7ff ff6a 	bl	8003362 <keccak_inc_absorb>
  keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x1F);
 800348e:	4668      	mov	r0, sp
 8003490:	221f      	movs	r2, #31
 8003492:	2188      	movs	r1, #136	; 0x88
 8003494:	f7ff ff3b 	bl	800330e <keccak_inc_finalize>

  /* Squeeze output */
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 8003498:	2388      	movs	r3, #136	; 0x88
 800349a:	466a      	mov	r2, sp
 800349c:	4629      	mov	r1, r5
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff ff91 	bl	80033c6 <keccak_inc_squeeze>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80034a4:	b035      	add	sp, #212	; 0xd4
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034a8 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 80034a8:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80034aa:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 80034ac:	2000      	movs	r0, #0
	while (len--) {
 80034ae:	428b      	cmp	r3, r1
 80034b0:	d100      	bne.n	80034b4 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 80034b2:	4770      	bx	lr
		crc ^= *buf++;
 80034b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034b8:	4050      	eors	r0, r2
 80034ba:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80034bc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80034c0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80034c4:	bf18      	it	ne
 80034c6:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 80034ca:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80034cc:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 80034ce:	d1f5      	bne.n	80034bc <ss_crc+0x14>
 80034d0:	e7ed      	b.n	80034ae <ss_crc+0x6>

080034d2 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 80034d2:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 80034d4:	2200      	movs	r2, #0
 80034d6:	4604      	mov	r4, r0
	uint8_t i = 1;
 80034d8:	2301      	movs	r3, #1
	for (; i < len; i++) {
 80034da:	428b      	cmp	r3, r1
 80034dc:	d301      	bcc.n	80034e2 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 80034de:	2000      	movs	r0, #0
 80034e0:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80034e2:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80034e6:	b915      	cbnz	r5, 80034ee <stuff_data+0x1c>
			buf[last] = i - last;
 80034e8:	1a9d      	subs	r5, r3, r2
 80034ea:	5485      	strb	r5, [r0, r2]
 80034ec:	461a      	mov	r2, r3
	for (; i < len; i++) {
 80034ee:	3301      	adds	r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e7f2      	b.n	80034da <stuff_data+0x8>

080034f4 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80034f4:	b510      	push	{r4, lr}
	uint8_t next = buf[0]; // 取距离
 80034f6:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00; // 恢复
 80034f8:	2400      	movs	r4, #0
{
 80034fa:	4603      	mov	r3, r0
	buf[0] = 0x00; // 恢复
 80034fc:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0]; // 取距离
 80034fe:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8003500:	4288      	cmp	r0, r1
 8003502:	d200      	bcs.n	8003506 <unstuff_data+0x12>
 8003504:	b902      	cbnz	r2, 8003508 <unstuff_data+0x14>
		tmp = buf[next]; // 取距离
		buf[next] = FRAME_BYTE; // 恢复
		next += tmp; // 记录当前位置
	}
	return next;
}
 8003506:	bd10      	pop	{r4, pc}
		tmp = buf[next]; // 取距离
 8003508:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE; // 恢复
 800350a:	541c      	strb	r4, [r3, r0]
		next += tmp; // 记录当前位置
 800350c:	4410      	add	r0, r2
 800350e:	b2c0      	uxtb	r0, r0
 8003510:	e7f6      	b.n	8003500 <unstuff_data+0xc>

08003512 <simpleserial_init>:
// This just adds the "v" command for now...
void simpleserial_init()
{
	// simpleserial_addcmd('v', 0, check_version);
 //    simpleserial_addcmd('w', 0, ss_get_commands);
}
 8003512:	4770      	bx	lr

08003514 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8003514:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8003516:	4d0c      	ldr	r5, [pc, #48]	; (8003548 <simpleserial_addcmd+0x34>)
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	2b7f      	cmp	r3, #127	; 0x7f
 800351c:	dd04      	ble.n	8003528 <simpleserial_addcmd+0x14>
		putch('a');
 800351e:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8003520:	f000 f980 	bl	8003824 <putch>
		return 1;
 8003524:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8003526:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8003528:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800352c:	d301      	bcc.n	8003532 <simpleserial_addcmd+0x1e>
		putch('b');
 800352e:	2062      	movs	r0, #98	; 0x62
 8003530:	e7f6      	b.n	8003520 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8003532:	240c      	movs	r4, #12
 8003534:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8003538:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 800353a:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 800353c:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8003540:	602b      	str	r3, [r5, #0]
	return 0;
 8003542:	2000      	movs	r0, #0
 8003544:	e7ef      	b.n	8003526 <simpleserial_addcmd+0x12>
 8003546:	bf00      	nop
 8003548:	10000860 	.word	0x10000860

0800354c <simpleserial_put>:
	simpleserial_put('e', 0x05, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003552:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8003554:	2500      	movs	r5, #0
{
 8003556:	4611      	mov	r1, r2
	data_buf[1] = c;
 8003558:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 800355c:	4622      	mov	r2, r4
 800355e:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8003562:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8003566:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 800356a:	f7fe fcbf 	bl	8001eec <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 800356e:	1ca1      	adds	r1, r4, #2
 8003570:	b2c9      	uxtb	r1, r1
 8003572:	f10d 0001 	add.w	r0, sp, #1
 8003576:	f7ff ff97 	bl	80034a8 <ss_crc>
 800357a:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 800357e:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8003580:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003582:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8003584:	b2c9      	uxtb	r1, r1
 8003586:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8003588:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 800358c:	f7ff ffa1 	bl	80034d2 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8003590:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8003592:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8003596:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8003598:	f000 f944 	bl	8003824 <putch>
	for (int i = 0; i < size + 5; i++) {
 800359c:	42ae      	cmp	r6, r5
 800359e:	daf8      	bge.n	8003592 <simpleserial_put+0x46>
	}
}
 80035a0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
 80035a6:	0000      	movs	r0, r0

080035a8 <simpleserial_get>:
{
 80035a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035ac:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	uint8_t err = 0;
 80035b0:	2500      	movs	r5, #0
 80035b2:	ae02      	add	r6, sp, #8
 80035b4:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80035b8:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80035ba:	f000 f921 	bl	8003800 <getch>
 80035be:	b2c0      	uxtb	r0, r0
 80035c0:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {  //如果data_buf[i] == 0x00
 80035c4:	b960      	cbnz	r0, 80035e0 <simpleserial_get+0x38>
			err = SS_ERR_FRAME_BYTE;
 80035c6:	2305      	movs	r3, #5
        err = 7;
 80035c8:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x05, &err);
 80035cc:	f10d 0207 	add.w	r2, sp, #7
 80035d0:	2105      	movs	r1, #5
 80035d2:	2065      	movs	r0, #101	; 0x65
 80035d4:	f7ff ffba 	bl	800354c <simpleserial_put>
}
 80035d8:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 80035e0:	3501      	adds	r5, #1
 80035e2:	2d04      	cmp	r5, #4
 80035e4:	d1e9      	bne.n	80035ba <simpleserial_get+0x12>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80035e6:	4629      	mov	r1, r5
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7ff ff83 	bl	80034f4 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 80035ee:	4f28      	ldr	r7, [pc, #160]	; (8003690 <simpleserial_get+0xe8>)
		if(commands[c].c == data_buf[1])
 80035f0:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 80035f2:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80035f4:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 80035f6:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 80035f8:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 80035fa:	fa5f f983 	uxtb.w	r9, r3
 80035fe:	4591      	cmp	r9, r2
 8003600:	db02      	blt.n	8003608 <simpleserial_get+0x60>
	if (c == num_commands) {
 8003602:	d107      	bne.n	8003614 <simpleserial_get+0x6c>
        err = 7;
 8003604:	2307      	movs	r3, #7
 8003606:	e7df      	b.n	80035c8 <simpleserial_get+0x20>
		if(commands[c].c == data_buf[1])
 8003608:	fb00 7609 	mla	r6, r0, r9, r7
 800360c:	3301      	adds	r3, #1
 800360e:	7936      	ldrb	r6, [r6, #4]
 8003610:	428e      	cmp	r6, r1
 8003612:	d1f2      	bne.n	80035fa <simpleserial_get+0x52>
	if ((data_buf[3] + 5) < next_frame) {
 8003614:	78e3      	ldrb	r3, [r4, #3]
 8003616:	3305      	adds	r3, #5
 8003618:	4543      	cmp	r3, r8
 800361a:	da02      	bge.n	8003622 <simpleserial_get+0x7a>
        err = 11;
 800361c:	230b      	movs	r3, #11
 800361e:	e7d3      	b.n	80035c8 <simpleserial_get+0x20>
 8003620:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8003622:	f000 f8ed 	bl	8003800 <getch>
 8003626:	b2c0      	uxtb	r0, r0
 8003628:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 800362a:	b908      	cbnz	r0, 8003630 <simpleserial_get+0x88>
            err = 12;
 800362c:	230c      	movs	r3, #12
 800362e:	e7cb      	b.n	80035c8 <simpleserial_get+0x20>
	for (; i < data_buf[3] + 5; i++) {
 8003630:	78e3      	ldrb	r3, [r4, #3]
 8003632:	1c6e      	adds	r6, r5, #1
 8003634:	3304      	adds	r3, #4
 8003636:	42b3      	cmp	r3, r6
 8003638:	daf2      	bge.n	8003620 <simpleserial_get+0x78>
	data_buf[i] = getch();
 800363a:	f000 f8e1 	bl	8003800 <getch>
 800363e:	b2c0      	uxtb	r0, r0
 8003640:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8003642:	b108      	cbz	r0, 8003648 <simpleserial_get+0xa0>
        err = 13;
 8003644:	230d      	movs	r3, #13
 8003646:	e7bf      	b.n	80035c8 <simpleserial_get+0x20>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8003648:	f1c8 0101 	rsb	r1, r8, #1
 800364c:	fa51 f186 	uxtab	r1, r1, r6
 8003650:	b2c9      	uxtb	r1, r1
 8003652:	fa5f fa86 	uxtb.w	sl, r6
 8003656:	eb04 0008 	add.w	r0, r4, r8
 800365a:	f7ff ff4b 	bl	80034f4 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 800365e:	f1aa 0102 	sub.w	r1, sl, #2
 8003662:	b2c9      	uxtb	r1, r1
 8003664:	f10d 0009 	add.w	r0, sp, #9
 8003668:	f7ff ff1e 	bl	80034a8 <ss_crc>
	if (crc != data_buf[i-1]) {
 800366c:	5d63      	ldrb	r3, [r4, r5]
 800366e:	4283      	cmp	r3, r0
 8003670:	d001      	beq.n	8003676 <simpleserial_get+0xce>
        err = 14;
 8003672:	230e      	movs	r3, #14
 8003674:	e7a8      	b.n	80035c8 <simpleserial_get+0x20>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8003676:	230c      	movs	r3, #12
 8003678:	fb03 7709 	mla	r7, r3, r9, r7
 800367c:	78e2      	ldrb	r2, [r4, #3]
 800367e:	68fd      	ldr	r5, [r7, #12]
 8003680:	78a1      	ldrb	r1, [r4, #2]
 8003682:	7860      	ldrb	r0, [r4, #1]
 8003684:	446b      	add	r3, sp
 8003686:	47a8      	blx	r5
 8003688:	f88d 0007 	strb.w	r0, [sp, #7]
 800368c:	e79e      	b.n	80035cc <simpleserial_get+0x24>
 800368e:	bf00      	nop
 8003690:	10000860 	.word	0x10000860

08003694 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 8003694:	b530      	push	{r4, r5, lr}
	//HAL_Init();

#ifdef STM32F4FPU
     /* set CP10 and CP11 Full Access */
     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); // SCB->CPACR |= 0x00f00000;
 8003696:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <platform_init+0x80>)
 8003698:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800369c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
{
 80036a4:	b093      	sub	sp, #76	; 0x4c
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80036a6:	2203      	movs	r2, #3
 80036a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80036ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80036b0:	2102      	movs	r1, #2
 80036b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036b6:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 80036ba:	200c      	movs	r0, #12
 80036bc:	23c4      	movs	r3, #196	; 0xc4
 80036be:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80036c2:	2404      	movs	r4, #4
 80036c4:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 80036c6:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80036c8:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 80036ca:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 80036ce:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80036d0:	f000 f8c0 	bl	8003854 <HAL_RCC_OscConfig>
 80036d4:	4604      	mov	r4, r0
 80036d6:	b100      	cbz	r0, 80036da <platform_init+0x46>
        for(;;);
 80036d8:	e7fe      	b.n	80036d8 <platform_init+0x44>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80036da:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036dc:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80036e0:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e2:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80036e4:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80036e6:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 80036ea:	f000 fa53 	bl	8003b94 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <platform_init+0x84>)
 80036f0:	9400      	str	r4, [sp, #0]
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 80036f4:	4809      	ldr	r0, [pc, #36]	; (800371c <platform_init+0x88>)
	__HAL_RCC_RNG_CLK_ENABLE();
 80036f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fa:	635a      	str	r2, [r3, #52]	; 0x34
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <platform_init+0x8c>)
 8003708:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 800370a:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 800370c:	f000 fce1 	bl	80040d2 <HAL_RNG_Init>

}
 8003710:	b013      	add	sp, #76	; 0x4c
 8003712:	bd30      	pop	{r4, r5, pc}
 8003714:	e000ed00 	.word	0xe000ed00
 8003718:	40023800 	.word	0x40023800
 800371c:	10000e64 	.word	0x10000e64
 8003720:	50060800 	.word	0x50060800

08003724 <init_uart>:

void init_uart(void)
{
 8003724:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
{
 8003728:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800372a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800372e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 8003732:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003734:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 8003738:	4c15      	ldr	r4, [pc, #84]	; (8003790 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800373a:	4816      	ldr	r0, [pc, #88]	; (8003794 <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 800373c:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 800373e:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 8003740:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8003742:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8003744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003746:	4313      	orrs	r3, r2
 8003748:	6323      	str	r3, [r4, #48]	; 0x30
 800374a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800374c:	4013      	ands	r3, r2
 800374e:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003750:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 8003752:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8003754:	f000 fab6 	bl	8003cc4 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8003758:	480f      	ldr	r0, [pc, #60]	; (8003798 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 800375a:	4910      	ldr	r1, [pc, #64]	; (800379c <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 800375c:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 230400;
 800375e:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8003762:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8003766:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800376a:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800376c:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800376e:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003770:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 8003772:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003774:	f043 0310 	orr.w	r3, r3, #16
 8003778:	6463      	str	r3, [r4, #68]	; 0x44
 800377a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8003782:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 8003784:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8003786:	f000 fb89 	bl	8003e9c <HAL_UART_Init>
}
 800378a:	b009      	add	sp, #36	; 0x24
 800378c:	bd30      	pop	{r4, r5, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40020000 	.word	0x40020000
 8003798:	10000e64 	.word	0x10000e64
 800379c:	40011000 	.word	0x40011000

080037a0 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 80037a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 80037a2:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 80037a6:	2100      	movs	r1, #0
 80037a8:	9100      	str	r1, [sp, #0]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 80037b4:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80037be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037c2:	2301      	movs	r3, #1
 80037c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80037c8:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80037ca:	2302      	movs	r3, #2
 80037cc:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80037ce:	f000 fa79 	bl	8003cc4 <HAL_GPIO_Init>
#endif
}
 80037d2:	b007      	add	sp, #28
 80037d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40020000 	.word	0x40020000

080037e0 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <trigger_high+0xc>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037e8:	f000 bb52 	b.w	8003e90 <HAL_GPIO_WritePin>
 80037ec:	40020000 	.word	0x40020000

080037f0 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <trigger_low+0xc>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037f8:	f000 bb4a 	b.w	8003e90 <HAL_GPIO_WritePin>
 80037fc:	40020000 	.word	0x40020000

08003800 <getch>:
#endif
}
char getch(void)
{
 8003800:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8003802:	4c07      	ldr	r4, [pc, #28]	; (8003820 <getch+0x20>)
 8003804:	f241 3388 	movw	r3, #5000	; 0x1388
 8003808:	2201      	movs	r2, #1
 800380a:	f10d 0107 	add.w	r1, sp, #7
 800380e:	4620      	mov	r0, r4
 8003810:	f000 fbf7 	bl	8004002 <HAL_UART_Receive>
 8003814:	2800      	cmp	r0, #0
 8003816:	d1f5      	bne.n	8003804 <getch+0x4>
	return d;
}
 8003818:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800381c:	b002      	add	sp, #8
 800381e:	bd10      	pop	{r4, pc}
 8003820:	10000e70 	.word	0x10000e70

08003824 <putch>:

void putch(char c)
{
 8003824:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003826:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 800382a:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800382e:	2201      	movs	r2, #1
 8003830:	f10d 0107 	add.w	r1, sp, #7
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <putch+0x1c>)
 8003836:	f000 fb9f 	bl	8003f78 <HAL_UART_Transmit>
}
 800383a:	b003      	add	sp, #12
 800383c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003840:	10000e70 	.word	0x10000e70

08003844 <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8003844:	4b02      	ldr	r3, [pc, #8]	; (8003850 <HAL_GetTick+0xc>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	1c42      	adds	r2, r0, #1
 800384a:	601a      	str	r2, [r3, #0]
}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	10000f00 	.word	0x10000f00

08003854 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003854:	6803      	ldr	r3, [r0, #0]
{
 8003856:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003858:	07de      	lsls	r6, r3, #31
{
 800385a:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385c:	d43b      	bmi.n	80038d6 <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	680b      	ldr	r3, [r1, #0]
 8003860:	079d      	lsls	r5, r3, #30
 8003862:	f100 808b 	bmi.w	800397c <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	680b      	ldr	r3, [r1, #0]
 8003868:	0718      	lsls	r0, r3, #28
 800386a:	f100 80d6 	bmi.w	8003a1a <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386e:	680b      	ldr	r3, [r1, #0]
 8003870:	075a      	lsls	r2, r3, #29
 8003872:	d52a      	bpl.n	80038ca <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	2300      	movs	r3, #0
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	4b91      	ldr	r3, [pc, #580]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800387a:	4c92      	ldr	r4, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800387c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8003896:	f7ff ffd5 	bl	8003844 <HAL_GetTick>
 800389a:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	05d8      	lsls	r0, r3, #23
 80038a0:	f140 80df 	bpl.w	8003a62 <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	688b      	ldr	r3, [r1, #8]
 80038a6:	4c86      	ldr	r4, [pc, #536]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	f040 80e1 	bne.w	8003a70 <HAL_RCC_OscConfig+0x21c>
 80038ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80038b0:	f043 0301 	orr.w	r3, r3, #1
 80038b4:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7ff ffc5 	bl	8003844 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4d81      	ldr	r5, [pc, #516]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80038bc:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038c4:	079a      	lsls	r2, r3, #30
 80038c6:	f140 80f4 	bpl.w	8003ab2 <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ca:	698a      	ldr	r2, [r1, #24]
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	f040 80ff 	bne.w	8003ad0 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80038d2:	2000      	movs	r0, #0
 80038d4:	e015      	b.n	8003902 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d6:	4b7a      	ldr	r3, [pc, #488]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	f002 020c 	and.w	r2, r2, #12
 80038de:	2a04      	cmp	r2, #4
 80038e0:	d007      	beq.n	80038f2 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e8:	2a08      	cmp	r2, #8
 80038ea:	d10c      	bne.n	8003906 <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	0254      	lsls	r4, r2, #9
 80038f0:	d509      	bpl.n	8003906 <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f2:	4b73      	ldr	r3, [pc, #460]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	0398      	lsls	r0, r3, #14
 80038f8:	d5b1      	bpl.n	800385e <HAL_RCC_OscConfig+0xa>
 80038fa:	684b      	ldr	r3, [r1, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ae      	bne.n	800385e <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8003900:	2001      	movs	r0, #1
}
 8003902:	b002      	add	sp, #8
 8003904:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003906:	684a      	ldr	r2, [r1, #4]
 8003908:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800390c:	d112      	bne.n	8003934 <HAL_RCC_OscConfig+0xe0>
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003914:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003916:	f7ff ff95 	bl	8003844 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4d69      	ldr	r5, [pc, #420]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800391c:	4e6a      	ldr	r6, [pc, #424]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800391e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	039a      	lsls	r2, r3, #14
 8003924:	d49b      	bmi.n	800385e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003926:	f7ff ff8d 	bl	8003844 <HAL_GetTick>
 800392a:	1b00      	subs	r0, r0, r4
 800392c:	42b0      	cmp	r0, r6
 800392e:	d9f7      	bls.n	8003920 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003930:	2003      	movs	r0, #3
 8003932:	e7e6      	b.n	8003902 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003934:	4c62      	ldr	r4, [pc, #392]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	d107      	bne.n	800394e <HAL_RCC_OscConfig+0xfa>
 800393e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800394c:	e7e3      	b.n	8003916 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	2a00      	cmp	r2, #0
 800395e:	d1da      	bne.n	8003916 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003960:	f7ff ff70 	bl	8003844 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003964:	4e58      	ldr	r6, [pc, #352]	; (8003ac8 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8003966:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	039b      	lsls	r3, r3, #14
 800396c:	f57f af77 	bpl.w	800385e <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7ff ff68 	bl	8003844 <HAL_GetTick>
 8003974:	1b40      	subs	r0, r0, r5
 8003976:	42b0      	cmp	r0, r6
 8003978:	d9f6      	bls.n	8003968 <HAL_RCC_OscConfig+0x114>
 800397a:	e7d9      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397c:	4b50      	ldr	r3, [pc, #320]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	f012 0f0c 	tst.w	r2, #12
 8003984:	d007      	beq.n	8003996 <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398c:	2a08      	cmp	r2, #8
 800398e:	d116      	bne.n	80039be <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0258      	lsls	r0, r3, #9
 8003994:	d413      	bmi.n	80039be <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	484a      	ldr	r0, [pc, #296]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
 8003998:	6803      	ldr	r3, [r0, #0]
 800399a:	079a      	lsls	r2, r3, #30
 800399c:	d502      	bpl.n	80039a4 <HAL_RCC_OscConfig+0x150>
 800399e:	68cb      	ldr	r3, [r1, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d1ad      	bne.n	8003900 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	23f8      	movs	r3, #248	; 0xf8
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	fab3 f283 	clz	r2, r3
 80039b0:	690b      	ldr	r3, [r1, #16]
 80039b2:	4093      	lsls	r3, r2
 80039b4:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 80039b8:	4313      	orrs	r3, r2
 80039ba:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039bc:	e753      	b.n	8003866 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039be:	68ca      	ldr	r2, [r1, #12]
 80039c0:	4b42      	ldr	r3, [pc, #264]	; (8003acc <HAL_RCC_OscConfig+0x278>)
 80039c2:	b1da      	cbz	r2, 80039fc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80039c4:	2201      	movs	r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039c8:	f7ff ff3c 	bl	8003844 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	4c3c      	ldr	r4, [pc, #240]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80039ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	079b      	lsls	r3, r3, #30
 80039d4:	d50c      	bpl.n	80039f0 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	23f8      	movs	r3, #248	; 0xf8
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	fab3 f283 	clz	r2, r3
 80039e2:	690b      	ldr	r3, [r1, #16]
 80039e4:	4093      	lsls	r3, r2
 80039e6:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80039ea:	4313      	orrs	r3, r2
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	e73a      	b.n	8003866 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f0:	f7ff ff28 	bl	8003844 <HAL_GetTick>
 80039f4:	1b40      	subs	r0, r0, r5
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d9ea      	bls.n	80039d0 <HAL_RCC_OscConfig+0x17c>
 80039fa:	e799      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80039fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039fe:	f7ff ff21 	bl	8003844 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4d2f      	ldr	r5, [pc, #188]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8003a04:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	079e      	lsls	r6, r3, #30
 8003a0a:	f57f af2c 	bpl.w	8003866 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7ff ff19 	bl	8003844 <HAL_GetTick>
 8003a12:	1b00      	subs	r0, r0, r4
 8003a14:	2802      	cmp	r0, #2
 8003a16:	d9f6      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1b2>
 8003a18:	e78a      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a1a:	694a      	ldr	r2, [r1, #20]
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_OscConfig+0x278>)
 8003a1e:	b182      	cbz	r2, 8003a42 <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 8003a20:	2201      	movs	r2, #1
 8003a22:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003a26:	f7ff ff0d 	bl	8003844 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2a:	4d25      	ldr	r5, [pc, #148]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8003a2c:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a30:	079b      	lsls	r3, r3, #30
 8003a32:	f53f af1c 	bmi.w	800386e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a36:	f7ff ff05 	bl	8003844 <HAL_GetTick>
 8003a3a:	1b00      	subs	r0, r0, r4
 8003a3c:	2802      	cmp	r0, #2
 8003a3e:	d9f6      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1da>
 8003a40:	e776      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 8003a42:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003a46:	f7ff fefd 	bl	8003844 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4a:	4d1d      	ldr	r5, [pc, #116]	; (8003ac0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8003a4c:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a4e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003a50:	079e      	lsls	r6, r3, #30
 8003a52:	f57f af0c 	bpl.w	800386e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a56:	f7ff fef5 	bl	8003844 <HAL_GetTick>
 8003a5a:	1b00      	subs	r0, r0, r4
 8003a5c:	2802      	cmp	r0, #2
 8003a5e:	d9f6      	bls.n	8003a4e <HAL_RCC_OscConfig+0x1fa>
 8003a60:	e766      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7ff feef 	bl	8003844 <HAL_GetTick>
 8003a66:	1b40      	subs	r0, r0, r5
 8003a68:	2802      	cmp	r0, #2
 8003a6a:	f67f af17 	bls.w	800389c <HAL_RCC_OscConfig+0x48>
 8003a6e:	e75f      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d104      	bne.n	8003a7e <HAL_RCC_OscConfig+0x22a>
 8003a74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	6723      	str	r3, [r4, #112]	; 0x70
 8003a7c:	e717      	b.n	80038ae <HAL_RCC_OscConfig+0x5a>
 8003a7e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	6722      	str	r2, [r4, #112]	; 0x70
 8003a86:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8003a88:	f022 0204 	bic.w	r2, r2, #4
 8003a8c:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f47f af11 	bne.w	80038b6 <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8003a94:	f7ff fed6 	bl	8003844 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a9c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003aa0:	079b      	lsls	r3, r3, #30
 8003aa2:	f57f af12 	bpl.w	80038ca <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7ff fecd 	bl	8003844 <HAL_GetTick>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	42b0      	cmp	r0, r6
 8003aae:	d9f6      	bls.n	8003a9e <HAL_RCC_OscConfig+0x24a>
 8003ab0:	e73e      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7ff fec7 	bl	8003844 <HAL_GetTick>
 8003ab6:	1b00      	subs	r0, r0, r4
 8003ab8:	42b0      	cmp	r0, r6
 8003aba:	f67f af02 	bls.w	80038c2 <HAL_RCC_OscConfig+0x6e>
 8003abe:	e737      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	05f5e100 	.word	0x05f5e100
 8003acc:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad0:	4c2d      	ldr	r4, [pc, #180]	; (8003b88 <HAL_RCC_OscConfig+0x334>)
 8003ad2:	68a3      	ldr	r3, [r4, #8]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	f43f af11 	beq.w	8003900 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ade:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <HAL_RCC_OscConfig+0x338>)
 8003ae0:	2a02      	cmp	r2, #2
 8003ae2:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae8:	d140      	bne.n	8003b6c <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 8003aea:	f7ff feab 	bl	8003844 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aee:	4e28      	ldr	r6, [pc, #160]	; (8003b90 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8003af0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	0198      	lsls	r0, r3, #6
 8003af6:	d433      	bmi.n	8003b60 <HAL_RCC_OscConfig+0x30c>
 8003af8:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8003afc:	fa96 f6a6 	rbit	r6, r6
 8003b00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b04:	fab6 f686 	clz	r6, r6
 8003b08:	fa92 f2a2 	rbit	r2, r2
 8003b0c:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8003b10:	fab2 f582 	clz	r5, r2
 8003b14:	fa90 f0a0 	rbit	r0, r0
 8003b18:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003b20:	40b2      	lsls	r2, r6
 8003b22:	4313      	orrs	r3, r2
 8003b24:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	40aa      	lsls	r2, r5
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b30:	4d17      	ldr	r5, [pc, #92]	; (8003b90 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b32:	fab0 f080 	clz	r0, r0
 8003b36:	fa02 f000 	lsl.w	r0, r2, r0
 8003b3a:	4303      	orrs	r3, r0
 8003b3c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b40:	4c11      	ldr	r4, [pc, #68]	; (8003b88 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 8003b42:	2201      	movs	r2, #1
 8003b44:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b46:	f7ff fe7d 	bl	8003844 <HAL_GetTick>
 8003b4a:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	019a      	lsls	r2, r3, #6
 8003b50:	f53f aebf 	bmi.w	80038d2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b54:	f7ff fe76 	bl	8003844 <HAL_GetTick>
 8003b58:	1a40      	subs	r0, r0, r1
 8003b5a:	42a8      	cmp	r0, r5
 8003b5c:	d9f6      	bls.n	8003b4c <HAL_RCC_OscConfig+0x2f8>
 8003b5e:	e6e7      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b60:	f7ff fe70 	bl	8003844 <HAL_GetTick>
 8003b64:	1b40      	subs	r0, r0, r5
 8003b66:	42b0      	cmp	r0, r6
 8003b68:	d9c3      	bls.n	8003af2 <HAL_RCC_OscConfig+0x29e>
 8003b6a:	e6e1      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8003b6c:	f7ff fe6a 	bl	8003844 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b70:	4d07      	ldr	r5, [pc, #28]	; (8003b90 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8003b72:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	f57f aeab 	bpl.w	80038d2 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7ff fe62 	bl	8003844 <HAL_GetTick>
 8003b80:	1a40      	subs	r0, r0, r1
 8003b82:	42a8      	cmp	r0, r5
 8003b84:	d9f6      	bls.n	8003b74 <HAL_RCC_OscConfig+0x320>
 8003b86:	e6d3      	b.n	8003930 <HAL_RCC_OscConfig+0xdc>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	42470000 	.word	0x42470000
 8003b90:	001e8480 	.word	0x001e8480

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003b96:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <HAL_RCC_ClockConfig+0x128>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f002 020f 	and.w	r2, r2, #15
 8003b9e:	428a      	cmp	r2, r1
{
 8003ba0:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003ba2:	d31a      	bcc.n	8003bda <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	0790      	lsls	r0, r2, #30
 8003ba8:	d420      	bmi.n	8003bec <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003baa:	07d2      	lsls	r2, r2, #31
 8003bac:	d426      	bmi.n	8003bfc <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003bae:	4b43      	ldr	r3, [pc, #268]	; (8003cbc <HAL_RCC_ClockConfig+0x128>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f002 020f 	and.w	r2, r2, #15
 8003bb6:	428a      	cmp	r2, r1
 8003bb8:	d870      	bhi.n	8003c9c <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	0743      	lsls	r3, r0, #29
 8003bbe:	d475      	bmi.n	8003cac <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc0:	f010 0008 	ands.w	r0, r0, #8
 8003bc4:	d011      	beq.n	8003bea <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4a3e      	ldr	r2, [pc, #248]	; (8003cc0 <HAL_RCC_ClockConfig+0x12c>)
 8003bc8:	6921      	ldr	r1, [r4, #16]
 8003bca:	6893      	ldr	r3, [r2, #8]
 8003bcc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003bd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bd4:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e007      	b.n	8003bea <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	b2ca      	uxtb	r2, r1
 8003bdc:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	428b      	cmp	r3, r1
 8003be6:	d0dd      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8003be8:	2001      	movs	r0, #1
}
 8003bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4834      	ldr	r0, [pc, #208]	; (8003cc0 <HAL_RCC_ClockConfig+0x12c>)
 8003bee:	68a5      	ldr	r5, [r4, #8]
 8003bf0:	6883      	ldr	r3, [r0, #8]
 8003bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf6:	432b      	orrs	r3, r5
 8003bf8:	6083      	str	r3, [r0, #8]
 8003bfa:	e7d6      	b.n	8003baa <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfc:	6862      	ldr	r2, [r4, #4]
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCC_ClockConfig+0x12c>)
 8003c00:	2a01      	cmp	r2, #1
 8003c02:	d11d      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	d0ed      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0c:	4d2c      	ldr	r5, [pc, #176]	; (8003cc0 <HAL_RCC_ClockConfig+0x12c>)
 8003c0e:	68ab      	ldr	r3, [r5, #8]
 8003c10:	f023 0303 	bic.w	r3, r3, #3
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003c18:	f7ff fe14 	bl	8003844 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003c20:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c22:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	d115      	bne.n	8003c54 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c28:	68ab      	ldr	r3, [r5, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d0bd      	beq.n	8003bae <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c32:	f7ff fe07 	bl	8003844 <HAL_GetTick>
 8003c36:	1b80      	subs	r0, r0, r6
 8003c38:	42b8      	cmp	r0, r7
 8003c3a:	d9f5      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	e7d4      	b.n	8003bea <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c40:	1e90      	subs	r0, r2, #2
 8003c42:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	d802      	bhi.n	8003c4e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c4c:	e7dd      	b.n	8003c0a <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	f013 0f02 	tst.w	r3, #2
 8003c52:	e7da      	b.n	8003c0a <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d10a      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c58:	68ab      	ldr	r3, [r5, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d0a5      	beq.n	8003bae <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c62:	f7ff fdef 	bl	8003844 <HAL_GetTick>
 8003c66:	1b80      	subs	r0, r0, r6
 8003c68:	42b8      	cmp	r0, r7
 8003c6a:	d9f5      	bls.n	8003c58 <HAL_RCC_ClockConfig+0xc4>
 8003c6c:	e7e6      	b.n	8003c3c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d10f      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8003c72:	68ab      	ldr	r3, [r5, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d098      	beq.n	8003bae <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7ff fde2 	bl	8003844 <HAL_GetTick>
 8003c80:	1b80      	subs	r0, r0, r6
 8003c82:	42b8      	cmp	r0, r7
 8003c84:	d9f5      	bls.n	8003c72 <HAL_RCC_ClockConfig+0xde>
 8003c86:	e7d9      	b.n	8003c3c <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c88:	f7ff fddc 	bl	8003844 <HAL_GetTick>
 8003c8c:	1b80      	subs	r0, r0, r6
 8003c8e:	42b8      	cmp	r0, r7
 8003c90:	d8d4      	bhi.n	8003c3c <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c92:	68ab      	ldr	r3, [r5, #8]
 8003c94:	f013 0f0c 	tst.w	r3, #12
 8003c98:	d1f6      	bne.n	8003c88 <HAL_RCC_ClockConfig+0xf4>
 8003c9a:	e788      	b.n	8003bae <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	b2ca      	uxtb	r2, r1
 8003c9e:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	428b      	cmp	r3, r1
 8003ca8:	d19e      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x54>
 8003caa:	e786      	b.n	8003bba <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cac:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <HAL_RCC_ClockConfig+0x12c>)
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	688a      	ldr	r2, [r1, #8]
 8003cb2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	608a      	str	r2, [r1, #8]
 8003cba:	e781      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x2c>
 8003cbc:	40023c00 	.word	0x40023c00
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc8:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8003e80 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ccc:	4a6d      	ldr	r2, [pc, #436]	; (8003e84 <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cce:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003e88 <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd2:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd4:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8003cd6:	2701      	movs	r7, #1
 8003cd8:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cda:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8003cde:	ea37 0404 	bics.w	r4, r7, r4
 8003ce2:	f040 80b9 	bne.w	8003e58 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce6:	684c      	ldr	r4, [r1, #4]
 8003ce8:	f024 0a10 	bic.w	sl, r4, #16
 8003cec:	f1ba 0f02 	cmp.w	sl, #2
 8003cf0:	d116      	bne.n	8003d20 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8003cf2:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003cf6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cfa:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003cfe:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d02:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003d06:	f04f 0c0f 	mov.w	ip, #15
 8003d0a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003d0e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d12:	690e      	ldr	r6, [r1, #16]
 8003d14:	fa06 f60b 	lsl.w	r6, r6, fp
 8003d18:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003d1c:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8003d20:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d24:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003d28:	f04f 0c03 	mov.w	ip, #3
 8003d2c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003d30:	ea2b 0b0c 	bic.w	fp, fp, ip
 8003d34:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d38:	f004 0c03 	and.w	ip, r4, #3
 8003d3c:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d40:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d44:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d48:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8003d4c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d50:	d816      	bhi.n	8003d80 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8003d52:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d56:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d5a:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d5e:	fa0a fa0e 	lsl.w	sl, sl, lr
 8003d62:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8003d66:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d6a:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d6e:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d72:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8003d76:	fa0c fc03 	lsl.w	ip, ip, r3
 8003d7a:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8003d7e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003d80:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d82:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d84:	688e      	ldr	r6, [r1, #8]
 8003d86:	fa06 f60e 	lsl.w	r6, r6, lr
 8003d8a:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8003d8c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d8e:	00e6      	lsls	r6, r4, #3
 8003d90:	d562      	bpl.n	8003e58 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	2600      	movs	r6, #0
 8003d94:	9601      	str	r6, [sp, #4]
 8003d96:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8003d9a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003d9e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8003da2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8003da6:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8003daa:	9701      	str	r7, [sp, #4]
 8003dac:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003dae:	f023 0703 	bic.w	r7, r3, #3
 8003db2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003db6:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dba:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbe:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dc2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003dc6:	f04f 0c0f 	mov.w	ip, #15
 8003dca:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003dce:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003e8c <HAL_GPIO_Init+0x1c8>
 8003dd6:	4550      	cmp	r0, sl
 8003dd8:	d01d      	beq.n	8003e16 <HAL_GPIO_Init+0x152>
 8003dda:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003dde:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 8003de2:	42b0      	cmp	r0, r6
 8003de4:	d03f      	beq.n	8003e66 <HAL_GPIO_Init+0x1a2>
 8003de6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003dea:	42b0      	cmp	r0, r6
 8003dec:	d03d      	beq.n	8003e6a <HAL_GPIO_Init+0x1a6>
 8003dee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003df2:	42b0      	cmp	r0, r6
 8003df4:	d03b      	beq.n	8003e6e <HAL_GPIO_Init+0x1aa>
 8003df6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003dfa:	42b0      	cmp	r0, r6
 8003dfc:	d039      	beq.n	8003e72 <HAL_GPIO_Init+0x1ae>
 8003dfe:	4548      	cmp	r0, r9
 8003e00:	d039      	beq.n	8003e76 <HAL_GPIO_Init+0x1b2>
 8003e02:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8003e06:	42b0      	cmp	r0, r6
 8003e08:	d037      	beq.n	8003e7a <HAL_GPIO_Init+0x1b6>
 8003e0a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003e0e:	42b0      	cmp	r0, r6
 8003e10:	bf0c      	ite	eq
 8003e12:	2607      	moveq	r6, #7
 8003e14:	2608      	movne	r6, #8
 8003e16:	fa06 f60e 	lsl.w	r6, r6, lr
 8003e1a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8003e20:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e24:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003e28:	bf0c      	ite	eq
 8003e2a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003e2c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8003e2e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8003e30:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e32:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003e36:	bf0c      	ite	eq
 8003e38:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003e3a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8003e3c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e40:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003e44:	bf0c      	ite	eq
 8003e46:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003e48:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8003e4a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8003e4c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e4e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8003e50:	bf54      	ite	pl
 8003e52:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003e54:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8003e56:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e58:	3301      	adds	r3, #1
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	f47f af3a 	bne.w	8003cd4 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8003e60:	b003      	add	sp, #12
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e66:	2601      	movs	r6, #1
 8003e68:	e7d5      	b.n	8003e16 <HAL_GPIO_Init+0x152>
 8003e6a:	2602      	movs	r6, #2
 8003e6c:	e7d3      	b.n	8003e16 <HAL_GPIO_Init+0x152>
 8003e6e:	2603      	movs	r6, #3
 8003e70:	e7d1      	b.n	8003e16 <HAL_GPIO_Init+0x152>
 8003e72:	2604      	movs	r6, #4
 8003e74:	e7cf      	b.n	8003e16 <HAL_GPIO_Init+0x152>
 8003e76:	2605      	movs	r6, #5
 8003e78:	e7cd      	b.n	8003e16 <HAL_GPIO_Init+0x152>
 8003e7a:	2606      	movs	r6, #6
 8003e7c:	e7cb      	b.n	8003e16 <HAL_GPIO_Init+0x152>
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40013c00 	.word	0x40013c00
 8003e88:	40021400 	.word	0x40021400
 8003e8c:	40020000 	.word	0x40020000

08003e90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e90:	b10a      	cbz	r2, 8003e96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e92:	6181      	str	r1, [r0, #24]
  }
}
 8003e94:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e96:	0409      	lsls	r1, r1, #16
 8003e98:	e7fb      	b.n	8003e92 <HAL_GPIO_WritePin+0x2>
 8003e9a:	0000      	movs	r0, r0

08003e9c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e9c:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d066      	beq.n	8003f70 <HAL_UART_Init+0xd4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8003ea2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003eaa:	b90b      	cbnz	r3, 8003eb0 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eb0:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003eb2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eb4:	6905      	ldr	r5, [r0, #16]
 8003eb6:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	2324      	movs	r3, #36	; 0x24
 8003eba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003ebe:	68cb      	ldr	r3, [r1, #12]
 8003ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec4:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 8003ec6:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003ec8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8003ecc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8003ece:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed0:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 8003ed2:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed4:	432b      	orrs	r3, r5
 8003ed6:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003ed8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003edc:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003ede:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ee2:	4323      	orrs	r3, r4
 8003ee4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8003ee6:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 8003ee8:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 8003eea:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8003ef0:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8003ef6:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef8:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <HAL_UART_Init+0xd8>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003efa:	6843      	ldr	r3, [r0, #4]
 8003efc:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f00:	d128      	bne.n	8003f54 <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	fbb2 f6f5 	udiv	r6, r2, r5
 8003f0c:	fb05 2216 	mls	r2, r5, r6, r2
 8003f10:	00d3      	lsls	r3, r2, #3
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	fbb3 f3f5 	udiv	r3, r3, r5
 8003f18:	f003 0207 	and.w	r2, r3, #7
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 8003f22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f26:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f28:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2a:	690b      	ldr	r3, [r1, #16]
 8003f2c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003f30:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f32:	694b      	ldr	r3, [r1, #20]
 8003f34:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003f38:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	68cb      	ldr	r3, [r1, #12]
 8003f3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f40:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 8003f42:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003f48:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003f4c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8003f50:	4618      	mov	r0, r3
}
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f5a:	fbb2 f6f5 	udiv	r6, r2, r5
 8003f5e:	fb05 2316 	mls	r3, r5, r6, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	3332      	adds	r3, #50	; 0x32
 8003f66:	fbb3 f3f5 	udiv	r3, r3, r5
 8003f6a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8003f6e:	e7db      	b.n	8003f28 <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
 8003f72:	e7ee      	b.n	8003f52 <HAL_UART_Init+0xb6>
 8003f74:	0afb6e90 	.word	0x0afb6e90

08003f78 <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003f78:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d13e      	bne.n	8003ffe <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8003f80:	2900      	cmp	r1, #0
 8003f82:	d03a      	beq.n	8003ffa <HAL_UART_Transmit+0x82>
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d038      	beq.n	8003ffa <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d036      	beq.n	8003ffe <HAL_UART_Transmit+0x86>
 8003f90:	2301      	movs	r3, #1
 8003f92:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	2300      	movs	r3, #0
 8003f98:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9a:	2321      	movs	r3, #33	; 0x21
 8003f9c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003fa0:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 8003fa2:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fa4:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003fa6:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	b952      	cbnz	r2, 8003fc2 <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	0652      	lsls	r2, r2, #25
 8003fb0:	d5fc      	bpl.n	8003fac <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	4770      	bx	lr
      huart->TxXferCount--;
 8003fc2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8003fc4:	3a01      	subs	r2, #1
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fca:	6882      	ldr	r2, [r0, #8]
 8003fcc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003fd0:	d10c      	bne.n	8003fec <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	0612      	lsls	r2, r2, #24
 8003fd6:	d5fc      	bpl.n	8003fd2 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003fd8:	880a      	ldrh	r2, [r1, #0]
 8003fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fde:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003fe0:	6902      	ldr	r2, [r0, #16]
 8003fe2:	b90a      	cbnz	r2, 8003fe8 <HAL_UART_Transmit+0x70>
          pData +=2U;
 8003fe4:	3102      	adds	r1, #2
 8003fe6:	e7de      	b.n	8003fa6 <HAL_UART_Transmit+0x2e>
          pData +=1U;
 8003fe8:	3101      	adds	r1, #1
 8003fea:	e7dc      	b.n	8003fa6 <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	0612      	lsls	r2, r2, #24
 8003ff0:	d5fc      	bpl.n	8003fec <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e7d5      	b.n	8003fa6 <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8003ffe:	2002      	movs	r0, #2
  }
}
 8004000:	4770      	bx	lr

08004002 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004002:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004004:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004008:	2b20      	cmp	r3, #32
 800400a:	d144      	bne.n	8004096 <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 800400c:	2900      	cmp	r1, #0
 800400e:	d040      	beq.n	8004092 <HAL_UART_Receive+0x90>
 8004010:	2a00      	cmp	r2, #0
 8004012:	d03e      	beq.n	8004092 <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004014:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004018:	2b01      	cmp	r3, #1
 800401a:	d03c      	beq.n	8004096 <HAL_UART_Receive+0x94>
 800401c:	2301      	movs	r3, #1
 800401e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004026:	2322      	movs	r3, #34	; 0x22
 8004028:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 800402c:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800402e:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8004030:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004032:	b29b      	uxth	r3, r3
 8004034:	b933      	cbnz	r3, 8004044 <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004036:	2220      	movs	r2, #32
 8004038:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800403c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8004040:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004042:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 8004044:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8004046:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800404e:	6883      	ldr	r3, [r0, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	d111      	bne.n	800407a <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8004056:	6813      	ldr	r3, [r2, #0]
 8004058:	069c      	lsls	r4, r3, #26
 800405a:	d5fc      	bpl.n	8004056 <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 800405c:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800405e:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004060:	b933      	cbnz	r3, 8004070 <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004062:	460b      	mov	r3, r1
 8004064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004068:	f823 2b02 	strh.w	r2, [r3], #2
{
 800406c:	4619      	mov	r1, r3
 800406e:	e7df      	b.n	8004030 <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004070:	460b      	mov	r3, r1
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 8004078:	e7f8      	b.n	800406c <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800407a:	6813      	ldr	r3, [r2, #0]
 800407c:	069b      	lsls	r3, r3, #26
 800407e:	d5fc      	bpl.n	800407a <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004080:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004082:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 8004084:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8004086:	b90c      	cbnz	r4, 800408c <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004088:	700a      	strb	r2, [r1, #0]
 800408a:	e7ef      	b.n	800406c <HAL_UART_Receive+0x6a>
 800408c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004090:	e7fa      	b.n	8004088 <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 8004092:	2001      	movs	r0, #1
 8004094:	e7d5      	b.n	8004042 <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 8004096:	2002      	movs	r0, #2
 8004098:	e7d3      	b.n	8004042 <HAL_UART_Receive+0x40>
 800409a:	0000      	movs	r0, r0

0800409c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800409c:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <_sbrk+0x2c>)
 800409e:	6811      	ldr	r1, [r2, #0]
{
 80040a0:	b508      	push	{r3, lr}
 80040a2:	4603      	mov	r3, r0
	if (heap_end == 0)
 80040a4:	b909      	cbnz	r1, 80040aa <_sbrk+0xe>
		heap_end = &end;
 80040a6:	4909      	ldr	r1, [pc, #36]	; (80040cc <_sbrk+0x30>)
 80040a8:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80040aa:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80040ac:	4669      	mov	r1, sp
 80040ae:	4403      	add	r3, r0
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d906      	bls.n	80040c2 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80040b4:	f001 f802 	bl	80050bc <__errno>
 80040b8:	230c      	movs	r3, #12
 80040ba:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80040c0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80040c2:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80040c4:	e7fc      	b.n	80040c0 <_sbrk+0x24>
 80040c6:	bf00      	nop
 80040c8:	10000f04 	.word	0x10000f04
 80040cc:	10000f48 	.word	0x10000f48

080040d0 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 80040d0:	4770      	bx	lr

080040d2 <HAL_RNG_Init>:
{ 
 80040d2:	b510      	push	{r4, lr}
  if(hrng == NULL)
 80040d4:	4604      	mov	r4, r0
 80040d6:	b1a8      	cbz	r0, 8004104 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 80040d8:	7903      	ldrb	r3, [r0, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d014      	beq.n	8004108 <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 80040de:	7943      	ldrb	r3, [r0, #5]
 80040e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040e4:	b913      	cbnz	r3, 80040ec <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 80040e6:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80040e8:	f7ff fff2 	bl	80040d0 <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 80040ec:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80040ee:	2302      	movs	r3, #2
 80040f0:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 80040fa:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80040fc:	2301      	movs	r3, #1
 80040fe:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 8004100:	7120      	strb	r0, [r4, #4]
}
 8004102:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004104:	2001      	movs	r0, #1
 8004106:	e7fc      	b.n	8004102 <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 8004108:	2002      	movs	r0, #2
 800410a:	e7fa      	b.n	8004102 <HAL_RNG_Init+0x30>

0800410c <KeccakF1600_StateExtractBytes>:
    (uint64_t)0x0000000080000001ULL,
    (uint64_t)0x8000000080008008ULL
};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	440b      	add	r3, r1
 8004110:	1a52      	subs	r2, r2, r1
    unsigned int i;
    for(i=0;i<length;i++)
 8004112:	4299      	cmp	r1, r3
 8004114:	d100      	bne.n	8004118 <KeccakF1600_StateExtractBytes+0xc>
    {
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
    }
}
 8004116:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
 8004118:	1854      	adds	r4, r2, r1
 800411a:	f024 0607 	bic.w	r6, r4, #7
 800411e:	08e5      	lsrs	r5, r4, #3
 8004120:	4406      	add	r6, r0
 8004122:	f004 0407 	and.w	r4, r4, #7
 8004126:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800412a:	f850 5035 	ldr.w	r5, [r0, r5, lsl #3]
 800412e:	00e4      	lsls	r4, r4, #3
 8004130:	f1c4 0720 	rsb	r7, r4, #32
 8004134:	f1a4 0620 	sub.w	r6, r4, #32
 8004138:	fa0c f707 	lsl.w	r7, ip, r7
 800413c:	fa25 f404 	lsr.w	r4, r5, r4
 8004140:	433c      	orrs	r4, r7
 8004142:	fa2c f606 	lsr.w	r6, ip, r6
 8004146:	4334      	orrs	r4, r6
 8004148:	f801 4b01 	strb.w	r4, [r1], #1
    for(i=0;i<length;i++)
 800414c:	e7e1      	b.n	8004112 <KeccakF1600_StateExtractBytes+0x6>

0800414e <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 800414e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004150:	440b      	add	r3, r1
 8004152:	1a52      	subs	r2, r2, r1
    unsigned int i;
    for(i = 0; i < length; i++)
 8004154:	4299      	cmp	r1, r3
 8004156:	d100      	bne.n	800415a <KeccakF1600_StateXORBytes+0xc>
    {
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
    }
}
 8004158:	bdf0      	pop	{r4, r5, r6, r7, pc}
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 800415a:	1854      	adds	r4, r2, r1
 800415c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8004160:	f024 0707 	bic.w	r7, r4, #7
 8004164:	f004 0407 	and.w	r4, r4, #7
 8004168:	f811 6b01 	ldrb.w	r6, [r1], #1
 800416c:	00e4      	lsls	r4, r4, #3
 800416e:	f1a4 0520 	sub.w	r5, r4, #32
 8004172:	f1c4 0e20 	rsb	lr, r4, #32
 8004176:	4407      	add	r7, r0
 8004178:	fa06 f505 	lsl.w	r5, r6, r5
 800417c:	fa26 fe0e 	lsr.w	lr, r6, lr
 8004180:	fa06 f404 	lsl.w	r4, r6, r4
 8004184:	f850 603c 	ldr.w	r6, [r0, ip, lsl #3]
 8004188:	4074      	eors	r4, r6
 800418a:	687e      	ldr	r6, [r7, #4]
 800418c:	f840 403c 	str.w	r4, [r0, ip, lsl #3]
 8004190:	ea45 050e 	orr.w	r5, r5, lr
 8004194:	4075      	eors	r5, r6
 8004196:	607d      	str	r5, [r7, #4]
    for(i = 0; i < length; i++)
 8004198:	e7dc      	b.n	8004154 <KeccakF1600_StateXORBytes+0x6>
 800419a:	0000      	movs	r0, r0

0800419c <KeccakF1600_StatePermute>:
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
    }
}

void KeccakF1600_StatePermute(uint64_t * state)
{
 800419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a0:	b0bf      	sub	sp, #252	; 0xfc
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0]; 
 80041a2:	6803      	ldr	r3, [r0, #0]
 80041a4:	930c      	str	r3, [sp, #48]	; 0x30
 80041a6:	6843      	ldr	r3, [r0, #4]
 80041a8:	930d      	str	r3, [sp, #52]	; 0x34
        Abe = state[ 1];
 80041aa:	6883      	ldr	r3, [r0, #8]
 80041ac:	930e      	str	r3, [sp, #56]	; 0x38
 80041ae:	68c3      	ldr	r3, [r0, #12]
 80041b0:	930f      	str	r3, [sp, #60]	; 0x3c
        Abi = state[ 2];
 80041b2:	6903      	ldr	r3, [r0, #16]
 80041b4:	9310      	str	r3, [sp, #64]	; 0x40
 80041b6:	6943      	ldr	r3, [r0, #20]
 80041b8:	9311      	str	r3, [sp, #68]	; 0x44
        Abo = state[ 3];
 80041ba:	6983      	ldr	r3, [r0, #24]
 80041bc:	9312      	str	r3, [sp, #72]	; 0x48
 80041be:	69c3      	ldr	r3, [r0, #28]
 80041c0:	9313      	str	r3, [sp, #76]	; 0x4c
        Abu = state[ 4];
 80041c2:	6a03      	ldr	r3, [r0, #32]
 80041c4:	9314      	str	r3, [sp, #80]	; 0x50
 80041c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041c8:	9315      	str	r3, [sp, #84]	; 0x54
        Aga = state[ 5];
 80041ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80041cc:	9316      	str	r3, [sp, #88]	; 0x58
 80041ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80041d0:	9317      	str	r3, [sp, #92]	; 0x5c
        Age = state[ 6];
 80041d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041d4:	9318      	str	r3, [sp, #96]	; 0x60
 80041d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041d8:	9319      	str	r3, [sp, #100]	; 0x64
        Agi = state[ 7];
 80041da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80041dc:	931a      	str	r3, [sp, #104]	; 0x68
 80041de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80041e0:	931b      	str	r3, [sp, #108]	; 0x6c
        Ago = state[ 8];
 80041e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80041e4:	931c      	str	r3, [sp, #112]	; 0x70
 80041e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80041e8:	931d      	str	r3, [sp, #116]	; 0x74
        Agu = state[ 9]; //0
 80041ea:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80041ec:	931e      	str	r3, [sp, #120]	; 0x78
 80041ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80041f0:	931f      	str	r3, [sp, #124]	; 0x7c
        Aka = state[10]; //0
 80041f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80041f4:	9320      	str	r3, [sp, #128]	; 0x80
 80041f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80041f8:	9321      	str	r3, [sp, #132]	; 0x84
        Ake = state[11]; //0
 80041fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80041fc:	9322      	str	r3, [sp, #136]	; 0x88
 80041fe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004200:	9323      	str	r3, [sp, #140]	; 0x8c
        Aki = state[12]; //0
 8004202:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004204:	9324      	str	r3, [sp, #144]	; 0x90
 8004206:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004208:	9325      	str	r3, [sp, #148]	; 0x94
        Ako = state[13]; //0
 800420a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800420c:	9326      	str	r3, [sp, #152]	; 0x98
 800420e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004210:	9327      	str	r3, [sp, #156]	; 0x9c
        Aku = state[14]; //0
 8004212:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004214:	9328      	str	r3, [sp, #160]	; 0xa0
 8004216:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004218:	9329      	str	r3, [sp, #164]	; 0xa4
        Ama = state[15]; //0
 800421a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800421c:	932a      	str	r3, [sp, #168]	; 0xa8
 800421e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004220:	932b      	str	r3, [sp, #172]	; 0xac
        Ame = state[16];
 8004222:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004226:	932c      	str	r3, [sp, #176]	; 0xb0
 8004228:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800422c:	932d      	str	r3, [sp, #180]	; 0xb4
        Ami = state[17]; //0
 800422e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004232:	932e      	str	r3, [sp, #184]	; 0xb8
 8004234:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8004238:	932f      	str	r3, [sp, #188]	; 0xbc
        Amo = state[18]; //0
 800423a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800423e:	9330      	str	r3, [sp, #192]	; 0xc0
 8004240:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8004244:	9331      	str	r3, [sp, #196]	; 0xc4
        Amu = state[19]; //0
 8004246:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 800424a:	9332      	str	r3, [sp, #200]	; 0xc8
 800424c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8004250:	9333      	str	r3, [sp, #204]	; 0xcc
        Asa = state[20]; //0
 8004252:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8004256:	930b      	str	r3, [sp, #44]	; 0x2c
 8004258:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800425c:	9334      	str	r3, [sp, #208]	; 0xd0
        Ase = state[21]; //0
 800425e:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8004262:	9335      	str	r3, [sp, #212]	; 0xd4
 8004264:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8004268:	9336      	str	r3, [sp, #216]	; 0xd8
        Asi = state[22]; //0
 800426a:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 800426e:	9337      	str	r3, [sp, #220]	; 0xdc
 8004270:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8004274:	9338      	str	r3, [sp, #224]	; 0xe0
        Aso = state[23]; //0
 8004276:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800427a:	9339      	str	r3, [sp, #228]	; 0xe4
 800427c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8004280:	933a      	str	r3, [sp, #232]	; 0xe8
        Asu = state[24]; //0
 8004282:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8004286:	933b      	str	r3, [sp, #236]	; 0xec
 8004288:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4

        for( round = 0; round < NROUNDS; round += 2 )
 800428c:	4b01      	ldr	r3, [pc, #4]	; (8004294 <KeccakF1600_StatePermute+0xf8>)
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	e002      	b.n	8004298 <KeccakF1600_StatePermute+0xfc>
 8004292:	bf00      	nop
 8004294:	08006bc0 	.word	0x08006bc0
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8004298:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800429a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800429c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800429e:	4053      	eors	r3, r2
 80042a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042a2:	ea82 0501 	eor.w	r5, r2, r1
 80042a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042a8:	4053      	eors	r3, r2
 80042aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042ac:	4055      	eors	r5, r2
 80042ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80042b0:	4053      	eors	r3, r2
 80042b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80042b4:	4055      	eors	r5, r2
 80042b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042b8:	4053      	eors	r3, r2
 80042ba:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80042bc:	9309      	str	r3, [sp, #36]	; 0x24
 80042be:	4055      	eors	r5, r2
            BCe = Abe^Age^Ake^Ame^Ase;
 80042c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80042c4:	ea83 0902 	eor.w	r9, r3, r2
 80042c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042cc:	ea83 0802 	eor.w	r8, r3, r2
 80042d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = Abi^Agi^Aki^Ami^Asi;
 80042d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            BCe = Abe^Age^Ake^Ame^Ase;
 80042d4:	ea89 0903 	eor.w	r9, r9, r3
 80042d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042da:	ea88 0803 	eor.w	r8, r8, r3
 80042de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80042e0:	ea89 0903 	eor.w	r9, r9, r3
 80042e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80042e6:	ea88 0803 	eor.w	r8, r8, r3
 80042ea:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80042ec:	ea89 0903 	eor.w	r9, r9, r3
 80042f0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80042f2:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 80042f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042f8:	ea83 0c02 	eor.w	ip, r3, r2
 80042fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004300:	ea83 0702 	eor.w	r7, r3, r2
 8004304:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004306:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8004308:	ea8c 0c03 	eor.w	ip, ip, r3
 800430c:	4057      	eors	r7, r2
 800430e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8004310:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8004312:	ea8c 0c03 	eor.w	ip, ip, r3
 8004316:	4057      	eors	r7, r2
 8004318:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800431a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800431c:	ea8c 0c03 	eor.w	ip, ip, r3
 8004320:	4057      	eors	r7, r2
            BCo = Abo^Ago^Ako^Amo^Aso;
 8004322:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004324:	9a1c      	ldr	r2, [sp, #112]	; 0x70
            BCu = Abu^Agu^Aku^Amu^Asu;
 8004326:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
            BCo = Abo^Ago^Ako^Amo^Aso;
 800432a:	ea83 0402 	eor.w	r4, r3, r2
 800432e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004330:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004332:	ea83 0102 	eor.w	r1, r3, r2
 8004336:	9a26      	ldr	r2, [sp, #152]	; 0x98
            BCu = Abu^Agu^Aku^Amu^Asu;
 8004338:	9b14      	ldr	r3, [sp, #80]	; 0x50
            BCo = Abo^Ago^Ako^Amo^Aso;
 800433a:	4054      	eors	r4, r2
 800433c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800433e:	4051      	eors	r1, r2
 8004340:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8004342:	4054      	eors	r4, r2
 8004344:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8004346:	4051      	eors	r1, r2
 8004348:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800434a:	4054      	eors	r4, r2
 800434c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 800434e:	4051      	eors	r1, r2
            BCu = Abu^Agu^Aku^Amu^Asu;
 8004350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004352:	405a      	eors	r2, r3
 8004354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004356:	ea83 0e0e 	eor.w	lr, r3, lr
 800435a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800435c:	405a      	eors	r2, r3
 800435e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004360:	ea8e 0e03 	eor.w	lr, lr, r3
 8004364:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004366:	405a      	eors	r2, r3
 8004368:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800436a:	ea8e 0e03 	eor.w	lr, lr, r3
 800436e:	9b3b      	ldr	r3, [sp, #236]	; 0xec

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8004370:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 8004374:	405a      	eors	r2, r3
            Da = BCu^ROL(BCe, 1);
 8004376:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 800437a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 800437e:	ea8e 0e06 	eor.w	lr, lr, r6
            Da = BCu^ROL(BCe, 1);
 8004382:	ea8b 0302 	eor.w	r3, fp, r2
 8004386:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 800438a:	9302      	str	r3, [sp, #8]
 800438c:	ea8a 030e 	eor.w	r3, sl, lr
 8004390:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 8004392:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 8004396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004398:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
 800439c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80043a0:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 80043a4:	ea8b 0303 	eor.w	r3, fp, r3
 80043a8:	9304      	str	r3, [sp, #16]
 80043aa:	ea8a 0305 	eor.w	r3, sl, r5
            Di = BCe^ROL(BCo, 1);
 80043ae:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 80043b2:	ea4a 7ad4 	orr.w	sl, sl, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 80043b6:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 80043b8:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 80043bc:	ea4f 084e 	mov.w	r8, lr, lsl #1
 80043c0:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 80043c4:	0052      	lsls	r2, r2, #1
 80043c6:	ea42 72de 	orr.w	r2, r2, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 80043ca:	9306      	str	r3, [sp, #24]
            Do = BCi^ROL(BCu, 1);
 80043cc:	ea82 030c 	eor.w	r3, r2, ip
 80043d0:	9307      	str	r3, [sp, #28]
 80043d2:	ea88 0307 	eor.w	r3, r8, r7
 80043d6:	9308      	str	r3, [sp, #32]
            Du = BCo^ROL(BCa, 1);
 80043d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043da:	006a      	lsls	r2, r5, #1
 80043dc:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
 80043e6:	4063      	eors	r3, r4
 80043e8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ea:	ea82 0301 	eor.w	r3, r2, r1
            Di = BCe^ROL(BCo, 1);
 80043ee:	ea4f 0b44 	mov.w	fp, r4, lsl #1

            Aba ^= Da;
 80043f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            Du = BCo^ROL(BCa, 1);
 80043f4:	930a      	str	r3, [sp, #40]	; 0x28
            Aba ^= Da;
 80043f6:	9b02      	ldr	r3, [sp, #8]
            Di = BCe^ROL(BCo, 1);
 80043f8:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 80043fc:	ea8b 0b09 	eor.w	fp, fp, r9
            Aba ^= Da;
 8004400:	ea83 0902 	eor.w	r9, r3, r2
 8004404:	9b03      	ldr	r3, [sp, #12]
 8004406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
 8004408:	9906      	ldr	r1, [sp, #24]
 800440a:	9c25      	ldr	r4, [sp, #148]	; 0x94
            BCi = ROL(Aki, 43);
            Amo ^= Do;
 800440c:	9f31      	ldr	r7, [sp, #196]	; 0xc4
            Aba ^= Da;
 800440e:	ea83 0a02 	eor.w	sl, r3, r2
            Age ^= De;
 8004412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004414:	9b04      	ldr	r3, [sp, #16]
 8004416:	ea83 0e02 	eor.w	lr, r3, r2
 800441a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800441c:	9b05      	ldr	r3, [sp, #20]
 800441e:	ea83 0c02 	eor.w	ip, r3, r2
            Aki ^= Di;
 8004422:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004424:	ea8b 0202 	eor.w	r2, fp, r2
 8004428:	404c      	eors	r4, r1
            BCi = ROL(Aki, 43);
 800442a:	ea4f 5852 	mov.w	r8, r2, lsr #21
 800442e:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 8004432:	0d64      	lsrs	r4, r4, #21
 8004434:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
            Amo ^= Do;
 8004438:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800443a:	9a07      	ldr	r2, [sp, #28]
 800443c:	4051      	eors	r1, r2
 800443e:	9a08      	ldr	r2, [sp, #32]
            BCe = ROL(Age, 44);
 8004440:	ea4f 551e 	mov.w	r5, lr, lsr #20
 8004444:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
            Amo ^= Do;
 8004448:	407a      	eors	r2, r7
            BCe = ROL(Age, 44);
 800444a:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 800444e:	ea4c 330e 	orr.w	r3, ip, lr, lsl #12
            BCo = ROL(Amo, 21);
 8004452:	ea4f 5e42 	mov.w	lr, r2, lsl #21
 8004456:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 800445a:	0549      	lsls	r1, r1, #21
 800445c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
            Asu ^= Du;
 8004460:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 8004462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004464:	4057      	eors	r7, r2
 8004466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004468:	4056      	eors	r6, r2
            BCu = ROL(Asu, 14);
 800446a:	03ba      	lsls	r2, r7, #14
 800446c:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8004470:	ea4f 3c86 	mov.w	ip, r6, lsl #14
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8004474:	9e01      	ldr	r6, [sp, #4]
            BCu = ROL(Asu, 14);
 8004476:	ea4c 4c97 	orr.w	ip, ip, r7, lsr #18
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800447a:	e9d6 7600 	ldrd	r7, r6, [r6]
 800447e:	ea8a 0606 	eor.w	r6, sl, r6
 8004482:	960d      	str	r6, [sp, #52]	; 0x34
 8004484:	ea89 0707 	eor.w	r7, r9, r7
 8004488:	ea28 0605 	bic.w	r6, r8, r5
 800448c:	407e      	eors	r6, r7
 800448e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004490:	960c      	str	r6, [sp, #48]	; 0x30
 8004492:	ea24 0603 	bic.w	r6, r4, r3
 8004496:	4077      	eors	r7, r6
            Ebe =   BCe ^((~BCi)&  BCo );
 8004498:	ea2e 0604 	bic.w	r6, lr, r4
 800449c:	405e      	eors	r6, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800449e:	970d      	str	r7, [sp, #52]	; 0x34
            Ebe =   BCe ^((~BCi)&  BCo );
 80044a0:	ea21 0708 	bic.w	r7, r1, r8
 80044a4:	406f      	eors	r7, r5
 80044a6:	9625      	str	r6, [sp, #148]	; 0x94
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );
 80044a8:	ea25 0509 	bic.w	r5, r5, r9
            Ebi =   BCi ^((~BCo)&  BCu );
 80044ac:	ea2c 060e 	bic.w	r6, ip, lr
            Ebu =   BCu ^((~BCa)&  BCe );
 80044b0:	ea23 030a 	bic.w	r3, r3, sl
            Ebi =   BCi ^((~BCo)&  BCu );
 80044b4:	4074      	eors	r4, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 80044b6:	ea83 030c 	eor.w	r3, r3, ip
            Ebo =   BCo ^((~BCu)&  BCa );
 80044ba:	ea29 0602 	bic.w	r6, r9, r2
            Ebe =   BCe ^((~BCi)&  BCo );
 80044be:	9724      	str	r7, [sp, #144]	; 0x90
            Ebi =   BCi ^((~BCo)&  BCu );
 80044c0:	ea22 0701 	bic.w	r7, r2, r1
            Ebu =   BCu ^((~BCa)&  BCe );
 80044c4:	406a      	eors	r2, r5
            Ebo =   BCo ^((~BCu)&  BCa );
 80044c6:	4071      	eors	r1, r6
            Ebi =   BCi ^((~BCo)&  BCu );
 80044c8:	943c      	str	r4, [sp, #240]	; 0xf0
            Ebu =   BCu ^((~BCa)&  BCe );
 80044ca:	9230      	str	r2, [sp, #192]	; 0xc0
            Ebo =   BCo ^((~BCu)&  BCa );
 80044cc:	ea2a 040c 	bic.w	r4, sl, ip

            Abo ^= Do;
 80044d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
            Ebu =   BCu ^((~BCa)&  BCe );
 80044d2:	9331      	str	r3, [sp, #196]	; 0xc4
            Abo ^= Do;
 80044d4:	9b07      	ldr	r3, [sp, #28]
            Ebo =   BCo ^((~BCu)&  BCa );
 80044d6:	9118      	str	r1, [sp, #96]	; 0x60
            Ebi =   BCi ^((~BCo)&  BCu );
 80044d8:	ea87 0708 	eor.w	r7, r7, r8
            Ebo =   BCo ^((~BCu)&  BCa );
 80044dc:	ea84 010e 	eor.w	r1, r4, lr
            Abo ^= Do;
 80044e0:	405a      	eors	r2, r3
            Ebi =   BCi ^((~BCo)&  BCu );
 80044e2:	973b      	str	r7, [sp, #236]	; 0xec
            Ebo =   BCo ^((~BCu)&  BCa );
 80044e4:	9119      	str	r1, [sp, #100]	; 0x64
            Abo ^= Do;
 80044e6:	9b08      	ldr	r3, [sp, #32]
 80044e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
            Aka ^= Da;
 80044ea:	9c21      	ldr	r4, [sp, #132]	; 0x84
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
 80044ec:	9f38      	ldr	r7, [sp, #224]	; 0xe0
            Abo ^= Do;
 80044ee:	4059      	eors	r1, r3
            BCa = ROL(Abo, 28);
 80044f0:	ea4f 7c01 	mov.w	ip, r1, lsl #28
 80044f4:	ea4c 1c12 	orr.w	ip, ip, r2, lsr #4
 80044f8:	0712      	lsls	r2, r2, #28
 80044fa:	ea42 1e11 	orr.w	lr, r2, r1, lsr #4
            Agu ^= Du;
 80044fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004500:	9a1e      	ldr	r2, [sp, #120]	; 0x78
            Aka ^= Da;
 8004502:	9920      	ldr	r1, [sp, #128]	; 0x80
            Agu ^= Du;
 8004504:	ea83 0802 	eor.w	r8, r3, r2
 8004508:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800450a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800450c:	ea83 0602 	eor.w	r6, r3, r2
            Aka ^= Da;
 8004510:	9a02      	ldr	r2, [sp, #8]
 8004512:	404a      	eors	r2, r1
 8004514:	9903      	ldr	r1, [sp, #12]
 8004516:	404c      	eors	r4, r1
            BCi = ROL(Aka,  3);
 8004518:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800451c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004520:	00d2      	lsls	r2, r2, #3
 8004522:	ea42 7454 	orr.w	r4, r2, r4, lsr #29
            Ame ^= De;
 8004526:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8004528:	9a04      	ldr	r2, [sp, #16]
            BCe = ROL(Agu, 20);
 800452a:	0535      	lsls	r5, r6, #20
 800452c:	ea45 3518 	orr.w	r5, r5, r8, lsr #12
 8004530:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8004534:	ea48 3316 	orr.w	r3, r8, r6, lsr #12
            Ame ^= De;
 8004538:	4051      	eors	r1, r2
 800453a:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800453c:	9a05      	ldr	r2, [sp, #20]
            BCo = ROL(Ame, 45);
 800453e:	ea4f 48d1 	mov.w	r8, r1, lsr #19
            Ame ^= De;
 8004542:	4072      	eors	r2, r6
            BCo = ROL(Ame, 45);
 8004544:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8004548:	0cd2      	lsrs	r2, r2, #19
 800454a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
            Asi ^= Di;
 800454e:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8004550:	ea8b 0601 	eor.w	r6, fp, r1
 8004554:	9906      	ldr	r1, [sp, #24]
 8004556:	4079      	eors	r1, r7
            BCu = ROL(Asi, 61);
 8004558:	08f7      	lsrs	r7, r6, #3
 800455a:	ea47 7741 	orr.w	r7, r7, r1, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 800455e:	ea24 0a03 	bic.w	sl, r4, r3
            BCu = ROL(Asi, 61);
 8004562:	08c9      	lsrs	r1, r1, #3
 8004564:	ea41 7146 	orr.w	r1, r1, r6, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 8004568:	ea8a 0a0e 	eor.w	sl, sl, lr
 800456c:	ea29 0605 	bic.w	r6, r9, r5
 8004570:	ea86 060c 	eor.w	r6, r6, ip
 8004574:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
            Ege =   BCe ^((~BCi)&  BCo );
 8004578:	ea28 0a04 	bic.w	sl, r8, r4
 800457c:	ea8a 0a03 	eor.w	sl, sl, r3
            Ega =   BCa ^((~BCe)&  BCi );
 8004580:	962d      	str	r6, [sp, #180]	; 0xb4
            Ege =   BCe ^((~BCi)&  BCo );
 8004582:	ea22 0609 	bic.w	r6, r2, r9
 8004586:	406e      	eors	r6, r5
 8004588:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
            Egi =   BCi ^((~BCo)&  BCu );
 800458c:	ea27 0a08 	bic.w	sl, r7, r8
 8004590:	ea8a 0404 	eor.w	r4, sl, r4
            Ege =   BCe ^((~BCi)&  BCo );
 8004594:	9613      	str	r6, [sp, #76]	; 0x4c
            Egi =   BCi ^((~BCo)&  BCu );
 8004596:	ea21 0602 	bic.w	r6, r1, r2
 800459a:	9420      	str	r4, [sp, #128]	; 0x80
 800459c:	ea86 0409 	eor.w	r4, r6, r9
            Ego =   BCo ^((~BCu)&  BCa );
 80045a0:	ea2e 0607 	bic.w	r6, lr, r7
            Egu =   BCu ^((~BCa)&  BCe );
 80045a4:	ea23 0e0e 	bic.w	lr, r3, lr
 80045a8:	ea8e 0307 	eor.w	r3, lr, r7
 80045ac:	ea25 050c 	bic.w	r5, r5, ip
            Egi =   BCi ^((~BCo)&  BCu );
 80045b0:	9421      	str	r4, [sp, #132]	; 0x84
            Ego =   BCo ^((~BCu)&  BCa );
 80045b2:	ea2c 0401 	bic.w	r4, ip, r1
 80045b6:	4062      	eors	r2, r4
            Egu =   BCu ^((~BCa)&  BCe );
 80045b8:	931e      	str	r3, [sp, #120]	; 0x78
 80045ba:	ea85 0301 	eor.w	r3, r5, r1
            Ego =   BCo ^((~BCu)&  BCa );
 80045be:	9238      	str	r2, [sp, #224]	; 0xe0
            Egu =   BCu ^((~BCa)&  BCe );
 80045c0:	931f      	str	r3, [sp, #124]	; 0x7c

            Abe ^= De;
 80045c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	ea83 0902 	eor.w	r9, r3, r2
 80045ca:	9b05      	ldr	r3, [sp, #20]
 80045cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045ce:	ea83 0502 	eor.w	r5, r3, r2
            BCa = ROL(Abe,  1);
            Agi ^= Di;
 80045d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
            Ego =   BCo ^((~BCu)&  BCa );
 80045d4:	ea86 0608 	eor.w	r6, r6, r8
            Agi ^= Di;
 80045d8:	ea8b 0203 	eor.w	r2, fp, r3
            Ego =   BCo ^((~BCu)&  BCa );
 80045dc:	9637      	str	r6, [sp, #220]	; 0xdc
            Agi ^= Di;
 80045de:	9b06      	ldr	r3, [sp, #24]
 80045e0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80045e2:	ea83 0701 	eor.w	r7, r3, r1
            BCe = ROL(Agi,  6);
 80045e6:	01be      	lsls	r6, r7, #6
 80045e8:	ea46 6692 	orr.w	r6, r6, r2, lsr #26
 80045ec:	0192      	lsls	r2, r2, #6
 80045ee:	ea42 6397 	orr.w	r3, r2, r7, lsr #26
            Ako ^= Do;
 80045f2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80045f4:	9a07      	ldr	r2, [sp, #28]
 80045f6:	ea82 0701 	eor.w	r7, r2, r1
 80045fa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80045fc:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Abe,  1);
 80045fe:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8004602:	ea4c 7cd9 	orr.w	ip, ip, r9, lsr #31
            Ako ^= Do;
 8004606:	404a      	eors	r2, r1
            BCa = ROL(Abe,  1);
 8004608:	ea4f 0949 	mov.w	r9, r9, lsl #1
            BCi = ROL(Ako, 25);
 800460c:	0679      	lsls	r1, r7, #25
            BCa = ROL(Abe,  1);
 800460e:	ea49 74d5 	orr.w	r4, r9, r5, lsr #31
            BCi = ROL(Ako, 25);
 8004612:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
            Amu ^= Du;
 8004616:	9d32      	ldr	r5, [sp, #200]	; 0xc8
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 8004618:	f8dd 90d0 	ldr.w	r9, [sp, #208]	; 0xd0
            BCi = ROL(Ako, 25);
 800461c:	ea4f 6842 	mov.w	r8, r2, lsl #25
            Amu ^= Du;
 8004620:	9a09      	ldr	r2, [sp, #36]	; 0x24
            BCi = ROL(Ako, 25);
 8004622:	ea48 18d7 	orr.w	r8, r8, r7, lsr #7
            Amu ^= Du;
 8004626:	4055      	eors	r5, r2
 8004628:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 800462a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800462c:	407a      	eors	r2, r7
            BCo = ROL(Amu,  8);
 800462e:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 8004632:	ea4e 6e15 	orr.w	lr, lr, r5, lsr #24
 8004636:	022d      	lsls	r5, r5, #8
 8004638:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
            Asa ^= Da;
 800463c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800463e:	9a02      	ldr	r2, [sp, #8]
 8004640:	407a      	eors	r2, r7
 8004642:	9f03      	ldr	r7, [sp, #12]
 8004644:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Asa, 18);
 8004648:	ea4f 4789 	mov.w	r7, r9, lsl #18
 800464c:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 8004650:	ea21 0a03 	bic.w	sl, r1, r3
            BCu = ROL(Asa, 18);
 8004654:	0492      	lsls	r2, r2, #18
 8004656:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 800465a:	ea8a 0a04 	eor.w	sl, sl, r4
 800465e:	ea28 0906 	bic.w	r9, r8, r6
 8004662:	ea89 090c 	eor.w	r9, r9, ip
 8004666:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
            Eke =   BCe ^((~BCi)&  BCo );
 800466a:	ea25 0a01 	bic.w	sl, r5, r1
 800466e:	ea8a 0a03 	eor.w	sl, sl, r3
            Eka =   BCa ^((~BCe)&  BCi );
 8004672:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
 8004676:	ea23 0304 	bic.w	r3, r3, r4
            Eke =   BCe ^((~BCi)&  BCo );
 800467a:	ea2e 0908 	bic.w	r9, lr, r8
 800467e:	ea89 0906 	eor.w	r9, r9, r6
            Eku =   BCu ^((~BCa)&  BCe );
 8004682:	4053      	eors	r3, r2
 8004684:	ea26 060c 	bic.w	r6, r6, ip
            Eke =   BCe ^((~BCi)&  BCo );
 8004688:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
            Eki =   BCi ^((~BCo)&  BCu );
 800468c:	ea22 0a05 	bic.w	sl, r2, r5
 8004690:	ea8a 0101 	eor.w	r1, sl, r1
            Eke =   BCe ^((~BCi)&  BCo );
 8004694:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
            Eku =   BCu ^((~BCa)&  BCe );
 8004698:	9334      	str	r3, [sp, #208]	; 0xd0
            Eki =   BCi ^((~BCo)&  BCu );
 800469a:	ea27 090e 	bic.w	r9, r7, lr
            Eku =   BCu ^((~BCa)&  BCe );
 800469e:	ea86 0307 	eor.w	r3, r6, r7
            Eki =   BCi ^((~BCo)&  BCu );
 80046a2:	910e      	str	r1, [sp, #56]	; 0x38
            Eku =   BCu ^((~BCa)&  BCe );
 80046a4:	933d      	str	r3, [sp, #244]	; 0xf4
            Eki =   BCi ^((~BCo)&  BCu );
 80046a6:	ea89 0108 	eor.w	r1, r9, r8

            Abu ^= Du;
 80046aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
            Eki =   BCi ^((~BCo)&  BCu );
 80046ac:	910f      	str	r1, [sp, #60]	; 0x3c
            Eko =   BCo ^((~BCu)&  BCa );
 80046ae:	ea24 0802 	bic.w	r8, r4, r2
            Abu ^= Du;
 80046b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
            Eko =   BCo ^((~BCu)&  BCa );
 80046b4:	ea2c 0107 	bic.w	r1, ip, r7
            Abu ^= Du;
 80046b8:	ea83 0702 	eor.w	r7, r3, r2
 80046bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046c0:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Abu, 27);
            Aga ^= Da;
 80046c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80046c6:	9b02      	ldr	r3, [sp, #8]
            Eko =   BCo ^((~BCu)&  BCa );
 80046c8:	ea81 010e 	eor.w	r1, r1, lr
            Aga ^= Da;
 80046cc:	4053      	eors	r3, r2
            Eko =   BCo ^((~BCu)&  BCa );
 80046ce:	9127      	str	r1, [sp, #156]	; 0x9c
            Aga ^= Da;
 80046d0:	9a03      	ldr	r2, [sp, #12]
 80046d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
            BCa = ROL(Abu, 27);
 80046d4:	ea4f 6ec6 	mov.w	lr, r6, lsl #27
 80046d8:	ea4e 1e57 	orr.w	lr, lr, r7, lsr #5
 80046dc:	06ff      	lsls	r7, r7, #27
 80046de:	ea47 1c56 	orr.w	ip, r7, r6, lsr #5
            Aga ^= Da;
 80046e2:	4051      	eors	r1, r2
            BCe = ROL(Aga, 36);
 80046e4:	0f1e      	lsrs	r6, r3, #28
 80046e6:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 80046ea:	ea88 0505 	eor.w	r5, r8, r5
            BCe = ROL(Aga, 36);
 80046ee:	0f09      	lsrs	r1, r1, #28
 80046f0:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 80046f4:	9526      	str	r5, [sp, #152]	; 0x98
            Ake ^= De;
 80046f6:	9b04      	ldr	r3, [sp, #16]
 80046f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
 80046fa:	9f39      	ldr	r7, [sp, #228]	; 0xe4
            Ake ^= De;
 80046fc:	ea83 0402 	eor.w	r4, r3, r2
 8004700:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8004702:	9b05      	ldr	r3, [sp, #20]
 8004704:	ea83 0502 	eor.w	r5, r3, r2
            BCi = ROL(Ake, 10);
 8004708:	ea4f 2885 	mov.w	r8, r5, lsl #10
 800470c:	ea48 5894 	orr.w	r8, r8, r4, lsr #22
 8004710:	02a4      	lsls	r4, r4, #10
 8004712:	ea44 5595 	orr.w	r5, r4, r5, lsr #22
            Ami ^= Di;
 8004716:	9a06      	ldr	r2, [sp, #24]
 8004718:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 800471a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800471c:	4054      	eors	r4, r2
 800471e:	ea8b 0303 	eor.w	r3, fp, r3
            BCo = ROL(Ami, 15);
 8004722:	03e2      	lsls	r2, r4, #15
 8004724:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8004728:	03db      	lsls	r3, r3, #15
 800472a:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
            Aso ^= Do;
 800472e:	9c07      	ldr	r4, [sp, #28]
 8004730:	ea84 0907 	eor.w	r9, r4, r7
 8004734:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 8004736:	9c08      	ldr	r4, [sp, #32]
 8004738:	407c      	eors	r4, r7
            BCu = ROL(Aso, 56);
 800473a:	ea4f 2719 	mov.w	r7, r9, lsr #8
 800473e:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8004742:	ea25 0a06 	bic.w	sl, r5, r6
            BCu = ROL(Aso, 56);
 8004746:	0a24      	lsrs	r4, r4, #8
 8004748:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 800474c:	ea8a 0a0c 	eor.w	sl, sl, ip
 8004750:	ea28 0901 	bic.w	r9, r8, r1
 8004754:	ea89 090e 	eor.w	r9, r9, lr
 8004758:	f8cd a0e4 	str.w	sl, [sp, #228]	; 0xe4
            Eme =   BCe ^((~BCi)&  BCo );
 800475c:	ea23 0a05 	bic.w	sl, r3, r5
 8004760:	ea8a 0a06 	eor.w	sl, sl, r6
            Ema =   BCa ^((~BCe)&  BCi );
 8004764:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
            Eme =   BCe ^((~BCi)&  BCo );
 8004768:	ea22 0908 	bic.w	r9, r2, r8
 800476c:	ea89 0901 	eor.w	r9, r9, r1
 8004770:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
            Emi =   BCi ^((~BCo)&  BCu );
 8004774:	ea27 0a03 	bic.w	sl, r7, r3
 8004778:	ea8a 0505 	eor.w	r5, sl, r5
            Eme =   BCe ^((~BCi)&  BCo );
 800477c:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
            Emi =   BCi ^((~BCo)&  BCu );
 8004780:	ea24 0902 	bic.w	r9, r4, r2
 8004784:	952e      	str	r5, [sp, #184]	; 0xb8
 8004786:	ea89 0508 	eor.w	r5, r9, r8
            Emo =   BCo ^((~BCu)&  BCa );
 800478a:	ea2c 0807 	bic.w	r8, ip, r7
 800478e:	ea88 0303 	eor.w	r3, r8, r3
            Emi =   BCi ^((~BCo)&  BCu );
 8004792:	952f      	str	r5, [sp, #188]	; 0xbc
            Emo =   BCo ^((~BCu)&  BCa );
 8004794:	ea2e 0504 	bic.w	r5, lr, r4
            Emu =   BCu ^((~BCa)&  BCe );
 8004798:	ea26 0c0c 	bic.w	ip, r6, ip
            Emo =   BCo ^((~BCu)&  BCa );
 800479c:	9314      	str	r3, [sp, #80]	; 0x50
 800479e:	ea85 0302 	eor.w	r3, r5, r2
            Emu =   BCu ^((~BCa)&  BCe );
 80047a2:	ea21 010e 	bic.w	r1, r1, lr
            Emo =   BCo ^((~BCu)&  BCa );
 80047a6:	9315      	str	r3, [sp, #84]	; 0x54
            Emu =   BCu ^((~BCa)&  BCe );
 80047a8:	ea8c 0307 	eor.w	r3, ip, r7
 80047ac:	9322      	str	r3, [sp, #136]	; 0x88
 80047ae:	ea81 0304 	eor.w	r3, r1, r4
 80047b2:	9323      	str	r3, [sp, #140]	; 0x8c

            Abi ^= Di;
 80047b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80047b8:	ea8b 0903 	eor.w	r9, fp, r3
 80047bc:	9b06      	ldr	r3, [sp, #24]
 80047be:	ea83 0a02 	eor.w	sl, r3, r2
            BCa = ROL(Abi, 62);
            Ago ^= Do;
 80047c2:	9b07      	ldr	r3, [sp, #28]
 80047c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80047c6:	ea83 0c02 	eor.w	ip, r3, r2
 80047ca:	9b08      	ldr	r3, [sp, #32]
 80047cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80047ce:	ea83 0702 	eor.w	r7, r3, r2
            BCe = ROL(Ago, 55);
            Aku ^= Du;
 80047d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80047d6:	ea83 0402 	eor.w	r4, r3, r2
 80047da:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80047dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047de:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Aku, 39);
            Ama ^= Da;
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            BCa = ROL(Abi, 62);
 80047e6:	ea4f 0699 	mov.w	r6, r9, lsr #2
            Ama ^= Da;
 80047ea:	ea83 0b02 	eor.w	fp, r3, r2
            BCe = ROL(Ago, 55);
 80047ee:	ea4f 2e5c 	mov.w	lr, ip, lsr #9
            Ama ^= Da;
 80047f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80047f4:	9b03      	ldr	r3, [sp, #12]
            BCa = ROL(Abi, 62);
 80047f6:	ea46 768a 	orr.w	r6, r6, sl, lsl #30
            BCe = ROL(Ago, 55);
 80047fa:	ea4e 5ec7 	orr.w	lr, lr, r7, lsl #23
            BCa = ROL(Abi, 62);
 80047fe:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
            BCe = ROL(Ago, 55);
 8004802:	0a7f      	lsrs	r7, r7, #9
 8004804:	ea47 55cc 	orr.w	r5, r7, ip, lsl #23
            BCa = ROL(Abi, 62);
 8004808:	ea4a 7989 	orr.w	r9, sl, r9, lsl #30
            BCi = ROL(Aku, 39);
 800480c:	ea4f 6c54 	mov.w	ip, r4, lsr #25
            Ama ^= Da;
 8004810:	ea83 0a02 	eor.w	sl, r3, r2
            BCo = ROL(Ama, 41);
            Ase ^= De;
 8004814:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8004816:	9b04      	ldr	r3, [sp, #16]
            BCi = ROL(Aku, 39);
 8004818:	ea4c 1cc1 	orr.w	ip, ip, r1, lsl #7
            BCo = ROL(Ama, 41);
 800481c:	ea4f 57da 	mov.w	r7, sl, lsr #23
            BCi = ROL(Aku, 39);
 8004820:	0e49      	lsrs	r1, r1, #25
 8004822:	ea41 18c4 	orr.w	r8, r1, r4, lsl #7
            BCo = ROL(Ama, 41);
 8004826:	ea47 274b 	orr.w	r7, r7, fp, lsl #9
 800482a:	ea4f 51db 	mov.w	r1, fp, lsr #23
            Ase ^= De;
 800482e:	ea83 0b02 	eor.w	fp, r3, r2
 8004832:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8004834:	9b05      	ldr	r3, [sp, #20]
            BCo = ROL(Ama, 41);
 8004836:	ea41 214a 	orr.w	r1, r1, sl, lsl #9
            Ase ^= De;
 800483a:	ea83 0a02 	eor.w	sl, r3, r2
            BCu = ROL(Ase,  2);
 800483e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004842:	ea43 729a 	orr.w	r2, r3, sl, lsr #30
            Esa =   BCa ^((~BCe)&  BCi );
 8004846:	ea28 0305 	bic.w	r3, r8, r5
 800484a:	ea83 0309 	eor.w	r3, r3, r9
            BCu = ROL(Ase,  2);
 800484e:	ea4f 048a 	mov.w	r4, sl, lsl #2
            Esa =   BCa ^((~BCe)&  BCi );
 8004852:	ea2c 0a0e 	bic.w	sl, ip, lr
 8004856:	ea8a 0a06 	eor.w	sl, sl, r6
 800485a:	9329      	str	r3, [sp, #164]	; 0xa4
            Ese =   BCe ^((~BCi)&  BCo );
 800485c:	ea21 030c 	bic.w	r3, r1, ip
            Esa =   BCa ^((~BCe)&  BCi );
 8004860:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
            Ese =   BCe ^((~BCi)&  BCo );
 8004864:	ea83 030e 	eor.w	r3, r3, lr
 8004868:	ea27 0a08 	bic.w	sl, r7, r8
            BCu = ROL(Ase,  2);
 800486c:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
            Ese =   BCe ^((~BCi)&  BCo );
 8004870:	9335      	str	r3, [sp, #212]	; 0xd4
 8004872:	ea8a 0305 	eor.w	r3, sl, r5
 8004876:	9336      	str	r3, [sp, #216]	; 0xd8
            Esi =   BCi ^((~BCo)&  BCu );
 8004878:	ea24 0307 	bic.w	r3, r4, r7
 800487c:	ea83 0308 	eor.w	r3, r3, r8
 8004880:	931d      	str	r3, [sp, #116]	; 0x74
            Eso =   BCo ^((~BCu)&  BCa );
 8004882:	ea29 0304 	bic.w	r3, r9, r4
 8004886:	407b      	eors	r3, r7
 8004888:	932b      	str	r3, [sp, #172]	; 0xac
            Esu =   BCu ^((~BCa)&  BCe );
 800488a:	ea2e 0306 	bic.w	r3, lr, r6
            Esi =   BCi ^((~BCo)&  BCu );
 800488e:	ea22 0a01 	bic.w	sl, r2, r1
            Esu =   BCu ^((~BCa)&  BCe );
 8004892:	ea25 0909 	bic.w	r9, r5, r9
 8004896:	4053      	eors	r3, r2
            Esi =   BCi ^((~BCo)&  BCu );
 8004898:	ea8a 0c0c 	eor.w	ip, sl, ip
            Esu =   BCu ^((~BCa)&  BCe );
 800489c:	9310      	str	r3, [sp, #64]	; 0x40
 800489e:	ea89 0304 	eor.w	r3, r9, r4
            Esi =   BCi ^((~BCo)&  BCu );
 80048a2:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
            Esu =   BCu ^((~BCa)&  BCe );
 80048a6:	9311      	str	r3, [sp, #68]	; 0x44
            Eso =   BCo ^((~BCu)&  BCa );
 80048a8:	ea26 0c02 	bic.w	ip, r6, r2

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 80048ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ae:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            Eso =   BCo ^((~BCu)&  BCa );
 80048b0:	ea8c 0101 	eor.w	r1, ip, r1
 80048b4:	912a      	str	r1, [sp, #168]	; 0xa8
            BCa = Eba^Ega^Eka^Ema^Esa;
 80048b6:	405a      	eors	r2, r3
 80048b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80048ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048bc:	ea83 0601 	eor.w	r6, r3, r1
 80048c0:	991a      	ldr	r1, [sp, #104]	; 0x68
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80048c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
            BCa = Eba^Ega^Eka^Ema^Esa;
 80048c4:	404a      	eors	r2, r1
 80048c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80048c8:	404e      	eors	r6, r1
 80048ca:	9939      	ldr	r1, [sp, #228]	; 0xe4
 80048cc:	404a      	eors	r2, r1
 80048ce:	993a      	ldr	r1, [sp, #232]	; 0xe8
 80048d0:	404e      	eors	r6, r1
 80048d2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80048d4:	404a      	eors	r2, r1
 80048d6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80048d8:	404e      	eors	r6, r1
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80048da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80048dc:	ea83 0901 	eor.w	r9, r3, r1
 80048e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80048e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80048e4:	ea83 0801 	eor.w	r8, r3, r1
 80048e8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80048ea:	9920      	ldr	r1, [sp, #128]	; 0x80
            BCo = Ebo^Ego^Eko^Emo^Eso;
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80048ec:	f8dd e0f4 	ldr.w	lr, [sp, #244]	; 0xf4
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80048f0:	ea89 0903 	eor.w	r9, r9, r3
 80048f4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80048f6:	ea88 0803 	eor.w	r8, r8, r3
 80048fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048fc:	ea89 0903 	eor.w	r9, r9, r3
 8004900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004902:	ea88 0803 	eor.w	r8, r8, r3
 8004906:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8004908:	ea89 0903 	eor.w	r9, r9, r3
 800490c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800490e:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8004912:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8004914:	ea83 0c01 	eor.w	ip, r3, r1
 8004918:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800491a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800491c:	ea83 0701 	eor.w	r7, r3, r1
 8004920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004922:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004924:	ea8c 0c03 	eor.w	ip, ip, r3
 8004928:	404f      	eors	r7, r1
 800492a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800492c:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800492e:	ea8c 0c03 	eor.w	ip, ip, r3
 8004932:	404f      	eors	r7, r1
 8004934:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004936:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004938:	ea8c 0c03 	eor.w	ip, ip, r3
 800493c:	404f      	eors	r7, r1
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800493e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004940:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8004942:	ea83 0501 	eor.w	r5, r3, r1
 8004946:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004948:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800494a:	ea83 0401 	eor.w	r4, r3, r1
 800494e:	9926      	ldr	r1, [sp, #152]	; 0x98
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8004950:	9b1e      	ldr	r3, [sp, #120]	; 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8004952:	404d      	eors	r5, r1
 8004954:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8004956:	404c      	eors	r4, r1
 8004958:	9914      	ldr	r1, [sp, #80]	; 0x50
 800495a:	404d      	eors	r5, r1
 800495c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800495e:	404c      	eors	r4, r1
 8004960:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004962:	404d      	eors	r5, r1
 8004964:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004966:	404c      	eors	r4, r1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8004968:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800496a:	4059      	eors	r1, r3
 800496c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800496e:	ea83 0e0e 	eor.w	lr, r3, lr
 8004972:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004974:	4059      	eors	r1, r3
 8004976:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004978:	ea8e 0e03 	eor.w	lr, lr, r3
 800497c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800497e:	4059      	eors	r1, r3
 8004980:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004982:	ea8e 0e03 	eor.w	lr, lr, r3
 8004986:	9b10      	ldr	r3, [sp, #64]	; 0x40

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8004988:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800498c:	4059      	eors	r1, r3
 800498e:	9b11      	ldr	r3, [sp, #68]	; 0x44
            Da = BCu^ROL(BCe, 1);
 8004990:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8004994:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8004998:	ea8e 0e03 	eor.w	lr, lr, r3
            Da = BCu^ROL(BCe, 1);
 800499c:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 80049a0:	ea8b 0301 	eor.w	r3, fp, r1
            De = BCa^ROL(BCi, 1);
 80049a4:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
            Da = BCu^ROL(BCe, 1);
 80049a8:	9302      	str	r3, [sp, #8]
            De = BCa^ROL(BCi, 1);
 80049aa:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
            Da = BCu^ROL(BCe, 1);
 80049ae:	ea8a 030e 	eor.w	r3, sl, lr
            De = BCa^ROL(BCi, 1);
 80049b2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
            Da = BCu^ROL(BCe, 1);
 80049b6:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 80049b8:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 80049bc:	ea8b 0302 	eor.w	r3, fp, r2
            Di = BCe^ROL(BCo, 1);
 80049c0:	ea4f 0b45 	mov.w	fp, r5, lsl #1
            De = BCa^ROL(BCi, 1);
 80049c4:	9304      	str	r3, [sp, #16]
            Di = BCe^ROL(BCo, 1);
 80049c6:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 80049ca:	ea8a 0306 	eor.w	r3, sl, r6
            Di = BCe^ROL(BCo, 1);
 80049ce:	ea4f 0a44 	mov.w	sl, r4, lsl #1
            De = BCa^ROL(BCi, 1);
 80049d2:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 80049d4:	ea4a 7ad5 	orr.w	sl, sl, r5, lsr #31
 80049d8:	ea8b 0309 	eor.w	r3, fp, r9
 80049dc:	9306      	str	r3, [sp, #24]
 80049de:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 80049e2:	ea4f 084e 	mov.w	r8, lr, lsl #1
 80049e6:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 80049ea:	0049      	lsls	r1, r1, #1
 80049ec:	ea41 71de 	orr.w	r1, r1, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 80049f0:	9307      	str	r3, [sp, #28]
            Do = BCi^ROL(BCu, 1);
 80049f2:	ea81 030c 	eor.w	r3, r1, ip
 80049f6:	9308      	str	r3, [sp, #32]
 80049f8:	ea88 0307 	eor.w	r3, r8, r7
            Du = BCo^ROL(BCa, 1);
 80049fc:	0077      	lsls	r7, r6, #1
 80049fe:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
            Do = BCi^ROL(BCu, 1);
 8004a08:	9309      	str	r3, [sp, #36]	; 0x24
            Du = BCo^ROL(BCa, 1);
 8004a0a:	ea82 0305 	eor.w	r3, r2, r5
 8004a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a10:	ea87 0304 	eor.w	r3, r7, r4

            Eba ^= Da;
 8004a14:	9a02      	ldr	r2, [sp, #8]
            Du = BCo^ROL(BCa, 1);
 8004a16:	930b      	str	r3, [sp, #44]	; 0x2c
            Eba ^= Da;
 8004a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a1a:	ea83 0702 	eor.w	r7, r3, r2
 8004a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a20:	9a03      	ldr	r2, [sp, #12]
 8004a22:	ea83 0b02 	eor.w	fp, r3, r2
            BCa = Eba;
            Ege ^= De;
 8004a26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a28:	9a04      	ldr	r2, [sp, #16]
 8004a2a:	ea83 0a02 	eor.w	sl, r3, r2
 8004a2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a30:	9a05      	ldr	r2, [sp, #20]
            BCe = ROL(Ege, 44);
 8004a32:	ea4f 541a 	mov.w	r4, sl, lsr #20
            Ege ^= De;
 8004a36:	ea83 0602 	eor.w	r6, r3, r2
            Eki ^= Di;
 8004a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3c:	9a06      	ldr	r2, [sp, #24]
            BCe = ROL(Ege, 44);
 8004a3e:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
 8004a42:	0d36      	lsrs	r6, r6, #20
 8004a44:	ea46 360a 	orr.w	r6, r6, sl, lsl #12
            Eki ^= Di;
 8004a48:	ea83 0a02 	eor.w	sl, r3, r2
 8004a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a4e:	9a07      	ldr	r2, [sp, #28]
 8004a50:	ea83 0902 	eor.w	r9, r3, r2
            BCi = ROL(Eki, 43);
            Emo ^= Do;
 8004a54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a56:	9a08      	ldr	r2, [sp, #32]
 8004a58:	ea83 0c02 	eor.w	ip, r3, r2
 8004a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a60:	ea83 0502 	eor.w	r5, r3, r2
            BCo = ROL(Emo, 21);
 8004a64:	ea4f 524c 	mov.w	r2, ip, lsl #21
 8004a68:	ea42 22d5 	orr.w	r2, r2, r5, lsr #11
            Esu ^= Du;
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            BCo = ROL(Emo, 21);
 8004a6e:	ea4f 5e45 	mov.w	lr, r5, lsl #21
            Esu ^= Du;
 8004a72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a74:	405d      	eors	r5, r3
            BCo = ROL(Emo, 21);
 8004a76:	ea4e 2edc 	orr.w	lr, lr, ip, lsr #11
            Esu ^= Du;
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004a7e:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8004a82:	ea85 050c 	eor.w	r5, r5, ip
            BCu = ROL(Esu, 14);
 8004a86:	ea4f 3c85 	mov.w	ip, r5, lsl #14
 8004a8a:	ea4c 4c93 	orr.w	ip, ip, r3, lsr #18
 8004a8e:	039b      	lsls	r3, r3, #14
 8004a90:	ea43 4395 	orr.w	r3, r3, r5, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8004a94:	9d01      	ldr	r5, [sp, #4]
 8004a96:	68ad      	ldr	r5, [r5, #8]
 8004a98:	950c      	str	r5, [sp, #48]	; 0x30
 8004a9a:	9d01      	ldr	r5, [sp, #4]
            BCi = ROL(Eki, 43);
 8004a9c:	ea4f 585a 	mov.w	r8, sl, lsr #21
 8004aa0:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8004aa4:	68ed      	ldr	r5, [r5, #12]
            BCi = ROL(Eki, 43);
 8004aa6:	ea4f 5959 	mov.w	r9, r9, lsr #21
 8004aaa:	ea49 21ca 	orr.w	r1, r9, sl, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8004aae:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8004ab2:	ea28 0a04 	bic.w	sl, r8, r4
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8004ab6:	ea8b 0505 	eor.w	r5, fp, r5
 8004aba:	950d      	str	r5, [sp, #52]	; 0x34
 8004abc:	ea87 0909 	eor.w	r9, r7, r9
            Aba =   BCa ^((~BCe)&  BCi );
 8004ac0:	4655      	mov	r5, sl
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8004ac2:	ea89 0905 	eor.w	r9, r9, r5
 8004ac6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004ac8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8004acc:	ea21 0a06 	bic.w	sl, r1, r6
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8004ad0:	ea85 050a 	eor.w	r5, r5, sl
 8004ad4:	950d      	str	r5, [sp, #52]	; 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 8004ad6:	ea2e 0501 	bic.w	r5, lr, r1
 8004ada:	4075      	eors	r5, r6
 8004adc:	ea22 0908 	bic.w	r9, r2, r8
 8004ae0:	950f      	str	r5, [sp, #60]	; 0x3c
            Abi =   BCi ^((~BCo)&  BCu );
 8004ae2:	ea2c 050e 	bic.w	r5, ip, lr
            Abe =   BCe ^((~BCi)&  BCo );
 8004ae6:	ea89 0904 	eor.w	r9, r9, r4
            Abi =   BCi ^((~BCo)&  BCu );
 8004aea:	4069      	eors	r1, r5
            Abo =   BCo ^((~BCu)&  BCa );
 8004aec:	ea27 0503 	bic.w	r5, r7, r3
            Abu =   BCu ^((~BCa)&  BCe );
 8004af0:	ea24 0707 	bic.w	r7, r4, r7
 8004af4:	ea26 060b 	bic.w	r6, r6, fp
            Abe =   BCe ^((~BCi)&  BCo );
 8004af8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
            Abi =   BCi ^((~BCo)&  BCu );
 8004afc:	9111      	str	r1, [sp, #68]	; 0x44
 8004afe:	ea23 0902 	bic.w	r9, r3, r2
            Abo =   BCo ^((~BCu)&  BCa );
 8004b02:	ea2b 010c 	bic.w	r1, fp, ip
 8004b06:	406a      	eors	r2, r5
            Abu =   BCu ^((~BCa)&  BCe );
 8004b08:	407b      	eors	r3, r7
            Abo =   BCo ^((~BCu)&  BCa );
 8004b0a:	9212      	str	r2, [sp, #72]	; 0x48
            Abu =   BCu ^((~BCa)&  BCe );
 8004b0c:	9314      	str	r3, [sp, #80]	; 0x50
            Abo =   BCo ^((~BCu)&  BCa );
 8004b0e:	ea81 020e 	eor.w	r2, r1, lr
            Abu =   BCu ^((~BCa)&  BCe );
 8004b12:	ea86 030c 	eor.w	r3, r6, ip
            Abo =   BCo ^((~BCu)&  BCa );
 8004b16:	9213      	str	r2, [sp, #76]	; 0x4c
            Abu =   BCu ^((~BCa)&  BCe );
 8004b18:	9315      	str	r3, [sp, #84]	; 0x54

            Ebo ^= Do;
 8004b1a:	9a08      	ldr	r2, [sp, #32]
 8004b1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004b1e:	ea83 0102 	eor.w	r1, r3, r2
 8004b22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b26:	ea83 0e02 	eor.w	lr, r3, r2
            BCa = ROL(Ebo, 28);
 8004b2a:	ea4f 7b0e 	mov.w	fp, lr, lsl #28
            Egu ^= Du;
 8004b2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            BCa = ROL(Ebo, 28);
 8004b32:	ea4b 1b11 	orr.w	fp, fp, r1, lsr #4
 8004b36:	0709      	lsls	r1, r1, #28
 8004b38:	ea41 141e 	orr.w	r4, r1, lr, lsr #4
            Egu ^= Du;
 8004b3c:	ea83 0e02 	eor.w	lr, r3, r2
 8004b40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b44:	ea83 0502 	eor.w	r5, r3, r2
            BCe = ROL(Egu, 20);
            Eka ^= Da;
 8004b48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004b4a:	9a02      	ldr	r2, [sp, #8]
            BCe = ROL(Egu, 20);
 8004b4c:	052e      	lsls	r6, r5, #20
            Eka ^= Da;
 8004b4e:	ea83 0a02 	eor.w	sl, r3, r2
 8004b52:	9a03      	ldr	r2, [sp, #12]
 8004b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            BCe = ROL(Egu, 20);
 8004b56:	ea46 361e 	orr.w	r6, r6, lr, lsr #12
            Abi =   BCi ^((~BCo)&  BCu );
 8004b5a:	ea89 0808 	eor.w	r8, r9, r8
            BCe = ROL(Egu, 20);
 8004b5e:	ea4f 5e0e 	mov.w	lr, lr, lsl #20
 8004b62:	ea4e 3115 	orr.w	r1, lr, r5, lsr #12
            Eka ^= Da;
 8004b66:	ea83 0902 	eor.w	r9, r3, r2
            Abi =   BCi ^((~BCo)&  BCu );
 8004b6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
            BCi = ROL(Eka, 3);
            Eme ^= De;
 8004b6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b70:	9d04      	ldr	r5, [sp, #16]
 8004b72:	f8dd c014 	ldr.w	ip, [sp, #20]
            BCo = ROL(Eme, 45);
            Esi ^= Di;
 8004b76:	f8dd e01c 	ldr.w	lr, [sp, #28]
            Eme ^= De;
 8004b7a:	406b      	eors	r3, r5
            BCi = ROL(Eka, 3);
 8004b7c:	ea4f 07c9 	mov.w	r7, r9, lsl #3
            Eme ^= De;
 8004b80:	9d17      	ldr	r5, [sp, #92]	; 0x5c
            BCi = ROL(Eka, 3);
 8004b82:	ea47 775a 	orr.w	r7, r7, sl, lsr #29
 8004b86:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004b8a:	ea4a 7259 	orr.w	r2, sl, r9, lsr #29
            Eme ^= De;
 8004b8e:	ea85 090c 	eor.w	r9, r5, ip
            BCo = ROL(Eme, 45);
 8004b92:	0cdd      	lsrs	r5, r3, #19
 8004b94:	ea45 3549 	orr.w	r5, r5, r9, lsl #13
 8004b98:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8004b9c:	ea49 3a43 	orr.w	sl, r9, r3, lsl #13
            Esi ^= Di;
 8004ba0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004ba4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004ba6:	ea83 0c0c 	eor.w	ip, r3, ip
 8004baa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            BCu = ROL(Esi, 61);
 8004bac:	ea4f 08dc 	mov.w	r8, ip, lsr #3
            Esi ^= Di;
 8004bb0:	ea83 030e 	eor.w	r3, r3, lr
            BCu = ROL(Esi, 61);
 8004bb4:	ea48 7843 	orr.w	r8, r8, r3, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8004bb8:	ea22 0e01 	bic.w	lr, r2, r1
            BCu = ROL(Esi, 61);
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	ea43 734c 	orr.w	r3, r3, ip, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8004bc2:	ea8e 0e04 	eor.w	lr, lr, r4
 8004bc6:	ea27 0c06 	bic.w	ip, r7, r6
 8004bca:	ea8c 0c0b 	eor.w	ip, ip, fp
 8004bce:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
            Age =   BCe ^((~BCi)&  BCo );
 8004bd2:	ea25 0e02 	bic.w	lr, r5, r2
 8004bd6:	ea8e 0e01 	eor.w	lr, lr, r1
            Aga =   BCa ^((~BCe)&  BCi );
 8004bda:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
            Age =   BCe ^((~BCi)&  BCo );
 8004bde:	ea2a 0c07 	bic.w	ip, sl, r7
 8004be2:	ea8c 0c06 	eor.w	ip, ip, r6
 8004be6:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
            Agi =   BCi ^((~BCo)&  BCu );
 8004bea:	ea28 0e05 	bic.w	lr, r8, r5
 8004bee:	ea8e 0202 	eor.w	r2, lr, r2
            Age =   BCe ^((~BCi)&  BCo );
 8004bf2:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
            Agi =   BCi ^((~BCo)&  BCu );
 8004bf6:	ea23 0c0a 	bic.w	ip, r3, sl
 8004bfa:	921a      	str	r2, [sp, #104]	; 0x68
 8004bfc:	ea8c 0207 	eor.w	r2, ip, r7
 8004c00:	921b      	str	r2, [sp, #108]	; 0x6c
            Ago =   BCo ^((~BCu)&  BCa );
 8004c02:	ea2b 0203 	bic.w	r2, fp, r3
 8004c06:	ea82 020a 	eor.w	r2, r2, sl
            Agu =   BCu ^((~BCa)&  BCe );
 8004c0a:	ea21 0104 	bic.w	r1, r1, r4
 8004c0e:	ea26 060b 	bic.w	r6, r6, fp
 8004c12:	4073      	eors	r3, r6
            Ago =   BCo ^((~BCu)&  BCa );
 8004c14:	921d      	str	r2, [sp, #116]	; 0x74
            Agu =   BCu ^((~BCa)&  BCe );
 8004c16:	ea81 0208 	eor.w	r2, r1, r8
 8004c1a:	921e      	str	r2, [sp, #120]	; 0x78
 8004c1c:	931f      	str	r3, [sp, #124]	; 0x7c

            Ebe ^= De;
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	9b24      	ldr	r3, [sp, #144]	; 0x90
            Ago =   BCo ^((~BCu)&  BCa );
 8004c22:	ea24 0708 	bic.w	r7, r4, r8
 8004c26:	407d      	eors	r5, r7
            Ebe ^= De;
 8004c28:	ea83 0702 	eor.w	r7, r3, r2
 8004c2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004c2e:	9a05      	ldr	r2, [sp, #20]
            Ago =   BCo ^((~BCu)&  BCa );
 8004c30:	951c      	str	r5, [sp, #112]	; 0x70
            Ebe ^= De;
 8004c32:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
 8004c36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c38:	9a06      	ldr	r2, [sp, #24]
            BCa = ROL(Ebe, 1);
 8004c3a:	ea4f 0846 	mov.w	r8, r6, lsl #1
            Egi ^= Di;
 8004c3e:	ea83 0402 	eor.w	r4, r3, r2
 8004c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c44:	9a07      	ldr	r2, [sp, #28]
            BCa = ROL(Ebe, 1);
 8004c46:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 8004c4a:	007f      	lsls	r7, r7, #1
 8004c4c:	ea47 7bd6 	orr.w	fp, r7, r6, lsr #31
            Egi ^= Di;
 8004c50:	ea83 0602 	eor.w	r6, r3, r2
            BCe = ROL(Egi, 6);
            Eko ^= Do;
 8004c54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c56:	9a08      	ldr	r2, [sp, #32]
 8004c58:	ea83 0502 	eor.w	r5, r3, r2
 8004c5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c60:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Eko, 25);
 8004c64:	066a      	lsls	r2, r5, #25
 8004c66:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
            Emu ^= Du;
 8004c6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = ROL(Eko, 25);
 8004c6c:	ea4f 6a41 	mov.w	sl, r1, lsl #25
            Emu ^= Du;
 8004c70:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCe = ROL(Egi, 6);
 8004c72:	ea4f 1c86 	mov.w	ip, r6, lsl #6
            Emu ^= Du;
 8004c76:	ea83 0701 	eor.w	r7, r3, r1
 8004c7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCe = ROL(Egi, 6);
 8004c7e:	ea4c 6c94 	orr.w	ip, ip, r4, lsr #26
 8004c82:	01a4      	lsls	r4, r4, #6
 8004c84:	ea44 6996 	orr.w	r9, r4, r6, lsr #26
            Emu ^= Du;
 8004c88:	ea83 0401 	eor.w	r4, r3, r1
            BCo = ROL(Emu, 8);
 8004c8c:	0221      	lsls	r1, r4, #8
 8004c8e:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
 8004c92:	023f      	lsls	r7, r7, #8
 8004c94:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
            Esa ^= Da;
 8004c98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c9a:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eko, 25);
 8004c9c:	ea4a 1ad5 	orr.w	sl, sl, r5, lsr #7
            Esa ^= Da;
 8004ca0:	4063      	eors	r3, r4
 8004ca2:	9d03      	ldr	r5, [sp, #12]
 8004ca4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004ca6:	406c      	eors	r4, r5
            BCu = ROL(Esa, 18);
 8004ca8:	ea4f 4e84 	mov.w	lr, r4, lsl #18
 8004cac:	ea4e 3e93 	orr.w	lr, lr, r3, lsr #14
 8004cb0:	049b      	lsls	r3, r3, #18
 8004cb2:	ea43 3394 	orr.w	r3, r3, r4, lsr #14
            Aka =   BCa ^((~BCe)&  BCi );
 8004cb6:	ea2a 040c 	bic.w	r4, sl, ip
 8004cba:	ea22 0509 	bic.w	r5, r2, r9
 8004cbe:	ea84 0408 	eor.w	r4, r4, r8
 8004cc2:	ea85 050b 	eor.w	r5, r5, fp
 8004cc6:	9421      	str	r4, [sp, #132]	; 0x84
            Ake =   BCe ^((~BCi)&  BCo );
 8004cc8:	ea27 0402 	bic.w	r4, r7, r2
 8004ccc:	ea84 0409 	eor.w	r4, r4, r9
            Aka =   BCa ^((~BCe)&  BCi );
 8004cd0:	9520      	str	r5, [sp, #128]	; 0x80
            Ake =   BCe ^((~BCi)&  BCo );
 8004cd2:	ea21 050a 	bic.w	r5, r1, sl
 8004cd6:	9422      	str	r4, [sp, #136]	; 0x88
 8004cd8:	ea85 040c 	eor.w	r4, r5, ip
            Aki =   BCi ^((~BCo)&  BCu );
 8004cdc:	ea23 0507 	bic.w	r5, r3, r7
 8004ce0:	406a      	eors	r2, r5
            Ake =   BCe ^((~BCi)&  BCo );
 8004ce2:	9423      	str	r4, [sp, #140]	; 0x8c
            Aki =   BCi ^((~BCo)&  BCu );
 8004ce4:	ea2e 0401 	bic.w	r4, lr, r1
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
 8004ce8:	ea29 090b 	bic.w	r9, r9, fp
            Aki =   BCi ^((~BCo)&  BCu );
 8004cec:	9224      	str	r2, [sp, #144]	; 0x90
 8004cee:	ea84 020a 	eor.w	r2, r4, sl
            Aku =   BCu ^((~BCa)&  BCe );
 8004cf2:	ea2c 0c08 	bic.w	ip, ip, r8
            Ako =   BCo ^((~BCu)&  BCa );
 8004cf6:	ea2b 0403 	bic.w	r4, fp, r3
            Aki =   BCi ^((~BCo)&  BCu );
 8004cfa:	9225      	str	r2, [sp, #148]	; 0x94
            Aku =   BCu ^((~BCa)&  BCe );
 8004cfc:	ea89 0303 	eor.w	r3, r9, r3
            Ako =   BCo ^((~BCu)&  BCa );
 8004d00:	ea28 020e 	bic.w	r2, r8, lr
 8004d04:	404a      	eors	r2, r1
            Aku =   BCu ^((~BCa)&  BCe );
 8004d06:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d08:	ea8c 030e 	eor.w	r3, ip, lr
            Ako =   BCo ^((~BCu)&  BCa );
 8004d0c:	9227      	str	r2, [sp, #156]	; 0x9c
            Aku =   BCu ^((~BCa)&  BCe );
 8004d0e:	9329      	str	r3, [sp, #164]	; 0xa4

            Ebu ^= Du;
 8004d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d12:	9b30      	ldr	r3, [sp, #192]	; 0xc0
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
            Eke ^= De;
 8004d14:	9905      	ldr	r1, [sp, #20]
            Ebu ^= Du;
 8004d16:	ea83 0502 	eor.w	r5, r3, r2
 8004d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d1c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004d1e:	4053      	eors	r3, r2
            BCa = ROL(Ebu, 27);
 8004d20:	ea4f 6bc3 	mov.w	fp, r3, lsl #27
 8004d24:	ea4b 1b55 	orr.w	fp, fp, r5, lsr #5
 8004d28:	06ed      	lsls	r5, r5, #27
 8004d2a:	ea45 1c53 	orr.w	ip, r5, r3, lsr #5
            Ega ^= Da;
 8004d2e:	9a02      	ldr	r2, [sp, #8]
 8004d30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004d32:	ea83 0a02 	eor.w	sl, r3, r2
 8004d36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004d38:	9a03      	ldr	r2, [sp, #12]
 8004d3a:	ea83 0602 	eor.w	r6, r3, r2
            Eke ^= De;
 8004d3e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004d40:	9a04      	ldr	r2, [sp, #16]
 8004d42:	405a      	eors	r2, r3
 8004d44:	9b33      	ldr	r3, [sp, #204]	; 0xcc
            BCe = ROL(Ega, 36);
 8004d46:	ea4f 7e1a 	mov.w	lr, sl, lsr #28
 8004d4a:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
            Eke ^= De;
 8004d4e:	ea83 0901 	eor.w	r9, r3, r1
            BCe = ROL(Ega, 36);
 8004d52:	0f36      	lsrs	r6, r6, #28
 8004d54:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
            BCi = ROL(Eke, 10);
 8004d58:	ea4f 2a89 	mov.w	sl, r9, lsl #10
 8004d5c:	ea4a 5a92 	orr.w	sl, sl, r2, lsr #22
            Emi ^= Di;
 8004d60:	9906      	ldr	r1, [sp, #24]
            BCi = ROL(Eke, 10);
 8004d62:	0293      	lsls	r3, r2, #10
            Emi ^= Di;
 8004d64:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8004d66:	ea82 0501 	eor.w	r5, r2, r1
 8004d6a:	9907      	ldr	r1, [sp, #28]
 8004d6c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            BCi = ROL(Eke, 10);
 8004d6e:	ea43 5399 	orr.w	r3, r3, r9, lsr #22
            Ako =   BCo ^((~BCu)&  BCa );
 8004d72:	407c      	eors	r4, r7
            Emi ^= Di;
 8004d74:	ea82 0901 	eor.w	r9, r2, r1
            Ako =   BCo ^((~BCu)&  BCa );
 8004d78:	9426      	str	r4, [sp, #152]	; 0x98
            BCo = ROL(Emi, 15);
            Eso ^= Do;
 8004d7a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004d7c:	9908      	ldr	r1, [sp, #32]
            BCo = ROL(Emi, 15);
 8004d7e:	ea4f 34c9 	mov.w	r4, r9, lsl #15
 8004d82:	ea44 4455 	orr.w	r4, r4, r5, lsr #17
 8004d86:	03ed      	lsls	r5, r5, #15
 8004d88:	ea45 4859 	orr.w	r8, r5, r9, lsr #17
            Eso ^= Do;
 8004d8c:	4051      	eors	r1, r2
 8004d8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d90:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            BCu = ROL(Eso, 56);
 8004d92:	ea4f 2911 	mov.w	r9, r1, lsr #8
            Eso ^= Do;
 8004d96:	ea82 0705 	eor.w	r7, r2, r5
            BCu = ROL(Eso, 56);
 8004d9a:	ea49 6907 	orr.w	r9, r9, r7, lsl #24
 8004d9e:	0a3f      	lsrs	r7, r7, #8
 8004da0:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
            Ama =   BCa ^((~BCe)&  BCi );
 8004da4:	ea23 010e 	bic.w	r1, r3, lr
 8004da8:	ea2a 0206 	bic.w	r2, sl, r6
 8004dac:	ea81 010c 	eor.w	r1, r1, ip
 8004db0:	ea82 020b 	eor.w	r2, r2, fp
 8004db4:	912a      	str	r1, [sp, #168]	; 0xa8
            Ame =   BCe ^((~BCi)&  BCo );
 8004db6:	ea28 0103 	bic.w	r1, r8, r3
 8004dba:	ea81 010e 	eor.w	r1, r1, lr
            Ama =   BCa ^((~BCe)&  BCi );
 8004dbe:	922b      	str	r2, [sp, #172]	; 0xac
            Ame =   BCe ^((~BCi)&  BCo );
 8004dc0:	ea24 020a 	bic.w	r2, r4, sl
 8004dc4:	4072      	eors	r2, r6
 8004dc6:	912c      	str	r1, [sp, #176]	; 0xb0
            Ami =   BCi ^((~BCo)&  BCu );
 8004dc8:	ea29 0108 	bic.w	r1, r9, r8
 8004dcc:	404b      	eors	r3, r1
            Ame =   BCe ^((~BCi)&  BCo );
 8004dce:	922d      	str	r2, [sp, #180]	; 0xb4
            Ami =   BCi ^((~BCo)&  BCu );
 8004dd0:	ea27 0204 	bic.w	r2, r7, r4
            Amo =   BCo ^((~BCu)&  BCa );
 8004dd4:	ea2c 0109 	bic.w	r1, ip, r9
            Ami =   BCi ^((~BCo)&  BCu );
 8004dd8:	932e      	str	r3, [sp, #184]	; 0xb8
 8004dda:	ea82 030a 	eor.w	r3, r2, sl
 8004dde:	932f      	str	r3, [sp, #188]	; 0xbc
            Amo =   BCo ^((~BCu)&  BCa );
 8004de0:	ea2b 0207 	bic.w	r2, fp, r7
 8004de4:	ea81 0308 	eor.w	r3, r1, r8
            Amu =   BCu ^((~BCa)&  BCe );
 8004de8:	ea2e 0c0c 	bic.w	ip, lr, ip
            Amo =   BCo ^((~BCu)&  BCa );
 8004dec:	9330      	str	r3, [sp, #192]	; 0xc0
 8004dee:	ea82 0304 	eor.w	r3, r2, r4
            Amu =   BCu ^((~BCa)&  BCe );
 8004df2:	ea26 060b 	bic.w	r6, r6, fp
            Amo =   BCo ^((~BCu)&  BCa );
 8004df6:	9331      	str	r3, [sp, #196]	; 0xc4
            Amu =   BCu ^((~BCa)&  BCe );
 8004df8:	ea8c 0309 	eor.w	r3, ip, r9
 8004dfc:	9332      	str	r3, [sp, #200]	; 0xc8
 8004dfe:	ea86 0307 	eor.w	r3, r6, r7

            Ebi ^= Di;
 8004e02:	9a06      	ldr	r2, [sp, #24]
            Amu =   BCu ^((~BCa)&  BCe );
 8004e04:	9333      	str	r3, [sp, #204]	; 0xcc
            Ebi ^= Di;
 8004e06:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
 8004e08:	9908      	ldr	r1, [sp, #32]
            Ebi ^= Di;
 8004e0a:	ea83 0902 	eor.w	r9, r3, r2
 8004e0e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8004e10:	9a07      	ldr	r2, [sp, #28]
 8004e12:	ea83 0802 	eor.w	r8, r3, r2
            Ego ^= Do;
 8004e16:	9a37      	ldr	r2, [sp, #220]	; 0xdc
            BCa = ROL(Ebi, 62);
 8004e18:	ea4f 0c99 	mov.w	ip, r9, lsr #2
            Ego ^= Do;
 8004e1c:	ea82 0601 	eor.w	r6, r2, r1
 8004e20:	9a38      	ldr	r2, [sp, #224]	; 0xe0
            BCe = ROL(Ego, 55);
            Eku ^= Du;
 8004e22:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCa = ROL(Ebi, 62);
 8004e24:	ea4c 7c88 	orr.w	ip, ip, r8, lsl #30
 8004e28:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8004e2c:	ea48 7389 	orr.w	r3, r8, r9, lsl #30
            Ego ^= Do;
 8004e30:	ea82 0805 	eor.w	r8, r2, r5
            Eku ^= Du;
 8004e34:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8004e36:	ea82 0501 	eor.w	r5, r2, r1
 8004e3a:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8004e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCi = ROL(Eku, 39);
 8004e3e:	ea4f 6b55 	mov.w	fp, r5, lsr #25
            Eku ^= Du;
 8004e42:	ea82 0401 	eor.w	r4, r2, r1
            BCi = ROL(Eku, 39);
 8004e46:	ea4b 1bc4 	orr.w	fp, fp, r4, lsl #7
            Ema ^= Da;
 8004e4a:	9a39      	ldr	r2, [sp, #228]	; 0xe4
            BCi = ROL(Eku, 39);
 8004e4c:	0e61      	lsrs	r1, r4, #25
            Ema ^= Da;
 8004e4e:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eku, 39);
 8004e50:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
            Ema ^= Da;
 8004e54:	4062      	eors	r2, r4
 8004e56:	9d03      	ldr	r5, [sp, #12]
 8004e58:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004e5a:	ea84 0a05 	eor.w	sl, r4, r5
            BCo = ROL(Ema, 41);
 8004e5e:	ea4f 54da 	mov.w	r4, sl, lsr #23
 8004e62:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
            Ese ^= De;
 8004e66:	9d04      	ldr	r5, [sp, #16]
            BCo = ROL(Ema, 41);
 8004e68:	0dd7      	lsrs	r7, r2, #23
            Ese ^= De;
 8004e6a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8004e6c:	ea82 0905 	eor.w	r9, r2, r5
 8004e70:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8004e72:	9d05      	ldr	r5, [sp, #20]
            BCe = ROL(Ego, 55);
 8004e74:	ea4f 2e56 	mov.w	lr, r6, lsr #9
 8004e78:	ea4e 5ec8 	orr.w	lr, lr, r8, lsl #23
            BCo = ROL(Ema, 41);
 8004e7c:	ea47 274a 	orr.w	r7, r7, sl, lsl #9
            BCe = ROL(Ego, 55);
 8004e80:	ea4f 2858 	mov.w	r8, r8, lsr #9
            Ese ^= De;
 8004e84:	ea82 0a05 	eor.w	sl, r2, r5
            BCe = ROL(Ego, 55);
 8004e88:	ea48 58c6 	orr.w	r8, r8, r6, lsl #23
            BCu = ROL(Ese, 2);
 8004e8c:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8004e90:	ea46 7599 	orr.w	r5, r6, r9, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 8004e94:	ea2b 020e 	bic.w	r2, fp, lr
            BCu = ROL(Ese, 2);
 8004e98:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8004e9c:	ea49 7a9a 	orr.w	sl, r9, sl, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 8004ea0:	ea82 020c 	eor.w	r2, r2, ip
 8004ea4:	ea21 0908 	bic.w	r9, r1, r8
 8004ea8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004eaa:	ea89 0203 	eor.w	r2, r9, r3
 8004eae:	9234      	str	r2, [sp, #208]	; 0xd0
            Ase =   BCe ^((~BCi)&  BCo );
 8004eb0:	ea27 060b 	bic.w	r6, r7, fp
 8004eb4:	ea24 0201 	bic.w	r2, r4, r1
 8004eb8:	ea86 060e 	eor.w	r6, r6, lr
 8004ebc:	ea82 0208 	eor.w	r2, r2, r8
 8004ec0:	9635      	str	r6, [sp, #212]	; 0xd4
 8004ec2:	9236      	str	r2, [sp, #216]	; 0xd8
            Asi =   BCi ^((~BCo)&  BCu );
 8004ec4:	ea2a 0607 	bic.w	r6, sl, r7
 8004ec8:	ea25 0204 	bic.w	r2, r5, r4
 8004ecc:	404a      	eors	r2, r1
 8004ece:	ea86 060b 	eor.w	r6, r6, fp
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
 8004ed2:	ea2e 0e0c 	bic.w	lr, lr, ip
            Asi =   BCi ^((~BCo)&  BCu );
 8004ed6:	9637      	str	r6, [sp, #220]	; 0xdc
 8004ed8:	9238      	str	r2, [sp, #224]	; 0xe0
            Asu =   BCu ^((~BCa)&  BCe );
 8004eda:	ea28 0603 	bic.w	r6, r8, r3
            Aso =   BCo ^((~BCu)&  BCa );
 8004ede:	ea23 0205 	bic.w	r2, r3, r5
            Asu =   BCu ^((~BCa)&  BCe );
 8004ee2:	ea8e 030a 	eor.w	r3, lr, sl
 8004ee6:	933b      	str	r3, [sp, #236]	; 0xec
        for( round = 0; round < NROUNDS; round += 2 )
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	3310      	adds	r3, #16
            Aso =   BCo ^((~BCu)&  BCa );
 8004eec:	4062      	eors	r2, r4
        for( round = 0; round < NROUNDS; round += 2 )
 8004eee:	9301      	str	r3, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 8004ef0:	923a      	str	r2, [sp, #232]	; 0xe8
        for( round = 0; round < NROUNDS; round += 2 )
 8004ef2:	4b40      	ldr	r3, [pc, #256]	; (8004ff4 <KeccakF1600_StatePermute+0xe58>)
 8004ef4:	9a01      	ldr	r2, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 8004ef6:	ea2c 090a 	bic.w	r9, ip, sl
 8004efa:	ea89 0107 	eor.w	r1, r9, r7
        for( round = 0; round < NROUNDS; round += 2 )
 8004efe:	4293      	cmp	r3, r2
            Aso =   BCo ^((~BCu)&  BCa );
 8004f00:	9139      	str	r1, [sp, #228]	; 0xe4
            Asu =   BCu ^((~BCa)&  BCe );
 8004f02:	ea86 0605 	eor.w	r6, r6, r5
        for( round = 0; round < NROUNDS; round += 2 )
 8004f06:	f47f a9c7 	bne.w	8004298 <KeccakF1600_StatePermute+0xfc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8004f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f0c:	6003      	str	r3, [r0, #0]
 8004f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f10:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 8004f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f14:	6083      	str	r3, [r0, #8]
 8004f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f18:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 8004f1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f1c:	6103      	str	r3, [r0, #16]
 8004f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f20:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 8004f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f24:	6183      	str	r3, [r0, #24]
 8004f26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f28:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 8004f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f2c:	6203      	str	r3, [r0, #32]
 8004f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f30:	6243      	str	r3, [r0, #36]	; 0x24
        state[ 5] = Aga;
 8004f32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f34:	6283      	str	r3, [r0, #40]	; 0x28
 8004f36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f38:	62c3      	str	r3, [r0, #44]	; 0x2c
        state[ 6] = Age;
 8004f3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004f3c:	6303      	str	r3, [r0, #48]	; 0x30
 8004f3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f40:	6343      	str	r3, [r0, #52]	; 0x34
        state[ 7] = Agi;
 8004f42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004f44:	6383      	str	r3, [r0, #56]	; 0x38
 8004f46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f48:	63c3      	str	r3, [r0, #60]	; 0x3c
        state[ 8] = Ago;
 8004f4a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004f4c:	6403      	str	r3, [r0, #64]	; 0x40
 8004f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f50:	6443      	str	r3, [r0, #68]	; 0x44
        state[ 9] = Agu;
 8004f52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f54:	6483      	str	r3, [r0, #72]	; 0x48
 8004f56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f58:	64c3      	str	r3, [r0, #76]	; 0x4c
        state[10] = Aka;
 8004f5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f5c:	6503      	str	r3, [r0, #80]	; 0x50
 8004f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f60:	6543      	str	r3, [r0, #84]	; 0x54
        state[11] = Ake;
 8004f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f64:	6583      	str	r3, [r0, #88]	; 0x58
 8004f66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f68:	65c3      	str	r3, [r0, #92]	; 0x5c
        state[12] = Aki;
 8004f6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004f6c:	6603      	str	r3, [r0, #96]	; 0x60
 8004f6e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004f70:	6643      	str	r3, [r0, #100]	; 0x64
        state[13] = Ako;
 8004f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f74:	6683      	str	r3, [r0, #104]	; 0x68
 8004f76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004f78:	66c3      	str	r3, [r0, #108]	; 0x6c
        state[14] = Aku;
 8004f7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004f7c:	6703      	str	r3, [r0, #112]	; 0x70
 8004f7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004f80:	6743      	str	r3, [r0, #116]	; 0x74
        state[15] = Ama;
 8004f82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004f84:	6783      	str	r3, [r0, #120]	; 0x78
 8004f86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8004f88:	67c3      	str	r3, [r0, #124]	; 0x7c
        state[16] = Ame;
 8004f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8004f8c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8004f90:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8004f92:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
        state[17] = Ami;
 8004f96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8004f98:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8004f9c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8004f9e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        state[18] = Amo;
 8004fa2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8004fa4:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8004fa8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004faa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
        state[19] = Amu;
 8004fae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8004fb0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8004fb4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8004fb6:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        state[20] = Asa;
 8004fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fbc:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8004fc0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8004fc2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
        state[21] = Ase;
 8004fc6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8004fc8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8004fcc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8004fce:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
        state[22] = Asi;
 8004fd2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8004fd4:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 8004fd8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8004fda:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        state[23] = Aso;
 8004fde:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004fe0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
        state[24] = Asu;
 8004fe4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        state[23] = Aso;
 8004fe6:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
        state[24] = Asu;
 8004fea:	e9c0 3630 	strd	r3, r6, [r0, #192]	; 0xc0

        #undef    round
}
 8004fee:	b03f      	add	sp, #252	; 0xfc
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	08006c80 	.word	0x08006c80

08004ff8 <Reset_Handler>:
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	e003      	b.n	8005004 <LoopCopyDataInit>

08004ffc <CopyDataInit>:
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <LoopForever+0x2>)
 8004ffe:	585b      	ldr	r3, [r3, r1]
 8005000:	5043      	str	r3, [r0, r1]
 8005002:	3104      	adds	r1, #4

08005004 <LoopCopyDataInit>:
 8005004:	480a      	ldr	r0, [pc, #40]	; (8005030 <LoopForever+0x6>)
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <LoopForever+0xa>)
 8005008:	1842      	adds	r2, r0, r1
 800500a:	429a      	cmp	r2, r3
 800500c:	d3f6      	bcc.n	8004ffc <CopyDataInit>
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <LoopForever+0xe>)
 8005010:	e002      	b.n	8005018 <LoopFillZerobss>

08005012 <FillZerobss>:
 8005012:	2300      	movs	r3, #0
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	3204      	adds	r2, #4

08005018 <LoopFillZerobss>:
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <LoopForever+0x12>)
 800501a:	429a      	cmp	r2, r3
 800501c:	d3f9      	bcc.n	8005012 <FillZerobss>
 800501e:	f3af 8000 	nop.w
 8005022:	f000 f851 	bl	80050c8 <__libc_init_array>
 8005026:	f7fd f873 	bl	8002110 <main>

0800502a <LoopForever>:
 800502a:	e7fe      	b.n	800502a <LoopForever>
 800502c:	08006d94 	.word	0x08006d94
 8005030:	10000000 	.word	0x10000000
 8005034:	10000844 	.word	0x10000844
 8005038:	10000844 	.word	0x10000844
 800503c:	10000f48 	.word	0x10000f48

08005040 <BusFault_Handler>:
 8005040:	e7fe      	b.n	8005040 <BusFault_Handler>
 8005042:	0000      	movs	r0, r0

08005044 <calloc>:
 8005044:	b410      	push	{r4}
 8005046:	4c04      	ldr	r4, [pc, #16]	; (8005058 <calloc+0x14>)
 8005048:	4603      	mov	r3, r0
 800504a:	460a      	mov	r2, r1
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	bc10      	pop	{r4}
 8005050:	4619      	mov	r1, r3
 8005052:	f000 b803 	b.w	800505c <_calloc_r>
 8005056:	bf00      	nop
 8005058:	10000000 	.word	0x10000000

0800505c <_calloc_r>:
 800505c:	b510      	push	{r4, lr}
 800505e:	fb02 f101 	mul.w	r1, r2, r1
 8005062:	f000 f85d 	bl	8005120 <_malloc_r>
 8005066:	4604      	mov	r4, r0
 8005068:	b168      	cbz	r0, 8005086 <_calloc_r+0x2a>
 800506a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800506e:	f022 0203 	bic.w	r2, r2, #3
 8005072:	3a04      	subs	r2, #4
 8005074:	2a24      	cmp	r2, #36	; 0x24
 8005076:	d818      	bhi.n	80050aa <_calloc_r+0x4e>
 8005078:	2a13      	cmp	r2, #19
 800507a:	d806      	bhi.n	800508a <_calloc_r+0x2e>
 800507c:	4602      	mov	r2, r0
 800507e:	2300      	movs	r3, #0
 8005080:	e9c2 3300 	strd	r3, r3, [r2]
 8005084:	6093      	str	r3, [r2, #8]
 8005086:	4620      	mov	r0, r4
 8005088:	bd10      	pop	{r4, pc}
 800508a:	2300      	movs	r3, #0
 800508c:	2a1b      	cmp	r2, #27
 800508e:	e9c0 3300 	strd	r3, r3, [r0]
 8005092:	d90f      	bls.n	80050b4 <_calloc_r+0x58>
 8005094:	2a24      	cmp	r2, #36	; 0x24
 8005096:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800509a:	bf11      	iteee	ne
 800509c:	f100 0210 	addne.w	r2, r0, #16
 80050a0:	6103      	streq	r3, [r0, #16]
 80050a2:	f100 0218 	addeq.w	r2, r0, #24
 80050a6:	6143      	streq	r3, [r0, #20]
 80050a8:	e7e9      	b.n	800507e <_calloc_r+0x22>
 80050aa:	2100      	movs	r1, #0
 80050ac:	f000 fae8 	bl	8005680 <memset>
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	f100 0208 	add.w	r2, r0, #8
 80050b8:	e7e1      	b.n	800507e <_calloc_r+0x22>
 80050ba:	bf00      	nop

080050bc <__errno>:
 80050bc:	4b01      	ldr	r3, [pc, #4]	; (80050c4 <__errno+0x8>)
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	10000000 	.word	0x10000000

080050c8 <__libc_init_array>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4e0d      	ldr	r6, [pc, #52]	; (8005100 <__libc_init_array+0x38>)
 80050cc:	4d0d      	ldr	r5, [pc, #52]	; (8005104 <__libc_init_array+0x3c>)
 80050ce:	1b76      	subs	r6, r6, r5
 80050d0:	10b6      	asrs	r6, r6, #2
 80050d2:	d006      	beq.n	80050e2 <__libc_init_array+0x1a>
 80050d4:	2400      	movs	r4, #0
 80050d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050da:	3401      	adds	r4, #1
 80050dc:	4798      	blx	r3
 80050de:	42a6      	cmp	r6, r4
 80050e0:	d1f9      	bne.n	80050d6 <__libc_init_array+0xe>
 80050e2:	4e09      	ldr	r6, [pc, #36]	; (8005108 <__libc_init_array+0x40>)
 80050e4:	4d09      	ldr	r5, [pc, #36]	; (800510c <__libc_init_array+0x44>)
 80050e6:	1b76      	subs	r6, r6, r5
 80050e8:	f000 fd00 	bl	8005aec <_init>
 80050ec:	10b6      	asrs	r6, r6, #2
 80050ee:	d006      	beq.n	80050fe <__libc_init_array+0x36>
 80050f0:	2400      	movs	r4, #0
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	3401      	adds	r4, #1
 80050f8:	4798      	blx	r3
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d1f9      	bne.n	80050f2 <__libc_init_array+0x2a>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	08006d88 	.word	0x08006d88
 8005104:	08006d88 	.word	0x08006d88
 8005108:	08006d90 	.word	0x08006d90
 800510c:	08006d88 	.word	0x08006d88

08005110 <free>:
 8005110:	4b02      	ldr	r3, [pc, #8]	; (800511c <free+0xc>)
 8005112:	4601      	mov	r1, r0
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f000 bb99 	b.w	800584c <_free_r>
 800511a:	bf00      	nop
 800511c:	10000000 	.word	0x10000000

08005120 <_malloc_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	f101 060b 	add.w	r6, r1, #11
 8005128:	2e16      	cmp	r6, #22
 800512a:	b083      	sub	sp, #12
 800512c:	4604      	mov	r4, r0
 800512e:	d824      	bhi.n	800517a <_malloc_r+0x5a>
 8005130:	2910      	cmp	r1, #16
 8005132:	f200 80ba 	bhi.w	80052aa <_malloc_r+0x18a>
 8005136:	f000 faf5 	bl	8005724 <__malloc_lock>
 800513a:	2610      	movs	r6, #16
 800513c:	2218      	movs	r2, #24
 800513e:	2002      	movs	r0, #2
 8005140:	4fb5      	ldr	r7, [pc, #724]	; (8005418 <_malloc_r+0x2f8>)
 8005142:	443a      	add	r2, r7
 8005144:	f1a2 0108 	sub.w	r1, r2, #8
 8005148:	6853      	ldr	r3, [r2, #4]
 800514a:	428b      	cmp	r3, r1
 800514c:	f000 80ba 	beq.w	80052c4 <_malloc_r+0x1a4>
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	f022 0203 	bic.w	r2, r2, #3
 8005158:	441a      	add	r2, r3
 800515a:	689d      	ldr	r5, [r3, #8]
 800515c:	60e9      	str	r1, [r5, #12]
 800515e:	608d      	str	r5, [r1, #8]
 8005160:	6851      	ldr	r1, [r2, #4]
 8005162:	f041 0101 	orr.w	r1, r1, #1
 8005166:	4620      	mov	r0, r4
 8005168:	6051      	str	r1, [r2, #4]
 800516a:	f103 0508 	add.w	r5, r3, #8
 800516e:	f000 fadf 	bl	8005730 <__malloc_unlock>
 8005172:	4628      	mov	r0, r5
 8005174:	b003      	add	sp, #12
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	f036 0607 	bics.w	r6, r6, #7
 800517e:	f100 8094 	bmi.w	80052aa <_malloc_r+0x18a>
 8005182:	42b1      	cmp	r1, r6
 8005184:	f200 8091 	bhi.w	80052aa <_malloc_r+0x18a>
 8005188:	f000 facc 	bl	8005724 <__malloc_lock>
 800518c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8005190:	f0c0 819a 	bcc.w	80054c8 <_malloc_r+0x3a8>
 8005194:	0a73      	lsrs	r3, r6, #9
 8005196:	f000 808f 	beq.w	80052b8 <_malloc_r+0x198>
 800519a:	2b04      	cmp	r3, #4
 800519c:	f200 816f 	bhi.w	800547e <_malloc_r+0x35e>
 80051a0:	09b3      	lsrs	r3, r6, #6
 80051a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80051a6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80051aa:	00c3      	lsls	r3, r0, #3
 80051ac:	4f9a      	ldr	r7, [pc, #616]	; (8005418 <_malloc_r+0x2f8>)
 80051ae:	443b      	add	r3, r7
 80051b0:	f1a3 0508 	sub.w	r5, r3, #8
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	429d      	cmp	r5, r3
 80051b8:	d106      	bne.n	80051c8 <_malloc_r+0xa8>
 80051ba:	e00c      	b.n	80051d6 <_malloc_r+0xb6>
 80051bc:	2900      	cmp	r1, #0
 80051be:	f280 8127 	bge.w	8005410 <_malloc_r+0x2f0>
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	429d      	cmp	r5, r3
 80051c6:	d006      	beq.n	80051d6 <_malloc_r+0xb6>
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	f022 0203 	bic.w	r2, r2, #3
 80051ce:	1b91      	subs	r1, r2, r6
 80051d0:	290f      	cmp	r1, #15
 80051d2:	ddf3      	ble.n	80051bc <_malloc_r+0x9c>
 80051d4:	4660      	mov	r0, ip
 80051d6:	693d      	ldr	r5, [r7, #16]
 80051d8:	f8df c240 	ldr.w	ip, [pc, #576]	; 800541c <_malloc_r+0x2fc>
 80051dc:	4565      	cmp	r5, ip
 80051de:	d07c      	beq.n	80052da <_malloc_r+0x1ba>
 80051e0:	686a      	ldr	r2, [r5, #4]
 80051e2:	f022 0203 	bic.w	r2, r2, #3
 80051e6:	1b93      	subs	r3, r2, r6
 80051e8:	2b0f      	cmp	r3, #15
 80051ea:	f300 817b 	bgt.w	80054e4 <_malloc_r+0x3c4>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 80051f4:	f280 816c 	bge.w	80054d0 <_malloc_r+0x3b0>
 80051f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80051fc:	f080 811a 	bcs.w	8005434 <_malloc_r+0x314>
 8005200:	08d3      	lsrs	r3, r2, #3
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	3301      	adds	r3, #1
 8005206:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800520a:	2201      	movs	r2, #1
 800520c:	fa02 f20e 	lsl.w	r2, r2, lr
 8005210:	430a      	orrs	r2, r1
 8005212:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8005216:	f8c5 e008 	str.w	lr, [r5, #8]
 800521a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800521e:	3908      	subs	r1, #8
 8005220:	60e9      	str	r1, [r5, #12]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8005228:	f8ce 500c 	str.w	r5, [lr, #12]
 800522c:	1083      	asrs	r3, r0, #2
 800522e:	2101      	movs	r1, #1
 8005230:	4099      	lsls	r1, r3
 8005232:	4291      	cmp	r1, r2
 8005234:	d857      	bhi.n	80052e6 <_malloc_r+0x1c6>
 8005236:	4211      	tst	r1, r2
 8005238:	d106      	bne.n	8005248 <_malloc_r+0x128>
 800523a:	f020 0003 	bic.w	r0, r0, #3
 800523e:	0049      	lsls	r1, r1, #1
 8005240:	4211      	tst	r1, r2
 8005242:	f100 0004 	add.w	r0, r0, #4
 8005246:	d0fa      	beq.n	800523e <_malloc_r+0x11e>
 8005248:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800524c:	464d      	mov	r5, r9
 800524e:	4686      	mov	lr, r0
 8005250:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8005254:	4545      	cmp	r5, r8
 8005256:	d108      	bne.n	800526a <_malloc_r+0x14a>
 8005258:	e11d      	b.n	8005496 <_malloc_r+0x376>
 800525a:	2b00      	cmp	r3, #0
 800525c:	f280 8124 	bge.w	80054a8 <_malloc_r+0x388>
 8005260:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8005264:	4545      	cmp	r5, r8
 8005266:	f000 8116 	beq.w	8005496 <_malloc_r+0x376>
 800526a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800526e:	f022 0203 	bic.w	r2, r2, #3
 8005272:	1b93      	subs	r3, r2, r6
 8005274:	2b0f      	cmp	r3, #15
 8005276:	ddf0      	ble.n	800525a <_malloc_r+0x13a>
 8005278:	4620      	mov	r0, r4
 800527a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 800527e:	eb08 0106 	add.w	r1, r8, r6
 8005282:	f046 0601 	orr.w	r6, r6, #1
 8005286:	f8c8 6004 	str.w	r6, [r8, #4]
 800528a:	60ec      	str	r4, [r5, #12]
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	f043 0401 	orr.w	r4, r3, #1
 8005292:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8005296:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800529a:	604c      	str	r4, [r1, #4]
 800529c:	f848 3002 	str.w	r3, [r8, r2]
 80052a0:	f000 fa46 	bl	8005730 <__malloc_unlock>
 80052a4:	f108 0508 	add.w	r5, r8, #8
 80052a8:	e002      	b.n	80052b0 <_malloc_r+0x190>
 80052aa:	230c      	movs	r3, #12
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	2500      	movs	r5, #0
 80052b0:	4628      	mov	r0, r5
 80052b2:	b003      	add	sp, #12
 80052b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052bc:	2040      	movs	r0, #64	; 0x40
 80052be:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80052c2:	e773      	b.n	80051ac <_malloc_r+0x8c>
 80052c4:	68d3      	ldr	r3, [r2, #12]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	bf08      	it	eq
 80052ca:	3002      	addeq	r0, #2
 80052cc:	f47f af40 	bne.w	8005150 <_malloc_r+0x30>
 80052d0:	693d      	ldr	r5, [r7, #16]
 80052d2:	f8df c148 	ldr.w	ip, [pc, #328]	; 800541c <_malloc_r+0x2fc>
 80052d6:	4565      	cmp	r5, ip
 80052d8:	d182      	bne.n	80051e0 <_malloc_r+0xc0>
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	1083      	asrs	r3, r0, #2
 80052de:	2101      	movs	r1, #1
 80052e0:	4099      	lsls	r1, r3
 80052e2:	4291      	cmp	r1, r2
 80052e4:	d9a7      	bls.n	8005236 <_malloc_r+0x116>
 80052e6:	68bd      	ldr	r5, [r7, #8]
 80052e8:	686b      	ldr	r3, [r5, #4]
 80052ea:	f023 0903 	bic.w	r9, r3, #3
 80052ee:	454e      	cmp	r6, r9
 80052f0:	d803      	bhi.n	80052fa <_malloc_r+0x1da>
 80052f2:	eba9 0306 	sub.w	r3, r9, r6
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	dc7a      	bgt.n	80053f0 <_malloc_r+0x2d0>
 80052fa:	f8df b124 	ldr.w	fp, [pc, #292]	; 8005420 <_malloc_r+0x300>
 80052fe:	4b49      	ldr	r3, [pc, #292]	; (8005424 <_malloc_r+0x304>)
 8005300:	f8db 2000 	ldr.w	r2, [fp]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3201      	adds	r2, #1
 8005308:	4433      	add	r3, r6
 800530a:	eb05 0a09 	add.w	sl, r5, r9
 800530e:	f000 8133 	beq.w	8005578 <_malloc_r+0x458>
 8005312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005316:	330f      	adds	r3, #15
 8005318:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 800531c:	f028 080f 	bic.w	r8, r8, #15
 8005320:	4641      	mov	r1, r8
 8005322:	4620      	mov	r0, r4
 8005324:	f000 fa0a 	bl	800573c <_sbrk_r>
 8005328:	1c41      	adds	r1, r0, #1
 800532a:	4602      	mov	r2, r0
 800532c:	f000 80f3 	beq.w	8005516 <_malloc_r+0x3f6>
 8005330:	4582      	cmp	sl, r0
 8005332:	f200 80ee 	bhi.w	8005512 <_malloc_r+0x3f2>
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <_malloc_r+0x308>)
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	4441      	add	r1, r8
 800533c:	6019      	str	r1, [r3, #0]
 800533e:	4608      	mov	r0, r1
 8005340:	f000 814e 	beq.w	80055e0 <_malloc_r+0x4c0>
 8005344:	f8db 1000 	ldr.w	r1, [fp]
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	3101      	adds	r1, #1
 800534c:	bf1b      	ittet	ne
 800534e:	eba2 0a0a 	subne.w	sl, r2, sl
 8005352:	4450      	addne	r0, sl
 8005354:	f8cb 2000 	streq.w	r2, [fp]
 8005358:	6018      	strne	r0, [r3, #0]
 800535a:	f012 0b07 	ands.w	fp, r2, #7
 800535e:	f000 8117 	beq.w	8005590 <_malloc_r+0x470>
 8005362:	f1cb 0108 	rsb	r1, fp, #8
 8005366:	440a      	add	r2, r1
 8005368:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 800536c:	4490      	add	r8, r2
 800536e:	3108      	adds	r1, #8
 8005370:	eba1 0108 	sub.w	r1, r1, r8
 8005374:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8005378:	4651      	mov	r1, sl
 800537a:	4620      	mov	r0, r4
 800537c:	9200      	str	r2, [sp, #0]
 800537e:	f000 f9dd 	bl	800573c <_sbrk_r>
 8005382:	1c42      	adds	r2, r0, #1
 8005384:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005388:	f000 814f 	beq.w	800562a <_malloc_r+0x50a>
 800538c:	1a80      	subs	r0, r0, r2
 800538e:	eb00 080a 	add.w	r8, r0, sl
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	60ba      	str	r2, [r7, #8]
 8005396:	f048 0001 	orr.w	r0, r8, #1
 800539a:	4451      	add	r1, sl
 800539c:	42bd      	cmp	r5, r7
 800539e:	6050      	str	r0, [r2, #4]
 80053a0:	6019      	str	r1, [r3, #0]
 80053a2:	f000 8129 	beq.w	80055f8 <_malloc_r+0x4d8>
 80053a6:	f1b9 0f0f 	cmp.w	r9, #15
 80053aa:	f240 8127 	bls.w	80055fc <_malloc_r+0x4dc>
 80053ae:	6868      	ldr	r0, [r5, #4]
 80053b0:	f1a9 0c0c 	sub.w	ip, r9, #12
 80053b4:	f02c 0c07 	bic.w	ip, ip, #7
 80053b8:	f000 0001 	and.w	r0, r0, #1
 80053bc:	ea40 000c 	orr.w	r0, r0, ip
 80053c0:	6068      	str	r0, [r5, #4]
 80053c2:	f04f 0e05 	mov.w	lr, #5
 80053c6:	eb05 000c 	add.w	r0, r5, ip
 80053ca:	f1bc 0f0f 	cmp.w	ip, #15
 80053ce:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 80053d2:	f200 8132 	bhi.w	800563a <_malloc_r+0x51a>
 80053d6:	6850      	ldr	r0, [r2, #4]
 80053d8:	4615      	mov	r5, r2
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <_malloc_r+0x30c>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	428a      	cmp	r2, r1
 80053e0:	bf38      	it	cc
 80053e2:	6019      	strcc	r1, [r3, #0]
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <_malloc_r+0x310>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	428a      	cmp	r2, r1
 80053ea:	bf38      	it	cc
 80053ec:	6019      	strcc	r1, [r3, #0]
 80053ee:	e094      	b.n	800551a <_malloc_r+0x3fa>
 80053f0:	19aa      	adds	r2, r5, r6
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	f046 0601 	orr.w	r6, r6, #1
 80053fa:	606e      	str	r6, [r5, #4]
 80053fc:	4620      	mov	r0, r4
 80053fe:	60ba      	str	r2, [r7, #8]
 8005400:	6053      	str	r3, [r2, #4]
 8005402:	f000 f995 	bl	8005730 <__malloc_unlock>
 8005406:	3508      	adds	r5, #8
 8005408:	4628      	mov	r0, r5
 800540a:	b003      	add	sp, #12
 800540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005410:	68d9      	ldr	r1, [r3, #12]
 8005412:	441a      	add	r2, r3
 8005414:	e6a1      	b.n	800515a <_malloc_r+0x3a>
 8005416:	bf00      	nop
 8005418:	10000430 	.word	0x10000430
 800541c:	10000438 	.word	0x10000438
 8005420:	10000838 	.word	0x10000838
 8005424:	10000f38 	.word	0x10000f38
 8005428:	10000f08 	.word	0x10000f08
 800542c:	10000f30 	.word	0x10000f30
 8005430:	10000f34 	.word	0x10000f34
 8005434:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8005438:	ea4f 2352 	mov.w	r3, r2, lsr #9
 800543c:	d363      	bcc.n	8005506 <_malloc_r+0x3e6>
 800543e:	2b14      	cmp	r3, #20
 8005440:	f200 80b7 	bhi.w	80055b2 <_malloc_r+0x492>
 8005444:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8005448:	00c9      	lsls	r1, r1, #3
 800544a:	335b      	adds	r3, #91	; 0x5b
 800544c:	eb07 0e01 	add.w	lr, r7, r1
 8005450:	5879      	ldr	r1, [r7, r1]
 8005452:	f1ae 0e08 	sub.w	lr, lr, #8
 8005456:	458e      	cmp	lr, r1
 8005458:	f000 8091 	beq.w	800557e <_malloc_r+0x45e>
 800545c:	684b      	ldr	r3, [r1, #4]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	4293      	cmp	r3, r2
 8005464:	d902      	bls.n	800546c <_malloc_r+0x34c>
 8005466:	6889      	ldr	r1, [r1, #8]
 8005468:	458e      	cmp	lr, r1
 800546a:	d1f7      	bne.n	800545c <_malloc_r+0x33c>
 800546c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 8005476:	f8ce 5008 	str.w	r5, [lr, #8]
 800547a:	60cd      	str	r5, [r1, #12]
 800547c:	e6d6      	b.n	800522c <_malloc_r+0x10c>
 800547e:	2b14      	cmp	r3, #20
 8005480:	d959      	bls.n	8005536 <_malloc_r+0x416>
 8005482:	2b54      	cmp	r3, #84	; 0x54
 8005484:	f200 809d 	bhi.w	80055c2 <_malloc_r+0x4a2>
 8005488:	0b33      	lsrs	r3, r6, #12
 800548a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800548e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8005492:	00c3      	lsls	r3, r0, #3
 8005494:	e68a      	b.n	80051ac <_malloc_r+0x8c>
 8005496:	f10e 0e01 	add.w	lr, lr, #1
 800549a:	f01e 0f03 	tst.w	lr, #3
 800549e:	f105 0508 	add.w	r5, r5, #8
 80054a2:	f47f aed5 	bne.w	8005250 <_malloc_r+0x130>
 80054a6:	e051      	b.n	800554c <_malloc_r+0x42c>
 80054a8:	4442      	add	r2, r8
 80054aa:	4645      	mov	r5, r8
 80054ac:	6853      	ldr	r3, [r2, #4]
 80054ae:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6053      	str	r3, [r2, #4]
 80054b8:	f855 3f08 	ldr.w	r3, [r5, #8]!
 80054bc:	4620      	mov	r0, r4
 80054be:	60d9      	str	r1, [r3, #12]
 80054c0:	608b      	str	r3, [r1, #8]
 80054c2:	f000 f935 	bl	8005730 <__malloc_unlock>
 80054c6:	e6f3      	b.n	80052b0 <_malloc_r+0x190>
 80054c8:	08f0      	lsrs	r0, r6, #3
 80054ca:	f106 0208 	add.w	r2, r6, #8
 80054ce:	e637      	b.n	8005140 <_malloc_r+0x20>
 80054d0:	442a      	add	r2, r5
 80054d2:	4620      	mov	r0, r4
 80054d4:	6853      	ldr	r3, [r2, #4]
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6053      	str	r3, [r2, #4]
 80054dc:	3508      	adds	r5, #8
 80054de:	f000 f927 	bl	8005730 <__malloc_unlock>
 80054e2:	e6e5      	b.n	80052b0 <_malloc_r+0x190>
 80054e4:	19a9      	adds	r1, r5, r6
 80054e6:	4620      	mov	r0, r4
 80054e8:	f046 0601 	orr.w	r6, r6, #1
 80054ec:	f043 0401 	orr.w	r4, r3, #1
 80054f0:	606e      	str	r6, [r5, #4]
 80054f2:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80054f6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80054fa:	604c      	str	r4, [r1, #4]
 80054fc:	50ab      	str	r3, [r5, r2]
 80054fe:	f000 f917 	bl	8005730 <__malloc_unlock>
 8005502:	3508      	adds	r5, #8
 8005504:	e6d4      	b.n	80052b0 <_malloc_r+0x190>
 8005506:	0993      	lsrs	r3, r2, #6
 8005508:	f103 0139 	add.w	r1, r3, #57	; 0x39
 800550c:	00c9      	lsls	r1, r1, #3
 800550e:	3338      	adds	r3, #56	; 0x38
 8005510:	e79c      	b.n	800544c <_malloc_r+0x32c>
 8005512:	42bd      	cmp	r5, r7
 8005514:	d05f      	beq.n	80055d6 <_malloc_r+0x4b6>
 8005516:	68bd      	ldr	r5, [r7, #8]
 8005518:	6868      	ldr	r0, [r5, #4]
 800551a:	f020 0803 	bic.w	r8, r0, #3
 800551e:	4546      	cmp	r6, r8
 8005520:	eba8 0306 	sub.w	r3, r8, r6
 8005524:	d802      	bhi.n	800552c <_malloc_r+0x40c>
 8005526:	2b0f      	cmp	r3, #15
 8005528:	f73f af62 	bgt.w	80053f0 <_malloc_r+0x2d0>
 800552c:	4620      	mov	r0, r4
 800552e:	f000 f8ff 	bl	8005730 <__malloc_unlock>
 8005532:	2500      	movs	r5, #0
 8005534:	e6bc      	b.n	80052b0 <_malloc_r+0x190>
 8005536:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800553a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800553e:	00c3      	lsls	r3, r0, #3
 8005540:	e634      	b.n	80051ac <_malloc_r+0x8c>
 8005542:	f859 3908 	ldr.w	r3, [r9], #-8
 8005546:	454b      	cmp	r3, r9
 8005548:	f040 8096 	bne.w	8005678 <_malloc_r+0x558>
 800554c:	f010 0f03 	tst.w	r0, #3
 8005550:	f100 30ff 	add.w	r0, r0, #4294967295
 8005554:	d1f5      	bne.n	8005542 <_malloc_r+0x422>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	ea23 0301 	bic.w	r3, r3, r1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	0049      	lsls	r1, r1, #1
 8005560:	4299      	cmp	r1, r3
 8005562:	f63f aec0 	bhi.w	80052e6 <_malloc_r+0x1c6>
 8005566:	b919      	cbnz	r1, 8005570 <_malloc_r+0x450>
 8005568:	e6bd      	b.n	80052e6 <_malloc_r+0x1c6>
 800556a:	0049      	lsls	r1, r1, #1
 800556c:	f10e 0e04 	add.w	lr, lr, #4
 8005570:	4219      	tst	r1, r3
 8005572:	d0fa      	beq.n	800556a <_malloc_r+0x44a>
 8005574:	4670      	mov	r0, lr
 8005576:	e667      	b.n	8005248 <_malloc_r+0x128>
 8005578:	f103 0810 	add.w	r8, r3, #16
 800557c:	e6d0      	b.n	8005320 <_malloc_r+0x200>
 800557e:	109a      	asrs	r2, r3, #2
 8005580:	f04f 0801 	mov.w	r8, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	fa08 f202 	lsl.w	r2, r8, r2
 800558a:	431a      	orrs	r2, r3
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	e770      	b.n	8005472 <_malloc_r+0x352>
 8005590:	eb02 0108 	add.w	r1, r2, r8
 8005594:	4249      	negs	r1, r1
 8005596:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800559a:	4651      	mov	r1, sl
 800559c:	4620      	mov	r0, r4
 800559e:	9200      	str	r2, [sp, #0]
 80055a0:	f000 f8cc 	bl	800573c <_sbrk_r>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055aa:	f47f aeef 	bne.w	800538c <_malloc_r+0x26c>
 80055ae:	46da      	mov	sl, fp
 80055b0:	e6ef      	b.n	8005392 <_malloc_r+0x272>
 80055b2:	2b54      	cmp	r3, #84	; 0x54
 80055b4:	d825      	bhi.n	8005602 <_malloc_r+0x4e2>
 80055b6:	0b13      	lsrs	r3, r2, #12
 80055b8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 80055bc:	00c9      	lsls	r1, r1, #3
 80055be:	336e      	adds	r3, #110	; 0x6e
 80055c0:	e744      	b.n	800544c <_malloc_r+0x32c>
 80055c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80055c6:	d825      	bhi.n	8005614 <_malloc_r+0x4f4>
 80055c8:	0bf3      	lsrs	r3, r6, #15
 80055ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80055ce:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 80055d2:	00c3      	lsls	r3, r0, #3
 80055d4:	e5ea      	b.n	80051ac <_malloc_r+0x8c>
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <_malloc_r+0x55c>)
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	4440      	add	r0, r8
 80055dc:	6018      	str	r0, [r3, #0]
 80055de:	e6b1      	b.n	8005344 <_malloc_r+0x224>
 80055e0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 80055e4:	f1bc 0f00 	cmp.w	ip, #0
 80055e8:	f47f aeac 	bne.w	8005344 <_malloc_r+0x224>
 80055ec:	68bd      	ldr	r5, [r7, #8]
 80055ee:	44c8      	add	r8, r9
 80055f0:	f048 0001 	orr.w	r0, r8, #1
 80055f4:	6068      	str	r0, [r5, #4]
 80055f6:	e6f0      	b.n	80053da <_malloc_r+0x2ba>
 80055f8:	4615      	mov	r5, r2
 80055fa:	e6ee      	b.n	80053da <_malloc_r+0x2ba>
 80055fc:	2301      	movs	r3, #1
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	e794      	b.n	800552c <_malloc_r+0x40c>
 8005602:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005606:	d823      	bhi.n	8005650 <_malloc_r+0x530>
 8005608:	0bd3      	lsrs	r3, r2, #15
 800560a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800560e:	00c9      	lsls	r1, r1, #3
 8005610:	3377      	adds	r3, #119	; 0x77
 8005612:	e71b      	b.n	800544c <_malloc_r+0x32c>
 8005614:	f240 5254 	movw	r2, #1364	; 0x554
 8005618:	4293      	cmp	r3, r2
 800561a:	d823      	bhi.n	8005664 <_malloc_r+0x544>
 800561c:	0cb3      	lsrs	r3, r6, #18
 800561e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8005622:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8005626:	00c3      	lsls	r3, r0, #3
 8005628:	e5c0      	b.n	80051ac <_malloc_r+0x8c>
 800562a:	f1ab 0b08 	sub.w	fp, fp, #8
 800562e:	44d8      	add	r8, fp
 8005630:	eba8 0802 	sub.w	r8, r8, r2
 8005634:	f04f 0a00 	mov.w	sl, #0
 8005638:	e6ab      	b.n	8005392 <_malloc_r+0x272>
 800563a:	f105 0108 	add.w	r1, r5, #8
 800563e:	4620      	mov	r0, r4
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	f000 f903 	bl	800584c <_free_r>
 8005646:	68bd      	ldr	r5, [r7, #8]
 8005648:	9b00      	ldr	r3, [sp, #0]
 800564a:	6868      	ldr	r0, [r5, #4]
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	e6c4      	b.n	80053da <_malloc_r+0x2ba>
 8005650:	f240 5154 	movw	r1, #1364	; 0x554
 8005654:	428b      	cmp	r3, r1
 8005656:	d80b      	bhi.n	8005670 <_malloc_r+0x550>
 8005658:	0c93      	lsrs	r3, r2, #18
 800565a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 800565e:	00c9      	lsls	r1, r1, #3
 8005660:	337c      	adds	r3, #124	; 0x7c
 8005662:	e6f3      	b.n	800544c <_malloc_r+0x32c>
 8005664:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8005668:	207f      	movs	r0, #127	; 0x7f
 800566a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800566e:	e59d      	b.n	80051ac <_malloc_r+0x8c>
 8005670:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8005674:	237e      	movs	r3, #126	; 0x7e
 8005676:	e6e9      	b.n	800544c <_malloc_r+0x32c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	e770      	b.n	800555e <_malloc_r+0x43e>
 800567c:	10000f08 	.word	0x10000f08

08005680 <memset>:
 8005680:	0783      	lsls	r3, r0, #30
 8005682:	b530      	push	{r4, r5, lr}
 8005684:	d048      	beq.n	8005718 <memset+0x98>
 8005686:	1e54      	subs	r4, r2, #1
 8005688:	2a00      	cmp	r2, #0
 800568a:	d03f      	beq.n	800570c <memset+0x8c>
 800568c:	b2ca      	uxtb	r2, r1
 800568e:	4603      	mov	r3, r0
 8005690:	e001      	b.n	8005696 <memset+0x16>
 8005692:	3c01      	subs	r4, #1
 8005694:	d33a      	bcc.n	800570c <memset+0x8c>
 8005696:	f803 2b01 	strb.w	r2, [r3], #1
 800569a:	079d      	lsls	r5, r3, #30
 800569c:	d1f9      	bne.n	8005692 <memset+0x12>
 800569e:	2c03      	cmp	r4, #3
 80056a0:	d92d      	bls.n	80056fe <memset+0x7e>
 80056a2:	b2cd      	uxtb	r5, r1
 80056a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80056a8:	2c0f      	cmp	r4, #15
 80056aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80056ae:	d936      	bls.n	800571e <memset+0x9e>
 80056b0:	f1a4 0210 	sub.w	r2, r4, #16
 80056b4:	f022 0c0f 	bic.w	ip, r2, #15
 80056b8:	f103 0e20 	add.w	lr, r3, #32
 80056bc:	44e6      	add	lr, ip
 80056be:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80056c2:	f103 0210 	add.w	r2, r3, #16
 80056c6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80056ca:	e942 5502 	strd	r5, r5, [r2, #-8]
 80056ce:	3210      	adds	r2, #16
 80056d0:	4572      	cmp	r2, lr
 80056d2:	d1f8      	bne.n	80056c6 <memset+0x46>
 80056d4:	f10c 0201 	add.w	r2, ip, #1
 80056d8:	f014 0f0c 	tst.w	r4, #12
 80056dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80056e0:	f004 0c0f 	and.w	ip, r4, #15
 80056e4:	d013      	beq.n	800570e <memset+0x8e>
 80056e6:	f1ac 0304 	sub.w	r3, ip, #4
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	3304      	adds	r3, #4
 80056f0:	4413      	add	r3, r2
 80056f2:	f842 5b04 	str.w	r5, [r2], #4
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d1fb      	bne.n	80056f2 <memset+0x72>
 80056fa:	f00c 0403 	and.w	r4, ip, #3
 80056fe:	b12c      	cbz	r4, 800570c <memset+0x8c>
 8005700:	b2ca      	uxtb	r2, r1
 8005702:	441c      	add	r4, r3
 8005704:	f803 2b01 	strb.w	r2, [r3], #1
 8005708:	429c      	cmp	r4, r3
 800570a:	d1fb      	bne.n	8005704 <memset+0x84>
 800570c:	bd30      	pop	{r4, r5, pc}
 800570e:	4664      	mov	r4, ip
 8005710:	4613      	mov	r3, r2
 8005712:	2c00      	cmp	r4, #0
 8005714:	d1f4      	bne.n	8005700 <memset+0x80>
 8005716:	e7f9      	b.n	800570c <memset+0x8c>
 8005718:	4603      	mov	r3, r0
 800571a:	4614      	mov	r4, r2
 800571c:	e7bf      	b.n	800569e <memset+0x1e>
 800571e:	461a      	mov	r2, r3
 8005720:	46a4      	mov	ip, r4
 8005722:	e7e0      	b.n	80056e6 <memset+0x66>

08005724 <__malloc_lock>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__malloc_lock+0x8>)
 8005726:	f000 b997 	b.w	8005a58 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	10000f40 	.word	0x10000f40

08005730 <__malloc_unlock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_unlock+0x8>)
 8005732:	f000 b993 	b.w	8005a5c <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	10000f40 	.word	0x10000f40

0800573c <_sbrk_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d07      	ldr	r5, [pc, #28]	; (800575c <_sbrk_r+0x20>)
 8005740:	2200      	movs	r2, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602a      	str	r2, [r5, #0]
 8005748:	f7fe fca8 	bl	800409c <_sbrk>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d000      	beq.n	8005752 <_sbrk_r+0x16>
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0fb      	beq.n	8005750 <_sbrk_r+0x14>
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	10000f44 	.word	0x10000f44

08005760 <register_fini>:
 8005760:	4b02      	ldr	r3, [pc, #8]	; (800576c <register_fini+0xc>)
 8005762:	b113      	cbz	r3, 800576a <register_fini+0xa>
 8005764:	4802      	ldr	r0, [pc, #8]	; (8005770 <register_fini+0x10>)
 8005766:	f000 b805 	b.w	8005774 <atexit>
 800576a:	4770      	bx	lr
 800576c:	00000000 	.word	0x00000000
 8005770:	08005781 	.word	0x08005781

08005774 <atexit>:
 8005774:	2300      	movs	r3, #0
 8005776:	4601      	mov	r1, r0
 8005778:	461a      	mov	r2, r3
 800577a:	4618      	mov	r0, r3
 800577c:	f000 b970 	b.w	8005a60 <__register_exitproc>

08005780 <__libc_fini_array>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <__libc_fini_array+0x24>)
 8005784:	4d08      	ldr	r5, [pc, #32]	; (80057a8 <__libc_fini_array+0x28>)
 8005786:	1b5b      	subs	r3, r3, r5
 8005788:	109c      	asrs	r4, r3, #2
 800578a:	d007      	beq.n	800579c <__libc_fini_array+0x1c>
 800578c:	3b04      	subs	r3, #4
 800578e:	441d      	add	r5, r3
 8005790:	3c01      	subs	r4, #1
 8005792:	f855 3904 	ldr.w	r3, [r5], #-4
 8005796:	4798      	blx	r3
 8005798:	2c00      	cmp	r4, #0
 800579a:	d1f9      	bne.n	8005790 <__libc_fini_array+0x10>
 800579c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a0:	f000 b9aa 	b.w	8005af8 <_fini>
 80057a4:	08006d94 	.word	0x08006d94
 80057a8:	08006d90 	.word	0x08006d90

080057ac <_malloc_trim_r>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	4f24      	ldr	r7, [pc, #144]	; (8005840 <_malloc_trim_r+0x94>)
 80057b0:	460c      	mov	r4, r1
 80057b2:	4606      	mov	r6, r0
 80057b4:	f7ff ffb6 	bl	8005724 <__malloc_lock>
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	6855      	ldr	r5, [r2, #4]
 80057bc:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 80057c0:	330f      	adds	r3, #15
 80057c2:	f025 0503 	bic.w	r5, r5, #3
 80057c6:	442b      	add	r3, r5
 80057c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80057cc:	f023 030f 	bic.w	r3, r3, #15
 80057d0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 80057d4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80057d8:	db07      	blt.n	80057ea <_malloc_trim_r+0x3e>
 80057da:	2100      	movs	r1, #0
 80057dc:	4630      	mov	r0, r6
 80057de:	f7ff ffad 	bl	800573c <_sbrk_r>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	442b      	add	r3, r5
 80057e6:	4298      	cmp	r0, r3
 80057e8:	d004      	beq.n	80057f4 <_malloc_trim_r+0x48>
 80057ea:	4630      	mov	r0, r6
 80057ec:	f7ff ffa0 	bl	8005730 <__malloc_unlock>
 80057f0:	2000      	movs	r0, #0
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f4:	4261      	negs	r1, r4
 80057f6:	4630      	mov	r0, r6
 80057f8:	f7ff ffa0 	bl	800573c <_sbrk_r>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d00d      	beq.n	800581c <_malloc_trim_r+0x70>
 8005800:	4a10      	ldr	r2, [pc, #64]	; (8005844 <_malloc_trim_r+0x98>)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	1b2d      	subs	r5, r5, r4
 8005806:	f045 0501 	orr.w	r5, r5, #1
 800580a:	605d      	str	r5, [r3, #4]
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	4630      	mov	r0, r6
 8005810:	1b1b      	subs	r3, r3, r4
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	f7ff ff8c 	bl	8005730 <__malloc_unlock>
 8005818:	2001      	movs	r0, #1
 800581a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581c:	2100      	movs	r1, #0
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ff8c 	bl	800573c <_sbrk_r>
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	1a83      	subs	r3, r0, r2
 8005828:	2b0f      	cmp	r3, #15
 800582a:	ddde      	ble.n	80057ea <_malloc_trim_r+0x3e>
 800582c:	f043 0301 	orr.w	r3, r3, #1
 8005830:	6053      	str	r3, [r2, #4]
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <_malloc_trim_r+0x9c>)
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <_malloc_trim_r+0x98>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	6008      	str	r0, [r1, #0]
 800583c:	e7d5      	b.n	80057ea <_malloc_trim_r+0x3e>
 800583e:	bf00      	nop
 8005840:	10000430 	.word	0x10000430
 8005844:	10000f08 	.word	0x10000f08
 8005848:	10000838 	.word	0x10000838

0800584c <_free_r>:
 800584c:	2900      	cmp	r1, #0
 800584e:	d061      	beq.n	8005914 <_free_r+0xc8>
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	460c      	mov	r4, r1
 8005854:	4606      	mov	r6, r0
 8005856:	f7ff ff65 	bl	8005724 <__malloc_lock>
 800585a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800585e:	4f7b      	ldr	r7, [pc, #492]	; (8005a4c <_free_r+0x200>)
 8005860:	f1a4 0508 	sub.w	r5, r4, #8
 8005864:	f022 0101 	bic.w	r1, r2, #1
 8005868:	eb05 0c01 	add.w	ip, r5, r1
 800586c:	68b8      	ldr	r0, [r7, #8]
 800586e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005872:	4560      	cmp	r0, ip
 8005874:	f023 0303 	bic.w	r3, r3, #3
 8005878:	f000 808b 	beq.w	8005992 <_free_r+0x146>
 800587c:	07d2      	lsls	r2, r2, #31
 800587e:	f8cc 3004 	str.w	r3, [ip, #4]
 8005882:	d432      	bmi.n	80058ea <_free_r+0x9e>
 8005884:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8005888:	1aad      	subs	r5, r5, r2
 800588a:	4411      	add	r1, r2
 800588c:	68aa      	ldr	r2, [r5, #8]
 800588e:	f107 0008 	add.w	r0, r7, #8
 8005892:	4282      	cmp	r2, r0
 8005894:	d06a      	beq.n	800596c <_free_r+0x120>
 8005896:	eb0c 0403 	add.w	r4, ip, r3
 800589a:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800589e:	68ec      	ldr	r4, [r5, #12]
 80058a0:	60d4      	str	r4, [r2, #12]
 80058a2:	f01e 0f01 	tst.w	lr, #1
 80058a6:	60a2      	str	r2, [r4, #8]
 80058a8:	f000 8097 	beq.w	80059da <_free_r+0x18e>
 80058ac:	f041 0301 	orr.w	r3, r1, #1
 80058b0:	606b      	str	r3, [r5, #4]
 80058b2:	f8cc 1000 	str.w	r1, [ip]
 80058b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80058ba:	d235      	bcs.n	8005928 <_free_r+0xdc>
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	08cb      	lsrs	r3, r1, #3
 80058c0:	0948      	lsrs	r0, r1, #5
 80058c2:	2101      	movs	r1, #1
 80058c4:	3301      	adds	r3, #1
 80058c6:	4081      	lsls	r1, r0
 80058c8:	4311      	orrs	r1, r2
 80058ca:	6079      	str	r1, [r7, #4]
 80058cc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80058d0:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 80058d4:	3a08      	subs	r2, #8
 80058d6:	e9c5 1202 	strd	r1, r2, [r5, #8]
 80058da:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80058de:	60cd      	str	r5, [r1, #12]
 80058e0:	4630      	mov	r0, r6
 80058e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058e6:	f7ff bf23 	b.w	8005730 <__malloc_unlock>
 80058ea:	eb0c 0203 	add.w	r2, ip, r3
 80058ee:	6852      	ldr	r2, [r2, #4]
 80058f0:	07d0      	lsls	r0, r2, #31
 80058f2:	d410      	bmi.n	8005916 <_free_r+0xca>
 80058f4:	4419      	add	r1, r3
 80058f6:	f107 0008 	add.w	r0, r7, #8
 80058fa:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80058fe:	4283      	cmp	r3, r0
 8005900:	d073      	beq.n	80059ea <_free_r+0x19e>
 8005902:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	6093      	str	r3, [r2, #8]
 800590a:	f041 0301 	orr.w	r3, r1, #1
 800590e:	606b      	str	r3, [r5, #4]
 8005910:	5069      	str	r1, [r5, r1]
 8005912:	e7d0      	b.n	80058b6 <_free_r+0x6a>
 8005914:	4770      	bx	lr
 8005916:	f041 0301 	orr.w	r3, r1, #1
 800591a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800591e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005922:	f8cc 1000 	str.w	r1, [ip]
 8005926:	d3c9      	bcc.n	80058bc <_free_r+0x70>
 8005928:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800592c:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8005930:	d248      	bcs.n	80059c4 <_free_r+0x178>
 8005932:	098b      	lsrs	r3, r1, #6
 8005934:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8005938:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800593c:	00c3      	lsls	r3, r0, #3
 800593e:	18f8      	adds	r0, r7, r3
 8005940:	58fb      	ldr	r3, [r7, r3]
 8005942:	3808      	subs	r0, #8
 8005944:	4298      	cmp	r0, r3
 8005946:	d059      	beq.n	80059fc <_free_r+0x1b0>
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	f022 0203 	bic.w	r2, r2, #3
 800594e:	428a      	cmp	r2, r1
 8005950:	d902      	bls.n	8005958 <_free_r+0x10c>
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4298      	cmp	r0, r3
 8005956:	d1f7      	bne.n	8005948 <_free_r+0xfc>
 8005958:	68d8      	ldr	r0, [r3, #12]
 800595a:	e9c5 3002 	strd	r3, r0, [r5, #8]
 800595e:	6085      	str	r5, [r0, #8]
 8005960:	60dd      	str	r5, [r3, #12]
 8005962:	4630      	mov	r0, r6
 8005964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005968:	f7ff bee2 	b.w	8005730 <__malloc_unlock>
 800596c:	eb0c 0203 	add.w	r2, ip, r3
 8005970:	6852      	ldr	r2, [r2, #4]
 8005972:	07d2      	lsls	r2, r2, #31
 8005974:	d463      	bmi.n	8005a3e <_free_r+0x1f2>
 8005976:	440b      	add	r3, r1
 8005978:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 800597c:	60ca      	str	r2, [r1, #12]
 800597e:	6091      	str	r1, [r2, #8]
 8005980:	f043 0201 	orr.w	r2, r3, #1
 8005984:	606a      	str	r2, [r5, #4]
 8005986:	4630      	mov	r0, r6
 8005988:	50eb      	str	r3, [r5, r3]
 800598a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800598e:	f7ff becf 	b.w	8005730 <__malloc_unlock>
 8005992:	440b      	add	r3, r1
 8005994:	07d1      	lsls	r1, r2, #31
 8005996:	d407      	bmi.n	80059a8 <_free_r+0x15c>
 8005998:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800599c:	1aad      	subs	r5, r5, r2
 800599e:	4413      	add	r3, r2
 80059a0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 80059a4:	60ca      	str	r2, [r1, #12]
 80059a6:	6091      	str	r1, [r2, #8]
 80059a8:	f043 0201 	orr.w	r2, r3, #1
 80059ac:	606a      	str	r2, [r5, #4]
 80059ae:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <_free_r+0x204>)
 80059b0:	60bd      	str	r5, [r7, #8]
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d893      	bhi.n	80058e0 <_free_r+0x94>
 80059b8:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <_free_r+0x208>)
 80059ba:	4630      	mov	r0, r6
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	f7ff fef5 	bl	80057ac <_malloc_trim_r>
 80059c2:	e78d      	b.n	80058e0 <_free_r+0x94>
 80059c4:	2b14      	cmp	r3, #20
 80059c6:	d90a      	bls.n	80059de <_free_r+0x192>
 80059c8:	2b54      	cmp	r3, #84	; 0x54
 80059ca:	d81f      	bhi.n	8005a0c <_free_r+0x1c0>
 80059cc:	0b0b      	lsrs	r3, r1, #12
 80059ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80059d2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80059d6:	00c3      	lsls	r3, r0, #3
 80059d8:	e7b1      	b.n	800593e <_free_r+0xf2>
 80059da:	4419      	add	r1, r3
 80059dc:	e78d      	b.n	80058fa <_free_r+0xae>
 80059de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80059e2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80059e6:	00c3      	lsls	r3, r0, #3
 80059e8:	e7a9      	b.n	800593e <_free_r+0xf2>
 80059ea:	f041 0301 	orr.w	r3, r1, #1
 80059ee:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80059f2:	e9c5 0002 	strd	r0, r0, [r5, #8]
 80059f6:	606b      	str	r3, [r5, #4]
 80059f8:	5069      	str	r1, [r5, r1]
 80059fa:	e771      	b.n	80058e0 <_free_r+0x94>
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	1092      	asrs	r2, r2, #2
 8005a00:	2401      	movs	r4, #1
 8005a02:	fa04 f202 	lsl.w	r2, r4, r2
 8005a06:	430a      	orrs	r2, r1
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	e7a6      	b.n	800595a <_free_r+0x10e>
 8005a0c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005a10:	d806      	bhi.n	8005a20 <_free_r+0x1d4>
 8005a12:	0bcb      	lsrs	r3, r1, #15
 8005a14:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005a18:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8005a1c:	00c3      	lsls	r3, r0, #3
 8005a1e:	e78e      	b.n	800593e <_free_r+0xf2>
 8005a20:	f240 5254 	movw	r2, #1364	; 0x554
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d806      	bhi.n	8005a36 <_free_r+0x1ea>
 8005a28:	0c8b      	lsrs	r3, r1, #18
 8005a2a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8005a2e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8005a32:	00c3      	lsls	r3, r0, #3
 8005a34:	e783      	b.n	800593e <_free_r+0xf2>
 8005a36:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8005a3a:	227e      	movs	r2, #126	; 0x7e
 8005a3c:	e77f      	b.n	800593e <_free_r+0xf2>
 8005a3e:	f041 0301 	orr.w	r3, r1, #1
 8005a42:	606b      	str	r3, [r5, #4]
 8005a44:	f8cc 1000 	str.w	r1, [ip]
 8005a48:	e74a      	b.n	80058e0 <_free_r+0x94>
 8005a4a:	bf00      	nop
 8005a4c:	10000430 	.word	0x10000430
 8005a50:	1000083c 	.word	0x1000083c
 8005a54:	10000f38 	.word	0x10000f38

08005a58 <__retarget_lock_acquire_recursive>:
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <__retarget_lock_release_recursive>:
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop

08005a60 <__register_exitproc>:
 8005a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8005ae4 <__register_exitproc+0x84>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	f8da 0000 	ldr.w	r0, [sl]
 8005a6e:	4698      	mov	r8, r3
 8005a70:	460f      	mov	r7, r1
 8005a72:	4691      	mov	r9, r2
 8005a74:	f7ff fff0 	bl	8005a58 <__retarget_lock_acquire_recursive>
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <__register_exitproc+0x88>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8005a80:	b324      	cbz	r4, 8005acc <__register_exitproc+0x6c>
 8005a82:	6865      	ldr	r5, [r4, #4]
 8005a84:	2d1f      	cmp	r5, #31
 8005a86:	dc26      	bgt.n	8005ad6 <__register_exitproc+0x76>
 8005a88:	b95e      	cbnz	r6, 8005aa2 <__register_exitproc+0x42>
 8005a8a:	1c6b      	adds	r3, r5, #1
 8005a8c:	3502      	adds	r5, #2
 8005a8e:	f8da 0000 	ldr.w	r0, [sl]
 8005a92:	6063      	str	r3, [r4, #4]
 8005a94:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8005a98:	f7ff ffe0 	bl	8005a5c <__retarget_lock_release_recursive>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8005aac:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8005ab0:	40ab      	lsls	r3, r5
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	2e02      	cmp	r6, #2
 8005ab6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8005aba:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8005abe:	d1e4      	bne.n	8005a8a <__register_exitproc+0x2a>
 8005ac0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8005aca:	e7de      	b.n	8005a8a <__register_exitproc+0x2a>
 8005acc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8005ad0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8005ad4:	e7d5      	b.n	8005a82 <__register_exitproc+0x22>
 8005ad6:	f8da 0000 	ldr.w	r0, [sl]
 8005ada:	f7ff ffbf 	bl	8005a5c <__retarget_lock_release_recursive>
 8005ade:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae2:	e7dc      	b.n	8005a9e <__register_exitproc+0x3e>
 8005ae4:	10000840 	.word	0x10000840
 8005ae8:	08006d84 	.word	0x08006d84

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	bf00      	nop
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
