   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"fips202.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.keccak_inc_init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7e-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	keccak_inc_init:
  24              	.LVL0:
  25              	.LFB2:
  26              		.file 1 "fips202.c"
   1:fips202.c     **** // SPDX-License-Identifier: Apache-2.0 or CC0-1.0
   2:fips202.c     **** /* Based on the public domain implementation in
   3:fips202.c     ****  * crypto_hash/keccakc512/simple/ from http://bench.cr.yp.to/supercop.html
   4:fips202.c     ****  * by Ronny Van Keer
   5:fips202.c     ****  * and the public domain "TweetFips202" implementation
   6:fips202.c     ****  * from https://twitter.com/tweetfips202
   7:fips202.c     ****  * by Gilles Van Assche, Daniel J. Bernstein, and Peter Schwabe */
   8:fips202.c     **** 
   9:fips202.c     **** #include <stddef.h>
  10:fips202.c     **** #include <stdint.h>
  11:fips202.c     **** #include <string.h>
  12:fips202.c     **** 
  13:fips202.c     **** #include "fips202.h"
  14:fips202.c     **** #include "keccakf1600.h"
  15:fips202.c     **** 
  16:fips202.c     **** #define NROUNDS 24
  17:fips202.c     **** #define ROL(a, offset) (((a) << (offset)) ^ ((a) >> (64 - (offset))))
  18:fips202.c     **** 
  19:fips202.c     **** #ifdef PROFILE_HASHING
  20:fips202.c     **** #include "hal.h"
  21:fips202.c     **** extern unsigned long long hash_cycles;
  22:fips202.c     **** #endif
  23:fips202.c     **** 
  24:fips202.c     **** 
  25:fips202.c     **** /*************************************************
  26:fips202.c     ****  * Name:        keccak_absorb
  27:fips202.c     ****  *
  28:fips202.c     ****  * Description: Absorb step of Keccak;
  29:fips202.c     ****  *              non-incremental, starts by zeroeing the state.
  30:fips202.c     ****  *
  31:fips202.c     ****  * Arguments:   - uint64_t *s:       pointer to (uninitialized) output Keccak state
  32:fips202.c     ****  *              - uint32_t r:        rate in bytes (e.g., 168 for SHAKE128)
  33:fips202.c     ****  *              - const uint8_t *m:  pointer to input to be absorbed into s
  34:fips202.c     ****  *              - size_t mlen:       length of input in bytes
  35:fips202.c     ****  *              - uint8_t p:         domain-separation byte for different Keccak-derived functions
  36:fips202.c     ****  **************************************************/
  37:fips202.c     **** static void keccak_absorb(uint64_t *s,
  38:fips202.c     ****     uint32_t r,
  39:fips202.c     ****     const uint8_t *m, size_t mlen,
  40:fips202.c     ****     uint8_t p)
  41:fips202.c     **** {
  42:fips202.c     ****   while (mlen >= r)
  43:fips202.c     ****   {
  44:fips202.c     ****     KeccakF1600_StateXORBytes(s, m, 0, r);
  45:fips202.c     ****     KeccakF1600_StatePermute(s);
  46:fips202.c     ****     mlen -= r;
  47:fips202.c     ****     m += r;
  48:fips202.c     ****   }
  49:fips202.c     **** 
  50:fips202.c     ****   if(mlen > 0){
  51:fips202.c     ****     KeccakF1600_StateXORBytes(s, m, 0, mlen);
  52:fips202.c     ****   }
  53:fips202.c     **** 
  54:fips202.c     ****   if(mlen == r-1){
  55:fips202.c     ****     p |= 128;
  56:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, mlen, 1);
  57:fips202.c     ****   } else {
  58:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, mlen, 1);
  59:fips202.c     ****     p = 128;
  60:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, r-1, 1);
  61:fips202.c     ****   }
  62:fips202.c     **** }
  63:fips202.c     **** 
  64:fips202.c     **** 
  65:fips202.c     **** /*************************************************
  66:fips202.c     ****  * Name:        keccak_squeezeblocks
  67:fips202.c     ****  *
  68:fips202.c     ****  * Description: Squeeze step of Keccak. Squeezes full blocks of r bytes each.
  69:fips202.c     ****  *              Modifies the state. Can be called multiple times to keep squeezing,
  70:fips202.c     ****  *              i.e., is incremental.
  71:fips202.c     ****  *
  72:fips202.c     ****  * Arguments:   - uint8_t *h:     pointer to output blocks
  73:fips202.c     ****  *              - size_t nblocks: number of blocks to be squeezed (written to h)
  74:fips202.c     ****  *              - uint64_t *s:    pointer to in/output Keccak state
  75:fips202.c     ****  *              - uint32_t r:     rate in bytes (e.g., 168 for SHAKE128)
  76:fips202.c     ****  **************************************************/
  77:fips202.c     **** static void keccak_squeezeblocks(uint8_t *h, size_t nblocks,
  78:fips202.c     ****     uint64_t *s,
  79:fips202.c     ****     uint32_t r)
  80:fips202.c     **** {
  81:fips202.c     ****   while(nblocks > 0)
  82:fips202.c     ****   {
  83:fips202.c     ****     KeccakF1600_StatePermute(s);
  84:fips202.c     ****     KeccakF1600_StateExtractBytes(s, h, 0, r);
  85:fips202.c     ****     h += r;
  86:fips202.c     ****     nblocks--;
  87:fips202.c     ****   }
  88:fips202.c     **** }
  89:fips202.c     **** 
  90:fips202.c     **** /*************************************************
  91:fips202.c     ****  * Name:        keccak_inc_init
  92:fips202.c     ****  *
  93:fips202.c     ****  * Description: Initializes the incremental Keccak state to zero.
  94:fips202.c     ****  *
  95:fips202.c     ****  * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
  96:fips202.c     ****  *                First 25 values represent Keccak state.
  97:fips202.c     ****  *                26th value represents either the number of absorbed bytes
  98:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
  99:fips202.c     ****  **************************************************/
 100:fips202.c     **** static void keccak_inc_init(uint64_t *s_inc) {
  27              		.loc 1 100 46 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
 101:fips202.c     ****     size_t i;
  31              		.loc 1 101 5 view .LVU1
 102:fips202.c     **** 
 103:fips202.c     ****     for (i = 0; i < 25; ++i) {
  32              		.loc 1 103 5 view .LVU2
  33              		.loc 1 103 17 view .LVU3
 100:fips202.c     ****     size_t i;
  34              		.loc 1 100 46 is_stmt 0 view .LVU4
  35 0000 10B5     		push	{r4, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 4, -8
  39              		.cfi_offset 14, -4
 104:fips202.c     ****         s_inc[i] = 0;
  40              		.loc 1 104 18 view .LVU5
  41 0002 C822     		movs	r2, #200
  42 0004 0021     		movs	r1, #0
 100:fips202.c     ****     size_t i;
  43              		.loc 1 100 46 view .LVU6
  44 0006 0446     		mov	r4, r0
  45              		.loc 1 104 18 view .LVU7
  46 0008 FFF7FEFF 		bl	memset
  47              	.LVL1:
 105:fips202.c     ****     }
 106:fips202.c     ****     s_inc[25] = 0;
  48              		.loc 1 106 5 is_stmt 1 view .LVU8
  49              		.loc 1 106 15 is_stmt 0 view .LVU9
  50 000c 0022     		movs	r2, #0
  51 000e 0023     		movs	r3, #0
  52 0010 C4E93223 		strd	r2, [r4, #200]
 107:fips202.c     **** }
  53              		.loc 1 107 1 view .LVU10
  54 0014 10BD     		pop	{r4, pc}
  55              		.loc 1 107 1 view .LVU11
  56              		.cfi_endproc
  57              	.LFE2:
  59              		.section	.text.keccak_inc_finalize,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu softvfp
  66              	keccak_inc_finalize:
  67              	.LVL2:
  68              	.LFB5:
 108:fips202.c     **** /*************************************************
 109:fips202.c     ****  * Name:        keccak_inc_absorb
 110:fips202.c     ****  *
 111:fips202.c     ****  * Description: Incremental keccak absorb
 112:fips202.c     ****  *              Preceded by keccak_inc_init, succeeded by keccak_inc_finalize
 113:fips202.c     ****  *
 114:fips202.c     ****  * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 115:fips202.c     ****  *                First 25 values represent Keccak state.
 116:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 117:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 118:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 119:fips202.c     ****  *              - const uint8_t *m: pointer to input to be absorbed into s_inc
 120:fips202.c     ****  *              - size_t mlen: length of input in bytes
 121:fips202.c     ****  **************************************************/
 122:fips202.c     **** static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
 123:fips202.c     ****                               size_t mlen) {
 124:fips202.c     ****     /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
 125:fips202.c     ****     while (mlen + s_inc[25] >= r) {
 126:fips202.c     **** 
 127:fips202.c     ****         KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 128:fips202.c     ****         mlen -= (size_t)(r - s_inc[25]);
 129:fips202.c     ****         m += r - s_inc[25];
 130:fips202.c     ****         s_inc[25] = 0;
 131:fips202.c     **** 
 132:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 133:fips202.c     ****     }
 134:fips202.c     **** 
 135:fips202.c     ****     KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 136:fips202.c     ****     s_inc[25] += mlen;
 137:fips202.c     **** }
 138:fips202.c     **** 
 139:fips202.c     **** static void keccak_inc_absorb1(uint64_t *s_inc, uint32_t r, const uint8_t *m,
 140:fips202.c     ****                               size_t mlen) {
 141:fips202.c     ****     /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
 142:fips202.c     ****     while (mlen + s_inc[25] >= r) {
 143:fips202.c     **** 
 144:fips202.c     ****         KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 145:fips202.c     ****         mlen -= (size_t)(r - s_inc[25]);
 146:fips202.c     ****         m += r - s_inc[25];
 147:fips202.c     ****         s_inc[25] = 0;
 148:fips202.c     **** 
 149:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 150:fips202.c     ****     }
 151:fips202.c     **** 
 152:fips202.c     ****     KeccakF1600_StateXORBytes1(s_inc, m, s_inc[25], mlen);
 153:fips202.c     ****     s_inc[25] += mlen;
 154:fips202.c     **** }
 155:fips202.c     **** 
 156:fips202.c     **** /*************************************************
 157:fips202.c     ****  * Name:        keccak_inc_finalize
 158:fips202.c     ****  *
 159:fips202.c     ****  * Description: Finalizes Keccak absorb phase, prepares for squeezing
 160:fips202.c     ****  *
 161:fips202.c     ****  * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 162:fips202.c     ****  *                First 25 values represent Keccak state.
 163:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 164:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 165:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 166:fips202.c     ****  *              - uint8_t p: domain-separation byte for different
 167:fips202.c     ****  *                                 Keccak-derived functions
 168:fips202.c     ****  **************************************************/
 169:fips202.c     **** static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
  69              		.loc 1 169 73 is_stmt 1 view -0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 8
  72              		@ frame_needed = 0, uses_anonymous_args = 0
 170:fips202.c     ****     /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
 171:fips202.c     ****        so we can always use one more byte for p in the current state. */
 172:fips202.c     ****     if(s_inc[25] == r-1){
  73              		.loc 1 172 5 view .LVU13
 169:fips202.c     ****     /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
  74              		.loc 1 169 73 is_stmt 0 view .LVU14
  75 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 24
  78              		.cfi_offset 4, -12
  79              		.cfi_offset 5, -8
  80              		.cfi_offset 14, -4
 169:fips202.c     ****     /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
  81              		.loc 1 169 73 view .LVU15
  82 0002 8DF80720 		strb	r2, [sp, #7]
  83              		.loc 1 172 13 view .LVU16
  84 0006 D0E93223 		ldrd	r2, r3, [r0, #200]
  85              	.LVL3:
  86              		.loc 1 172 22 view .LVU17
  87 000a 4D1E     		subs	r5, r1, #1
  88              		.loc 1 172 7 view .LVU18
  89 000c 002B     		cmp	r3, #0
  90 000e 08BF     		it	eq
  91 0010 AA42     		cmpeq	r2, r5
 169:fips202.c     ****     /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
  92              		.loc 1 169 73 view .LVU19
  93 0012 0446     		mov	r4, r0
  94              		.loc 1 172 7 view .LVU20
  95 0014 10D1     		bne	.L3
 173:fips202.c     ****       p |= 128;
  96              		.loc 1 173 7 is_stmt 1 view .LVU21
  97              		.loc 1 173 9 is_stmt 0 view .LVU22
  98 0016 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  99 001a 63F07F03 		orn	r3, r3, #127
 100 001e 8DF80730 		strb	r3, [sp, #7]
 101              	.LVL4:
 174:fips202.c     ****       KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 102              		.loc 1 174 7 is_stmt 1 view .LVU23
 103 0022 0DF10701 		add	r1, sp, #7
 104              	.LVL5:
 105              		.loc 1 174 7 is_stmt 0 view .LVU24
 106 0026 0123     		movs	r3, #1
 107              	.LVL6:
 108              	.L5:
 175:fips202.c     ****     } else {
 176:fips202.c     ****       KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 177:fips202.c     ****       p = 128;
 178:fips202.c     ****       KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 109              		.loc 1 178 7 view .LVU25
 110 0028 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 111              	.LVL7:
 179:fips202.c     ****     }
 180:fips202.c     ****     s_inc[25] = 0;
 112              		.loc 1 180 5 is_stmt 1 view .LVU26
 113              		.loc 1 180 15 is_stmt 0 view .LVU27
 114 002c 0022     		movs	r2, #0
 115 002e 0023     		movs	r3, #0
 116 0030 C4E93223 		strd	r2, [r4, #200]
 181:fips202.c     **** }
 117              		.loc 1 181 1 view .LVU28
 118 0034 03B0     		add	sp, sp, #12
 119              	.LCFI2:
 120              		.cfi_remember_state
 121              		.cfi_def_cfa_offset 12
 122              		@ sp needed
 123 0036 30BD     		pop	{r4, r5, pc}
 124              	.LVL8:
 125              	.L3:
 126              	.LCFI3:
 127              		.cfi_restore_state
 176:fips202.c     ****       p = 128;
 128              		.loc 1 176 7 is_stmt 1 view .LVU29
 129 0038 0123     		movs	r3, #1
 130 003a 0DF10701 		add	r1, sp, #7
 131              	.LVL9:
 176:fips202.c     ****       p = 128;
 132              		.loc 1 176 7 is_stmt 0 view .LVU30
 133 003e FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 134              	.LVL10:
 177:fips202.c     ****       KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 135              		.loc 1 177 7 is_stmt 1 view .LVU31
 177:fips202.c     ****       KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 136              		.loc 1 177 9 is_stmt 0 view .LVU32
 137 0042 8023     		movs	r3, #128
 138 0044 8DF80730 		strb	r3, [sp, #7]
 178:fips202.c     ****     }
 139              		.loc 1 178 7 is_stmt 1 view .LVU33
 140 0048 2A46     		mov	r2, r5
 141 004a 0123     		movs	r3, #1
 142 004c 0DF10701 		add	r1, sp, #7
 143 0050 2046     		mov	r0, r4
 144 0052 E9E7     		b	.L5
 145              		.cfi_endproc
 146              	.LFE5:
 148              		.section	.text.keccak_inc_absorb,"ax",%progbits
 149              		.align	1
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu softvfp
 155              	keccak_inc_absorb:
 156              	.LVL11:
 157              	.LFB3:
 123:fips202.c     ****     /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
 158              		.loc 1 123 44 view -0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 125:fips202.c     **** 
 162              		.loc 1 125 5 view .LVU35
 123:fips202.c     ****     /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
 163              		.loc 1 123 44 is_stmt 0 view .LVU36
 164 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 32
 167              		.cfi_offset 3, -32
 168              		.cfi_offset 4, -28
 169              		.cfi_offset 5, -24
 170              		.cfi_offset 6, -20
 171              		.cfi_offset 7, -16
 172              		.cfi_offset 8, -12
 173              		.cfi_offset 9, -8
 174              		.cfi_offset 14, -4
 123:fips202.c     ****     /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
 175              		.loc 1 123 44 view .LVU37
 176 0004 0446     		mov	r4, r0
 177 0006 0F46     		mov	r7, r1
 178 0008 1646     		mov	r6, r2
 179 000a 1D46     		mov	r5, r3
 130:fips202.c     **** 
 180              		.loc 1 130 19 view .LVU38
 181 000c 4FF00008 		mov	r8, #0
 182 0010 4FF00009 		mov	r9, #0
 183              	.LVL12:
 184              	.L7:
 125:fips202.c     **** 
 185              		.loc 1 125 11 is_stmt 1 view .LVU39
 125:fips202.c     **** 
 186              		.loc 1 125 24 is_stmt 0 view .LVU40
 187 0014 D4E93223 		ldrd	r2, r3, [r4, #200]
 125:fips202.c     **** 
 188              		.loc 1 125 17 view .LVU41
 189 0018 A918     		adds	r1, r5, r2
 190 001a 43F10003 		adc	r3, r3, #0
 125:fips202.c     **** 
 191              		.loc 1 125 11 view .LVU42
 192 001e B942     		cmp	r1, r7
 193 0020 73F10003 		sbcs	r3, r3, #0
 194 0024 0DD2     		bcs	.L8
 135:fips202.c     ****     s_inc[25] += mlen;
 195              		.loc 1 135 5 is_stmt 1 view .LVU43
 196 0026 2B46     		mov	r3, r5
 197 0028 3146     		mov	r1, r6
 198 002a 2046     		mov	r0, r4
 199 002c FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 200              	.LVL13:
 136:fips202.c     **** }
 201              		.loc 1 136 5 view .LVU44
 136:fips202.c     **** }
 202              		.loc 1 136 15 is_stmt 0 view .LVU45
 203 0030 D4E93232 		ldrd	r3, r2, [r4, #200]
 204 0034 5B19     		adds	r3, r3, r5
 205 0036 42F10002 		adc	r2, r2, #0
 206 003a C4E93232 		strd	r3, r2, [r4, #200]
 137:fips202.c     **** 
 207              		.loc 1 137 1 view .LVU46
 208 003e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 209              	.LVL14:
 210              	.L8:
 127:fips202.c     ****         mlen -= (size_t)(r - s_inc[25]);
 211              		.loc 1 127 9 is_stmt 1 view .LVU47
 212 0042 BB1A     		subs	r3, r7, r2
 213 0044 3146     		mov	r1, r6
 214 0046 2046     		mov	r0, r4
 215 0048 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 216              	.LVL15:
 128:fips202.c     ****         m += r - s_inc[25];
 217              		.loc 1 128 9 view .LVU48
 128:fips202.c     ****         m += r - s_inc[25];
 218              		.loc 1 128 17 is_stmt 0 view .LVU49
 219 004c D4F8C830 		ldr	r3, [r4, #200]
 132:fips202.c     ****     }
 220              		.loc 1 132 9 view .LVU50
 221 0050 2046     		mov	r0, r4
 128:fips202.c     ****         m += r - s_inc[25];
 222              		.loc 1 128 17 view .LVU51
 223 0052 DA1B     		subs	r2, r3, r7
 130:fips202.c     **** 
 224              		.loc 1 130 19 view .LVU52
 225 0054 C4E93289 		strd	r8, [r4, #200]
 129:fips202.c     ****         s_inc[25] = 0;
 226              		.loc 1 129 16 view .LVU53
 227 0058 FB1A     		subs	r3, r7, r3
 128:fips202.c     ****         m += r - s_inc[25];
 228              		.loc 1 128 14 view .LVU54
 229 005a 1544     		add	r5, r5, r2
 230              	.LVL16:
 129:fips202.c     ****         s_inc[25] = 0;
 231              		.loc 1 129 9 is_stmt 1 view .LVU55
 129:fips202.c     ****         s_inc[25] = 0;
 232              		.loc 1 129 11 is_stmt 0 view .LVU56
 233 005c 1E44     		add	r6, r6, r3
 234              	.LVL17:
 130:fips202.c     **** 
 235              		.loc 1 130 9 is_stmt 1 view .LVU57
 132:fips202.c     ****     }
 236              		.loc 1 132 9 view .LVU58
 237 005e FFF7FEFF 		bl	KeccakF1600_StatePermute
 238              	.LVL18:
 239 0062 D7E7     		b	.L7
 240              		.cfi_endproc
 241              	.LFE3:
 243              		.section	.text.keccak_absorb,"ax",%progbits
 244              		.align	1
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 250              	keccak_absorb:
 251              	.LVL19:
 252              	.LFB0:
  41:fips202.c     ****   while (mlen >= r)
 253              		.loc 1 41 1 view -0
 254              		.cfi_startproc
 255              		@ args = 4, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
  41:fips202.c     ****   while (mlen >= r)
 257              		.loc 1 41 1 is_stmt 0 view .LVU60
 258 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 259              	.LCFI5:
 260              		.cfi_def_cfa_offset 24
 261              		.cfi_offset 3, -24
 262              		.cfi_offset 4, -20
 263              		.cfi_offset 5, -16
 264              		.cfi_offset 6, -12
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 0646     		mov	r6, r0
 268 0004 0C46     		mov	r4, r1
 269 0006 1746     		mov	r7, r2
 270 0008 1D46     		mov	r5, r3
  42:fips202.c     ****   {
 271              		.loc 1 42 3 is_stmt 1 view .LVU61
 272              	.LVL20:
 273              	.L10:
  42:fips202.c     ****   {
 274              		.loc 1 42 9 view .LVU62
 275 000a A542     		cmp	r5, r4
 276 000c 16D2     		bcs	.L11
  50:fips202.c     ****     KeccakF1600_StateXORBytes(s, m, 0, mlen);
 277              		.loc 1 50 3 view .LVU63
  50:fips202.c     ****     KeccakF1600_StateXORBytes(s, m, 0, mlen);
 278              		.loc 1 50 5 is_stmt 0 view .LVU64
 279 000e 2DB1     		cbz	r5, .L12
  51:fips202.c     ****   }
 280              		.loc 1 51 5 is_stmt 1 view .LVU65
 281 0010 2B46     		mov	r3, r5
 282 0012 0022     		movs	r2, #0
 283 0014 3946     		mov	r1, r7
 284 0016 3046     		mov	r0, r6
 285 0018 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 286              	.LVL21:
 287              	.L12:
  54:fips202.c     ****     p |= 128;
 288              		.loc 1 54 3 view .LVU66
  54:fips202.c     ****     p |= 128;
 289              		.loc 1 54 15 is_stmt 0 view .LVU67
 290 001c 013C     		subs	r4, r4, #1
 291              	.LVL22:
  54:fips202.c     ****     p |= 128;
 292              		.loc 1 54 5 view .LVU68
 293 001e AC42     		cmp	r4, r5
 294 0020 18D1     		bne	.L13
  55:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, mlen, 1);
 295              		.loc 1 55 5 is_stmt 1 view .LVU69
  55:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, mlen, 1);
 296              		.loc 1 55 7 is_stmt 0 view .LVU70
 297 0022 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 298 0026 63F07F03 		orn	r3, r3, #127
 299 002a 8DF81830 		strb	r3, [sp, #24]
  56:fips202.c     ****   } else {
 300              		.loc 1 56 5 is_stmt 1 view .LVU71
 301 002e 2A46     		mov	r2, r5
 302 0030 0123     		movs	r3, #1
 303              	.L18:
  60:fips202.c     ****   }
 304              		.loc 1 60 5 is_stmt 0 view .LVU72
 305 0032 06A9     		add	r1, sp, #24
 306 0034 3046     		mov	r0, r6
 307 0036 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 308              	.LVL23:
  62:fips202.c     **** 
 309              		.loc 1 62 1 view .LVU73
 310 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 311              	.LVL24:
 312              	.L11:
  44:fips202.c     ****     KeccakF1600_StatePermute(s);
 313              		.loc 1 44 5 is_stmt 1 view .LVU74
 314 003c 3946     		mov	r1, r7
 315 003e 2346     		mov	r3, r4
 316 0040 0022     		movs	r2, #0
 317 0042 3046     		mov	r0, r6
 318 0044 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 319              	.LVL25:
  45:fips202.c     ****     mlen -= r;
 320              		.loc 1 45 5 view .LVU75
 321 0048 3046     		mov	r0, r6
 322 004a FFF7FEFF 		bl	KeccakF1600_StatePermute
 323              	.LVL26:
  46:fips202.c     ****     m += r;
 324              		.loc 1 46 5 view .LVU76
  46:fips202.c     ****     m += r;
 325              		.loc 1 46 10 is_stmt 0 view .LVU77
 326 004e 2D1B     		subs	r5, r5, r4
 327              	.LVL27:
  47:fips202.c     ****   }
 328              		.loc 1 47 5 is_stmt 1 view .LVU78
  47:fips202.c     ****   }
 329              		.loc 1 47 7 is_stmt 0 view .LVU79
 330 0050 2744     		add	r7, r7, r4
 331              	.LVL28:
  47:fips202.c     ****   }
 332              		.loc 1 47 7 view .LVU80
 333 0052 DAE7     		b	.L10
 334              	.LVL29:
 335              	.L13:
  58:fips202.c     ****     p = 128;
 336              		.loc 1 58 5 is_stmt 1 view .LVU81
 337 0054 0123     		movs	r3, #1
 338 0056 2A46     		mov	r2, r5
 339 0058 06A9     		add	r1, sp, #24
 340 005a 3046     		mov	r0, r6
 341 005c FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 342              	.LVL30:
  59:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, r-1, 1);
 343              		.loc 1 59 5 view .LVU82
  59:fips202.c     ****     KeccakF1600_StateXORBytes(s, &p, r-1, 1);
 344              		.loc 1 59 7 is_stmt 0 view .LVU83
 345 0060 8023     		movs	r3, #128
 346 0062 8DF81830 		strb	r3, [sp, #24]
  60:fips202.c     ****   }
 347              		.loc 1 60 5 is_stmt 1 view .LVU84
 348 0066 2246     		mov	r2, r4
 349 0068 0123     		movs	r3, #1
 350 006a E2E7     		b	.L18
 351              		.cfi_endproc
 352              	.LFE0:
 354              		.section	.text.keccak_inc_squeeze,"ax",%progbits
 355              		.align	1
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 359              		.fpu softvfp
 361              	keccak_inc_squeeze:
 362              	.LVL31:
 363              	.LFB6:
 182:fips202.c     **** 
 183:fips202.c     **** /*************************************************
 184:fips202.c     ****  * Name:        keccak_inc_squeeze
 185:fips202.c     ****  *
 186:fips202.c     ****  * Description: Incremental Keccak squeeze; can be called on byte-level
 187:fips202.c     ****  *
 188:fips202.c     ****  * Arguments:   - uint8_t *h: pointer to output bytes
 189:fips202.c     ****  *              - size_t outlen: number of bytes to be squeezed
 190:fips202.c     ****  *              - uint64_t *s_inc: pointer to input/output incremental state
 191:fips202.c     ****  *                First 25 values represent Keccak state.
 192:fips202.c     ****  *                26th value represents either the number of absorbed bytes
 193:fips202.c     ****  *                that have not been permuted, or not-yet-squeezed bytes.
 194:fips202.c     ****  *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 195:fips202.c     ****  **************************************************/
 196:fips202.c     **** static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
 197:fips202.c     ****                                uint64_t *s_inc, uint32_t r) {
 364              		.loc 1 197 61 view -0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 198:fips202.c     ****     size_t len;
 368              		.loc 1 198 5 view .LVU86
 199:fips202.c     ****     if(outlen < s_inc[25])
 369              		.loc 1 199 5 view .LVU87
 197:fips202.c     ****     size_t len;
 370              		.loc 1 197 61 is_stmt 0 view .LVU88
 371 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 372              	.LCFI6:
 373              		.cfi_def_cfa_offset 32
 374              		.cfi_offset 3, -32
 375              		.cfi_offset 4, -28
 376              		.cfi_offset 5, -24
 377              		.cfi_offset 6, -20
 378              		.cfi_offset 7, -16
 379              		.cfi_offset 8, -12
 380              		.cfi_offset 9, -8
 381              		.cfi_offset 14, -4
 197:fips202.c     ****     size_t len;
 382              		.loc 1 197 61 view .LVU89
 383 0004 1446     		mov	r4, r2
 384 0006 9846     		mov	r8, r3
 385              		.loc 1 199 22 view .LVU90
 386 0008 D2E93223 		ldrd	r2, r3, [r2, #200]
 387              	.LVL32:
 197:fips202.c     ****     size_t len;
 388              		.loc 1 197 61 view .LVU91
 389 000c 0D46     		mov	r5, r1
 390              		.loc 1 199 7 view .LVU92
 391 000e 9142     		cmp	r1, r2
 392 0010 4FF00001 		mov	r1, #0
 393              	.LVL33:
 394              		.loc 1 199 7 view .LVU93
 395 0014 71EB0303 		sbcs	r3, r1, r3
 200:fips202.c     ****     {
 201:fips202.c     ****         len = outlen;
 202:fips202.c     ****     }
 203:fips202.c     ****     else
 204:fips202.c     ****     {
 205:fips202.c     ****         len = s_inc[25];
 396              		.loc 1 205 13 view .LVU94
 397 0018 2CBF     		ite	cs
 398 001a 1646     		movcs	r6, r2
 201:fips202.c     ****     }
 399              		.loc 1 201 13 view .LVU95
 400 001c 2E46     		movcc	r6, r5
 401              	.LVL34:
 206:fips202.c     ****     }
 207:fips202.c     **** 
 208:fips202.c     ****     KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 402              		.loc 1 208 5 is_stmt 1 view .LVU96
 197:fips202.c     ****     size_t len;
 403              		.loc 1 197 61 is_stmt 0 view .LVU97
 404 001e 0746     		mov	r7, r0
 405              		.loc 1 208 5 view .LVU98
 406 0020 3346     		mov	r3, r6
 407 0022 A8EB0202 		sub	r2, r8, r2
 408 0026 0146     		mov	r1, r0
 409 0028 2046     		mov	r0, r4
 410              	.LVL35:
 411              		.loc 1 208 5 view .LVU99
 412 002a FFF7FEFF 		bl	KeccakF1600_StateExtractBytes
 413              	.LVL36:
 209:fips202.c     ****     h += len;
 414              		.loc 1 209 5 is_stmt 1 view .LVU100
 210:fips202.c     ****     outlen -= len;
 211:fips202.c     ****     s_inc[25] -= len;
 415              		.loc 1 211 15 is_stmt 0 view .LVU101
 416 002e D4E93232 		ldrd	r3, r2, [r4, #200]
 417 0032 9B1B     		subs	r3, r3, r6
 418 0034 62F10002 		sbc	r2, r2, #0
 419 0038 C4E93232 		strd	r3, r2, [r4, #200]
 209:fips202.c     ****     h += len;
 420              		.loc 1 209 7 view .LVU102
 421 003c 3744     		add	r7, r7, r6
 422              	.LVL37:
 210:fips202.c     ****     outlen -= len;
 423              		.loc 1 210 5 is_stmt 1 view .LVU103
 210:fips202.c     ****     outlen -= len;
 424              		.loc 1 210 12 is_stmt 0 view .LVU104
 425 003e AD1B     		subs	r5, r5, r6
 426              	.LVL38:
 427              		.loc 1 211 5 is_stmt 1 view .LVU105
 212:fips202.c     **** 
 213:fips202.c     ****     /* Then squeeze the remaining necessary blocks */
 214:fips202.c     ****     while (outlen > 0) {
 428              		.loc 1 214 5 view .LVU106
 215:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 216:fips202.c     ****         if(outlen < r)
 217:fips202.c     ****         {
 218:fips202.c     ****             len = outlen;
 219:fips202.c     ****         }
 220:fips202.c     ****         else
 221:fips202.c     ****         {
 222:fips202.c     ****             len = r;
 223:fips202.c     ****         }
 224:fips202.c     ****         KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 429              		.loc 1 224 9 is_stmt 0 view .LVU107
 430 0040 4FF00009 		mov	r9, #0
 431              	.LVL39:
 432              	.L21:
 214:fips202.c     ****         KeccakF1600_StatePermute(s_inc);
 433              		.loc 1 214 11 is_stmt 1 view .LVU108
 434 0044 0DB9     		cbnz	r5, .L22
 225:fips202.c     ****         h += len;
 226:fips202.c     ****         outlen -= len;
 227:fips202.c     ****         s_inc[25] = r - len;
 228:fips202.c     ****     }
 229:fips202.c     **** }
 435              		.loc 1 229 1 is_stmt 0 view .LVU109
 436 0046 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 437              	.LVL40:
 438              	.L22:
 215:fips202.c     ****         if(outlen < r)
 439              		.loc 1 215 9 is_stmt 1 view .LVU110
 440 004a 2046     		mov	r0, r4
 441 004c FFF7FEFF 		bl	KeccakF1600_StatePermute
 442              	.LVL41:
 216:fips202.c     ****         {
 443              		.loc 1 216 9 view .LVU111
 444 0050 4545     		cmp	r5, r8
 445 0052 2E46     		mov	r6, r5
 446 0054 28BF     		it	cs
 447 0056 4646     		movcs	r6, r8
 448              	.LVL42:
 224:fips202.c     ****         h += len;
 449              		.loc 1 224 9 view .LVU112
 450 0058 3346     		mov	r3, r6
 451 005a 3946     		mov	r1, r7
 452 005c 0022     		movs	r2, #0
 453 005e 2046     		mov	r0, r4
 225:fips202.c     ****         outlen -= len;
 454              		.loc 1 225 11 is_stmt 0 view .LVU113
 455 0060 3744     		add	r7, r7, r6
 456              	.LVL43:
 226:fips202.c     ****         s_inc[25] = r - len;
 457              		.loc 1 226 16 view .LVU114
 458 0062 AD1B     		subs	r5, r5, r6
 459              	.LVL44:
 227:fips202.c     ****     }
 460              		.loc 1 227 23 view .LVU115
 461 0064 A8EB0606 		sub	r6, r8, r6
 462              	.LVL45:
 224:fips202.c     ****         h += len;
 463              		.loc 1 224 9 view .LVU116
 464 0068 FFF7FEFF 		bl	KeccakF1600_StateExtractBytes
 465              	.LVL46:
 225:fips202.c     ****         outlen -= len;
 466              		.loc 1 225 9 is_stmt 1 view .LVU117
 226:fips202.c     ****         s_inc[25] = r - len;
 467              		.loc 1 226 9 view .LVU118
 227:fips202.c     ****     }
 468              		.loc 1 227 9 view .LVU119
 227:fips202.c     ****     }
 469              		.loc 1 227 23 is_stmt 0 view .LVU120
 470 006c C4E93269 		strd	r6, r9, [r4, #200]
 471 0070 E8E7     		b	.L21
 472              		.cfi_endproc
 473              	.LFE6:
 475              		.section	.text.keccak_squeezeblocks,"ax",%progbits
 476              		.align	1
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu softvfp
 482              	keccak_squeezeblocks:
 483              	.LVL47:
 484              	.LFB1:
  80:fips202.c     ****   while(nblocks > 0)
 485              		.loc 1 80 1 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
  80:fips202.c     ****   while(nblocks > 0)
 489              		.loc 1 80 1 is_stmt 0 view .LVU122
 490 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 491              	.LCFI7:
 492              		.cfi_def_cfa_offset 24
 493              		.cfi_offset 3, -24
 494              		.cfi_offset 4, -20
 495              		.cfi_offset 5, -16
 496              		.cfi_offset 6, -12
 497              		.cfi_offset 7, -8
 498              		.cfi_offset 14, -4
 499 0002 0546     		mov	r5, r0
 500 0004 0C46     		mov	r4, r1
 501 0006 1646     		mov	r6, r2
 502 0008 1F46     		mov	r7, r3
  81:fips202.c     ****   {
 503              		.loc 1 81 3 is_stmt 1 view .LVU123
 504              	.LVL48:
 505              	.L25:
  81:fips202.c     ****   {
 506              		.loc 1 81 8 view .LVU124
 507 000a 04B9     		cbnz	r4, .L26
  88:fips202.c     **** 
 508              		.loc 1 88 1 is_stmt 0 view .LVU125
 509 000c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 510              	.LVL49:
 511              	.L26:
  83:fips202.c     ****     KeccakF1600_StateExtractBytes(s, h, 0, r);
 512              		.loc 1 83 5 is_stmt 1 view .LVU126
 513 000e 3046     		mov	r0, r6
 514 0010 FFF7FEFF 		bl	KeccakF1600_StatePermute
 515              	.LVL50:
  84:fips202.c     ****     h += r;
 516              		.loc 1 84 5 view .LVU127
 517 0014 2946     		mov	r1, r5
 518 0016 3B46     		mov	r3, r7
 519 0018 0022     		movs	r2, #0
 520 001a 3046     		mov	r0, r6
 521 001c FFF7FEFF 		bl	KeccakF1600_StateExtractBytes
 522              	.LVL51:
  85:fips202.c     ****     nblocks--;
 523              		.loc 1 85 5 view .LVU128
  85:fips202.c     ****     nblocks--;
 524              		.loc 1 85 7 is_stmt 0 view .LVU129
 525 0020 3D44     		add	r5, r5, r7
 526              	.LVL52:
  86:fips202.c     ****   }
 527              		.loc 1 86 5 is_stmt 1 view .LVU130
  86:fips202.c     ****   }
 528              		.loc 1 86 12 is_stmt 0 view .LVU131
 529 0022 013C     		subs	r4, r4, #1
 530              	.LVL53:
  86:fips202.c     ****   }
 531              		.loc 1 86 12 view .LVU132
 532 0024 F1E7     		b	.L25
 533              		.cfi_endproc
 534              	.LFE1:
 536              		.section	.text.shake128_inc_init,"ax",%progbits
 537              		.align	1
 538              		.global	shake128_inc_init
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 542              		.fpu softvfp
 544              	shake128_inc_init:
 545              	.LVL54:
 546              	.LFB7:
 230:fips202.c     **** 
 231:fips202.c     **** void shake128_inc_init(shake128incctx *state) {
 547              		.loc 1 231 47 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 0
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 232:fips202.c     **** #ifdef PROFILE_HASHING
 233:fips202.c     ****   uint64_t t0 = hal_get_time();
 234:fips202.c     **** #endif
 235:fips202.c     ****     keccak_inc_init(state->ctx);
 552              		.loc 1 235 5 view .LVU134
 553 0000 FFF7FEBF 		b	keccak_inc_init
 554              	.LVL55:
 555              		.loc 1 235 5 is_stmt 0 view .LVU135
 556              		.cfi_endproc
 557              	.LFE7:
 559              		.section	.text.shake128_inc_absorb,"ax",%progbits
 560              		.align	1
 561              		.global	shake128_inc_absorb
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 565              		.fpu softvfp
 567              	shake128_inc_absorb:
 568              	.LVL56:
 569              	.LFB8:
 236:fips202.c     **** #ifdef PROFILE_HASHING
 237:fips202.c     ****   uint64_t t1 = hal_get_time();
 238:fips202.c     ****   hash_cycles += (t1-t0);
 239:fips202.c     **** #endif
 240:fips202.c     **** }
 241:fips202.c     **** 
 242:fips202.c     **** void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 570              		.loc 1 242 85 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
 243:fips202.c     **** #ifdef PROFILE_HASHING
 244:fips202.c     ****   uint64_t t0 = hal_get_time();
 245:fips202.c     **** #endif
 246:fips202.c     ****     keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 575              		.loc 1 246 5 view .LVU137
 242:fips202.c     **** #ifdef PROFILE_HASHING
 576              		.loc 1 242 85 is_stmt 0 view .LVU138
 577 0000 1346     		mov	r3, r2
 578              		.loc 1 246 5 view .LVU139
 579 0002 0A46     		mov	r2, r1
 580              	.LVL57:
 581              		.loc 1 246 5 view .LVU140
 582 0004 A821     		movs	r1, #168
 583              	.LVL58:
 584              		.loc 1 246 5 view .LVU141
 585 0006 FFF7FEBF 		b	keccak_inc_absorb
 586              	.LVL59:
 587              		.loc 1 246 5 view .LVU142
 588              		.cfi_endproc
 589              	.LFE8:
 591              		.section	.text.shake128_inc_finalize,"ax",%progbits
 592              		.align	1
 593              		.global	shake128_inc_finalize
 594              		.syntax unified
 595              		.thumb
 596              		.thumb_func
 597              		.fpu softvfp
 599              	shake128_inc_finalize:
 600              	.LVL60:
 601              	.LFB9:
 247:fips202.c     **** #ifdef PROFILE_HASHING
 248:fips202.c     ****   uint64_t t1 = hal_get_time();
 249:fips202.c     ****   hash_cycles += (t1-t0);
 250:fips202.c     **** #endif
 251:fips202.c     **** }
 252:fips202.c     **** 
 253:fips202.c     **** void shake128_inc_finalize(shake128incctx *state) {
 602              		.loc 1 253 51 is_stmt 1 view -0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 254:fips202.c     **** #ifdef PROFILE_HASHING
 255:fips202.c     ****   uint64_t t0 = hal_get_time();
 256:fips202.c     **** #endif
 257:fips202.c     ****     keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 607              		.loc 1 257 5 view .LVU144
 608 0000 1F22     		movs	r2, #31
 609 0002 A821     		movs	r1, #168
 610 0004 FFF7FEBF 		b	keccak_inc_finalize
 611              	.LVL61:
 612              		.loc 1 257 5 is_stmt 0 view .LVU145
 613              		.cfi_endproc
 614              	.LFE9:
 616              		.section	.text.shake128_inc_squeeze,"ax",%progbits
 617              		.align	1
 618              		.global	shake128_inc_squeeze
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 622              		.fpu softvfp
 624              	shake128_inc_squeeze:
 625              	.LVL62:
 626              	.LFB10:
 258:fips202.c     **** #ifdef PROFILE_HASHING
 259:fips202.c     ****   uint64_t t1 = hal_get_time();
 260:fips202.c     ****   hash_cycles += (t1-t0);
 261:fips202.c     **** #endif
 262:fips202.c     **** }
 263:fips202.c     **** 
 264:fips202.c     **** void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 627              		.loc 1 264 82 is_stmt 1 view -0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 265:fips202.c     **** #ifdef PROFILE_HASHING
 266:fips202.c     ****   uint64_t t0 = hal_get_time();
 267:fips202.c     **** #endif
 268:fips202.c     ****     keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 632              		.loc 1 268 5 view .LVU147
 633 0000 A823     		movs	r3, #168
 634 0002 FFF7FEBF 		b	keccak_inc_squeeze
 635              	.LVL63:
 636              		.loc 1 268 5 is_stmt 0 view .LVU148
 637              		.cfi_endproc
 638              	.LFE10:
 640              		.section	.text.shake128_inc_ctx_clone,"ax",%progbits
 641              		.align	1
 642              		.global	shake128_inc_ctx_clone
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu softvfp
 648              	shake128_inc_ctx_clone:
 649              	.LVL64:
 650              	.LFB11:
 269:fips202.c     **** #ifdef PROFILE_HASHING
 270:fips202.c     ****   uint64_t t1 = hal_get_time();
 271:fips202.c     ****   hash_cycles += (t1-t0);
 272:fips202.c     **** #endif
 273:fips202.c     **** }
 274:fips202.c     **** 
 275:fips202.c     **** void shake128_inc_ctx_clone(shake128incctx* dest, const shake128incctx *src) {
 651              		.loc 1 275 78 is_stmt 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              		@ link register save eliminated.
 276:fips202.c     ****     memcpy(dest, src, sizeof(shake128incctx));
 656              		.loc 1 276 5 view .LVU150
 657 0000 D022     		movs	r2, #208
 658 0002 FFF7FEBF 		b	memcpy
 659              	.LVL65:
 660              		.loc 1 276 5 is_stmt 0 view .LVU151
 661              		.cfi_endproc
 662              	.LFE11:
 664              		.section	.text.shake128_inc_ctx_release,"ax",%progbits
 665              		.align	1
 666              		.global	shake128_inc_ctx_release
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
 670              		.fpu softvfp
 672              	shake128_inc_ctx_release:
 673              	.LFB57:
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678 0000 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE57:
 682              		.section	.text.shake256_inc_init,"ax",%progbits
 683              		.align	1
 684              		.global	shake256_inc_init
 685              		.syntax unified
 686              		.thumb
 687              		.thumb_func
 688              		.fpu softvfp
 690              	shake256_inc_init:
 691              	.LVL66:
 692              	.LFB13:
 277:fips202.c     **** }
 278:fips202.c     **** 
 279:fips202.c     **** void shake128_inc_ctx_release(shake128incctx *state) {
 280:fips202.c     ****     (void) state;
 281:fips202.c     **** }
 282:fips202.c     **** 
 283:fips202.c     **** void shake256_inc_init(shake256incctx *state) {
 693              		.loc 1 283 47 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 284:fips202.c     **** #ifdef PROFILE_HASHING
 285:fips202.c     ****   uint64_t t0 = hal_get_time();
 286:fips202.c     **** #endif
 287:fips202.c     ****     keccak_inc_init(state->ctx);
 698              		.loc 1 287 5 view .LVU153
 699 0000 FFF7FEBF 		b	keccak_inc_init
 700              	.LVL67:
 701              		.loc 1 287 5 is_stmt 0 view .LVU154
 702              		.cfi_endproc
 703              	.LFE13:
 705              		.section	.text.shake256_inc_absorb,"ax",%progbits
 706              		.align	1
 707              		.global	shake256_inc_absorb
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu softvfp
 713              	shake256_inc_absorb:
 714              	.LVL68:
 715              	.LFB14:
 288:fips202.c     **** #ifdef PROFILE_HASHING
 289:fips202.c     ****   uint64_t t1 = hal_get_time();
 290:fips202.c     ****   hash_cycles += (t1-t0);
 291:fips202.c     **** #endif
 292:fips202.c     **** }
 293:fips202.c     **** 
 294:fips202.c     **** void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 716              		.loc 1 294 85 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 295:fips202.c     **** #ifdef PROFILE_HASHING
 296:fips202.c     ****   uint64_t t0 = hal_get_time();
 297:fips202.c     **** #endif
 298:fips202.c     ****     keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 721              		.loc 1 298 5 view .LVU156
 294:fips202.c     **** #ifdef PROFILE_HASHING
 722              		.loc 1 294 85 is_stmt 0 view .LVU157
 723 0000 1346     		mov	r3, r2
 724              		.loc 1 298 5 view .LVU158
 725 0002 0A46     		mov	r2, r1
 726              	.LVL69:
 727              		.loc 1 298 5 view .LVU159
 728 0004 8821     		movs	r1, #136
 729              	.LVL70:
 730              		.loc 1 298 5 view .LVU160
 731 0006 FFF7FEBF 		b	keccak_inc_absorb
 732              	.LVL71:
 733              		.loc 1 298 5 view .LVU161
 734              		.cfi_endproc
 735              	.LFE14:
 737              		.section	.text.shake256_inc_finalize,"ax",%progbits
 738              		.align	1
 739              		.global	shake256_inc_finalize
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 743              		.fpu softvfp
 745              	shake256_inc_finalize:
 746              	.LVL72:
 747              	.LFB15:
 299:fips202.c     **** #ifdef PROFILE_HASHING
 300:fips202.c     ****   uint64_t t1 = hal_get_time();
 301:fips202.c     ****   hash_cycles += (t1-t0);
 302:fips202.c     **** #endif
 303:fips202.c     **** }
 304:fips202.c     **** 
 305:fips202.c     **** void shake256_inc_finalize(shake256incctx *state) {
 748              		.loc 1 305 51 is_stmt 1 view -0
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 0, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 306:fips202.c     **** #ifdef PROFILE_HASHING
 307:fips202.c     ****   uint64_t t0 = hal_get_time();
 308:fips202.c     **** #endif
 309:fips202.c     ****     keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 753              		.loc 1 309 5 view .LVU163
 754 0000 1F22     		movs	r2, #31
 755 0002 8821     		movs	r1, #136
 756 0004 FFF7FEBF 		b	keccak_inc_finalize
 757              	.LVL73:
 758              		.loc 1 309 5 is_stmt 0 view .LVU164
 759              		.cfi_endproc
 760              	.LFE15:
 762              		.section	.text.shake256_inc_squeeze,"ax",%progbits
 763              		.align	1
 764              		.global	shake256_inc_squeeze
 765              		.syntax unified
 766              		.thumb
 767              		.thumb_func
 768              		.fpu softvfp
 770              	shake256_inc_squeeze:
 771              	.LVL74:
 772              	.LFB16:
 310:fips202.c     **** #ifdef PROFILE_HASHING
 311:fips202.c     ****   uint64_t t1 = hal_get_time();
 312:fips202.c     ****   hash_cycles += (t1-t0);
 313:fips202.c     **** #endif
 314:fips202.c     **** }
 315:fips202.c     **** 
 316:fips202.c     **** void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 773              		.loc 1 316 82 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 317:fips202.c     **** #ifdef PROFILE_HASHING
 318:fips202.c     ****   uint64_t t0 = hal_get_time();
 319:fips202.c     **** #endif
 320:fips202.c     ****     keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 778              		.loc 1 320 5 view .LVU166
 779 0000 8823     		movs	r3, #136
 780 0002 FFF7FEBF 		b	keccak_inc_squeeze
 781              	.LVL75:
 782              		.loc 1 320 5 is_stmt 0 view .LVU167
 783              		.cfi_endproc
 784              	.LFE16:
 786              		.section	.text.shake256_inc_ctx_clone,"ax",%progbits
 787              		.align	1
 788              		.global	shake256_inc_ctx_clone
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu softvfp
 794              	shake256_inc_ctx_clone:
 795              	.LFB71:
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 800 0000 FFF7FEBF 		b	shake128_inc_ctx_clone
 801              		.cfi_endproc
 802              	.LFE71:
 804              		.section	.text.shake256_inc_ctx_release,"ax",%progbits
 805              		.align	1
 806              		.global	shake256_inc_ctx_release
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 810              		.fpu softvfp
 812              	shake256_inc_ctx_release:
 813              	.LFB61:
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              		@ link register save eliminated.
 818 0000 7047     		bx	lr
 819              		.cfi_endproc
 820              	.LFE61:
 822              		.section	.text.cshake128_simple_absorb,"ax",%progbits
 823              		.align	1
 824              		.global	cshake128_simple_absorb
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu softvfp
 830              	cshake128_simple_absorb:
 831              	.LVL76:
 832              	.LFB19:
 321:fips202.c     **** #ifdef PROFILE_HASHING
 322:fips202.c     ****   uint64_t t1 = hal_get_time();
 323:fips202.c     ****   hash_cycles += (t1-t0);
 324:fips202.c     **** #endif
 325:fips202.c     **** }
 326:fips202.c     **** 
 327:fips202.c     **** void shake256_inc_ctx_clone(shake256incctx* dest, const shake256incctx *src) {
 328:fips202.c     ****     memcpy(dest, src, sizeof(shake256incctx));
 329:fips202.c     **** }
 330:fips202.c     **** 
 331:fips202.c     **** void shake256_inc_ctx_release(shake256incctx *state) {
 332:fips202.c     ****     (void) state;
 333:fips202.c     **** }
 334:fips202.c     **** 
 335:fips202.c     **** /********** cSHAKE128 ***********/
 336:fips202.c     **** 
 337:fips202.c     **** void cshake128_simple_absorb(shake128ctx *state, uint16_t cstm, const uint8_t *in, size_t inlen)
 338:fips202.c     **** {
 833              		.loc 1 338 1 is_stmt 1 view -0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 8
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 339:fips202.c     **** #ifdef PROFILE_HASHING
 340:fips202.c     ****   uint64_t t0 = hal_get_time();
 341:fips202.c     **** #endif
 342:fips202.c     **** 
 343:fips202.c     **** 
 344:fips202.c     ****   uint8_t sep[8];
 837              		.loc 1 344 3 view .LVU169
 345:fips202.c     ****   size_t i;
 838              		.loc 1 345 3 view .LVU170
 346:fips202.c     **** 
 347:fips202.c     ****   for (i = 0; i < 25; i++)
 839              		.loc 1 347 3 view .LVU171
 840              		.loc 1 347 15 view .LVU172
 338:fips202.c     **** #ifdef PROFILE_HASHING
 841              		.loc 1 338 1 is_stmt 0 view .LVU173
 842 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 843              	.LCFI8:
 844              		.cfi_def_cfa_offset 40
 845              		.cfi_offset 4, -24
 846              		.cfi_offset 5, -20
 847              		.cfi_offset 6, -16
 848              		.cfi_offset 7, -12
 849              		.cfi_offset 8, -8
 850              		.cfi_offset 14, -4
 338:fips202.c     **** #ifdef PROFILE_HASHING
 851              		.loc 1 338 1 view .LVU174
 852 0004 0C46     		mov	r4, r1
 853 0006 1646     		mov	r6, r2
 348:fips202.c     ****     state->ctx[i] = 0;
 854              		.loc 1 348 19 view .LVU175
 855 0008 0021     		movs	r1, #0
 856              	.LVL77:
 857              		.loc 1 348 19 view .LVU176
 858 000a C822     		movs	r2, #200
 859              	.LVL78:
 338:fips202.c     **** #ifdef PROFILE_HASHING
 860              		.loc 1 338 1 view .LVU177
 861 000c 0546     		mov	r5, r0
 862 000e 1F46     		mov	r7, r3
 863              		.loc 1 348 19 view .LVU178
 864 0010 FFF7FEFF 		bl	memset
 865              	.LVL79:
 349:fips202.c     **** 
 350:fips202.c     ****   /* Absorb customization (domain-separation) string */
 351:fips202.c     ****   sep[0] = 0x01;
 866              		.loc 1 351 3 is_stmt 1 view .LVU179
 867              		.loc 1 351 10 is_stmt 0 view .LVU180
 868 0014 0123     		movs	r3, #1
 869 0016 8DF80830 		strb	r3, [sp, #8]
 352:fips202.c     ****   sep[1] = 0xa8;
 870              		.loc 1 352 3 is_stmt 1 view .LVU181
 353:fips202.c     ****   sep[2] = 0x01;
 871              		.loc 1 353 10 is_stmt 0 view .LVU182
 872 001a 8DF80A30 		strb	r3, [sp, #10]
 354:fips202.c     ****   sep[3] = 0x00;
 355:fips202.c     ****   sep[4] = 0x01;
 873              		.loc 1 355 10 view .LVU183
 874 001e 8DF80C30 		strb	r3, [sp, #12]
 356:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 875              		.loc 1 356 10 view .LVU184
 876 0022 1023     		movs	r3, #16
 877 0024 8DF80D30 		strb	r3, [sp, #13]
 357:fips202.c     ****   sep[6] = cstm & 0xff;
 358:fips202.c     ****   sep[7] = cstm >> 8;
 359:fips202.c     **** 
 360:fips202.c     ****   KeccakF1600_StateXORBytes(state->ctx, sep, 0, 8);
 878              		.loc 1 360 3 view .LVU185
 879 0028 0823     		movs	r3, #8
 880 002a 0DEB0301 		add	r1, sp, r3
 354:fips202.c     ****   sep[4] = 0x01;
 881              		.loc 1 354 10 view .LVU186
 882 002e 0022     		movs	r2, #0
 352:fips202.c     ****   sep[2] = 0x01;
 883              		.loc 1 352 10 view .LVU187
 884 0030 4FF0A808 		mov	r8, #168
 357:fips202.c     ****   sep[6] = cstm & 0xff;
 885              		.loc 1 357 10 view .LVU188
 886 0034 8DF80E40 		strb	r4, [sp, #14]
 887              		.loc 1 360 3 view .LVU189
 888 0038 2846     		mov	r0, r5
 358:fips202.c     **** 
 889              		.loc 1 358 10 view .LVU190
 890 003a 240A     		lsrs	r4, r4, #8
 354:fips202.c     ****   sep[4] = 0x01;
 891              		.loc 1 354 10 view .LVU191
 892 003c 8DF80B20 		strb	r2, [sp, #11]
 352:fips202.c     ****   sep[2] = 0x01;
 893              		.loc 1 352 10 view .LVU192
 894 0040 8DF80980 		strb	r8, [sp, #9]
 353:fips202.c     ****   sep[3] = 0x00;
 895              		.loc 1 353 3 is_stmt 1 view .LVU193
 354:fips202.c     ****   sep[4] = 0x01;
 896              		.loc 1 354 3 view .LVU194
 355:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 897              		.loc 1 355 3 view .LVU195
 356:fips202.c     ****   sep[6] = cstm & 0xff;
 898              		.loc 1 356 3 view .LVU196
 357:fips202.c     ****   sep[7] = cstm >> 8;
 899              		.loc 1 357 3 view .LVU197
 358:fips202.c     **** 
 900              		.loc 1 358 3 view .LVU198
 358:fips202.c     **** 
 901              		.loc 1 358 10 is_stmt 0 view .LVU199
 902 0044 8DF80F40 		strb	r4, [sp, #15]
 903              		.loc 1 360 3 is_stmt 1 view .LVU200
 904 0048 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 905              	.LVL80:
 361:fips202.c     ****   KeccakF1600_StatePermute(state->ctx);
 906              		.loc 1 361 3 view .LVU201
 907 004c 2846     		mov	r0, r5
 908 004e FFF7FEFF 		bl	KeccakF1600_StatePermute
 909              	.LVL81:
 362:fips202.c     **** 
 363:fips202.c     ****   /* Absorb input */
 364:fips202.c     ****   keccak_absorb(state->ctx, SHAKE128_RATE, in, inlen, 0x04);
 910              		.loc 1 364 3 view .LVU202
 911 0052 0423     		movs	r3, #4
 912 0054 0093     		str	r3, [sp]
 913 0056 3246     		mov	r2, r6
 914 0058 3B46     		mov	r3, r7
 915 005a 4146     		mov	r1, r8
 916 005c 2846     		mov	r0, r5
 917 005e FFF7FEFF 		bl	keccak_absorb
 918              	.LVL82:
 365:fips202.c     **** 
 366:fips202.c     **** #ifdef PROFILE_HASHING
 367:fips202.c     ****   uint64_t t1 = hal_get_time();
 368:fips202.c     ****   hash_cycles += (t1-t0);
 369:fips202.c     **** #endif
 370:fips202.c     **** 
 371:fips202.c     **** }
 919              		.loc 1 371 1 is_stmt 0 view .LVU203
 920 0062 04B0     		add	sp, sp, #16
 921              	.LCFI9:
 922              		.cfi_def_cfa_offset 24
 923              		@ sp needed
 924 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 925              		.loc 1 371 1 view .LVU204
 926              		.cfi_endproc
 927              	.LFE19:
 929              		.section	.text.cshake128_simple,"ax",%progbits
 930              		.align	1
 931              		.global	cshake128_simple
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 935              		.fpu softvfp
 937              	cshake128_simple:
 938              	.LVL83:
 939              	.LFB21:
 372:fips202.c     **** 
 373:fips202.c     **** 
 374:fips202.c     **** void cshake128_simple_squeezeblocks(uint8_t *output, size_t nblocks, shake128ctx *state)
 375:fips202.c     **** {
 376:fips202.c     **** #ifdef PROFILE_HASHING
 377:fips202.c     ****   uint64_t t0 = hal_get_time();
 378:fips202.c     **** #endif
 379:fips202.c     ****   keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE128_RATE);
 380:fips202.c     **** #ifdef PROFILE_HASHING
 381:fips202.c     ****   uint64_t t1 = hal_get_time();
 382:fips202.c     ****   hash_cycles += (t1-t0);
 383:fips202.c     **** #endif
 384:fips202.c     **** }
 385:fips202.c     **** 
 386:fips202.c     **** 
 387:fips202.c     **** void cshake128_simple(uint8_t *output, size_t outlen, uint16_t cstm, const uint8_t *in, size_t inle
 388:fips202.c     **** {
 940              		.loc 1 388 1 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 4, pretend = 0, frame = 216
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 389:fips202.c     ****   shake128incctx state;
 944              		.loc 1 389 3 view .LVU206
 390:fips202.c     ****   uint8_t sep[8];
 945              		.loc 1 390 3 view .LVU207
 391:fips202.c     **** #ifdef PROFILE_HASHING
 392:fips202.c     ****   uint64_t t0 = hal_get_time();
 393:fips202.c     **** #endif
 394:fips202.c     **** 
 395:fips202.c     ****   keccak_inc_init(state.ctx);
 946              		.loc 1 395 3 view .LVU208
 388:fips202.c     ****   shake128incctx state;
 947              		.loc 1 388 1 is_stmt 0 view .LVU209
 948 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 949              	.LCFI10:
 950              		.cfi_def_cfa_offset 24
 951              		.cfi_offset 4, -24
 952              		.cfi_offset 5, -20
 953              		.cfi_offset 6, -16
 954              		.cfi_offset 7, -12
 955              		.cfi_offset 8, -8
 956              		.cfi_offset 14, -4
 957 0004 B6B0     		sub	sp, sp, #216
 958              	.LCFI11:
 959              		.cfi_def_cfa_offset 240
 388:fips202.c     ****   shake128incctx state;
 960              		.loc 1 388 1 view .LVU210
 961 0006 0646     		mov	r6, r0
 962              		.loc 1 395 3 view .LVU211
 963 0008 02A8     		add	r0, sp, #8
 964              	.LVL84:
 388:fips202.c     ****   shake128incctx state;
 965              		.loc 1 388 1 view .LVU212
 966 000a 0F46     		mov	r7, r1
 967 000c 1446     		mov	r4, r2
 968 000e 9846     		mov	r8, r3
 969              		.loc 1 395 3 view .LVU213
 970 0010 FFF7FEFF 		bl	keccak_inc_init
 971              	.LVL85:
 396:fips202.c     **** 
 397:fips202.c     ****   /* Absorb customization (domain-separation) string */
 398:fips202.c     ****   sep[0] = 0x01;
 972              		.loc 1 398 3 is_stmt 1 view .LVU214
 973              		.loc 1 398 10 is_stmt 0 view .LVU215
 974 0014 0123     		movs	r3, #1
 975 0016 8DF80030 		strb	r3, [sp]
 399:fips202.c     ****   sep[1] = 0xa8;
 976              		.loc 1 399 3 is_stmt 1 view .LVU216
 400:fips202.c     ****   sep[2] = 0x01;
 977              		.loc 1 400 10 is_stmt 0 view .LVU217
 978 001a 8DF80230 		strb	r3, [sp, #2]
 401:fips202.c     ****   sep[3] = 0x00;
 402:fips202.c     ****   sep[4] = 0x01;
 979              		.loc 1 402 10 view .LVU218
 980 001e 8DF80430 		strb	r3, [sp, #4]
 403:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 981              		.loc 1 403 10 view .LVU219
 982 0022 1023     		movs	r3, #16
 983 0024 8DF80530 		strb	r3, [sp, #5]
 404:fips202.c     ****   sep[6] = cstm & 0xff;
 405:fips202.c     ****   sep[7] = cstm >> 8;
 406:fips202.c     **** 
 407:fips202.c     ****   KeccakF1600_StateXORBytes(state.ctx, sep, 0, 8);
 984              		.loc 1 407 3 view .LVU220
 985 0028 0823     		movs	r3, #8
 399:fips202.c     ****   sep[2] = 0x01;
 986              		.loc 1 399 10 view .LVU221
 987 002a A825     		movs	r5, #168
 988              		.loc 1 407 3 view .LVU222
 989 002c 0DEB0300 		add	r0, sp, r3
 401:fips202.c     ****   sep[4] = 0x01;
 990              		.loc 1 401 10 view .LVU223
 991 0030 0022     		movs	r2, #0
 992              		.loc 1 407 3 view .LVU224
 993 0032 6946     		mov	r1, sp
 404:fips202.c     ****   sep[6] = cstm & 0xff;
 994              		.loc 1 404 10 view .LVU225
 995 0034 8DF80640 		strb	r4, [sp, #6]
 405:fips202.c     **** 
 996              		.loc 1 405 10 view .LVU226
 997 0038 240A     		lsrs	r4, r4, #8
 401:fips202.c     ****   sep[4] = 0x01;
 998              		.loc 1 401 10 view .LVU227
 999 003a 8DF80320 		strb	r2, [sp, #3]
 399:fips202.c     ****   sep[2] = 0x01;
 1000              		.loc 1 399 10 view .LVU228
 1001 003e 8DF80150 		strb	r5, [sp, #1]
 400:fips202.c     ****   sep[3] = 0x00;
 1002              		.loc 1 400 3 is_stmt 1 view .LVU229
 401:fips202.c     ****   sep[4] = 0x01;
 1003              		.loc 1 401 3 view .LVU230
 402:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 1004              		.loc 1 402 3 view .LVU231
 403:fips202.c     ****   sep[6] = cstm & 0xff;
 1005              		.loc 1 403 3 view .LVU232
 404:fips202.c     ****   sep[7] = cstm >> 8;
 1006              		.loc 1 404 3 view .LVU233
 405:fips202.c     **** 
 1007              		.loc 1 405 3 view .LVU234
 405:fips202.c     **** 
 1008              		.loc 1 405 10 is_stmt 0 view .LVU235
 1009 0042 8DF80740 		strb	r4, [sp, #7]
 1010              		.loc 1 407 3 is_stmt 1 view .LVU236
 1011 0046 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 1012              	.LVL86:
 408:fips202.c     ****   KeccakF1600_StatePermute(state.ctx);
 1013              		.loc 1 408 3 view .LVU237
 1014 004a 02A8     		add	r0, sp, #8
 1015 004c FFF7FEFF 		bl	KeccakF1600_StatePermute
 1016              	.LVL87:
 409:fips202.c     **** 
 410:fips202.c     ****   /* Absorb input */
 411:fips202.c     ****   keccak_inc_absorb(state.ctx, SHAKE128_RATE, in, inlen);
 1017              		.loc 1 411 3 view .LVU238
 1018 0050 3C9B     		ldr	r3, [sp, #240]
 1019 0052 4246     		mov	r2, r8
 1020 0054 2946     		mov	r1, r5
 1021 0056 02A8     		add	r0, sp, #8
 1022 0058 FFF7FEFF 		bl	keccak_inc_absorb
 1023              	.LVL88:
 412:fips202.c     ****   keccak_inc_finalize(state.ctx, SHAKE128_RATE, 0x04);
 1024              		.loc 1 412 3 view .LVU239
 1025 005c 2946     		mov	r1, r5
 1026 005e 02A8     		add	r0, sp, #8
 1027 0060 0422     		movs	r2, #4
 1028 0062 FFF7FEFF 		bl	keccak_inc_finalize
 1029              	.LVL89:
 413:fips202.c     **** 
 414:fips202.c     ****   /* Squeeze output */
 415:fips202.c     ****   keccak_inc_squeeze(output, outlen, state.ctx, SHAKE128_RATE);
 1030              		.loc 1 415 3 view .LVU240
 1031 0066 2B46     		mov	r3, r5
 1032 0068 02AA     		add	r2, sp, #8
 1033 006a 3946     		mov	r1, r7
 1034 006c 3046     		mov	r0, r6
 1035 006e FFF7FEFF 		bl	keccak_inc_squeeze
 1036              	.LVL90:
 416:fips202.c     **** #ifdef PROFILE_HASHING
 417:fips202.c     ****   uint64_t t1 = hal_get_time();
 418:fips202.c     ****   hash_cycles += (t1-t0);
 419:fips202.c     **** #endif
 420:fips202.c     **** }
 1037              		.loc 1 420 1 is_stmt 0 view .LVU241
 1038 0072 36B0     		add	sp, sp, #216
 1039              	.LCFI12:
 1040              		.cfi_def_cfa_offset 24
 1041              		@ sp needed
 1042 0074 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1043              		.loc 1 420 1 view .LVU242
 1044              		.cfi_endproc
 1045              	.LFE21:
 1047              		.section	.text.shake128_absorb,"ax",%progbits
 1048              		.align	1
 1049              		.global	shake128_absorb
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu softvfp
 1055              	shake128_absorb:
 1056              	.LVL91:
 1057              	.LFB22:
 421:fips202.c     **** 
 422:fips202.c     **** 
 423:fips202.c     **** 
 424:fips202.c     **** /*************************************************
 425:fips202.c     ****  * Name:        shake128_absorb
 426:fips202.c     ****  *
 427:fips202.c     ****  * Description: Absorb step of the SHAKE128 XOF.
 428:fips202.c     ****  *              non-incremental, starts by zeroeing the state.
 429:fips202.c     ****  *
 430:fips202.c     ****  * Arguments:   - uint64_t *state:      pointer to (uninitialized) output Keccak state
 431:fips202.c     ****  *              - const uint8_t *input: pointer to input to be absorbed into state
 432:fips202.c     ****  *              - size_t inlen:         length of input in bytes
 433:fips202.c     ****  **************************************************/
 434:fips202.c     **** void shake128_absorb(shake128ctx *state, const uint8_t *input, size_t inlen)
 435:fips202.c     **** {
 1058              		.loc 1 435 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 436:fips202.c     **** #ifdef PROFILE_HASHING
 437:fips202.c     ****   uint64_t t0 = hal_get_time();
 438:fips202.c     **** #endif
 439:fips202.c     ****   int i;
 1062              		.loc 1 439 3 view .LVU244
 440:fips202.c     ****   for (i = 0; i < 25; i++)
 1063              		.loc 1 440 3 view .LVU245
 1064              		.loc 1 440 15 view .LVU246
 435:fips202.c     **** #ifdef PROFILE_HASHING
 1065              		.loc 1 435 1 is_stmt 0 view .LVU247
 1066 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1067              	.LCFI13:
 1068              		.cfi_def_cfa_offset 24
 1069              		.cfi_offset 4, -16
 1070              		.cfi_offset 5, -12
 1071              		.cfi_offset 6, -8
 1072              		.cfi_offset 14, -4
 435:fips202.c     **** #ifdef PROFILE_HASHING
 1073              		.loc 1 435 1 view .LVU248
 1074 0002 0D46     		mov	r5, r1
 1075 0004 1646     		mov	r6, r2
 441:fips202.c     ****     state->ctx[i] = 0;
 1076              		.loc 1 441 19 view .LVU249
 1077 0006 0021     		movs	r1, #0
 1078              	.LVL92:
 1079              		.loc 1 441 19 view .LVU250
 1080 0008 C822     		movs	r2, #200
 1081              	.LVL93:
 435:fips202.c     **** #ifdef PROFILE_HASHING
 1082              		.loc 1 435 1 view .LVU251
 1083 000a 0446     		mov	r4, r0
 1084              		.loc 1 441 19 view .LVU252
 1085 000c FFF7FEFF 		bl	memset
 1086              	.LVL94:
 442:fips202.c     **** 
 443:fips202.c     ****   keccak_absorb(state->ctx, SHAKE128_RATE, input, inlen, 0x1F);
 1087              		.loc 1 443 3 is_stmt 1 view .LVU253
 1088 0010 1F23     		movs	r3, #31
 1089 0012 0093     		str	r3, [sp]
 1090 0014 2A46     		mov	r2, r5
 1091 0016 3346     		mov	r3, r6
 1092 0018 A821     		movs	r1, #168
 1093 001a 2046     		mov	r0, r4
 1094 001c FFF7FEFF 		bl	keccak_absorb
 1095              	.LVL95:
 444:fips202.c     **** #ifdef PROFILE_HASHING
 445:fips202.c     ****   uint64_t t1 = hal_get_time();
 446:fips202.c     ****   hash_cycles += (t1-t0);
 447:fips202.c     **** #endif
 448:fips202.c     **** }
 1096              		.loc 1 448 1 is_stmt 0 view .LVU254
 1097 0020 02B0     		add	sp, sp, #8
 1098              	.LCFI14:
 1099              		.cfi_def_cfa_offset 16
 1100              		@ sp needed
 1101 0022 70BD     		pop	{r4, r5, r6, pc}
 1102              		.loc 1 448 1 view .LVU255
 1103              		.cfi_endproc
 1104              	.LFE22:
 1106              		.section	.text.shake128_squeezeblocks,"ax",%progbits
 1107              		.align	1
 1108              		.global	shake128_squeezeblocks
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu softvfp
 1114              	shake128_squeezeblocks:
 1115              	.LVL96:
 1116              	.LFB23:
 449:fips202.c     **** 
 450:fips202.c     **** /*************************************************
 451:fips202.c     ****  * Name:        shake128_squeezeblocks
 452:fips202.c     ****  *
 453:fips202.c     ****  * Description: Squeeze step of SHAKE128 XOF. Squeezes full blocks of SHAKE128_RATE bytes each.
 454:fips202.c     ****  *              Modifies the state. Can be called multiple times to keep squeezing,
 455:fips202.c     ****  *              i.e., is incremental.
 456:fips202.c     ****  *
 457:fips202.c     ****  * Arguments:   - uint8_t *output:     pointer to output blocks
 458:fips202.c     ****  *              - size_t nblocks:      number of blocks to be squeezed (written to output)
 459:fips202.c     ****  *              - shake128ctx *state:  pointer to in/output Keccak state
 460:fips202.c     ****  **************************************************/
 461:fips202.c     **** void shake128_squeezeblocks(uint8_t *output, size_t nblocks, shake128ctx *state)
 462:fips202.c     **** {
 1117              		.loc 1 462 1 is_stmt 1 view -0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 0
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121              		@ link register save eliminated.
 463:fips202.c     **** #ifdef PROFILE_HASHING
 464:fips202.c     ****   uint64_t t0 = hal_get_time();
 465:fips202.c     **** #endif
 466:fips202.c     ****   keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE128_RATE);
 1122              		.loc 1 466 3 view .LVU257
 1123 0000 A823     		movs	r3, #168
 1124 0002 FFF7FEBF 		b	keccak_squeezeblocks
 1125              	.LVL97:
 1126              		.loc 1 466 3 is_stmt 0 view .LVU258
 1127              		.cfi_endproc
 1128              	.LFE23:
 1130              		.section	.text.cshake128_simple_squeezeblocks,"ax",%progbits
 1131              		.align	1
 1132              		.global	cshake128_simple_squeezeblocks
 1133              		.syntax unified
 1134              		.thumb
 1135              		.thumb_func
 1136              		.fpu softvfp
 1138              	cshake128_simple_squeezeblocks:
 1139              	.LFB55:
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 0, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144 0000 FFF7FEBF 		b	shake128_squeezeblocks
 1145              		.cfi_endproc
 1146              	.LFE55:
 1148              		.section	.text.shake128,"ax",%progbits
 1149              		.align	1
 1150              		.global	shake128
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu softvfp
 1156              	shake128:
 1157              	.LVL98:
 1158              	.LFB24:
 467:fips202.c     **** #ifdef PROFILE_HASHING
 468:fips202.c     ****   uint64_t t1 = hal_get_time();
 469:fips202.c     ****   hash_cycles += (t1-t0);
 470:fips202.c     **** #endif
 471:fips202.c     **** }
 472:fips202.c     **** 
 473:fips202.c     **** void shake128(uint8_t *output, size_t outlen, const uint8_t *input, size_t inlen)
 474:fips202.c     **** {
 1159              		.loc 1 474 1 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 208
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 475:fips202.c     **** #ifdef PROFILE_HASHING
 476:fips202.c     ****   uint64_t t0 = hal_get_time();
 477:fips202.c     **** #endif
 478:fips202.c     ****   shake128incctx state;
 1163              		.loc 1 478 3 view .LVU260
 479:fips202.c     **** 
 480:fips202.c     ****   keccak_inc_init(state.ctx);
 1164              		.loc 1 480 3 view .LVU261
 474:fips202.c     **** #ifdef PROFILE_HASHING
 1165              		.loc 1 474 1 is_stmt 0 view .LVU262
 1166 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1167              	.LCFI15:
 1168              		.cfi_def_cfa_offset 20
 1169              		.cfi_offset 4, -20
 1170              		.cfi_offset 5, -16
 1171              		.cfi_offset 6, -12
 1172              		.cfi_offset 7, -8
 1173              		.cfi_offset 14, -4
 1174 0002 B5B0     		sub	sp, sp, #212
 1175              	.LCFI16:
 1176              		.cfi_def_cfa_offset 232
 474:fips202.c     **** #ifdef PROFILE_HASHING
 1177              		.loc 1 474 1 view .LVU263
 1178 0004 0446     		mov	r4, r0
 1179 0006 1646     		mov	r6, r2
 1180 0008 1F46     		mov	r7, r3
 1181              		.loc 1 480 3 view .LVU264
 1182 000a 6846     		mov	r0, sp
 1183              	.LVL99:
 474:fips202.c     **** #ifdef PROFILE_HASHING
 1184              		.loc 1 474 1 view .LVU265
 1185 000c 0D46     		mov	r5, r1
 1186              		.loc 1 480 3 view .LVU266
 1187 000e FFF7FEFF 		bl	keccak_inc_init
 1188              	.LVL100:
 481:fips202.c     **** 
 482:fips202.c     ****   /* Absorb input */
 483:fips202.c     ****   keccak_inc_absorb(state.ctx, SHAKE128_RATE, input, inlen);
 1189              		.loc 1 483 3 is_stmt 1 view .LVU267
 1190 0012 3B46     		mov	r3, r7
 1191 0014 3246     		mov	r2, r6
 1192 0016 6846     		mov	r0, sp
 1193 0018 A821     		movs	r1, #168
 1194 001a FFF7FEFF 		bl	keccak_inc_absorb
 1195              	.LVL101:
 484:fips202.c     ****   keccak_inc_finalize(state.ctx, SHAKE128_RATE, 0x1F);
 1196              		.loc 1 484 3 view .LVU268
 1197 001e 6846     		mov	r0, sp
 1198 0020 1F22     		movs	r2, #31
 1199 0022 A821     		movs	r1, #168
 1200 0024 FFF7FEFF 		bl	keccak_inc_finalize
 1201              	.LVL102:
 485:fips202.c     **** 
 486:fips202.c     ****   /* Squeeze output */
 487:fips202.c     ****   keccak_inc_squeeze(output, outlen, state.ctx, SHAKE128_RATE);
 1202              		.loc 1 487 3 view .LVU269
 1203 0028 A823     		movs	r3, #168
 1204 002a 6A46     		mov	r2, sp
 1205 002c 2946     		mov	r1, r5
 1206 002e 2046     		mov	r0, r4
 1207 0030 FFF7FEFF 		bl	keccak_inc_squeeze
 1208              	.LVL103:
 488:fips202.c     **** #ifdef PROFILE_HASHING
 489:fips202.c     ****   uint64_t t1 = hal_get_time();
 490:fips202.c     ****   hash_cycles += (t1-t0);
 491:fips202.c     **** #endif
 492:fips202.c     **** }
 1209              		.loc 1 492 1 is_stmt 0 view .LVU270
 1210 0034 35B0     		add	sp, sp, #212
 1211              	.LCFI17:
 1212              		.cfi_def_cfa_offset 20
 1213              		@ sp needed
 1214 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1215              		.loc 1 492 1 view .LVU271
 1216              		.cfi_endproc
 1217              	.LFE24:
 1219              		.section	.text.shake128_ctx_release,"ax",%progbits
 1220              		.align	1
 1221              		.global	shake128_ctx_release
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1225              		.fpu softvfp
 1227              	shake128_ctx_release:
 1228              	.LVL104:
 1229              	.LFB25:
 493:fips202.c     **** 
 494:fips202.c     **** void shake128_ctx_release(shake128ctx *state) {
 1230              		.loc 1 494 47 is_stmt 1 view -0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              		@ link register save eliminated.
 495:fips202.c     ****     (void) state;
 1235              		.loc 1 495 5 view .LVU273
 496:fips202.c     **** }
 1236              		.loc 1 496 1 is_stmt 0 view .LVU274
 1237 0000 7047     		bx	lr
 1238              		.cfi_endproc
 1239              	.LFE25:
 1241              		.section	.text.shake128_ctx_clone,"ax",%progbits
 1242              		.align	1
 1243              		.global	shake128_ctx_clone
 1244              		.syntax unified
 1245              		.thumb
 1246              		.thumb_func
 1247              		.fpu softvfp
 1249              	shake128_ctx_clone:
 1250              	.LVL105:
 1251              	.LFB26:
 497:fips202.c     **** void shake128_ctx_clone(shake128ctx *dest, const shake128ctx *src) {
 1252              		.loc 1 497 68 is_stmt 1 view -0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 498:fips202.c     ****     memcpy(dest, src, sizeof(shake128ctx));
 1257              		.loc 1 498 5 view .LVU276
 1258 0000 C822     		movs	r2, #200
 1259 0002 FFF7FEBF 		b	memcpy
 1260              	.LVL106:
 1261              		.loc 1 498 5 is_stmt 0 view .LVU277
 1262              		.cfi_endproc
 1263              	.LFE26:
 1265              		.section	.text.shake256_absorb,"ax",%progbits
 1266              		.align	1
 1267              		.global	shake256_absorb
 1268              		.syntax unified
 1269              		.thumb
 1270              		.thumb_func
 1271              		.fpu softvfp
 1273              	shake256_absorb:
 1274              	.LVL107:
 1275              	.LFB27:
 499:fips202.c     **** }
 500:fips202.c     **** 
 501:fips202.c     **** void shake256_absorb(shake256ctx *state, const uint8_t *input, size_t inlen)
 502:fips202.c     **** {
 1276              		.loc 1 502 1 is_stmt 1 view -0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 0, uses_anonymous_args = 0
 503:fips202.c     **** #ifdef PROFILE_HASHING
 504:fips202.c     ****   uint64_t t0 = hal_get_time();
 505:fips202.c     **** #endif
 506:fips202.c     ****   int i;
 1280              		.loc 1 506 3 view .LVU279
 507:fips202.c     ****   for (i = 0; i < 25; i++)
 1281              		.loc 1 507 3 view .LVU280
 1282              		.loc 1 507 15 view .LVU281
 502:fips202.c     **** #ifdef PROFILE_HASHING
 1283              		.loc 1 502 1 is_stmt 0 view .LVU282
 1284 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1285              	.LCFI18:
 1286              		.cfi_def_cfa_offset 24
 1287              		.cfi_offset 4, -16
 1288              		.cfi_offset 5, -12
 1289              		.cfi_offset 6, -8
 1290              		.cfi_offset 14, -4
 502:fips202.c     **** #ifdef PROFILE_HASHING
 1291              		.loc 1 502 1 view .LVU283
 1292 0002 0D46     		mov	r5, r1
 1293 0004 1646     		mov	r6, r2
 508:fips202.c     ****     state->ctx[i] = 0;
 1294              		.loc 1 508 19 view .LVU284
 1295 0006 0021     		movs	r1, #0
 1296              	.LVL108:
 1297              		.loc 1 508 19 view .LVU285
 1298 0008 C822     		movs	r2, #200
 1299              	.LVL109:
 502:fips202.c     **** #ifdef PROFILE_HASHING
 1300              		.loc 1 502 1 view .LVU286
 1301 000a 0446     		mov	r4, r0
 1302              		.loc 1 508 19 view .LVU287
 1303 000c FFF7FEFF 		bl	memset
 1304              	.LVL110:
 509:fips202.c     **** 
 510:fips202.c     ****   keccak_absorb(state->ctx, SHAKE256_RATE, input, inlen, 0x1F);
 1305              		.loc 1 510 3 is_stmt 1 view .LVU288
 1306 0010 1F23     		movs	r3, #31
 1307 0012 0093     		str	r3, [sp]
 1308 0014 2A46     		mov	r2, r5
 1309 0016 3346     		mov	r3, r6
 1310 0018 8821     		movs	r1, #136
 1311 001a 2046     		mov	r0, r4
 1312 001c FFF7FEFF 		bl	keccak_absorb
 1313              	.LVL111:
 511:fips202.c     **** #ifdef PROFILE_HASHING
 512:fips202.c     ****   uint64_t t1 = hal_get_time();
 513:fips202.c     ****   hash_cycles += (t1-t0);
 514:fips202.c     **** #endif
 515:fips202.c     **** }
 1314              		.loc 1 515 1 is_stmt 0 view .LVU289
 1315 0020 02B0     		add	sp, sp, #8
 1316              	.LCFI19:
 1317              		.cfi_def_cfa_offset 16
 1318              		@ sp needed
 1319 0022 70BD     		pop	{r4, r5, r6, pc}
 1320              		.loc 1 515 1 view .LVU290
 1321              		.cfi_endproc
 1322              	.LFE27:
 1324              		.section	.text.shake256_squeezeblocks,"ax",%progbits
 1325              		.align	1
 1326              		.global	shake256_squeezeblocks
 1327              		.syntax unified
 1328              		.thumb
 1329              		.thumb_func
 1330              		.fpu softvfp
 1332              	shake256_squeezeblocks:
 1333              	.LVL112:
 1334              	.LFB28:
 516:fips202.c     **** 
 517:fips202.c     **** 
 518:fips202.c     **** void shake256_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state)
 519:fips202.c     **** {
 1335              		.loc 1 519 1 is_stmt 1 view -0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 520:fips202.c     **** #ifdef PROFILE_HASHING
 521:fips202.c     ****   uint64_t t0 = hal_get_time();
 522:fips202.c     **** #endif
 523:fips202.c     ****   keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
 1340              		.loc 1 523 3 view .LVU292
 1341 0000 8823     		movs	r3, #136
 1342 0002 FFF7FEBF 		b	keccak_squeezeblocks
 1343              	.LVL113:
 1344              		.loc 1 523 3 is_stmt 0 view .LVU293
 1345              		.cfi_endproc
 1346              	.LFE28:
 1348              		.section	.text.shake256,"ax",%progbits
 1349              		.align	1
 1350              		.global	shake256
 1351              		.syntax unified
 1352              		.thumb
 1353              		.thumb_func
 1354              		.fpu softvfp
 1356              	shake256:
 1357              	.LVL114:
 1358              	.LFB29:
 524:fips202.c     **** #ifdef PROFILE_HASHING
 525:fips202.c     ****   uint64_t t1 = hal_get_time();
 526:fips202.c     ****   hash_cycles += (t1-t0);
 527:fips202.c     **** #endif
 528:fips202.c     **** }
 529:fips202.c     **** 
 530:fips202.c     **** /*************************************************
 531:fips202.c     ****  * Name:        shake256
 532:fips202.c     ****  *
 533:fips202.c     ****  * Description: SHAKE256 XOF with non-incremental API
 534:fips202.c     ****  *
 535:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 536:fips202.c     ****  *              - size_t outlen:        requested output length in bytes
 537:fips202.c     ****  *              - const uint8_t *input: pointer to input
 538:fips202.c     ****  *              - size_t inlen:         length of input in bytes
 539:fips202.c     ****  **************************************************/
 540:fips202.c     **** void shake256(uint8_t *output, size_t outlen,
 541:fips202.c     ****     const uint8_t *input, size_t inlen)
 542:fips202.c     **** {
 1359              		.loc 1 542 1 is_stmt 1 view -0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 208
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 543:fips202.c     **** #ifdef PROFILE_HASHING
 544:fips202.c     ****   uint64_t t0 = hal_get_time();
 545:fips202.c     **** #endif
 546:fips202.c     ****   shake256incctx state;
 1363              		.loc 1 546 3 view .LVU295
 547:fips202.c     **** 
 548:fips202.c     ****   keccak_inc_init(state.ctx);
 1364              		.loc 1 548 3 view .LVU296
 542:fips202.c     **** #ifdef PROFILE_HASHING
 1365              		.loc 1 542 1 is_stmt 0 view .LVU297
 1366 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1367              	.LCFI20:
 1368              		.cfi_def_cfa_offset 20
 1369              		.cfi_offset 4, -20
 1370              		.cfi_offset 5, -16
 1371              		.cfi_offset 6, -12
 1372              		.cfi_offset 7, -8
 1373              		.cfi_offset 14, -4
 1374 0002 B5B0     		sub	sp, sp, #212
 1375              	.LCFI21:
 1376              		.cfi_def_cfa_offset 232
 542:fips202.c     **** #ifdef PROFILE_HASHING
 1377              		.loc 1 542 1 view .LVU298
 1378 0004 0446     		mov	r4, r0
 1379 0006 1646     		mov	r6, r2
 1380 0008 1F46     		mov	r7, r3
 1381              		.loc 1 548 3 view .LVU299
 1382 000a 6846     		mov	r0, sp
 1383              	.LVL115:
 542:fips202.c     **** #ifdef PROFILE_HASHING
 1384              		.loc 1 542 1 view .LVU300
 1385 000c 0D46     		mov	r5, r1
 1386              		.loc 1 548 3 view .LVU301
 1387 000e FFF7FEFF 		bl	keccak_inc_init
 1388              	.LVL116:
 549:fips202.c     **** 
 550:fips202.c     ****   /* Absorb input */
 551:fips202.c     ****   keccak_inc_absorb(state.ctx, SHAKE256_RATE, input, inlen);
 1389              		.loc 1 551 3 is_stmt 1 view .LVU302
 1390 0012 3B46     		mov	r3, r7
 1391 0014 3246     		mov	r2, r6
 1392 0016 6846     		mov	r0, sp
 1393 0018 8821     		movs	r1, #136
 1394 001a FFF7FEFF 		bl	keccak_inc_absorb
 1395              	.LVL117:
 552:fips202.c     ****   keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x1F);
 1396              		.loc 1 552 3 view .LVU303
 1397 001e 6846     		mov	r0, sp
 1398 0020 1F22     		movs	r2, #31
 1399 0022 8821     		movs	r1, #136
 1400 0024 FFF7FEFF 		bl	keccak_inc_finalize
 1401              	.LVL118:
 553:fips202.c     **** 
 554:fips202.c     ****   /* Squeeze output */
 555:fips202.c     ****   keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 1402              		.loc 1 555 3 view .LVU304
 1403 0028 8823     		movs	r3, #136
 1404 002a 6A46     		mov	r2, sp
 1405 002c 2946     		mov	r1, r5
 1406 002e 2046     		mov	r0, r4
 1407 0030 FFF7FEFF 		bl	keccak_inc_squeeze
 1408              	.LVL119:
 556:fips202.c     **** #ifdef PROFILE_HASHING
 557:fips202.c     ****   uint64_t t1 = hal_get_time();
 558:fips202.c     ****   hash_cycles += (t1-t0);
 559:fips202.c     **** #endif
 560:fips202.c     **** }
 1409              		.loc 1 560 1 is_stmt 0 view .LVU305
 1410 0034 35B0     		add	sp, sp, #212
 1411              	.LCFI22:
 1412              		.cfi_def_cfa_offset 20
 1413              		@ sp needed
 1414 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1415              		.loc 1 560 1 view .LVU306
 1416              		.cfi_endproc
 1417              	.LFE29:
 1419              		.section	.text.shake2561,"ax",%progbits
 1420              		.align	1
 1421              		.global	shake2561
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu softvfp
 1427              	shake2561:
 1428              	.LVL120:
 1429              	.LFB30:
 561:fips202.c     **** 
 562:fips202.c     **** void shake2561(uint8_t *output, size_t outlen,
 563:fips202.c     ****     const uint8_t *input, size_t inlen)
 564:fips202.c     **** {
 1430              		.loc 1 564 1 is_stmt 1 view -0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 208
 1433              		@ frame_needed = 0, uses_anonymous_args = 0
 565:fips202.c     **** #ifdef PROFILE_HASHING
 566:fips202.c     ****   uint64_t t0 = hal_get_time();
 567:fips202.c     **** #endif
 568:fips202.c     ****   shake256incctx state;
 1434              		.loc 1 568 3 view .LVU308
 569:fips202.c     **** 
 570:fips202.c     ****   keccak_inc_init(state.ctx);
 1435              		.loc 1 570 3 view .LVU309
 564:fips202.c     **** #ifdef PROFILE_HASHING
 1436              		.loc 1 564 1 is_stmt 0 view .LVU310
 1437 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1438              	.LCFI23:
 1439              		.cfi_def_cfa_offset 28
 1440              		.cfi_offset 4, -28
 1441              		.cfi_offset 5, -24
 1442              		.cfi_offset 6, -20
 1443              		.cfi_offset 7, -16
 1444              		.cfi_offset 8, -12
 1445              		.cfi_offset 9, -8
 1446              		.cfi_offset 14, -4
 1447 0004 B7B0     		sub	sp, sp, #220
 1448              	.LCFI24:
 1449              		.cfi_def_cfa_offset 248
 564:fips202.c     **** #ifdef PROFILE_HASHING
 1450              		.loc 1 564 1 view .LVU311
 1451 0006 8046     		mov	r8, r0
 1452              		.loc 1 570 3 view .LVU312
 1453 0008 02A8     		add	r0, sp, #8
 1454              	.LVL121:
 564:fips202.c     **** #ifdef PROFILE_HASHING
 1455              		.loc 1 564 1 view .LVU313
 1456 000a 8946     		mov	r9, r1
 1457 000c 1546     		mov	r5, r2
 1458 000e 1C46     		mov	r4, r3
 1459              		.loc 1 570 3 view .LVU314
 1460 0010 FFF7FEFF 		bl	keccak_inc_init
 1461              	.LVL122:
 571:fips202.c     **** 
 572:fips202.c     ****   /* Absorb input */
 573:fips202.c     ****   keccak_inc_absorb1(state.ctx, SHAKE256_RATE, input, inlen);
 1462              		.loc 1 573 3 is_stmt 1 view .LVU315
 1463              	.LBB4:
 1464              	.LBI4:
 139:fips202.c     ****                               size_t mlen) {
 1465              		.loc 1 139 13 view .LVU316
 1466              	.LBB5:
 147:fips202.c     **** 
 1467              		.loc 1 147 19 is_stmt 0 view .LVU317
 1468 0014 0026     		movs	r6, #0
 1469 0016 0027     		movs	r7, #0
 1470              	.LVL123:
 1471              	.L51:
 142:fips202.c     **** 
 1472              		.loc 1 142 11 is_stmt 1 view .LVU318
 142:fips202.c     **** 
 1473              		.loc 1 142 24 is_stmt 0 view .LVU319
 1474 0018 DDE93423 		ldrd	r2, r3, [sp, #208]
 142:fips202.c     **** 
 1475              		.loc 1 142 17 view .LVU320
 1476 001c 1019     		adds	r0, r2, r4
 1477 001e 43F10001 		adc	r1, r3, #0
 142:fips202.c     **** 
 1478              		.loc 1 142 11 view .LVU321
 1479 0022 8828     		cmp	r0, #136
 1480 0024 71F10001 		sbcs	r1, r1, #0
 1481 0028 19D2     		bcs	.L52
 152:fips202.c     ****     s_inc[25] += mlen;
 1482              		.loc 1 152 5 is_stmt 1 view .LVU322
 1483 002a 2946     		mov	r1, r5
 1484 002c 0094     		str	r4, [sp]
 1485 002e 02A8     		add	r0, sp, #8
 1486              	.LVL124:
 152:fips202.c     ****     s_inc[25] += mlen;
 1487              		.loc 1 152 5 is_stmt 0 view .LVU323
 1488 0030 FFF7FEFF 		bl	KeccakF1600_StateXORBytes1
 1489              	.LVL125:
 153:fips202.c     **** }
 1490              		.loc 1 153 5 is_stmt 1 view .LVU324
 153:fips202.c     **** }
 1491              		.loc 1 153 15 is_stmt 0 view .LVU325
 1492 0034 349B     		ldr	r3, [sp, #208]
 1493 0036 359A     		ldr	r2, [sp, #212]
 1494 0038 1B19     		adds	r3, r3, r4
 1495 003a 42F10002 		adc	r2, r2, #0
 1496 003e CDE93432 		strd	r3, r2, [sp, #208]
 1497              	.LVL126:
 153:fips202.c     **** }
 1498              		.loc 1 153 15 view .LVU326
 1499              	.LBE5:
 1500              	.LBE4:
 574:fips202.c     ****   keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x1F);
 1501              		.loc 1 574 3 is_stmt 1 view .LVU327
 1502 0042 02A8     		add	r0, sp, #8
 1503 0044 1F22     		movs	r2, #31
 1504 0046 8821     		movs	r1, #136
 1505 0048 FFF7FEFF 		bl	keccak_inc_finalize
 1506              	.LVL127:
 575:fips202.c     **** 
 576:fips202.c     ****   /* Squeeze output */
 577:fips202.c     ****   keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 1507              		.loc 1 577 3 view .LVU328
 1508 004c 8823     		movs	r3, #136
 1509 004e 02AA     		add	r2, sp, #8
 1510 0050 4946     		mov	r1, r9
 1511 0052 4046     		mov	r0, r8
 1512 0054 FFF7FEFF 		bl	keccak_inc_squeeze
 1513              	.LVL128:
 578:fips202.c     **** #ifdef PROFILE_HASHING
 579:fips202.c     ****   uint64_t t1 = hal_get_time();
 580:fips202.c     ****   hash_cycles += (t1-t0);
 581:fips202.c     **** #endif
 582:fips202.c     **** }
 1514              		.loc 1 582 1 is_stmt 0 view .LVU329
 1515 0058 37B0     		add	sp, sp, #220
 1516              	.LCFI25:
 1517              		.cfi_remember_state
 1518              		.cfi_def_cfa_offset 28
 1519              		@ sp needed
 1520 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1521              	.LVL129:
 1522              	.L52:
 1523              	.LCFI26:
 1524              		.cfi_restore_state
 1525              	.LBB7:
 1526              	.LBB6:
 144:fips202.c     ****         mlen -= (size_t)(r - s_inc[25]);
 1527              		.loc 1 144 9 is_stmt 1 view .LVU330
 1528 005e C2F18803 		rsb	r3, r2, #136
 1529 0062 2946     		mov	r1, r5
 1530 0064 02A8     		add	r0, sp, #8
 1531              	.LVL130:
 144:fips202.c     ****         mlen -= (size_t)(r - s_inc[25]);
 1532              		.loc 1 144 9 is_stmt 0 view .LVU331
 1533 0066 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 1534              	.LVL131:
 145:fips202.c     ****         m += r - s_inc[25];
 1535              		.loc 1 145 9 is_stmt 1 view .LVU332
 145:fips202.c     ****         m += r - s_inc[25];
 1536              		.loc 1 145 17 is_stmt 0 view .LVU333
 1537 006a 349B     		ldr	r3, [sp, #208]
 149:fips202.c     ****     }
 1538              		.loc 1 149 9 view .LVU334
 1539 006c 02A8     		add	r0, sp, #8
 1540              	.LVL132:
 145:fips202.c     ****         m += r - s_inc[25];
 1541              		.loc 1 145 17 view .LVU335
 1542 006e A3F18802 		sub	r2, r3, #136
 146:fips202.c     ****         s_inc[25] = 0;
 1543              		.loc 1 146 16 view .LVU336
 1544 0072 C3F18803 		rsb	r3, r3, #136
 147:fips202.c     **** 
 1545              		.loc 1 147 19 view .LVU337
 1546 0076 CDE93467 		strd	r6, [sp, #208]
 145:fips202.c     ****         m += r - s_inc[25];
 1547              		.loc 1 145 14 view .LVU338
 1548 007a 1444     		add	r4, r4, r2
 1549              	.LVL133:
 146:fips202.c     ****         s_inc[25] = 0;
 1550              		.loc 1 146 9 is_stmt 1 view .LVU339
 146:fips202.c     ****         s_inc[25] = 0;
 1551              		.loc 1 146 11 is_stmt 0 view .LVU340
 1552 007c 1D44     		add	r5, r5, r3
 1553              	.LVL134:
 147:fips202.c     **** 
 1554              		.loc 1 147 9 is_stmt 1 view .LVU341
 149:fips202.c     ****     }
 1555              		.loc 1 149 9 view .LVU342
 1556 007e FFF7FEFF 		bl	KeccakF1600_StatePermute
 1557              	.LVL135:
 149:fips202.c     ****     }
 1558              		.loc 1 149 9 is_stmt 0 view .LVU343
 1559 0082 C9E7     		b	.L51
 1560              	.LBE6:
 1561              	.LBE7:
 1562              		.cfi_endproc
 1563              	.LFE30:
 1565              		.section	.text.shake256_ctx_release,"ax",%progbits
 1566              		.align	1
 1567              		.global	shake256_ctx_release
 1568              		.syntax unified
 1569              		.thumb
 1570              		.thumb_func
 1571              		.fpu softvfp
 1573              	shake256_ctx_release:
 1574              	.LFB59:
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 0
 1577              		@ frame_needed = 0, uses_anonymous_args = 0
 1578              		@ link register save eliminated.
 1579 0000 7047     		bx	lr
 1580              		.cfi_endproc
 1581              	.LFE59:
 1583              		.section	.text.shake256_ctx_clone,"ax",%progbits
 1584              		.align	1
 1585              		.global	shake256_ctx_clone
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1589              		.fpu softvfp
 1591              	shake256_ctx_clone:
 1592              	.LFB69:
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              		@ link register save eliminated.
 1597 0000 FFF7FEBF 		b	shake128_ctx_clone
 1598              		.cfi_endproc
 1599              	.LFE69:
 1601              		.section	.text.sha3_256,"ax",%progbits
 1602              		.align	1
 1603              		.global	sha3_256
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu softvfp
 1609              	sha3_256:
 1610              	.LVL136:
 1611              	.LFB33:
 583:fips202.c     **** 
 584:fips202.c     **** void shake256_ctx_release(shake256ctx *state) {
 585:fips202.c     ****     (void) state;
 586:fips202.c     **** }
 587:fips202.c     **** 
 588:fips202.c     **** void shake256_ctx_clone(shake256ctx *dest, const shake256ctx *src) {
 589:fips202.c     ****     memcpy(dest, src, sizeof(shake256ctx));
 590:fips202.c     **** }
 591:fips202.c     **** 
 592:fips202.c     **** 
 593:fips202.c     **** /*************************************************
 594:fips202.c     ****  * Name:        sha3_256
 595:fips202.c     ****  *
 596:fips202.c     ****  * Description: SHA3-256 with non-incremental API
 597:fips202.c     ****  *
 598:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 599:fips202.c     ****  *              - const uint8_t *input: pointer to input
 600:fips202.c     ****  *              - size_t inlen:         length of input in bytes
 601:fips202.c     ****  **************************************************/
 602:fips202.c     **** void sha3_256(uint8_t *output, const uint8_t *input, size_t inlen)
 603:fips202.c     **** {
 1612              		.loc 1 603 1 is_stmt 1 view -0
 1613              		.cfi_startproc
 1614              		@ args = 0, pretend = 0, frame = 208
 1615              		@ frame_needed = 0, uses_anonymous_args = 0
 604:fips202.c     **** #ifdef PROFILE_HASHING
 605:fips202.c     ****   uint64_t t0 = hal_get_time();
 606:fips202.c     **** #endif
 607:fips202.c     ****   sha3_256incctx state;
 1616              		.loc 1 607 3 view .LVU345
 608:fips202.c     ****   keccak_inc_init(state.ctx);
 1617              		.loc 1 608 3 view .LVU346
 603:fips202.c     **** #ifdef PROFILE_HASHING
 1618              		.loc 1 603 1 is_stmt 0 view .LVU347
 1619 0000 70B5     		push	{r4, r5, r6, lr}
 1620              	.LCFI27:
 1621              		.cfi_def_cfa_offset 16
 1622              		.cfi_offset 4, -16
 1623              		.cfi_offset 5, -12
 1624              		.cfi_offset 6, -8
 1625              		.cfi_offset 14, -4
 1626 0002 B4B0     		sub	sp, sp, #208
 1627              	.LCFI28:
 1628              		.cfi_def_cfa_offset 224
 603:fips202.c     **** #ifdef PROFILE_HASHING
 1629              		.loc 1 603 1 view .LVU348
 1630 0004 0D46     		mov	r5, r1
 1631 0006 1646     		mov	r6, r2
 1632 0008 0446     		mov	r4, r0
 1633              		.loc 1 608 3 view .LVU349
 1634 000a 6846     		mov	r0, sp
 1635              	.LVL137:
 1636              		.loc 1 608 3 view .LVU350
 1637 000c FFF7FEFF 		bl	keccak_inc_init
 1638              	.LVL138:
 609:fips202.c     **** 
 610:fips202.c     ****   /* Absorb input */
 611:fips202.c     ****   keccak_inc_absorb(state.ctx, SHA3_256_RATE, input, inlen);
 1639              		.loc 1 611 3 is_stmt 1 view .LVU351
 1640 0010 3346     		mov	r3, r6
 1641 0012 2A46     		mov	r2, r5
 1642 0014 6846     		mov	r0, sp
 1643 0016 8821     		movs	r1, #136
 1644 0018 FFF7FEFF 		bl	keccak_inc_absorb
 1645              	.LVL139:
 612:fips202.c     ****   keccak_inc_finalize(state.ctx, SHA3_256_RATE, 0x06);
 1646              		.loc 1 612 3 view .LVU352
 1647 001c 6846     		mov	r0, sp
 1648 001e 0622     		movs	r2, #6
 1649 0020 8821     		movs	r1, #136
 1650 0022 FFF7FEFF 		bl	keccak_inc_finalize
 1651              	.LVL140:
 613:fips202.c     **** 
 614:fips202.c     ****   /* Squeeze output */
 615:fips202.c     ****   keccak_inc_squeeze(output, 32, state.ctx, SHA3_256_RATE);
 1652              		.loc 1 615 3 view .LVU353
 1653 0026 8823     		movs	r3, #136
 1654 0028 6A46     		mov	r2, sp
 1655 002a 2021     		movs	r1, #32
 1656 002c 2046     		mov	r0, r4
 1657 002e FFF7FEFF 		bl	keccak_inc_squeeze
 1658              	.LVL141:
 616:fips202.c     **** #ifdef PROFILE_HASHING
 617:fips202.c     ****   uint64_t t1 = hal_get_time();
 618:fips202.c     ****   hash_cycles += (t1-t0);
 619:fips202.c     **** #endif
 620:fips202.c     **** }
 1659              		.loc 1 620 1 is_stmt 0 view .LVU354
 1660 0032 34B0     		add	sp, sp, #208
 1661              	.LCFI29:
 1662              		.cfi_def_cfa_offset 16
 1663              		@ sp needed
 1664 0034 70BD     		pop	{r4, r5, r6, pc}
 1665              		.loc 1 620 1 view .LVU355
 1666              		.cfi_endproc
 1667              	.LFE33:
 1669              		.section	.text.sha3_256_inc_init,"ax",%progbits
 1670              		.align	1
 1671              		.global	sha3_256_inc_init
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu softvfp
 1677              	sha3_256_inc_init:
 1678              	.LVL142:
 1679              	.LFB34:
 621:fips202.c     **** void sha3_256_inc_init(sha3_256incctx *state) {
 1680              		.loc 1 621 47 is_stmt 1 view -0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 0
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
 1684              		@ link register save eliminated.
 622:fips202.c     **** #ifdef PROFILE_HASHING
 623:fips202.c     ****   uint64_t t0 = hal_get_time();
 624:fips202.c     **** #endif
 625:fips202.c     ****     keccak_inc_init(state->ctx);
 1685              		.loc 1 625 5 view .LVU357
 1686 0000 FFF7FEBF 		b	keccak_inc_init
 1687              	.LVL143:
 1688              		.loc 1 625 5 is_stmt 0 view .LVU358
 1689              		.cfi_endproc
 1690              	.LFE34:
 1692              		.section	.text.sha3_256_inc_absorb,"ax",%progbits
 1693              		.align	1
 1694              		.global	sha3_256_inc_absorb
 1695              		.syntax unified
 1696              		.thumb
 1697              		.thumb_func
 1698              		.fpu softvfp
 1700              	sha3_256_inc_absorb:
 1701              	.LVL144:
 1702              	.LFB35:
 626:fips202.c     **** #ifdef PROFILE_HASHING
 627:fips202.c     ****   uint64_t t1 = hal_get_time();
 628:fips202.c     ****   hash_cycles += (t1-t0);
 629:fips202.c     **** #endif
 630:fips202.c     **** }
 631:fips202.c     **** 
 632:fips202.c     **** void sha3_256_inc_absorb(sha3_256incctx *state, const uint8_t *input, size_t inlen) {
 1703              		.loc 1 632 85 is_stmt 1 view -0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707              		@ link register save eliminated.
 633:fips202.c     **** #ifdef PROFILE_HASHING
 634:fips202.c     ****   uint64_t t0 = hal_get_time();
 635:fips202.c     **** #endif
 636:fips202.c     ****     keccak_inc_absorb(state->ctx, SHA3_256_RATE, input, inlen);
 1708              		.loc 1 636 5 view .LVU360
 632:fips202.c     **** #ifdef PROFILE_HASHING
 1709              		.loc 1 632 85 is_stmt 0 view .LVU361
 1710 0000 1346     		mov	r3, r2
 1711              		.loc 1 636 5 view .LVU362
 1712 0002 0A46     		mov	r2, r1
 1713              	.LVL145:
 1714              		.loc 1 636 5 view .LVU363
 1715 0004 8821     		movs	r1, #136
 1716              	.LVL146:
 1717              		.loc 1 636 5 view .LVU364
 1718 0006 FFF7FEBF 		b	keccak_inc_absorb
 1719              	.LVL147:
 1720              		.loc 1 636 5 view .LVU365
 1721              		.cfi_endproc
 1722              	.LFE35:
 1724              		.section	.text.sha3_256_inc_finalize,"ax",%progbits
 1725              		.align	1
 1726              		.global	sha3_256_inc_finalize
 1727              		.syntax unified
 1728              		.thumb
 1729              		.thumb_func
 1730              		.fpu softvfp
 1732              	sha3_256_inc_finalize:
 1733              	.LVL148:
 1734              	.LFB36:
 637:fips202.c     **** #ifdef PROFILE_HASHING
 638:fips202.c     ****   uint64_t t1 = hal_get_time();
 639:fips202.c     ****   hash_cycles += (t1-t0);
 640:fips202.c     **** #endif
 641:fips202.c     **** }
 642:fips202.c     **** 
 643:fips202.c     **** void sha3_256_inc_finalize(uint8_t *output, sha3_256incctx *state) {
 1735              		.loc 1 643 68 is_stmt 1 view -0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 136
 1738              		@ frame_needed = 0, uses_anonymous_args = 0
 644:fips202.c     **** #ifdef PROFILE_HASHING
 645:fips202.c     ****   uint64_t t0 = hal_get_time();
 646:fips202.c     **** #endif
 647:fips202.c     ****     uint8_t t[SHA3_256_RATE];
 1739              		.loc 1 647 5 view .LVU367
 648:fips202.c     ****     keccak_inc_finalize(state->ctx, SHA3_256_RATE, 0x06);
 1740              		.loc 1 648 5 view .LVU368
 643:fips202.c     **** #ifdef PROFILE_HASHING
 1741              		.loc 1 643 68 is_stmt 0 view .LVU369
 1742 0000 30B5     		push	{r4, r5, lr}
 1743              	.LCFI30:
 1744              		.cfi_def_cfa_offset 12
 1745              		.cfi_offset 4, -12
 1746              		.cfi_offset 5, -8
 1747              		.cfi_offset 14, -4
 1748 0002 0D46     		mov	r5, r1
 1749 0004 A3B0     		sub	sp, sp, #140
 1750              	.LCFI31:
 1751              		.cfi_def_cfa_offset 152
 643:fips202.c     **** #ifdef PROFILE_HASHING
 1752              		.loc 1 643 68 view .LVU370
 1753 0006 0446     		mov	r4, r0
 1754              		.loc 1 648 5 view .LVU371
 1755 0008 0622     		movs	r2, #6
 1756 000a 2846     		mov	r0, r5
 1757              	.LVL149:
 1758              		.loc 1 648 5 view .LVU372
 1759 000c 8821     		movs	r1, #136
 1760              	.LVL150:
 1761              		.loc 1 648 5 view .LVU373
 1762 000e FFF7FEFF 		bl	keccak_inc_finalize
 1763              	.LVL151:
 649:fips202.c     **** 
 650:fips202.c     ****     keccak_squeezeblocks(t, 1, state->ctx, SHA3_256_RATE);
 1764              		.loc 1 650 5 is_stmt 1 view .LVU374
 1765 0012 2A46     		mov	r2, r5
 1766 0014 8823     		movs	r3, #136
 1767 0016 0121     		movs	r1, #1
 1768 0018 6846     		mov	r0, sp
 1769 001a FFF7FEFF 		bl	keccak_squeezeblocks
 1770              	.LVL152:
 651:fips202.c     **** 
 652:fips202.c     ****     for (size_t i = 0; i < 32; i++) {
 1771              		.loc 1 652 5 view .LVU375
 1772              	.LBB8:
 1773              		.loc 1 652 10 view .LVU376
 1774              		.loc 1 652 24 view .LVU377
 653:fips202.c     ****         output[i] = t[i];
 1775              		.loc 1 653 19 is_stmt 0 view .LVU378
 1776 001e 08AD     		add	r5, sp, #32
 1777              	.LVL153:
 1778              		.loc 1 653 19 view .LVU379
 1779 0020 6A46     		mov	r2, sp
 1780 0022 2346     		mov	r3, r4
 1781              	.LVL154:
 1782              	.L59:
 1783              		.loc 1 653 19 view .LVU380
 1784 0024 1446     		mov	r4, r2
 1785 0026 03CC     		ldmia	r4!, {r0, r1}
 1786 0028 AC42     		cmp	r4, r5
 1787 002a 1860     		str	r0, [r3]	@ unaligned
 1788 002c 5960     		str	r1, [r3, #4]	@ unaligned
 1789 002e 2246     		mov	r2, r4
 1790 0030 03F10803 		add	r3, r3, #8
 1791 0034 F6D1     		bne	.L59
 1792              	.LBE8:
 654:fips202.c     ****     }
 655:fips202.c     **** #ifdef PROFILE_HASHING
 656:fips202.c     ****   uint64_t t1 = hal_get_time();
 657:fips202.c     ****   hash_cycles += (t1-t0);
 658:fips202.c     **** #endif
 659:fips202.c     **** }
 1793              		.loc 1 659 1 view .LVU381
 1794 0036 23B0     		add	sp, sp, #140
 1795              	.LCFI32:
 1796              		.cfi_def_cfa_offset 12
 1797              		@ sp needed
 1798 0038 30BD     		pop	{r4, r5, pc}
 1799              		.cfi_endproc
 1800              	.LFE36:
 1802              		.section	.text.sha3_256_inc_ctx_clone,"ax",%progbits
 1803              		.align	1
 1804              		.global	sha3_256_inc_ctx_clone
 1805              		.syntax unified
 1806              		.thumb
 1807              		.thumb_func
 1808              		.fpu softvfp
 1810              	sha3_256_inc_ctx_clone:
 1811              	.LFB73:
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 0
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816 0000 FFF7FEBF 		b	shake128_inc_ctx_clone
 1817              		.cfi_endproc
 1818              	.LFE73:
 1820              		.section	.text.sha3_256_inc_ctx_release,"ax",%progbits
 1821              		.align	1
 1822              		.global	sha3_256_inc_ctx_release
 1823              		.syntax unified
 1824              		.thumb
 1825              		.thumb_func
 1826              		.fpu softvfp
 1828              	sha3_256_inc_ctx_release:
 1829              	.LFB63:
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 0
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              		@ link register save eliminated.
 1834 0000 7047     		bx	lr
 1835              		.cfi_endproc
 1836              	.LFE63:
 1838              		.section	.text.sha3_384_inc_init,"ax",%progbits
 1839              		.align	1
 1840              		.global	sha3_384_inc_init
 1841              		.syntax unified
 1842              		.thumb
 1843              		.thumb_func
 1844              		.fpu softvfp
 1846              	sha3_384_inc_init:
 1847              	.LVL155:
 1848              	.LFB39:
 660:fips202.c     **** 
 661:fips202.c     **** void sha3_256_inc_ctx_clone(sha3_256incctx *dest, const sha3_256incctx *src) {
 662:fips202.c     ****     memcpy(dest, src, sizeof(sha3_256incctx));
 663:fips202.c     **** }
 664:fips202.c     **** 
 665:fips202.c     **** void sha3_256_inc_ctx_release(sha3_256incctx *state) {
 666:fips202.c     ****     (void) state;
 667:fips202.c     **** }
 668:fips202.c     **** 
 669:fips202.c     **** void sha3_384_inc_init(sha3_384incctx *state) {
 1849              		.loc 1 669 47 is_stmt 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 1853              		@ link register save eliminated.
 670:fips202.c     **** #ifdef PROFILE_HASHING
 671:fips202.c     ****   uint64_t t0 = hal_get_time();
 672:fips202.c     **** #endif
 673:fips202.c     ****     keccak_inc_init(state->ctx);
 1854              		.loc 1 673 5 view .LVU383
 1855 0000 FFF7FEBF 		b	keccak_inc_init
 1856              	.LVL156:
 1857              		.loc 1 673 5 is_stmt 0 view .LVU384
 1858              		.cfi_endproc
 1859              	.LFE39:
 1861              		.section	.text.sha3_384_inc_absorb,"ax",%progbits
 1862              		.align	1
 1863              		.global	sha3_384_inc_absorb
 1864              		.syntax unified
 1865              		.thumb
 1866              		.thumb_func
 1867              		.fpu softvfp
 1869              	sha3_384_inc_absorb:
 1870              	.LVL157:
 1871              	.LFB40:
 674:fips202.c     **** #ifdef PROFILE_HASHING
 675:fips202.c     ****   uint64_t t1 = hal_get_time();
 676:fips202.c     ****   hash_cycles += (t1-t0);
 677:fips202.c     **** #endif
 678:fips202.c     **** }
 679:fips202.c     **** 
 680:fips202.c     **** void sha3_384_inc_absorb(sha3_384incctx *state, const uint8_t *input, size_t inlen) {
 1872              		.loc 1 680 85 is_stmt 1 view -0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 0
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              		@ link register save eliminated.
 681:fips202.c     **** #ifdef PROFILE_HASHING
 682:fips202.c     ****   uint64_t t0 = hal_get_time();
 683:fips202.c     **** #endif
 684:fips202.c     ****     keccak_inc_absorb(state->ctx, SHA3_384_RATE, input, inlen);
 1877              		.loc 1 684 5 view .LVU386
 680:fips202.c     **** #ifdef PROFILE_HASHING
 1878              		.loc 1 680 85 is_stmt 0 view .LVU387
 1879 0000 1346     		mov	r3, r2
 1880              		.loc 1 684 5 view .LVU388
 1881 0002 0A46     		mov	r2, r1
 1882              	.LVL158:
 1883              		.loc 1 684 5 view .LVU389
 1884 0004 6821     		movs	r1, #104
 1885              	.LVL159:
 1886              		.loc 1 684 5 view .LVU390
 1887 0006 FFF7FEBF 		b	keccak_inc_absorb
 1888              	.LVL160:
 1889              		.loc 1 684 5 view .LVU391
 1890              		.cfi_endproc
 1891              	.LFE40:
 1893              		.section	.text.sha3_384_inc_finalize,"ax",%progbits
 1894              		.align	1
 1895              		.global	sha3_384_inc_finalize
 1896              		.syntax unified
 1897              		.thumb
 1898              		.thumb_func
 1899              		.fpu softvfp
 1901              	sha3_384_inc_finalize:
 1902              	.LVL161:
 1903              	.LFB41:
 685:fips202.c     **** #ifdef PROFILE_HASHING
 686:fips202.c     ****   uint64_t t1 = hal_get_time();
 687:fips202.c     ****   hash_cycles += (t1-t0);
 688:fips202.c     **** #endif
 689:fips202.c     **** }
 690:fips202.c     **** 
 691:fips202.c     **** void sha3_384_inc_finalize(uint8_t *output, sha3_384incctx *state) {
 1904              		.loc 1 691 68 is_stmt 1 view -0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 104
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 692:fips202.c     **** #ifdef PROFILE_HASHING
 693:fips202.c     ****   uint64_t t0 = hal_get_time();
 694:fips202.c     **** #endif
 695:fips202.c     ****     uint8_t t[SHA3_384_RATE];
 1908              		.loc 1 695 5 view .LVU393
 696:fips202.c     ****     keccak_inc_finalize(state->ctx, SHA3_384_RATE, 0x06);
 1909              		.loc 1 696 5 view .LVU394
 691:fips202.c     **** #ifdef PROFILE_HASHING
 1910              		.loc 1 691 68 is_stmt 0 view .LVU395
 1911 0000 30B5     		push	{r4, r5, lr}
 1912              	.LCFI33:
 1913              		.cfi_def_cfa_offset 12
 1914              		.cfi_offset 4, -12
 1915              		.cfi_offset 5, -8
 1916              		.cfi_offset 14, -4
 1917 0002 0D46     		mov	r5, r1
 1918 0004 9BB0     		sub	sp, sp, #108
 1919              	.LCFI34:
 1920              		.cfi_def_cfa_offset 120
 691:fips202.c     **** #ifdef PROFILE_HASHING
 1921              		.loc 1 691 68 view .LVU396
 1922 0006 0446     		mov	r4, r0
 1923              		.loc 1 696 5 view .LVU397
 1924 0008 0622     		movs	r2, #6
 1925 000a 2846     		mov	r0, r5
 1926              	.LVL162:
 1927              		.loc 1 696 5 view .LVU398
 1928 000c 6821     		movs	r1, #104
 1929              	.LVL163:
 1930              		.loc 1 696 5 view .LVU399
 1931 000e FFF7FEFF 		bl	keccak_inc_finalize
 1932              	.LVL164:
 697:fips202.c     **** 
 698:fips202.c     ****     keccak_squeezeblocks(t, 1, state->ctx, SHA3_384_RATE);
 1933              		.loc 1 698 5 is_stmt 1 view .LVU400
 1934 0012 2A46     		mov	r2, r5
 1935 0014 6823     		movs	r3, #104
 1936 0016 0121     		movs	r1, #1
 1937 0018 6846     		mov	r0, sp
 1938 001a FFF7FEFF 		bl	keccak_squeezeblocks
 1939              	.LVL165:
 699:fips202.c     **** 
 700:fips202.c     ****     for (size_t i = 0; i < 48; i++) {
 1940              		.loc 1 700 5 view .LVU401
 1941              	.LBB9:
 1942              		.loc 1 700 10 view .LVU402
 1943              		.loc 1 700 24 view .LVU403
 701:fips202.c     ****         output[i] = t[i];
 1944              		.loc 1 701 19 is_stmt 0 view .LVU404
 1945 001e 0CAD     		add	r5, sp, #48
 1946              	.LVL166:
 1947              		.loc 1 701 19 view .LVU405
 1948 0020 6A46     		mov	r2, sp
 1949 0022 2346     		mov	r3, r4
 1950              	.LVL167:
 1951              	.L66:
 1952              		.loc 1 701 19 view .LVU406
 1953 0024 1446     		mov	r4, r2
 1954 0026 03CC     		ldmia	r4!, {r0, r1}
 1955 0028 AC42     		cmp	r4, r5
 1956 002a 1860     		str	r0, [r3]	@ unaligned
 1957 002c 5960     		str	r1, [r3, #4]	@ unaligned
 1958 002e 2246     		mov	r2, r4
 1959 0030 03F10803 		add	r3, r3, #8
 1960 0034 F6D1     		bne	.L66
 1961              	.LBE9:
 702:fips202.c     ****     }
 703:fips202.c     **** #ifdef PROFILE_HASHING
 704:fips202.c     ****   uint64_t t1 = hal_get_time();
 705:fips202.c     ****   hash_cycles += (t1-t0);
 706:fips202.c     **** #endif
 707:fips202.c     **** }
 1962              		.loc 1 707 1 view .LVU407
 1963 0036 1BB0     		add	sp, sp, #108
 1964              	.LCFI35:
 1965              		.cfi_def_cfa_offset 12
 1966              		@ sp needed
 1967 0038 30BD     		pop	{r4, r5, pc}
 1968              		.cfi_endproc
 1969              	.LFE41:
 1971              		.section	.text.sha3_384_inc_ctx_clone,"ax",%progbits
 1972              		.align	1
 1973              		.global	sha3_384_inc_ctx_clone
 1974              		.syntax unified
 1975              		.thumb
 1976              		.thumb_func
 1977              		.fpu softvfp
 1979              	sha3_384_inc_ctx_clone:
 1980              	.LFB75:
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984              		@ link register save eliminated.
 1985 0000 FFF7FEBF 		b	shake128_inc_ctx_clone
 1986              		.cfi_endproc
 1987              	.LFE75:
 1989              		.section	.text.sha3_384_inc_ctx_release,"ax",%progbits
 1990              		.align	1
 1991              		.global	sha3_384_inc_ctx_release
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1995              		.fpu softvfp
 1997              	sha3_384_inc_ctx_release:
 1998              	.LFB65:
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 0, uses_anonymous_args = 0
 2002              		@ link register save eliminated.
 2003 0000 7047     		bx	lr
 2004              		.cfi_endproc
 2005              	.LFE65:
 2007              		.section	.text.sha3_384,"ax",%progbits
 2008              		.align	1
 2009              		.global	sha3_384
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu softvfp
 2015              	sha3_384:
 2016              	.LVL168:
 2017              	.LFB44:
 708:fips202.c     **** 
 709:fips202.c     **** void sha3_384_inc_ctx_clone(sha3_384incctx *dest, const sha3_384incctx *src) {
 710:fips202.c     ****     memcpy(dest, src, sizeof(sha3_384incctx));
 711:fips202.c     **** }
 712:fips202.c     **** 
 713:fips202.c     **** void sha3_384_inc_ctx_release(sha3_384incctx *state) {
 714:fips202.c     ****     (void) state;
 715:fips202.c     **** }
 716:fips202.c     **** 
 717:fips202.c     **** /*************************************************
 718:fips202.c     ****  * Name:        sha3_384
 719:fips202.c     ****  *
 720:fips202.c     ****  * Description: SHA3-256 with non-incremental API
 721:fips202.c     ****  *
 722:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 723:fips202.c     ****  *              - const uint8_t *input: pointer to input
 724:fips202.c     ****  *              - size_t inlen:   length of input in bytes
 725:fips202.c     ****  **************************************************/
 726:fips202.c     **** void sha3_384(uint8_t *output, const uint8_t *input, size_t inlen) {
 2018              		.loc 1 726 68 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 208
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 727:fips202.c     **** #ifdef PROFILE_HASHING
 728:fips202.c     ****   uint64_t t0 = hal_get_time();
 729:fips202.c     **** #endif
 730:fips202.c     ****   sha3_384incctx state;
 2022              		.loc 1 730 3 view .LVU409
 731:fips202.c     ****   keccak_inc_init(state.ctx);
 2023              		.loc 1 731 3 view .LVU410
 726:fips202.c     **** #ifdef PROFILE_HASHING
 2024              		.loc 1 726 68 is_stmt 0 view .LVU411
 2025 0000 70B5     		push	{r4, r5, r6, lr}
 2026              	.LCFI36:
 2027              		.cfi_def_cfa_offset 16
 2028              		.cfi_offset 4, -16
 2029              		.cfi_offset 5, -12
 2030              		.cfi_offset 6, -8
 2031              		.cfi_offset 14, -4
 2032 0002 B4B0     		sub	sp, sp, #208
 2033              	.LCFI37:
 2034              		.cfi_def_cfa_offset 224
 726:fips202.c     **** #ifdef PROFILE_HASHING
 2035              		.loc 1 726 68 view .LVU412
 2036 0004 0D46     		mov	r5, r1
 2037 0006 1646     		mov	r6, r2
 2038 0008 0446     		mov	r4, r0
 2039              		.loc 1 731 3 view .LVU413
 2040 000a 6846     		mov	r0, sp
 2041              	.LVL169:
 2042              		.loc 1 731 3 view .LVU414
 2043 000c FFF7FEFF 		bl	keccak_inc_init
 2044              	.LVL170:
 732:fips202.c     **** 
 733:fips202.c     ****   /* Absorb input */
 734:fips202.c     ****   keccak_inc_absorb(state.ctx, SHA3_384_RATE, input, inlen);
 2045              		.loc 1 734 3 is_stmt 1 view .LVU415
 2046 0010 3346     		mov	r3, r6
 2047 0012 2A46     		mov	r2, r5
 2048 0014 6846     		mov	r0, sp
 2049 0016 6821     		movs	r1, #104
 2050 0018 FFF7FEFF 		bl	keccak_inc_absorb
 2051              	.LVL171:
 735:fips202.c     ****   keccak_inc_finalize(state.ctx, SHA3_384_RATE, 0x06);
 2052              		.loc 1 735 3 view .LVU416
 2053 001c 6846     		mov	r0, sp
 2054 001e 0622     		movs	r2, #6
 2055 0020 6821     		movs	r1, #104
 2056 0022 FFF7FEFF 		bl	keccak_inc_finalize
 2057              	.LVL172:
 736:fips202.c     **** 
 737:fips202.c     ****   /* Squeeze output */
 738:fips202.c     ****   keccak_inc_squeeze(output, 48, state.ctx, SHA3_384_RATE);
 2058              		.loc 1 738 3 view .LVU417
 2059 0026 6823     		movs	r3, #104
 2060 0028 6A46     		mov	r2, sp
 2061 002a 3021     		movs	r1, #48
 2062 002c 2046     		mov	r0, r4
 2063 002e FFF7FEFF 		bl	keccak_inc_squeeze
 2064              	.LVL173:
 739:fips202.c     **** #ifdef PROFILE_HASHING
 740:fips202.c     ****   uint64_t t1 = hal_get_time();
 741:fips202.c     ****   hash_cycles += (t1-t0);
 742:fips202.c     **** #endif
 743:fips202.c     **** }
 2065              		.loc 1 743 1 is_stmt 0 view .LVU418
 2066 0032 34B0     		add	sp, sp, #208
 2067              	.LCFI38:
 2068              		.cfi_def_cfa_offset 16
 2069              		@ sp needed
 2070 0034 70BD     		pop	{r4, r5, r6, pc}
 2071              		.loc 1 743 1 view .LVU419
 2072              		.cfi_endproc
 2073              	.LFE44:
 2075              		.section	.text.sha3_512,"ax",%progbits
 2076              		.align	1
 2077              		.global	sha3_512
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2081              		.fpu softvfp
 2083              	sha3_512:
 2084              	.LVL174:
 2085              	.LFB45:
 744:fips202.c     **** /*************************************************
 745:fips202.c     ****  * Name:        sha3_512
 746:fips202.c     ****  *
 747:fips202.c     ****  * Description: SHA3-512 with non-incremental API
 748:fips202.c     ****  *
 749:fips202.c     ****  * Arguments:   - uint8_t *output:      pointer to output
 750:fips202.c     ****  *              - const uint8_t *input: pointer to input
 751:fips202.c     ****  *              - size_t inlen:         length of input in bytes
 752:fips202.c     ****  **************************************************/
 753:fips202.c     **** void sha3_512(uint8_t *output, const uint8_t *input, size_t inlen)
 754:fips202.c     **** {
 2086              		.loc 1 754 1 is_stmt 1 view -0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 208
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 755:fips202.c     **** #ifdef PROFILE_HASHING
 756:fips202.c     ****   uint64_t t0 = hal_get_time();
 757:fips202.c     **** #endif
 758:fips202.c     ****   sha3_512incctx state;
 2090              		.loc 1 758 3 view .LVU421
 759:fips202.c     ****   keccak_inc_init(state.ctx);
 2091              		.loc 1 759 3 view .LVU422
 754:fips202.c     **** #ifdef PROFILE_HASHING
 2092              		.loc 1 754 1 is_stmt 0 view .LVU423
 2093 0000 70B5     		push	{r4, r5, r6, lr}
 2094              	.LCFI39:
 2095              		.cfi_def_cfa_offset 16
 2096              		.cfi_offset 4, -16
 2097              		.cfi_offset 5, -12
 2098              		.cfi_offset 6, -8
 2099              		.cfi_offset 14, -4
 2100 0002 B4B0     		sub	sp, sp, #208
 2101              	.LCFI40:
 2102              		.cfi_def_cfa_offset 224
 754:fips202.c     **** #ifdef PROFILE_HASHING
 2103              		.loc 1 754 1 view .LVU424
 2104 0004 0D46     		mov	r5, r1
 2105 0006 1646     		mov	r6, r2
 2106 0008 0446     		mov	r4, r0
 2107              		.loc 1 759 3 view .LVU425
 2108 000a 6846     		mov	r0, sp
 2109              	.LVL175:
 2110              		.loc 1 759 3 view .LVU426
 2111 000c FFF7FEFF 		bl	keccak_inc_init
 2112              	.LVL176:
 760:fips202.c     **** 
 761:fips202.c     ****   /* Absorb input */
 762:fips202.c     ****   keccak_inc_absorb(state.ctx, SHA3_512_RATE, input, inlen);
 2113              		.loc 1 762 3 is_stmt 1 view .LVU427
 2114 0010 3346     		mov	r3, r6
 2115 0012 2A46     		mov	r2, r5
 2116 0014 6846     		mov	r0, sp
 2117 0016 4821     		movs	r1, #72
 2118 0018 FFF7FEFF 		bl	keccak_inc_absorb
 2119              	.LVL177:
 763:fips202.c     ****   keccak_inc_finalize(state.ctx, SHA3_512_RATE, 0x06);
 2120              		.loc 1 763 3 view .LVU428
 2121 001c 6846     		mov	r0, sp
 2122 001e 0622     		movs	r2, #6
 2123 0020 4821     		movs	r1, #72
 2124 0022 FFF7FEFF 		bl	keccak_inc_finalize
 2125              	.LVL178:
 764:fips202.c     **** 
 765:fips202.c     ****   /* Squeeze output */
 766:fips202.c     ****   keccak_inc_squeeze(output, 64, state.ctx, SHA3_512_RATE);
 2126              		.loc 1 766 3 view .LVU429
 2127 0026 4823     		movs	r3, #72
 2128 0028 6A46     		mov	r2, sp
 2129 002a 4021     		movs	r1, #64
 2130 002c 2046     		mov	r0, r4
 2131 002e FFF7FEFF 		bl	keccak_inc_squeeze
 2132              	.LVL179:
 767:fips202.c     **** #ifdef PROFILE_HASHING
 768:fips202.c     ****   uint64_t t1 = hal_get_time();
 769:fips202.c     ****   hash_cycles += (t1-t0);
 770:fips202.c     **** #endif
 771:fips202.c     **** }
 2133              		.loc 1 771 1 is_stmt 0 view .LVU430
 2134 0032 34B0     		add	sp, sp, #208
 2135              	.LCFI41:
 2136              		.cfi_def_cfa_offset 16
 2137              		@ sp needed
 2138 0034 70BD     		pop	{r4, r5, r6, pc}
 2139              		.loc 1 771 1 view .LVU431
 2140              		.cfi_endproc
 2141              	.LFE45:
 2143              		.section	.text.sha3_512_inc_init,"ax",%progbits
 2144              		.align	1
 2145              		.global	sha3_512_inc_init
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2149              		.fpu softvfp
 2151              	sha3_512_inc_init:
 2152              	.LVL180:
 2153              	.LFB46:
 772:fips202.c     **** void sha3_512_inc_init(sha3_512incctx *state) {
 2154              		.loc 1 772 47 is_stmt 1 view -0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 2158              		@ link register save eliminated.
 773:fips202.c     **** #ifdef PROFILE_HASHING
 774:fips202.c     ****   uint64_t t0 = hal_get_time();
 775:fips202.c     **** #endif
 776:fips202.c     ****     keccak_inc_init(state->ctx);
 2159              		.loc 1 776 5 view .LVU433
 2160 0000 FFF7FEBF 		b	keccak_inc_init
 2161              	.LVL181:
 2162              		.loc 1 776 5 is_stmt 0 view .LVU434
 2163              		.cfi_endproc
 2164              	.LFE46:
 2166              		.section	.text.sha3_512_inc_absorb,"ax",%progbits
 2167              		.align	1
 2168              		.global	sha3_512_inc_absorb
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu softvfp
 2174              	sha3_512_inc_absorb:
 2175              	.LVL182:
 2176              	.LFB47:
 777:fips202.c     **** #ifdef PROFILE_HASHING
 778:fips202.c     ****   uint64_t t1 = hal_get_time();
 779:fips202.c     ****   hash_cycles += (t1-t0);
 780:fips202.c     **** #endif
 781:fips202.c     **** }
 782:fips202.c     **** 
 783:fips202.c     **** void sha3_512_inc_absorb(sha3_512incctx *state, const uint8_t *input, size_t inlen) {
 2177              		.loc 1 783 85 is_stmt 1 view -0
 2178              		.cfi_startproc
 2179              		@ args = 0, pretend = 0, frame = 0
 2180              		@ frame_needed = 0, uses_anonymous_args = 0
 2181              		@ link register save eliminated.
 784:fips202.c     **** #ifdef PROFILE_HASHING
 785:fips202.c     ****   uint64_t t0 = hal_get_time();
 786:fips202.c     **** #endif
 787:fips202.c     ****     keccak_inc_absorb(state->ctx, SHA3_512_RATE, input, inlen);
 2182              		.loc 1 787 5 view .LVU436
 783:fips202.c     **** #ifdef PROFILE_HASHING
 2183              		.loc 1 783 85 is_stmt 0 view .LVU437
 2184 0000 1346     		mov	r3, r2
 2185              		.loc 1 787 5 view .LVU438
 2186 0002 0A46     		mov	r2, r1
 2187              	.LVL183:
 2188              		.loc 1 787 5 view .LVU439
 2189 0004 4821     		movs	r1, #72
 2190              	.LVL184:
 2191              		.loc 1 787 5 view .LVU440
 2192 0006 FFF7FEBF 		b	keccak_inc_absorb
 2193              	.LVL185:
 2194              		.loc 1 787 5 view .LVU441
 2195              		.cfi_endproc
 2196              	.LFE47:
 2198              		.section	.text.sha3_512_inc_finalize,"ax",%progbits
 2199              		.align	1
 2200              		.global	sha3_512_inc_finalize
 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu softvfp
 2206              	sha3_512_inc_finalize:
 2207              	.LVL186:
 2208              	.LFB48:
 788:fips202.c     **** #ifdef PROFILE_HASHING
 789:fips202.c     ****   uint64_t t1 = hal_get_time();
 790:fips202.c     ****   hash_cycles += (t1-t0);
 791:fips202.c     **** #endif
 792:fips202.c     **** }
 793:fips202.c     **** 
 794:fips202.c     **** void sha3_512_inc_finalize(uint8_t *output, sha3_512incctx *state) {
 2209              		.loc 1 794 68 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 72
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 795:fips202.c     **** #ifdef PROFILE_HASHING
 796:fips202.c     ****   uint64_t t0 = hal_get_time();
 797:fips202.c     **** #endif
 798:fips202.c     ****     uint8_t t[SHA3_512_RATE];
 2213              		.loc 1 798 5 view .LVU443
 799:fips202.c     ****     keccak_inc_finalize(state->ctx, SHA3_512_RATE, 0x06);
 2214              		.loc 1 799 5 view .LVU444
 794:fips202.c     **** #ifdef PROFILE_HASHING
 2215              		.loc 1 794 68 is_stmt 0 view .LVU445
 2216 0000 30B5     		push	{r4, r5, lr}
 2217              	.LCFI42:
 2218              		.cfi_def_cfa_offset 12
 2219              		.cfi_offset 4, -12
 2220              		.cfi_offset 5, -8
 2221              		.cfi_offset 14, -4
 2222 0002 0D46     		mov	r5, r1
 2223 0004 93B0     		sub	sp, sp, #76
 2224              	.LCFI43:
 2225              		.cfi_def_cfa_offset 88
 794:fips202.c     **** #ifdef PROFILE_HASHING
 2226              		.loc 1 794 68 view .LVU446
 2227 0006 0446     		mov	r4, r0
 2228              		.loc 1 799 5 view .LVU447
 2229 0008 0622     		movs	r2, #6
 2230 000a 2846     		mov	r0, r5
 2231              	.LVL187:
 2232              		.loc 1 799 5 view .LVU448
 2233 000c 4821     		movs	r1, #72
 2234              	.LVL188:
 2235              		.loc 1 799 5 view .LVU449
 2236 000e FFF7FEFF 		bl	keccak_inc_finalize
 2237              	.LVL189:
 800:fips202.c     **** 
 801:fips202.c     ****     keccak_squeezeblocks(t, 1, state->ctx, SHA3_512_RATE);
 2238              		.loc 1 801 5 is_stmt 1 view .LVU450
 2239 0012 2A46     		mov	r2, r5
 2240 0014 4823     		movs	r3, #72
 2241 0016 0121     		movs	r1, #1
 2242 0018 6846     		mov	r0, sp
 2243 001a FFF7FEFF 		bl	keccak_squeezeblocks
 2244              	.LVL190:
 802:fips202.c     **** 
 803:fips202.c     ****     for (size_t i = 0; i < 64; i++) {
 2245              		.loc 1 803 5 view .LVU451
 2246              	.LBB10:
 2247              		.loc 1 803 10 view .LVU452
 2248              		.loc 1 803 24 view .LVU453
 804:fips202.c     ****         output[i] = t[i];
 2249              		.loc 1 804 19 is_stmt 0 view .LVU454
 2250 001e 10AD     		add	r5, sp, #64
 2251              	.LVL191:
 2252              		.loc 1 804 19 view .LVU455
 2253 0020 6A46     		mov	r2, sp
 2254 0022 2346     		mov	r3, r4
 2255              	.LVL192:
 2256              	.L75:
 2257              		.loc 1 804 19 view .LVU456
 2258 0024 1446     		mov	r4, r2
 2259 0026 03CC     		ldmia	r4!, {r0, r1}
 2260 0028 AC42     		cmp	r4, r5
 2261 002a 1860     		str	r0, [r3]	@ unaligned
 2262 002c 5960     		str	r1, [r3, #4]	@ unaligned
 2263 002e 2246     		mov	r2, r4
 2264 0030 03F10803 		add	r3, r3, #8
 2265 0034 F6D1     		bne	.L75
 2266              	.LBE10:
 805:fips202.c     ****     }
 806:fips202.c     **** #ifdef PROFILE_HASHING
 807:fips202.c     ****   uint64_t t1 = hal_get_time();
 808:fips202.c     ****   hash_cycles += (t1-t0);
 809:fips202.c     **** #endif
 810:fips202.c     **** }
 2267              		.loc 1 810 1 view .LVU457
 2268 0036 13B0     		add	sp, sp, #76
 2269              	.LCFI44:
 2270              		.cfi_def_cfa_offset 12
 2271              		@ sp needed
 2272 0038 30BD     		pop	{r4, r5, pc}
 2273              		.cfi_endproc
 2274              	.LFE48:
 2276              		.section	.text.sha3_512_inc_ctx_clone,"ax",%progbits
 2277              		.align	1
 2278              		.global	sha3_512_inc_ctx_clone
 2279              		.syntax unified
 2280              		.thumb
 2281              		.thumb_func
 2282              		.fpu softvfp
 2284              	sha3_512_inc_ctx_clone:
 2285              	.LFB77:
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 0
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 2289              		@ link register save eliminated.
 2290 0000 FFF7FEBF 		b	shake128_inc_ctx_clone
 2291              		.cfi_endproc
 2292              	.LFE77:
 2294              		.section	.text.sha3_512_inc_ctx_release,"ax",%progbits
 2295              		.align	1
 2296              		.global	sha3_512_inc_ctx_release
 2297              		.syntax unified
 2298              		.thumb
 2299              		.thumb_func
 2300              		.fpu softvfp
 2302              	sha3_512_inc_ctx_release:
 2303              	.LFB67:
 2304              		.cfi_startproc
 2305              		@ args = 0, pretend = 0, frame = 0
 2306              		@ frame_needed = 0, uses_anonymous_args = 0
 2307              		@ link register save eliminated.
 2308 0000 7047     		bx	lr
 2309              		.cfi_endproc
 2310              	.LFE67:
 2312              		.section	.text.cshake256_simple_absorb,"ax",%progbits
 2313              		.align	1
 2314              		.global	cshake256_simple_absorb
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2318              		.fpu softvfp
 2320              	cshake256_simple_absorb:
 2321              	.LVL193:
 2322              	.LFB51:
 811:fips202.c     **** 
 812:fips202.c     **** void sha3_512_inc_ctx_clone(sha3_512incctx *dest, const sha3_512incctx *src) {
 813:fips202.c     ****     memcpy(dest, src, sizeof(sha3_512incctx));
 814:fips202.c     **** }
 815:fips202.c     **** 
 816:fips202.c     **** void sha3_512_inc_ctx_release(sha3_512incctx *state) {
 817:fips202.c     ****     (void) state;
 818:fips202.c     **** }
 819:fips202.c     **** 
 820:fips202.c     **** /********** cSHAKE256 ***********/
 821:fips202.c     **** 
 822:fips202.c     **** void cshake256_simple_absorb(shake256ctx *state, uint16_t cstm, const uint8_t *in, size_t inlen)
 823:fips202.c     **** {
 2323              		.loc 1 823 1 is_stmt 1 view -0
 2324              		.cfi_startproc
 2325              		@ args = 0, pretend = 0, frame = 8
 2326              		@ frame_needed = 0, uses_anonymous_args = 0
 824:fips202.c     **** #ifdef PROFILE_HASHING
 825:fips202.c     ****   uint64_t t0 = hal_get_time();
 826:fips202.c     **** #endif
 827:fips202.c     ****   uint8_t sep[8];
 2327              		.loc 1 827 3 view .LVU459
 828:fips202.c     ****   size_t i;
 2328              		.loc 1 828 3 view .LVU460
 829:fips202.c     **** 
 830:fips202.c     ****   for (i = 0; i < 25; i++)
 2329              		.loc 1 830 3 view .LVU461
 2330              		.loc 1 830 15 view .LVU462
 823:fips202.c     **** #ifdef PROFILE_HASHING
 2331              		.loc 1 823 1 is_stmt 0 view .LVU463
 2332 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 2333              	.LCFI45:
 2334              		.cfi_def_cfa_offset 40
 2335              		.cfi_offset 4, -24
 2336              		.cfi_offset 5, -20
 2337              		.cfi_offset 6, -16
 2338              		.cfi_offset 7, -12
 2339              		.cfi_offset 8, -8
 2340              		.cfi_offset 14, -4
 823:fips202.c     **** #ifdef PROFILE_HASHING
 2341              		.loc 1 823 1 view .LVU464
 2342 0004 0C46     		mov	r4, r1
 2343 0006 1646     		mov	r6, r2
 831:fips202.c     ****     state->ctx[i] = 0;
 2344              		.loc 1 831 19 view .LVU465
 2345 0008 0021     		movs	r1, #0
 2346              	.LVL194:
 2347              		.loc 1 831 19 view .LVU466
 2348 000a C822     		movs	r2, #200
 2349              	.LVL195:
 823:fips202.c     **** #ifdef PROFILE_HASHING
 2350              		.loc 1 823 1 view .LVU467
 2351 000c 0546     		mov	r5, r0
 2352 000e 1F46     		mov	r7, r3
 2353              		.loc 1 831 19 view .LVU468
 2354 0010 FFF7FEFF 		bl	memset
 2355              	.LVL196:
 832:fips202.c     **** 
 833:fips202.c     ****   /* Absorb customization (domain-separation) string */
 834:fips202.c     ****   sep[0] = 0x01;
 2356              		.loc 1 834 3 is_stmt 1 view .LVU469
 2357              		.loc 1 834 10 is_stmt 0 view .LVU470
 2358 0014 0123     		movs	r3, #1
 2359 0016 8DF80830 		strb	r3, [sp, #8]
 835:fips202.c     ****   sep[1] = 0x88;
 2360              		.loc 1 835 3 is_stmt 1 view .LVU471
 836:fips202.c     ****   sep[2] = 0x01;
 2361              		.loc 1 836 10 is_stmt 0 view .LVU472
 2362 001a 8DF80A30 		strb	r3, [sp, #10]
 837:fips202.c     ****   sep[3] = 0x00;
 838:fips202.c     ****   sep[4] = 0x01;
 2363              		.loc 1 838 10 view .LVU473
 2364 001e 8DF80C30 		strb	r3, [sp, #12]
 839:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 2365              		.loc 1 839 10 view .LVU474
 2366 0022 1023     		movs	r3, #16
 2367 0024 8DF80D30 		strb	r3, [sp, #13]
 840:fips202.c     ****   sep[6] = cstm & 0xff;
 841:fips202.c     ****   sep[7] = cstm >> 8;
 842:fips202.c     **** 
 843:fips202.c     ****   KeccakF1600_StateXORBytes(state->ctx, sep, 0, 8);
 2368              		.loc 1 843 3 view .LVU475
 2369 0028 0823     		movs	r3, #8
 2370 002a 0DEB0301 		add	r1, sp, r3
 837:fips202.c     ****   sep[4] = 0x01;
 2371              		.loc 1 837 10 view .LVU476
 2372 002e 0022     		movs	r2, #0
 835:fips202.c     ****   sep[2] = 0x01;
 2373              		.loc 1 835 10 view .LVU477
 2374 0030 4FF08808 		mov	r8, #136
 840:fips202.c     ****   sep[6] = cstm & 0xff;
 2375              		.loc 1 840 10 view .LVU478
 2376 0034 8DF80E40 		strb	r4, [sp, #14]
 2377              		.loc 1 843 3 view .LVU479
 2378 0038 2846     		mov	r0, r5
 841:fips202.c     **** 
 2379              		.loc 1 841 10 view .LVU480
 2380 003a 240A     		lsrs	r4, r4, #8
 837:fips202.c     ****   sep[4] = 0x01;
 2381              		.loc 1 837 10 view .LVU481
 2382 003c 8DF80B20 		strb	r2, [sp, #11]
 835:fips202.c     ****   sep[2] = 0x01;
 2383              		.loc 1 835 10 view .LVU482
 2384 0040 8DF80980 		strb	r8, [sp, #9]
 836:fips202.c     ****   sep[3] = 0x00;
 2385              		.loc 1 836 3 is_stmt 1 view .LVU483
 837:fips202.c     ****   sep[4] = 0x01;
 2386              		.loc 1 837 3 view .LVU484
 838:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 2387              		.loc 1 838 3 view .LVU485
 839:fips202.c     ****   sep[6] = cstm & 0xff;
 2388              		.loc 1 839 3 view .LVU486
 840:fips202.c     ****   sep[7] = cstm >> 8;
 2389              		.loc 1 840 3 view .LVU487
 841:fips202.c     **** 
 2390              		.loc 1 841 3 view .LVU488
 841:fips202.c     **** 
 2391              		.loc 1 841 10 is_stmt 0 view .LVU489
 2392 0044 8DF80F40 		strb	r4, [sp, #15]
 2393              		.loc 1 843 3 is_stmt 1 view .LVU490
 2394 0048 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 2395              	.LVL197:
 844:fips202.c     ****   KeccakF1600_StatePermute(state->ctx);
 2396              		.loc 1 844 3 view .LVU491
 2397 004c 2846     		mov	r0, r5
 2398 004e FFF7FEFF 		bl	KeccakF1600_StatePermute
 2399              	.LVL198:
 845:fips202.c     **** 
 846:fips202.c     ****   /* Absorb input */
 847:fips202.c     ****   keccak_absorb(state->ctx, SHAKE256_RATE, in, inlen, 0x04);
 2400              		.loc 1 847 3 view .LVU492
 2401 0052 0423     		movs	r3, #4
 2402 0054 0093     		str	r3, [sp]
 2403 0056 3246     		mov	r2, r6
 2404 0058 3B46     		mov	r3, r7
 2405 005a 4146     		mov	r1, r8
 2406 005c 2846     		mov	r0, r5
 2407 005e FFF7FEFF 		bl	keccak_absorb
 2408              	.LVL199:
 848:fips202.c     **** #ifdef PROFILE_HASHING
 849:fips202.c     ****   uint64_t t1 = hal_get_time();
 850:fips202.c     ****   hash_cycles += (t1-t0);
 851:fips202.c     **** #endif
 852:fips202.c     **** }
 2409              		.loc 1 852 1 is_stmt 0 view .LVU493
 2410 0062 04B0     		add	sp, sp, #16
 2411              	.LCFI46:
 2412              		.cfi_def_cfa_offset 24
 2413              		@ sp needed
 2414 0064 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2415              		.loc 1 852 1 view .LVU494
 2416              		.cfi_endproc
 2417              	.LFE51:
 2419              		.section	.text.cshake256_simple_squeezeblocks,"ax",%progbits
 2420              		.align	1
 2421              		.global	cshake256_simple_squeezeblocks
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu softvfp
 2427              	cshake256_simple_squeezeblocks:
 2428              	.LFB79:
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 0
 2431              		@ frame_needed = 0, uses_anonymous_args = 0
 2432              		@ link register save eliminated.
 2433 0000 FFF7FEBF 		b	shake256_squeezeblocks
 2434              		.cfi_endproc
 2435              	.LFE79:
 2437              		.section	.text.cshake256_simple,"ax",%progbits
 2438              		.align	1
 2439              		.global	cshake256_simple
 2440              		.syntax unified
 2441              		.thumb
 2442              		.thumb_func
 2443              		.fpu softvfp
 2445              	cshake256_simple:
 2446              	.LVL200:
 2447              	.LFB53:
 853:fips202.c     **** 
 854:fips202.c     **** 
 855:fips202.c     **** void cshake256_simple_squeezeblocks(uint8_t *output, size_t nblocks, shake256ctx *state)
 856:fips202.c     **** {
 857:fips202.c     **** #ifdef PROFILE_HASHING
 858:fips202.c     ****   uint64_t t0 = hal_get_time();
 859:fips202.c     **** #endif
 860:fips202.c     ****   keccak_squeezeblocks(output, nblocks, state->ctx, SHAKE256_RATE);
 861:fips202.c     **** #ifdef PROFILE_HASHING
 862:fips202.c     ****   uint64_t t1 = hal_get_time();
 863:fips202.c     ****   hash_cycles += (t1-t0);
 864:fips202.c     **** #endif
 865:fips202.c     **** }
 866:fips202.c     **** 
 867:fips202.c     **** 
 868:fips202.c     **** void cshake256_simple(uint8_t *output, size_t outlen, uint16_t cstm, const uint8_t *in, size_t inle
 869:fips202.c     **** {
 2448              		.loc 1 869 1 is_stmt 1 view -0
 2449              		.cfi_startproc
 2450              		@ args = 4, pretend = 0, frame = 216
 2451              		@ frame_needed = 0, uses_anonymous_args = 0
 870:fips202.c     ****   shake256incctx state;
 2452              		.loc 1 870 3 view .LVU496
 871:fips202.c     ****   uint8_t sep[8];
 2453              		.loc 1 871 3 view .LVU497
 872:fips202.c     ****   #ifdef PROFILE_HASHING
 873:fips202.c     ****     uint64_t t0 = hal_get_time();
 874:fips202.c     ****   #endif
 875:fips202.c     **** 
 876:fips202.c     **** 
 877:fips202.c     ****   keccak_inc_init(state.ctx);
 2454              		.loc 1 877 3 view .LVU498
 869:fips202.c     ****   shake256incctx state;
 2455              		.loc 1 869 1 is_stmt 0 view .LVU499
 2456 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2457              	.LCFI47:
 2458              		.cfi_def_cfa_offset 24
 2459              		.cfi_offset 4, -24
 2460              		.cfi_offset 5, -20
 2461              		.cfi_offset 6, -16
 2462              		.cfi_offset 7, -12
 2463              		.cfi_offset 8, -8
 2464              		.cfi_offset 14, -4
 2465 0004 B6B0     		sub	sp, sp, #216
 2466              	.LCFI48:
 2467              		.cfi_def_cfa_offset 240
 869:fips202.c     ****   shake256incctx state;
 2468              		.loc 1 869 1 view .LVU500
 2469 0006 0646     		mov	r6, r0
 2470              		.loc 1 877 3 view .LVU501
 2471 0008 02A8     		add	r0, sp, #8
 2472              	.LVL201:
 869:fips202.c     ****   shake256incctx state;
 2473              		.loc 1 869 1 view .LVU502
 2474 000a 0F46     		mov	r7, r1
 2475 000c 1446     		mov	r4, r2
 2476 000e 9846     		mov	r8, r3
 2477              		.loc 1 877 3 view .LVU503
 2478 0010 FFF7FEFF 		bl	keccak_inc_init
 2479              	.LVL202:
 878:fips202.c     **** 
 879:fips202.c     ****   /* Absorb customization (domain-separation) string */
 880:fips202.c     ****   sep[0] = 0x01;
 2480              		.loc 1 880 3 is_stmt 1 view .LVU504
 2481              		.loc 1 880 10 is_stmt 0 view .LVU505
 2482 0014 0123     		movs	r3, #1
 2483 0016 8DF80030 		strb	r3, [sp]
 881:fips202.c     ****   sep[1] = 0x88;
 2484              		.loc 1 881 3 is_stmt 1 view .LVU506
 882:fips202.c     ****   sep[2] = 0x01;
 2485              		.loc 1 882 10 is_stmt 0 view .LVU507
 2486 001a 8DF80230 		strb	r3, [sp, #2]
 883:fips202.c     ****   sep[3] = 0x00;
 884:fips202.c     ****   sep[4] = 0x01;
 2487              		.loc 1 884 10 view .LVU508
 2488 001e 8DF80430 		strb	r3, [sp, #4]
 885:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 2489              		.loc 1 885 10 view .LVU509
 2490 0022 1023     		movs	r3, #16
 2491 0024 8DF80530 		strb	r3, [sp, #5]
 886:fips202.c     ****   sep[6] = cstm & 0xff;
 887:fips202.c     ****   sep[7] = cstm >> 8;
 888:fips202.c     **** 
 889:fips202.c     ****   KeccakF1600_StateXORBytes(state.ctx, sep, 0, 8);
 2492              		.loc 1 889 3 view .LVU510
 2493 0028 0823     		movs	r3, #8
 881:fips202.c     ****   sep[2] = 0x01;
 2494              		.loc 1 881 10 view .LVU511
 2495 002a 8825     		movs	r5, #136
 2496              		.loc 1 889 3 view .LVU512
 2497 002c 0DEB0300 		add	r0, sp, r3
 883:fips202.c     ****   sep[4] = 0x01;
 2498              		.loc 1 883 10 view .LVU513
 2499 0030 0022     		movs	r2, #0
 2500              		.loc 1 889 3 view .LVU514
 2501 0032 6946     		mov	r1, sp
 886:fips202.c     ****   sep[6] = cstm & 0xff;
 2502              		.loc 1 886 10 view .LVU515
 2503 0034 8DF80640 		strb	r4, [sp, #6]
 887:fips202.c     **** 
 2504              		.loc 1 887 10 view .LVU516
 2505 0038 240A     		lsrs	r4, r4, #8
 883:fips202.c     ****   sep[4] = 0x01;
 2506              		.loc 1 883 10 view .LVU517
 2507 003a 8DF80320 		strb	r2, [sp, #3]
 881:fips202.c     ****   sep[2] = 0x01;
 2508              		.loc 1 881 10 view .LVU518
 2509 003e 8DF80150 		strb	r5, [sp, #1]
 882:fips202.c     ****   sep[3] = 0x00;
 2510              		.loc 1 882 3 is_stmt 1 view .LVU519
 883:fips202.c     ****   sep[4] = 0x01;
 2511              		.loc 1 883 3 view .LVU520
 884:fips202.c     ****   sep[5] = 16; // fixed bitlen of cstm
 2512              		.loc 1 884 3 view .LVU521
 885:fips202.c     ****   sep[6] = cstm & 0xff;
 2513              		.loc 1 885 3 view .LVU522
 886:fips202.c     ****   sep[7] = cstm >> 8;
 2514              		.loc 1 886 3 view .LVU523
 887:fips202.c     **** 
 2515              		.loc 1 887 3 view .LVU524
 887:fips202.c     **** 
 2516              		.loc 1 887 10 is_stmt 0 view .LVU525
 2517 0042 8DF80740 		strb	r4, [sp, #7]
 2518              		.loc 1 889 3 is_stmt 1 view .LVU526
 2519 0046 FFF7FEFF 		bl	KeccakF1600_StateXORBytes
 2520              	.LVL203:
 890:fips202.c     ****   KeccakF1600_StatePermute(state.ctx);
 2521              		.loc 1 890 3 view .LVU527
 2522 004a 02A8     		add	r0, sp, #8
 2523 004c FFF7FEFF 		bl	KeccakF1600_StatePermute
 2524              	.LVL204:
 891:fips202.c     **** 
 892:fips202.c     ****   /* Absorb input */
 893:fips202.c     ****   keccak_inc_absorb(state.ctx, SHAKE256_RATE, in, inlen);
 2525              		.loc 1 893 3 view .LVU528
 2526 0050 3C9B     		ldr	r3, [sp, #240]
 2527 0052 4246     		mov	r2, r8
 2528 0054 2946     		mov	r1, r5
 2529 0056 02A8     		add	r0, sp, #8
 2530 0058 FFF7FEFF 		bl	keccak_inc_absorb
 2531              	.LVL205:
 894:fips202.c     ****   keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x04);
 2532              		.loc 1 894 3 view .LVU529
 2533 005c 2946     		mov	r1, r5
 2534 005e 02A8     		add	r0, sp, #8
 2535 0060 0422     		movs	r2, #4
 2536 0062 FFF7FEFF 		bl	keccak_inc_finalize
 2537              	.LVL206:
 895:fips202.c     **** 
 896:fips202.c     ****   /* Squeeze output */
 897:fips202.c     ****   keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 2538              		.loc 1 897 3 view .LVU530
 2539 0066 2B46     		mov	r3, r5
 2540 0068 02AA     		add	r2, sp, #8
 2541 006a 3946     		mov	r1, r7
 2542 006c 3046     		mov	r0, r6
 2543 006e FFF7FEFF 		bl	keccak_inc_squeeze
 2544              	.LVL207:
 898:fips202.c     **** #ifdef PROFILE_HASHING
 899:fips202.c     ****   uint64_t t1 = hal_get_time();
 900:fips202.c     ****   hash_cycles += (t1-t0);
 901:fips202.c     **** #endif
 902:fips202.c     **** }
 2545              		.loc 1 902 1 is_stmt 0 view .LVU531
 2546 0072 36B0     		add	sp, sp, #216
 2547              	.LCFI49:
 2548              		.cfi_def_cfa_offset 24
 2549              		@ sp needed
 2550 0074 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2551              		.loc 1 902 1 view .LVU532
 2552              		.cfi_endproc
 2553              	.LFE53:
 2555              		.text
 2556              	.Letext0:
 2557              		.file 2 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\lib\\gcc\\arm-none-eabi\\
 2558              		.file 3 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\m
 2559              		.file 4 "d:\\cw_software\\chipwhisperer5_64\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\s
 2560              		.file 5 "fips202.h"
 2561              		.file 6 "keccakf1600.h"
 2562              		.file 7 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 fips202.c
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:16     .text.keccak_inc_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:23     .text.keccak_inc_init:00000000 keccak_inc_init
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:60     .text.keccak_inc_finalize:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:66     .text.keccak_inc_finalize:00000000 keccak_inc_finalize
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:149    .text.keccak_inc_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:155    .text.keccak_inc_absorb:00000000 keccak_inc_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:244    .text.keccak_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:250    .text.keccak_absorb:00000000 keccak_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:355    .text.keccak_inc_squeeze:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:361    .text.keccak_inc_squeeze:00000000 keccak_inc_squeeze
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:476    .text.keccak_squeezeblocks:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:482    .text.keccak_squeezeblocks:00000000 keccak_squeezeblocks
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:537    .text.shake128_inc_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:544    .text.shake128_inc_init:00000000 shake128_inc_init
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:560    .text.shake128_inc_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:567    .text.shake128_inc_absorb:00000000 shake128_inc_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:592    .text.shake128_inc_finalize:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:599    .text.shake128_inc_finalize:00000000 shake128_inc_finalize
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:617    .text.shake128_inc_squeeze:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:624    .text.shake128_inc_squeeze:00000000 shake128_inc_squeeze
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:641    .text.shake128_inc_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:648    .text.shake128_inc_ctx_clone:00000000 shake128_inc_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:665    .text.shake128_inc_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:672    .text.shake128_inc_ctx_release:00000000 shake128_inc_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:683    .text.shake256_inc_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:690    .text.shake256_inc_init:00000000 shake256_inc_init
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:706    .text.shake256_inc_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:713    .text.shake256_inc_absorb:00000000 shake256_inc_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:738    .text.shake256_inc_finalize:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:745    .text.shake256_inc_finalize:00000000 shake256_inc_finalize
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:763    .text.shake256_inc_squeeze:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:770    .text.shake256_inc_squeeze:00000000 shake256_inc_squeeze
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:787    .text.shake256_inc_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:794    .text.shake256_inc_ctx_clone:00000000 shake256_inc_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:805    .text.shake256_inc_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:812    .text.shake256_inc_ctx_release:00000000 shake256_inc_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:823    .text.cshake128_simple_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:830    .text.cshake128_simple_absorb:00000000 cshake128_simple_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:930    .text.cshake128_simple:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:937    .text.cshake128_simple:00000000 cshake128_simple
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1048   .text.shake128_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1055   .text.shake128_absorb:00000000 shake128_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1107   .text.shake128_squeezeblocks:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1114   .text.shake128_squeezeblocks:00000000 shake128_squeezeblocks
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1131   .text.cshake128_simple_squeezeblocks:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1138   .text.cshake128_simple_squeezeblocks:00000000 cshake128_simple_squeezeblocks
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1149   .text.shake128:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1156   .text.shake128:00000000 shake128
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1220   .text.shake128_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1227   .text.shake128_ctx_release:00000000 shake128_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1242   .text.shake128_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1249   .text.shake128_ctx_clone:00000000 shake128_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1266   .text.shake256_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1273   .text.shake256_absorb:00000000 shake256_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1325   .text.shake256_squeezeblocks:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1332   .text.shake256_squeezeblocks:00000000 shake256_squeezeblocks
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1349   .text.shake256:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1356   .text.shake256:00000000 shake256
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1420   .text.shake2561:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1427   .text.shake2561:00000000 shake2561
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1566   .text.shake256_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1573   .text.shake256_ctx_release:00000000 shake256_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1584   .text.shake256_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1591   .text.shake256_ctx_clone:00000000 shake256_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1602   .text.sha3_256:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1609   .text.sha3_256:00000000 sha3_256
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1670   .text.sha3_256_inc_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1677   .text.sha3_256_inc_init:00000000 sha3_256_inc_init
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1693   .text.sha3_256_inc_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1700   .text.sha3_256_inc_absorb:00000000 sha3_256_inc_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1725   .text.sha3_256_inc_finalize:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1732   .text.sha3_256_inc_finalize:00000000 sha3_256_inc_finalize
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1803   .text.sha3_256_inc_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1810   .text.sha3_256_inc_ctx_clone:00000000 sha3_256_inc_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1821   .text.sha3_256_inc_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1828   .text.sha3_256_inc_ctx_release:00000000 sha3_256_inc_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1839   .text.sha3_384_inc_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1846   .text.sha3_384_inc_init:00000000 sha3_384_inc_init
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1862   .text.sha3_384_inc_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1869   .text.sha3_384_inc_absorb:00000000 sha3_384_inc_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1894   .text.sha3_384_inc_finalize:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1901   .text.sha3_384_inc_finalize:00000000 sha3_384_inc_finalize
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1972   .text.sha3_384_inc_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1979   .text.sha3_384_inc_ctx_clone:00000000 sha3_384_inc_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1990   .text.sha3_384_inc_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:1997   .text.sha3_384_inc_ctx_release:00000000 sha3_384_inc_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2008   .text.sha3_384:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2015   .text.sha3_384:00000000 sha3_384
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2076   .text.sha3_512:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2083   .text.sha3_512:00000000 sha3_512
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2144   .text.sha3_512_inc_init:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2151   .text.sha3_512_inc_init:00000000 sha3_512_inc_init
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2167   .text.sha3_512_inc_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2174   .text.sha3_512_inc_absorb:00000000 sha3_512_inc_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2199   .text.sha3_512_inc_finalize:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2206   .text.sha3_512_inc_finalize:00000000 sha3_512_inc_finalize
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2277   .text.sha3_512_inc_ctx_clone:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2284   .text.sha3_512_inc_ctx_clone:00000000 sha3_512_inc_ctx_clone
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2295   .text.sha3_512_inc_ctx_release:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2302   .text.sha3_512_inc_ctx_release:00000000 sha3_512_inc_ctx_release
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2313   .text.cshake256_simple_absorb:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2320   .text.cshake256_simple_absorb:00000000 cshake256_simple_absorb
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2420   .text.cshake256_simple_squeezeblocks:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2427   .text.cshake256_simple_squeezeblocks:00000000 cshake256_simple_squeezeblocks
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2438   .text.cshake256_simple:00000000 $t
C:\Users\dudixiao\AppData\Local\Temp\ccpg9ESP.s:2445   .text.cshake256_simple:00000000 cshake256_simple

UNDEFINED SYMBOLS
memset
KeccakF1600_StateXORBytes
KeccakF1600_StatePermute
KeccakF1600_StateExtractBytes
memcpy
KeccakF1600_StateXORBytes1
