
PQCgenKAT_sign-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  080043b8  080043b8  000143b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005178  08005178  00020844  2**0
                  CONTENTS
  4 .ARM          00000000  08005178  08005178  00020844  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005178  08005178  00020844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005178  08005178  00015178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000844  10000000  08005184  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  10000844  080059c8  00020844  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  10000f48  080059c8  00020f48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3bb  00000000  00000000  00020872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f84  00000000  00000000  0002cc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00009880  00000000  00000000  0002ebb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00038431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  00038b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f91  00000000  00000000  00039439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002a24  00000000  00000000  000413ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  00043dee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000195c  00000000  00000000  00043e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00001494  00000000  00000000  00045958  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001bd  00000000  00000000  00045798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	10000844 	.word	0x10000844
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043a0 	.word	0x080043a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	10000848 	.word	0x10000848
 80001c4:	080043a0 	.word	0x080043a0
 80001c8:	fb20 0000 	smlad	r0, r0, r0, r0

080001cc <pqcrystals_dilithium_ntt>:
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d0:	f8df 29f0 	ldr.w	r2, [pc, #2544]	; 8000bc4 <inv_ntt_asm_smull_qinv>
 80001d4:	f8df 39f0 	ldr.w	r3, [pc, #2544]	; 8000bc8 <inv_ntt_asm_smull_q>
 80001d8:	f8df 15b4 	ldr.w	r1, [pc, #1460]	; 8000790 <pqcrystals_dilithium_ntt+0x5c4>
 80001dc:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 80001e0:	ee00 1a10 	vmov	s0, r1
 80001e4:	f100 0a80 	add.w	sl, r0, #128	; 0x80
 80001e8:	ee04 aa90 	vmov	s9, sl
 80001ec:	f8d0 5000 	ldr.w	r5, [r0]
 80001f0:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80001f4:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 80001f8:	f8d0 8180 	ldr.w	r8, [r0, #384]	; 0x180
 80001fc:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8000200:	f8d0 b280 	ldr.w	fp, [r0, #640]	; 0x280
 8000204:	f8d0 c300 	ldr.w	ip, [r0, #768]	; 0x300
 8000208:	f8d0 e380 	ldr.w	lr, [r0, #896]	; 0x380
 800020c:	ee11 1a10 	vmov	r1, s2
 8000210:	fb84 9401 	smull	r9, r4, r4, r1
 8000214:	fb09 fa02 	mul.w	sl, r9, r2
 8000218:	fbca 9403 	smlal	r9, r4, sl, r3
 800021c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000220:	fb09 fa02 	mul.w	sl, r9, r2
 8000224:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000228:	fb8c 9c01 	smull	r9, ip, ip, r1
 800022c:	fb09 fa02 	mul.w	sl, r9, r2
 8000230:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000234:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000238:	fb09 fa02 	mul.w	sl, r9, r2
 800023c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000240:	4425      	add	r5, r4
 8000242:	445e      	add	r6, fp
 8000244:	4467      	add	r7, ip
 8000246:	44f0      	add	r8, lr
 8000248:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 800024c:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000250:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000254:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000258:	ee11 1a90 	vmov	r1, s3
 800025c:	fb87 9701 	smull	r9, r7, r7, r1
 8000260:	fb09 fa02 	mul.w	sl, r9, r2
 8000264:	fbca 9703 	smlal	r9, r7, sl, r3
 8000268:	fb88 9801 	smull	r9, r8, r8, r1
 800026c:	fb09 fa02 	mul.w	sl, r9, r2
 8000270:	fbca 9803 	smlal	r9, r8, sl, r3
 8000274:	ee12 1a10 	vmov	r1, s4
 8000278:	fb8c 9c01 	smull	r9, ip, ip, r1
 800027c:	fb09 fa02 	mul.w	sl, r9, r2
 8000280:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000284:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000288:	fb09 fa02 	mul.w	sl, r9, r2
 800028c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000290:	443d      	add	r5, r7
 8000292:	4446      	add	r6, r8
 8000294:	4464      	add	r4, ip
 8000296:	44f3      	add	fp, lr
 8000298:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800029c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80002a0:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80002a4:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80002a8:	ee12 1a90 	vmov	r1, s5
 80002ac:	fb86 9601 	smull	r9, r6, r6, r1
 80002b0:	fb09 fa02 	mul.w	sl, r9, r2
 80002b4:	fbca 9603 	smlal	r9, r6, sl, r3
 80002b8:	ee13 1a10 	vmov	r1, s6
 80002bc:	fb88 9801 	smull	r9, r8, r8, r1
 80002c0:	fb09 fa02 	mul.w	sl, r9, r2
 80002c4:	fbca 9803 	smlal	r9, r8, sl, r3
 80002c8:	ee13 1a90 	vmov	r1, s7
 80002cc:	fb8b 9b01 	smull	r9, fp, fp, r1
 80002d0:	fb09 fa02 	mul.w	sl, r9, r2
 80002d4:	fbca 9b03 	smlal	r9, fp, sl, r3
 80002d8:	ee14 1a10 	vmov	r1, s8
 80002dc:	fb8e 9e01 	smull	r9, lr, lr, r1
 80002e0:	fb09 fa02 	mul.w	sl, r9, r2
 80002e4:	fbca 9e03 	smlal	r9, lr, sl, r3
 80002e8:	4435      	add	r5, r6
 80002ea:	4447      	add	r7, r8
 80002ec:	445c      	add	r4, fp
 80002ee:	44f4      	add	ip, lr
 80002f0:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80002f4:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80002f8:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80002fc:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000300:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8000304:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
 8000308:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
 800030c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 8000310:	f8c0 b280 	str.w	fp, [r0, #640]	; 0x280
 8000314:	f8c0 c300 	str.w	ip, [r0, #768]	; 0x300
 8000318:	f8c0 e380 	str.w	lr, [r0, #896]	; 0x380
 800031c:	f840 5b04 	str.w	r5, [r0], #4
 8000320:	f8d0 5000 	ldr.w	r5, [r0]
 8000324:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8000328:	f8d0 7100 	ldr.w	r7, [r0, #256]	; 0x100
 800032c:	f8d0 8180 	ldr.w	r8, [r0, #384]	; 0x180
 8000330:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8000334:	f8d0 b280 	ldr.w	fp, [r0, #640]	; 0x280
 8000338:	f8d0 c300 	ldr.w	ip, [r0, #768]	; 0x300
 800033c:	f8d0 e380 	ldr.w	lr, [r0, #896]	; 0x380
 8000340:	ee11 1a10 	vmov	r1, s2
 8000344:	fb84 9401 	smull	r9, r4, r4, r1
 8000348:	fb09 fa02 	mul.w	sl, r9, r2
 800034c:	fbca 9403 	smlal	r9, r4, sl, r3
 8000350:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000354:	fb09 fa02 	mul.w	sl, r9, r2
 8000358:	fbca 9b03 	smlal	r9, fp, sl, r3
 800035c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000360:	fb09 fa02 	mul.w	sl, r9, r2
 8000364:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000368:	fb8e 9e01 	smull	r9, lr, lr, r1
 800036c:	fb09 fa02 	mul.w	sl, r9, r2
 8000370:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000374:	4425      	add	r5, r4
 8000376:	445e      	add	r6, fp
 8000378:	4467      	add	r7, ip
 800037a:	44f0      	add	r8, lr
 800037c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000380:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000384:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000388:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800038c:	ee11 1a90 	vmov	r1, s3
 8000390:	fb87 9701 	smull	r9, r7, r7, r1
 8000394:	fb09 fa02 	mul.w	sl, r9, r2
 8000398:	fbca 9703 	smlal	r9, r7, sl, r3
 800039c:	fb88 9801 	smull	r9, r8, r8, r1
 80003a0:	fb09 fa02 	mul.w	sl, r9, r2
 80003a4:	fbca 9803 	smlal	r9, r8, sl, r3
 80003a8:	ee12 1a10 	vmov	r1, s4
 80003ac:	fb8c 9c01 	smull	r9, ip, ip, r1
 80003b0:	fb09 fa02 	mul.w	sl, r9, r2
 80003b4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80003b8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80003bc:	fb09 fa02 	mul.w	sl, r9, r2
 80003c0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80003c4:	443d      	add	r5, r7
 80003c6:	4446      	add	r6, r8
 80003c8:	4464      	add	r4, ip
 80003ca:	44f3      	add	fp, lr
 80003cc:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 80003d0:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 80003d4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80003d8:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 80003dc:	ee12 1a90 	vmov	r1, s5
 80003e0:	fb86 9601 	smull	r9, r6, r6, r1
 80003e4:	fb09 fa02 	mul.w	sl, r9, r2
 80003e8:	fbca 9603 	smlal	r9, r6, sl, r3
 80003ec:	ee13 1a10 	vmov	r1, s6
 80003f0:	fb88 9801 	smull	r9, r8, r8, r1
 80003f4:	fb09 fa02 	mul.w	sl, r9, r2
 80003f8:	fbca 9803 	smlal	r9, r8, sl, r3
 80003fc:	ee13 1a90 	vmov	r1, s7
 8000400:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000404:	fb09 fa02 	mul.w	sl, r9, r2
 8000408:	fbca 9b03 	smlal	r9, fp, sl, r3
 800040c:	ee14 1a10 	vmov	r1, s8
 8000410:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000414:	fb09 fa02 	mul.w	sl, r9, r2
 8000418:	fbca 9e03 	smlal	r9, lr, sl, r3
 800041c:	4435      	add	r5, r6
 800041e:	4447      	add	r7, r8
 8000420:	445c      	add	r4, fp
 8000422:	44f4      	add	ip, lr
 8000424:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000428:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800042c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000430:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000434:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8000438:	f8c0 7100 	str.w	r7, [r0, #256]	; 0x100
 800043c:	f8c0 8180 	str.w	r8, [r0, #384]	; 0x180
 8000440:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
 8000444:	f8c0 b280 	str.w	fp, [r0, #640]	; 0x280
 8000448:	f8c0 c300 	str.w	ip, [r0, #768]	; 0x300
 800044c:	f8c0 e380 	str.w	lr, [r0, #896]	; 0x380
 8000450:	f840 5b04 	str.w	r5, [r0], #4
 8000454:	ee14 aa90 	vmov	sl, s9
 8000458:	ebb0 0f0a 	cmp.w	r0, sl
 800045c:	f47f aec6 	bne.w	80001ec <pqcrystals_dilithium_ntt+0x20>
 8000460:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 8000464:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8000468:	ee04 aa90 	vmov	s9, sl
 800046c:	f100 0a10 	add.w	sl, r0, #16
 8000470:	ee05 aa10 	vmov	s10, sl
 8000474:	ee10 1a10 	vmov	r1, s0
 8000478:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 800047c:	ee00 1a10 	vmov	s0, r1
 8000480:	f8d0 5000 	ldr.w	r5, [r0]
 8000484:	f8d0 6010 	ldr.w	r6, [r0, #16]
 8000488:	f8d0 7020 	ldr.w	r7, [r0, #32]
 800048c:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 8000490:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 8000494:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
 8000498:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 800049c:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
 80004a0:	ee11 1a10 	vmov	r1, s2
 80004a4:	fb84 9401 	smull	r9, r4, r4, r1
 80004a8:	fb09 fa02 	mul.w	sl, r9, r2
 80004ac:	fbca 9403 	smlal	r9, r4, sl, r3
 80004b0:	fb8b 9b01 	smull	r9, fp, fp, r1
 80004b4:	fb09 fa02 	mul.w	sl, r9, r2
 80004b8:	fbca 9b03 	smlal	r9, fp, sl, r3
 80004bc:	fb8c 9c01 	smull	r9, ip, ip, r1
 80004c0:	fb09 fa02 	mul.w	sl, r9, r2
 80004c4:	fbca 9c03 	smlal	r9, ip, sl, r3
 80004c8:	fb8e 9e01 	smull	r9, lr, lr, r1
 80004cc:	fb09 fa02 	mul.w	sl, r9, r2
 80004d0:	fbca 9e03 	smlal	r9, lr, sl, r3
 80004d4:	4425      	add	r5, r4
 80004d6:	445e      	add	r6, fp
 80004d8:	4467      	add	r7, ip
 80004da:	44f0      	add	r8, lr
 80004dc:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 80004e0:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 80004e4:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 80004e8:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 80004ec:	ee11 1a90 	vmov	r1, s3
 80004f0:	fb87 9701 	smull	r9, r7, r7, r1
 80004f4:	fb09 fa02 	mul.w	sl, r9, r2
 80004f8:	fbca 9703 	smlal	r9, r7, sl, r3
 80004fc:	fb88 9801 	smull	r9, r8, r8, r1
 8000500:	fb09 fa02 	mul.w	sl, r9, r2
 8000504:	fbca 9803 	smlal	r9, r8, sl, r3
 8000508:	ee12 1a10 	vmov	r1, s4
 800050c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000510:	fb09 fa02 	mul.w	sl, r9, r2
 8000514:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000518:	fb8e 9e01 	smull	r9, lr, lr, r1
 800051c:	fb09 fa02 	mul.w	sl, r9, r2
 8000520:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000524:	443d      	add	r5, r7
 8000526:	4446      	add	r6, r8
 8000528:	4464      	add	r4, ip
 800052a:	44f3      	add	fp, lr
 800052c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000530:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000534:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000538:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 800053c:	ee12 1a90 	vmov	r1, s5
 8000540:	fb86 9601 	smull	r9, r6, r6, r1
 8000544:	fb09 fa02 	mul.w	sl, r9, r2
 8000548:	fbca 9603 	smlal	r9, r6, sl, r3
 800054c:	ee13 1a10 	vmov	r1, s6
 8000550:	fb88 9801 	smull	r9, r8, r8, r1
 8000554:	fb09 fa02 	mul.w	sl, r9, r2
 8000558:	fbca 9803 	smlal	r9, r8, sl, r3
 800055c:	ee13 1a90 	vmov	r1, s7
 8000560:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000564:	fb09 fa02 	mul.w	sl, r9, r2
 8000568:	fbca 9b03 	smlal	r9, fp, sl, r3
 800056c:	ee14 1a10 	vmov	r1, s8
 8000570:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000574:	fb09 fa02 	mul.w	sl, r9, r2
 8000578:	fbca 9e03 	smlal	r9, lr, sl, r3
 800057c:	4435      	add	r5, r6
 800057e:	4447      	add	r7, r8
 8000580:	445c      	add	r4, fp
 8000582:	44f4      	add	ip, lr
 8000584:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000588:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800058c:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000590:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000594:	f8c0 6010 	str.w	r6, [r0, #16]
 8000598:	f8c0 7020 	str.w	r7, [r0, #32]
 800059c:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 80005a0:	f8c0 4040 	str.w	r4, [r0, #64]	; 0x40
 80005a4:	f8c0 b050 	str.w	fp, [r0, #80]	; 0x50
 80005a8:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 80005ac:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
 80005b0:	f840 5b04 	str.w	r5, [r0], #4
 80005b4:	f8d0 5000 	ldr.w	r5, [r0]
 80005b8:	f8d0 6010 	ldr.w	r6, [r0, #16]
 80005bc:	f8d0 7020 	ldr.w	r7, [r0, #32]
 80005c0:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
 80005c4:	f8d0 4040 	ldr.w	r4, [r0, #64]	; 0x40
 80005c8:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
 80005cc:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
 80005d0:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
 80005d4:	ee11 1a10 	vmov	r1, s2
 80005d8:	fb84 9401 	smull	r9, r4, r4, r1
 80005dc:	fb09 fa02 	mul.w	sl, r9, r2
 80005e0:	fbca 9403 	smlal	r9, r4, sl, r3
 80005e4:	fb8b 9b01 	smull	r9, fp, fp, r1
 80005e8:	fb09 fa02 	mul.w	sl, r9, r2
 80005ec:	fbca 9b03 	smlal	r9, fp, sl, r3
 80005f0:	fb8c 9c01 	smull	r9, ip, ip, r1
 80005f4:	fb09 fa02 	mul.w	sl, r9, r2
 80005f8:	fbca 9c03 	smlal	r9, ip, sl, r3
 80005fc:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000600:	fb09 fa02 	mul.w	sl, r9, r2
 8000604:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000608:	4425      	add	r5, r4
 800060a:	445e      	add	r6, fp
 800060c:	4467      	add	r7, ip
 800060e:	44f0      	add	r8, lr
 8000610:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000614:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000618:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 800061c:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000620:	ee11 1a90 	vmov	r1, s3
 8000624:	fb87 9701 	smull	r9, r7, r7, r1
 8000628:	fb09 fa02 	mul.w	sl, r9, r2
 800062c:	fbca 9703 	smlal	r9, r7, sl, r3
 8000630:	fb88 9801 	smull	r9, r8, r8, r1
 8000634:	fb09 fa02 	mul.w	sl, r9, r2
 8000638:	fbca 9803 	smlal	r9, r8, sl, r3
 800063c:	ee12 1a10 	vmov	r1, s4
 8000640:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000644:	fb09 fa02 	mul.w	sl, r9, r2
 8000648:	fbca 9c03 	smlal	r9, ip, sl, r3
 800064c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000650:	fb09 fa02 	mul.w	sl, r9, r2
 8000654:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000658:	443d      	add	r5, r7
 800065a:	4446      	add	r6, r8
 800065c:	4464      	add	r4, ip
 800065e:	44f3      	add	fp, lr
 8000660:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000664:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000668:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 800066c:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000670:	ee12 1a90 	vmov	r1, s5
 8000674:	fb86 9601 	smull	r9, r6, r6, r1
 8000678:	fb09 fa02 	mul.w	sl, r9, r2
 800067c:	fbca 9603 	smlal	r9, r6, sl, r3
 8000680:	ee13 1a10 	vmov	r1, s6
 8000684:	fb88 9801 	smull	r9, r8, r8, r1
 8000688:	fb09 fa02 	mul.w	sl, r9, r2
 800068c:	fbca 9803 	smlal	r9, r8, sl, r3
 8000690:	ee13 1a90 	vmov	r1, s7
 8000694:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000698:	fb09 fa02 	mul.w	sl, r9, r2
 800069c:	fbca 9b03 	smlal	r9, fp, sl, r3
 80006a0:	ee14 1a10 	vmov	r1, s8
 80006a4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80006a8:	fb09 fa02 	mul.w	sl, r9, r2
 80006ac:	fbca 9e03 	smlal	r9, lr, sl, r3
 80006b0:	4435      	add	r5, r6
 80006b2:	4447      	add	r7, r8
 80006b4:	445c      	add	r4, fp
 80006b6:	44f4      	add	ip, lr
 80006b8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80006bc:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 80006c0:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 80006c4:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 80006c8:	f8c0 6010 	str.w	r6, [r0, #16]
 80006cc:	f8c0 7020 	str.w	r7, [r0, #32]
 80006d0:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
 80006d4:	f8c0 4040 	str.w	r4, [r0, #64]	; 0x40
 80006d8:	f8c0 b050 	str.w	fp, [r0, #80]	; 0x50
 80006dc:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
 80006e0:	f8c0 e070 	str.w	lr, [r0, #112]	; 0x70
 80006e4:	f840 5b04 	str.w	r5, [r0], #4
 80006e8:	ee15 aa10 	vmov	sl, s10
 80006ec:	ebb0 0f0a 	cmp.w	r0, sl
 80006f0:	f47f aec6 	bne.w	8000480 <pqcrystals_dilithium_ntt+0x2b4>
 80006f4:	f100 0070 	add.w	r0, r0, #112	; 0x70
 80006f8:	ee14 aa90 	vmov	sl, s9
 80006fc:	ebb0 0f0a 	cmp.w	r0, sl
 8000700:	f47f aeb4 	bne.w	800046c <pqcrystals_dilithium_ntt+0x2a0>
 8000704:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000708:	ee10 1a10 	vmov	r1, s0
 800070c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8000710:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8000714:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000718:	f851 bb0c 	ldr.w	fp, [r1], #12
 800071c:	f8d0 5000 	ldr.w	r5, [r0]
 8000720:	f8d0 6004 	ldr.w	r6, [r0, #4]
 8000724:	f8d0 7008 	ldr.w	r7, [r0, #8]
 8000728:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800072c:	fb87 970b 	smull	r9, r7, r7, fp
 8000730:	fb09 fa02 	mul.w	sl, r9, r2
 8000734:	fbca 9703 	smlal	r9, r7, sl, r3
 8000738:	fb88 980b 	smull	r9, r8, r8, fp
 800073c:	fb09 fa02 	mul.w	sl, r9, r2
 8000740:	fbca 9803 	smlal	r9, r8, sl, r3
 8000744:	443d      	add	r5, r7
 8000746:	4446      	add	r6, r8
 8000748:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 800074c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000750:	fb86 960c 	smull	r9, r6, r6, ip
 8000754:	fb09 fa02 	mul.w	sl, r9, r2
 8000758:	fbca 9603 	smlal	r9, r6, sl, r3
 800075c:	fb88 980e 	smull	r9, r8, r8, lr
 8000760:	fb09 fa02 	mul.w	sl, r9, r2
 8000764:	fbca 9803 	smlal	r9, r8, sl, r3
 8000768:	4435      	add	r5, r6
 800076a:	4447      	add	r7, r8
 800076c:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000770:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000774:	f8c0 6004 	str.w	r6, [r0, #4]
 8000778:	f8c0 7008 	str.w	r7, [r0, #8]
 800077c:	f8c0 800c 	str.w	r8, [r0, #12]
 8000780:	f840 5b10 	str.w	r5, [r0], #16
 8000784:	ebb4 0f00 	cmp.w	r4, r0
 8000788:	f47f afc2 	bne.w	8000710 <pqcrystals_dilithium_ntt+0x544>
 800078c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000790:	080043b8 	.word	0x080043b8

08000794 <pqcrystals_dilithium_invntt_tomont>:
 8000794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000798:	f8df 2428 	ldr.w	r2, [pc, #1064]	; 8000bc4 <inv_ntt_asm_smull_qinv>
 800079c:	f8df 3428 	ldr.w	r3, [pc, #1064]	; 8000bc8 <inv_ntt_asm_smull_q>
 80007a0:	f8df 1428 	ldr.w	r1, [pc, #1064]	; 8000bcc <inv_ntt_asm_smull_q+0x4>
 80007a4:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 80007a8:	ee00 1a10 	vmov	s0, r1
 80007ac:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 80007b0:	ee04 aa90 	vmov	s9, sl
 80007b4:	f8d0 4010 	ldr.w	r4, [r0, #16]
 80007b8:	f8d0 6014 	ldr.w	r6, [r0, #20]
 80007bc:	f8d0 c018 	ldr.w	ip, [r0, #24]
 80007c0:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80007c4:	4434      	add	r4, r6
 80007c6:	44c4      	add	ip, r8
 80007c8:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 80007cc:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 80007d0:	eb04 040c 	add.w	r4, r4, ip
 80007d4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80007d8:	ee13 9a10 	vmov	r9, s6
 80007dc:	ee14 aa10 	vmov	sl, s8
 80007e0:	fb86 5b09 	smull	r5, fp, r6, r9
 80007e4:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 80007e8:	fb05 f102 	mul.w	r1, r5, r2
 80007ec:	fbc1 5b03 	smlal	r5, fp, r1, r3
 80007f0:	fb86 7e0a 	smull	r7, lr, r6, sl
 80007f4:	fbc8 7e09 	smlal	r7, lr, r8, r9
 80007f8:	fb07 f102 	mul.w	r1, r7, r2
 80007fc:	fbc1 7e03 	smlal	r7, lr, r1, r3
 8000800:	f8d0 5000 	ldr.w	r5, [r0]
 8000804:	f8d0 6004 	ldr.w	r6, [r0, #4]
 8000808:	f8d0 7008 	ldr.w	r7, [r0, #8]
 800080c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000810:	4435      	add	r5, r6
 8000812:	4447      	add	r7, r8
 8000814:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000818:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800081c:	ee12 1a10 	vmov	r1, s4
 8000820:	fb88 9801 	smull	r9, r8, r8, r1
 8000824:	fb09 fa02 	mul.w	sl, r9, r2
 8000828:	fbca 9803 	smlal	r9, r8, sl, r3
 800082c:	443d      	add	r5, r7
 800082e:	4446      	add	r6, r8
 8000830:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000834:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000838:	fb8c 9c01 	smull	r9, ip, ip, r1
 800083c:	fb09 fa02 	mul.w	sl, r9, r2
 8000840:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000844:	4425      	add	r5, r4
 8000846:	445e      	add	r6, fp
 8000848:	4467      	add	r7, ip
 800084a:	44f0      	add	r8, lr
 800084c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000850:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000854:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000858:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800085c:	f8c0 6004 	str.w	r6, [r0, #4]
 8000860:	f8c0 7008 	str.w	r7, [r0, #8]
 8000864:	f8c0 800c 	str.w	r8, [r0, #12]
 8000868:	f8c0 4010 	str.w	r4, [r0, #16]
 800086c:	f8c0 b014 	str.w	fp, [r0, #20]
 8000870:	f8c0 c018 	str.w	ip, [r0, #24]
 8000874:	f8c0 e01c 	str.w	lr, [r0, #28]
 8000878:	f840 5b20 	str.w	r5, [r0], #32
 800087c:	ee14 aa90 	vmov	sl, s9
 8000880:	ebb0 0f0a 	cmp.w	r0, sl
 8000884:	f47f af96 	bne.w	80007b4 <pqcrystals_dilithium_invntt_tomont+0x20>
 8000888:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 800088c:	f240 0a04 	movw	sl, #4
 8000890:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 8000894:	ee05 aa10 	vmov	s10, sl
 8000898:	ee10 1a10 	vmov	r1, s0
 800089c:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 80008a0:	ee00 1a10 	vmov	s0, r1
 80008a4:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 80008a8:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 80008ac:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	; 0xc0
 80008b0:	f8d0 80e0 	ldr.w	r8, [r0, #224]	; 0xe0
 80008b4:	4434      	add	r4, r6
 80008b6:	44c4      	add	ip, r8
 80008b8:	eba4 0646 	sub.w	r6, r4, r6, lsl #1
 80008bc:	ebac 0848 	sub.w	r8, ip, r8, lsl #1
 80008c0:	eb04 040c 	add.w	r4, r4, ip
 80008c4:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 80008c8:	ee13 9a10 	vmov	r9, s6
 80008cc:	ee14 aa10 	vmov	sl, s8
 80008d0:	fb86 5b09 	smull	r5, fp, r6, r9
 80008d4:	fbc8 5b0a 	smlal	r5, fp, r8, sl
 80008d8:	fb05 f102 	mul.w	r1, r5, r2
 80008dc:	fbc1 5b03 	smlal	r5, fp, r1, r3
 80008e0:	fb86 7e0a 	smull	r7, lr, r6, sl
 80008e4:	fbc8 7e09 	smlal	r7, lr, r8, r9
 80008e8:	fb07 f102 	mul.w	r1, r7, r2
 80008ec:	fbc1 7e03 	smlal	r7, lr, r1, r3
 80008f0:	f8d0 5000 	ldr.w	r5, [r0]
 80008f4:	f8d0 6020 	ldr.w	r6, [r0, #32]
 80008f8:	f8d0 7040 	ldr.w	r7, [r0, #64]	; 0x40
 80008fc:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 8000900:	4435      	add	r5, r6
 8000902:	4447      	add	r7, r8
 8000904:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000908:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 800090c:	ee12 1a10 	vmov	r1, s4
 8000910:	fb88 9801 	smull	r9, r8, r8, r1
 8000914:	fb09 fa02 	mul.w	sl, r9, r2
 8000918:	fbca 9803 	smlal	r9, r8, sl, r3
 800091c:	443d      	add	r5, r7
 800091e:	4446      	add	r6, r8
 8000920:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000924:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000928:	fb8c 9c01 	smull	r9, ip, ip, r1
 800092c:	fb09 fa02 	mul.w	sl, r9, r2
 8000930:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000934:	4425      	add	r5, r4
 8000936:	445e      	add	r6, fp
 8000938:	4467      	add	r7, ip
 800093a:	44f0      	add	r8, lr
 800093c:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000940:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000944:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000948:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 800094c:	f8c0 6020 	str.w	r6, [r0, #32]
 8000950:	f8c0 7040 	str.w	r7, [r0, #64]	; 0x40
 8000954:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
 8000958:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800095c:	f8c0 b0a0 	str.w	fp, [r0, #160]	; 0xa0
 8000960:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 8000964:	f8c0 e0e0 	str.w	lr, [r0, #224]	; 0xe0
 8000968:	f8c0 5000 	str.w	r5, [r0]
 800096c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000970:	ee15 aa10 	vmov	sl, s10
 8000974:	ebba 0f00 	cmp.w	sl, r0
 8000978:	f47f af94 	bne.w	80008a4 <pqcrystals_dilithium_invntt_tomont+0x110>
 800097c:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
 8000980:	f100 0a1c 	add.w	sl, r0, #28
 8000984:	ee04 aa90 	vmov	s9, sl
 8000988:	f500 6a80 	add.w	sl, r0, #1024	; 0x400
 800098c:	ee05 aa10 	vmov	s10, sl
 8000990:	ee10 1a10 	vmov	r1, s0
 8000994:	ecb1 1a07 	vldmia	r1!, {s2-s8}
 8000998:	ee00 1a10 	vmov	s0, r1
 800099c:	f8d0 5000 	ldr.w	r5, [r0]
 80009a0:	f8d0 6020 	ldr.w	r6, [r0, #32]
 80009a4:	f8d0 7040 	ldr.w	r7, [r0, #64]	; 0x40
 80009a8:	f8d0 8060 	ldr.w	r8, [r0, #96]	; 0x60
 80009ac:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 80009b0:	f8d0 b0a0 	ldr.w	fp, [r0, #160]	; 0xa0
 80009b4:	f8d0 c0c0 	ldr.w	ip, [r0, #192]	; 0xc0
 80009b8:	f8d0 e0e0 	ldr.w	lr, [r0, #224]	; 0xe0
 80009bc:	ee11 1a10 	vmov	r1, s2
 80009c0:	fb86 9601 	smull	r9, r6, r6, r1
 80009c4:	fb09 fa02 	mul.w	sl, r9, r2
 80009c8:	fbca 9603 	smlal	r9, r6, sl, r3
 80009cc:	fb88 9801 	smull	r9, r8, r8, r1
 80009d0:	fb09 fa02 	mul.w	sl, r9, r2
 80009d4:	fbca 9803 	smlal	r9, r8, sl, r3
 80009d8:	fb8b 9b01 	smull	r9, fp, fp, r1
 80009dc:	fb09 fa02 	mul.w	sl, r9, r2
 80009e0:	fbca 9b03 	smlal	r9, fp, sl, r3
 80009e4:	fb8e 9e01 	smull	r9, lr, lr, r1
 80009e8:	fb09 fa02 	mul.w	sl, r9, r2
 80009ec:	fbca 9e03 	smlal	r9, lr, sl, r3
 80009f0:	4435      	add	r5, r6
 80009f2:	4447      	add	r7, r8
 80009f4:	445c      	add	r4, fp
 80009f6:	44f4      	add	ip, lr
 80009f8:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 80009fc:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000a00:	eba4 0b4b 	sub.w	fp, r4, fp, lsl #1
 8000a04:	ebac 0e4e 	sub.w	lr, ip, lr, lsl #1
 8000a08:	ee11 1a90 	vmov	r1, s3
 8000a0c:	fb87 9701 	smull	r9, r7, r7, r1
 8000a10:	fb09 fa02 	mul.w	sl, r9, r2
 8000a14:	fbca 9703 	smlal	r9, r7, sl, r3
 8000a18:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000a1c:	fb09 fa02 	mul.w	sl, r9, r2
 8000a20:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000a24:	ee12 1a10 	vmov	r1, s4
 8000a28:	fb88 9801 	smull	r9, r8, r8, r1
 8000a2c:	fb09 fa02 	mul.w	sl, r9, r2
 8000a30:	fbca 9803 	smlal	r9, r8, sl, r3
 8000a34:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000a38:	fb09 fa02 	mul.w	sl, r9, r2
 8000a3c:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000a40:	443d      	add	r5, r7
 8000a42:	4446      	add	r6, r8
 8000a44:	4464      	add	r4, ip
 8000a46:	44f3      	add	fp, lr
 8000a48:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000a4c:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000a50:	eba4 0c4c 	sub.w	ip, r4, ip, lsl #1
 8000a54:	ebab 0e4e 	sub.w	lr, fp, lr, lsl #1
 8000a58:	ee12 1a90 	vmov	r1, s5
 8000a5c:	fb84 9401 	smull	r9, r4, r4, r1
 8000a60:	fb09 fa02 	mul.w	sl, r9, r2
 8000a64:	fbca 9403 	smlal	r9, r4, sl, r3
 8000a68:	ee13 1a10 	vmov	r1, s6
 8000a6c:	fb8b 9b01 	smull	r9, fp, fp, r1
 8000a70:	fb09 fa02 	mul.w	sl, r9, r2
 8000a74:	fbca 9b03 	smlal	r9, fp, sl, r3
 8000a78:	ee13 1a90 	vmov	r1, s7
 8000a7c:	fb8c 9c01 	smull	r9, ip, ip, r1
 8000a80:	fb09 fa02 	mul.w	sl, r9, r2
 8000a84:	fbca 9c03 	smlal	r9, ip, sl, r3
 8000a88:	ee14 1a10 	vmov	r1, s8
 8000a8c:	fb8e 9e01 	smull	r9, lr, lr, r1
 8000a90:	fb09 fa02 	mul.w	sl, r9, r2
 8000a94:	fbca 9e03 	smlal	r9, lr, sl, r3
 8000a98:	4425      	add	r5, r4
 8000a9a:	445e      	add	r6, fp
 8000a9c:	4467      	add	r7, ip
 8000a9e:	44f0      	add	r8, lr
 8000aa0:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
 8000aa4:	eba6 0b4b 	sub.w	fp, r6, fp, lsl #1
 8000aa8:	eba7 0c4c 	sub.w	ip, r7, ip, lsl #1
 8000aac:	eba8 0e4e 	sub.w	lr, r8, lr, lsl #1
 8000ab0:	f8c0 6020 	str.w	r6, [r0, #32]
 8000ab4:	f8c0 7040 	str.w	r7, [r0, #64]	; 0x40
 8000ab8:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
 8000abc:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8000ac0:	f8c0 b0a0 	str.w	fp, [r0, #160]	; 0xa0
 8000ac4:	f8c0 c0c0 	str.w	ip, [r0, #192]	; 0xc0
 8000ac8:	f8c0 e0e0 	str.w	lr, [r0, #224]	; 0xe0
 8000acc:	f8c0 5000 	str.w	r5, [r0]
 8000ad0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000ad4:	ee15 aa10 	vmov	sl, s10
 8000ad8:	ebb0 0f0a 	cmp.w	r0, sl
 8000adc:	f47f af5e 	bne.w	800099c <pqcrystals_dilithium_invntt_tomont+0x208>
 8000ae0:	f5a0 707f 	sub.w	r0, r0, #1020	; 0x3fc
 8000ae4:	ee14 aa90 	vmov	sl, s9
 8000ae8:	ebba 0f00 	cmp.w	sl, r0
 8000aec:	f47f af4c 	bne.w	8000988 <pqcrystals_dilithium_invntt_tomont+0x1f4>
 8000af0:	f1a0 0020 	sub.w	r0, r0, #32
 8000af4:	ee10 1a10 	vmov	r1, s0
 8000af8:	f500 7480 	add.w	r4, r0, #256	; 0x100
 8000afc:	ee04 4a90 	vmov	s9, r4
 8000b00:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8000b04:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000b08:	f851 bb0c 	ldr.w	fp, [r1], #12
 8000b0c:	f8d0 5000 	ldr.w	r5, [r0]
 8000b10:	f8d0 6100 	ldr.w	r6, [r0, #256]	; 0x100
 8000b14:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8000b18:	f8d0 8300 	ldr.w	r8, [r0, #768]	; 0x300
 8000b1c:	fb86 960b 	smull	r9, r6, r6, fp
 8000b20:	fb09 fa02 	mul.w	sl, r9, r2
 8000b24:	fbca 9603 	smlal	r9, r6, sl, r3
 8000b28:	fb88 980b 	smull	r9, r8, r8, fp
 8000b2c:	fb09 fa02 	mul.w	sl, r9, r2
 8000b30:	fbca 9803 	smlal	r9, r8, sl, r3
 8000b34:	4435      	add	r5, r6
 8000b36:	4447      	add	r7, r8
 8000b38:	eba5 0646 	sub.w	r6, r5, r6, lsl #1
 8000b3c:	eba7 0848 	sub.w	r8, r7, r8, lsl #1
 8000b40:	fb87 970c 	smull	r9, r7, r7, ip
 8000b44:	fb09 fa02 	mul.w	sl, r9, r2
 8000b48:	fbca 9703 	smlal	r9, r7, sl, r3
 8000b4c:	fb88 980e 	smull	r9, r8, r8, lr
 8000b50:	fb09 fa02 	mul.w	sl, r9, r2
 8000b54:	fbca 9803 	smlal	r9, r8, sl, r3
 8000b58:	443d      	add	r5, r7
 8000b5a:	4446      	add	r6, r8
 8000b5c:	eba5 0747 	sub.w	r7, r5, r7, lsl #1
 8000b60:	eba6 0848 	sub.w	r8, r6, r8, lsl #1
 8000b64:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8000b68:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000b6c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8000b70:	f851 4b10 	ldr.w	r4, [r1], #16
 8000b74:	fb85 9504 	smull	r9, r5, r5, r4
 8000b78:	fb09 fa02 	mul.w	sl, r9, r2
 8000b7c:	fbca 9503 	smlal	r9, r5, sl, r3
 8000b80:	fb86 960c 	smull	r9, r6, r6, ip
 8000b84:	fb09 fa02 	mul.w	sl, r9, r2
 8000b88:	fbca 9603 	smlal	r9, r6, sl, r3
 8000b8c:	fb87 970e 	smull	r9, r7, r7, lr
 8000b90:	fb09 fa02 	mul.w	sl, r9, r2
 8000b94:	fbca 9703 	smlal	r9, r7, sl, r3
 8000b98:	fb88 980b 	smull	r9, r8, r8, fp
 8000b9c:	fb09 fa02 	mul.w	sl, r9, r2
 8000ba0:	fbca 9803 	smlal	r9, r8, sl, r3
 8000ba4:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
 8000ba8:	f8c0 7200 	str.w	r7, [r0, #512]	; 0x200
 8000bac:	f8c0 8300 	str.w	r8, [r0, #768]	; 0x300
 8000bb0:	f840 5b04 	str.w	r5, [r0], #4
 8000bb4:	ee14 4a90 	vmov	r4, s9
 8000bb8:	ebb4 0f00 	cmp.w	r4, r0
 8000bbc:	f47f afa0 	bne.w	8000b00 <pqcrystals_dilithium_invntt_tomont+0x36c>
 8000bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000bc4 <inv_ntt_asm_smull_qinv>:
 8000bc4:	fc7fdfff 	.word	0xfc7fdfff

08000bc8 <inv_ntt_asm_smull_q>:
 8000bc8:	007fe001 	.word	0x007fe001
 8000bcc:	080047b4 	.word	0x080047b4

08000bd0 <pqcrystals_dilithium_asm_pointwise_montgomery>:
 8000bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000bd8:	f6cf 437f 	movt	r3, #64639	; 0xfc7f
 8000bdc:	f24e 0401 	movw	r4, #57345	; 0xe001
 8000be0:	f2c0 047f 	movt	r4, #127	; 0x7f
 8000be4:	f240 0c55 	movw	ip, #85	; 0x55
 8000be8:	f8d1 6004 	ldr.w	r6, [r1, #4]
 8000bec:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8000bf0:	f851 5b0c 	ldr.w	r5, [r1], #12
 8000bf4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8000bf8:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8000bfc:	f852 8b0c 	ldr.w	r8, [r2], #12
 8000c00:	fb85 5e08 	smull	r5, lr, r5, r8
 8000c04:	fb05 f803 	mul.w	r8, r5, r3
 8000c08:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8000c0c:	f840 eb04 	str.w	lr, [r0], #4
 8000c10:	fb86 6e09 	smull	r6, lr, r6, r9
 8000c14:	fb06 f903 	mul.w	r9, r6, r3
 8000c18:	fbc9 6e04 	smlal	r6, lr, r9, r4
 8000c1c:	f840 eb04 	str.w	lr, [r0], #4
 8000c20:	fb87 7e0a 	smull	r7, lr, r7, sl
 8000c24:	fb07 fa03 	mul.w	sl, r7, r3
 8000c28:	fbca 7e04 	smlal	r7, lr, sl, r4
 8000c2c:	f840 eb04 	str.w	lr, [r0], #4
 8000c30:	f1bc 0c01 	subs.w	ip, ip, #1
 8000c34:	f47f afd8 	bne.w	8000be8 <pqcrystals_dilithium_asm_pointwise_montgomery+0x18>
 8000c38:	f8d1 5000 	ldr.w	r5, [r1]
 8000c3c:	f8d2 8000 	ldr.w	r8, [r2]
 8000c40:	fb85 5e08 	smull	r5, lr, r5, r8
 8000c44:	fb05 f803 	mul.w	r8, r5, r3
 8000c48:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8000c4c:	f8c0 e000 	str.w	lr, [r0]
 8000c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c54 <pqcrystals_dilithium_asm_pointwise_acc_montgomery>:
 8000c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c58:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000c5c:	f6cf 437f 	movt	r3, #64639	; 0xfc7f
 8000c60:	f24e 0401 	movw	r4, #57345	; 0xe001
 8000c64:	f2c0 047f 	movt	r4, #127	; 0x7f
 8000c68:	f240 0c55 	movw	ip, #85	; 0x55
 8000c6c:	f8d1 6004 	ldr.w	r6, [r1, #4]
 8000c70:	f8d1 7008 	ldr.w	r7, [r1, #8]
 8000c74:	f851 5b0c 	ldr.w	r5, [r1], #12
 8000c78:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8000c7c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8000c80:	f852 8b0c 	ldr.w	r8, [r2], #12
 8000c84:	fb85 5e08 	smull	r5, lr, r5, r8
 8000c88:	fb05 f803 	mul.w	r8, r5, r3
 8000c8c:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8000c90:	fb86 6509 	smull	r6, r5, r6, r9
 8000c94:	fb06 f903 	mul.w	r9, r6, r3
 8000c98:	fbc9 6504 	smlal	r6, r5, r9, r4
 8000c9c:	fb87 760a 	smull	r7, r6, r7, sl
 8000ca0:	fb07 fa03 	mul.w	sl, r7, r3
 8000ca4:	fbca 7604 	smlal	r7, r6, sl, r4
 8000ca8:	f8d0 8000 	ldr.w	r8, [r0]
 8000cac:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8000cb0:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8000cb4:	eb0e 0e08 	add.w	lr, lr, r8
 8000cb8:	f840 eb0c 	str.w	lr, [r0], #12
 8000cbc:	eb05 0509 	add.w	r5, r5, r9
 8000cc0:	f840 5c08 	str.w	r5, [r0, #-8]
 8000cc4:	eb06 060a 	add.w	r6, r6, sl
 8000cc8:	f840 6c04 	str.w	r6, [r0, #-4]
 8000ccc:	f1bc 0c01 	subs.w	ip, ip, #1
 8000cd0:	f47f afcc 	bne.w	8000c6c <pqcrystals_dilithium_asm_pointwise_acc_montgomery+0x18>
 8000cd4:	f8d1 5000 	ldr.w	r5, [r1]
 8000cd8:	f8d2 8000 	ldr.w	r8, [r2]
 8000cdc:	f8d0 6000 	ldr.w	r6, [r0]
 8000ce0:	fb85 5e08 	smull	r5, lr, r5, r8
 8000ce4:	fb05 f803 	mul.w	r8, r5, r3
 8000ce8:	fbc8 5e04 	smlal	r5, lr, r8, r4
 8000cec:	eb0e 0e06 	add.w	lr, lr, r6
 8000cf0:	f8c0 e000 	str.w	lr, [r0]
 8000cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000cf8 <pqcrystals_dilithium_asm_reduce32>:
 8000cf8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000cfc:	f24e 0c01 	movw	ip, #57345	; 0xe001
 8000d00:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8000d04:	f240 0a20 	movw	sl, #32
 8000d08:	f8d0 1000 	ldr.w	r1, [r0]
 8000d0c:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8000d10:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8000d14:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8000d18:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8000d1c:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8000d20:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000d24:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000d28:	f501 0980 	add.w	r9, r1, #4194304	; 0x400000
 8000d2c:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d30:	fb09 111c 	mls	r1, r9, ip, r1
 8000d34:	f502 0980 	add.w	r9, r2, #4194304	; 0x400000
 8000d38:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d3c:	fb09 221c 	mls	r2, r9, ip, r2
 8000d40:	f503 0980 	add.w	r9, r3, #4194304	; 0x400000
 8000d44:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d48:	fb09 331c 	mls	r3, r9, ip, r3
 8000d4c:	f504 0980 	add.w	r9, r4, #4194304	; 0x400000
 8000d50:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d54:	fb09 441c 	mls	r4, r9, ip, r4
 8000d58:	f505 0980 	add.w	r9, r5, #4194304	; 0x400000
 8000d5c:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d60:	fb09 551c 	mls	r5, r9, ip, r5
 8000d64:	f506 0980 	add.w	r9, r6, #4194304	; 0x400000
 8000d68:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d6c:	fb09 661c 	mls	r6, r9, ip, r6
 8000d70:	f507 0980 	add.w	r9, r7, #4194304	; 0x400000
 8000d74:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d78:	fb09 771c 	mls	r7, r9, ip, r7
 8000d7c:	f508 0980 	add.w	r9, r8, #4194304	; 0x400000
 8000d80:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d84:	fb09 881c 	mls	r8, r9, ip, r8
 8000d88:	f8c0 2004 	str.w	r2, [r0, #4]
 8000d8c:	f8c0 3008 	str.w	r3, [r0, #8]
 8000d90:	f8c0 400c 	str.w	r4, [r0, #12]
 8000d94:	f8c0 5010 	str.w	r5, [r0, #16]
 8000d98:	f8c0 6014 	str.w	r6, [r0, #20]
 8000d9c:	f8c0 7018 	str.w	r7, [r0, #24]
 8000da0:	f8c0 801c 	str.w	r8, [r0, #28]
 8000da4:	f840 1b20 	str.w	r1, [r0], #32
 8000da8:	f1ba 0a01 	subs.w	sl, sl, #1
 8000dac:	f47f afac 	bne.w	8000d08 <pqcrystals_dilithium_asm_reduce32+0x10>
 8000db0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <pqcrystals_dilithium_small_asm_reduce32_central>:
 8000db8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000dbc:	f643 09ed 	movw	r9, #14573	; 0x38ed
 8000dc0:	f2c0 0955 	movt	r9, #85	; 0x55
 8000dc4:	f240 3a01 	movw	sl, #769	; 0x301
 8000dc8:	f240 0c20 	movw	ip, #32
 8000dcc:	f8d0 1000 	ldr.w	r1, [r0]
 8000dd0:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8000dd4:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8000dd8:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8000ddc:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8000de0:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8000de4:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000de8:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000dec:	fb51 fb19 	smmulr	fp, r1, r9
 8000df0:	fb0b 111a 	mls	r1, fp, sl, r1
 8000df4:	fb52 fb19 	smmulr	fp, r2, r9
 8000df8:	fb0b 221a 	mls	r2, fp, sl, r2
 8000dfc:	fb53 fb19 	smmulr	fp, r3, r9
 8000e00:	fb0b 331a 	mls	r3, fp, sl, r3
 8000e04:	fb54 fb19 	smmulr	fp, r4, r9
 8000e08:	fb0b 441a 	mls	r4, fp, sl, r4
 8000e0c:	fb55 fb19 	smmulr	fp, r5, r9
 8000e10:	fb0b 551a 	mls	r5, fp, sl, r5
 8000e14:	fb56 fb19 	smmulr	fp, r6, r9
 8000e18:	fb0b 661a 	mls	r6, fp, sl, r6
 8000e1c:	fb57 fb19 	smmulr	fp, r7, r9
 8000e20:	fb0b 771a 	mls	r7, fp, sl, r7
 8000e24:	fb58 fb19 	smmulr	fp, r8, r9
 8000e28:	fb0b 881a 	mls	r8, fp, sl, r8
 8000e2c:	f8c0 2004 	str.w	r2, [r0, #4]
 8000e30:	f8c0 3008 	str.w	r3, [r0, #8]
 8000e34:	f8c0 400c 	str.w	r4, [r0, #12]
 8000e38:	f8c0 5010 	str.w	r5, [r0, #16]
 8000e3c:	f8c0 6014 	str.w	r6, [r0, #20]
 8000e40:	f8c0 7018 	str.w	r7, [r0, #24]
 8000e44:	f8c0 801c 	str.w	r8, [r0, #28]
 8000e48:	f840 1b20 	str.w	r1, [r0], #32
 8000e4c:	f1bc 0c01 	subs.w	ip, ip, #1
 8000e50:	f47f afbc 	bne.w	8000dcc <pqcrystals_dilithium_small_asm_reduce32_central+0x14>
 8000e54:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

08000e58 <pqcrystals_dilithium_asm_caddq>:
 8000e58:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000e5c:	f24e 0c01 	movw	ip, #57345	; 0xe001
 8000e60:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8000e64:	f240 0a20 	movw	sl, #32
 8000e68:	f8d0 1000 	ldr.w	r1, [r0]
 8000e6c:	f8d0 2004 	ldr.w	r2, [r0, #4]
 8000e70:	f8d0 3008 	ldr.w	r3, [r0, #8]
 8000e74:	f8d0 400c 	ldr.w	r4, [r0, #12]
 8000e78:	f8d0 5010 	ldr.w	r5, [r0, #16]
 8000e7c:	f8d0 6014 	ldr.w	r6, [r0, #20]
 8000e80:	f8d0 7018 	ldr.w	r7, [r0, #24]
 8000e84:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8000e88:	ea0c 79e1 	and.w	r9, ip, r1, asr #31
 8000e8c:	4449      	add	r1, r9
 8000e8e:	ea0c 79e2 	and.w	r9, ip, r2, asr #31
 8000e92:	444a      	add	r2, r9
 8000e94:	ea0c 79e3 	and.w	r9, ip, r3, asr #31
 8000e98:	444b      	add	r3, r9
 8000e9a:	ea0c 79e4 	and.w	r9, ip, r4, asr #31
 8000e9e:	444c      	add	r4, r9
 8000ea0:	ea0c 79e5 	and.w	r9, ip, r5, asr #31
 8000ea4:	444d      	add	r5, r9
 8000ea6:	ea0c 79e6 	and.w	r9, ip, r6, asr #31
 8000eaa:	444e      	add	r6, r9
 8000eac:	ea0c 79e7 	and.w	r9, ip, r7, asr #31
 8000eb0:	444f      	add	r7, r9
 8000eb2:	ea0c 79e8 	and.w	r9, ip, r8, asr #31
 8000eb6:	44c8      	add	r8, r9
 8000eb8:	f8c0 2004 	str.w	r2, [r0, #4]
 8000ebc:	f8c0 3008 	str.w	r3, [r0, #8]
 8000ec0:	f8c0 400c 	str.w	r4, [r0, #12]
 8000ec4:	f8c0 5010 	str.w	r5, [r0, #16]
 8000ec8:	f8c0 6014 	str.w	r6, [r0, #20]
 8000ecc:	f8c0 7018 	str.w	r7, [r0, #24]
 8000ed0:	f8c0 801c 	str.w	r8, [r0, #28]
 8000ed4:	f840 1b20 	str.w	r1, [r0], #32
 8000ed8:	f1ba 0a01 	subs.w	sl, sl, #1
 8000edc:	f47f afc4 	bne.w	8000e68 <pqcrystals_dilithium_asm_caddq+0x10>
 8000ee0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <pqcrystals_dilithium_asm_rej_uniform>:
 8000ee8:	e92d 0070 	stmdb	sp!, {r4, r5, r6}
 8000eec:	f84d 1d04 	str.w	r1, [sp, #-4]!
 8000ef0:	f24e 0c00 	movw	ip, #57344	; 0xe000
 8000ef4:	f2c0 0c7f 	movt	ip, #127	; 0x7f
 8000ef8:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8000efc:	eb02 0303 	add.w	r3, r2, r3
 8000f00:	f1a3 0302 	sub.w	r3, r3, #2
 8000f04:	ebb3 0f02 	cmp.w	r3, r2
 8000f08:	f340 800a 	ble.w	8000f20 <end>
 8000f0c:	f852 5b03 	ldr.w	r5, [r2], #3
 8000f10:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8000f14:	4565      	cmp	r5, ip
 8000f16:	bfd8      	it	le
 8000f18:	f840 5b04 	strle.w	r5, [r0], #4
 8000f1c:	42b0      	cmp	r0, r6
 8000f1e:	d1f1      	bne.n	8000f04 <pqcrystals_dilithium_asm_rej_uniform+0x1c>

08000f20 <end>:
 8000f20:	f85d 5b04 	ldr.w	r5, [sp], #4
 8000f24:	eba6 0000 	sub.w	r0, r6, r0
 8000f28:	eba5 0090 	sub.w	r0, r5, r0, lsr #2
 8000f2c:	e8bd 0070 	ldmia.w	sp!, {r4, r5, r6}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <memcpy>:
 8000f34:	4684      	mov	ip, r0
 8000f36:	ea41 0300 	orr.w	r3, r1, r0
 8000f3a:	f013 0303 	ands.w	r3, r3, #3
 8000f3e:	d16d      	bne.n	800101c <memcpy+0xe8>
 8000f40:	3a40      	subs	r2, #64	; 0x40
 8000f42:	d341      	bcc.n	8000fc8 <memcpy+0x94>
 8000f44:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f48:	f840 3b04 	str.w	r3, [r0], #4
 8000f4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f50:	f840 3b04 	str.w	r3, [r0], #4
 8000f54:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f58:	f840 3b04 	str.w	r3, [r0], #4
 8000f5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f60:	f840 3b04 	str.w	r3, [r0], #4
 8000f64:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f68:	f840 3b04 	str.w	r3, [r0], #4
 8000f6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f70:	f840 3b04 	str.w	r3, [r0], #4
 8000f74:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f78:	f840 3b04 	str.w	r3, [r0], #4
 8000f7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f80:	f840 3b04 	str.w	r3, [r0], #4
 8000f84:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f88:	f840 3b04 	str.w	r3, [r0], #4
 8000f8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f90:	f840 3b04 	str.w	r3, [r0], #4
 8000f94:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f98:	f840 3b04 	str.w	r3, [r0], #4
 8000f9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fa0:	f840 3b04 	str.w	r3, [r0], #4
 8000fa4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fa8:	f840 3b04 	str.w	r3, [r0], #4
 8000fac:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fb0:	f840 3b04 	str.w	r3, [r0], #4
 8000fb4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fb8:	f840 3b04 	str.w	r3, [r0], #4
 8000fbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fc0:	f840 3b04 	str.w	r3, [r0], #4
 8000fc4:	3a40      	subs	r2, #64	; 0x40
 8000fc6:	d2bd      	bcs.n	8000f44 <memcpy+0x10>
 8000fc8:	3230      	adds	r2, #48	; 0x30
 8000fca:	d311      	bcc.n	8000ff0 <memcpy+0xbc>
 8000fcc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fd0:	f840 3b04 	str.w	r3, [r0], #4
 8000fd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fd8:	f840 3b04 	str.w	r3, [r0], #4
 8000fdc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fe0:	f840 3b04 	str.w	r3, [r0], #4
 8000fe4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fe8:	f840 3b04 	str.w	r3, [r0], #4
 8000fec:	3a10      	subs	r2, #16
 8000fee:	d2ed      	bcs.n	8000fcc <memcpy+0x98>
 8000ff0:	320c      	adds	r2, #12
 8000ff2:	d305      	bcc.n	8001000 <memcpy+0xcc>
 8000ff4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ff8:	f840 3b04 	str.w	r3, [r0], #4
 8000ffc:	3a04      	subs	r2, #4
 8000ffe:	d2f9      	bcs.n	8000ff4 <memcpy+0xc0>
 8001000:	3204      	adds	r2, #4
 8001002:	d008      	beq.n	8001016 <memcpy+0xe2>
 8001004:	07d2      	lsls	r2, r2, #31
 8001006:	bf1c      	itt	ne
 8001008:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800100c:	f800 3b01 	strbne.w	r3, [r0], #1
 8001010:	d301      	bcc.n	8001016 <memcpy+0xe2>
 8001012:	880b      	ldrh	r3, [r1, #0]
 8001014:	8003      	strh	r3, [r0, #0]
 8001016:	4660      	mov	r0, ip
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2a08      	cmp	r2, #8
 800101e:	d313      	bcc.n	8001048 <memcpy+0x114>
 8001020:	078b      	lsls	r3, r1, #30
 8001022:	d08d      	beq.n	8000f40 <memcpy+0xc>
 8001024:	f010 0303 	ands.w	r3, r0, #3
 8001028:	d08a      	beq.n	8000f40 <memcpy+0xc>
 800102a:	f1c3 0304 	rsb	r3, r3, #4
 800102e:	1ad2      	subs	r2, r2, r3
 8001030:	07db      	lsls	r3, r3, #31
 8001032:	bf1c      	itt	ne
 8001034:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001038:	f800 3b01 	strbne.w	r3, [r0], #1
 800103c:	d380      	bcc.n	8000f40 <memcpy+0xc>
 800103e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001042:	f820 3b02 	strh.w	r3, [r0], #2
 8001046:	e77b      	b.n	8000f40 <memcpy+0xc>
 8001048:	3a04      	subs	r2, #4
 800104a:	d3d9      	bcc.n	8001000 <memcpy+0xcc>
 800104c:	3a01      	subs	r2, #1
 800104e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001052:	f800 3b01 	strb.w	r3, [r0], #1
 8001056:	d2f9      	bcs.n	800104c <memcpy+0x118>
 8001058:	780b      	ldrb	r3, [r1, #0]
 800105a:	7003      	strb	r3, [r0, #0]
 800105c:	784b      	ldrb	r3, [r1, #1]
 800105e:	7043      	strb	r3, [r0, #1]
 8001060:	788b      	ldrb	r3, [r1, #2]
 8001062:	7083      	strb	r3, [r0, #2]
 8001064:	4660      	mov	r0, ip
 8001066:	4770      	bx	lr

08001068 <dilithium1>:
uint8_t smbuf_chunk_14(uint8_t *p, uint8_t len);
// uint8_t test_chunk_6(uint8_t *p, uint8_t len);*/


uint8_t dilithium1(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* p)
{
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106c:	f6ad 7da8 	subw	sp, sp, #4008	; 0xfa8
 8001070:	461d      	mov	r5, r3
 8001072:	a904      	add	r1, sp, #16
    mlen = 33*(0+1);

    char c[16];
   	unsigned int i=0;
	unsigned int j=0,k=0;
    for	(i=0;i<16;i++){
 8001074:	2300      	movs	r3, #0
	if (i<10)
 8001076:	2b09      	cmp	r3, #9
        c[i] = '0' +i;
 8001078:	bf94      	ite	ls
 800107a:	f103 0230 	addls.w	r2, r3, #48	; 0x30
	else
        c[i] = 'A' + i-10;
 800107e:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
    for	(i=0;i<16;i++){
 8001082:	3301      	adds	r3, #1
        c[i] = 'A' + i-10;
 8001084:	b2d2      	uxtb	r2, r2
    for	(i=0;i<16;i++){
 8001086:	2b10      	cmp	r3, #16
 8001088:	f801 2b01 	strb.w	r2, [r1], #1
 800108c:	d1f3      	bne.n	8001076 <dilithium1+0xe>
	}
    //给消息赋值
    //改動1開始，原來只有底下被注釋的一行
    char mstr[66] = "35DFB0A4D19D9A123C95D2C3F0201F92D62BAD8254FC32CE3750C64212B6044FDF";
    for(int i=0; i < 66;i++){
        mstr[i] = p[i];
 800108e:	2242      	movs	r2, #66	; 0x42
 8001090:	4629      	mov	r1, r5
 8001092:	a811      	add	r0, sp, #68	; 0x44
 8001094:	f7ff ff4e 	bl	8000f34 <memcpy>
    }
    //改動1結束

   for(int i=0; i < 180;i++){
         p[i]=0;
 8001098:	2100      	movs	r1, #0
 800109a:	22b4      	movs	r2, #180	; 0xb4
 800109c:	4628      	mov	r0, r5
 800109e:	f002 ff49 	bl	8003f34 <memset>
 80010a2:	ab08      	add	r3, sp, #32
 80010a4:	a911      	add	r1, sp, #68	; 0x44
   // for(int i=0; i < 66;i++){
   //     p[90+i] = mstr[i];
   // }

    //改動2，注釋了以下
    for(i=0,j=0;i<66;i++,j++){
 80010a6:	2600      	movs	r6, #0
 80010a8:	461f      	mov	r7, r3
	msg[j] = 0;
	for(k=0; c[k] != mstr[i] ;k++);
 80010aa:	7808      	ldrb	r0, [r1, #0]
 80010ac:	aa04      	add	r2, sp, #16
 80010ae:	2400      	movs	r4, #0
 80010b0:	e000      	b.n	80010b4 <dilithium1+0x4c>
 80010b2:	3401      	adds	r4, #1
 80010b4:	f812 cb01 	ldrb.w	ip, [r2], #1
 80010b8:	4584      	cmp	ip, r0
 80010ba:	d1fa      	bne.n	80010b2 <dilithium1+0x4a>
	msg[j] += k*16;
 80010bc:	0124      	lsls	r4, r4, #4
	i+=1;
	for(k=0; c[k] != mstr[i] ;k++);
 80010be:	f891 c001 	ldrb.w	ip, [r1, #1]
	msg[j] += k*16;
 80010c2:	b2e4      	uxtb	r4, r4
	for(k=0; c[k] != mstr[i] ;k++);
 80010c4:	a804      	add	r0, sp, #16
 80010c6:	2200      	movs	r2, #0
 80010c8:	f810 eb01 	ldrb.w	lr, [r0], #1
 80010cc:	45e6      	cmp	lr, ip
 80010ce:	d132      	bne.n	8001136 <dilithium1+0xce>
    for(i=0,j=0;i<66;i++,j++){
 80010d0:	3601      	adds	r6, #1
	msg[j] += k;
 80010d2:	4414      	add	r4, r2
    for(i=0,j=0;i<66;i++,j++){
 80010d4:	2e21      	cmp	r6, #33	; 0x21
	msg[j] += k;
 80010d6:	f803 4b01 	strb.w	r4, [r3], #1
    for(i=0,j=0;i<66;i++,j++){
 80010da:	f101 0102 	add.w	r1, r1, #2
 80010de:	d1e4      	bne.n	80010aa <dilithium1+0x42>
    // p[87] = 33;
    // p[86] = 33;
    
    // p[13] = ETA;
    m1 = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 80010e0:	2101      	movs	r1, #1
 80010e2:	f640 1095 	movw	r0, #2453	; 0x995
 80010e6:	f002 fc07 	bl	80038f8 <calloc>
    sm2 = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char)); 
    crypto_sign_keypair(pk,sk);
 80010ea:	f50d 68b5 	add.w	r8, sp, #1448	; 0x5a8
    sm = (unsigned char *)calloc(mlen+CRYPTO_BYTES, sizeof(unsigned char));
 80010ee:	4604      	mov	r4, r0
    crypto_sign_keypair(pk,sk);
 80010f0:	4641      	mov	r1, r8
 80010f2:	a822      	add	r0, sp, #136	; 0x88
 80010f4:	f000 f854 	bl	80011a0 <crypto_sign_keypair>


	//crypto_sign是簽名函數,生成的簽名消息為sm
	
   
    if ( (ret_val = crypto_sign(sm, &smlen, msg, mlen, sk,p)) != 0) {
 80010f8:	e9cd 8500 	strd	r8, r5, [sp]
 80010fc:	4633      	mov	r3, r6
 80010fe:	463a      	mov	r2, r7
 8001100:	a903      	add	r1, sp, #12
 8001102:	4620      	mov	r0, r4
 8001104:	f000 f941 	bl	800138a <crypto_sign>
 8001108:	b2c0      	uxtb	r0, r0
 800110a:	b138      	cbz	r0, 800111c <dilithium1+0xb4>
 800110c:	1e6b      	subs	r3, r5, #1
 800110e:	1da9      	adds	r1, r5, #6
        //printf("crypto_sign returned <%d>\n", ret_val);
        for(int x=0; x <7;x++){
            p[x] +=20;
 8001110:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001114:	3214      	adds	r2, #20
        for(int x=0; x <7;x++){
 8001116:	4299      	cmp	r1, r3
            p[x] +=20;
 8001118:	701a      	strb	r2, [r3, #0]
        for(int x=0; x <7;x++){
 800111a:	d1f9      	bne.n	8001110 <dilithium1+0xa8>
    //     }
        // p[25] = DILITHIUM_MODE;
    
        free(m1);
        // free(sm);
        free(m);
 800111c:	2000      	movs	r0, #0
 800111e:	f002 fc51 	bl	80039c4 <free>
    simpleserial_put('r', 180, p);
 8001122:	462a      	mov	r2, r5
 8001124:	21b4      	movs	r1, #180	; 0xb4
 8001126:	2072      	movs	r0, #114	; 0x72
 8001128:	f000 fe6a 	bl	8001e00 <simpleserial_put>
   return 0x00;
}
 800112c:	2000      	movs	r0, #0
 800112e:	f60d 7da8 	addw	sp, sp, #4008	; 0xfa8
 8001132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(k=0; c[k] != mstr[i] ;k++);
 8001136:	3201      	adds	r2, #1
 8001138:	e7c6      	b.n	80010c8 <dilithium1+0x60>
 800113a:	0000      	movs	r0, r0

0800113c <main>:
// {
//      simpleserial_put('r',20, array);
//      return 0x00;
// }
注釋2結束*/
int main(void){
 800113c:	b508      	push	{r3, lr}

    platform_init();
 800113e:	f000 ff03 	bl	8001f48 <platform_init>
    init_uart();
 8001142:	f000 ff49 	bl	8001fd8 <init_uart>

    trigger_setup();
 8001146:	f000 ff85 	bl	8002054 <trigger_setup>
    
    /* Device reset detected */
    putch('r');
 800114a:	2072      	movs	r0, #114	; 0x72
 800114c:	f000 ffc4 	bl	80020d8 <putch>
    putch('R');
 8001150:	2052      	movs	r0, #82	; 0x52
 8001152:	f000 ffc1 	bl	80020d8 <putch>
    putch('E');
 8001156:	2045      	movs	r0, #69	; 0x45
 8001158:	f000 ffbe 	bl	80020d8 <putch>
    putch('S');
 800115c:	2053      	movs	r0, #83	; 0x53
 800115e:	f000 ffbb 	bl	80020d8 <putch>
    putch('E');
 8001162:	2045      	movs	r0, #69	; 0x45
 8001164:	f000 ffb8 	bl	80020d8 <putch>
    putch('T');
 8001168:	2054      	movs	r0, #84	; 0x54
 800116a:	f000 ffb5 	bl	80020d8 <putch>
    putch(' ');
 800116e:	2020      	movs	r0, #32
 8001170:	f000 ffb2 	bl	80020d8 <putch>
    putch(' ');
 8001174:	2020      	movs	r0, #32
 8001176:	f000 ffaf 	bl	80020d8 <putch>
    putch(' ');
 800117a:	2020      	movs	r0, #32
 800117c:	f000 ffac 	bl	80020d8 <putch>
    putch('\n');
 8001180:	200a      	movs	r0, #10
 8001182:	f000 ffa9 	bl	80020d8 <putch>
    
    simpleserial_init();
 8001186:	f000 fe1e 	bl	8001dc6 <simpleserial_init>
    //simpleserial_addcmd('A', 16, enc_password);
    
    simpleserial_addcmd('3', 180, dilithium1);
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <main+0x60>)
 800118c:	21b4      	movs	r1, #180	; 0xb4
 800118e:	2033      	movs	r0, #51	; 0x33
 8001190:	f000 fe1a 	bl	8001dc8 <simpleserial_addcmd>
    simpleserial_addcmd('N',0,smbuf_chunk_14);

   注釋3結束*/
    
    while(1)
        simpleserial_get();
 8001194:	f000 fe62 	bl	8001e5c <simpleserial_get>
    while(1)
 8001198:	e7fc      	b.n	8001194 <main+0x58>
 800119a:	bf00      	nop
 800119c:	08001069 	.word	0x08001069

080011a0 <crypto_sign_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 80011a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a4:	f5ad 4d12 	sub.w	sp, sp, #37376	; 0x9200
 80011a8:	b0a5      	sub	sp, #148	; 0x94
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  //randombytes(seedbuf, SEEDBYTES);
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 80011aa:	f44f 7280 	mov.w	r2, #256	; 0x100
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 80011ae:	4605      	mov	r5, r0
 80011b0:	460e      	mov	r6, r1
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 80011b2:	a864      	add	r0, sp, #400	; 0x190
 80011b4:	494a      	ldr	r1, [pc, #296]	; (80012e0 <crypto_sign_keypair+0x140>)
 80011b6:	ac64      	add	r4, sp, #400	; 0x190
 80011b8:	f7ff febc 	bl	8000f34 <memcpy>
	uint8_t cacheintsk[6*SEEDBYTES];
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80011bc:	f1a4 02c0 	sub.w	r2, r4, #192	; 0xc0
  char seedbufcha[2*(2*SEEDBYTES+CRHBYTES)] ="E99CB21815AA2F4A54759D507C2E5B4B0DDB0B78A179FEBB90E13C1ACAC329431FDB456AD904F9B2DD76E7501DCBB52E779525B566D767DF08301BE9637D2C77F872434B0F8E8A3B11F9B79ADD7BA0B66DC737A56DBC33C84A66B07247D52EC44B7F2E8D1C9A5F3D2B6E4C7D1F2A3B5C9D6E8F3D8E2F5A9B7C4D1E6F3A2B8C5D";
 80011c0:	4610      	mov	r0, r2
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80011c2:	2100      	movs	r1, #0
	{
		if (seedbufcha[i] - 'A' >= 0)
 80011c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80011c8:	2b40      	cmp	r3, #64	; 0x40
			cacheintsk[i] = 10 + seedbufcha[i] - 'A';
 80011ca:	bf8c      	ite	hi
 80011cc:	3b37      	subhi	r3, #55	; 0x37
		else
			cacheintsk[i] = seedbufcha[i] - '0';
 80011ce:	3b30      	subls	r3, #48	; 0x30
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80011d0:	3101      	adds	r1, #1
			cacheintsk[i] = seedbufcha[i] - '0';
 80011d2:	b2db      	uxtb	r3, r3
	for (int i = 0; i <2 * SEEDBYTES; i++)
 80011d4:	2940      	cmp	r1, #64	; 0x40
 80011d6:	f800 3b01 	strb.w	r3, [r0], #1
 80011da:	d1f3      	bne.n	80011c4 <crypto_sign_keypair+0x24>
 80011dc:	a914      	add	r1, sp, #80	; 0x50
	}
	for (int i = 0; i < SEEDBYTES; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	460c      	mov	r4, r1
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 80011e2:	7817      	ldrb	r7, [r2, #0]
 80011e4:	7850      	ldrb	r0, [r2, #1]
	for (int i = 0; i < SEEDBYTES; i++)
 80011e6:	3301      	adds	r3, #1
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 80011e8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
	for (int i = 0; i < SEEDBYTES; i++)
 80011ec:	2b20      	cmp	r3, #32
		seedbuf[i] = cacheintsk[2*i] * 16 + cacheintsk[2*i + 1];
 80011ee:	f801 0b01 	strb.w	r0, [r1], #1
	for (int i = 0; i < SEEDBYTES; i++)
 80011f2:	f102 0202 	add.w	r2, r2, #2
 80011f6:	d1f4      	bne.n	80011e2 <crypto_sign_keypair+0x42>
  
  //
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 80011f8:	4622      	mov	r2, r4
 80011fa:	4620      	mov	r0, r4
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	f000 fd91 	bl	8001d24 <shake256>
  rho = seedbuf;
  rhoprime = rho + SEEDBYTES;
  key = rhoprime + CRHBYTES;

  /* Expand matrix */
  polyvec_matrix_expand(mat, rho);
 8001202:	f50d 40a5 	add.w	r0, sp, #21120	; 0x5280

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 8001206:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 800120a:	afa4      	add	r7, sp, #656	; 0x290
  polyvec_matrix_expand(mat, rho);
 800120c:	4621      	mov	r1, r4
 800120e:	3010      	adds	r0, #16
  polyveck_uniform_eta(&s2, rhoprime, L);
 8001210:	f50d 580a 	add.w	r8, sp, #8832	; 0x2280
  polyvec_matrix_expand(mat, rho);
 8001214:	f000 fb79 	bl	800190a <pqcrystals_dilithium_polyvec_matrix_expand>
  polyveck_uniform_eta(&s2, rhoprime, L);
 8001218:	f108 0810 	add.w	r8, r8, #16
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 800121c:	4649      	mov	r1, r9
 800121e:	4638      	mov	r0, r7
 8001220:	2200      	movs	r2, #0
 8001222:	f000 fb8b 	bl	800193c <pqcrystals_dilithium_polyvecl_uniform_eta>
  polyveck_uniform_eta(&s2, rhoprime, L);
 8001226:	4649      	mov	r1, r9
 8001228:	4640      	mov	r0, r8
 800122a:	2204      	movs	r2, #4
 800122c:	f000 fbcd 	bl	80019ca <pqcrystals_dilithium_polyveck_uniform_eta>

  /* Matrix-vector multiplication */
  s1hat = s1;
 8001230:	f50d 5094 	add.w	r0, sp, #4736	; 0x1280
 8001234:	4639      	mov	r1, r7
 8001236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123a:	3010      	adds	r0, #16
 800123c:	f7ff fe7a 	bl	8000f34 <memcpy>
  polyvecl_ntt(&s1hat);
 8001240:	f50d 5094 	add.w	r0, sp, #4736	; 0x1280
 8001244:	3010      	adds	r0, #16
 8001246:	f000 fb89 	bl	800195c <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 800124a:	f50d 5294 	add.w	r2, sp, #4736	; 0x1280
 800124e:	f50d 41a5 	add.w	r1, sp, #21120	; 0x5280
 8001252:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 8001256:	3210      	adds	r2, #16
 8001258:	3110      	adds	r1, #16
 800125a:	3010      	adds	r0, #16
 800125c:	f000 fba3 	bl	80019a6 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&t1);
 8001260:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 8001264:	3010      	adds	r0, #16
 8001266:	f000 fbc0 	bl	80019ea <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&t1);
 800126a:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 800126e:	3010      	adds	r0, #16
 8001270:	f000 fbef 	bl	8001a52 <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
 8001274:	f50d 514a 	add.w	r1, sp, #12928	; 0x3280
 8001278:	3110      	adds	r1, #16
 800127a:	4642      	mov	r2, r8
 800127c:	4608      	mov	r0, r1
 800127e:	f000 fbd8 	bl	8001a32 <pqcrystals_dilithium_polyveck_add>

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 8001282:	f50d 504a 	add.w	r0, sp, #12928	; 0x3280
 8001286:	3010      	adds	r0, #16
 8001288:	f000 fbc1 	bl	8001a0e <pqcrystals_dilithium_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 800128c:	f50d 4985 	add.w	r9, sp, #17024	; 0x4280
 8001290:	f50d 524a 	add.w	r2, sp, #12928	; 0x3280
 8001294:	f109 0910 	add.w	r9, r9, #16
 8001298:	3210      	adds	r2, #16
 800129a:	4649      	mov	r1, r9
 800129c:	4610      	mov	r0, r2
 800129e:	f000 fbea 	bl	8001a76 <pqcrystals_dilithium_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 80012a2:	f50d 524a 	add.w	r2, sp, #12928	; 0x3280
 80012a6:	4621      	mov	r1, r4
 80012a8:	4628      	mov	r0, r5
 80012aa:	3210      	adds	r2, #16
 80012ac:	f000 f88b 	bl	80013c6 <pqcrystals_dilithium_pack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, TRBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 80012b0:	462a      	mov	r2, r5
 80012b2:	a804      	add	r0, sp, #16
 80012b4:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	f000 fd33 	bl	8001d24 <shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 80012be:	4630      	mov	r0, r6
 80012c0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80012c4:	f8cd 9000 	str.w	r9, [sp]
 80012c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80012ca:	aa04      	add	r2, sp, #16
 80012cc:	4621      	mov	r1, r4
 80012ce:	f000 f895 	bl	80013fc <pqcrystals_dilithium_pack_sk>

  return 0;
}
 80012d2:	2000      	movs	r0, #0
 80012d4:	f50d 4d12 	add.w	sp, sp, #37376	; 0x9200
 80012d8:	b025      	add	sp, #148	; 0x94
 80012da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012de:	bf00      	nop
 80012e0:	08005070 	.word	0x08005070

080012e4 <crypto_sign_signature>:
int crypto_sign_signature(uint8_t *sig,
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk,uint8_t *p)
{
 80012e4:	b530      	push	{r4, r5, lr}
 80012e6:	f5ad 5d48 	sub.w	sp, sp, #12800	; 0x3200
 80012ea:	b081      	sub	sp, #4
 80012ec:	461d      	mov	r5, r3
  tr = rho + SEEDBYTES;
  key = tr + TRBYTES;
  rnd = key + SEEDBYTES;
  mu = rnd + RNDBYTES;
  rhoprime = mu + CRHBYTES;
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 80012ee:	f50d 5348 	add.w	r3, sp, #12800	; 0x3200
 80012f2:	3310      	adds	r3, #16
 80012f4:	a940      	add	r1, sp, #256	; 0x100
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	9302      	str	r3, [sp, #8]
 80012fa:	f50d 5308 	add.w	r3, sp, #8704	; 0x2200
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f50d 5390 	add.w	r3, sp, #4608	; 0x1200
 8001304:	f1a1 0020 	sub.w	r0, r1, #32
{
 8001308:	4614      	mov	r4, r2
  unpack_sk(rho, tr, key, &t0, s1_prime, s2_prime, sk);
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	aa50      	add	r2, sp, #320	; 0x140
 800130e:	ab80      	add	r3, sp, #512	; 0x200
 8001310:	f000 f8bb 	bl	800148a <pqcrystals_dilithium_unpack_sk>

  /* Compute mu = CRH(tr, msg) */
  shake256_inc_init(&state);
 8001314:	a804      	add	r0, sp, #16
 8001316:	f000 fcf7 	bl	8001d08 <shake256_inc_init>
  shake256_inc_absorb(&state, tr, TRBYTES);
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	a940      	add	r1, sp, #256	; 0x100
 800131e:	a804      	add	r0, sp, #16
 8001320:	f000 fcf4 	bl	8001d0c <shake256_inc_absorb>
  shake256_inc_absorb(&state, m, mlen);
 8001324:	462a      	mov	r2, r5
 8001326:	4621      	mov	r1, r4
 8001328:	a804      	add	r0, sp, #16
 800132a:	f000 fcef 	bl	8001d0c <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 800132e:	a804      	add	r0, sp, #16
 8001330:	f000 fcf1 	bl	8001d16 <shake256_inc_finalize>
  shake256_inc_squeeze(mu, CRHBYTES, &state);
 8001334:	aa04      	add	r2, sp, #16
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	a860      	add	r0, sp, #384	; 0x180
 800133a:	f000 fcf0 	bl	8001d1e <shake256_inc_squeeze>

  for (n = 0; n < RNDBYTES; n++) {
     rnd[n] = 0;
 800133e:	2220      	movs	r2, #32
 8001340:	2100      	movs	r1, #0
 8001342:	a858      	add	r0, sp, #352	; 0x160
 8001344:	f002 fdf6 	bl	8003f34 <memset>
  }
  
  trigger_high();
 8001348:	f000 fea4 	bl	8002094 <trigger_high>
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	aa50      	add	r2, sp, #320	; 0x140
 8001350:	2140      	movs	r1, #64	; 0x40
 8001352:	a870      	add	r0, sp, #448	; 0x1c0
 8001354:	f000 fce6 	bl	8001d24 <shake256>
  trigger_low();
 8001358:	f000 fea4 	bl	80020a4 <trigger_low>
  
  for(int ii=20; ii < CRHBYTES;ii++)
	  p[ii] = rhoprime[ii];
 800135c:	f50d 5348 	add.w	r3, sp, #12800	; 0x3200
 8001360:	3314      	adds	r3, #20
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	ad75      	add	r5, sp, #468	; 0x1d4
 8001366:	3214      	adds	r2, #20
 8001368:	ab7f      	add	r3, sp, #508	; 0x1fc
 800136a:	462c      	mov	r4, r5
 800136c:	cc03      	ldmia	r4!, {r0, r1}
 800136e:	429c      	cmp	r4, r3
 8001370:	6010      	str	r0, [r2, #0]
 8001372:	6051      	str	r1, [r2, #4]
 8001374:	4625      	mov	r5, r4
 8001376:	f102 0208 	add.w	r2, r2, #8
 800137a:	d1f6      	bne.n	800136a <crypto_sign_signature+0x86>
 800137c:	6820      	ldr	r0, [r4, #0]
 800137e:	6010      	str	r0, [r2, #0]
  
  
  /* Expand matrix and transform vectors */
  
  return 0;
}
 8001380:	2000      	movs	r0, #0
 8001382:	f50d 5d48 	add.w	sp, sp, #12800	; 0x3200
 8001386:	b001      	add	sp, #4
 8001388:	bd30      	pop	{r4, r5, pc}

0800138a <crypto_sign>:
int crypto_sign(uint8_t *sm,
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk,uint8_t *p)
{
 800138a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800138c:	460d      	mov	r5, r1
 800138e:	461c      	mov	r4, r3
 8001390:	18d1      	adds	r1, r2, r3
 8001392:	f603 1374 	addw	r3, r3, #2420	; 0x974
 8001396:	4403      	add	r3, r0
  size_t i;

  for(i = 0; i < mlen; ++i)
 8001398:	4291      	cmp	r1, r2
 800139a:	d10f      	bne.n	80013bc <crypto_sign+0x32>
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,p);
 800139c:	9b07      	ldr	r3, [sp, #28]
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	9b06      	ldr	r3, [sp, #24]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	f600 1274 	addw	r2, r0, #2420	; 0x974
 80013a8:	4623      	mov	r3, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff ff9a 	bl	80012e4 <crypto_sign_signature>
  *smlen += mlen;
 80013b0:	682b      	ldr	r3, [r5, #0]
  return 0;
}
 80013b2:	2000      	movs	r0, #0
  *smlen += mlen;
 80013b4:	4423      	add	r3, r4
 80013b6:	602b      	str	r3, [r5, #0]
}
 80013b8:	b002      	add	sp, #8
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 80013bc:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
 80013c0:	f803 6d01 	strb.w	r6, [r3, #-1]!
  for(i = 0; i < mlen; ++i)
 80013c4:	e7e8      	b.n	8001398 <crypto_sign+0xe>

080013c6 <pqcrystals_dilithium_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 80013c6:	b570      	push	{r4, r5, r6, lr}
 80013c8:	4603      	mov	r3, r0
 80013ca:	4615      	mov	r5, r2
 80013cc:	3801      	subs	r0, #1
 80013ce:	1e4a      	subs	r2, r1, #1
 80013d0:	311f      	adds	r1, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = rho[i];
 80013d2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80013d6:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80013da:	428a      	cmp	r2, r1
 80013dc:	d1f9      	bne.n	80013d2 <pqcrystals_dilithium_pack_pk+0xc>
 80013de:	f103 0620 	add.w	r6, r3, #32
 80013e2:	f503 64a4 	add.w	r4, r3, #1312	; 0x520
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 80013e6:	4629      	mov	r1, r5
 80013e8:	4630      	mov	r0, r6
  for(i = 0; i < K; ++i)
 80013ea:	f506 76a0 	add.w	r6, r6, #320	; 0x140
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 80013ee:	f000 f99f 	bl	8001730 <pqcrystals_dilithium_polyt1_pack>
  for(i = 0; i < K; ++i)
 80013f2:	42a6      	cmp	r6, r4
 80013f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f8:	d1f5      	bne.n	80013e6 <pqcrystals_dilithium_pack_pk+0x20>
}
 80013fa:	bd70      	pop	{r4, r5, r6, pc}

080013fc <pqcrystals_dilithium_pack_sk>:
             const uint8_t tr[TRBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	4605      	mov	r5, r0
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8001400:	1e6c      	subs	r4, r5, #1
 8001402:	1e48      	subs	r0, r1, #1
 8001404:	311f      	adds	r1, #31
    sk[i] = rho[i];
 8001406:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 800140a:	f804 6f01 	strb.w	r6, [r4, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 800140e:	4288      	cmp	r0, r1
 8001410:	d1f9      	bne.n	8001406 <pqcrystals_dilithium_pack_sk+0xa>
 8001412:	1e59      	subs	r1, r3, #1
 8001414:	f105 001f 	add.w	r0, r5, #31
 8001418:	331f      	adds	r3, #31
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
 800141a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800141e:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8001422:	4299      	cmp	r1, r3
 8001424:	d1f9      	bne.n	800141a <pqcrystals_dilithium_pack_sk+0x1e>
  sk += SEEDBYTES;

  for(i = 0; i < TRBYTES; ++i)
 8001426:	1e53      	subs	r3, r2, #1
 8001428:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 800142c:	323f      	adds	r2, #63	; 0x3f
    sk[i] = tr[i];
 800142e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001432:	f801 0f01 	strb.w	r0, [r1, #1]!
  for(i = 0; i < TRBYTES; ++i)
 8001436:	4293      	cmp	r3, r2
 8001438:	d1f9      	bne.n	800142e <pqcrystals_dilithium_pack_sk+0x32>
  sk += TRBYTES;

  for(i = 0; i < L; ++i)
 800143a:	9e07      	ldr	r6, [sp, #28]
 800143c:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8001440:	f505 7700 	add.w	r7, r5, #512	; 0x200
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 8001444:	4631      	mov	r1, r6
 8001446:	4620      	mov	r0, r4
  for(i = 0; i < L; ++i)
 8001448:	3460      	adds	r4, #96	; 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 800144a:	f000 f92f 	bl	80016ac <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < L; ++i)
 800144e:	42bc      	cmp	r4, r7
 8001450:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001454:	d1f6      	bne.n	8001444 <pqcrystals_dilithium_pack_sk+0x48>
  sk += L*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
 8001456:	9e08      	ldr	r6, [sp, #32]
 8001458:	f505 7760 	add.w	r7, r5, #896	; 0x380
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 800145c:	4631      	mov	r1, r6
 800145e:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 8001460:	3460      	adds	r4, #96	; 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 8001462:	f000 f923 	bl	80016ac <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < K; ++i)
 8001466:	42bc      	cmp	r4, r7
 8001468:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800146c:	d1f6      	bne.n	800145c <pqcrystals_dilithium_pack_sk+0x60>
  sk += K*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
 800146e:	9e06      	ldr	r6, [sp, #24]
 8001470:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 8001474:	4631      	mov	r1, r6
 8001476:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 8001478:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 800147c:	f000 f978 	bl	8001770 <pqcrystals_dilithium_polyt0_pack>
  for(i = 0; i < K; ++i)
 8001480:	42ac      	cmp	r4, r5
 8001482:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001486:	d1f5      	bne.n	8001474 <pqcrystals_dilithium_pack_sk+0x78>
}
 8001488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800148a <pqcrystals_dilithium_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               smallpoly s1[L],
               smallpoly s2[K],
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 800148a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148e:	9d08      	ldr	r5, [sp, #32]
 8001490:	461e      	mov	r6, r3
 8001492:	1e6c      	subs	r4, r5, #1
 8001494:	3801      	subs	r0, #1
 8001496:	f105 031f 	add.w	r3, r5, #31
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = sk[i];
 800149a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 800149e:	f800 7f01 	strb.w	r7, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d1f9      	bne.n	800149a <pqcrystals_dilithium_unpack_sk+0x10>
 80014a6:	3a01      	subs	r2, #1
 80014a8:	f105 033f 	add.w	r3, r5, #63	; 0x3f
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
 80014ac:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80014b0:	f802 0f01 	strb.w	r0, [r2, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 80014b4:	429c      	cmp	r4, r3
 80014b6:	d1f9      	bne.n	80014ac <pqcrystals_dilithium_unpack_sk+0x22>
  sk += SEEDBYTES;

  for(i = 0; i < TRBYTES; ++i)
 80014b8:	3901      	subs	r1, #1
 80014ba:	f105 037f 	add.w	r3, r5, #127	; 0x7f
    tr[i] = sk[i];
 80014be:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80014c2:	f801 2f01 	strb.w	r2, [r1, #1]!
  for(i = 0; i < TRBYTES; ++i)
 80014c6:	429c      	cmp	r4, r3
 80014c8:	d1f9      	bne.n	80014be <pqcrystals_dilithium_unpack_sk+0x34>
  sk += TRBYTES;

  for(i=0; i < L; ++i)
 80014ca:	9f06      	ldr	r7, [sp, #24]
 80014cc:	f105 0480 	add.w	r4, r5, #128	; 0x80
 80014d0:	f505 7800 	add.w	r8, r5, #512	; 0x200
    small_polyeta_unpack(&s1[i], sk + i*POLYETA_PACKEDBYTES);
 80014d4:	4621      	mov	r1, r4
 80014d6:	4638      	mov	r0, r7
  for(i=0; i < L; ++i)
 80014d8:	3460      	adds	r4, #96	; 0x60
    small_polyeta_unpack(&s1[i], sk + i*POLYETA_PACKEDBYTES);
 80014da:	f000 fb18 	bl	8001b0e <small_polyeta_unpack>
  for(i=0; i < L; ++i)
 80014de:	4544      	cmp	r4, r8
 80014e0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80014e4:	d1f6      	bne.n	80014d4 <pqcrystals_dilithium_unpack_sk+0x4a>
  sk += L*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
 80014e6:	9f07      	ldr	r7, [sp, #28]
 80014e8:	f505 7860 	add.w	r8, r5, #896	; 0x380
    small_polyeta_unpack(&s2[i], sk + i*POLYETA_PACKEDBYTES);
 80014ec:	4621      	mov	r1, r4
 80014ee:	4638      	mov	r0, r7
  for(i=0; i < K; ++i)
 80014f0:	3460      	adds	r4, #96	; 0x60
    small_polyeta_unpack(&s2[i], sk + i*POLYETA_PACKEDBYTES);
 80014f2:	f000 fb0c 	bl	8001b0e <small_polyeta_unpack>
  for(i=0; i < K; ++i)
 80014f6:	4544      	cmp	r4, r8
 80014f8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80014fc:	d1f6      	bne.n	80014ec <pqcrystals_dilithium_unpack_sk+0x62>
  sk += K*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
 80014fe:	f505 6520 	add.w	r5, r5, #2560	; 0xa00
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8001502:	4621      	mov	r1, r4
 8001504:	4630      	mov	r0, r6
  for(i=0; i < K; ++i)
 8001506:	f504 74d0 	add.w	r4, r4, #416	; 0x1a0
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 800150a:	f000 f97f 	bl	800180c <pqcrystals_dilithium_polyt0_unpack>
  for(i=0; i < K; ++i)
 800150e:	42ac      	cmp	r4, r5
 8001510:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001514:	d1f5      	bne.n	8001502 <pqcrystals_dilithium_unpack_sk+0x78>
}
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800151a <rej_eta.constprop.0>:
*              - unsigned int buflen: length of array of random bytes
*
* Returns number of sampled coefficients. Can be smaller than len if not enough
* random bytes were given.
**************************************************/
static unsigned int rej_eta(int32_t *a,
 800151a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(t0 < 15) {
      t0 = t0 - (205*t0 >> 10)*5;
      a[ctr++] = 2 - t0;
    }
    if(t1 < 15 && ctr < len) {
      t1 = t1 - (205*t1 >> 10)*5;
 800151c:	f04f 0ccd 	mov.w	ip, #205	; 0xcd
static unsigned int rej_eta(int32_t *a,
 8001520:	4606      	mov	r6, r0
  while(ctr < len && pos < buflen) {
 8001522:	1e57      	subs	r7, r2, #1
 8001524:	f102 0487 	add.w	r4, r2, #135	; 0x87
  ctr = pos = 0;
 8001528:	2000      	movs	r0, #0
    t0 = buf[pos] & 0x0F;
 800152a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800152e:	f003 0e0f 	and.w	lr, r3, #15
    if(t0 < 15) {
 8001532:	f1be 0f0f 	cmp.w	lr, #15
    t1 = buf[pos++] >> 4;
 8001536:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if(t0 < 15) {
 800153a:	d023      	beq.n	8001584 <rej_eta.constprop.0+0x6a>
      t0 = t0 - (205*t0 >> 10)*5;
 800153c:	fb1e f20c 	smulbb	r2, lr, ip
 8001540:	0a92      	lsrs	r2, r2, #10
 8001542:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      a[ctr++] = 2 - t0;
 8001546:	f1ce 0e02 	rsb	lr, lr, #2
 800154a:	4472      	add	r2, lr
    if(t1 < 15 && ctr < len) {
 800154c:	2b0f      	cmp	r3, #15
      a[ctr++] = 2 - t0;
 800154e:	f846 2020 	str.w	r2, [r6, r0, lsl #2]
 8001552:	f100 0501 	add.w	r5, r0, #1
    if(t1 < 15 && ctr < len) {
 8001556:	d011      	beq.n	800157c <rej_eta.constprop.0+0x62>
 8001558:	428d      	cmp	r5, r1
 800155a:	d211      	bcs.n	8001580 <rej_eta.constprop.0+0x66>
      t1 = t1 - (205*t1 >> 10)*5;
 800155c:	fb13 f20c 	smulbb	r2, r3, ip
 8001560:	0a92      	lsrs	r2, r2, #10
 8001562:	eb02 0282 	add.w	r2, r2, r2, lsl #2
      a[ctr++] = 2 - t1;
 8001566:	f1c3 0302 	rsb	r3, r3, #2
 800156a:	441a      	add	r2, r3
 800156c:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
 8001570:	1c68      	adds	r0, r5, #1
  while(ctr < len && pos < buflen) {
 8001572:	4281      	cmp	r1, r0
 8001574:	d901      	bls.n	800157a <rej_eta.constprop.0+0x60>
 8001576:	42a7      	cmp	r7, r4
 8001578:	d1d7      	bne.n	800152a <rej_eta.constprop.0+0x10>
#endif
  }

  DBENCH_STOP(*tsample);
  return ctr;
}
 800157a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      a[ctr++] = 2 - t0;
 800157c:	4628      	mov	r0, r5
 800157e:	e7f8      	b.n	8001572 <rej_eta.constprop.0+0x58>
 8001580:	4628      	mov	r0, r5
  return ctr;
 8001582:	e7fa      	b.n	800157a <rej_eta.constprop.0+0x60>
    if(t1 < 15 && ctr < len) {
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d0f4      	beq.n	8001572 <rej_eta.constprop.0+0x58>
 8001588:	4605      	mov	r5, r0
 800158a:	e7e7      	b.n	800155c <rej_eta.constprop.0+0x42>

0800158c <pqcrystals_dilithium_poly_reduce>:
  asm_reduce32(a->coeffs);
 800158c:	f7ff bbb4 	b.w	8000cf8 <pqcrystals_dilithium_asm_reduce32>

08001590 <pqcrystals_dilithium_poly_caddq>:
  asm_caddq(a->coeffs);
 8001590:	f7ff bc62 	b.w	8000e58 <pqcrystals_dilithium_asm_caddq>

08001594 <pqcrystals_dilithium_poly_add>:
void poly_add(poly *c, const poly *a, const poly *b)  {
 8001594:	b530      	push	{r4, r5, lr}
  for(i = 0; i < N; ++i)
 8001596:	2300      	movs	r3, #0
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8001598:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800159c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80015a0:	442c      	add	r4, r5
 80015a2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for(i = 0; i < N; ++i)
 80015a6:	3301      	adds	r3, #1
 80015a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ac:	d1f4      	bne.n	8001598 <pqcrystals_dilithium_poly_add+0x4>
}
 80015ae:	bd30      	pop	{r4, r5, pc}

080015b0 <pqcrystals_dilithium_poly_ntt>:
  ntt(a->coeffs);
 80015b0:	f7fe be0c 	b.w	80001cc <pqcrystals_dilithium_ntt>

080015b4 <pqcrystals_dilithium_poly_invntt_tomont>:
  invntt_tomont(a->coeffs);
 80015b4:	f7ff b8ee 	b.w	8000794 <pqcrystals_dilithium_invntt_tomont>

080015b8 <pqcrystals_dilithium_poly_pointwise_montgomery>:
  asm_pointwise_montgomery(c->coeffs, a->coeffs, b->coeffs);
 80015b8:	f7ff bb0a 	b.w	8000bd0 <pqcrystals_dilithium_asm_pointwise_montgomery>

080015bc <pqcrystals_dilithium_poly_pointwise_acc_montgomery>:
  asm_pointwise_acc_montgomery(c->coeffs, a->coeffs, b->coeffs);
 80015bc:	f7ff bb4a 	b.w	8000c54 <pqcrystals_dilithium_asm_pointwise_acc_montgomery>

080015c0 <pqcrystals_dilithium_poly_power2round>:
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	4605      	mov	r5, r0
 80015c4:	460e      	mov	r6, r1
 80015c6:	4617      	mov	r7, r2
 80015c8:	2400      	movs	r4, #0
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 80015ca:	5939      	ldr	r1, [r7, r4]
 80015cc:	1930      	adds	r0, r6, r4
 80015ce:	f000 fa62 	bl	8001a96 <pqcrystals_dilithium_power2round>
 80015d2:	5128      	str	r0, [r5, r4]
  for(i = 0; i < N; ++i)
 80015d4:	3404      	adds	r4, #4
 80015d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80015da:	d1f6      	bne.n	80015ca <pqcrystals_dilithium_poly_power2round+0xa>
}
 80015dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015de <pqcrystals_dilithium_poly_uniform>:
{
 80015de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e2:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80015e6:	4607      	mov	r7, r0
  stream128_init(&state, seed, nonce);
 80015e8:	4668      	mov	r0, sp
 80015ea:	f000 fa5e 	bl	8001aaa <pqcrystals_dilithium_dilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 80015ee:	466a      	mov	r2, sp
 80015f0:	f44f 7152 	mov.w	r1, #840	; 0x348
 80015f4:	a835      	add	r0, sp, #212	; 0xd4
 80015f6:	f000 fb84 	bl	8001d02 <shake128_inc_squeeze>
  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 80015fa:	f44f 7352 	mov.w	r3, #840	; 0x348
 80015fe:	aa35      	add	r2, sp, #212	; 0xd4
 8001600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001604:	4638      	mov	r0, r7
 8001606:	f7ff fc6f 	bl	8000ee8 <pqcrystals_dilithium_asm_rej_uniform>
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 800160a:	f44f 7552 	mov.w	r5, #840	; 0x348
  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 800160e:	4604      	mov	r4, r0
    off = buflen % 3;
 8001610:	f04f 0803 	mov.w	r8, #3
  while(ctr < N) {
 8001614:	2cff      	cmp	r4, #255	; 0xff
 8001616:	d903      	bls.n	8001620 <pqcrystals_dilithium_poly_uniform+0x42>
}
 8001618:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 800161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = buflen % 3;
 8001620:	fbb5 f2f8 	udiv	r2, r5, r8
 8001624:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001628:	1aa9      	subs	r1, r5, r2
    for(i = 0; i < off; ++i)
 800162a:	ab35      	add	r3, sp, #212	; 0xd4
 800162c:	2600      	movs	r6, #0
      buf[i] = buf[buflen - off + i];
 800162e:	1b52      	subs	r2, r2, r5
    for(i = 0; i < off; ++i)
 8001630:	428e      	cmp	r6, r1
 8001632:	d111      	bne.n	8001658 <pqcrystals_dilithium_poly_uniform+0x7a>
    stream128_squeezeblocks(buf + off, 1, &state);
 8001634:	ab35      	add	r3, sp, #212	; 0xd4
 8001636:	1998      	adds	r0, r3, r6
 8001638:	466a      	mov	r2, sp
 800163a:	21a8      	movs	r1, #168	; 0xa8
    buflen = STREAM128_BLOCKBYTES + off;
 800163c:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
    stream128_squeezeblocks(buf + off, 1, &state);
 8001640:	f000 fb5f 	bl	8001d02 <shake128_inc_squeeze>
    ctr += asm_rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 8001644:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 8001648:	eb07 0084 	add.w	r0, r7, r4, lsl #2
 800164c:	462b      	mov	r3, r5
 800164e:	aa35      	add	r2, sp, #212	; 0xd4
 8001650:	f7ff fc4a 	bl	8000ee8 <pqcrystals_dilithium_asm_rej_uniform>
 8001654:	4404      	add	r4, r0
 8001656:	e7dd      	b.n	8001614 <pqcrystals_dilithium_poly_uniform+0x36>
      buf[i] = buf[buflen - off + i];
 8001658:	18e8      	adds	r0, r5, r3
    for(i = 0; i < off; ++i)
 800165a:	3601      	adds	r6, #1
      buf[i] = buf[buflen - off + i];
 800165c:	5c80      	ldrb	r0, [r0, r2]
 800165e:	f803 0b01 	strb.w	r0, [r3], #1
    for(i = 0; i < off; ++i)
 8001662:	e7e5      	b.n	8001630 <pqcrystals_dilithium_poly_uniform+0x52>

08001664 <pqcrystals_dilithium_poly_uniform_eta>:
#elif ETA == 4
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
        const uint8_t seed[CRHBYTES],
        uint16_t nonce) {
 8001664:	b530      	push	{r4, r5, lr}
 8001666:	b0d7      	sub	sp, #348	; 0x15c
 8001668:	4605      	mov	r5, r0
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 800166a:	a822      	add	r0, sp, #136	; 0x88
 800166c:	f000 fa36 	bl	8001adc <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 8001670:	aa22      	add	r2, sp, #136	; 0x88
 8001672:	2188      	movs	r1, #136	; 0x88
 8001674:	4668      	mov	r0, sp
 8001676:	f000 fb52 	bl	8001d1e <shake256_inc_squeeze>

  ctr = rej_eta(a->coeffs, N, buf, buflen);
 800167a:	466a      	mov	r2, sp
 800167c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001680:	4628      	mov	r0, r5
 8001682:	f7ff ff4a 	bl	800151a <rej_eta.constprop.0>
 8001686:	4604      	mov	r4, r0

  while(ctr < N) {
 8001688:	2cff      	cmp	r4, #255	; 0xff
 800168a:	d901      	bls.n	8001690 <pqcrystals_dilithium_poly_uniform_eta+0x2c>
    stream256_squeezeblocks(buf, 1, &state);
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
  }
}
 800168c:	b057      	add	sp, #348	; 0x15c
 800168e:	bd30      	pop	{r4, r5, pc}
    stream256_squeezeblocks(buf, 1, &state);
 8001690:	aa22      	add	r2, sp, #136	; 0x88
 8001692:	2188      	movs	r1, #136	; 0x88
 8001694:	4668      	mov	r0, sp
 8001696:	f000 fb42 	bl	8001d1e <shake256_inc_squeeze>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 800169a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
 800169e:	eb05 0084 	add.w	r0, r5, r4, lsl #2
 80016a2:	466a      	mov	r2, sp
 80016a4:	f7ff ff39 	bl	800151a <rej_eta.constprop.0>
 80016a8:	4404      	add	r4, r0
 80016aa:	e7ed      	b.n	8001688 <pqcrystals_dilithium_poly_uniform_eta+0x24>

080016ac <pqcrystals_dilithium_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b0:	f501 6580 	add.w	r5, r1, #1024	; 0x400

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    t[0] = ETA - a->coeffs[8*i+0];
    t[1] = ETA - a->coeffs[8*i+1];
    t[2] = ETA - a->coeffs[8*i+2];
 80016b4:	688b      	ldr	r3, [r1, #8]
    t[3] = ETA - a->coeffs[8*i+3];
    t[4] = ETA - a->coeffs[8*i+4];
    t[5] = ETA - a->coeffs[8*i+5];
 80016b6:	694c      	ldr	r4, [r1, #20]
    t[1] = ETA - a->coeffs[8*i+1];
 80016b8:	684f      	ldr	r7, [r1, #4]
    t[6] = ETA - a->coeffs[8*i+6];
    t[7] = ETA - a->coeffs[8*i+7];
 80016ba:	69ca      	ldr	r2, [r1, #28]
    t[6] = ETA - a->coeffs[8*i+6];
 80016bc:	698e      	ldr	r6, [r1, #24]
    t[2] = ETA - a->coeffs[8*i+2];
 80016be:	f1c3 0302 	rsb	r3, r3, #2
 80016c2:	fa5f fc83 	uxtb.w	ip, r3
    t[3] = ETA - a->coeffs[8*i+3];
 80016c6:	68cb      	ldr	r3, [r1, #12]
 80016c8:	f1c3 0302 	rsb	r3, r3, #2
 80016cc:	fa5f fe83 	uxtb.w	lr, r3
    t[4] = ETA - a->coeffs[8*i+4];
 80016d0:	690b      	ldr	r3, [r1, #16]
 80016d2:	f1c3 0302 	rsb	r3, r3, #2
 80016d6:	b2db      	uxtb	r3, r3

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 80016d8:	011b      	lsls	r3, r3, #4
    t[1] = ETA - a->coeffs[8*i+1];
 80016da:	f1c7 0702 	rsb	r7, r7, #2
    t[5] = ETA - a->coeffs[8*i+5];
 80016de:	f1c4 0402 	rsb	r4, r4, #2
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 80016e2:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 80016e6:	fa5f f887 	uxtb.w	r8, r7
    t[5] = ETA - a->coeffs[8*i+5];
 80016ea:	b2e4      	uxtb	r4, r4
    t[7] = ETA - a->coeffs[8*i+7];
 80016ec:	f1c2 0202 	rsb	r2, r2, #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 80016f0:	ea4f 178c 	mov.w	r7, ip, lsl #6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 80016f4:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 80016f8:	ea47 07c8 	orr.w	r7, r7, r8, lsl #3
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 80016fc:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
    t[0] = ETA - a->coeffs[8*i+0];
 8001700:	f851 8b20 	ldr.w	r8, [r1], #32
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8001704:	7043      	strb	r3, [r0, #1]
    t[6] = ETA - a->coeffs[8*i+6];
 8001706:	f1c6 0602 	rsb	r6, r6, #2
    t[7] = ETA - a->coeffs[8*i+7];
 800170a:	b2d2      	uxtb	r2, r2
    t[6] = ETA - a->coeffs[8*i+6];
 800170c:	b2f6      	uxtb	r6, r6
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 800170e:	0153      	lsls	r3, r2, #5
    t[0] = ETA - a->coeffs[8*i+0];
 8001710:	f1c8 0802 	rsb	r8, r8, #2
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8001714:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001718:	ea47 0708 	orr.w	r7, r7, r8
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 800171c:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
  for(i = 0; i < N/8; ++i) {
 8001720:	428d      	cmp	r5, r1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8001722:	7007      	strb	r7, [r0, #0]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8001724:	7083      	strb	r3, [r0, #2]
  for(i = 0; i < N/8; ++i) {
 8001726:	f100 0003 	add.w	r0, r0, #3
 800172a:	d1c3      	bne.n	80016b4 <pqcrystals_dilithium_polyeta_pack+0x8>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
 800172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001730 <pqcrystals_dilithium_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 8001730:	b510      	push	{r4, lr}
 8001732:	f501 6280 	add.w	r2, r1, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8001736:	680b      	ldr	r3, [r1, #0]
 8001738:	7003      	strb	r3, [r0, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 800173a:	e9d1 4300 	ldrd	r4, r3, [r1]
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8001744:	7043      	strb	r3, [r0, #1]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8001746:	e9d1 4301 	ldrd	r4, r3, [r1, #4]
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 8001750:	7083      	strb	r3, [r0, #2]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 8001752:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8001756:	019b      	lsls	r3, r3, #6
 8001758:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 800175c:	70c3      	strb	r3, [r0, #3]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 800175e:	68cb      	ldr	r3, [r1, #12]
  for(i = 0; i < N/4; ++i) {
 8001760:	3110      	adds	r1, #16
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8001762:	109b      	asrs	r3, r3, #2
  for(i = 0; i < N/4; ++i) {
 8001764:	4291      	cmp	r1, r2
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 8001766:	7103      	strb	r3, [r0, #4]
  for(i = 0; i < N/4; ++i) {
 8001768:	f100 0005 	add.w	r0, r0, #5
 800176c:	d1e3      	bne.n	8001736 <pqcrystals_dilithium_polyt1_pack+0x6>
  }

  DBENCH_STOP(*tpack);
}
 800176e:	bd10      	pop	{r4, pc}

08001770 <pqcrystals_dilithium_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8001770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001774:	f500 7cd0 	add.w	ip, r0, #416	; 0x1a0
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8001778:	694d      	ldr	r5, [r1, #20]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 800177a:	684c      	ldr	r4, [r1, #4]
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 800177c:	680f      	ldr	r7, [r1, #0]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 800177e:	688e      	ldr	r6, [r1, #8]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8001780:	68ca      	ldr	r2, [r1, #12]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8001782:	690b      	ldr	r3, [r1, #16]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8001784:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8001788:	f5c5 5880 	rsb	r8, r5, #4096	; 0x1000
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 800178c:	698d      	ldr	r5, [r1, #24]
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 800178e:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];

    r[13*i+ 0]  =  t[0];
    r[13*i+ 1]  =  t[0] >>  8;
    r[13*i+ 1] |=  t[1] <<  5;
 8001792:	ea4f 1944 	mov.w	r9, r4, lsl #5
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8001796:	f5c5 5e80 	rsb	lr, r5, #4096	; 0x1000
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 800179a:	69cd      	ldr	r5, [r1, #28]
    r[13*i+ 0]  =  t[0];
 800179c:	7007      	strb	r7, [r0, #0]
    r[13*i+ 1] |=  t[1] <<  5;
 800179e:	ea49 2717 	orr.w	r7, r9, r7, lsr #8
 80017a2:	7047      	strb	r7, [r0, #1]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 80017a4:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
    r[13*i+ 2]  =  t[1] >>  3;
 80017a8:	08e7      	lsrs	r7, r4, #3
 80017aa:	7087      	strb	r7, [r0, #2]
    r[13*i+ 3]  =  t[1] >> 11;
    r[13*i+ 3] |=  t[2] <<  2;
 80017ac:	00b7      	lsls	r7, r6, #2
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 80017ae:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
    r[13*i+ 3] |=  t[2] <<  2;
 80017b2:	ea47 24d4 	orr.w	r4, r7, r4, lsr #11
 80017b6:	70c4      	strb	r4, [r0, #3]
    r[13*i+ 4]  =  t[2] >>  6;
    r[13*i+ 4] |=  t[3] <<  7;
 80017b8:	01d4      	lsls	r4, r2, #7
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 80017ba:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    r[13*i+ 4] |=  t[3] <<  7;
 80017be:	ea44 1696 	orr.w	r6, r4, r6, lsr #6
    r[13*i+ 5]  =  t[3] >>  1;
 80017c2:	0854      	lsrs	r4, r2, #1
 80017c4:	7144      	strb	r4, [r0, #5]
    r[13*i+ 6]  =  t[3] >>  9;
    r[13*i+ 6] |=  t[4] <<  4;
 80017c6:	011c      	lsls	r4, r3, #4
 80017c8:	ea44 2252 	orr.w	r2, r4, r2, lsr #9
 80017cc:	7182      	strb	r2, [r0, #6]
    r[13*i+ 7]  =  t[4] >>  4;
 80017ce:	091a      	lsrs	r2, r3, #4
 80017d0:	71c2      	strb	r2, [r0, #7]
    r[13*i+ 8]  =  t[4] >> 12;
    r[13*i+ 8] |=  t[5] <<  1;
 80017d2:	ea4f 0248 	mov.w	r2, r8, lsl #1
 80017d6:	ea42 3313 	orr.w	r3, r2, r3, lsr #12
 80017da:	7203      	strb	r3, [r0, #8]
    r[13*i+ 9]  =  t[5] >>  7;
    r[13*i+ 9] |=  t[6] <<  6;
 80017dc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80017e0:	ea43 13d8 	orr.w	r3, r3, r8, lsr #7
 80017e4:	7243      	strb	r3, [r0, #9]
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 80017e6:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
    r[13*i+10]  =  t[6] >>  2;
 80017ea:	ea4f 039e 	mov.w	r3, lr, lsr #2
 80017ee:	7283      	strb	r3, [r0, #10]
    r[13*i+11]  =  t[6] >> 10;
    r[13*i+11] |=  t[7] <<  3;
 80017f0:	00eb      	lsls	r3, r5, #3
 80017f2:	ea43 239e 	orr.w	r3, r3, lr, lsr #10
    r[13*i+12]  =  t[7] >>  5;
 80017f6:	096d      	lsrs	r5, r5, #5
    r[13*i+ 4] |=  t[3] <<  7;
 80017f8:	7106      	strb	r6, [r0, #4]
    r[13*i+11] |=  t[7] <<  3;
 80017fa:	72c3      	strb	r3, [r0, #11]
    r[13*i+12]  =  t[7] >>  5;
 80017fc:	7305      	strb	r5, [r0, #12]
  for(i = 0; i < N/8; ++i) {
 80017fe:	300d      	adds	r0, #13
 8001800:	4584      	cmp	ip, r0
 8001802:	f101 0120 	add.w	r1, r1, #32
 8001806:	d1b7      	bne.n	8001778 <pqcrystals_dilithium_polyt0_pack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 8001808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800180c <pqcrystals_dilithium_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 800180c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001810:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0]  = a[13*i+0];
 8001814:	780f      	ldrb	r7, [r1, #0]
 8001816:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 8001818:	784b      	ldrb	r3, [r1, #1]
 800181a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    r->coeffs[8*i+0] &= 0x1FFF;
 800181e:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8001822:	6007      	str	r7, [r0, #0]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8001824:	784d      	ldrb	r5, [r1, #1]
 8001826:	096d      	lsrs	r5, r5, #5
 8001828:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 800182a:	788b      	ldrb	r3, [r1, #2]
 800182c:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 8001830:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 8001832:	78cb      	ldrb	r3, [r1, #3]
 8001834:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
    r->coeffs[8*i+1] &= 0x1FFF;
 8001838:	f3c5 050c 	ubfx	r5, r5, #0, #13
 800183c:	6045      	str	r5, [r0, #4]

    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 800183e:	78ce      	ldrb	r6, [r1, #3]
 8001840:	08b6      	lsrs	r6, r6, #2
 8001842:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 8001844:	790b      	ldrb	r3, [r1, #4]
 8001846:	ea46 1683 	orr.w	r6, r6, r3, lsl #6
    r->coeffs[8*i+2] &= 0x1FFF;
 800184a:	f3c6 060c 	ubfx	r6, r6, #0, #13
 800184e:	6086      	str	r6, [r0, #8]

    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8001850:	790c      	ldrb	r4, [r1, #4]
 8001852:	09e4      	lsrs	r4, r4, #7
 8001854:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8001856:	794b      	ldrb	r3, [r1, #5]
 8001858:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 800185c:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 800185e:	798b      	ldrb	r3, [r1, #6]
 8001860:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
    r->coeffs[8*i+3] &= 0x1FFF;
 8001864:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8001868:	60c4      	str	r4, [r0, #12]

    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 800186a:	798a      	ldrb	r2, [r1, #6]
 800186c:	0912      	lsrs	r2, r2, #4
 800186e:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8001870:	79cb      	ldrb	r3, [r1, #7]
 8001872:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8001876:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8001878:	7a0b      	ldrb	r3, [r1, #8]
 800187a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    r->coeffs[8*i+4] &= 0x1FFF;
 800187e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001882:	6102      	str	r2, [r0, #16]

    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8001884:	7a0b      	ldrb	r3, [r1, #8]
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 800188a:	f891 e009 	ldrb.w	lr, [r1, #9]
 800188e:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
    r->coeffs[8*i+5] &= 0x1FFF;
 8001892:	f3c3 0e0c 	ubfx	lr, r3, #0, #13
 8001896:	f8c0 e014 	str.w	lr, [r0, #20]

    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 800189a:	7a4b      	ldrb	r3, [r1, #9]
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 80018a0:	f891 800a 	ldrb.w	r8, [r1, #10]
 80018a4:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
 80018a8:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 80018aa:	f891 800b 	ldrb.w	r8, [r1, #11]
 80018ae:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
    r->coeffs[8*i+6] &= 0x1FFF;
 80018b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018b6:	6183      	str	r3, [r0, #24]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 80018b8:	f891 800b 	ldrb.w	r8, [r1, #11]
 80018bc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80018c0:	f8c0 801c 	str.w	r8, [r0, #28]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 80018c4:	f891 900c 	ldrb.w	r9, [r1, #12]

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 80018c8:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 80018cc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 80018d0:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 80018d4:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 80018d6:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 80018d8:	f5c7 5780 	rsb	r7, r7, #4096	; 0x1000
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 80018dc:	f5c5 5580 	rsb	r5, r5, #4096	; 0x1000
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 80018e0:	f5c6 5680 	rsb	r6, r6, #4096	; 0x1000
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 80018e4:	f5c4 5480 	rsb	r4, r4, #4096	; 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 80018e8:	f5ce 5280 	rsb	r2, lr, #4096	; 0x1000
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 80018ec:	f5c8 5380 	rsb	r3, r8, #4096	; 0x1000
    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 80018f0:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 80018f2:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 80018f4:	6086      	str	r6, [r0, #8]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 80018f6:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 80018f8:	6142      	str	r2, [r0, #20]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 80018fa:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < N/8; ++i) {
 80018fc:	3020      	adds	r0, #32
 80018fe:	4560      	cmp	r0, ip
 8001900:	f101 010d 	add.w	r1, r1, #13
 8001904:	d186      	bne.n	8001814 <pqcrystals_dilithium_polyt0_unpack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 8001906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800190a <pqcrystals_dilithium_polyvec_matrix_expand>:
*              sampling on the output stream of SHAKE128(rho|j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 800190a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800190e:	4606      	mov	r6, r0
 8001910:	4688      	mov	r8, r1
  unsigned int i, j;

  for(i = 0; i < K; ++i)
 8001912:	2500      	movs	r5, #0
    for(j = 0; j < L; ++j)
 8001914:	022f      	lsls	r7, r5, #8
 8001916:	b2bf      	uxth	r7, r7
 8001918:	eb06 3905 	add.w	r9, r6, r5, lsl #12
 800191c:	2400      	movs	r4, #0
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 800191e:	193a      	adds	r2, r7, r4
 8001920:	eb09 2084 	add.w	r0, r9, r4, lsl #10
 8001924:	b292      	uxth	r2, r2
 8001926:	4641      	mov	r1, r8
    for(j = 0; j < L; ++j)
 8001928:	3401      	adds	r4, #1
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 800192a:	f7ff fe58 	bl	80015de <pqcrystals_dilithium_poly_uniform>
    for(j = 0; j < L; ++j)
 800192e:	2c04      	cmp	r4, #4
 8001930:	d1f5      	bne.n	800191e <pqcrystals_dilithium_polyvec_matrix_expand+0x14>
  for(i = 0; i < K; ++i)
 8001932:	3501      	adds	r5, #1
 8001934:	2d04      	cmp	r5, #4
 8001936:	d1ed      	bne.n	8001914 <pqcrystals_dilithium_polyvec_matrix_expand+0xa>
}
 8001938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800193c <pqcrystals_dilithium_polyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	4605      	mov	r5, r0
 8001940:	460e      	mov	r6, r1
 8001942:	4617      	mov	r7, r2
  unsigned int i;

  for(i = 0; i < L; ++i)
 8001944:	2400      	movs	r4, #0
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8001946:	193a      	adds	r2, r7, r4
 8001948:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 800194c:	b292      	uxth	r2, r2
 800194e:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 8001950:	3401      	adds	r4, #1
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8001952:	f7ff fe87 	bl	8001664 <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < L; ++i)
 8001956:	2c04      	cmp	r4, #4
 8001958:	d1f5      	bne.n	8001946 <pqcrystals_dilithium_polyvecl_uniform_eta+0xa>
}
 800195a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800195c <pqcrystals_dilithium_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void polyvecl_ntt(polyvecl *v) {
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < L; ++i)
    poly_ntt(&v->vec[i]);
 8001960:	f7ff fe26 	bl	80015b0 <pqcrystals_dilithium_poly_ntt>
 8001964:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001968:	f7ff fe22 	bl	80015b0 <pqcrystals_dilithium_poly_ntt>
 800196c:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8001970:	f7ff fe1e 	bl	80015b0 <pqcrystals_dilithium_poly_ntt>
 8001974:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8001978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&v->vec[i]);
 800197c:	f7ff be18 	b.w	80015b0 <pqcrystals_dilithium_poly_ntt>

08001980 <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void polyvecl_pointwise_acc_montgomery(poly *w,
                                       const polyvecl *u,
                                       const polyvecl *v)
{
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	4605      	mov	r5, r0
 8001984:	460e      	mov	r6, r1
 8001986:	4617      	mov	r7, r2
  unsigned int i;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 8001988:	f7ff fe16 	bl	80015b8 <pqcrystals_dilithium_poly_pointwise_montgomery>
 800198c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  for(i = 1; i < L; ++i) {
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 8001990:	193a      	adds	r2, r7, r4
 8001992:	1931      	adds	r1, r6, r4
 8001994:	4628      	mov	r0, r5
  for(i = 1; i < L; ++i) {
 8001996:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 800199a:	f7ff fe0f 	bl	80015bc <pqcrystals_dilithium_poly_pointwise_acc_montgomery>
  for(i = 1; i < L; ++i) {
 800199e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80019a2:	d1f5      	bne.n	8001990 <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery+0x10>
  }
}
 80019a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019a6 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>:
void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 80019a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a8:	4616      	mov	r6, r2
 80019aa:	4604      	mov	r4, r0
 80019ac:	460d      	mov	r5, r1
 80019ae:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80019b2:	4629      	mov	r1, r5
 80019b4:	4620      	mov	r0, r4
 80019b6:	4632      	mov	r2, r6
  for(i = 0; i < K; ++i)
 80019b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80019bc:	f7ff ffe0 	bl	8001980 <pqcrystals_dilithium_polyvecl_pointwise_acc_montgomery>
  for(i = 0; i < K; ++i)
 80019c0:	42bc      	cmp	r4, r7
 80019c2:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 80019c6:	d1f4      	bne.n	80019b2 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery+0xc>
}
 80019c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019ca <pqcrystals_dilithium_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 80019ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019cc:	4605      	mov	r5, r0
 80019ce:	460e      	mov	r6, r1
 80019d0:	4617      	mov	r7, r2
  unsigned int i;

  for(i = 0; i < K; ++i)
 80019d2:	2400      	movs	r4, #0
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 80019d4:	193a      	adds	r2, r7, r4
 80019d6:	eb05 2084 	add.w	r0, r5, r4, lsl #10
 80019da:	b292      	uxth	r2, r2
 80019dc:	4631      	mov	r1, r6
  for(i = 0; i < K; ++i)
 80019de:	3401      	adds	r4, #1
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 80019e0:	f7ff fe40 	bl	8001664 <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < K; ++i)
 80019e4:	2c04      	cmp	r4, #4
 80019e6:	d1f5      	bne.n	80019d4 <pqcrystals_dilithium_polyveck_uniform_eta+0xa>
}
 80019e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019ea <pqcrystals_dilithium_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 80019ea:	b510      	push	{r4, lr}
 80019ec:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_reduce(&v->vec[i]);
 80019ee:	f7ff fdcd 	bl	800158c <pqcrystals_dilithium_poly_reduce>
 80019f2:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80019f6:	f7ff fdc9 	bl	800158c <pqcrystals_dilithium_poly_reduce>
 80019fa:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80019fe:	f7ff fdc5 	bl	800158c <pqcrystals_dilithium_poly_reduce>
 8001a02:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8001a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&v->vec[i]);
 8001a0a:	f7ff bdbf 	b.w	800158c <pqcrystals_dilithium_poly_reduce>

08001a0e <pqcrystals_dilithium_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8001a0e:	b510      	push	{r4, lr}
 8001a10:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_caddq(&v->vec[i]);
 8001a12:	f7ff fdbd 	bl	8001590 <pqcrystals_dilithium_poly_caddq>
 8001a16:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001a1a:	f7ff fdb9 	bl	8001590 <pqcrystals_dilithium_poly_caddq>
 8001a1e:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8001a22:	f7ff fdb5 	bl	8001590 <pqcrystals_dilithium_poly_caddq>
 8001a26:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8001a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_caddq(&v->vec[i]);
 8001a2e:	f7ff bdaf 	b.w	8001590 <pqcrystals_dilithium_poly_caddq>

08001a32 <pqcrystals_dilithium_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8001a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a34:	4605      	mov	r5, r0
 8001a36:	460e      	mov	r6, r1
 8001a38:	4617      	mov	r7, r2
 8001a3a:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8001a3c:	193a      	adds	r2, r7, r4
 8001a3e:	1931      	adds	r1, r6, r4
 8001a40:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8001a42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8001a46:	f7ff fda5 	bl	8001594 <pqcrystals_dilithium_poly_add>
  for(i = 0; i < K; ++i)
 8001a4a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001a4e:	d1f5      	bne.n	8001a3c <pqcrystals_dilithium_polyveck_add+0xa>
}
 8001a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a52 <pqcrystals_dilithium_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8001a52:	b510      	push	{r4, lr}
 8001a54:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_invntt_tomont(&v->vec[i]);
 8001a56:	f7ff fdad 	bl	80015b4 <pqcrystals_dilithium_poly_invntt_tomont>
 8001a5a:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8001a5e:	f7ff fda9 	bl	80015b4 <pqcrystals_dilithium_poly_invntt_tomont>
 8001a62:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8001a66:	f7ff fda5 	bl	80015b4 <pqcrystals_dilithium_poly_invntt_tomont>
 8001a6a:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
}
 8001a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_invntt_tomont(&v->vec[i]);
 8001a72:	f7ff bd9f 	b.w	80015b4 <pqcrystals_dilithium_poly_invntt_tomont>

08001a76 <pqcrystals_dilithium_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8001a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a78:	4605      	mov	r5, r0
 8001a7a:	460e      	mov	r6, r1
 8001a7c:	4617      	mov	r7, r2
 8001a7e:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8001a80:	193a      	adds	r2, r7, r4
 8001a82:	1931      	adds	r1, r6, r4
 8001a84:	1928      	adds	r0, r5, r4
  for(i = 0; i < K; ++i)
 8001a86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8001a8a:	f7ff fd99 	bl	80015c0 <pqcrystals_dilithium_poly_power2round>
  for(i = 0; i < K; ++i)
 8001a8e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001a92:	d1f5      	bne.n	8001a80 <pqcrystals_dilithium_polyveck_power2round+0xa>
}
 8001a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a96 <pqcrystals_dilithium_power2round>:
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 8001a96:	f601 72ff 	addw	r2, r1, #4095	; 0xfff
  *a0 = a - (a1 << D);
 8001a9a:	f422 53ff 	bic.w	r3, r2, #8160	; 0x1fe0
 8001a9e:	f023 031f 	bic.w	r3, r3, #31
 8001aa2:	1ac9      	subs	r1, r1, r3
 8001aa4:	6001      	str	r1, [r0, #0]
  return a1;
}
 8001aa6:	1350      	asrs	r0, r2, #13
 8001aa8:	4770      	bx	lr

08001aaa <pqcrystals_dilithium_dilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
 8001aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 8001ab0:	f88d 2004 	strb.w	r2, [sp, #4]
  t[1] = nonce >> 8;
 8001ab4:	0a12      	lsrs	r2, r2, #8
 8001ab6:	f88d 2005 	strb.w	r2, [sp, #5]

  shake128_inc_init(state);
 8001aba:	f000 f917 	bl	8001cec <shake128_inc_init>
  shake128_inc_absorb(state, seed, SEEDBYTES);
 8001abe:	4629      	mov	r1, r5
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f000 f914 	bl	8001cf0 <shake128_inc_absorb>
  shake128_inc_absorb(state, t, 2);
 8001ac8:	2202      	movs	r2, #2
 8001aca:	a901      	add	r1, sp, #4
 8001acc:	4620      	mov	r0, r4
 8001ace:	f000 f90f 	bl	8001cf0 <shake128_inc_absorb>
  shake128_inc_finalize(state);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f000 f911 	bl	8001cfa <shake128_inc_finalize>
}
 8001ad8:	b003      	add	sp, #12
 8001ada:	bd30      	pop	{r4, r5, pc}

08001adc <pqcrystals_dilithium_dilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
 8001adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ade:	4604      	mov	r4, r0
 8001ae0:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 8001ae2:	f88d 2004 	strb.w	r2, [sp, #4]
  t[1] = nonce >> 8;
 8001ae6:	0a12      	lsrs	r2, r2, #8
 8001ae8:	f88d 2005 	strb.w	r2, [sp, #5]

  shake256_inc_init(state);
 8001aec:	f000 f90c 	bl	8001d08 <shake256_inc_init>
  shake256_inc_absorb(state, seed, CRHBYTES);
 8001af0:	4629      	mov	r1, r5
 8001af2:	4620      	mov	r0, r4
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	f000 f909 	bl	8001d0c <shake256_inc_absorb>
  shake256_inc_absorb(state, t, 2);
 8001afa:	2202      	movs	r2, #2
 8001afc:	a901      	add	r1, sp, #4
 8001afe:	4620      	mov	r0, r4
 8001b00:	f000 f904 	bl	8001d0c <shake256_inc_absorb>
  shake256_inc_finalize(state);
 8001b04:	4620      	mov	r0, r4
 8001b06:	f000 f906 	bl	8001d16 <shake256_inc_finalize>
}
 8001b0a:	b003      	add	sp, #12
 8001b0c:	bd30      	pop	{r4, r5, pc}

08001b0e <small_polyeta_unpack>:
    for(i=0;i<L;i++){
        poly_small_basemul_invntt(&r->vec[i], a, aprime, &b[i]);
    }
}

void small_polyeta_unpack(smallpoly *r, const uint8_t *a) {
 8001b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b12:	f500 6580 	add.w	r5, r0, #1024	; 0x400
  unsigned int i;

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 8001b16:	780f      	ldrb	r7, [r1, #0]
 8001b18:	f007 0707 	and.w	r7, r7, #7
 8001b1c:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 8001b1e:	780e      	ldrb	r6, [r1, #0]
 8001b20:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 8001b24:	6046      	str	r6, [r0, #4]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 8001b26:	784b      	ldrb	r3, [r1, #1]
 8001b28:	780a      	ldrb	r2, [r1, #0]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 8001b30:	f003 0207 	and.w	r2, r3, #7
 8001b34:	6082      	str	r2, [r0, #8]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 8001b36:	f891 e001 	ldrb.w	lr, [r1, #1]
 8001b3a:	f3ce 0e42 	ubfx	lr, lr, #1, #3
 8001b3e:	f8c0 e00c 	str.w	lr, [r0, #12]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 8001b42:	f891 c001 	ldrb.w	ip, [r1, #1]
 8001b46:	f3cc 1c02 	ubfx	ip, ip, #4, #3
 8001b4a:	f8c0 c010 	str.w	ip, [r0, #16]
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 8001b4e:	788b      	ldrb	r3, [r1, #2]
 8001b50:	784c      	ldrb	r4, [r1, #1]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	ea43 13d4 	orr.w	r3, r3, r4, lsr #7
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 8001b5e:	788c      	ldrb	r4, [r1, #2]
 8001b60:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8001b64:	6184      	str	r4, [r0, #24]
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 8001b66:	f891 8002 	ldrb.w	r8, [r1, #2]

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 8001b6a:	f1c2 0202 	rsb	r2, r2, #2
 8001b6e:	6082      	str	r2, [r0, #8]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 8001b70:	f1c3 0302 	rsb	r3, r3, #2
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 8001b74:	f1ce 0202 	rsb	r2, lr, #2
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 8001b78:	ea4f 1858 	mov.w	r8, r8, lsr #5
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 8001b7c:	60c2      	str	r2, [r0, #12]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 8001b7e:	6143      	str	r3, [r0, #20]
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 8001b80:	f1c7 0702 	rsb	r7, r7, #2
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8001b84:	f1c6 0602 	rsb	r6, r6, #2
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 8001b88:	f1cc 0202 	rsb	r2, ip, #2
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 8001b8c:	f1c4 0402 	rsb	r4, r4, #2
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 8001b90:	f1c8 0302 	rsb	r3, r8, #2
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 8001b94:	6007      	str	r7, [r0, #0]
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8001b96:	6046      	str	r6, [r0, #4]
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 8001b98:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 8001b9a:	6184      	str	r4, [r0, #24]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 8001b9c:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < N/8; ++i) {
 8001b9e:	3020      	adds	r0, #32
 8001ba0:	42a8      	cmp	r0, r5
 8001ba2:	f101 0103 	add.w	r1, r1, #3
 8001ba6:	d1b6      	bne.n	8001b16 <small_polyeta_unpack+0x8>
    r->coeffs[2*i+1] = a[i] >> 4;
    r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif
}
 8001ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bac <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 8001bac:	b510      	push	{r4, lr}
    size_t i;

    for (i = 0; i < 25; ++i) {
        s_inc[i] = 0;
 8001bae:	22c8      	movs	r2, #200	; 0xc8
 8001bb0:	2100      	movs	r1, #0
static void keccak_inc_init(uint64_t *s_inc) {
 8001bb2:	4604      	mov	r4, r0
        s_inc[i] = 0;
 8001bb4:	f002 f9be 	bl	8003f34 <memset>
    }
    s_inc[25] = 0;
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 8001bc0:	bd10      	pop	{r4, pc}

08001bc2 <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8001bc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bc4:	f88d 2007 	strb.w	r2, [sp, #7]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    if(s_inc[25] == r-1){
 8001bc8:	e9d0 2332 	ldrd	r2, r3, [r0, #200]	; 0xc8
 8001bcc:	1e4d      	subs	r5, r1, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf08      	it	eq
 8001bd2:	42aa      	cmpeq	r2, r5
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8001bd4:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 8001bd6:	d110      	bne.n	8001bfa <keccak_inc_finalize+0x38>
      p |= 128;
 8001bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001be0:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8001be4:	f10d 0107 	add.w	r1, sp, #7
 8001be8:	2301      	movs	r3, #1
    } else {
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
      p = 128;
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8001bea:	f000 ff0a 	bl	8002a02 <KeccakF1600_StateXORBytes>
    }
    s_inc[25] = 0;
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
}
 8001bf6:	b003      	add	sp, #12
 8001bf8:	bd30      	pop	{r4, r5, pc}
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f10d 0107 	add.w	r1, sp, #7
 8001c00:	f000 feff 	bl	8002a02 <KeccakF1600_StateXORBytes>
      p = 128;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8001c0a:	462a      	mov	r2, r5
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f10d 0107 	add.w	r1, sp, #7
 8001c12:	4620      	mov	r0, r4
 8001c14:	e7e9      	b.n	8001bea <keccak_inc_finalize+0x28>

08001c16 <keccak_inc_absorb>:
                              size_t mlen) {
 8001c16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	460f      	mov	r7, r1
 8001c1e:	4616      	mov	r6, r2
 8001c20:	461d      	mov	r5, r3
        s_inc[25] = 0;
 8001c22:	f04f 0800 	mov.w	r8, #0
 8001c26:	f04f 0900 	mov.w	r9, #0
    while (mlen + s_inc[25] >= r) {
 8001c2a:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 8001c2e:	18a9      	adds	r1, r5, r2
 8001c30:	f143 0300 	adc.w	r3, r3, #0
 8001c34:	42b9      	cmp	r1, r7
 8001c36:	f173 0300 	sbcs.w	r3, r3, #0
 8001c3a:	d20d      	bcs.n	8001c58 <keccak_inc_absorb+0x42>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8001c3c:	462b      	mov	r3, r5
 8001c3e:	4631      	mov	r1, r6
 8001c40:	4620      	mov	r0, r4
 8001c42:	f000 fede 	bl	8002a02 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8001c46:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 8001c4a:	195b      	adds	r3, r3, r5
 8001c4c:	f142 0200 	adc.w	r2, r2, #0
 8001c50:	e9c4 3232 	strd	r3, r2, [r4, #200]	; 0xc8
}
 8001c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8001c58:	1abb      	subs	r3, r7, r2
 8001c5a:	4631      	mov	r1, r6
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f000 fed0 	bl	8002a02 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 8001c62:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
        KeccakF1600_StatePermute(s_inc);
 8001c66:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 8001c68:	1bda      	subs	r2, r3, r7
        s_inc[25] = 0;
 8001c6a:	e9c4 8932 	strd	r8, r9, [r4, #200]	; 0xc8
        m += r - s_inc[25];
 8001c6e:	1afb      	subs	r3, r7, r3
        mlen -= (size_t)(r - s_inc[25]);
 8001c70:	4415      	add	r5, r2
        m += r - s_inc[25];
 8001c72:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 8001c74:	f000 feec 	bl	8002a50 <KeccakF1600_StatePermute>
 8001c78:	e7d7      	b.n	8001c2a <keccak_inc_absorb+0x14>

08001c7a <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 8001c7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c7e:	4614      	mov	r4, r2
 8001c80:	4698      	mov	r8, r3
    size_t len;
    if(outlen < s_inc[25])
 8001c82:	e9d2 2332 	ldrd	r2, r3, [r2, #200]	; 0xc8
                               uint64_t *s_inc, uint32_t r) {
 8001c86:	460d      	mov	r5, r1
    if(outlen < s_inc[25])
 8001c88:	4291      	cmp	r1, r2
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	eb71 0303 	sbcs.w	r3, r1, r3
    {
        len = outlen;
    }
    else
    {
        len = s_inc[25];
 8001c92:	bf2c      	ite	cs
 8001c94:	4616      	movcs	r6, r2
        len = outlen;
 8001c96:	462e      	movcc	r6, r5
                               uint64_t *s_inc, uint32_t r) {
 8001c98:	4607      	mov	r7, r0
    }

    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8001c9a:	4633      	mov	r3, r6
 8001c9c:	eba8 0202 	sub.w	r2, r8, r2
 8001ca0:	4601      	mov	r1, r0
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 fe8c 	bl	80029c0 <KeccakF1600_StateExtractBytes>
    h += len;
    outlen -= len;
    s_inc[25] -= len;
 8001ca8:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
 8001cac:	1b9b      	subs	r3, r3, r6
 8001cae:	f162 0200 	sbc.w	r2, r2, #0
 8001cb2:	e9c4 3232 	strd	r3, r2, [r4, #200]	; 0xc8
    h += len;
 8001cb6:	4437      	add	r7, r6
    outlen -= len;
 8001cb8:	1bad      	subs	r5, r5, r6
        }
        else
        {
            len = r;
        }
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8001cba:	f04f 0900 	mov.w	r9, #0
    while (outlen > 0) {
 8001cbe:	b90d      	cbnz	r5, 8001cc4 <keccak_inc_squeeze+0x4a>
        h += len;
        outlen -= len;
        s_inc[25] = r - len;
    }
}
 8001cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KeccakF1600_StatePermute(s_inc);
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f000 fec3 	bl	8002a50 <KeccakF1600_StatePermute>
        if(outlen < r)
 8001cca:	4545      	cmp	r5, r8
 8001ccc:	462e      	mov	r6, r5
 8001cce:	bf28      	it	cs
 8001cd0:	4646      	movcs	r6, r8
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8001cd2:	4633      	mov	r3, r6
 8001cd4:	4639      	mov	r1, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4620      	mov	r0, r4
        h += len;
 8001cda:	4437      	add	r7, r6
        outlen -= len;
 8001cdc:	1bad      	subs	r5, r5, r6
        s_inc[25] = r - len;
 8001cde:	eba8 0606 	sub.w	r6, r8, r6
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8001ce2:	f000 fe6d 	bl	80029c0 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8001ce6:	e9c4 6932 	strd	r6, r9, [r4, #200]	; 0xc8
 8001cea:	e7e8      	b.n	8001cbe <keccak_inc_squeeze+0x44>

08001cec <shake128_inc_init>:

void shake128_inc_init(shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 8001cec:	f7ff bf5e 	b.w	8001bac <keccak_inc_init>

08001cf0 <shake128_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 8001cf0:	4613      	mov	r3, r2
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	21a8      	movs	r1, #168	; 0xa8
 8001cf6:	f7ff bf8e 	b.w	8001c16 <keccak_inc_absorb>

08001cfa <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	21a8      	movs	r1, #168	; 0xa8
 8001cfe:	f7ff bf60 	b.w	8001bc2 <keccak_inc_finalize>

08001d02 <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
 8001d02:	23a8      	movs	r3, #168	; 0xa8
 8001d04:	f7ff bfb9 	b.w	8001c7a <keccak_inc_squeeze>

08001d08 <shake256_inc_init>:

void shake256_inc_init(shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_init(state->ctx);
 8001d08:	f7ff bf50 	b.w	8001bac <keccak_inc_init>

08001d0c <shake256_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8001d0c:	4613      	mov	r3, r2
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 8001d0e:	460a      	mov	r2, r1
 8001d10:	2188      	movs	r1, #136	; 0x88
 8001d12:	f7ff bf80 	b.w	8001c16 <keccak_inc_absorb>

08001d16 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8001d16:	221f      	movs	r2, #31
 8001d18:	2188      	movs	r1, #136	; 0x88
 8001d1a:	f7ff bf52 	b.w	8001bc2 <keccak_inc_finalize>

08001d1e <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 8001d1e:	2388      	movs	r3, #136	; 0x88
 8001d20:	f7ff bfab 	b.w	8001c7a <keccak_inc_squeeze>

08001d24 <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b0b5      	sub	sp, #212	; 0xd4
 8001d28:	4604      	mov	r4, r0
 8001d2a:	4616      	mov	r6, r2
 8001d2c:	461f      	mov	r7, r3
#ifdef PROFILE_HASHING
  uint64_t t0 = hal_get_time();
#endif
  shake256incctx state;

  keccak_inc_init(state.ctx);
 8001d2e:	4668      	mov	r0, sp
{
 8001d30:	460d      	mov	r5, r1
  keccak_inc_init(state.ctx);
 8001d32:	f7ff ff3b 	bl	8001bac <keccak_inc_init>

  /* Absorb input */
  keccak_inc_absorb(state.ctx, SHAKE256_RATE, input, inlen);
 8001d36:	463b      	mov	r3, r7
 8001d38:	4632      	mov	r2, r6
 8001d3a:	4668      	mov	r0, sp
 8001d3c:	2188      	movs	r1, #136	; 0x88
 8001d3e:	f7ff ff6a 	bl	8001c16 <keccak_inc_absorb>
  keccak_inc_finalize(state.ctx, SHAKE256_RATE, 0x1F);
 8001d42:	4668      	mov	r0, sp
 8001d44:	221f      	movs	r2, #31
 8001d46:	2188      	movs	r1, #136	; 0x88
 8001d48:	f7ff ff3b 	bl	8001bc2 <keccak_inc_finalize>

  /* Squeeze output */
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
 8001d4c:	2388      	movs	r3, #136	; 0x88
 8001d4e:	466a      	mov	r2, sp
 8001d50:	4629      	mov	r1, r5
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff ff91 	bl	8001c7a <keccak_inc_squeeze>
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8001d58:	b035      	add	sp, #212	; 0xd4
 8001d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d5c <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8001d5c:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8001d5e:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8001d60:	2000      	movs	r0, #0
	while (len--) {
 8001d62:	428b      	cmp	r3, r1
 8001d64:	d100      	bne.n	8001d68 <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8001d66:	4770      	bx	lr
		crc ^= *buf++;
 8001d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d6c:	4050      	eors	r0, r2
 8001d6e:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001d70:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d74:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8001d78:	bf18      	it	ne
 8001d7a:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8001d7e:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8001d80:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8001d82:	d1f5      	bne.n	8001d70 <ss_crc+0x14>
 8001d84:	e7ed      	b.n	8001d62 <ss_crc+0x6>

08001d86 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8001d86:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4604      	mov	r4, r0
	uint8_t i = 1;
 8001d8c:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8001d8e:	428b      	cmp	r3, r1
 8001d90:	d301      	bcc.n	8001d96 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8001d92:	2000      	movs	r0, #0
 8001d94:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8001d96:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8001d9a:	b915      	cbnz	r5, 8001da2 <stuff_data+0x1c>
			buf[last] = i - last;
 8001d9c:	1a9d      	subs	r5, r3, r2
 8001d9e:	5485      	strb	r5, [r0, r2]
 8001da0:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e7f2      	b.n	8001d8e <stuff_data+0x8>

08001da8 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8001da8:	b510      	push	{r4, lr}
	uint8_t next = buf[0]; // 取距离
 8001daa:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00; // 恢复
 8001dac:	2400      	movs	r4, #0
{
 8001dae:	4603      	mov	r3, r0
	buf[0] = 0x00; // 恢复
 8001db0:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0]; // 取距离
 8001db2:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8001db4:	4288      	cmp	r0, r1
 8001db6:	d200      	bcs.n	8001dba <unstuff_data+0x12>
 8001db8:	b902      	cbnz	r2, 8001dbc <unstuff_data+0x14>
		tmp = buf[next]; // 取距离
		buf[next] = FRAME_BYTE; // 恢复
		next += tmp; // 记录当前位置
	}
	return next;
}
 8001dba:	bd10      	pop	{r4, pc}
		tmp = buf[next]; // 取距离
 8001dbc:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE; // 恢复
 8001dbe:	541c      	strb	r4, [r3, r0]
		next += tmp; // 记录当前位置
 8001dc0:	4410      	add	r0, r2
 8001dc2:	b2c0      	uxtb	r0, r0
 8001dc4:	e7f6      	b.n	8001db4 <unstuff_data+0xc>

08001dc6 <simpleserial_init>:
// This just adds the "v" command for now...
void simpleserial_init()
{
	// simpleserial_addcmd('v', 0, check_version);
 //    simpleserial_addcmd('w', 0, ss_get_commands);
}
 8001dc6:	4770      	bx	lr

08001dc8 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8001dc8:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8001dca:	4d0c      	ldr	r5, [pc, #48]	; (8001dfc <simpleserial_addcmd+0x34>)
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd0:	dd04      	ble.n	8001ddc <simpleserial_addcmd+0x14>
		putch('a');
 8001dd2:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8001dd4:	f000 f980 	bl	80020d8 <putch>
		return 1;
 8001dd8:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8001dda:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8001ddc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001de0:	d301      	bcc.n	8001de6 <simpleserial_addcmd+0x1e>
		putch('b');
 8001de2:	2062      	movs	r0, #98	; 0x62
 8001de4:	e7f6      	b.n	8001dd4 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8001de6:	240c      	movs	r4, #12
 8001de8:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8001dec:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8001dee:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8001df0:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8001df4:	602b      	str	r3, [r5, #0]
	return 0;
 8001df6:	2000      	movs	r0, #0
 8001df8:	e7ef      	b.n	8001dda <simpleserial_addcmd+0x12>
 8001dfa:	bf00      	nop
 8001dfc:	10000860 	.word	0x10000860

08001e00 <simpleserial_put>:
	simpleserial_put('e', 0x05, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e06:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8001e08:	2500      	movs	r5, #0
{
 8001e0a:	4611      	mov	r1, r2
	data_buf[1] = c;
 8001e0c:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8001e10:	4622      	mov	r2, r4
 8001e12:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8001e16:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8001e1a:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8001e1e:	f7ff f889 	bl	8000f34 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001e22:	1ca1      	adds	r1, r4, #2
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	f10d 0001 	add.w	r0, sp, #1
 8001e2a:	f7ff ff97 	bl	8001d5c <ss_crc>
 8001e2e:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8001e32:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8001e34:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8001e36:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8001e38:	b2c9      	uxtb	r1, r1
 8001e3a:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8001e3c:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8001e40:	f7ff ffa1 	bl	8001d86 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8001e44:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8001e46:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8001e4a:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8001e4c:	f000 f944 	bl	80020d8 <putch>
	for (int i = 0; i < size + 5; i++) {
 8001e50:	42ae      	cmp	r6, r5
 8001e52:	daf8      	bge.n	8001e46 <simpleserial_put+0x46>
	}
}
 8001e54:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8001e58:	bd70      	pop	{r4, r5, r6, pc}
 8001e5a:	0000      	movs	r0, r0

08001e5c <simpleserial_get>:
{
 8001e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	uint8_t err = 0;
 8001e64:	2500      	movs	r5, #0
 8001e66:	ae02      	add	r6, sp, #8
 8001e68:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8001e6c:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8001e6e:	f000 f921 	bl	80020b4 <getch>
 8001e72:	b2c0      	uxtb	r0, r0
 8001e74:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {  //如果data_buf[i] == 0x00
 8001e78:	b960      	cbnz	r0, 8001e94 <simpleserial_get+0x38>
			err = SS_ERR_FRAME_BYTE;
 8001e7a:	2305      	movs	r3, #5
        err = 7;
 8001e7c:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x05, &err);
 8001e80:	f10d 0207 	add.w	r2, sp, #7
 8001e84:	2105      	movs	r1, #5
 8001e86:	2065      	movs	r0, #101	; 0x65
 8001e88:	f7ff ffba 	bl	8001e00 <simpleserial_put>
}
 8001e8c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8001e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8001e94:	3501      	adds	r5, #1
 8001e96:	2d04      	cmp	r5, #4
 8001e98:	d1e9      	bne.n	8001e6e <simpleserial_get+0x12>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff ff83 	bl	8001da8 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8001ea2:	4f28      	ldr	r7, [pc, #160]	; (8001f44 <simpleserial_get+0xe8>)
		if(commands[c].c == data_buf[1])
 8001ea4:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8001ea6:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8001ea8:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8001eaa:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8001eac:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8001eae:	fa5f f983 	uxtb.w	r9, r3
 8001eb2:	4591      	cmp	r9, r2
 8001eb4:	db02      	blt.n	8001ebc <simpleserial_get+0x60>
	if (c == num_commands) {
 8001eb6:	d107      	bne.n	8001ec8 <simpleserial_get+0x6c>
        err = 7;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	e7df      	b.n	8001e7c <simpleserial_get+0x20>
		if(commands[c].c == data_buf[1])
 8001ebc:	fb00 7609 	mla	r6, r0, r9, r7
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	7936      	ldrb	r6, [r6, #4]
 8001ec4:	428e      	cmp	r6, r1
 8001ec6:	d1f2      	bne.n	8001eae <simpleserial_get+0x52>
	if ((data_buf[3] + 5) < next_frame) {
 8001ec8:	78e3      	ldrb	r3, [r4, #3]
 8001eca:	3305      	adds	r3, #5
 8001ecc:	4543      	cmp	r3, r8
 8001ece:	da02      	bge.n	8001ed6 <simpleserial_get+0x7a>
        err = 11;
 8001ed0:	230b      	movs	r3, #11
 8001ed2:	e7d3      	b.n	8001e7c <simpleserial_get+0x20>
 8001ed4:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8001ed6:	f000 f8ed 	bl	80020b4 <getch>
 8001eda:	b2c0      	uxtb	r0, r0
 8001edc:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8001ede:	b908      	cbnz	r0, 8001ee4 <simpleserial_get+0x88>
            err = 12;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	e7cb      	b.n	8001e7c <simpleserial_get+0x20>
	for (; i < data_buf[3] + 5; i++) {
 8001ee4:	78e3      	ldrb	r3, [r4, #3]
 8001ee6:	1c6e      	adds	r6, r5, #1
 8001ee8:	3304      	adds	r3, #4
 8001eea:	42b3      	cmp	r3, r6
 8001eec:	daf2      	bge.n	8001ed4 <simpleserial_get+0x78>
	data_buf[i] = getch();
 8001eee:	f000 f8e1 	bl	80020b4 <getch>
 8001ef2:	b2c0      	uxtb	r0, r0
 8001ef4:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8001ef6:	b108      	cbz	r0, 8001efc <simpleserial_get+0xa0>
        err = 13;
 8001ef8:	230d      	movs	r3, #13
 8001efa:	e7bf      	b.n	8001e7c <simpleserial_get+0x20>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8001efc:	f1c8 0101 	rsb	r1, r8, #1
 8001f00:	fa51 f186 	uxtab	r1, r1, r6
 8001f04:	b2c9      	uxtb	r1, r1
 8001f06:	fa5f fa86 	uxtb.w	sl, r6
 8001f0a:	eb04 0008 	add.w	r0, r4, r8
 8001f0e:	f7ff ff4b 	bl	8001da8 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8001f12:	f1aa 0102 	sub.w	r1, sl, #2
 8001f16:	b2c9      	uxtb	r1, r1
 8001f18:	f10d 0009 	add.w	r0, sp, #9
 8001f1c:	f7ff ff1e 	bl	8001d5c <ss_crc>
	if (crc != data_buf[i-1]) {
 8001f20:	5d63      	ldrb	r3, [r4, r5]
 8001f22:	4283      	cmp	r3, r0
 8001f24:	d001      	beq.n	8001f2a <simpleserial_get+0xce>
        err = 14;
 8001f26:	230e      	movs	r3, #14
 8001f28:	e7a8      	b.n	8001e7c <simpleserial_get+0x20>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	fb03 7709 	mla	r7, r3, r9, r7
 8001f30:	78e2      	ldrb	r2, [r4, #3]
 8001f32:	68fd      	ldr	r5, [r7, #12]
 8001f34:	78a1      	ldrb	r1, [r4, #2]
 8001f36:	7860      	ldrb	r0, [r4, #1]
 8001f38:	446b      	add	r3, sp
 8001f3a:	47a8      	blx	r5
 8001f3c:	f88d 0007 	strb.w	r0, [sp, #7]
 8001f40:	e79e      	b.n	8001e80 <simpleserial_get+0x24>
 8001f42:	bf00      	nop
 8001f44:	10000860 	.word	0x10000860

08001f48 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 8001f48:	b530      	push	{r4, r5, lr}
	//HAL_Init();

#ifdef STM32F4FPU
     /* set CP10 and CP11 Full Access */
     SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); // SCB->CPACR |= 0x00f00000;
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <platform_init+0x80>)
 8001f4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
{
 8001f58:	b093      	sub	sp, #76	; 0x4c
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f60:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8001f64:	2102      	movs	r1, #2
 8001f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f6a:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 8001f6e:	200c      	movs	r0, #12
 8001f70:	23c4      	movs	r3, #196	; 0xc4
 8001f72:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8001f76:	2404      	movs	r4, #4
 8001f78:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8001f7a:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f7c:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8001f7e:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8001f82:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f84:	f000 f8c0 	bl	8002108 <HAL_RCC_OscConfig>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	b100      	cbz	r0, 8001f8e <platform_init+0x46>
        for(;;);
 8001f8c:	e7fe      	b.n	8001f8c <platform_init+0x44>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8001f8e:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f90:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001f94:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f96:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8001f98:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8001f9a:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8001f9e:	f000 fa53 	bl	8002448 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <platform_init+0x84>)
 8001fa4:	9400      	str	r4, [sp, #0]
 8001fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <platform_init+0x88>)
	__HAL_RCC_RNG_CLK_ENABLE();
 8001faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <platform_init+0x8c>)
 8001fbc:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 8001fbe:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 8001fc0:	f000 fce1 	bl	8002986 <HAL_RNG_Init>

}
 8001fc4:	b013      	add	sp, #76	; 0x4c
 8001fc6:	bd30      	pop	{r4, r5, pc}
 8001fc8:	e000ed00 	.word	0xe000ed00
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	10000e64 	.word	0x10000e64
 8001fd4:	50060800 	.word	0x50060800

08001fd8 <init_uart>:

void init_uart(void)
{
 8001fd8:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
{
 8001fdc:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8001fde:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fe2:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 8001fe6:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 8001fec:	4c15      	ldr	r4, [pc, #84]	; (8002044 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8001fee:	4816      	ldr	r0, [pc, #88]	; (8002048 <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 8001ff0:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 8001ff2:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 8001ff4:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8001ff6:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8001ff8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8001ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002000:	4013      	ands	r3, r2
 8002002:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002004:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 8002006:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002008:	f000 fab6 	bl	8002578 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 800200c:	480f      	ldr	r0, [pc, #60]	; (800204c <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 800200e:	4910      	ldr	r1, [pc, #64]	; (8002050 <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 8002010:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 230400;
 8002012:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8002016:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800201a:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800201e:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002020:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002022:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002024:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 8002026:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002028:	f043 0310 	orr.w	r3, r3, #16
 800202c:	6463      	str	r3, [r4, #68]	; 0x44
 800202e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8002036:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 8002038:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 800203a:	f000 fb89 	bl	8002750 <HAL_UART_Init>
}
 800203e:	b009      	add	sp, #36	; 0x24
 8002040:	bd30      	pop	{r4, r5, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	10000e64 	.word	0x10000e64
 8002050:	40011000 	.word	0x40011000

08002054 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 8002054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 800205a:	2100      	movs	r1, #0
 800205c:	9100      	str	r1, [sp, #0]
 800205e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 8002068:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002076:	2301      	movs	r3, #1
 8002078:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800207c:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800207e:	2302      	movs	r3, #2
 8002080:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8002082:	f000 fa79 	bl	8002578 <HAL_GPIO_Init>
#endif
}
 8002086:	b007      	add	sp, #28
 8002088:	f85d fb04 	ldr.w	pc, [sp], #4
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000

08002094 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <trigger_high+0xc>)
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209c:	f000 bb52 	b.w	8002744 <HAL_GPIO_WritePin>
 80020a0:	40020000 	.word	0x40020000

080020a4 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <trigger_low+0xc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ac:	f000 bb4a 	b.w	8002744 <HAL_GPIO_WritePin>
 80020b0:	40020000 	.word	0x40020000

080020b4 <getch>:
#endif
}
char getch(void)
{
 80020b4:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 80020b6:	4c07      	ldr	r4, [pc, #28]	; (80020d4 <getch+0x20>)
 80020b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80020bc:	2201      	movs	r2, #1
 80020be:	f10d 0107 	add.w	r1, sp, #7
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 fbf7 	bl	80028b6 <HAL_UART_Receive>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d1f5      	bne.n	80020b8 <getch+0x4>
	return d;
}
 80020cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80020d0:	b002      	add	sp, #8
 80020d2:	bd10      	pop	{r4, pc}
 80020d4:	10000e70 	.word	0x10000e70

080020d8 <putch>:

void putch(char c)
{
 80020d8:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80020da:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 80020de:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80020e2:	2201      	movs	r2, #1
 80020e4:	f10d 0107 	add.w	r1, sp, #7
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <putch+0x1c>)
 80020ea:	f000 fb9f 	bl	800282c <HAL_UART_Transmit>
}
 80020ee:	b003      	add	sp, #12
 80020f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020f4:	10000e70 	.word	0x10000e70

080020f8 <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <HAL_GetTick+0xc>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	1c42      	adds	r2, r0, #1
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	10000f00 	.word	0x10000f00

08002108 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002108:	6803      	ldr	r3, [r0, #0]
{
 800210a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210c:	07de      	lsls	r6, r3, #31
{
 800210e:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002110:	d43b      	bmi.n	800218a <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	680b      	ldr	r3, [r1, #0]
 8002114:	079d      	lsls	r5, r3, #30
 8002116:	f100 808b 	bmi.w	8002230 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	680b      	ldr	r3, [r1, #0]
 800211c:	0718      	lsls	r0, r3, #28
 800211e:	f100 80d6 	bmi.w	80022ce <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002122:	680b      	ldr	r3, [r1, #0]
 8002124:	075a      	lsls	r2, r3, #29
 8002126:	d52a      	bpl.n	800217e <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	4b91      	ldr	r3, [pc, #580]	; (8002374 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800212e:	4c92      	ldr	r4, [pc, #584]	; (8002378 <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800214a:	f7ff ffd5 	bl	80020f8 <HAL_GetTick>
 800214e:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	05d8      	lsls	r0, r3, #23
 8002154:	f140 80df 	bpl.w	8002316 <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	688b      	ldr	r3, [r1, #8]
 800215a:	4c86      	ldr	r4, [pc, #536]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 80e1 	bne.w	8002324 <HAL_RCC_OscConfig+0x21c>
 8002162:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff ffc5 	bl	80020f8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	4d81      	ldr	r5, [pc, #516]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8002170:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002178:	079a      	lsls	r2, r3, #30
 800217a:	f140 80f4 	bpl.w	8002366 <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217e:	698a      	ldr	r2, [r1, #24]
 8002180:	2a00      	cmp	r2, #0
 8002182:	f040 80ff 	bne.w	8002384 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002186:	2000      	movs	r0, #0
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218a:	4b7a      	ldr	r3, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	f002 020c 	and.w	r2, r2, #12
 8002192:	2a04      	cmp	r2, #4
 8002194:	d007      	beq.n	80021a6 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219c:	2a08      	cmp	r2, #8
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	0254      	lsls	r4, r2, #9
 80021a4:	d509      	bpl.n	80021ba <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0398      	lsls	r0, r3, #14
 80021ac:	d5b1      	bpl.n	8002112 <HAL_RCC_OscConfig+0xa>
 80021ae:	684b      	ldr	r3, [r1, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ae      	bne.n	8002112 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80021b4:	2001      	movs	r0, #1
}
 80021b6:	b002      	add	sp, #8
 80021b8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ba:	684a      	ldr	r2, [r1, #4]
 80021bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021c0:	d112      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe0>
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ca:	f7ff ff95 	bl	80020f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4d69      	ldr	r5, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	4e6a      	ldr	r6, [pc, #424]	; (800237c <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80021d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	039a      	lsls	r2, r3, #14
 80021d8:	d49b      	bmi.n	8002112 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021da:	f7ff ff8d 	bl	80020f8 <HAL_GetTick>
 80021de:	1b00      	subs	r0, r0, r4
 80021e0:	42b0      	cmp	r0, r6
 80021e2:	d9f7      	bls.n	80021d4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80021e4:	2003      	movs	r0, #3
 80021e6:	e7e6      	b.n	80021b6 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e8:	4c62      	ldr	r4, [pc, #392]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_OscConfig+0xfa>
 80021f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002200:	e7e3      	b.n	80021ca <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	2a00      	cmp	r2, #0
 8002212:	d1da      	bne.n	80021ca <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002214:	f7ff ff70 	bl	80020f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002218:	4e58      	ldr	r6, [pc, #352]	; (800237c <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800221a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	039b      	lsls	r3, r3, #14
 8002220:	f57f af77 	bpl.w	8002112 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff ff68 	bl	80020f8 <HAL_GetTick>
 8002228:	1b40      	subs	r0, r0, r5
 800222a:	42b0      	cmp	r0, r6
 800222c:	d9f6      	bls.n	800221c <HAL_RCC_OscConfig+0x114>
 800222e:	e7d9      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	f012 0f0c 	tst.w	r2, #12
 8002238:	d007      	beq.n	800224a <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002240:	2a08      	cmp	r2, #8
 8002242:	d116      	bne.n	8002272 <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0258      	lsls	r0, r3, #9
 8002248:	d413      	bmi.n	8002272 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	484a      	ldr	r0, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
 800224c:	6803      	ldr	r3, [r0, #0]
 800224e:	079a      	lsls	r2, r3, #30
 8002250:	d502      	bpl.n	8002258 <HAL_RCC_OscConfig+0x150>
 8002252:	68cb      	ldr	r3, [r1, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d1ad      	bne.n	80021b4 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	23f8      	movs	r3, #248	; 0xf8
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	fab3 f283 	clz	r2, r3
 8002264:	690b      	ldr	r3, [r1, #16]
 8002266:	4093      	lsls	r3, r2
 8002268:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 800226c:	4313      	orrs	r3, r2
 800226e:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002270:	e753      	b.n	800211a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002272:	68ca      	ldr	r2, [r1, #12]
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_RCC_OscConfig+0x278>)
 8002276:	b1da      	cbz	r2, 80022b0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800227c:	f7ff ff3c 	bl	80020f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4c3c      	ldr	r4, [pc, #240]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8002282:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	079b      	lsls	r3, r3, #30
 8002288:	d50c      	bpl.n	80022a4 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	6820      	ldr	r0, [r4, #0]
 800228c:	23f8      	movs	r3, #248	; 0xf8
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	fab3 f283 	clz	r2, r3
 8002296:	690b      	ldr	r3, [r1, #16]
 8002298:	4093      	lsls	r3, r2
 800229a:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 800229e:	4313      	orrs	r3, r2
 80022a0:	6023      	str	r3, [r4, #0]
 80022a2:	e73a      	b.n	800211a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a4:	f7ff ff28 	bl	80020f8 <HAL_GetTick>
 80022a8:	1b40      	subs	r0, r0, r5
 80022aa:	2802      	cmp	r0, #2
 80022ac:	d9ea      	bls.n	8002284 <HAL_RCC_OscConfig+0x17c>
 80022ae:	e799      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80022b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022b2:	f7ff ff21 	bl	80020f8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4d2f      	ldr	r5, [pc, #188]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80022b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	079e      	lsls	r6, r3, #30
 80022be:	f57f af2c 	bpl.w	800211a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff ff19 	bl	80020f8 <HAL_GetTick>
 80022c6:	1b00      	subs	r0, r0, r4
 80022c8:	2802      	cmp	r0, #2
 80022ca:	d9f6      	bls.n	80022ba <HAL_RCC_OscConfig+0x1b2>
 80022cc:	e78a      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ce:	694a      	ldr	r2, [r1, #20]
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_OscConfig+0x278>)
 80022d2:	b182      	cbz	r2, 80022f6 <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 80022d4:	2201      	movs	r2, #1
 80022d6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80022da:	f7ff ff0d 	bl	80020f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4d25      	ldr	r5, [pc, #148]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80022e0:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022e4:	079b      	lsls	r3, r3, #30
 80022e6:	f53f af1c 	bmi.w	8002122 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7ff ff05 	bl	80020f8 <HAL_GetTick>
 80022ee:	1b00      	subs	r0, r0, r4
 80022f0:	2802      	cmp	r0, #2
 80022f2:	d9f6      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1da>
 80022f4:	e776      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 80022f6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80022fa:	f7ff fefd 	bl	80020f8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fe:	4d1d      	ldr	r5, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8002300:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002302:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002304:	079e      	lsls	r6, r3, #30
 8002306:	f57f af0c 	bpl.w	8002122 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230a:	f7ff fef5 	bl	80020f8 <HAL_GetTick>
 800230e:	1b00      	subs	r0, r0, r4
 8002310:	2802      	cmp	r0, #2
 8002312:	d9f6      	bls.n	8002302 <HAL_RCC_OscConfig+0x1fa>
 8002314:	e766      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002316:	f7ff feef 	bl	80020f8 <HAL_GetTick>
 800231a:	1b40      	subs	r0, r0, r5
 800231c:	2802      	cmp	r0, #2
 800231e:	f67f af17 	bls.w	8002150 <HAL_RCC_OscConfig+0x48>
 8002322:	e75f      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	2b05      	cmp	r3, #5
 8002326:	d104      	bne.n	8002332 <HAL_RCC_OscConfig+0x22a>
 8002328:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6723      	str	r3, [r4, #112]	; 0x70
 8002330:	e717      	b.n	8002162 <HAL_RCC_OscConfig+0x5a>
 8002332:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	6722      	str	r2, [r4, #112]	; 0x70
 800233a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800233c:	f022 0204 	bic.w	r2, r2, #4
 8002340:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002342:	2b00      	cmp	r3, #0
 8002344:	f47f af11 	bne.w	800216a <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8002348:	f7ff fed6 	bl	80020f8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002350:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002354:	079b      	lsls	r3, r3, #30
 8002356:	f57f af12 	bpl.w	800217e <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7ff fecd 	bl	80020f8 <HAL_GetTick>
 800235e:	1b40      	subs	r0, r0, r5
 8002360:	42b0      	cmp	r0, r6
 8002362:	d9f6      	bls.n	8002352 <HAL_RCC_OscConfig+0x24a>
 8002364:	e73e      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7ff fec7 	bl	80020f8 <HAL_GetTick>
 800236a:	1b00      	subs	r0, r0, r4
 800236c:	42b0      	cmp	r0, r6
 800236e:	f67f af02 	bls.w	8002176 <HAL_RCC_OscConfig+0x6e>
 8002372:	e737      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
 8002374:	40023800 	.word	0x40023800
 8002378:	40007000 	.word	0x40007000
 800237c:	05f5e100 	.word	0x05f5e100
 8002380:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002384:	4c2d      	ldr	r4, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x334>)
 8002386:	68a3      	ldr	r3, [r4, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	f43f af11 	beq.w	80021b4 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_RCC_OscConfig+0x338>)
 8002394:	2a02      	cmp	r2, #2
 8002396:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	d140      	bne.n	8002420 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 800239e:	f7ff feab 	bl	80020f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a2:	4e28      	ldr	r6, [pc, #160]	; (8002444 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 80023a4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	0198      	lsls	r0, r3, #6
 80023aa:	d433      	bmi.n	8002414 <HAL_RCC_OscConfig+0x30c>
 80023ac:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80023b0:	fa96 f6a6 	rbit	r6, r6
 80023b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b8:	fab6 f686 	clz	r6, r6
 80023bc:	fa92 f2a2 	rbit	r2, r2
 80023c0:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 80023c4:	fab2 f582 	clz	r5, r2
 80023c8:	fa90 f0a0 	rbit	r0, r0
 80023cc:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80023d4:	40b2      	lsls	r2, r6
 80023d6:	4313      	orrs	r3, r2
 80023d8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80023da:	0852      	lsrs	r2, r2, #1
 80023dc:	3a01      	subs	r2, #1
 80023de:	40aa      	lsls	r2, r5
 80023e0:	4313      	orrs	r3, r2
 80023e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e4:	4d17      	ldr	r5, [pc, #92]	; (8002444 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e6:	fab0 f080 	clz	r0, r0
 80023ea:	fa02 f000 	lsl.w	r0, r2, r0
 80023ee:	4303      	orrs	r3, r0
 80023f0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f4:	4c11      	ldr	r4, [pc, #68]	; (800243c <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 80023f6:	2201      	movs	r2, #1
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023fa:	f7ff fe7d 	bl	80020f8 <HAL_GetTick>
 80023fe:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	019a      	lsls	r2, r3, #6
 8002404:	f53f aebf 	bmi.w	8002186 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff fe76 	bl	80020f8 <HAL_GetTick>
 800240c:	1a40      	subs	r0, r0, r1
 800240e:	42a8      	cmp	r0, r5
 8002410:	d9f6      	bls.n	8002400 <HAL_RCC_OscConfig+0x2f8>
 8002412:	e6e7      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002414:	f7ff fe70 	bl	80020f8 <HAL_GetTick>
 8002418:	1b40      	subs	r0, r0, r5
 800241a:	42b0      	cmp	r0, r6
 800241c:	d9c3      	bls.n	80023a6 <HAL_RCC_OscConfig+0x29e>
 800241e:	e6e1      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8002420:	f7ff fe6a 	bl	80020f8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002424:	4d07      	ldr	r5, [pc, #28]	; (8002444 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8002426:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	f57f aeab 	bpl.w	8002186 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff fe62 	bl	80020f8 <HAL_GetTick>
 8002434:	1a40      	subs	r0, r0, r1
 8002436:	42a8      	cmp	r0, r5
 8002438:	d9f6      	bls.n	8002428 <HAL_RCC_OscConfig+0x320>
 800243a:	e6d3      	b.n	80021e4 <HAL_RCC_OscConfig+0xdc>
 800243c:	40023800 	.word	0x40023800
 8002440:	42470000 	.word	0x42470000
 8002444:	001e8480 	.word	0x001e8480

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_ClockConfig+0x128>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f002 020f 	and.w	r2, r2, #15
 8002452:	428a      	cmp	r2, r1
{
 8002454:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002456:	d31a      	bcc.n	800248e <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	0790      	lsls	r0, r2, #30
 800245c:	d420      	bmi.n	80024a0 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	07d2      	lsls	r2, r2, #31
 8002460:	d426      	bmi.n	80024b0 <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002462:	4b43      	ldr	r3, [pc, #268]	; (8002570 <HAL_RCC_ClockConfig+0x128>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	f002 020f 	and.w	r2, r2, #15
 800246a:	428a      	cmp	r2, r1
 800246c:	d870      	bhi.n	8002550 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	0743      	lsls	r3, r0, #29
 8002472:	d475      	bmi.n	8002560 <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	f010 0008 	ands.w	r0, r0, #8
 8002478:	d011      	beq.n	800249e <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247a:	4a3e      	ldr	r2, [pc, #248]	; (8002574 <HAL_RCC_ClockConfig+0x12c>)
 800247c:	6921      	ldr	r1, [r4, #16]
 800247e:	6893      	ldr	r3, [r2, #8]
 8002480:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002484:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002488:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 800248a:	2000      	movs	r0, #0
 800248c:	e007      	b.n	800249e <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	428b      	cmp	r3, r1
 800249a:	d0dd      	beq.n	8002458 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800249c:	2001      	movs	r0, #1
}
 800249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	4834      	ldr	r0, [pc, #208]	; (8002574 <HAL_RCC_ClockConfig+0x12c>)
 80024a2:	68a5      	ldr	r5, [r4, #8]
 80024a4:	6883      	ldr	r3, [r0, #8]
 80024a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024aa:	432b      	orrs	r3, r5
 80024ac:	6083      	str	r3, [r0, #8]
 80024ae:	e7d6      	b.n	800245e <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b0:	6862      	ldr	r2, [r4, #4]
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCC_ClockConfig+0x12c>)
 80024b4:	2a01      	cmp	r2, #1
 80024b6:	d11d      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	d0ed      	beq.n	800249c <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c0:	4d2c      	ldr	r5, [pc, #176]	; (8002574 <HAL_RCC_ClockConfig+0x12c>)
 80024c2:	68ab      	ldr	r3, [r5, #8]
 80024c4:	f023 0303 	bic.w	r3, r3, #3
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80024cc:	f7ff fe14 	bl	80020f8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d0:	6863      	ldr	r3, [r4, #4]
 80024d2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80024d4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d6:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024da:	d115      	bne.n	8002508 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	68ab      	ldr	r3, [r5, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d0bd      	beq.n	8002462 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e6:	f7ff fe07 	bl	80020f8 <HAL_GetTick>
 80024ea:	1b80      	subs	r0, r0, r6
 80024ec:	42b8      	cmp	r0, r7
 80024ee:	d9f5      	bls.n	80024dc <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 80024f0:	2003      	movs	r0, #3
 80024f2:	e7d4      	b.n	800249e <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f4:	1e90      	subs	r0, r2, #2
 80024f6:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fa:	d802      	bhi.n	8002502 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002500:	e7dd      	b.n	80024be <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	f013 0f02 	tst.w	r3, #2
 8002506:	e7da      	b.n	80024be <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002508:	2b02      	cmp	r3, #2
 800250a:	d10a      	bne.n	8002522 <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	68ab      	ldr	r3, [r5, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d0a5      	beq.n	8002462 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002516:	f7ff fdef 	bl	80020f8 <HAL_GetTick>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	42b8      	cmp	r0, r7
 800251e:	d9f5      	bls.n	800250c <HAL_RCC_ClockConfig+0xc4>
 8002520:	e7e6      	b.n	80024f0 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002522:	2b03      	cmp	r3, #3
 8002524:	d10f      	bne.n	8002546 <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002526:	68ab      	ldr	r3, [r5, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b0c      	cmp	r3, #12
 800252e:	d098      	beq.n	8002462 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7ff fde2 	bl	80020f8 <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	42b8      	cmp	r0, r7
 8002538:	d9f5      	bls.n	8002526 <HAL_RCC_ClockConfig+0xde>
 800253a:	e7d9      	b.n	80024f0 <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7ff fddc 	bl	80020f8 <HAL_GetTick>
 8002540:	1b80      	subs	r0, r0, r6
 8002542:	42b8      	cmp	r0, r7
 8002544:	d8d4      	bhi.n	80024f0 <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002546:	68ab      	ldr	r3, [r5, #8]
 8002548:	f013 0f0c 	tst.w	r3, #12
 800254c:	d1f6      	bne.n	800253c <HAL_RCC_ClockConfig+0xf4>
 800254e:	e788      	b.n	8002462 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	428b      	cmp	r3, r1
 800255c:	d19e      	bne.n	800249c <HAL_RCC_ClockConfig+0x54>
 800255e:	e786      	b.n	800246e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCC_ClockConfig+0x12c>)
 8002562:	68e3      	ldr	r3, [r4, #12]
 8002564:	688a      	ldr	r2, [r1, #8]
 8002566:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800256a:	431a      	orrs	r2, r3
 800256c:	608a      	str	r2, [r1, #8]
 800256e:	e781      	b.n	8002474 <HAL_RCC_ClockConfig+0x2c>
 8002570:	40023c00 	.word	0x40023c00
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257c:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8002734 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4a6d      	ldr	r2, [pc, #436]	; (8002738 <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800273c <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002588:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 800258a:	2701      	movs	r7, #1
 800258c:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258e:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8002592:	ea37 0404 	bics.w	r4, r7, r4
 8002596:	f040 80b9 	bne.w	800270c <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800259a:	684c      	ldr	r4, [r1, #4]
 800259c:	f024 0a10 	bic.w	sl, r4, #16
 80025a0:	f1ba 0f02 	cmp.w	sl, #2
 80025a4:	d116      	bne.n	80025d4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80025a6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80025aa:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ae:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80025b2:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80025ba:	f04f 0c0f 	mov.w	ip, #15
 80025be:	fa0c fc0b 	lsl.w	ip, ip, fp
 80025c2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c6:	690e      	ldr	r6, [r1, #16]
 80025c8:	fa06 f60b 	lsl.w	r6, r6, fp
 80025cc:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80025d0:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 80025d4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80025dc:	f04f 0c03 	mov.w	ip, #3
 80025e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80025e4:	ea2b 0b0c 	bic.w	fp, fp, ip
 80025e8:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ec:	f004 0c03 	and.w	ip, r4, #3
 80025f0:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025f4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8002600:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002604:	d816      	bhi.n	8002634 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 8002606:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800260a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800260e:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002612:	fa0a fa0e 	lsl.w	sl, sl, lr
 8002616:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 800261a:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 800261e:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002622:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002626:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 800262a:	fa0c fc03 	lsl.w	ip, ip, r3
 800262e:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8002632:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002634:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002636:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002638:	688e      	ldr	r6, [r1, #8]
 800263a:	fa06 f60e 	lsl.w	r6, r6, lr
 800263e:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8002640:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002642:	00e6      	lsls	r6, r4, #3
 8002644:	d562      	bpl.n	800270c <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2600      	movs	r6, #0
 8002648:	9601      	str	r6, [sp, #4]
 800264a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800264e:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002652:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8002656:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800265a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800265e:	9701      	str	r7, [sp, #4]
 8002660:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	f023 0703 	bic.w	r7, r3, #3
 8002666:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800266a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800266e:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002672:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002676:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800267a:	f04f 0c0f 	mov.w	ip, #15
 800267e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002682:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002740 <HAL_GPIO_Init+0x1c8>
 800268a:	4550      	cmp	r0, sl
 800268c:	d01d      	beq.n	80026ca <HAL_GPIO_Init+0x152>
 800268e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002692:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 8002696:	42b0      	cmp	r0, r6
 8002698:	d03f      	beq.n	800271a <HAL_GPIO_Init+0x1a2>
 800269a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800269e:	42b0      	cmp	r0, r6
 80026a0:	d03d      	beq.n	800271e <HAL_GPIO_Init+0x1a6>
 80026a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026a6:	42b0      	cmp	r0, r6
 80026a8:	d03b      	beq.n	8002722 <HAL_GPIO_Init+0x1aa>
 80026aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026ae:	42b0      	cmp	r0, r6
 80026b0:	d039      	beq.n	8002726 <HAL_GPIO_Init+0x1ae>
 80026b2:	4548      	cmp	r0, r9
 80026b4:	d039      	beq.n	800272a <HAL_GPIO_Init+0x1b2>
 80026b6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80026ba:	42b0      	cmp	r0, r6
 80026bc:	d037      	beq.n	800272e <HAL_GPIO_Init+0x1b6>
 80026be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026c2:	42b0      	cmp	r0, r6
 80026c4:	bf0c      	ite	eq
 80026c6:	2607      	moveq	r6, #7
 80026c8:	2608      	movne	r6, #8
 80026ca:	fa06 f60e 	lsl.w	r6, r6, lr
 80026ce:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80026d4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80026dc:	bf0c      	ite	eq
 80026de:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80026e0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80026e2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80026e4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80026ea:	bf0c      	ite	eq
 80026ec:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80026ee:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80026f0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80026f8:	bf0c      	ite	eq
 80026fa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80026fc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80026fe:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002702:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8002704:	bf54      	ite	pl
 8002706:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8002708:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800270a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270c:	3301      	adds	r3, #1
 800270e:	2b10      	cmp	r3, #16
 8002710:	f47f af3a 	bne.w	8002588 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8002714:	b003      	add	sp, #12
 8002716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	2601      	movs	r6, #1
 800271c:	e7d5      	b.n	80026ca <HAL_GPIO_Init+0x152>
 800271e:	2602      	movs	r6, #2
 8002720:	e7d3      	b.n	80026ca <HAL_GPIO_Init+0x152>
 8002722:	2603      	movs	r6, #3
 8002724:	e7d1      	b.n	80026ca <HAL_GPIO_Init+0x152>
 8002726:	2604      	movs	r6, #4
 8002728:	e7cf      	b.n	80026ca <HAL_GPIO_Init+0x152>
 800272a:	2605      	movs	r6, #5
 800272c:	e7cd      	b.n	80026ca <HAL_GPIO_Init+0x152>
 800272e:	2606      	movs	r6, #6
 8002730:	e7cb      	b.n	80026ca <HAL_GPIO_Init+0x152>
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40013c00 	.word	0x40013c00
 800273c:	40021400 	.word	0x40021400
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	b10a      	cbz	r2, 800274a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002746:	6181      	str	r1, [r0, #24]
  }
}
 8002748:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274a:	0409      	lsls	r1, r1, #16
 800274c:	e7fb      	b.n	8002746 <HAL_GPIO_WritePin+0x2>
 800274e:	0000      	movs	r0, r0

08002750 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002750:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002752:	2800      	cmp	r0, #0
 8002754:	d066      	beq.n	8002824 <HAL_UART_Init+0xd4>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8002756:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800275a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800275e:	b90b      	cbnz	r3, 8002764 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002760:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002764:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002766:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002768:	6905      	ldr	r5, [r0, #16]
 800276a:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 800276c:	2324      	movs	r3, #36	; 0x24
 800276e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002772:	68cb      	ldr	r3, [r1, #12]
 8002774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002778:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 800277a:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800277c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002780:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002782:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002784:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 8002786:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002788:	432b      	orrs	r3, r5
 800278a:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800278c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002790:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002792:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002796:	4323      	orrs	r3, r4
 8002798:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800279a:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 800279c:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 800279e:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80027a4:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80027aa:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_UART_Init+0xd8>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027ae:	6843      	ldr	r3, [r0, #4]
 80027b0:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b4:	d128      	bne.n	8002808 <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	fbb2 f6f5 	udiv	r6, r2, r5
 80027c0:	fb05 2216 	mls	r2, r5, r6, r2
 80027c4:	00d3      	lsls	r3, r2, #3
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	fbb3 f3f5 	udiv	r3, r3, r5
 80027cc:	f003 0207 	and.w	r2, r3, #7
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	eb02 1206 	add.w	r2, r2, r6, lsl #4
 80027d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027da:	4413      	add	r3, r2
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027dc:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027de:	690b      	ldr	r3, [r1, #16]
 80027e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80027e4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e6:	694b      	ldr	r3, [r1, #20]
 80027e8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80027ec:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ee:	68cb      	ldr	r3, [r1, #12]
 80027f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f4:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 80027f6:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80027fc:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002800:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8002804:	4618      	mov	r0, r3
}
 8002806:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fbb2 f2f3 	udiv	r2, r2, r3
 800280e:	fbb2 f6f5 	udiv	r6, r2, r5
 8002812:	fb05 2316 	mls	r3, r5, r6, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	fbb3 f3f5 	udiv	r3, r3, r5
 800281e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8002822:	e7db      	b.n	80027dc <HAL_UART_Init+0x8c>
    return HAL_ERROR;
 8002824:	2001      	movs	r0, #1
 8002826:	e7ee      	b.n	8002806 <HAL_UART_Init+0xb6>
 8002828:	0afb6e90 	.word	0x0afb6e90

0800282c <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800282c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002830:	2b20      	cmp	r3, #32
 8002832:	d13e      	bne.n	80028b2 <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 8002834:	2900      	cmp	r1, #0
 8002836:	d03a      	beq.n	80028ae <HAL_UART_Transmit+0x82>
 8002838:	2a00      	cmp	r2, #0
 800283a:	d038      	beq.n	80028ae <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800283c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002840:	2b01      	cmp	r3, #1
 8002842:	d036      	beq.n	80028b2 <HAL_UART_Transmit+0x86>
 8002844:	2301      	movs	r3, #1
 8002846:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	2300      	movs	r3, #0
 800284c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284e:	2321      	movs	r3, #33	; 0x21
 8002850:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8002854:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 8002856:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8002858:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800285a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800285c:	b292      	uxth	r2, r2
 800285e:	b952      	cbnz	r2, 8002876 <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	0652      	lsls	r2, r2, #25
 8002864:	d5fc      	bpl.n	8002860 <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002866:	2320      	movs	r3, #32
 8002868:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800286c:	2300      	movs	r3, #0
 800286e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 8002872:	4618      	mov	r0, r3
 8002874:	4770      	bx	lr
      huart->TxXferCount--;
 8002876:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8002878:	3a01      	subs	r2, #1
 800287a:	b292      	uxth	r2, r2
 800287c:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800287e:	6882      	ldr	r2, [r0, #8]
 8002880:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002884:	d10c      	bne.n	80028a0 <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	0612      	lsls	r2, r2, #24
 800288a:	d5fc      	bpl.n	8002886 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800288c:	880a      	ldrh	r2, [r1, #0]
 800288e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002892:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002894:	6902      	ldr	r2, [r0, #16]
 8002896:	b90a      	cbnz	r2, 800289c <HAL_UART_Transmit+0x70>
          pData +=2U;
 8002898:	3102      	adds	r1, #2
 800289a:	e7de      	b.n	800285a <HAL_UART_Transmit+0x2e>
          pData +=1U;
 800289c:	3101      	adds	r1, #1
 800289e:	e7dc      	b.n	800285a <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	0612      	lsls	r2, r2, #24
 80028a4:	d5fc      	bpl.n	80028a0 <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e7d5      	b.n	800285a <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 80028ae:	2001      	movs	r0, #1
 80028b0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2002      	movs	r0, #2
  }
}
 80028b4:	4770      	bx	lr

080028b6 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b6:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80028b8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d144      	bne.n	800294a <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 80028c0:	2900      	cmp	r1, #0
 80028c2:	d040      	beq.n	8002946 <HAL_UART_Receive+0x90>
 80028c4:	2a00      	cmp	r2, #0
 80028c6:	d03e      	beq.n	8002946 <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d03c      	beq.n	800294a <HAL_UART_Receive+0x94>
 80028d0:	2301      	movs	r3, #1
 80028d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028da:	2322      	movs	r3, #34	; 0x22
 80028dc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 80028e0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028e2:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80028e4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b933      	cbnz	r3, 80028f8 <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028ea:	2220      	movs	r2, #32
 80028ec:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 80028f4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028f6:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 80028f8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80028fa:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002902:	6883      	ldr	r3, [r0, #8]
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d111      	bne.n	800292e <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800290a:	6813      	ldr	r3, [r2, #0]
 800290c:	069c      	lsls	r4, r3, #26
 800290e:	d5fc      	bpl.n	800290a <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002910:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002912:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002914:	b933      	cbnz	r3, 8002924 <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002916:	460b      	mov	r3, r1
 8002918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800291c:	f823 2b02 	strh.w	r2, [r3], #2
{
 8002920:	4619      	mov	r1, r3
 8002922:	e7df      	b.n	80028e4 <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002924:	460b      	mov	r3, r1
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 800292c:	e7f8      	b.n	8002920 <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	069b      	lsls	r3, r3, #26
 8002932:	d5fc      	bpl.n	800292e <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002934:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002936:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 8002938:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 800293a:	b90c      	cbnz	r4, 8002940 <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800293c:	700a      	strb	r2, [r1, #0]
 800293e:	e7ef      	b.n	8002920 <HAL_UART_Receive+0x6a>
 8002940:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002944:	e7fa      	b.n	800293c <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 8002946:	2001      	movs	r0, #1
 8002948:	e7d5      	b.n	80028f6 <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 800294a:	2002      	movs	r0, #2
 800294c:	e7d3      	b.n	80028f6 <HAL_UART_Receive+0x40>
 800294e:	0000      	movs	r0, r0

08002950 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <_sbrk+0x2c>)
 8002952:	6811      	ldr	r1, [r2, #0]
{
 8002954:	b508      	push	{r3, lr}
 8002956:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002958:	b909      	cbnz	r1, 800295e <_sbrk+0xe>
		heap_end = &end;
 800295a:	4909      	ldr	r1, [pc, #36]	; (8002980 <_sbrk+0x30>)
 800295c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800295e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002960:	4669      	mov	r1, sp
 8002962:	4403      	add	r3, r0
 8002964:	428b      	cmp	r3, r1
 8002966:	d906      	bls.n	8002976 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002968:	f001 f802 	bl	8003970 <__errno>
 800296c:	230c      	movs	r3, #12
 800296e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002974:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002976:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002978:	e7fc      	b.n	8002974 <_sbrk+0x24>
 800297a:	bf00      	nop
 800297c:	10000f04 	.word	0x10000f04
 8002980:	10000f48 	.word	0x10000f48

08002984 <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8002984:	4770      	bx	lr

08002986 <HAL_RNG_Init>:
{ 
 8002986:	b510      	push	{r4, lr}
  if(hrng == NULL)
 8002988:	4604      	mov	r4, r0
 800298a:	b1a8      	cbz	r0, 80029b8 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 800298c:	7903      	ldrb	r3, [r0, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d014      	beq.n	80029bc <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 8002992:	7943      	ldrb	r3, [r0, #5]
 8002994:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002998:	b913      	cbnz	r3, 80029a0 <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 800299a:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 800299c:	f7ff fff2 	bl	8002984 <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 80029a0:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80029a2:	2302      	movs	r3, #2
 80029a4:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80029a6:	6813      	ldr	r3, [r2, #0]
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 80029ae:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80029b0:	2301      	movs	r3, #1
 80029b2:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 80029b4:	7120      	strb	r0, [r4, #4]
}
 80029b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029b8:	2001      	movs	r0, #1
 80029ba:	e7fc      	b.n	80029b6 <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 80029bc:	2002      	movs	r0, #2
 80029be:	e7fa      	b.n	80029b6 <HAL_RNG_Init+0x30>

080029c0 <KeccakF1600_StateExtractBytes>:
    (uint64_t)0x0000000080000001ULL,
    (uint64_t)0x8000000080008008ULL
};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 80029c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c2:	440b      	add	r3, r1
 80029c4:	1a52      	subs	r2, r2, r1
    unsigned int i;
    for(i=0;i<length;i++)
 80029c6:	4299      	cmp	r1, r3
 80029c8:	d100      	bne.n	80029cc <KeccakF1600_StateExtractBytes+0xc>
    {
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
    }
}
 80029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
 80029cc:	1854      	adds	r4, r2, r1
 80029ce:	f024 0607 	bic.w	r6, r4, #7
 80029d2:	08e5      	lsrs	r5, r4, #3
 80029d4:	4406      	add	r6, r0
 80029d6:	f004 0407 	and.w	r4, r4, #7
 80029da:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80029de:	f850 5035 	ldr.w	r5, [r0, r5, lsl #3]
 80029e2:	00e4      	lsls	r4, r4, #3
 80029e4:	f1c4 0720 	rsb	r7, r4, #32
 80029e8:	f1a4 0620 	sub.w	r6, r4, #32
 80029ec:	fa0c f707 	lsl.w	r7, ip, r7
 80029f0:	fa25 f404 	lsr.w	r4, r5, r4
 80029f4:	433c      	orrs	r4, r7
 80029f6:	fa2c f606 	lsr.w	r6, ip, r6
 80029fa:	4334      	orrs	r4, r6
 80029fc:	f801 4b01 	strb.w	r4, [r1], #1
    for(i=0;i<length;i++)
 8002a00:	e7e1      	b.n	80029c6 <KeccakF1600_StateExtractBytes+0x6>

08002a02 <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 8002a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a04:	440b      	add	r3, r1
 8002a06:	1a52      	subs	r2, r2, r1
    unsigned int i;
    for(i = 0; i < length; i++)
 8002a08:	4299      	cmp	r1, r3
 8002a0a:	d100      	bne.n	8002a0e <KeccakF1600_StateXORBytes+0xc>
    {
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
    }
}
 8002a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 8002a0e:	1854      	adds	r4, r2, r1
 8002a10:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8002a14:	f024 0707 	bic.w	r7, r4, #7
 8002a18:	f004 0407 	and.w	r4, r4, #7
 8002a1c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8002a20:	00e4      	lsls	r4, r4, #3
 8002a22:	f1a4 0520 	sub.w	r5, r4, #32
 8002a26:	f1c4 0e20 	rsb	lr, r4, #32
 8002a2a:	4407      	add	r7, r0
 8002a2c:	fa06 f505 	lsl.w	r5, r6, r5
 8002a30:	fa26 fe0e 	lsr.w	lr, r6, lr
 8002a34:	fa06 f404 	lsl.w	r4, r6, r4
 8002a38:	f850 603c 	ldr.w	r6, [r0, ip, lsl #3]
 8002a3c:	4074      	eors	r4, r6
 8002a3e:	687e      	ldr	r6, [r7, #4]
 8002a40:	f840 403c 	str.w	r4, [r0, ip, lsl #3]
 8002a44:	ea45 050e 	orr.w	r5, r5, lr
 8002a48:	4075      	eors	r5, r6
 8002a4a:	607d      	str	r5, [r7, #4]
    for(i = 0; i < length; i++)
 8002a4c:	e7dc      	b.n	8002a08 <KeccakF1600_StateXORBytes+0x6>
 8002a4e:	0000      	movs	r0, r0

08002a50 <KeccakF1600_StatePermute>:
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
    }
}

void KeccakF1600_StatePermute(uint64_t * state)
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b0bf      	sub	sp, #252	; 0xfc
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0]; 
 8002a56:	6803      	ldr	r3, [r0, #0]
 8002a58:	930c      	str	r3, [sp, #48]	; 0x30
 8002a5a:	6843      	ldr	r3, [r0, #4]
 8002a5c:	930d      	str	r3, [sp, #52]	; 0x34
        Abe = state[ 1];
 8002a5e:	6883      	ldr	r3, [r0, #8]
 8002a60:	930e      	str	r3, [sp, #56]	; 0x38
 8002a62:	68c3      	ldr	r3, [r0, #12]
 8002a64:	930f      	str	r3, [sp, #60]	; 0x3c
        Abi = state[ 2];
 8002a66:	6903      	ldr	r3, [r0, #16]
 8002a68:	9310      	str	r3, [sp, #64]	; 0x40
 8002a6a:	6943      	ldr	r3, [r0, #20]
 8002a6c:	9311      	str	r3, [sp, #68]	; 0x44
        Abo = state[ 3];
 8002a6e:	6983      	ldr	r3, [r0, #24]
 8002a70:	9312      	str	r3, [sp, #72]	; 0x48
 8002a72:	69c3      	ldr	r3, [r0, #28]
 8002a74:	9313      	str	r3, [sp, #76]	; 0x4c
        Abu = state[ 4];
 8002a76:	6a03      	ldr	r3, [r0, #32]
 8002a78:	9314      	str	r3, [sp, #80]	; 0x50
 8002a7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002a7c:	9315      	str	r3, [sp, #84]	; 0x54
        Aga = state[ 5];
 8002a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a80:	9316      	str	r3, [sp, #88]	; 0x58
 8002a82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a84:	9317      	str	r3, [sp, #92]	; 0x5c
        Age = state[ 6];
 8002a86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a88:	9318      	str	r3, [sp, #96]	; 0x60
 8002a8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a8c:	9319      	str	r3, [sp, #100]	; 0x64
        Agi = state[ 7];
 8002a8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a90:	931a      	str	r3, [sp, #104]	; 0x68
 8002a92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002a94:	931b      	str	r3, [sp, #108]	; 0x6c
        Ago = state[ 8];
 8002a96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a98:	931c      	str	r3, [sp, #112]	; 0x70
 8002a9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a9c:	931d      	str	r3, [sp, #116]	; 0x74
        Agu = state[ 9]; //0
 8002a9e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002aa0:	931e      	str	r3, [sp, #120]	; 0x78
 8002aa2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002aa4:	931f      	str	r3, [sp, #124]	; 0x7c
        Aka = state[10]; //0
 8002aa6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002aa8:	9320      	str	r3, [sp, #128]	; 0x80
 8002aaa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002aac:	9321      	str	r3, [sp, #132]	; 0x84
        Ake = state[11]; //0
 8002aae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002ab0:	9322      	str	r3, [sp, #136]	; 0x88
 8002ab2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002ab4:	9323      	str	r3, [sp, #140]	; 0x8c
        Aki = state[12]; //0
 8002ab6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002ab8:	9324      	str	r3, [sp, #144]	; 0x90
 8002aba:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002abc:	9325      	str	r3, [sp, #148]	; 0x94
        Ako = state[13]; //0
 8002abe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002ac0:	9326      	str	r3, [sp, #152]	; 0x98
 8002ac2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002ac4:	9327      	str	r3, [sp, #156]	; 0x9c
        Aku = state[14]; //0
 8002ac6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002ac8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002aca:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002acc:	9329      	str	r3, [sp, #164]	; 0xa4
        Ama = state[15]; //0
 8002ace:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002ad0:	932a      	str	r3, [sp, #168]	; 0xa8
 8002ad2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002ad4:	932b      	str	r3, [sp, #172]	; 0xac
        Ame = state[16];
 8002ad6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8002ada:	932c      	str	r3, [sp, #176]	; 0xb0
 8002adc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002ae0:	932d      	str	r3, [sp, #180]	; 0xb4
        Ami = state[17]; //0
 8002ae2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8002ae6:	932e      	str	r3, [sp, #184]	; 0xb8
 8002ae8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8002aec:	932f      	str	r3, [sp, #188]	; 0xbc
        Amo = state[18]; //0
 8002aee:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8002af2:	9330      	str	r3, [sp, #192]	; 0xc0
 8002af4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8002af8:	9331      	str	r3, [sp, #196]	; 0xc4
        Amu = state[19]; //0
 8002afa:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8002afe:	9332      	str	r3, [sp, #200]	; 0xc8
 8002b00:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8002b04:	9333      	str	r3, [sp, #204]	; 0xcc
        Asa = state[20]; //0
 8002b06:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8002b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b0c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8002b10:	9334      	str	r3, [sp, #208]	; 0xd0
        Ase = state[21]; //0
 8002b12:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
 8002b16:	9335      	str	r3, [sp, #212]	; 0xd4
 8002b18:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8002b1c:	9336      	str	r3, [sp, #216]	; 0xd8
        Asi = state[22]; //0
 8002b1e:	f8d0 30b0 	ldr.w	r3, [r0, #176]	; 0xb0
 8002b22:	9337      	str	r3, [sp, #220]	; 0xdc
 8002b24:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8002b28:	9338      	str	r3, [sp, #224]	; 0xe0
        Aso = state[23]; //0
 8002b2a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8002b2e:	9339      	str	r3, [sp, #228]	; 0xe4
 8002b30:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8002b34:	933a      	str	r3, [sp, #232]	; 0xe8
        Asu = state[24]; //0
 8002b36:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8002b3a:	933b      	str	r3, [sp, #236]	; 0xec
 8002b3c:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4

        for( round = 0; round < NROUNDS; round += 2 )
 8002b40:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <KeccakF1600_StatePermute+0xf8>)
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	e002      	b.n	8002b4c <KeccakF1600_StatePermute+0xfc>
 8002b46:	bf00      	nop
 8002b48:	08004fb0 	.word	0x08004fb0
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8002b4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002b50:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8002b52:	4053      	eors	r3, r2
 8002b54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b56:	ea82 0501 	eor.w	r5, r2, r1
 8002b5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b5c:	4053      	eors	r3, r2
 8002b5e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002b60:	4055      	eors	r5, r2
 8002b62:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8002b64:	4053      	eors	r3, r2
 8002b66:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8002b68:	4055      	eors	r5, r2
 8002b6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b6c:	4053      	eors	r3, r2
 8002b6e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8002b70:	9309      	str	r3, [sp, #36]	; 0x24
 8002b72:	4055      	eors	r5, r2
            BCe = Abe^Age^Ake^Ame^Ase;
 8002b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002b78:	ea83 0902 	eor.w	r9, r3, r2
 8002b7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002b80:	ea83 0802 	eor.w	r8, r3, r2
 8002b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = Abi^Agi^Aki^Ami^Asi;
 8002b86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            BCe = Abe^Age^Ake^Ame^Ase;
 8002b88:	ea89 0903 	eor.w	r9, r9, r3
 8002b8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b8e:	ea88 0803 	eor.w	r8, r8, r3
 8002b92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8002b94:	ea89 0903 	eor.w	r9, r9, r3
 8002b98:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8002b9a:	ea88 0803 	eor.w	r8, r8, r3
 8002b9e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8002ba0:	ea89 0903 	eor.w	r9, r9, r3
 8002ba4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8002ba6:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 8002baa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002bac:	ea83 0c02 	eor.w	ip, r3, r2
 8002bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bb2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002bb4:	ea83 0702 	eor.w	r7, r3, r2
 8002bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002bba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002bbc:	ea8c 0c03 	eor.w	ip, ip, r3
 8002bc0:	4057      	eors	r7, r2
 8002bc2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8002bc4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8002bc6:	ea8c 0c03 	eor.w	ip, ip, r3
 8002bca:	4057      	eors	r7, r2
 8002bcc:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8002bce:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8002bd0:	ea8c 0c03 	eor.w	ip, ip, r3
 8002bd4:	4057      	eors	r7, r2
            BCo = Abo^Ago^Ako^Amo^Aso;
 8002bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002bd8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
            BCu = Abu^Agu^Aku^Amu^Asu;
 8002bda:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
            BCo = Abo^Ago^Ako^Amo^Aso;
 8002bde:	ea83 0402 	eor.w	r4, r3, r2
 8002be2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002be4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002be6:	ea83 0102 	eor.w	r1, r3, r2
 8002bea:	9a26      	ldr	r2, [sp, #152]	; 0x98
            BCu = Abu^Agu^Aku^Amu^Asu;
 8002bec:	9b14      	ldr	r3, [sp, #80]	; 0x50
            BCo = Abo^Ago^Ako^Amo^Aso;
 8002bee:	4054      	eors	r4, r2
 8002bf0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8002bf2:	4051      	eors	r1, r2
 8002bf4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8002bf6:	4054      	eors	r4, r2
 8002bf8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8002bfa:	4051      	eors	r1, r2
 8002bfc:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8002bfe:	4054      	eors	r4, r2
 8002c00:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8002c02:	4051      	eors	r1, r2
            BCu = Abu^Agu^Aku^Amu^Asu;
 8002c04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002c06:	405a      	eors	r2, r3
 8002c08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002c0a:	ea83 0e0e 	eor.w	lr, r3, lr
 8002c0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002c10:	405a      	eors	r2, r3
 8002c12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002c14:	ea8e 0e03 	eor.w	lr, lr, r3
 8002c18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8002c1a:	405a      	eors	r2, r3
 8002c1c:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8002c1e:	ea8e 0e03 	eor.w	lr, lr, r3
 8002c22:	9b3b      	ldr	r3, [sp, #236]	; 0xec

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8002c24:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 8002c28:	405a      	eors	r2, r3
            Da = BCu^ROL(BCe, 1);
 8002c2a:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8002c2e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 8002c32:	ea8e 0e06 	eor.w	lr, lr, r6
            Da = BCu^ROL(BCe, 1);
 8002c36:	ea8b 0302 	eor.w	r3, fp, r2
 8002c3a:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	ea8a 030e 	eor.w	r3, sl, lr
 8002c44:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 8002c46:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 8002c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c4c:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
 8002c50:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8002c54:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8002c58:	ea8b 0303 	eor.w	r3, fp, r3
 8002c5c:	9304      	str	r3, [sp, #16]
 8002c5e:	ea8a 0305 	eor.w	r3, sl, r5
            Di = BCe^ROL(BCo, 1);
 8002c62:	ea4f 0a41 	mov.w	sl, r1, lsl #1
 8002c66:	ea4a 7ad4 	orr.w	sl, sl, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 8002c6a:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 8002c6c:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 8002c70:	ea4f 084e 	mov.w	r8, lr, lsl #1
 8002c74:	ea48 78d2 	orr.w	r8, r8, r2, lsr #31
 8002c78:	0052      	lsls	r2, r2, #1
 8002c7a:	ea42 72de 	orr.w	r2, r2, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 8002c7e:	9306      	str	r3, [sp, #24]
            Do = BCi^ROL(BCu, 1);
 8002c80:	ea82 030c 	eor.w	r3, r2, ip
 8002c84:	9307      	str	r3, [sp, #28]
 8002c86:	ea88 0307 	eor.w	r3, r8, r7
 8002c8a:	9308      	str	r3, [sp, #32]
            Du = BCo^ROL(BCa, 1);
 8002c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c8e:	006a      	lsls	r2, r5, #1
 8002c90:	ea42 72d3 	orr.w	r2, r2, r3, lsr #31
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	ea43 73d5 	orr.w	r3, r3, r5, lsr #31
 8002c9a:	4063      	eors	r3, r4
 8002c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9e:	ea82 0301 	eor.w	r3, r2, r1
            Di = BCe^ROL(BCo, 1);
 8002ca2:	ea4f 0b44 	mov.w	fp, r4, lsl #1

            Aba ^= Da;
 8002ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            Du = BCo^ROL(BCa, 1);
 8002ca8:	930a      	str	r3, [sp, #40]	; 0x28
            Aba ^= Da;
 8002caa:	9b02      	ldr	r3, [sp, #8]
            Di = BCe^ROL(BCo, 1);
 8002cac:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 8002cb0:	ea8b 0b09 	eor.w	fp, fp, r9
            Aba ^= Da;
 8002cb4:	ea83 0902 	eor.w	r9, r3, r2
 8002cb8:	9b03      	ldr	r3, [sp, #12]
 8002cba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            BCa = Aba;
            Age ^= De;
            BCe = ROL(Age, 44);
            Aki ^= Di;
 8002cbc:	9906      	ldr	r1, [sp, #24]
 8002cbe:	9c25      	ldr	r4, [sp, #148]	; 0x94
            BCi = ROL(Aki, 43);
            Amo ^= Do;
 8002cc0:	9f31      	ldr	r7, [sp, #196]	; 0xc4
            Aba ^= Da;
 8002cc2:	ea83 0a02 	eor.w	sl, r3, r2
            Age ^= De;
 8002cc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002cc8:	9b04      	ldr	r3, [sp, #16]
 8002cca:	ea83 0e02 	eor.w	lr, r3, r2
 8002cce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002cd0:	9b05      	ldr	r3, [sp, #20]
 8002cd2:	ea83 0c02 	eor.w	ip, r3, r2
            Aki ^= Di;
 8002cd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002cd8:	ea8b 0202 	eor.w	r2, fp, r2
 8002cdc:	404c      	eors	r4, r1
            BCi = ROL(Aki, 43);
 8002cde:	ea4f 5852 	mov.w	r8, r2, lsr #21
 8002ce2:	ea48 28c4 	orr.w	r8, r8, r4, lsl #11
 8002ce6:	0d64      	lsrs	r4, r4, #21
 8002ce8:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
            Amo ^= Do;
 8002cec:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8002cee:	9a07      	ldr	r2, [sp, #28]
 8002cf0:	4051      	eors	r1, r2
 8002cf2:	9a08      	ldr	r2, [sp, #32]
            BCe = ROL(Age, 44);
 8002cf4:	ea4f 551e 	mov.w	r5, lr, lsr #20
 8002cf8:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
            Amo ^= Do;
 8002cfc:	407a      	eors	r2, r7
            BCe = ROL(Age, 44);
 8002cfe:	ea4f 5c1c 	mov.w	ip, ip, lsr #20
 8002d02:	ea4c 330e 	orr.w	r3, ip, lr, lsl #12
            BCo = ROL(Amo, 21);
 8002d06:	ea4f 5e42 	mov.w	lr, r2, lsl #21
 8002d0a:	ea4e 2ed1 	orr.w	lr, lr, r1, lsr #11
 8002d0e:	0549      	lsls	r1, r1, #21
 8002d10:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
            Asu ^= Du;
 8002d14:	9f3b      	ldr	r7, [sp, #236]	; 0xec
 8002d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d18:	4057      	eors	r7, r2
 8002d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d1c:	4056      	eors	r6, r2
            BCu = ROL(Asu, 14);
 8002d1e:	03ba      	lsls	r2, r7, #14
 8002d20:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 8002d24:	ea4f 3c86 	mov.w	ip, r6, lsl #14
            Eba =   BCa ^((~BCe)&  BCi );
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8002d28:	9e01      	ldr	r6, [sp, #4]
            BCu = ROL(Asu, 14);
 8002d2a:	ea4c 4c97 	orr.w	ip, ip, r7, lsr #18
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8002d2e:	e9d6 7600 	ldrd	r7, r6, [r6]
 8002d32:	ea8a 0606 	eor.w	r6, sl, r6
 8002d36:	960d      	str	r6, [sp, #52]	; 0x34
 8002d38:	ea89 0707 	eor.w	r7, r9, r7
 8002d3c:	ea28 0605 	bic.w	r6, r8, r5
 8002d40:	407e      	eors	r6, r7
 8002d42:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002d44:	960c      	str	r6, [sp, #48]	; 0x30
 8002d46:	ea24 0603 	bic.w	r6, r4, r3
 8002d4a:	4077      	eors	r7, r6
            Ebe =   BCe ^((~BCi)&  BCo );
 8002d4c:	ea2e 0604 	bic.w	r6, lr, r4
 8002d50:	405e      	eors	r6, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8002d52:	970d      	str	r7, [sp, #52]	; 0x34
            Ebe =   BCe ^((~BCi)&  BCo );
 8002d54:	ea21 0708 	bic.w	r7, r1, r8
 8002d58:	406f      	eors	r7, r5
 8002d5a:	9625      	str	r6, [sp, #148]	; 0x94
            Ebi =   BCi ^((~BCo)&  BCu );
            Ebo =   BCo ^((~BCu)&  BCa );
            Ebu =   BCu ^((~BCa)&  BCe );
 8002d5c:	ea25 0509 	bic.w	r5, r5, r9
            Ebi =   BCi ^((~BCo)&  BCu );
 8002d60:	ea2c 060e 	bic.w	r6, ip, lr
            Ebu =   BCu ^((~BCa)&  BCe );
 8002d64:	ea23 030a 	bic.w	r3, r3, sl
            Ebi =   BCi ^((~BCo)&  BCu );
 8002d68:	4074      	eors	r4, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 8002d6a:	ea83 030c 	eor.w	r3, r3, ip
            Ebo =   BCo ^((~BCu)&  BCa );
 8002d6e:	ea29 0602 	bic.w	r6, r9, r2
            Ebe =   BCe ^((~BCi)&  BCo );
 8002d72:	9724      	str	r7, [sp, #144]	; 0x90
            Ebi =   BCi ^((~BCo)&  BCu );
 8002d74:	ea22 0701 	bic.w	r7, r2, r1
            Ebu =   BCu ^((~BCa)&  BCe );
 8002d78:	406a      	eors	r2, r5
            Ebo =   BCo ^((~BCu)&  BCa );
 8002d7a:	4071      	eors	r1, r6
            Ebi =   BCi ^((~BCo)&  BCu );
 8002d7c:	943c      	str	r4, [sp, #240]	; 0xf0
            Ebu =   BCu ^((~BCa)&  BCe );
 8002d7e:	9230      	str	r2, [sp, #192]	; 0xc0
            Ebo =   BCo ^((~BCu)&  BCa );
 8002d80:	ea2a 040c 	bic.w	r4, sl, ip

            Abo ^= Do;
 8002d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
            Ebu =   BCu ^((~BCa)&  BCe );
 8002d86:	9331      	str	r3, [sp, #196]	; 0xc4
            Abo ^= Do;
 8002d88:	9b07      	ldr	r3, [sp, #28]
            Ebo =   BCo ^((~BCu)&  BCa );
 8002d8a:	9118      	str	r1, [sp, #96]	; 0x60
            Ebi =   BCi ^((~BCo)&  BCu );
 8002d8c:	ea87 0708 	eor.w	r7, r7, r8
            Ebo =   BCo ^((~BCu)&  BCa );
 8002d90:	ea84 010e 	eor.w	r1, r4, lr
            Abo ^= Do;
 8002d94:	405a      	eors	r2, r3
            Ebi =   BCi ^((~BCo)&  BCu );
 8002d96:	973b      	str	r7, [sp, #236]	; 0xec
            Ebo =   BCo ^((~BCu)&  BCa );
 8002d98:	9119      	str	r1, [sp, #100]	; 0x64
            Abo ^= Do;
 8002d9a:	9b08      	ldr	r3, [sp, #32]
 8002d9c:	9913      	ldr	r1, [sp, #76]	; 0x4c
            BCa = ROL(Abo, 28);
            Agu ^= Du;
            BCe = ROL(Agu, 20);
            Aka ^= Da;
 8002d9e:	9c21      	ldr	r4, [sp, #132]	; 0x84
            BCi = ROL(Aka,  3);
            Ame ^= De;
            BCo = ROL(Ame, 45);
            Asi ^= Di;
 8002da0:	9f38      	ldr	r7, [sp, #224]	; 0xe0
            Abo ^= Do;
 8002da2:	4059      	eors	r1, r3
            BCa = ROL(Abo, 28);
 8002da4:	ea4f 7c01 	mov.w	ip, r1, lsl #28
 8002da8:	ea4c 1c12 	orr.w	ip, ip, r2, lsr #4
 8002dac:	0712      	lsls	r2, r2, #28
 8002dae:	ea42 1e11 	orr.w	lr, r2, r1, lsr #4
            Agu ^= Du;
 8002db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
            Aka ^= Da;
 8002db6:	9920      	ldr	r1, [sp, #128]	; 0x80
            Agu ^= Du;
 8002db8:	ea83 0802 	eor.w	r8, r3, r2
 8002dbc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dc0:	ea83 0602 	eor.w	r6, r3, r2
            Aka ^= Da;
 8002dc4:	9a02      	ldr	r2, [sp, #8]
 8002dc6:	404a      	eors	r2, r1
 8002dc8:	9903      	ldr	r1, [sp, #12]
 8002dca:	404c      	eors	r4, r1
            BCi = ROL(Aka,  3);
 8002dcc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002dd0:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8002dd4:	00d2      	lsls	r2, r2, #3
 8002dd6:	ea42 7454 	orr.w	r4, r2, r4, lsr #29
            Ame ^= De;
 8002dda:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8002ddc:	9a04      	ldr	r2, [sp, #16]
            BCe = ROL(Agu, 20);
 8002dde:	0535      	lsls	r5, r6, #20
 8002de0:	ea45 3518 	orr.w	r5, r5, r8, lsr #12
 8002de4:	ea4f 5808 	mov.w	r8, r8, lsl #20
 8002de8:	ea48 3316 	orr.w	r3, r8, r6, lsr #12
            Ame ^= De;
 8002dec:	4051      	eors	r1, r2
 8002dee:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 8002df0:	9a05      	ldr	r2, [sp, #20]
            BCo = ROL(Ame, 45);
 8002df2:	ea4f 48d1 	mov.w	r8, r1, lsr #19
            Ame ^= De;
 8002df6:	4072      	eors	r2, r6
            BCo = ROL(Ame, 45);
 8002df8:	ea48 3842 	orr.w	r8, r8, r2, lsl #13
 8002dfc:	0cd2      	lsrs	r2, r2, #19
 8002dfe:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
            Asi ^= Di;
 8002e02:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8002e04:	ea8b 0601 	eor.w	r6, fp, r1
 8002e08:	9906      	ldr	r1, [sp, #24]
 8002e0a:	4079      	eors	r1, r7
            BCu = ROL(Asi, 61);
 8002e0c:	08f7      	lsrs	r7, r6, #3
 8002e0e:	ea47 7741 	orr.w	r7, r7, r1, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 8002e12:	ea24 0a03 	bic.w	sl, r4, r3
            BCu = ROL(Asi, 61);
 8002e16:	08c9      	lsrs	r1, r1, #3
 8002e18:	ea41 7146 	orr.w	r1, r1, r6, lsl #29
            Ega =   BCa ^((~BCe)&  BCi );
 8002e1c:	ea8a 0a0e 	eor.w	sl, sl, lr
 8002e20:	ea29 0605 	bic.w	r6, r9, r5
 8002e24:	ea86 060c 	eor.w	r6, r6, ip
 8002e28:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
            Ege =   BCe ^((~BCi)&  BCo );
 8002e2c:	ea28 0a04 	bic.w	sl, r8, r4
 8002e30:	ea8a 0a03 	eor.w	sl, sl, r3
            Ega =   BCa ^((~BCe)&  BCi );
 8002e34:	962d      	str	r6, [sp, #180]	; 0xb4
            Ege =   BCe ^((~BCi)&  BCo );
 8002e36:	ea22 0609 	bic.w	r6, r2, r9
 8002e3a:	406e      	eors	r6, r5
 8002e3c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
            Egi =   BCi ^((~BCo)&  BCu );
 8002e40:	ea27 0a08 	bic.w	sl, r7, r8
 8002e44:	ea8a 0404 	eor.w	r4, sl, r4
            Ege =   BCe ^((~BCi)&  BCo );
 8002e48:	9613      	str	r6, [sp, #76]	; 0x4c
            Egi =   BCi ^((~BCo)&  BCu );
 8002e4a:	ea21 0602 	bic.w	r6, r1, r2
 8002e4e:	9420      	str	r4, [sp, #128]	; 0x80
 8002e50:	ea86 0409 	eor.w	r4, r6, r9
            Ego =   BCo ^((~BCu)&  BCa );
 8002e54:	ea2e 0607 	bic.w	r6, lr, r7
            Egu =   BCu ^((~BCa)&  BCe );
 8002e58:	ea23 0e0e 	bic.w	lr, r3, lr
 8002e5c:	ea8e 0307 	eor.w	r3, lr, r7
 8002e60:	ea25 050c 	bic.w	r5, r5, ip
            Egi =   BCi ^((~BCo)&  BCu );
 8002e64:	9421      	str	r4, [sp, #132]	; 0x84
            Ego =   BCo ^((~BCu)&  BCa );
 8002e66:	ea2c 0401 	bic.w	r4, ip, r1
 8002e6a:	4062      	eors	r2, r4
            Egu =   BCu ^((~BCa)&  BCe );
 8002e6c:	931e      	str	r3, [sp, #120]	; 0x78
 8002e6e:	ea85 0301 	eor.w	r3, r5, r1
            Ego =   BCo ^((~BCu)&  BCa );
 8002e72:	9238      	str	r2, [sp, #224]	; 0xe0
            Egu =   BCu ^((~BCa)&  BCe );
 8002e74:	931f      	str	r3, [sp, #124]	; 0x7c

            Abe ^= De;
 8002e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e78:	9b04      	ldr	r3, [sp, #16]
 8002e7a:	ea83 0902 	eor.w	r9, r3, r2
 8002e7e:	9b05      	ldr	r3, [sp, #20]
 8002e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e82:	ea83 0502 	eor.w	r5, r3, r2
            BCa = ROL(Abe,  1);
            Agi ^= Di;
 8002e86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
            Ego =   BCo ^((~BCu)&  BCa );
 8002e88:	ea86 0608 	eor.w	r6, r6, r8
            Agi ^= Di;
 8002e8c:	ea8b 0203 	eor.w	r2, fp, r3
            Ego =   BCo ^((~BCu)&  BCa );
 8002e90:	9637      	str	r6, [sp, #220]	; 0xdc
            Agi ^= Di;
 8002e92:	9b06      	ldr	r3, [sp, #24]
 8002e94:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8002e96:	ea83 0701 	eor.w	r7, r3, r1
            BCe = ROL(Agi,  6);
 8002e9a:	01be      	lsls	r6, r7, #6
 8002e9c:	ea46 6692 	orr.w	r6, r6, r2, lsr #26
 8002ea0:	0192      	lsls	r2, r2, #6
 8002ea2:	ea42 6397 	orr.w	r3, r2, r7, lsr #26
            Ako ^= Do;
 8002ea6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002ea8:	9a07      	ldr	r2, [sp, #28]
 8002eaa:	ea82 0701 	eor.w	r7, r2, r1
 8002eae:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8002eb0:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Abe,  1);
 8002eb2:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8002eb6:	ea4c 7cd9 	orr.w	ip, ip, r9, lsr #31
            Ako ^= Do;
 8002eba:	404a      	eors	r2, r1
            BCa = ROL(Abe,  1);
 8002ebc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            BCi = ROL(Ako, 25);
 8002ec0:	0679      	lsls	r1, r7, #25
            BCa = ROL(Abe,  1);
 8002ec2:	ea49 74d5 	orr.w	r4, r9, r5, lsr #31
            BCi = ROL(Ako, 25);
 8002ec6:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
            Amu ^= Du;
 8002eca:	9d32      	ldr	r5, [sp, #200]	; 0xc8
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 8002ecc:	f8dd 90d0 	ldr.w	r9, [sp, #208]	; 0xd0
            BCi = ROL(Ako, 25);
 8002ed0:	ea4f 6842 	mov.w	r8, r2, lsl #25
            Amu ^= Du;
 8002ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            BCi = ROL(Ako, 25);
 8002ed6:	ea48 18d7 	orr.w	r8, r8, r7, lsr #7
            Amu ^= Du;
 8002eda:	4055      	eors	r5, r2
 8002edc:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 8002ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ee0:	407a      	eors	r2, r7
            BCo = ROL(Amu,  8);
 8002ee2:	ea4f 2e02 	mov.w	lr, r2, lsl #8
 8002ee6:	ea4e 6e15 	orr.w	lr, lr, r5, lsr #24
 8002eea:	022d      	lsls	r5, r5, #8
 8002eec:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
            Asa ^= Da;
 8002ef0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8002ef2:	9a02      	ldr	r2, [sp, #8]
 8002ef4:	407a      	eors	r2, r7
 8002ef6:	9f03      	ldr	r7, [sp, #12]
 8002ef8:	ea87 0909 	eor.w	r9, r7, r9
            BCu = ROL(Asa, 18);
 8002efc:	ea4f 4789 	mov.w	r7, r9, lsl #18
 8002f00:	ea47 3792 	orr.w	r7, r7, r2, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 8002f04:	ea21 0a03 	bic.w	sl, r1, r3
            BCu = ROL(Asa, 18);
 8002f08:	0492      	lsls	r2, r2, #18
 8002f0a:	ea42 3299 	orr.w	r2, r2, r9, lsr #14
            Eka =   BCa ^((~BCe)&  BCi );
 8002f0e:	ea8a 0a04 	eor.w	sl, sl, r4
 8002f12:	ea28 0906 	bic.w	r9, r8, r6
 8002f16:	ea89 090c 	eor.w	r9, r9, ip
 8002f1a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
            Eke =   BCe ^((~BCi)&  BCo );
 8002f1e:	ea25 0a01 	bic.w	sl, r5, r1
 8002f22:	ea8a 0a03 	eor.w	sl, sl, r3
            Eka =   BCa ^((~BCe)&  BCi );
 8002f26:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
            Eki =   BCi ^((~BCo)&  BCu );
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );
 8002f2a:	ea23 0304 	bic.w	r3, r3, r4
            Eke =   BCe ^((~BCi)&  BCo );
 8002f2e:	ea2e 0908 	bic.w	r9, lr, r8
 8002f32:	ea89 0906 	eor.w	r9, r9, r6
            Eku =   BCu ^((~BCa)&  BCe );
 8002f36:	4053      	eors	r3, r2
 8002f38:	ea26 060c 	bic.w	r6, r6, ip
            Eke =   BCe ^((~BCi)&  BCo );
 8002f3c:	f8cd a0c8 	str.w	sl, [sp, #200]	; 0xc8
            Eki =   BCi ^((~BCo)&  BCu );
 8002f40:	ea22 0a05 	bic.w	sl, r2, r5
 8002f44:	ea8a 0101 	eor.w	r1, sl, r1
            Eke =   BCe ^((~BCi)&  BCo );
 8002f48:	f8cd 90cc 	str.w	r9, [sp, #204]	; 0xcc
            Eku =   BCu ^((~BCa)&  BCe );
 8002f4c:	9334      	str	r3, [sp, #208]	; 0xd0
            Eki =   BCi ^((~BCo)&  BCu );
 8002f4e:	ea27 090e 	bic.w	r9, r7, lr
            Eku =   BCu ^((~BCa)&  BCe );
 8002f52:	ea86 0307 	eor.w	r3, r6, r7
            Eki =   BCi ^((~BCo)&  BCu );
 8002f56:	910e      	str	r1, [sp, #56]	; 0x38
            Eku =   BCu ^((~BCa)&  BCe );
 8002f58:	933d      	str	r3, [sp, #244]	; 0xf4
            Eki =   BCi ^((~BCo)&  BCu );
 8002f5a:	ea89 0108 	eor.w	r1, r9, r8

            Abu ^= Du;
 8002f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
            Eki =   BCi ^((~BCo)&  BCu );
 8002f60:	910f      	str	r1, [sp, #60]	; 0x3c
            Eko =   BCo ^((~BCu)&  BCa );
 8002f62:	ea24 0802 	bic.w	r8, r4, r2
            Abu ^= Du;
 8002f66:	9a14      	ldr	r2, [sp, #80]	; 0x50
            Eko =   BCo ^((~BCu)&  BCa );
 8002f68:	ea2c 0107 	bic.w	r1, ip, r7
            Abu ^= Du;
 8002f6c:	ea83 0702 	eor.w	r7, r3, r2
 8002f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f72:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f74:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Abu, 27);
            Aga ^= Da;
 8002f78:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002f7a:	9b02      	ldr	r3, [sp, #8]
            Eko =   BCo ^((~BCu)&  BCa );
 8002f7c:	ea81 010e 	eor.w	r1, r1, lr
            Aga ^= Da;
 8002f80:	4053      	eors	r3, r2
            Eko =   BCo ^((~BCu)&  BCa );
 8002f82:	9127      	str	r1, [sp, #156]	; 0x9c
            Aga ^= Da;
 8002f84:	9a03      	ldr	r2, [sp, #12]
 8002f86:	9917      	ldr	r1, [sp, #92]	; 0x5c
            BCa = ROL(Abu, 27);
 8002f88:	ea4f 6ec6 	mov.w	lr, r6, lsl #27
 8002f8c:	ea4e 1e57 	orr.w	lr, lr, r7, lsr #5
 8002f90:	06ff      	lsls	r7, r7, #27
 8002f92:	ea47 1c56 	orr.w	ip, r7, r6, lsr #5
            Aga ^= Da;
 8002f96:	4051      	eors	r1, r2
            BCe = ROL(Aga, 36);
 8002f98:	0f1e      	lsrs	r6, r3, #28
 8002f9a:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 8002f9e:	ea88 0505 	eor.w	r5, r8, r5
            BCe = ROL(Aga, 36);
 8002fa2:	0f09      	lsrs	r1, r1, #28
 8002fa4:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
            Eko =   BCo ^((~BCu)&  BCa );
 8002fa8:	9526      	str	r5, [sp, #152]	; 0x98
            Ake ^= De;
 8002faa:	9b04      	ldr	r3, [sp, #16]
 8002fac:	9a22      	ldr	r2, [sp, #136]	; 0x88
            BCi = ROL(Ake, 10);
            Ami ^= Di;
            BCo = ROL(Ami, 15);
            Aso ^= Do;
 8002fae:	9f39      	ldr	r7, [sp, #228]	; 0xe4
            Ake ^= De;
 8002fb0:	ea83 0402 	eor.w	r4, r3, r2
 8002fb4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002fb6:	9b05      	ldr	r3, [sp, #20]
 8002fb8:	ea83 0502 	eor.w	r5, r3, r2
            BCi = ROL(Ake, 10);
 8002fbc:	ea4f 2885 	mov.w	r8, r5, lsl #10
 8002fc0:	ea48 5894 	orr.w	r8, r8, r4, lsr #22
 8002fc4:	02a4      	lsls	r4, r4, #10
 8002fc6:	ea44 5595 	orr.w	r5, r4, r5, lsr #22
            Ami ^= Di;
 8002fca:	9a06      	ldr	r2, [sp, #24]
 8002fcc:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8002fce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8002fd0:	4054      	eors	r4, r2
 8002fd2:	ea8b 0303 	eor.w	r3, fp, r3
            BCo = ROL(Ami, 15);
 8002fd6:	03e2      	lsls	r2, r4, #15
 8002fd8:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8002fdc:	03db      	lsls	r3, r3, #15
 8002fde:	ea43 4354 	orr.w	r3, r3, r4, lsr #17
            Aso ^= Do;
 8002fe2:	9c07      	ldr	r4, [sp, #28]
 8002fe4:	ea84 0907 	eor.w	r9, r4, r7
 8002fe8:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 8002fea:	9c08      	ldr	r4, [sp, #32]
 8002fec:	407c      	eors	r4, r7
            BCu = ROL(Aso, 56);
 8002fee:	ea4f 2719 	mov.w	r7, r9, lsr #8
 8002ff2:	ea47 6704 	orr.w	r7, r7, r4, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8002ff6:	ea25 0a06 	bic.w	sl, r5, r6
            BCu = ROL(Aso, 56);
 8002ffa:	0a24      	lsrs	r4, r4, #8
 8002ffc:	ea44 6409 	orr.w	r4, r4, r9, lsl #24
            Ema =   BCa ^((~BCe)&  BCi );
 8003000:	ea8a 0a0c 	eor.w	sl, sl, ip
 8003004:	ea28 0901 	bic.w	r9, r8, r1
 8003008:	ea89 090e 	eor.w	r9, r9, lr
 800300c:	f8cd a0e4 	str.w	sl, [sp, #228]	; 0xe4
            Eme =   BCe ^((~BCi)&  BCo );
 8003010:	ea23 0a05 	bic.w	sl, r3, r5
 8003014:	ea8a 0a06 	eor.w	sl, sl, r6
            Ema =   BCa ^((~BCe)&  BCi );
 8003018:	f8cd 90e8 	str.w	r9, [sp, #232]	; 0xe8
            Eme =   BCe ^((~BCi)&  BCo );
 800301c:	ea22 0908 	bic.w	r9, r2, r8
 8003020:	ea89 0901 	eor.w	r9, r9, r1
 8003024:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
            Emi =   BCi ^((~BCo)&  BCu );
 8003028:	ea27 0a03 	bic.w	sl, r7, r3
 800302c:	ea8a 0505 	eor.w	r5, sl, r5
            Eme =   BCe ^((~BCi)&  BCo );
 8003030:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
            Emi =   BCi ^((~BCo)&  BCu );
 8003034:	ea24 0902 	bic.w	r9, r4, r2
 8003038:	952e      	str	r5, [sp, #184]	; 0xb8
 800303a:	ea89 0508 	eor.w	r5, r9, r8
            Emo =   BCo ^((~BCu)&  BCa );
 800303e:	ea2c 0807 	bic.w	r8, ip, r7
 8003042:	ea88 0303 	eor.w	r3, r8, r3
            Emi =   BCi ^((~BCo)&  BCu );
 8003046:	952f      	str	r5, [sp, #188]	; 0xbc
            Emo =   BCo ^((~BCu)&  BCa );
 8003048:	ea2e 0504 	bic.w	r5, lr, r4
            Emu =   BCu ^((~BCa)&  BCe );
 800304c:	ea26 0c0c 	bic.w	ip, r6, ip
            Emo =   BCo ^((~BCu)&  BCa );
 8003050:	9314      	str	r3, [sp, #80]	; 0x50
 8003052:	ea85 0302 	eor.w	r3, r5, r2
            Emu =   BCu ^((~BCa)&  BCe );
 8003056:	ea21 010e 	bic.w	r1, r1, lr
            Emo =   BCo ^((~BCu)&  BCa );
 800305a:	9315      	str	r3, [sp, #84]	; 0x54
            Emu =   BCu ^((~BCa)&  BCe );
 800305c:	ea8c 0307 	eor.w	r3, ip, r7
 8003060:	9322      	str	r3, [sp, #136]	; 0x88
 8003062:	ea81 0304 	eor.w	r3, r1, r4
 8003066:	9323      	str	r3, [sp, #140]	; 0x8c

            Abi ^= Di;
 8003068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800306a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800306c:	ea8b 0903 	eor.w	r9, fp, r3
 8003070:	9b06      	ldr	r3, [sp, #24]
 8003072:	ea83 0a02 	eor.w	sl, r3, r2
            BCa = ROL(Abi, 62);
            Ago ^= Do;
 8003076:	9b07      	ldr	r3, [sp, #28]
 8003078:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800307a:	ea83 0c02 	eor.w	ip, r3, r2
 800307e:	9b08      	ldr	r3, [sp, #32]
 8003080:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003082:	ea83 0702 	eor.w	r7, r3, r2
            BCe = ROL(Ago, 55);
            Aku ^= Du;
 8003086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003088:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800308a:	ea83 0402 	eor.w	r4, r3, r2
 800308e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003092:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Aku, 39);
            Ama ^= Da;
 8003096:	9b02      	ldr	r3, [sp, #8]
 8003098:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
            BCa = ROL(Abi, 62);
 800309a:	ea4f 0699 	mov.w	r6, r9, lsr #2
            Ama ^= Da;
 800309e:	ea83 0b02 	eor.w	fp, r3, r2
            BCe = ROL(Ago, 55);
 80030a2:	ea4f 2e5c 	mov.w	lr, ip, lsr #9
            Ama ^= Da;
 80030a6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80030a8:	9b03      	ldr	r3, [sp, #12]
            BCa = ROL(Abi, 62);
 80030aa:	ea46 768a 	orr.w	r6, r6, sl, lsl #30
            BCe = ROL(Ago, 55);
 80030ae:	ea4e 5ec7 	orr.w	lr, lr, r7, lsl #23
            BCa = ROL(Abi, 62);
 80030b2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
            BCe = ROL(Ago, 55);
 80030b6:	0a7f      	lsrs	r7, r7, #9
 80030b8:	ea47 55cc 	orr.w	r5, r7, ip, lsl #23
            BCa = ROL(Abi, 62);
 80030bc:	ea4a 7989 	orr.w	r9, sl, r9, lsl #30
            BCi = ROL(Aku, 39);
 80030c0:	ea4f 6c54 	mov.w	ip, r4, lsr #25
            Ama ^= Da;
 80030c4:	ea83 0a02 	eor.w	sl, r3, r2
            BCo = ROL(Ama, 41);
            Ase ^= De;
 80030c8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80030ca:	9b04      	ldr	r3, [sp, #16]
            BCi = ROL(Aku, 39);
 80030cc:	ea4c 1cc1 	orr.w	ip, ip, r1, lsl #7
            BCo = ROL(Ama, 41);
 80030d0:	ea4f 57da 	mov.w	r7, sl, lsr #23
            BCi = ROL(Aku, 39);
 80030d4:	0e49      	lsrs	r1, r1, #25
 80030d6:	ea41 18c4 	orr.w	r8, r1, r4, lsl #7
            BCo = ROL(Ama, 41);
 80030da:	ea47 274b 	orr.w	r7, r7, fp, lsl #9
 80030de:	ea4f 51db 	mov.w	r1, fp, lsr #23
            Ase ^= De;
 80030e2:	ea83 0b02 	eor.w	fp, r3, r2
 80030e6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80030e8:	9b05      	ldr	r3, [sp, #20]
            BCo = ROL(Ama, 41);
 80030ea:	ea41 214a 	orr.w	r1, r1, sl, lsl #9
            Ase ^= De;
 80030ee:	ea83 0a02 	eor.w	sl, r3, r2
            BCu = ROL(Ase,  2);
 80030f2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80030f6:	ea43 729a 	orr.w	r2, r3, sl, lsr #30
            Esa =   BCa ^((~BCe)&  BCi );
 80030fa:	ea28 0305 	bic.w	r3, r8, r5
 80030fe:	ea83 0309 	eor.w	r3, r3, r9
            BCu = ROL(Ase,  2);
 8003102:	ea4f 048a 	mov.w	r4, sl, lsl #2
            Esa =   BCa ^((~BCe)&  BCi );
 8003106:	ea2c 0a0e 	bic.w	sl, ip, lr
 800310a:	ea8a 0a06 	eor.w	sl, sl, r6
 800310e:	9329      	str	r3, [sp, #164]	; 0xa4
            Ese =   BCe ^((~BCi)&  BCo );
 8003110:	ea21 030c 	bic.w	r3, r1, ip
            Esa =   BCa ^((~BCe)&  BCi );
 8003114:	f8cd a0a0 	str.w	sl, [sp, #160]	; 0xa0
            Ese =   BCe ^((~BCi)&  BCo );
 8003118:	ea83 030e 	eor.w	r3, r3, lr
 800311c:	ea27 0a08 	bic.w	sl, r7, r8
            BCu = ROL(Ase,  2);
 8003120:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
            Ese =   BCe ^((~BCi)&  BCo );
 8003124:	9335      	str	r3, [sp, #212]	; 0xd4
 8003126:	ea8a 0305 	eor.w	r3, sl, r5
 800312a:	9336      	str	r3, [sp, #216]	; 0xd8
            Esi =   BCi ^((~BCo)&  BCu );
 800312c:	ea24 0307 	bic.w	r3, r4, r7
 8003130:	ea83 0308 	eor.w	r3, r3, r8
 8003134:	931d      	str	r3, [sp, #116]	; 0x74
            Eso =   BCo ^((~BCu)&  BCa );
 8003136:	ea29 0304 	bic.w	r3, r9, r4
 800313a:	407b      	eors	r3, r7
 800313c:	932b      	str	r3, [sp, #172]	; 0xac
            Esu =   BCu ^((~BCa)&  BCe );
 800313e:	ea2e 0306 	bic.w	r3, lr, r6
            Esi =   BCi ^((~BCo)&  BCu );
 8003142:	ea22 0a01 	bic.w	sl, r2, r1
            Esu =   BCu ^((~BCa)&  BCe );
 8003146:	ea25 0909 	bic.w	r9, r5, r9
 800314a:	4053      	eors	r3, r2
            Esi =   BCi ^((~BCo)&  BCu );
 800314c:	ea8a 0c0c 	eor.w	ip, sl, ip
            Esu =   BCu ^((~BCa)&  BCe );
 8003150:	9310      	str	r3, [sp, #64]	; 0x40
 8003152:	ea89 0304 	eor.w	r3, r9, r4
            Esi =   BCi ^((~BCo)&  BCu );
 8003156:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
            Esu =   BCu ^((~BCa)&  BCe );
 800315a:	9311      	str	r3, [sp, #68]	; 0x44
            Eso =   BCo ^((~BCu)&  BCa );
 800315c:	ea26 0c02 	bic.w	ip, r6, r2

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8003160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003162:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
            Eso =   BCo ^((~BCu)&  BCa );
 8003164:	ea8c 0101 	eor.w	r1, ip, r1
 8003168:	912a      	str	r1, [sp, #168]	; 0xa8
            BCa = Eba^Ega^Eka^Ema^Esa;
 800316a:	405a      	eors	r2, r3
 800316c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800316e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003170:	ea83 0601 	eor.w	r6, r3, r1
 8003174:	991a      	ldr	r1, [sp, #104]	; 0x68
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8003176:	9b24      	ldr	r3, [sp, #144]	; 0x90
            BCa = Eba^Ega^Eka^Ema^Esa;
 8003178:	404a      	eors	r2, r1
 800317a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800317c:	404e      	eors	r6, r1
 800317e:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8003180:	404a      	eors	r2, r1
 8003182:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8003184:	404e      	eors	r6, r1
 8003186:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8003188:	404a      	eors	r2, r1
 800318a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800318c:	404e      	eors	r6, r1
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800318e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003190:	ea83 0901 	eor.w	r9, r3, r1
 8003194:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003196:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003198:	ea83 0801 	eor.w	r8, r3, r1
 800319c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800319e:	9920      	ldr	r1, [sp, #128]	; 0x80
            BCo = Ebo^Ego^Eko^Emo^Eso;
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80031a0:	f8dd e0f4 	ldr.w	lr, [sp, #244]	; 0xf4
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80031a4:	ea89 0903 	eor.w	r9, r9, r3
 80031a8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80031aa:	ea88 0803 	eor.w	r8, r8, r3
 80031ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80031b0:	ea89 0903 	eor.w	r9, r9, r3
 80031b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80031b6:	ea88 0803 	eor.w	r8, r8, r3
 80031ba:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80031bc:	ea89 0903 	eor.w	r9, r9, r3
 80031c0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80031c2:	ea88 0803 	eor.w	r8, r8, r3
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80031c6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80031c8:	ea83 0c01 	eor.w	ip, r3, r1
 80031cc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80031ce:	9921      	ldr	r1, [sp, #132]	; 0x84
 80031d0:	ea83 0701 	eor.w	r7, r3, r1
 80031d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80031d8:	ea8c 0c03 	eor.w	ip, ip, r3
 80031dc:	404f      	eors	r7, r1
 80031de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80031e0:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80031e2:	ea8c 0c03 	eor.w	ip, ip, r3
 80031e6:	404f      	eors	r7, r1
 80031e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80031ea:	991d      	ldr	r1, [sp, #116]	; 0x74
 80031ec:	ea8c 0c03 	eor.w	ip, ip, r3
 80031f0:	404f      	eors	r7, r1
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80031f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80031f4:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80031f6:	ea83 0501 	eor.w	r5, r3, r1
 80031fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031fc:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80031fe:	ea83 0401 	eor.w	r4, r3, r1
 8003202:	9926      	ldr	r1, [sp, #152]	; 0x98
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8003204:	9b1e      	ldr	r3, [sp, #120]	; 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8003206:	404d      	eors	r5, r1
 8003208:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800320a:	404c      	eors	r4, r1
 800320c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800320e:	404d      	eors	r5, r1
 8003210:	9915      	ldr	r1, [sp, #84]	; 0x54
 8003212:	404c      	eors	r4, r1
 8003214:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8003216:	404d      	eors	r5, r1
 8003218:	992b      	ldr	r1, [sp, #172]	; 0xac
 800321a:	404c      	eors	r4, r1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800321c:	9934      	ldr	r1, [sp, #208]	; 0xd0
 800321e:	4059      	eors	r1, r3
 8003220:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003222:	ea83 0e0e 	eor.w	lr, r3, lr
 8003226:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003228:	4059      	eors	r1, r3
 800322a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800322c:	ea8e 0e03 	eor.w	lr, lr, r3
 8003230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003232:	4059      	eors	r1, r3
 8003234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003236:	ea8e 0e03 	eor.w	lr, lr, r3
 800323a:	9b10      	ldr	r3, [sp, #64]	; 0x40

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 800323c:	ea4f 0b49 	mov.w	fp, r9, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8003240:	4059      	eors	r1, r3
 8003242:	9b11      	ldr	r3, [sp, #68]	; 0x44
            Da = BCu^ROL(BCe, 1);
 8003244:	ea4b 7bd8 	orr.w	fp, fp, r8, lsr #31
 8003248:	ea4f 0a48 	mov.w	sl, r8, lsl #1
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800324c:	ea8e 0e03 	eor.w	lr, lr, r3
            Da = BCu^ROL(BCe, 1);
 8003250:	ea4a 7ad9 	orr.w	sl, sl, r9, lsr #31
 8003254:	ea8b 0301 	eor.w	r3, fp, r1
            De = BCa^ROL(BCi, 1);
 8003258:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
            Da = BCu^ROL(BCe, 1);
 800325c:	9302      	str	r3, [sp, #8]
            De = BCa^ROL(BCi, 1);
 800325e:	ea4b 7bd7 	orr.w	fp, fp, r7, lsr #31
            Da = BCu^ROL(BCe, 1);
 8003262:	ea8a 030e 	eor.w	r3, sl, lr
            De = BCa^ROL(BCi, 1);
 8003266:	ea4f 0a47 	mov.w	sl, r7, lsl #1
            Da = BCu^ROL(BCe, 1);
 800326a:	9303      	str	r3, [sp, #12]
            De = BCa^ROL(BCi, 1);
 800326c:	ea4a 7adc 	orr.w	sl, sl, ip, lsr #31
 8003270:	ea8b 0302 	eor.w	r3, fp, r2
            Di = BCe^ROL(BCo, 1);
 8003274:	ea4f 0b45 	mov.w	fp, r5, lsl #1
            De = BCa^ROL(BCi, 1);
 8003278:	9304      	str	r3, [sp, #16]
            Di = BCe^ROL(BCo, 1);
 800327a:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
            De = BCa^ROL(BCi, 1);
 800327e:	ea8a 0306 	eor.w	r3, sl, r6
            Di = BCe^ROL(BCo, 1);
 8003282:	ea4f 0a44 	mov.w	sl, r4, lsl #1
            De = BCa^ROL(BCi, 1);
 8003286:	9305      	str	r3, [sp, #20]
            Di = BCe^ROL(BCo, 1);
 8003288:	ea4a 7ad5 	orr.w	sl, sl, r5, lsr #31
 800328c:	ea8b 0309 	eor.w	r3, fp, r9
 8003290:	9306      	str	r3, [sp, #24]
 8003292:	ea8a 0308 	eor.w	r3, sl, r8
            Do = BCi^ROL(BCu, 1);
 8003296:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800329a:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 800329e:	0049      	lsls	r1, r1, #1
 80032a0:	ea41 71de 	orr.w	r1, r1, lr, lsr #31
            Di = BCe^ROL(BCo, 1);
 80032a4:	9307      	str	r3, [sp, #28]
            Do = BCi^ROL(BCu, 1);
 80032a6:	ea81 030c 	eor.w	r3, r1, ip
 80032aa:	9308      	str	r3, [sp, #32]
 80032ac:	ea88 0307 	eor.w	r3, r8, r7
            Du = BCo^ROL(BCa, 1);
 80032b0:	0077      	lsls	r7, r6, #1
 80032b2:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 80032b6:	0052      	lsls	r2, r2, #1
 80032b8:	ea42 72d6 	orr.w	r2, r2, r6, lsr #31
            Do = BCi^ROL(BCu, 1);
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
            Du = BCo^ROL(BCa, 1);
 80032be:	ea82 0305 	eor.w	r3, r2, r5
 80032c2:	930a      	str	r3, [sp, #40]	; 0x28
 80032c4:	ea87 0304 	eor.w	r3, r7, r4

            Eba ^= Da;
 80032c8:	9a02      	ldr	r2, [sp, #8]
            Du = BCo^ROL(BCa, 1);
 80032ca:	930b      	str	r3, [sp, #44]	; 0x2c
            Eba ^= Da;
 80032cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032ce:	ea83 0702 	eor.w	r7, r3, r2
 80032d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032d4:	9a03      	ldr	r2, [sp, #12]
 80032d6:	ea83 0b02 	eor.w	fp, r3, r2
            BCa = Eba;
            Ege ^= De;
 80032da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032dc:	9a04      	ldr	r2, [sp, #16]
 80032de:	ea83 0a02 	eor.w	sl, r3, r2
 80032e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80032e4:	9a05      	ldr	r2, [sp, #20]
            BCe = ROL(Ege, 44);
 80032e6:	ea4f 541a 	mov.w	r4, sl, lsr #20
            Ege ^= De;
 80032ea:	ea83 0602 	eor.w	r6, r3, r2
            Eki ^= Di;
 80032ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032f0:	9a06      	ldr	r2, [sp, #24]
            BCe = ROL(Ege, 44);
 80032f2:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
 80032f6:	0d36      	lsrs	r6, r6, #20
 80032f8:	ea46 360a 	orr.w	r6, r6, sl, lsl #12
            Eki ^= Di;
 80032fc:	ea83 0a02 	eor.w	sl, r3, r2
 8003300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003302:	9a07      	ldr	r2, [sp, #28]
 8003304:	ea83 0902 	eor.w	r9, r3, r2
            BCi = ROL(Eki, 43);
            Emo ^= Do;
 8003308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800330a:	9a08      	ldr	r2, [sp, #32]
 800330c:	ea83 0c02 	eor.w	ip, r3, r2
 8003310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003314:	ea83 0502 	eor.w	r5, r3, r2
            BCo = ROL(Emo, 21);
 8003318:	ea4f 524c 	mov.w	r2, ip, lsl #21
 800331c:	ea42 22d5 	orr.w	r2, r2, r5, lsr #11
            Esu ^= Du;
 8003320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            BCo = ROL(Emo, 21);
 8003322:	ea4f 5e45 	mov.w	lr, r5, lsl #21
            Esu ^= Du;
 8003326:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003328:	405d      	eors	r5, r3
            BCo = ROL(Emo, 21);
 800332a:	ea4e 2edc 	orr.w	lr, lr, ip, lsr #11
            Esu ^= Du;
 800332e:	462b      	mov	r3, r5
 8003330:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003332:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003336:	ea85 050c 	eor.w	r5, r5, ip
            BCu = ROL(Esu, 14);
 800333a:	ea4f 3c85 	mov.w	ip, r5, lsl #14
 800333e:	ea4c 4c93 	orr.w	ip, ip, r3, lsr #18
 8003342:	039b      	lsls	r3, r3, #14
 8003344:	ea43 4395 	orr.w	r3, r3, r5, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8003348:	9d01      	ldr	r5, [sp, #4]
 800334a:	68ad      	ldr	r5, [r5, #8]
 800334c:	950c      	str	r5, [sp, #48]	; 0x30
 800334e:	9d01      	ldr	r5, [sp, #4]
            BCi = ROL(Eki, 43);
 8003350:	ea4f 585a 	mov.w	r8, sl, lsr #21
 8003354:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8003358:	68ed      	ldr	r5, [r5, #12]
            BCi = ROL(Eki, 43);
 800335a:	ea4f 5959 	mov.w	r9, r9, lsr #21
 800335e:	ea49 21ca 	orr.w	r1, r9, sl, lsl #11
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8003362:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8003366:	ea28 0a04 	bic.w	sl, r8, r4
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 800336a:	ea8b 0505 	eor.w	r5, fp, r5
 800336e:	950d      	str	r5, [sp, #52]	; 0x34
 8003370:	ea87 0909 	eor.w	r9, r7, r9
            Aba =   BCa ^((~BCe)&  BCi );
 8003374:	4655      	mov	r5, sl
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8003376:	ea89 0905 	eor.w	r9, r9, r5
 800337a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800337c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
            Aba =   BCa ^((~BCe)&  BCi );
 8003380:	ea21 0a06 	bic.w	sl, r1, r6
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8003384:	ea85 050a 	eor.w	r5, r5, sl
 8003388:	950d      	str	r5, [sp, #52]	; 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 800338a:	ea2e 0501 	bic.w	r5, lr, r1
 800338e:	4075      	eors	r5, r6
 8003390:	ea22 0908 	bic.w	r9, r2, r8
 8003394:	950f      	str	r5, [sp, #60]	; 0x3c
            Abi =   BCi ^((~BCo)&  BCu );
 8003396:	ea2c 050e 	bic.w	r5, ip, lr
            Abe =   BCe ^((~BCi)&  BCo );
 800339a:	ea89 0904 	eor.w	r9, r9, r4
            Abi =   BCi ^((~BCo)&  BCu );
 800339e:	4069      	eors	r1, r5
            Abo =   BCo ^((~BCu)&  BCa );
 80033a0:	ea27 0503 	bic.w	r5, r7, r3
            Abu =   BCu ^((~BCa)&  BCe );
 80033a4:	ea24 0707 	bic.w	r7, r4, r7
 80033a8:	ea26 060b 	bic.w	r6, r6, fp
            Abe =   BCe ^((~BCi)&  BCo );
 80033ac:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
            Abi =   BCi ^((~BCo)&  BCu );
 80033b0:	9111      	str	r1, [sp, #68]	; 0x44
 80033b2:	ea23 0902 	bic.w	r9, r3, r2
            Abo =   BCo ^((~BCu)&  BCa );
 80033b6:	ea2b 010c 	bic.w	r1, fp, ip
 80033ba:	406a      	eors	r2, r5
            Abu =   BCu ^((~BCa)&  BCe );
 80033bc:	407b      	eors	r3, r7
            Abo =   BCo ^((~BCu)&  BCa );
 80033be:	9212      	str	r2, [sp, #72]	; 0x48
            Abu =   BCu ^((~BCa)&  BCe );
 80033c0:	9314      	str	r3, [sp, #80]	; 0x50
            Abo =   BCo ^((~BCu)&  BCa );
 80033c2:	ea81 020e 	eor.w	r2, r1, lr
            Abu =   BCu ^((~BCa)&  BCe );
 80033c6:	ea86 030c 	eor.w	r3, r6, ip
            Abo =   BCo ^((~BCu)&  BCa );
 80033ca:	9213      	str	r2, [sp, #76]	; 0x4c
            Abu =   BCu ^((~BCa)&  BCe );
 80033cc:	9315      	str	r3, [sp, #84]	; 0x54

            Ebo ^= Do;
 80033ce:	9a08      	ldr	r2, [sp, #32]
 80033d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80033d2:	ea83 0102 	eor.w	r1, r3, r2
 80033d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80033d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033da:	ea83 0e02 	eor.w	lr, r3, r2
            BCa = ROL(Ebo, 28);
 80033de:	ea4f 7b0e 	mov.w	fp, lr, lsl #28
            Egu ^= Du;
 80033e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            BCa = ROL(Ebo, 28);
 80033e6:	ea4b 1b11 	orr.w	fp, fp, r1, lsr #4
 80033ea:	0709      	lsls	r1, r1, #28
 80033ec:	ea41 141e 	orr.w	r4, r1, lr, lsr #4
            Egu ^= Du;
 80033f0:	ea83 0e02 	eor.w	lr, r3, r2
 80033f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033f8:	ea83 0502 	eor.w	r5, r3, r2
            BCe = ROL(Egu, 20);
            Eka ^= Da;
 80033fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80033fe:	9a02      	ldr	r2, [sp, #8]
            BCe = ROL(Egu, 20);
 8003400:	052e      	lsls	r6, r5, #20
            Eka ^= Da;
 8003402:	ea83 0a02 	eor.w	sl, r3, r2
 8003406:	9a03      	ldr	r2, [sp, #12]
 8003408:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
            BCe = ROL(Egu, 20);
 800340a:	ea46 361e 	orr.w	r6, r6, lr, lsr #12
            Abi =   BCi ^((~BCo)&  BCu );
 800340e:	ea89 0808 	eor.w	r8, r9, r8
            BCe = ROL(Egu, 20);
 8003412:	ea4f 5e0e 	mov.w	lr, lr, lsl #20
 8003416:	ea4e 3115 	orr.w	r1, lr, r5, lsr #12
            Eka ^= Da;
 800341a:	ea83 0902 	eor.w	r9, r3, r2
            Abi =   BCi ^((~BCo)&  BCu );
 800341e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
            BCi = ROL(Eka, 3);
            Eme ^= De;
 8003422:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003424:	9d04      	ldr	r5, [sp, #16]
 8003426:	f8dd c014 	ldr.w	ip, [sp, #20]
            BCo = ROL(Eme, 45);
            Esi ^= Di;
 800342a:	f8dd e01c 	ldr.w	lr, [sp, #28]
            Eme ^= De;
 800342e:	406b      	eors	r3, r5
            BCi = ROL(Eka, 3);
 8003430:	ea4f 07c9 	mov.w	r7, r9, lsl #3
            Eme ^= De;
 8003434:	9d17      	ldr	r5, [sp, #92]	; 0x5c
            BCi = ROL(Eka, 3);
 8003436:	ea47 775a 	orr.w	r7, r7, sl, lsr #29
 800343a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800343e:	ea4a 7259 	orr.w	r2, sl, r9, lsr #29
            Eme ^= De;
 8003442:	ea85 090c 	eor.w	r9, r5, ip
            BCo = ROL(Eme, 45);
 8003446:	0cdd      	lsrs	r5, r3, #19
 8003448:	ea45 3549 	orr.w	r5, r5, r9, lsl #13
 800344c:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8003450:	ea49 3a43 	orr.w	sl, r9, r3, lsl #13
            Esi ^= Di;
 8003454:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003458:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800345a:	ea83 0c0c 	eor.w	ip, r3, ip
 800345e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            BCu = ROL(Esi, 61);
 8003460:	ea4f 08dc 	mov.w	r8, ip, lsr #3
            Esi ^= Di;
 8003464:	ea83 030e 	eor.w	r3, r3, lr
            BCu = ROL(Esi, 61);
 8003468:	ea48 7843 	orr.w	r8, r8, r3, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 800346c:	ea22 0e01 	bic.w	lr, r2, r1
            BCu = ROL(Esi, 61);
 8003470:	08db      	lsrs	r3, r3, #3
 8003472:	ea43 734c 	orr.w	r3, r3, ip, lsl #29
            Aga =   BCa ^((~BCe)&  BCi );
 8003476:	ea8e 0e04 	eor.w	lr, lr, r4
 800347a:	ea27 0c06 	bic.w	ip, r7, r6
 800347e:	ea8c 0c0b 	eor.w	ip, ip, fp
 8003482:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
            Age =   BCe ^((~BCi)&  BCo );
 8003486:	ea25 0e02 	bic.w	lr, r5, r2
 800348a:	ea8e 0e01 	eor.w	lr, lr, r1
            Aga =   BCa ^((~BCe)&  BCi );
 800348e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
            Age =   BCe ^((~BCi)&  BCo );
 8003492:	ea2a 0c07 	bic.w	ip, sl, r7
 8003496:	ea8c 0c06 	eor.w	ip, ip, r6
 800349a:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
            Agi =   BCi ^((~BCo)&  BCu );
 800349e:	ea28 0e05 	bic.w	lr, r8, r5
 80034a2:	ea8e 0202 	eor.w	r2, lr, r2
            Age =   BCe ^((~BCi)&  BCo );
 80034a6:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
            Agi =   BCi ^((~BCo)&  BCu );
 80034aa:	ea23 0c0a 	bic.w	ip, r3, sl
 80034ae:	921a      	str	r2, [sp, #104]	; 0x68
 80034b0:	ea8c 0207 	eor.w	r2, ip, r7
 80034b4:	921b      	str	r2, [sp, #108]	; 0x6c
            Ago =   BCo ^((~BCu)&  BCa );
 80034b6:	ea2b 0203 	bic.w	r2, fp, r3
 80034ba:	ea82 020a 	eor.w	r2, r2, sl
            Agu =   BCu ^((~BCa)&  BCe );
 80034be:	ea21 0104 	bic.w	r1, r1, r4
 80034c2:	ea26 060b 	bic.w	r6, r6, fp
 80034c6:	4073      	eors	r3, r6
            Ago =   BCo ^((~BCu)&  BCa );
 80034c8:	921d      	str	r2, [sp, #116]	; 0x74
            Agu =   BCu ^((~BCa)&  BCe );
 80034ca:	ea81 0208 	eor.w	r2, r1, r8
 80034ce:	921e      	str	r2, [sp, #120]	; 0x78
 80034d0:	931f      	str	r3, [sp, #124]	; 0x7c

            Ebe ^= De;
 80034d2:	9a04      	ldr	r2, [sp, #16]
 80034d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
            Ago =   BCo ^((~BCu)&  BCa );
 80034d6:	ea24 0708 	bic.w	r7, r4, r8
 80034da:	407d      	eors	r5, r7
            Ebe ^= De;
 80034dc:	ea83 0702 	eor.w	r7, r3, r2
 80034e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80034e2:	9a05      	ldr	r2, [sp, #20]
            Ago =   BCo ^((~BCu)&  BCa );
 80034e4:	951c      	str	r5, [sp, #112]	; 0x70
            Ebe ^= De;
 80034e6:	ea83 0602 	eor.w	r6, r3, r2
            BCa = ROL(Ebe, 1);
            Egi ^= Di;
 80034ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034ec:	9a06      	ldr	r2, [sp, #24]
            BCa = ROL(Ebe, 1);
 80034ee:	ea4f 0846 	mov.w	r8, r6, lsl #1
            Egi ^= Di;
 80034f2:	ea83 0402 	eor.w	r4, r3, r2
 80034f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034f8:	9a07      	ldr	r2, [sp, #28]
            BCa = ROL(Ebe, 1);
 80034fa:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 80034fe:	007f      	lsls	r7, r7, #1
 8003500:	ea47 7bd6 	orr.w	fp, r7, r6, lsr #31
            Egi ^= Di;
 8003504:	ea83 0602 	eor.w	r6, r3, r2
            BCe = ROL(Egi, 6);
            Eko ^= Do;
 8003508:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800350a:	9a08      	ldr	r2, [sp, #32]
 800350c:	ea83 0502 	eor.w	r5, r3, r2
 8003510:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003514:	ea83 0102 	eor.w	r1, r3, r2
            BCi = ROL(Eko, 25);
 8003518:	066a      	lsls	r2, r5, #25
 800351a:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
            Emu ^= Du;
 800351e:	9b22      	ldr	r3, [sp, #136]	; 0x88
            BCi = ROL(Eko, 25);
 8003520:	ea4f 6a41 	mov.w	sl, r1, lsl #25
            Emu ^= Du;
 8003524:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCe = ROL(Egi, 6);
 8003526:	ea4f 1c86 	mov.w	ip, r6, lsl #6
            Emu ^= Du;
 800352a:	ea83 0701 	eor.w	r7, r3, r1
 800352e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003530:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCe = ROL(Egi, 6);
 8003532:	ea4c 6c94 	orr.w	ip, ip, r4, lsr #26
 8003536:	01a4      	lsls	r4, r4, #6
 8003538:	ea44 6996 	orr.w	r9, r4, r6, lsr #26
            Emu ^= Du;
 800353c:	ea83 0401 	eor.w	r4, r3, r1
            BCo = ROL(Emu, 8);
 8003540:	0221      	lsls	r1, r4, #8
 8003542:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
 8003546:	023f      	lsls	r7, r7, #8
 8003548:	ea47 6714 	orr.w	r7, r7, r4, lsr #24
            Esa ^= Da;
 800354c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800354e:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eko, 25);
 8003550:	ea4a 1ad5 	orr.w	sl, sl, r5, lsr #7
            Esa ^= Da;
 8003554:	4063      	eors	r3, r4
 8003556:	9d03      	ldr	r5, [sp, #12]
 8003558:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800355a:	406c      	eors	r4, r5
            BCu = ROL(Esa, 18);
 800355c:	ea4f 4e84 	mov.w	lr, r4, lsl #18
 8003560:	ea4e 3e93 	orr.w	lr, lr, r3, lsr #14
 8003564:	049b      	lsls	r3, r3, #18
 8003566:	ea43 3394 	orr.w	r3, r3, r4, lsr #14
            Aka =   BCa ^((~BCe)&  BCi );
 800356a:	ea2a 040c 	bic.w	r4, sl, ip
 800356e:	ea22 0509 	bic.w	r5, r2, r9
 8003572:	ea84 0408 	eor.w	r4, r4, r8
 8003576:	ea85 050b 	eor.w	r5, r5, fp
 800357a:	9421      	str	r4, [sp, #132]	; 0x84
            Ake =   BCe ^((~BCi)&  BCo );
 800357c:	ea27 0402 	bic.w	r4, r7, r2
 8003580:	ea84 0409 	eor.w	r4, r4, r9
            Aka =   BCa ^((~BCe)&  BCi );
 8003584:	9520      	str	r5, [sp, #128]	; 0x80
            Ake =   BCe ^((~BCi)&  BCo );
 8003586:	ea21 050a 	bic.w	r5, r1, sl
 800358a:	9422      	str	r4, [sp, #136]	; 0x88
 800358c:	ea85 040c 	eor.w	r4, r5, ip
            Aki =   BCi ^((~BCo)&  BCu );
 8003590:	ea23 0507 	bic.w	r5, r3, r7
 8003594:	406a      	eors	r2, r5
            Ake =   BCe ^((~BCi)&  BCo );
 8003596:	9423      	str	r4, [sp, #140]	; 0x8c
            Aki =   BCi ^((~BCo)&  BCu );
 8003598:	ea2e 0401 	bic.w	r4, lr, r1
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );
 800359c:	ea29 090b 	bic.w	r9, r9, fp
            Aki =   BCi ^((~BCo)&  BCu );
 80035a0:	9224      	str	r2, [sp, #144]	; 0x90
 80035a2:	ea84 020a 	eor.w	r2, r4, sl
            Aku =   BCu ^((~BCa)&  BCe );
 80035a6:	ea2c 0c08 	bic.w	ip, ip, r8
            Ako =   BCo ^((~BCu)&  BCa );
 80035aa:	ea2b 0403 	bic.w	r4, fp, r3
            Aki =   BCi ^((~BCo)&  BCu );
 80035ae:	9225      	str	r2, [sp, #148]	; 0x94
            Aku =   BCu ^((~BCa)&  BCe );
 80035b0:	ea89 0303 	eor.w	r3, r9, r3
            Ako =   BCo ^((~BCu)&  BCa );
 80035b4:	ea28 020e 	bic.w	r2, r8, lr
 80035b8:	404a      	eors	r2, r1
            Aku =   BCu ^((~BCa)&  BCe );
 80035ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80035bc:	ea8c 030e 	eor.w	r3, ip, lr
            Ako =   BCo ^((~BCu)&  BCa );
 80035c0:	9227      	str	r2, [sp, #156]	; 0x9c
            Aku =   BCu ^((~BCa)&  BCe );
 80035c2:	9329      	str	r3, [sp, #164]	; 0xa4

            Ebu ^= Du;
 80035c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
            BCe = ROL(Ega, 36);
            Eke ^= De;
 80035c8:	9905      	ldr	r1, [sp, #20]
            Ebu ^= Du;
 80035ca:	ea83 0502 	eor.w	r5, r3, r2
 80035ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80035d0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80035d2:	4053      	eors	r3, r2
            BCa = ROL(Ebu, 27);
 80035d4:	ea4f 6bc3 	mov.w	fp, r3, lsl #27
 80035d8:	ea4b 1b55 	orr.w	fp, fp, r5, lsr #5
 80035dc:	06ed      	lsls	r5, r5, #27
 80035de:	ea45 1c53 	orr.w	ip, r5, r3, lsr #5
            Ega ^= Da;
 80035e2:	9a02      	ldr	r2, [sp, #8]
 80035e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80035e6:	ea83 0a02 	eor.w	sl, r3, r2
 80035ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80035ec:	9a03      	ldr	r2, [sp, #12]
 80035ee:	ea83 0602 	eor.w	r6, r3, r2
            Eke ^= De;
 80035f2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80035f4:	9a04      	ldr	r2, [sp, #16]
 80035f6:	405a      	eors	r2, r3
 80035f8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
            BCe = ROL(Ega, 36);
 80035fa:	ea4f 7e1a 	mov.w	lr, sl, lsr #28
 80035fe:	ea4e 1e06 	orr.w	lr, lr, r6, lsl #4
            Eke ^= De;
 8003602:	ea83 0901 	eor.w	r9, r3, r1
            BCe = ROL(Ega, 36);
 8003606:	0f36      	lsrs	r6, r6, #28
 8003608:	ea46 160a 	orr.w	r6, r6, sl, lsl #4
            BCi = ROL(Eke, 10);
 800360c:	ea4f 2a89 	mov.w	sl, r9, lsl #10
 8003610:	ea4a 5a92 	orr.w	sl, sl, r2, lsr #22
            Emi ^= Di;
 8003614:	9906      	ldr	r1, [sp, #24]
            BCi = ROL(Eke, 10);
 8003616:	0293      	lsls	r3, r2, #10
            Emi ^= Di;
 8003618:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800361a:	ea82 0501 	eor.w	r5, r2, r1
 800361e:	9907      	ldr	r1, [sp, #28]
 8003620:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
            BCi = ROL(Eke, 10);
 8003622:	ea43 5399 	orr.w	r3, r3, r9, lsr #22
            Ako =   BCo ^((~BCu)&  BCa );
 8003626:	407c      	eors	r4, r7
            Emi ^= Di;
 8003628:	ea82 0901 	eor.w	r9, r2, r1
            Ako =   BCo ^((~BCu)&  BCa );
 800362c:	9426      	str	r4, [sp, #152]	; 0x98
            BCo = ROL(Emi, 15);
            Eso ^= Do;
 800362e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8003630:	9908      	ldr	r1, [sp, #32]
            BCo = ROL(Emi, 15);
 8003632:	ea4f 34c9 	mov.w	r4, r9, lsl #15
 8003636:	ea44 4455 	orr.w	r4, r4, r5, lsr #17
 800363a:	03ed      	lsls	r5, r5, #15
 800363c:	ea45 4859 	orr.w	r8, r5, r9, lsr #17
            Eso ^= Do;
 8003640:	4051      	eors	r1, r2
 8003642:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003644:	9a2b      	ldr	r2, [sp, #172]	; 0xac
            BCu = ROL(Eso, 56);
 8003646:	ea4f 2911 	mov.w	r9, r1, lsr #8
            Eso ^= Do;
 800364a:	ea82 0705 	eor.w	r7, r2, r5
            BCu = ROL(Eso, 56);
 800364e:	ea49 6907 	orr.w	r9, r9, r7, lsl #24
 8003652:	0a3f      	lsrs	r7, r7, #8
 8003654:	ea47 6701 	orr.w	r7, r7, r1, lsl #24
            Ama =   BCa ^((~BCe)&  BCi );
 8003658:	ea23 010e 	bic.w	r1, r3, lr
 800365c:	ea2a 0206 	bic.w	r2, sl, r6
 8003660:	ea81 010c 	eor.w	r1, r1, ip
 8003664:	ea82 020b 	eor.w	r2, r2, fp
 8003668:	912a      	str	r1, [sp, #168]	; 0xa8
            Ame =   BCe ^((~BCi)&  BCo );
 800366a:	ea28 0103 	bic.w	r1, r8, r3
 800366e:	ea81 010e 	eor.w	r1, r1, lr
            Ama =   BCa ^((~BCe)&  BCi );
 8003672:	922b      	str	r2, [sp, #172]	; 0xac
            Ame =   BCe ^((~BCi)&  BCo );
 8003674:	ea24 020a 	bic.w	r2, r4, sl
 8003678:	4072      	eors	r2, r6
 800367a:	912c      	str	r1, [sp, #176]	; 0xb0
            Ami =   BCi ^((~BCo)&  BCu );
 800367c:	ea29 0108 	bic.w	r1, r9, r8
 8003680:	404b      	eors	r3, r1
            Ame =   BCe ^((~BCi)&  BCo );
 8003682:	922d      	str	r2, [sp, #180]	; 0xb4
            Ami =   BCi ^((~BCo)&  BCu );
 8003684:	ea27 0204 	bic.w	r2, r7, r4
            Amo =   BCo ^((~BCu)&  BCa );
 8003688:	ea2c 0109 	bic.w	r1, ip, r9
            Ami =   BCi ^((~BCo)&  BCu );
 800368c:	932e      	str	r3, [sp, #184]	; 0xb8
 800368e:	ea82 030a 	eor.w	r3, r2, sl
 8003692:	932f      	str	r3, [sp, #188]	; 0xbc
            Amo =   BCo ^((~BCu)&  BCa );
 8003694:	ea2b 0207 	bic.w	r2, fp, r7
 8003698:	ea81 0308 	eor.w	r3, r1, r8
            Amu =   BCu ^((~BCa)&  BCe );
 800369c:	ea2e 0c0c 	bic.w	ip, lr, ip
            Amo =   BCo ^((~BCu)&  BCa );
 80036a0:	9330      	str	r3, [sp, #192]	; 0xc0
 80036a2:	ea82 0304 	eor.w	r3, r2, r4
            Amu =   BCu ^((~BCa)&  BCe );
 80036a6:	ea26 060b 	bic.w	r6, r6, fp
            Amo =   BCo ^((~BCu)&  BCa );
 80036aa:	9331      	str	r3, [sp, #196]	; 0xc4
            Amu =   BCu ^((~BCa)&  BCe );
 80036ac:	ea8c 0309 	eor.w	r3, ip, r9
 80036b0:	9332      	str	r3, [sp, #200]	; 0xc8
 80036b2:	ea86 0307 	eor.w	r3, r6, r7

            Ebi ^= Di;
 80036b6:	9a06      	ldr	r2, [sp, #24]
            Amu =   BCu ^((~BCa)&  BCe );
 80036b8:	9333      	str	r3, [sp, #204]	; 0xcc
            Ebi ^= Di;
 80036ba:	9b3b      	ldr	r3, [sp, #236]	; 0xec
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
 80036bc:	9908      	ldr	r1, [sp, #32]
            Ebi ^= Di;
 80036be:	ea83 0902 	eor.w	r9, r3, r2
 80036c2:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80036c4:	9a07      	ldr	r2, [sp, #28]
 80036c6:	ea83 0802 	eor.w	r8, r3, r2
            Ego ^= Do;
 80036ca:	9a37      	ldr	r2, [sp, #220]	; 0xdc
            BCa = ROL(Ebi, 62);
 80036cc:	ea4f 0c99 	mov.w	ip, r9, lsr #2
            Ego ^= Do;
 80036d0:	ea82 0601 	eor.w	r6, r2, r1
 80036d4:	9a38      	ldr	r2, [sp, #224]	; 0xe0
            BCe = ROL(Ego, 55);
            Eku ^= Du;
 80036d6:	990a      	ldr	r1, [sp, #40]	; 0x28
            BCa = ROL(Ebi, 62);
 80036d8:	ea4c 7c88 	orr.w	ip, ip, r8, lsl #30
 80036dc:	ea4f 0898 	mov.w	r8, r8, lsr #2
 80036e0:	ea48 7389 	orr.w	r3, r8, r9, lsl #30
            Ego ^= Do;
 80036e4:	ea82 0805 	eor.w	r8, r2, r5
            Eku ^= Du;
 80036e8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80036ea:	ea82 0501 	eor.w	r5, r2, r1
 80036ee:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80036f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
            BCi = ROL(Eku, 39);
 80036f2:	ea4f 6b55 	mov.w	fp, r5, lsr #25
            Eku ^= Du;
 80036f6:	ea82 0401 	eor.w	r4, r2, r1
            BCi = ROL(Eku, 39);
 80036fa:	ea4b 1bc4 	orr.w	fp, fp, r4, lsl #7
            Ema ^= Da;
 80036fe:	9a39      	ldr	r2, [sp, #228]	; 0xe4
            BCi = ROL(Eku, 39);
 8003700:	0e61      	lsrs	r1, r4, #25
            Ema ^= Da;
 8003702:	9c02      	ldr	r4, [sp, #8]
            BCi = ROL(Eku, 39);
 8003704:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
            Ema ^= Da;
 8003708:	4062      	eors	r2, r4
 800370a:	9d03      	ldr	r5, [sp, #12]
 800370c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800370e:	ea84 0a05 	eor.w	sl, r4, r5
            BCo = ROL(Ema, 41);
 8003712:	ea4f 54da 	mov.w	r4, sl, lsr #23
 8003716:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
            Ese ^= De;
 800371a:	9d04      	ldr	r5, [sp, #16]
            BCo = ROL(Ema, 41);
 800371c:	0dd7      	lsrs	r7, r2, #23
            Ese ^= De;
 800371e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8003720:	ea82 0905 	eor.w	r9, r2, r5
 8003724:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8003726:	9d05      	ldr	r5, [sp, #20]
            BCe = ROL(Ego, 55);
 8003728:	ea4f 2e56 	mov.w	lr, r6, lsr #9
 800372c:	ea4e 5ec8 	orr.w	lr, lr, r8, lsl #23
            BCo = ROL(Ema, 41);
 8003730:	ea47 274a 	orr.w	r7, r7, sl, lsl #9
            BCe = ROL(Ego, 55);
 8003734:	ea4f 2858 	mov.w	r8, r8, lsr #9
            Ese ^= De;
 8003738:	ea82 0a05 	eor.w	sl, r2, r5
            BCe = ROL(Ego, 55);
 800373c:	ea48 58c6 	orr.w	r8, r8, r6, lsl #23
            BCu = ROL(Ese, 2);
 8003740:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8003744:	ea46 7599 	orr.w	r5, r6, r9, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 8003748:	ea2b 020e 	bic.w	r2, fp, lr
            BCu = ROL(Ese, 2);
 800374c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003750:	ea49 7a9a 	orr.w	sl, r9, sl, lsr #30
            Asa =   BCa ^((~BCe)&  BCi );
 8003754:	ea82 020c 	eor.w	r2, r2, ip
 8003758:	ea21 0908 	bic.w	r9, r1, r8
 800375c:	920b      	str	r2, [sp, #44]	; 0x2c
 800375e:	ea89 0203 	eor.w	r2, r9, r3
 8003762:	9234      	str	r2, [sp, #208]	; 0xd0
            Ase =   BCe ^((~BCi)&  BCo );
 8003764:	ea27 060b 	bic.w	r6, r7, fp
 8003768:	ea24 0201 	bic.w	r2, r4, r1
 800376c:	ea86 060e 	eor.w	r6, r6, lr
 8003770:	ea82 0208 	eor.w	r2, r2, r8
 8003774:	9635      	str	r6, [sp, #212]	; 0xd4
 8003776:	9236      	str	r2, [sp, #216]	; 0xd8
            Asi =   BCi ^((~BCo)&  BCu );
 8003778:	ea2a 0607 	bic.w	r6, sl, r7
 800377c:	ea25 0204 	bic.w	r2, r5, r4
 8003780:	404a      	eors	r2, r1
 8003782:	ea86 060b 	eor.w	r6, r6, fp
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
 8003786:	ea2e 0e0c 	bic.w	lr, lr, ip
            Asi =   BCi ^((~BCo)&  BCu );
 800378a:	9637      	str	r6, [sp, #220]	; 0xdc
 800378c:	9238      	str	r2, [sp, #224]	; 0xe0
            Asu =   BCu ^((~BCa)&  BCe );
 800378e:	ea28 0603 	bic.w	r6, r8, r3
            Aso =   BCo ^((~BCu)&  BCa );
 8003792:	ea23 0205 	bic.w	r2, r3, r5
            Asu =   BCu ^((~BCa)&  BCe );
 8003796:	ea8e 030a 	eor.w	r3, lr, sl
 800379a:	933b      	str	r3, [sp, #236]	; 0xec
        for( round = 0; round < NROUNDS; round += 2 )
 800379c:	9b01      	ldr	r3, [sp, #4]
 800379e:	3310      	adds	r3, #16
            Aso =   BCo ^((~BCu)&  BCa );
 80037a0:	4062      	eors	r2, r4
        for( round = 0; round < NROUNDS; round += 2 )
 80037a2:	9301      	str	r3, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 80037a4:	923a      	str	r2, [sp, #232]	; 0xe8
        for( round = 0; round < NROUNDS; round += 2 )
 80037a6:	4b40      	ldr	r3, [pc, #256]	; (80038a8 <KeccakF1600_StatePermute+0xe58>)
 80037a8:	9a01      	ldr	r2, [sp, #4]
            Aso =   BCo ^((~BCu)&  BCa );
 80037aa:	ea2c 090a 	bic.w	r9, ip, sl
 80037ae:	ea89 0107 	eor.w	r1, r9, r7
        for( round = 0; round < NROUNDS; round += 2 )
 80037b2:	4293      	cmp	r3, r2
            Aso =   BCo ^((~BCu)&  BCa );
 80037b4:	9139      	str	r1, [sp, #228]	; 0xe4
            Asu =   BCu ^((~BCa)&  BCe );
 80037b6:	ea86 0605 	eor.w	r6, r6, r5
        for( round = 0; round < NROUNDS; round += 2 )
 80037ba:	f47f a9c7 	bne.w	8002b4c <KeccakF1600_StatePermute+0xfc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80037be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037c0:	6003      	str	r3, [r0, #0]
 80037c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037c4:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 80037c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037c8:	6083      	str	r3, [r0, #8]
 80037ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037cc:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 80037ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037d0:	6103      	str	r3, [r0, #16]
 80037d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037d4:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 80037d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80037d8:	6183      	str	r3, [r0, #24]
 80037da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037dc:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 80037de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80037e0:	6203      	str	r3, [r0, #32]
 80037e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037e4:	6243      	str	r3, [r0, #36]	; 0x24
        state[ 5] = Aga;
 80037e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80037e8:	6283      	str	r3, [r0, #40]	; 0x28
 80037ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80037ec:	62c3      	str	r3, [r0, #44]	; 0x2c
        state[ 6] = Age;
 80037ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80037f0:	6303      	str	r3, [r0, #48]	; 0x30
 80037f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80037f4:	6343      	str	r3, [r0, #52]	; 0x34
        state[ 7] = Agi;
 80037f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80037f8:	6383      	str	r3, [r0, #56]	; 0x38
 80037fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80037fc:	63c3      	str	r3, [r0, #60]	; 0x3c
        state[ 8] = Ago;
 80037fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003800:	6403      	str	r3, [r0, #64]	; 0x40
 8003802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003804:	6443      	str	r3, [r0, #68]	; 0x44
        state[ 9] = Agu;
 8003806:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003808:	6483      	str	r3, [r0, #72]	; 0x48
 800380a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800380c:	64c3      	str	r3, [r0, #76]	; 0x4c
        state[10] = Aka;
 800380e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003810:	6503      	str	r3, [r0, #80]	; 0x50
 8003812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003814:	6543      	str	r3, [r0, #84]	; 0x54
        state[11] = Ake;
 8003816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003818:	6583      	str	r3, [r0, #88]	; 0x58
 800381a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800381c:	65c3      	str	r3, [r0, #92]	; 0x5c
        state[12] = Aki;
 800381e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003820:	6603      	str	r3, [r0, #96]	; 0x60
 8003822:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003824:	6643      	str	r3, [r0, #100]	; 0x64
        state[13] = Ako;
 8003826:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003828:	6683      	str	r3, [r0, #104]	; 0x68
 800382a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800382c:	66c3      	str	r3, [r0, #108]	; 0x6c
        state[14] = Aku;
 800382e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003830:	6703      	str	r3, [r0, #112]	; 0x70
 8003832:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003834:	6743      	str	r3, [r0, #116]	; 0x74
        state[15] = Ama;
 8003836:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003838:	6783      	str	r3, [r0, #120]	; 0x78
 800383a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800383c:	67c3      	str	r3, [r0, #124]	; 0x7c
        state[16] = Ame;
 800383e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8003840:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8003844:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8003846:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
        state[17] = Ami;
 800384a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800384c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8003850:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8003852:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
        state[18] = Amo;
 8003856:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8003858:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 800385c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800385e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
        state[19] = Amu;
 8003862:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8003864:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
 8003868:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800386a:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        state[20] = Asa;
 800386e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003870:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
 8003874:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8003876:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
        state[21] = Ase;
 800387a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800387c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 8003880:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8003882:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
        state[22] = Asi;
 8003886:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8003888:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
 800388c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800388e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
        state[23] = Aso;
 8003892:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003894:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
        state[24] = Asu;
 8003898:	9b3b      	ldr	r3, [sp, #236]	; 0xec
        state[23] = Aso;
 800389a:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
        state[24] = Asu;
 800389e:	e9c0 3630 	strd	r3, r6, [r0, #192]	; 0xc0

        #undef    round
}
 80038a2:	b03f      	add	sp, #252	; 0xfc
 80038a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038a8:	08005070 	.word	0x08005070

080038ac <Reset_Handler>:
 80038ac:	2100      	movs	r1, #0
 80038ae:	e003      	b.n	80038b8 <LoopCopyDataInit>

080038b0 <CopyDataInit>:
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <LoopForever+0x2>)
 80038b2:	585b      	ldr	r3, [r3, r1]
 80038b4:	5043      	str	r3, [r0, r1]
 80038b6:	3104      	adds	r1, #4

080038b8 <LoopCopyDataInit>:
 80038b8:	480a      	ldr	r0, [pc, #40]	; (80038e4 <LoopForever+0x6>)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <LoopForever+0xa>)
 80038bc:	1842      	adds	r2, r0, r1
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3f6      	bcc.n	80038b0 <CopyDataInit>
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <LoopForever+0xe>)
 80038c4:	e002      	b.n	80038cc <LoopFillZerobss>

080038c6 <FillZerobss>:
 80038c6:	2300      	movs	r3, #0
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	3204      	adds	r2, #4

080038cc <LoopFillZerobss>:
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <LoopForever+0x12>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d3f9      	bcc.n	80038c6 <FillZerobss>
 80038d2:	f3af 8000 	nop.w
 80038d6:	f000 f851 	bl	800397c <__libc_init_array>
 80038da:	f7fd fc2f 	bl	800113c <main>

080038de <LoopForever>:
 80038de:	e7fe      	b.n	80038de <LoopForever>
 80038e0:	08005184 	.word	0x08005184
 80038e4:	10000000 	.word	0x10000000
 80038e8:	10000844 	.word	0x10000844
 80038ec:	10000844 	.word	0x10000844
 80038f0:	10000f48 	.word	0x10000f48

080038f4 <BusFault_Handler>:
 80038f4:	e7fe      	b.n	80038f4 <BusFault_Handler>
 80038f6:	0000      	movs	r0, r0

080038f8 <calloc>:
 80038f8:	b410      	push	{r4}
 80038fa:	4c04      	ldr	r4, [pc, #16]	; (800390c <calloc+0x14>)
 80038fc:	4603      	mov	r3, r0
 80038fe:	460a      	mov	r2, r1
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	bc10      	pop	{r4}
 8003904:	4619      	mov	r1, r3
 8003906:	f000 b803 	b.w	8003910 <_calloc_r>
 800390a:	bf00      	nop
 800390c:	10000000 	.word	0x10000000

08003910 <_calloc_r>:
 8003910:	b510      	push	{r4, lr}
 8003912:	fb02 f101 	mul.w	r1, r2, r1
 8003916:	f000 f85d 	bl	80039d4 <_malloc_r>
 800391a:	4604      	mov	r4, r0
 800391c:	b168      	cbz	r0, 800393a <_calloc_r+0x2a>
 800391e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8003922:	f022 0203 	bic.w	r2, r2, #3
 8003926:	3a04      	subs	r2, #4
 8003928:	2a24      	cmp	r2, #36	; 0x24
 800392a:	d818      	bhi.n	800395e <_calloc_r+0x4e>
 800392c:	2a13      	cmp	r2, #19
 800392e:	d806      	bhi.n	800393e <_calloc_r+0x2e>
 8003930:	4602      	mov	r2, r0
 8003932:	2300      	movs	r3, #0
 8003934:	e9c2 3300 	strd	r3, r3, [r2]
 8003938:	6093      	str	r3, [r2, #8]
 800393a:	4620      	mov	r0, r4
 800393c:	bd10      	pop	{r4, pc}
 800393e:	2300      	movs	r3, #0
 8003940:	2a1b      	cmp	r2, #27
 8003942:	e9c0 3300 	strd	r3, r3, [r0]
 8003946:	d90f      	bls.n	8003968 <_calloc_r+0x58>
 8003948:	2a24      	cmp	r2, #36	; 0x24
 800394a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800394e:	bf11      	iteee	ne
 8003950:	f100 0210 	addne.w	r2, r0, #16
 8003954:	6103      	streq	r3, [r0, #16]
 8003956:	f100 0218 	addeq.w	r2, r0, #24
 800395a:	6143      	streq	r3, [r0, #20]
 800395c:	e7e9      	b.n	8003932 <_calloc_r+0x22>
 800395e:	2100      	movs	r1, #0
 8003960:	f000 fae8 	bl	8003f34 <memset>
 8003964:	4620      	mov	r0, r4
 8003966:	bd10      	pop	{r4, pc}
 8003968:	f100 0208 	add.w	r2, r0, #8
 800396c:	e7e1      	b.n	8003932 <_calloc_r+0x22>
 800396e:	bf00      	nop

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	10000000 	.word	0x10000000

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4e0d      	ldr	r6, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4d0d      	ldr	r5, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1b76      	subs	r6, r6, r5
 8003984:	10b6      	asrs	r6, r6, #2
 8003986:	d006      	beq.n	8003996 <__libc_init_array+0x1a>
 8003988:	2400      	movs	r4, #0
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	3401      	adds	r4, #1
 8003990:	4798      	blx	r3
 8003992:	42a6      	cmp	r6, r4
 8003994:	d1f9      	bne.n	800398a <__libc_init_array+0xe>
 8003996:	4e09      	ldr	r6, [pc, #36]	; (80039bc <__libc_init_array+0x40>)
 8003998:	4d09      	ldr	r5, [pc, #36]	; (80039c0 <__libc_init_array+0x44>)
 800399a:	1b76      	subs	r6, r6, r5
 800399c:	f000 fd00 	bl	80043a0 <_init>
 80039a0:	10b6      	asrs	r6, r6, #2
 80039a2:	d006      	beq.n	80039b2 <__libc_init_array+0x36>
 80039a4:	2400      	movs	r4, #0
 80039a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039aa:	3401      	adds	r4, #1
 80039ac:	4798      	blx	r3
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d1f9      	bne.n	80039a6 <__libc_init_array+0x2a>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	08005178 	.word	0x08005178
 80039b8:	08005178 	.word	0x08005178
 80039bc:	08005180 	.word	0x08005180
 80039c0:	08005178 	.word	0x08005178

080039c4 <free>:
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <free+0xc>)
 80039c6:	4601      	mov	r1, r0
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f000 bb99 	b.w	8004100 <_free_r>
 80039ce:	bf00      	nop
 80039d0:	10000000 	.word	0x10000000

080039d4 <_malloc_r>:
 80039d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d8:	f101 060b 	add.w	r6, r1, #11
 80039dc:	2e16      	cmp	r6, #22
 80039de:	b083      	sub	sp, #12
 80039e0:	4604      	mov	r4, r0
 80039e2:	d824      	bhi.n	8003a2e <_malloc_r+0x5a>
 80039e4:	2910      	cmp	r1, #16
 80039e6:	f200 80ba 	bhi.w	8003b5e <_malloc_r+0x18a>
 80039ea:	f000 faf5 	bl	8003fd8 <__malloc_lock>
 80039ee:	2610      	movs	r6, #16
 80039f0:	2218      	movs	r2, #24
 80039f2:	2002      	movs	r0, #2
 80039f4:	4fb5      	ldr	r7, [pc, #724]	; (8003ccc <_malloc_r+0x2f8>)
 80039f6:	443a      	add	r2, r7
 80039f8:	f1a2 0108 	sub.w	r1, r2, #8
 80039fc:	6853      	ldr	r3, [r2, #4]
 80039fe:	428b      	cmp	r3, r1
 8003a00:	f000 80ba 	beq.w	8003b78 <_malloc_r+0x1a4>
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	68d9      	ldr	r1, [r3, #12]
 8003a08:	f022 0203 	bic.w	r2, r2, #3
 8003a0c:	441a      	add	r2, r3
 8003a0e:	689d      	ldr	r5, [r3, #8]
 8003a10:	60e9      	str	r1, [r5, #12]
 8003a12:	608d      	str	r5, [r1, #8]
 8003a14:	6851      	ldr	r1, [r2, #4]
 8003a16:	f041 0101 	orr.w	r1, r1, #1
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	6051      	str	r1, [r2, #4]
 8003a1e:	f103 0508 	add.w	r5, r3, #8
 8003a22:	f000 fadf 	bl	8003fe4 <__malloc_unlock>
 8003a26:	4628      	mov	r0, r5
 8003a28:	b003      	add	sp, #12
 8003a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a2e:	f036 0607 	bics.w	r6, r6, #7
 8003a32:	f100 8094 	bmi.w	8003b5e <_malloc_r+0x18a>
 8003a36:	42b1      	cmp	r1, r6
 8003a38:	f200 8091 	bhi.w	8003b5e <_malloc_r+0x18a>
 8003a3c:	f000 facc 	bl	8003fd8 <__malloc_lock>
 8003a40:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8003a44:	f0c0 819a 	bcc.w	8003d7c <_malloc_r+0x3a8>
 8003a48:	0a73      	lsrs	r3, r6, #9
 8003a4a:	f000 808f 	beq.w	8003b6c <_malloc_r+0x198>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	f200 816f 	bhi.w	8003d32 <_malloc_r+0x35e>
 8003a54:	09b3      	lsrs	r3, r6, #6
 8003a56:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003a5a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8003a5e:	00c3      	lsls	r3, r0, #3
 8003a60:	4f9a      	ldr	r7, [pc, #616]	; (8003ccc <_malloc_r+0x2f8>)
 8003a62:	443b      	add	r3, r7
 8003a64:	f1a3 0508 	sub.w	r5, r3, #8
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	429d      	cmp	r5, r3
 8003a6c:	d106      	bne.n	8003a7c <_malloc_r+0xa8>
 8003a6e:	e00c      	b.n	8003a8a <_malloc_r+0xb6>
 8003a70:	2900      	cmp	r1, #0
 8003a72:	f280 8127 	bge.w	8003cc4 <_malloc_r+0x2f0>
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	429d      	cmp	r5, r3
 8003a7a:	d006      	beq.n	8003a8a <_malloc_r+0xb6>
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	f022 0203 	bic.w	r2, r2, #3
 8003a82:	1b91      	subs	r1, r2, r6
 8003a84:	290f      	cmp	r1, #15
 8003a86:	ddf3      	ble.n	8003a70 <_malloc_r+0x9c>
 8003a88:	4660      	mov	r0, ip
 8003a8a:	693d      	ldr	r5, [r7, #16]
 8003a8c:	f8df c240 	ldr.w	ip, [pc, #576]	; 8003cd0 <_malloc_r+0x2fc>
 8003a90:	4565      	cmp	r5, ip
 8003a92:	d07c      	beq.n	8003b8e <_malloc_r+0x1ba>
 8003a94:	686a      	ldr	r2, [r5, #4]
 8003a96:	f022 0203 	bic.w	r2, r2, #3
 8003a9a:	1b93      	subs	r3, r2, r6
 8003a9c:	2b0f      	cmp	r3, #15
 8003a9e:	f300 817b 	bgt.w	8003d98 <_malloc_r+0x3c4>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8003aa8:	f280 816c 	bge.w	8003d84 <_malloc_r+0x3b0>
 8003aac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003ab0:	f080 811a 	bcs.w	8003ce8 <_malloc_r+0x314>
 8003ab4:	08d3      	lsrs	r3, r2, #3
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8003abe:	2201      	movs	r2, #1
 8003ac0:	fa02 f20e 	lsl.w	r2, r2, lr
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8003aca:	f8c5 e008 	str.w	lr, [r5, #8]
 8003ace:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8003ad2:	3908      	subs	r1, #8
 8003ad4:	60e9      	str	r1, [r5, #12]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8003adc:	f8ce 500c 	str.w	r5, [lr, #12]
 8003ae0:	1083      	asrs	r3, r0, #2
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4099      	lsls	r1, r3
 8003ae6:	4291      	cmp	r1, r2
 8003ae8:	d857      	bhi.n	8003b9a <_malloc_r+0x1c6>
 8003aea:	4211      	tst	r1, r2
 8003aec:	d106      	bne.n	8003afc <_malloc_r+0x128>
 8003aee:	f020 0003 	bic.w	r0, r0, #3
 8003af2:	0049      	lsls	r1, r1, #1
 8003af4:	4211      	tst	r1, r2
 8003af6:	f100 0004 	add.w	r0, r0, #4
 8003afa:	d0fa      	beq.n	8003af2 <_malloc_r+0x11e>
 8003afc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8003b00:	464d      	mov	r5, r9
 8003b02:	4686      	mov	lr, r0
 8003b04:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8003b08:	4545      	cmp	r5, r8
 8003b0a:	d108      	bne.n	8003b1e <_malloc_r+0x14a>
 8003b0c:	e11d      	b.n	8003d4a <_malloc_r+0x376>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f280 8124 	bge.w	8003d5c <_malloc_r+0x388>
 8003b14:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8003b18:	4545      	cmp	r5, r8
 8003b1a:	f000 8116 	beq.w	8003d4a <_malloc_r+0x376>
 8003b1e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003b22:	f022 0203 	bic.w	r2, r2, #3
 8003b26:	1b93      	subs	r3, r2, r6
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	ddf0      	ble.n	8003b0e <_malloc_r+0x13a>
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 8003b32:	eb08 0106 	add.w	r1, r8, r6
 8003b36:	f046 0601 	orr.w	r6, r6, #1
 8003b3a:	f8c8 6004 	str.w	r6, [r8, #4]
 8003b3e:	60ec      	str	r4, [r5, #12]
 8003b40:	60a5      	str	r5, [r4, #8]
 8003b42:	f043 0401 	orr.w	r4, r3, #1
 8003b46:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003b4a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8003b4e:	604c      	str	r4, [r1, #4]
 8003b50:	f848 3002 	str.w	r3, [r8, r2]
 8003b54:	f000 fa46 	bl	8003fe4 <__malloc_unlock>
 8003b58:	f108 0508 	add.w	r5, r8, #8
 8003b5c:	e002      	b.n	8003b64 <_malloc_r+0x190>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	2500      	movs	r5, #0
 8003b64:	4628      	mov	r0, r5
 8003b66:	b003      	add	sp, #12
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b70:	2040      	movs	r0, #64	; 0x40
 8003b72:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8003b76:	e773      	b.n	8003a60 <_malloc_r+0x8c>
 8003b78:	68d3      	ldr	r3, [r2, #12]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	bf08      	it	eq
 8003b7e:	3002      	addeq	r0, #2
 8003b80:	f47f af40 	bne.w	8003a04 <_malloc_r+0x30>
 8003b84:	693d      	ldr	r5, [r7, #16]
 8003b86:	f8df c148 	ldr.w	ip, [pc, #328]	; 8003cd0 <_malloc_r+0x2fc>
 8003b8a:	4565      	cmp	r5, ip
 8003b8c:	d182      	bne.n	8003a94 <_malloc_r+0xc0>
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	1083      	asrs	r3, r0, #2
 8003b92:	2101      	movs	r1, #1
 8003b94:	4099      	lsls	r1, r3
 8003b96:	4291      	cmp	r1, r2
 8003b98:	d9a7      	bls.n	8003aea <_malloc_r+0x116>
 8003b9a:	68bd      	ldr	r5, [r7, #8]
 8003b9c:	686b      	ldr	r3, [r5, #4]
 8003b9e:	f023 0903 	bic.w	r9, r3, #3
 8003ba2:	454e      	cmp	r6, r9
 8003ba4:	d803      	bhi.n	8003bae <_malloc_r+0x1da>
 8003ba6:	eba9 0306 	sub.w	r3, r9, r6
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	dc7a      	bgt.n	8003ca4 <_malloc_r+0x2d0>
 8003bae:	f8df b124 	ldr.w	fp, [pc, #292]	; 8003cd4 <_malloc_r+0x300>
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <_malloc_r+0x304>)
 8003bb4:	f8db 2000 	ldr.w	r2, [fp]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3201      	adds	r2, #1
 8003bbc:	4433      	add	r3, r6
 8003bbe:	eb05 0a09 	add.w	sl, r5, r9
 8003bc2:	f000 8133 	beq.w	8003e2c <_malloc_r+0x458>
 8003bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bca:	330f      	adds	r3, #15
 8003bcc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 8003bd0:	f028 080f 	bic.w	r8, r8, #15
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f000 fa0a 	bl	8003ff0 <_sbrk_r>
 8003bdc:	1c41      	adds	r1, r0, #1
 8003bde:	4602      	mov	r2, r0
 8003be0:	f000 80f3 	beq.w	8003dca <_malloc_r+0x3f6>
 8003be4:	4582      	cmp	sl, r0
 8003be6:	f200 80ee 	bhi.w	8003dc6 <_malloc_r+0x3f2>
 8003bea:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <_malloc_r+0x308>)
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	4441      	add	r1, r8
 8003bf0:	6019      	str	r1, [r3, #0]
 8003bf2:	4608      	mov	r0, r1
 8003bf4:	f000 814e 	beq.w	8003e94 <_malloc_r+0x4c0>
 8003bf8:	f8db 1000 	ldr.w	r1, [fp]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	3101      	adds	r1, #1
 8003c00:	bf1b      	ittet	ne
 8003c02:	eba2 0a0a 	subne.w	sl, r2, sl
 8003c06:	4450      	addne	r0, sl
 8003c08:	f8cb 2000 	streq.w	r2, [fp]
 8003c0c:	6018      	strne	r0, [r3, #0]
 8003c0e:	f012 0b07 	ands.w	fp, r2, #7
 8003c12:	f000 8117 	beq.w	8003e44 <_malloc_r+0x470>
 8003c16:	f1cb 0108 	rsb	r1, fp, #8
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 8003c20:	4490      	add	r8, r2
 8003c22:	3108      	adds	r1, #8
 8003c24:	eba1 0108 	sub.w	r1, r1, r8
 8003c28:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	4620      	mov	r0, r4
 8003c30:	9200      	str	r2, [sp, #0]
 8003c32:	f000 f9dd 	bl	8003ff0 <_sbrk_r>
 8003c36:	1c42      	adds	r2, r0, #1
 8003c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c3c:	f000 814f 	beq.w	8003ede <_malloc_r+0x50a>
 8003c40:	1a80      	subs	r0, r0, r2
 8003c42:	eb00 080a 	add.w	r8, r0, sl
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	60ba      	str	r2, [r7, #8]
 8003c4a:	f048 0001 	orr.w	r0, r8, #1
 8003c4e:	4451      	add	r1, sl
 8003c50:	42bd      	cmp	r5, r7
 8003c52:	6050      	str	r0, [r2, #4]
 8003c54:	6019      	str	r1, [r3, #0]
 8003c56:	f000 8129 	beq.w	8003eac <_malloc_r+0x4d8>
 8003c5a:	f1b9 0f0f 	cmp.w	r9, #15
 8003c5e:	f240 8127 	bls.w	8003eb0 <_malloc_r+0x4dc>
 8003c62:	6868      	ldr	r0, [r5, #4]
 8003c64:	f1a9 0c0c 	sub.w	ip, r9, #12
 8003c68:	f02c 0c07 	bic.w	ip, ip, #7
 8003c6c:	f000 0001 	and.w	r0, r0, #1
 8003c70:	ea40 000c 	orr.w	r0, r0, ip
 8003c74:	6068      	str	r0, [r5, #4]
 8003c76:	f04f 0e05 	mov.w	lr, #5
 8003c7a:	eb05 000c 	add.w	r0, r5, ip
 8003c7e:	f1bc 0f0f 	cmp.w	ip, #15
 8003c82:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8003c86:	f200 8132 	bhi.w	8003eee <_malloc_r+0x51a>
 8003c8a:	6850      	ldr	r0, [r2, #4]
 8003c8c:	4615      	mov	r5, r2
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <_malloc_r+0x30c>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	428a      	cmp	r2, r1
 8003c94:	bf38      	it	cc
 8003c96:	6019      	strcc	r1, [r3, #0]
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <_malloc_r+0x310>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	428a      	cmp	r2, r1
 8003c9e:	bf38      	it	cc
 8003ca0:	6019      	strcc	r1, [r3, #0]
 8003ca2:	e094      	b.n	8003dce <_malloc_r+0x3fa>
 8003ca4:	19aa      	adds	r2, r5, r6
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	f046 0601 	orr.w	r6, r6, #1
 8003cae:	606e      	str	r6, [r5, #4]
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	60ba      	str	r2, [r7, #8]
 8003cb4:	6053      	str	r3, [r2, #4]
 8003cb6:	f000 f995 	bl	8003fe4 <__malloc_unlock>
 8003cba:	3508      	adds	r5, #8
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	b003      	add	sp, #12
 8003cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	441a      	add	r2, r3
 8003cc8:	e6a1      	b.n	8003a0e <_malloc_r+0x3a>
 8003cca:	bf00      	nop
 8003ccc:	10000430 	.word	0x10000430
 8003cd0:	10000438 	.word	0x10000438
 8003cd4:	10000838 	.word	0x10000838
 8003cd8:	10000f38 	.word	0x10000f38
 8003cdc:	10000f08 	.word	0x10000f08
 8003ce0:	10000f30 	.word	0x10000f30
 8003ce4:	10000f34 	.word	0x10000f34
 8003ce8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8003cec:	ea4f 2352 	mov.w	r3, r2, lsr #9
 8003cf0:	d363      	bcc.n	8003dba <_malloc_r+0x3e6>
 8003cf2:	2b14      	cmp	r3, #20
 8003cf4:	f200 80b7 	bhi.w	8003e66 <_malloc_r+0x492>
 8003cf8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003cfc:	00c9      	lsls	r1, r1, #3
 8003cfe:	335b      	adds	r3, #91	; 0x5b
 8003d00:	eb07 0e01 	add.w	lr, r7, r1
 8003d04:	5879      	ldr	r1, [r7, r1]
 8003d06:	f1ae 0e08 	sub.w	lr, lr, #8
 8003d0a:	458e      	cmp	lr, r1
 8003d0c:	f000 8091 	beq.w	8003e32 <_malloc_r+0x45e>
 8003d10:	684b      	ldr	r3, [r1, #4]
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d902      	bls.n	8003d20 <_malloc_r+0x34c>
 8003d1a:	6889      	ldr	r1, [r1, #8]
 8003d1c:	458e      	cmp	lr, r1
 8003d1e:	d1f7      	bne.n	8003d10 <_malloc_r+0x33c>
 8003d20:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 8003d2a:	f8ce 5008 	str.w	r5, [lr, #8]
 8003d2e:	60cd      	str	r5, [r1, #12]
 8003d30:	e6d6      	b.n	8003ae0 <_malloc_r+0x10c>
 8003d32:	2b14      	cmp	r3, #20
 8003d34:	d959      	bls.n	8003dea <_malloc_r+0x416>
 8003d36:	2b54      	cmp	r3, #84	; 0x54
 8003d38:	f200 809d 	bhi.w	8003e76 <_malloc_r+0x4a2>
 8003d3c:	0b33      	lsrs	r3, r6, #12
 8003d3e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8003d42:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8003d46:	00c3      	lsls	r3, r0, #3
 8003d48:	e68a      	b.n	8003a60 <_malloc_r+0x8c>
 8003d4a:	f10e 0e01 	add.w	lr, lr, #1
 8003d4e:	f01e 0f03 	tst.w	lr, #3
 8003d52:	f105 0508 	add.w	r5, r5, #8
 8003d56:	f47f aed5 	bne.w	8003b04 <_malloc_r+0x130>
 8003d5a:	e051      	b.n	8003e00 <_malloc_r+0x42c>
 8003d5c:	4442      	add	r2, r8
 8003d5e:	4645      	mov	r5, r8
 8003d60:	6853      	ldr	r3, [r2, #4]
 8003d62:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6053      	str	r3, [r2, #4]
 8003d6c:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8003d70:	4620      	mov	r0, r4
 8003d72:	60d9      	str	r1, [r3, #12]
 8003d74:	608b      	str	r3, [r1, #8]
 8003d76:	f000 f935 	bl	8003fe4 <__malloc_unlock>
 8003d7a:	e6f3      	b.n	8003b64 <_malloc_r+0x190>
 8003d7c:	08f0      	lsrs	r0, r6, #3
 8003d7e:	f106 0208 	add.w	r2, r6, #8
 8003d82:	e637      	b.n	80039f4 <_malloc_r+0x20>
 8003d84:	442a      	add	r2, r5
 8003d86:	4620      	mov	r0, r4
 8003d88:	6853      	ldr	r3, [r2, #4]
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6053      	str	r3, [r2, #4]
 8003d90:	3508      	adds	r5, #8
 8003d92:	f000 f927 	bl	8003fe4 <__malloc_unlock>
 8003d96:	e6e5      	b.n	8003b64 <_malloc_r+0x190>
 8003d98:	19a9      	adds	r1, r5, r6
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f046 0601 	orr.w	r6, r6, #1
 8003da0:	f043 0401 	orr.w	r4, r3, #1
 8003da4:	606e      	str	r6, [r5, #4]
 8003da6:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003daa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8003dae:	604c      	str	r4, [r1, #4]
 8003db0:	50ab      	str	r3, [r5, r2]
 8003db2:	f000 f917 	bl	8003fe4 <__malloc_unlock>
 8003db6:	3508      	adds	r5, #8
 8003db8:	e6d4      	b.n	8003b64 <_malloc_r+0x190>
 8003dba:	0993      	lsrs	r3, r2, #6
 8003dbc:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8003dc0:	00c9      	lsls	r1, r1, #3
 8003dc2:	3338      	adds	r3, #56	; 0x38
 8003dc4:	e79c      	b.n	8003d00 <_malloc_r+0x32c>
 8003dc6:	42bd      	cmp	r5, r7
 8003dc8:	d05f      	beq.n	8003e8a <_malloc_r+0x4b6>
 8003dca:	68bd      	ldr	r5, [r7, #8]
 8003dcc:	6868      	ldr	r0, [r5, #4]
 8003dce:	f020 0803 	bic.w	r8, r0, #3
 8003dd2:	4546      	cmp	r6, r8
 8003dd4:	eba8 0306 	sub.w	r3, r8, r6
 8003dd8:	d802      	bhi.n	8003de0 <_malloc_r+0x40c>
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	f73f af62 	bgt.w	8003ca4 <_malloc_r+0x2d0>
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 f8ff 	bl	8003fe4 <__malloc_unlock>
 8003de6:	2500      	movs	r5, #0
 8003de8:	e6bc      	b.n	8003b64 <_malloc_r+0x190>
 8003dea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003dee:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8003df2:	00c3      	lsls	r3, r0, #3
 8003df4:	e634      	b.n	8003a60 <_malloc_r+0x8c>
 8003df6:	f859 3908 	ldr.w	r3, [r9], #-8
 8003dfa:	454b      	cmp	r3, r9
 8003dfc:	f040 8096 	bne.w	8003f2c <_malloc_r+0x558>
 8003e00:	f010 0f03 	tst.w	r0, #3
 8003e04:	f100 30ff 	add.w	r0, r0, #4294967295
 8003e08:	d1f5      	bne.n	8003df6 <_malloc_r+0x422>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	ea23 0301 	bic.w	r3, r3, r1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	0049      	lsls	r1, r1, #1
 8003e14:	4299      	cmp	r1, r3
 8003e16:	f63f aec0 	bhi.w	8003b9a <_malloc_r+0x1c6>
 8003e1a:	b919      	cbnz	r1, 8003e24 <_malloc_r+0x450>
 8003e1c:	e6bd      	b.n	8003b9a <_malloc_r+0x1c6>
 8003e1e:	0049      	lsls	r1, r1, #1
 8003e20:	f10e 0e04 	add.w	lr, lr, #4
 8003e24:	4219      	tst	r1, r3
 8003e26:	d0fa      	beq.n	8003e1e <_malloc_r+0x44a>
 8003e28:	4670      	mov	r0, lr
 8003e2a:	e667      	b.n	8003afc <_malloc_r+0x128>
 8003e2c:	f103 0810 	add.w	r8, r3, #16
 8003e30:	e6d0      	b.n	8003bd4 <_malloc_r+0x200>
 8003e32:	109a      	asrs	r2, r3, #2
 8003e34:	f04f 0801 	mov.w	r8, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	fa08 f202 	lsl.w	r2, r8, r2
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	e770      	b.n	8003d26 <_malloc_r+0x352>
 8003e44:	eb02 0108 	add.w	r1, r2, r8
 8003e48:	4249      	negs	r1, r1
 8003e4a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8003e4e:	4651      	mov	r1, sl
 8003e50:	4620      	mov	r0, r4
 8003e52:	9200      	str	r2, [sp, #0]
 8003e54:	f000 f8cc 	bl	8003ff0 <_sbrk_r>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e5e:	f47f aeef 	bne.w	8003c40 <_malloc_r+0x26c>
 8003e62:	46da      	mov	sl, fp
 8003e64:	e6ef      	b.n	8003c46 <_malloc_r+0x272>
 8003e66:	2b54      	cmp	r3, #84	; 0x54
 8003e68:	d825      	bhi.n	8003eb6 <_malloc_r+0x4e2>
 8003e6a:	0b13      	lsrs	r3, r2, #12
 8003e6c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8003e70:	00c9      	lsls	r1, r1, #3
 8003e72:	336e      	adds	r3, #110	; 0x6e
 8003e74:	e744      	b.n	8003d00 <_malloc_r+0x32c>
 8003e76:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003e7a:	d825      	bhi.n	8003ec8 <_malloc_r+0x4f4>
 8003e7c:	0bf3      	lsrs	r3, r6, #15
 8003e7e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8003e82:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8003e86:	00c3      	lsls	r3, r0, #3
 8003e88:	e5ea      	b.n	8003a60 <_malloc_r+0x8c>
 8003e8a:	4b29      	ldr	r3, [pc, #164]	; (8003f30 <_malloc_r+0x55c>)
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	4440      	add	r0, r8
 8003e90:	6018      	str	r0, [r3, #0]
 8003e92:	e6b1      	b.n	8003bf8 <_malloc_r+0x224>
 8003e94:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 8003e98:	f1bc 0f00 	cmp.w	ip, #0
 8003e9c:	f47f aeac 	bne.w	8003bf8 <_malloc_r+0x224>
 8003ea0:	68bd      	ldr	r5, [r7, #8]
 8003ea2:	44c8      	add	r8, r9
 8003ea4:	f048 0001 	orr.w	r0, r8, #1
 8003ea8:	6068      	str	r0, [r5, #4]
 8003eaa:	e6f0      	b.n	8003c8e <_malloc_r+0x2ba>
 8003eac:	4615      	mov	r5, r2
 8003eae:	e6ee      	b.n	8003c8e <_malloc_r+0x2ba>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	6053      	str	r3, [r2, #4]
 8003eb4:	e794      	b.n	8003de0 <_malloc_r+0x40c>
 8003eb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003eba:	d823      	bhi.n	8003f04 <_malloc_r+0x530>
 8003ebc:	0bd3      	lsrs	r3, r2, #15
 8003ebe:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003ec2:	00c9      	lsls	r1, r1, #3
 8003ec4:	3377      	adds	r3, #119	; 0x77
 8003ec6:	e71b      	b.n	8003d00 <_malloc_r+0x32c>
 8003ec8:	f240 5254 	movw	r2, #1364	; 0x554
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d823      	bhi.n	8003f18 <_malloc_r+0x544>
 8003ed0:	0cb3      	lsrs	r3, r6, #18
 8003ed2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8003ed6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8003eda:	00c3      	lsls	r3, r0, #3
 8003edc:	e5c0      	b.n	8003a60 <_malloc_r+0x8c>
 8003ede:	f1ab 0b08 	sub.w	fp, fp, #8
 8003ee2:	44d8      	add	r8, fp
 8003ee4:	eba8 0802 	sub.w	r8, r8, r2
 8003ee8:	f04f 0a00 	mov.w	sl, #0
 8003eec:	e6ab      	b.n	8003c46 <_malloc_r+0x272>
 8003eee:	f105 0108 	add.w	r1, r5, #8
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f000 f903 	bl	8004100 <_free_r>
 8003efa:	68bd      	ldr	r5, [r7, #8]
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	6868      	ldr	r0, [r5, #4]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	e6c4      	b.n	8003c8e <_malloc_r+0x2ba>
 8003f04:	f240 5154 	movw	r1, #1364	; 0x554
 8003f08:	428b      	cmp	r3, r1
 8003f0a:	d80b      	bhi.n	8003f24 <_malloc_r+0x550>
 8003f0c:	0c93      	lsrs	r3, r2, #18
 8003f0e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8003f12:	00c9      	lsls	r1, r1, #3
 8003f14:	337c      	adds	r3, #124	; 0x7c
 8003f16:	e6f3      	b.n	8003d00 <_malloc_r+0x32c>
 8003f18:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8003f1c:	207f      	movs	r0, #127	; 0x7f
 8003f1e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8003f22:	e59d      	b.n	8003a60 <_malloc_r+0x8c>
 8003f24:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8003f28:	237e      	movs	r3, #126	; 0x7e
 8003f2a:	e6e9      	b.n	8003d00 <_malloc_r+0x32c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	e770      	b.n	8003e12 <_malloc_r+0x43e>
 8003f30:	10000f08 	.word	0x10000f08

08003f34 <memset>:
 8003f34:	0783      	lsls	r3, r0, #30
 8003f36:	b530      	push	{r4, r5, lr}
 8003f38:	d048      	beq.n	8003fcc <memset+0x98>
 8003f3a:	1e54      	subs	r4, r2, #1
 8003f3c:	2a00      	cmp	r2, #0
 8003f3e:	d03f      	beq.n	8003fc0 <memset+0x8c>
 8003f40:	b2ca      	uxtb	r2, r1
 8003f42:	4603      	mov	r3, r0
 8003f44:	e001      	b.n	8003f4a <memset+0x16>
 8003f46:	3c01      	subs	r4, #1
 8003f48:	d33a      	bcc.n	8003fc0 <memset+0x8c>
 8003f4a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f4e:	079d      	lsls	r5, r3, #30
 8003f50:	d1f9      	bne.n	8003f46 <memset+0x12>
 8003f52:	2c03      	cmp	r4, #3
 8003f54:	d92d      	bls.n	8003fb2 <memset+0x7e>
 8003f56:	b2cd      	uxtb	r5, r1
 8003f58:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003f5c:	2c0f      	cmp	r4, #15
 8003f5e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003f62:	d936      	bls.n	8003fd2 <memset+0x9e>
 8003f64:	f1a4 0210 	sub.w	r2, r4, #16
 8003f68:	f022 0c0f 	bic.w	ip, r2, #15
 8003f6c:	f103 0e20 	add.w	lr, r3, #32
 8003f70:	44e6      	add	lr, ip
 8003f72:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8003f76:	f103 0210 	add.w	r2, r3, #16
 8003f7a:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003f7e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003f82:	3210      	adds	r2, #16
 8003f84:	4572      	cmp	r2, lr
 8003f86:	d1f8      	bne.n	8003f7a <memset+0x46>
 8003f88:	f10c 0201 	add.w	r2, ip, #1
 8003f8c:	f014 0f0c 	tst.w	r4, #12
 8003f90:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003f94:	f004 0c0f 	and.w	ip, r4, #15
 8003f98:	d013      	beq.n	8003fc2 <memset+0x8e>
 8003f9a:	f1ac 0304 	sub.w	r3, ip, #4
 8003f9e:	f023 0303 	bic.w	r3, r3, #3
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f842 5b04 	str.w	r5, [r2], #4
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d1fb      	bne.n	8003fa6 <memset+0x72>
 8003fae:	f00c 0403 	and.w	r4, ip, #3
 8003fb2:	b12c      	cbz	r4, 8003fc0 <memset+0x8c>
 8003fb4:	b2ca      	uxtb	r2, r1
 8003fb6:	441c      	add	r4, r3
 8003fb8:	f803 2b01 	strb.w	r2, [r3], #1
 8003fbc:	429c      	cmp	r4, r3
 8003fbe:	d1fb      	bne.n	8003fb8 <memset+0x84>
 8003fc0:	bd30      	pop	{r4, r5, pc}
 8003fc2:	4664      	mov	r4, ip
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	d1f4      	bne.n	8003fb4 <memset+0x80>
 8003fca:	e7f9      	b.n	8003fc0 <memset+0x8c>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4614      	mov	r4, r2
 8003fd0:	e7bf      	b.n	8003f52 <memset+0x1e>
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	46a4      	mov	ip, r4
 8003fd6:	e7e0      	b.n	8003f9a <memset+0x66>

08003fd8 <__malloc_lock>:
 8003fd8:	4801      	ldr	r0, [pc, #4]	; (8003fe0 <__malloc_lock+0x8>)
 8003fda:	f000 b997 	b.w	800430c <__retarget_lock_acquire_recursive>
 8003fde:	bf00      	nop
 8003fe0:	10000f40 	.word	0x10000f40

08003fe4 <__malloc_unlock>:
 8003fe4:	4801      	ldr	r0, [pc, #4]	; (8003fec <__malloc_unlock+0x8>)
 8003fe6:	f000 b993 	b.w	8004310 <__retarget_lock_release_recursive>
 8003fea:	bf00      	nop
 8003fec:	10000f40 	.word	0x10000f40

08003ff0 <_sbrk_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4d07      	ldr	r5, [pc, #28]	; (8004010 <_sbrk_r+0x20>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	602a      	str	r2, [r5, #0]
 8003ffc:	f7fe fca8 	bl	8002950 <_sbrk>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d000      	beq.n	8004006 <_sbrk_r+0x16>
 8004004:	bd38      	pop	{r3, r4, r5, pc}
 8004006:	682b      	ldr	r3, [r5, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0fb      	beq.n	8004004 <_sbrk_r+0x14>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	10000f44 	.word	0x10000f44

08004014 <register_fini>:
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <register_fini+0xc>)
 8004016:	b113      	cbz	r3, 800401e <register_fini+0xa>
 8004018:	4802      	ldr	r0, [pc, #8]	; (8004024 <register_fini+0x10>)
 800401a:	f000 b805 	b.w	8004028 <atexit>
 800401e:	4770      	bx	lr
 8004020:	00000000 	.word	0x00000000
 8004024:	08004035 	.word	0x08004035

08004028 <atexit>:
 8004028:	2300      	movs	r3, #0
 800402a:	4601      	mov	r1, r0
 800402c:	461a      	mov	r2, r3
 800402e:	4618      	mov	r0, r3
 8004030:	f000 b970 	b.w	8004314 <__register_exitproc>

08004034 <__libc_fini_array>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <__libc_fini_array+0x24>)
 8004038:	4d08      	ldr	r5, [pc, #32]	; (800405c <__libc_fini_array+0x28>)
 800403a:	1b5b      	subs	r3, r3, r5
 800403c:	109c      	asrs	r4, r3, #2
 800403e:	d007      	beq.n	8004050 <__libc_fini_array+0x1c>
 8004040:	3b04      	subs	r3, #4
 8004042:	441d      	add	r5, r3
 8004044:	3c01      	subs	r4, #1
 8004046:	f855 3904 	ldr.w	r3, [r5], #-4
 800404a:	4798      	blx	r3
 800404c:	2c00      	cmp	r4, #0
 800404e:	d1f9      	bne.n	8004044 <__libc_fini_array+0x10>
 8004050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004054:	f000 b9aa 	b.w	80043ac <_fini>
 8004058:	08005184 	.word	0x08005184
 800405c:	08005180 	.word	0x08005180

08004060 <_malloc_trim_r>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	4f24      	ldr	r7, [pc, #144]	; (80040f4 <_malloc_trim_r+0x94>)
 8004064:	460c      	mov	r4, r1
 8004066:	4606      	mov	r6, r0
 8004068:	f7ff ffb6 	bl	8003fd8 <__malloc_lock>
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	6855      	ldr	r5, [r2, #4]
 8004070:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8004074:	330f      	adds	r3, #15
 8004076:	f025 0503 	bic.w	r5, r5, #3
 800407a:	442b      	add	r3, r5
 800407c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004080:	f023 030f 	bic.w	r3, r3, #15
 8004084:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8004088:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800408c:	db07      	blt.n	800409e <_malloc_trim_r+0x3e>
 800408e:	2100      	movs	r1, #0
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff ffad 	bl	8003ff0 <_sbrk_r>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	442b      	add	r3, r5
 800409a:	4298      	cmp	r0, r3
 800409c:	d004      	beq.n	80040a8 <_malloc_trim_r+0x48>
 800409e:	4630      	mov	r0, r6
 80040a0:	f7ff ffa0 	bl	8003fe4 <__malloc_unlock>
 80040a4:	2000      	movs	r0, #0
 80040a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040a8:	4261      	negs	r1, r4
 80040aa:	4630      	mov	r0, r6
 80040ac:	f7ff ffa0 	bl	8003ff0 <_sbrk_r>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d00d      	beq.n	80040d0 <_malloc_trim_r+0x70>
 80040b4:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <_malloc_trim_r+0x98>)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1b2d      	subs	r5, r5, r4
 80040ba:	f045 0501 	orr.w	r5, r5, #1
 80040be:	605d      	str	r5, [r3, #4]
 80040c0:	6813      	ldr	r3, [r2, #0]
 80040c2:	4630      	mov	r0, r6
 80040c4:	1b1b      	subs	r3, r3, r4
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	f7ff ff8c 	bl	8003fe4 <__malloc_unlock>
 80040cc:	2001      	movs	r0, #1
 80040ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d0:	2100      	movs	r1, #0
 80040d2:	4630      	mov	r0, r6
 80040d4:	f7ff ff8c 	bl	8003ff0 <_sbrk_r>
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	1a83      	subs	r3, r0, r2
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	ddde      	ble.n	800409e <_malloc_trim_r+0x3e>
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6053      	str	r3, [r2, #4]
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <_malloc_trim_r+0x9c>)
 80040e8:	4903      	ldr	r1, [pc, #12]	; (80040f8 <_malloc_trim_r+0x98>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1ac0      	subs	r0, r0, r3
 80040ee:	6008      	str	r0, [r1, #0]
 80040f0:	e7d5      	b.n	800409e <_malloc_trim_r+0x3e>
 80040f2:	bf00      	nop
 80040f4:	10000430 	.word	0x10000430
 80040f8:	10000f08 	.word	0x10000f08
 80040fc:	10000838 	.word	0x10000838

08004100 <_free_r>:
 8004100:	2900      	cmp	r1, #0
 8004102:	d061      	beq.n	80041c8 <_free_r+0xc8>
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	460c      	mov	r4, r1
 8004108:	4606      	mov	r6, r0
 800410a:	f7ff ff65 	bl	8003fd8 <__malloc_lock>
 800410e:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8004112:	4f7b      	ldr	r7, [pc, #492]	; (8004300 <_free_r+0x200>)
 8004114:	f1a4 0508 	sub.w	r5, r4, #8
 8004118:	f022 0101 	bic.w	r1, r2, #1
 800411c:	eb05 0c01 	add.w	ip, r5, r1
 8004120:	68b8      	ldr	r0, [r7, #8]
 8004122:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004126:	4560      	cmp	r0, ip
 8004128:	f023 0303 	bic.w	r3, r3, #3
 800412c:	f000 808b 	beq.w	8004246 <_free_r+0x146>
 8004130:	07d2      	lsls	r2, r2, #31
 8004132:	f8cc 3004 	str.w	r3, [ip, #4]
 8004136:	d432      	bmi.n	800419e <_free_r+0x9e>
 8004138:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800413c:	1aad      	subs	r5, r5, r2
 800413e:	4411      	add	r1, r2
 8004140:	68aa      	ldr	r2, [r5, #8]
 8004142:	f107 0008 	add.w	r0, r7, #8
 8004146:	4282      	cmp	r2, r0
 8004148:	d06a      	beq.n	8004220 <_free_r+0x120>
 800414a:	eb0c 0403 	add.w	r4, ip, r3
 800414e:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8004152:	68ec      	ldr	r4, [r5, #12]
 8004154:	60d4      	str	r4, [r2, #12]
 8004156:	f01e 0f01 	tst.w	lr, #1
 800415a:	60a2      	str	r2, [r4, #8]
 800415c:	f000 8097 	beq.w	800428e <_free_r+0x18e>
 8004160:	f041 0301 	orr.w	r3, r1, #1
 8004164:	606b      	str	r3, [r5, #4]
 8004166:	f8cc 1000 	str.w	r1, [ip]
 800416a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800416e:	d235      	bcs.n	80041dc <_free_r+0xdc>
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	08cb      	lsrs	r3, r1, #3
 8004174:	0948      	lsrs	r0, r1, #5
 8004176:	2101      	movs	r1, #1
 8004178:	3301      	adds	r3, #1
 800417a:	4081      	lsls	r1, r0
 800417c:	4311      	orrs	r1, r2
 800417e:	6079      	str	r1, [r7, #4]
 8004180:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8004184:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8004188:	3a08      	subs	r2, #8
 800418a:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800418e:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8004192:	60cd      	str	r5, [r1, #12]
 8004194:	4630      	mov	r0, r6
 8004196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800419a:	f7ff bf23 	b.w	8003fe4 <__malloc_unlock>
 800419e:	eb0c 0203 	add.w	r2, ip, r3
 80041a2:	6852      	ldr	r2, [r2, #4]
 80041a4:	07d0      	lsls	r0, r2, #31
 80041a6:	d410      	bmi.n	80041ca <_free_r+0xca>
 80041a8:	4419      	add	r1, r3
 80041aa:	f107 0008 	add.w	r0, r7, #8
 80041ae:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80041b2:	4283      	cmp	r3, r0
 80041b4:	d073      	beq.n	800429e <_free_r+0x19e>
 80041b6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	6093      	str	r3, [r2, #8]
 80041be:	f041 0301 	orr.w	r3, r1, #1
 80041c2:	606b      	str	r3, [r5, #4]
 80041c4:	5069      	str	r1, [r5, r1]
 80041c6:	e7d0      	b.n	800416a <_free_r+0x6a>
 80041c8:	4770      	bx	lr
 80041ca:	f041 0301 	orr.w	r3, r1, #1
 80041ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80041d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80041d6:	f8cc 1000 	str.w	r1, [ip]
 80041da:	d3c9      	bcc.n	8004170 <_free_r+0x70>
 80041dc:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80041e0:	ea4f 2351 	mov.w	r3, r1, lsr #9
 80041e4:	d248      	bcs.n	8004278 <_free_r+0x178>
 80041e6:	098b      	lsrs	r3, r1, #6
 80041e8:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80041ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041f0:	00c3      	lsls	r3, r0, #3
 80041f2:	18f8      	adds	r0, r7, r3
 80041f4:	58fb      	ldr	r3, [r7, r3]
 80041f6:	3808      	subs	r0, #8
 80041f8:	4298      	cmp	r0, r3
 80041fa:	d059      	beq.n	80042b0 <_free_r+0x1b0>
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	f022 0203 	bic.w	r2, r2, #3
 8004202:	428a      	cmp	r2, r1
 8004204:	d902      	bls.n	800420c <_free_r+0x10c>
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4298      	cmp	r0, r3
 800420a:	d1f7      	bne.n	80041fc <_free_r+0xfc>
 800420c:	68d8      	ldr	r0, [r3, #12]
 800420e:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8004212:	6085      	str	r5, [r0, #8]
 8004214:	60dd      	str	r5, [r3, #12]
 8004216:	4630      	mov	r0, r6
 8004218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800421c:	f7ff bee2 	b.w	8003fe4 <__malloc_unlock>
 8004220:	eb0c 0203 	add.w	r2, ip, r3
 8004224:	6852      	ldr	r2, [r2, #4]
 8004226:	07d2      	lsls	r2, r2, #31
 8004228:	d463      	bmi.n	80042f2 <_free_r+0x1f2>
 800422a:	440b      	add	r3, r1
 800422c:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8004230:	60ca      	str	r2, [r1, #12]
 8004232:	6091      	str	r1, [r2, #8]
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	606a      	str	r2, [r5, #4]
 800423a:	4630      	mov	r0, r6
 800423c:	50eb      	str	r3, [r5, r3]
 800423e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004242:	f7ff becf 	b.w	8003fe4 <__malloc_unlock>
 8004246:	440b      	add	r3, r1
 8004248:	07d1      	lsls	r1, r2, #31
 800424a:	d407      	bmi.n	800425c <_free_r+0x15c>
 800424c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004250:	1aad      	subs	r5, r5, r2
 8004252:	4413      	add	r3, r2
 8004254:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8004258:	60ca      	str	r2, [r1, #12]
 800425a:	6091      	str	r1, [r2, #8]
 800425c:	f043 0201 	orr.w	r2, r3, #1
 8004260:	606a      	str	r2, [r5, #4]
 8004262:	4a28      	ldr	r2, [pc, #160]	; (8004304 <_free_r+0x204>)
 8004264:	60bd      	str	r5, [r7, #8]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d893      	bhi.n	8004194 <_free_r+0x94>
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <_free_r+0x208>)
 800426e:	4630      	mov	r0, r6
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	f7ff fef5 	bl	8004060 <_malloc_trim_r>
 8004276:	e78d      	b.n	8004194 <_free_r+0x94>
 8004278:	2b14      	cmp	r3, #20
 800427a:	d90a      	bls.n	8004292 <_free_r+0x192>
 800427c:	2b54      	cmp	r3, #84	; 0x54
 800427e:	d81f      	bhi.n	80042c0 <_free_r+0x1c0>
 8004280:	0b0b      	lsrs	r3, r1, #12
 8004282:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004286:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800428a:	00c3      	lsls	r3, r0, #3
 800428c:	e7b1      	b.n	80041f2 <_free_r+0xf2>
 800428e:	4419      	add	r1, r3
 8004290:	e78d      	b.n	80041ae <_free_r+0xae>
 8004292:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004296:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800429a:	00c3      	lsls	r3, r0, #3
 800429c:	e7a9      	b.n	80041f2 <_free_r+0xf2>
 800429e:	f041 0301 	orr.w	r3, r1, #1
 80042a2:	e9c7 5504 	strd	r5, r5, [r7, #16]
 80042a6:	e9c5 0002 	strd	r0, r0, [r5, #8]
 80042aa:	606b      	str	r3, [r5, #4]
 80042ac:	5069      	str	r1, [r5, r1]
 80042ae:	e771      	b.n	8004194 <_free_r+0x94>
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	1092      	asrs	r2, r2, #2
 80042b4:	2401      	movs	r4, #1
 80042b6:	fa04 f202 	lsl.w	r2, r4, r2
 80042ba:	430a      	orrs	r2, r1
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	e7a6      	b.n	800420e <_free_r+0x10e>
 80042c0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80042c4:	d806      	bhi.n	80042d4 <_free_r+0x1d4>
 80042c6:	0bcb      	lsrs	r3, r1, #15
 80042c8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80042cc:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80042d0:	00c3      	lsls	r3, r0, #3
 80042d2:	e78e      	b.n	80041f2 <_free_r+0xf2>
 80042d4:	f240 5254 	movw	r2, #1364	; 0x554
 80042d8:	4293      	cmp	r3, r2
 80042da:	d806      	bhi.n	80042ea <_free_r+0x1ea>
 80042dc:	0c8b      	lsrs	r3, r1, #18
 80042de:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80042e2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80042e6:	00c3      	lsls	r3, r0, #3
 80042e8:	e783      	b.n	80041f2 <_free_r+0xf2>
 80042ea:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80042ee:	227e      	movs	r2, #126	; 0x7e
 80042f0:	e77f      	b.n	80041f2 <_free_r+0xf2>
 80042f2:	f041 0301 	orr.w	r3, r1, #1
 80042f6:	606b      	str	r3, [r5, #4]
 80042f8:	f8cc 1000 	str.w	r1, [ip]
 80042fc:	e74a      	b.n	8004194 <_free_r+0x94>
 80042fe:	bf00      	nop
 8004300:	10000430 	.word	0x10000430
 8004304:	1000083c 	.word	0x1000083c
 8004308:	10000f38 	.word	0x10000f38

0800430c <__retarget_lock_acquire_recursive>:
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <__retarget_lock_release_recursive>:
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <__register_exitproc>:
 8004314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8004398 <__register_exitproc+0x84>
 800431c:	4606      	mov	r6, r0
 800431e:	f8da 0000 	ldr.w	r0, [sl]
 8004322:	4698      	mov	r8, r3
 8004324:	460f      	mov	r7, r1
 8004326:	4691      	mov	r9, r2
 8004328:	f7ff fff0 	bl	800430c <__retarget_lock_acquire_recursive>
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <__register_exitproc+0x88>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8004334:	b324      	cbz	r4, 8004380 <__register_exitproc+0x6c>
 8004336:	6865      	ldr	r5, [r4, #4]
 8004338:	2d1f      	cmp	r5, #31
 800433a:	dc26      	bgt.n	800438a <__register_exitproc+0x76>
 800433c:	b95e      	cbnz	r6, 8004356 <__register_exitproc+0x42>
 800433e:	1c6b      	adds	r3, r5, #1
 8004340:	3502      	adds	r5, #2
 8004342:	f8da 0000 	ldr.w	r0, [sl]
 8004346:	6063      	str	r3, [r4, #4]
 8004348:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800434c:	f7ff ffe0 	bl	8004310 <__retarget_lock_release_recursive>
 8004350:	2000      	movs	r0, #0
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800435a:	2301      	movs	r3, #1
 800435c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8004360:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8004364:	40ab      	lsls	r3, r5
 8004366:	431a      	orrs	r2, r3
 8004368:	2e02      	cmp	r6, #2
 800436a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800436e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8004372:	d1e4      	bne.n	800433e <__register_exitproc+0x2a>
 8004374:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800437e:	e7de      	b.n	800433e <__register_exitproc+0x2a>
 8004380:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8004384:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8004388:	e7d5      	b.n	8004336 <__register_exitproc+0x22>
 800438a:	f8da 0000 	ldr.w	r0, [sl]
 800438e:	f7ff ffbf 	bl	8004310 <__retarget_lock_release_recursive>
 8004392:	f04f 30ff 	mov.w	r0, #4294967295
 8004396:	e7dc      	b.n	8004352 <__register_exitproc+0x3e>
 8004398:	10000840 	.word	0x10000840
 800439c:	08005174 	.word	0x08005174

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr
